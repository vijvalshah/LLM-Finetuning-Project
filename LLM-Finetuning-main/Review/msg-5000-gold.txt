If there are no manifests, then entries should be `CloseableIterable.empty()`, not the manifest iterable. That doesn't need to be closeable.
Didn't went with backwards compatibility since it's still in beta
Is this actually a lint related change?
I don't know if there are strict conventions about this, but I think the name of the warning should be the diagnosis, not the suggested course of action. In this case, that would mean changing the name of the warning to `interactive-exit` or something like that.
what to do if some failed? just logging?
It provides a type called Node which is a fully functional bee client. This package is where the dependencies are injected. It is not just a glue-code, it is concept of node.
Same here, can we presume if `privacyParameters` is set we need goQuorum handling? Or is there a goQuorum sub option in `privacyParametes`?
In case the method is `void`, there won't be any children and `getChild(0)` throws. We'll need to check with `isVoid()` for that case. I'll update this when I merge.
I'd rephrase it as `Simplify chained comparison between the operands`.
can you replace the tabs with 2 spaces please to match the rest of the project?
Please explain why a user would enable this (space savings), and the requirements for this option to be safe.
I believe it's misleading name for the condition. I prefer "element_to_be_disable" We can have a condition, when element is enabled but we can't click it, because another element overlays above it. So, If we use "unclickable" we might mislead people, who use that condition to verify if element can be clicked
Should this be called something that indicates its function, rather than its content? validationMessagePrefix, or similar?
This winds up flipping the desired values. Looks like I gave you a bum steer @kevpl
are you sure you can read version by this artifactid?
To minimize the possibility of regret, perhaps we name this `ZapLogger`.
Since the IdentifierScheme's don't change without us making additional code changes, perhaps this should be added as a constant as we previously did with Perms?
You can most likely remove that (and the try/finally) too, as we shouldn't have any flickering from removing/inserting tabs anymore now.
I looks like we can make `allowOptionalMappings` non-optional since we have another overload without it. (I thought this generated a compiler warning, but maybe it's just R#)
I think if we can provide a more convenient method to add configs . e.g. public static void addConfig(String k, Object v)
Minor detail, but let's use the interpolated template string syntax instead.
I think these can all be .name() to get the value we are looking for
nit: a switch perhaps?
can we remove this since `getDocValues` already returns an iterator? (we might need to do `T extends DocIdSetIterator` above)
How often do we expect this to trigger? Should we maybe put it behind an if logger.Debug()?
This now throws when running tests (maybe the move to java 11??). Do we want to keep it?
As far as I can see you're not rollbacking transaction anywhere. This could potentially cause further issues(and very hard to debug ones) with not synchronized transactions between message handling. Is the transaction required in this place anyway? You seem only to be fetching data here. ack method is performing some updates so it makes sense
We should probably use ctrl-enter if `tab` is given, just like in `follow_selected`?
I think it will revert the change @antoninbas did on purpose 05eee251c9c53400277def576f92d614ca234898
`stateDB := NewStateDBAdapter(sm, 0, hash.ZeroHash256, NotFixTopicCopyBugOption())`
As mentioned below, I'm not sure why this is only allowing refs that are tagged with `*` at the start!
Should this be using the `CUDA_SAFE_CALL` macro here?
Type is redundant since it is inherited.
Add explanations around these variables - what do they mean, how they should be configured, etc.
1 trailing blank lines detected.
Huh, this seems weird to me... Surely the suspenders render was called again in order to get the new `<div>Hello second 2</div>` output... Imma take a peak at these tests to understand what's going on
Maybe a single quote would be compatible with airbnb style.
This needs to be synchronous for the timeout to work.
nit: probably swap the if condition and `if/else` and check `NETCOREAPP2_1` which looks more natural.
This can be simplified somewhat to `pointer.Int32Ptr(0)`. But it is not necessary.
the variable names are not entirely clear. "bucket" is essentially the regex that follows gcs naming pattern, right? if so, it should be changed to bucketregex. and then bucketregex, gsregex should be changed to something more specific to what pattern the regex is supposed to match.
So we weren't able to hide the fact that the file wasn't pre-generated and had to introduce this "option" to detect that?
Overall LGTM, one nit is that I think `partitionFields` here would be good to be renamed so that it's easy to tell it's just for collision detection. Also I wonder if we want to do this check for other transformations too (e.g. bucket, and record numBuckets in the string), so that we might be able to combine `fields` and `partitionFields` into potentially something like a LinkedHashMap?
I feel like we do this in a lot of places should we move that out into its own PR?
Does this fail validation if you now use the `upload` key instead of `source`?
A small nit: This variable should start with a lower case letter.
This shouldn't be required. What was going on here?
need to fix the error message here
Is the plan to rename this later?
Setting this to `true` means that it will always get merged in. The way merging is done here is that if a value is its zero value (`false` for `bool`), the value is considered unchanged. In order for this to work, you'll need to change this to be a `*bool` type instead.
I do not care much, but you could as well just return bool(focusObject and focusObject.isProtected) here and avoid the if check? I know, really trivial.
Why is this needed here?
Is this necessary?
We don't store empty dictionary entries anymore: they bring no benefits, only trouble.
I think its safe to remove this if we're removing `reIndex` outright. The description shows us that the test is "An example showing how to force a reindex of a collection"
Didn't we have specific logic for handling slices vs structs?
Is this required for tuple encoding? This is confusing.
You imports are out of order
You can use `http.MethodHead` here.
Is there a reason why we need a special case for Email at this point? Is the idea that other methods can turn into Email even if it's not configured as a top-level option?
Do we also need to validate `envName` flag then? `appName` and `envName` are used in `initLogsSvc` which are called by `svc logs` from within `Execute()`
I think it would be better to have a separate configuration option for specifying which HDFS interaction layer to use instead of using the existing hadoop version option. I think there are still cases where things might have to rely on Hadoop version for other things, and overwriting that information with "snakebite" would make that difficult. The existing hadoop version option could still be used to distinguish the different HDFS CLI flavours.
Why this to be a public function?
Dashboard stories also need to have the default padding.
again: it is a bad practice to have some global parameters with such common names for unit test purpose.
This is Very Meh . We want to get rid of `role_data`, and it's an internal field.
this seems unrelated to the rest of the PR, although related to the original report
How about a `app/views/layouts/pages.html.erb` layout that contains the HTML head, body, wrappers and yield's the `new-topics` template into it? I think we might be able to delete the `app/controllers/pages_controller.rb` file at that point.
unrelated but just changing for consistency with code below it
3.6 seconds? what does it stand for?
Could you please elaborate the reason for not using `gkc_summary` like the values above? I ask this, because I assume what we want to collect is a histogram of event loop latency, and we use `gkc_summary` for collecting histograms.
Maybe, `import` would be a better name.
@mhils didn't we try to get rid of these (now empty) wrapper classes?
Is there any reason not to have the `static` modifier for the logger? _(that would be in keeping with the reference being uppercase)_
Is there a scenario were we want to get an arbitrary set of blobs that don't share a common root?
Does this still need to be a partial? is the intention down the line to move back towards a conditionally different title?
concatHosts may be a better func name to explain this?
Should this be `const`?
This is the `GET % HTTP/1.1` scenario right?
Please revert this file.
> i#4670 signl-interrupted special ibl xfer frag: Unlink if signal pending nit: This looks like one of many commits with the text before the colon. nit: On the long side: 56 or 60 chars is what some views show Spelling error.
guessing this method could/should close it but I didn't see where it was getting called.
Can we deuglify this?
Should we remove this entirely now then?
I just updated a number of sites using older versions of Roots onto WP 3.6 and this little function change was required. Multiple search bars were displaying when I used the search widget in a widgetized sidebar. Updated the roots_get_search_form as seen in this change resolved it for me!
Having to write this util makes me think that maybe we should have kept the csv_input stuff. I don't know.
same nit here: maybe word as - "disables validation of the temporal cluster's server certificate"
This rule is quite specific to qbft and so I don't think it should be part of the common rules. Would rather the common bft code didn't know anything about contract based voting/validator governance.
@cretz Just a thought: what if another renewal process updates the certificate between the beginning of this for loop (above on line 67) and actually calling RenewCert? Even though we have a read lock on the certCache, something else could have renewed it by now, and finished, which would cause this certificate to be renewed twice. Could you double-check my thinking here and see if that's a plausible 'race' condition? I wonder if the lock needs to be put over this whole function. (It's still early here; I could be wrong...)
Would it make sense to include this file via composer files-autoloading instead?
Annotations in this hunk should follow PhpDoc style (above the occurrence, type first)
We generally do this via tags in the Rakefile, not separate environment variables.
Use const for "user", same as below
I'm very curious about why using buffered-channel. Is there something wrong to use an unbuffered channel with zero capacity?
Make the flag derived default available in the readiness controller
I would rather find the code that inverts the logic and remove that.
move this to below `antrea.io` import section
please update the year. it can be setup in intellij template.
Why should we move it into `bootstrap.go` file?
Please give a more descriptive name and add a command to explain what it does.
Explain that this must match the `CommonName` of the first (or is it last?) certificate in the chain, where the first certificate is the chain root CA and the last certificate is the leaf certificate.
Why do we need to pull bluebird in here?
Not sure if this is what we really need, we might need to adjust this constant after more extensive benchmarking.
"and returns that" -- it looks like this method has no return value.
Add `browser` import
This file should probably not be touched as the formatting of the string seems to be a test in itself ?
should users also do a triple-flush?
@mprobst Looks like the `isStdLib` function has been removed in the latest Python plugin. Any thoughts on how to handle this? The new version doesn't seem to have any relevant alternatives.
`attachGamepadScript` above can also be placed inside.
Personally I wish we didn't have a proto for every single little thing we do. RequestShardAction with an enum for the action type would be a lot cleaner imo, but I'm pretty sure that ship has sailed :) Just kvetching.
I'm not sure about this, please check the usages. It's only used currently to reverse it, maybe we should eliminate this method completely instead.
Line length (PEP8, should be 80 chars max)
This seems like a common enough pattern to offer an equivalent wrapper in `ot-fs-util.c`, no?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
we don't mention `last_modified` here?
I don't think you should be changing the dag unilaterally at parse time. If cores isn't specified, then it isn't specified.
nit: This should perhaps be called `waitForAndReportSelectionChange`, as it affects braille as well, not just speech.
can we move the code before deleteNodeFromDB ? this way even if the node crashes after remove config we can still re-run decommission again ?
Let's call this `share` and not `upload` - the user wants to share their flows, uploading is just the implementation of that. :)
maybe prefix these with `appsec_` for consistency?
Do we actually use Include anywhere yet or is this just for completion?
We should remove this
Better remove this dependency altogether
Hmm should we clean up container resources before task resources here? or the order does not really matter here?
Is there a reason why this is change is in the same commit?
Add a GetSerialPortOutput method to Instance that way you don't need to access the client, also it makes the call cleaner as you don't have the odd i.Client and path.Base(i.Project), path.Base(i.Zone)
Much simpler than a weird and confusing ``convolve`` call!
@kevinansfield Would be cool if you can take a   if this is the best way to add `subscriptions` info on member model. This uses the transform + separate model definition way which seemed to be the right way from other references in Admin  
nit: move this to the group below.
Is new model format backward compatible with current v2?
nit: error starts with capital letter
Ideally, we'd fold the schema into an expanded system_meta, but this is a good first step.
Could you add a type hint? `percentiles: Optional[List[float]] = None`
Are there tests for this? What happens when you get to limit?
Nit: `Headless` is one word, not two, and so doesn't need camelcasing in this way.
I'm not 100% sure, but I think this should be `explorable`. If not, I think `explorable` can be removed entirely.
`options['binary'] = WebDriver::Chrome.path` if set?
I would have expected the Ready method to need to change to be a `<-chan Result` instead of a `<-chan map[string]Result`. The difference being that now the Ready channel can produce more than one set of results. In fact the name Ready is inaccurate now since its not about the query being ready but just a mechanism to deliver results. If this should be a follow up PR that is fine, lets create an issue for it.
Can we add an assertion here the policy actually contains both statements created above?
I think we might prefer generalizing the interface rather than creating an exception. Current design of `h2o_next_token` assumes the input to be a comma-separated list, and allows the caller to specify a different separator when parsing a nested list. As I understand, what we are trying to attain in this PR is to have a way of parsing a flat list of semicolon-separated list. Assuming that is the case, I think it would be better to change the API of the function to accept two separators (i.e. inner and outer), where for our existing use-cases `outer` would be `,`.
This would return a tuple of two dictionaries. You need to combine them and return a dictionary
Shouldn't line 313 be public \<T\> SettableGauge\<T\> **settable**Gauge(String name) { ? It would also be good to call it a few times and with differnet types (Long, Integer, String) in the test as well.
Can you add an `else:` case to handle an invalid length? That will prevent weird errors.
I think this is the most elegant way to allow us to still fail on `I`.
Shouldn't this be something like `rootmountmode` to fit the pattern of the other fields' serialized representations?
Yes, not much we can do here.
Change to `DisableHTTPGit`
Since it's a one-off, worth putting an info log before and after.
nit: not your problem - but I wonder if this should have been a "ConstantResponseRpc" - which takes a name and a value .... maybe a more reusable concept.
Yes, this is needed here. This is a builtin user who just reset their password.
we can just use read env here, pretty sure
Why does this become blocking for the CPU path? Shouldn't it remain independent of the GPU path?
if funder_is is not blank (L375) there is not need to check if org_id is not blank (L379) since you will never enter in the if (L374).
can we delete this file altogether?
I missed the $preserve_keys=true case when adding this to Phan. For psalm, two separate signatures may make sense
Please use the same (plural) name for the new component since it renders multiple notifications.
@akarve this breaks error catching logic on the front end, I'll fix this. That's why I prefer to use some machine-friendly error codes that won't change frequently.
This assertion should use the actual expanded string, so that it is clear what the message produced looks like. Right now one has to run the code to determine what the message is.
That is way too generic a name.
can't this just be left undefined/null?
Please also indent the new response line as was done to the existing line above.
This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression.
This should still be guarded with an `#ifdef` since the DataMan code will only be supported for shared lib builds.
I don't see how removing "open file bucket" helps your purpose.
same here, CryptoSm2 won't be changed once command is compiled
I think there's an `approval_for`
`whether this resource is paused` to `whether this resource has been paused` ? To keep same doc style.
Should be podiochaos?
Fixed the test; @strib want to validate that this is okay? Seems to be consistent new GC behavior.
what mypy warning does this address? I'm confused by this change.
I don't think this is required.
maybe call it `fromRetryTaskV2Failure`
AWS Identity and Access Management (IAM)
Can you throw an exception if width or height are both null
We expect to use Bolt::CommandResult for scripts as well?
Changing the default value for isClosed from TRUE to FALSE can have other repercussions. We might miss throwing error. Can you please confirm this change.
I'm honestly scared because act is now a hard requirement for useEffect which it wasn't before... This could break some tests :(
In my point we have to check conversion with specific (non-ASCII) characters in unicode string.
Will the above call to cStorPoolAddEventHandler() get executed in the same thread as this line?
This is using a different lang key, we should switch it to using the new key and remove the old key if it is no longer used.
This is small braking change: there is no way to clear description any more. If value is empty string, description will not be updated at all. It will affect existing Thrift endpoints also.
Need to ensure this is set to TRU for LOB datatype access too not just for hive .
The changes below here can also be undone.
Use " List<String>" instead of ArrayList<String> in declaration.
Same thing with the OtlpExporter
I don't think we need this check. Instead `Entries.merge` should check that its argument is correctly sorted (in addition to the existing pre/post check on the method receiver).
This is never set anywhere in the `cli/gen-api` folder. Should it be?
wouldn't it be simpler to just add `or transfer` here? That way the more complicated set of conditionals down below don't have to get more clauses.
Please re-run PYTHONPATH=. python tests/services/inventory/update_cai_dumps.py following the instructions at the top of this file to ensure the test files have the correct CAI asset type.
I don't think we should have file-wide exceptions for this rule, let's annotate the individual instances.
Hmm, I'm not sure this is exactly what we want to get across. The behavior of leaving both values unset allowing the entire config to be managed is what is indeed deprecated. It's just that not the entire field is deprecated, just that one behavior.
SmartStoreInspectorTest was throwing a NPE here
Same here. Should this be pipeline YAML file? Like `MarshalPipelineManifest`
I believe that all the changes in this file are not valid for v1.2 of the Avalon toolkit.
Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all.
Couldn't we use type hints to express this?
An alternative to setting format to the default in Package.__init__ would be to set it in create_package. I think we can assume all packages are created by create_package, but not necessarily by build_package.
These changes to the resource helpers have some more far-reaching implications as they also affect calls made in hive-operator, I believe. It's probably OK still, though. Ideally, the resource helper would not be the one doing the logging, since it cannot know the severity, but that is well beyond something that we should tackle for this PR. I would rather have the hive-operator log warnings than have the syncsetinstance controller log errors.
Do we need to add `theme` here?
We don't need this option because plan-preview is comparing between 2 commits, not using the live state.
rename -> info ?
this call doesn't work doesn't? I mean there doesn't seem to be an 2 argument allocate overload. Maybe arg_logical_size should just be defaulted to the arg_alloc_size thing. Or we should just report out physical allocation size instead of logical.
If there any other tests, I would make it optional there also.
I don't think this should enable xwayland, because it's convenient to toggle xwayland just by setting `xwayland` to `false`
This looks like you're not collecting everything from the error channel.
I don't think that this belongs in the host code. A host is pretty much unaware of what hypervisor is running it and I don't want them to be so coupled to their hypervisor.
It seems that NetworkService is behind a feature flag because it's still experimental. If we see new issues, we should look at flipping this back off.
Per our style guide, I don't think we indent `private` keyword. Would you mind fixing that?
interpolation here was causing the translation to not get picked up
This function does not need to be public
Could you please use `camelCase` in the property name to follow the naming convention used in the rest of the properties?
Why not just look for the "type" property instead of creating a ResourceType property?
Why not `ebpf::BPF bpf;`? Assuming that the instance is not huge, I do not think there is a good reason to use a pointer when it can be retained as a value.
The other way around Current can be null.
Might be easier to just do `handler{Handler: rpcHandler}` since zero-value of `Deps` is now valid.
Probably change "ovs" to "OVS".
It seems like you accidentally pulled some unrelated changes to util_test into this.
why are we turning this one into a Warning?
Add a newline. We group by 1: standard library, 2: 3rd party library, 3: application library
Same thing here, I think the proper fix is elsewhere.
I would expect this to be named *get* not *set*: it's a query; it's not setting some persistent state.
Would this work, as a one liner? `setTimeout(window.location.reload, 5000);`
Don't use relative paths. src directory is already on the include search path
@StrikerRUS what if we just removed build numbers and did `r-pkgdown=1.3.0`? Won't we have to fix this again if the RTD build machines change?
Code style issue: `if` body is not wrapped in braces.
This will only fix client side (so showing it in-game) server still gonna hold invalid values I guess?
This is only used for headers and therefore isn't used.
Consider faking the TestClient's GetProject/GetZone/GetMachine methods.
Is the `codecs.register(lambda name: None)` gracefully handled by codecs? The lambda is expected to return a tuple of functions (encoder, decoder, stream_reader, stream_writer) (or a CodecInfo object), according to the docs. I've only checked python's built-in help, though.
stylistic nitpick: I _feel_ like we've largely shown errors like this as "error: " vs. "error=". IMO colon/space reads better.
It'd be nice if we also caught `Unknown variable $trusted / $server_facts / $settings::` here - while I highly doubt anyone is using them (and if they are they're surely misusing them) it'd be crazy-making to have a working plan suddenly start failing with no clue as to why.
This fails on Go 1.11 because `indexByte` is already defined in strings_go111.go. I would suggest simply renaming one of the two, for example you could rename the other one to `strings_indexByte` (that will be one of the things we'll drop when we drop Go 1.11 support so it's better to make that one look ugly instead of the function that we will likely keep for a longer time).
I initially thought (inccoreclty) this is a breaking change! The public api analyzer is a gift!
Leave a TODO message to say we will fix the log level in the future, once committing the block and the state become a transaction
Do we need `domain` and `so_reuseport` now that we open new sockets immediately after calling `add_listener`?
why did you took `Exception` out? Is this method only throwing runtime exceptions?
This needs to be just return self.get_screenshot_as_file(filename)
Would want @matthiashanel to have a look since if I recall he had to add the shallowCopy() to fix some bugs during reload. That being said, since I believe the $G account cannot referenced in configurations, this should not be a problem, but Matthias has looked at this in more details in the past.
(Probably repeating myself) Instead of `Datadog.Trace.Interfaces`, should we move this and several other files into a `Datadog.Trace.Decorators` namespace instead?
`epochNum` is a global variable (from `gochecknoglobals`)
I wonder what does this `// nolint` ignore? And what are the standards that you choose which error to fix and which to ignore?
nice touch since Google likes to change things every now and then.
Wow, did it literally mean the retention days is a huge number?
Intended to be checked in?
And again. The reason it's bad is that if someone uses a JDK not produced by Oracle they won't have this class.
The naming of the include file appears to be unlucky.
I'm not sure I agree that this should take priority over "Loading".
it will be better if you can provide some examples
Partitions is misspelled 8 times in this commit, might make sense to fix the spelling for all of those.
Can we have the same argument order as `getUploadedFlowFile`?
The purpose of this was to allow pushing filters into the manifest files if we ever use a format other than Parquet. I think overall this is a good change because we can add it back later. Just wanted to note why the unused argument was there.
Is this a testing debug statement?
Shouldn't need this-> here.
this one bothers me. There are many places where this one is written to for an error message and just a single callsite is changed.
If you really want to rename this, you'll also need to adjust the name in `__init__` and in other places it's used (`browser/commands.py`).
Changing the default value may cause BC-breaking. Suggest changing this value in config.
Please don't touch unrelated files to keep the git history clean
Probably a good optimization to have this, but I don't think it's strictly required. For "legacy" Activity flows we pass them through an ActivitySource for sampling. So the logic below should also catch these?
This is probably more digits than needed - perhaps rename OneOverK0 to IonMobility instead
Minor unrelated fix that snuck in.
At some point we need to condense down and refactor our "configs" as we have too many in too many places and we're starting to get more illegible code. No change necessary but calling out for future reference.
I like the word "give" here. Feels like I'm giving a gift to my team.
Pretty sure the single quotes here should be double quotes, single quotes are not expanded by the shell.
Is it possible that the shortcuts list is empty?
I'm wondering if we need to add some type of validation here that the SecretCount != 0... Or do we think it would be valid to have a SecretCount of 0?
we can drop this and use the returned body above, right?
if the user specifies a url scheme on the cli this is going to cause problems, no?
It's very error-prone to have so large `try` clause with such non-specific exceptions handled. Consider rewriting it with either of these: 1. Check that expected columns are present in `DataFrame` (`{'physical_key', 'logical_key', 'size'}.issubset(df.columns)`). 2. Normalizing output of query by using `COALESCE()` (or normalizing `DataFrame` itself?). Also it looks like a row with package metadata isn't used here, so might make sense to filter out it with `WHERE logical_key IS NOT MISSING`.
For now, don't add "use strict" to any existing files. That's a separate project that we'll do later. (New files can use "use strict".)
same question here as I have on the other file regarding doing this check here vs L112 vs not at all
Maybe next time better to make separate PR?
Great God, I have a question. This ".nebula_history" file is used to save history commands. Is there a file size limit? When the file is large, does it take a long time to start initialization (loadHistory)? How did you think about this? Thx.
@jessieay Intentionally moving away from passing a param?
I think best practice is to use `NamedList<Object>` as the return type, and `NamedList<?>` as the argument type in methods, but I can't find a reference for it right now.
@strib I assumed this is what you meant; but let me know if I'm wrong!
Why are we not implementing a BooleanDefaultFalse struct and replacing all of these config vars that default to false with that? Are "default false" config vars not affected by this bug?
I would assign the key you're looking for into a variable first, and then use it in the comparisons.
We have other tests to assert all properties of a condition are valid. It's enough to assert the condition is not nil here.
Just asking: Should this happen, that null is passed? If this is the case I think we should think about passing an `Optional` object to the method.
`expect(cancellation).to be_can_downgrade_instead` would be preferred :rainbow: :rainbow:
everywhere else in the project, `LOGGER` is used
When calling functions with keyword arguments: please provide the arguments as keyword arguments, not positional arguments.
Looks like this could be `const` (I realize it wasn't like that before)?
the `if` isn't necessary here; it's safe to call `delete` on `nullptr`
Does this point out at a ROR funder id? If so, could we get rid of the `funder_name` field on the plan and just use the `name` of the funder with id `funder_id`?
Conceptual question: why do history and matching need throttler at all? Shouldn't throttling to be handled on FE only?
Call `userName` is good enough, `signedUserName` is narrowing the actual usage of this method.
If tbb.h is included, there is no big sense to include other TBB headers.
I would create a new method (NewStepWithDefaultTimeout?) for this purpose because timeout<=0 looks like a hidden logic
@johnduarte I was curious about the case when the operating system was neither `osx` or `win`; in this case, the test will indeed pass, but nothing will have actually really been tested. Should this have a `skip_test` condition at the top?
What about `VOLTA72`, `TURING75`, `AMPERE80` and `AMPERE86`? We only want to set the number of teams for these two architectures or for all the architectures newer than Maxwell?
rename Round -> requestedRound and DbRound -> dbRound. we don't need to export the fields here, only the error struct.
The autocomplete editor shouldn't change its own behavior, I assume that `autoWrapCol` and `autoWrapRow` options should be set to `false` in handsontable editor.
Does this mean that `kinto_redis` is required to run tests?
Flipped the logic here, was this actually wrong before?
Can we name this `TableObject`? I'm not a big fan of the `I` prefix for interfaces and that's not really used in Go. Is it also possible to have the method be unexported? I don't know if that's possible. If it's not, this is good. If it is possible, I'd prefer this method to be unexported.
this is redundant because it gets logged immediately on entering the handleContainerChange function
I'd suggest using the actual MIME types here - so `text/plain` and `multipart/alternative` or does that cause problems with what postgres allows for enumeration names? If so then maybe just replace the slash with an underscore?
Why do we do this check here? `sys.version_info` cannot be less than 3.3 as pylint does not support older versions. I think we should avoid popping `__main__` altogether.
Can you put the output of this into data, and list which roles are invalid? Same thing with abstract role. I know that's not strictly part of this PR, but it'd make the messaging about this a bunch better.
This is specifically for testing?
what does it mean enabled?
With this fix, I am not even sure we need to overwrite this function.
I'd make this a `throw new NullPointerException("metric == null");` instead
nit: Probably should renamed to `InitializeBody`
I would rather no have this as a `kwarg` as it encourages "growth" which lead to an unweildy constructor in other classes. Let's add a method or property to take care of this instead as I think it's usage is going to be quite low.
Layout/DotPosition: Place the . on the previous line, together with the method call receiver.
Unfortunately I think the assumption of "empty" means the default dependency section is not correct. For a project.json file the default dependencies section is a shared section between all the different target frameworks and our TargetGroup being empty may map to many different target frameworks so they aren't really equated.
How come this change was needed?
what is the number thrown by Geth?
We could get rid of this dependency being forced on clients by changing the `StackConfiguration` interface abstraction to deal with strings instead of `cloudformation.Parameters` and `cloudformation.Tags`, and internally to the `cloudformation` package translate the input strings into the `service/cloudformation` package specific values hiding that from consumers. I don't think that should be taken on as part of this PR, but I think we should consider doing it at some point.
IMO we should instead fix the above call to do `long actualChecksumIn = Long.reverseBytes(in.readLong());` to get the actual checksum value? This way the below error message would also be correct?
This change should also probably go into the corresponding method of the abstract By class?
Shouldn't need this-> here.
nit:s/Traceparent/traceparent/ - As per the spec header name is all lowercase.
I want to write some type of test for this but there are not Getter methods to assert this value. I tried to extract the value via the stats that are exposed without luck.
this is asserted as invalid input
Could you simply add it to the previous clause ?
Do you need this? Don't think you use it?
The checks in this file are disabled by default since they are meant for Python 3 porting, and this one does not have to do with Python 3 porting at all.
Shouldn't "source" be a noun? How about? -EXECUTION_SOURCE_USER -EXECUTION_SOURCE_SCHEDULE -EXECUTION_SOURCE_EVENT (because it's an event based trigger mechanism)
Should this be optional, or default to 'action' as well?
s/`terms text`/`terms's text`
prefer changing the signature by adding params to the end, not the middle, I think.
@MrTimscampi don't we want to remove this term entirely? Might as well do it now if that's the case.
stateRoot or maybe ParentHeader would make more sense from API point of view?
Nearly there! This should assert on the output, take the result of "start" and "finish" as an example :)
This is ok to change since I believe that these were added just in main and not in public release.
Not critical but "common" is not that helpful in the commit title. Maybe go with "libkvs/txn:" for this one?
All the code that reference to this function must also be changed.
Is this import needed?
this feels weird
Zach, is `UpdateSpan` of concern too? I see that it is called from `ExecuteAsyncInternal`.
Shall we rename this status to CONTAINER_FAILED? ^^ cc: @sshardool
`sys.platform` could be equal to `darwin` which is posix. Use `not startswith('win')`?
count doesn't seem to be used. Let's remove it.
should probably be called `_DeleteFpInfoAttr` because it removes it. Cleaning gives the impression it is still there. I would also move this to the end of the function `GetAtomicWeightsForFingerprint`.
Wouldn't this still fire afterwards if you created one called `pleasings`? or am I missing something?
The function seems to either return "default" or return the extension stripping the preceding dot. Does the fact mean that we can no longer register `.default` as an extension?
There seem to be more changes in here than I'd expect (mostly `limit: 255` additions).
Note that this is a bug, that should be fixed on master. `DECIMAL_LITERAL` cannot match any token, because it's declared with a `#`.
just confirming: if we remove explicit Collect(), then we are relying on the provider dispose... which has a hard-coded 5000 msec to finish flushing. On the other hand, if we keep explicit Collect(), we can pass an explicit timeout to it. (we were not doing it now and was relying on Infinite timeout). Net effect of this change in test code: Previously we would wait indefinitely for Collect() to be over. With this PR, we hope Collect() will be over in 5 secs. If we ever need more than 5 sec, we need to bring back Collect(maxTimeInMilliSecs..).
I don't see any test cases which would test that fix dates are set properly on review status changes / storage events. For this reason please create some more test cases and also check my scenarios above.
Nit: please remove unnecessary whitespace changes.
I seem to recall a UI issue with this... @akarve I think you didn't like this for some reason...
This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector.
Shall we also add `ks.Series([1, 2, 3], name=["0", "1"])`?
You probably don't want to assume that `self.underlayer` has a `seq` attribute.
it would be better to move the declaration of the variable with its initialization at line 68
How about, instead of reading the param every time, just add a class member variable to hold the value of the flag, and just set it once during `LayerSetUp`?
please start log with caps letters
does this get wrapped in the calling method?
maybe `toolkitVersion` instead? It doesn't necessarily have to be called that in the generated code, but in the view model classes, I think it makes it clearer that it is the version of toolkit itself.
  Any chance we can get a CSS class for this? I know it's just in one place but feels like a dangerous precedent to set.
Prefer adding a second `positive(String, double)` that delegates down to this three-param version. Using `null` in code is generally Not A Great Idea, and it looks ugly.
As isCaret is False by default, explicitly specifying isCaret=False here is not needed, and is perhaps a little confusing. I'd prefer that anywhere in the codebase that isCaret is only ever specified if it needs to be set to true. Mirroring that of isFocus for setNavigatorObject.
You need to declare variable `recurse` above, same place as `localTime`.
Might we want to separate including this snippet and sending the data for signed in users into different partials?
I wonder if it'd be possible to autogenerate a key from the name within this function if one is not provided explicitly, rather than having all the callsites pass both the name and key (and usually as the same value)? Might give us a good place to implement a `name->key` function that isn't 1:1.
what's the prod url for this? just curious. @amirsaber
We don't return now?
Docstring would be nice
It would be nice to have an `attr` in `styles.xml` for this, so we don't need the same `if` statement in multiple places
Seems len(cnb[0]) will be the length after the write since of the *v thing we saw no?
If this is not used, we should just delete the line.
another option would be to create a `CreateRequestQueue(bool lockingQeueue)`, and set it only in `InitializeTarget`, isn't? The would prefer having the creation and "business" rules for the creation in one region, I think `InitializeTarget` would be the best place.
There's no core.Number yet. ;)
move to finally - I can see at least one return that would omit it, also any exception and so on
this class should be named `ArrayInitializationVerbosenessTest` to work
What about using `dataManifests == null || deleteManifests == null`?
I'm actually surprised this is valid Ruby. I thought you'd need either `delegate(...)` or `delegate \ ...`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Here's the object model change. `CodeFlows` is a set of objects of type `CodeFlow`, rather than a list of list of `AnnotatedCodeLocation`. Exactly parallel with `Stacks`.
File is not `gofmt`-ed with `-s` (from `gofmt`)
Could you please change this to `#ifndef __linux__`? That's when we use our own implementation instead of `posix_spawnp`.
Can we rename 'refresh' to 'read' and 'update' to 'write'? Until I had read more of the code below, I couldn't tell the difference between 'update' and 'refresh'.
This is an informational message that allows someone to read the console output and understand how the grid node is configured. Please leave.
This seemed like the easiest way to allow log level checks, it will require an update to the vendors tool, to ignore that file on update.
This variable name should probably contain `grab`
I think `serializer.xml` can be moved into condition below too
IMO == true is more readable than ?? false
Why is this needed?
Might as well add a docstring for the new `exit_code` parameter too.
It's not async
do we want to still validate that the context had a nonzero TTL? i suppose it's fine to let clients determine whether or not their streams will timeout (though we still don't have the means to cancel them from the server other than EOF), and they can still cancel their own contexts - so maybe not a huge deal, but thought it was worth bringing up.
I think we should check the type returned by `getLiteral` and handle that here. Then we won't need separate code for different versions.
what was the reason for this change?
Nit: missing newline above.
Maybe we could add some use of `exporterOptions` in this example, otherwise the proper code would replace this variable name with an underscore?
This would have assisted me a lot! I am on the "functions" page more than any other page in the docs
Why swallow the exception here rather than propagate it?
where does `master_certname` come from?
Is this Todo necessary?
`this.ieService_` should be initialized to null in the constructor.
So during a config reload, this function is invoked, but prior to that the o.TrustedKeys slice is set to nil, so this code would work. However, I am wondering what happens to s.trustedKeys, I am not sure this is handled at all. (same with the new map you are adding). I am not sure if this is supposed to be supported with a config reload, but just wondering if this is not putting things into a bad state.
Would a check for added columns with non-null default be sufficient for aligned format?
A little skeptical of `explain` being here. Why is this now a property of all commands?
another alternate option which doesn't have the risk of too many entries (when user keeps providing keys in different order) Have the dictionary as before If tagKeys lookup fail, sort and lookup again. If fails, insert both original tagKeys and its sorted one to the dictionary. So that we only store atmost 2 entries per key set. And we only do a single lookup in hotpath, as opposed to 2 look ups.
Just leaving this in one place but thanks so much for re-organising all these imports.  
This bit I wasn't really sure about.
I guess this assignment is now redundant?
nit: better rename to `TEST_QUEUE_ARN` or `TEST_EVENT_SOURCE_ARN`
Thanks for cleaning up these deprecated calls
Using the variable on range scope `mock` in function literal (from `scopelint`)
`icebergType` indicates the corresponding iceberg type of the `FieldVector` `originalIcebergType` indicates what the real type we will read from the `FieldVector`. For example, the parquet int backed decimal, the `icebergType` should be integer, `originalIcebergType` is decimal. I intend to only keep the `originalIcebergType`, but listening to your ideas.
As discussed in IRC (just so it doesn't get lost): This probably should be `-basedir-`, not `-prefix-`
Does this work at runtime?
Don't think we want this line, right? (Plus "failing" is spelled wrong).
This looks inverted to me: if `--rpc-require-chainid-in-txs=true`, then shouldn't `unprotectedTransactionsAllowed == false`? Suggest changing this variable to `requireTxReplayProtection` or similar. I think the flag name could be clearer as well, maybe: `--require-tx-replay-protection`.
I would remove this line. Otherwise looks fine cc @ueshin
File is not `goimports`-ed (from `goimports`)
Can we mention how can one determine the best value given an infrastructure? Does it default to any value?
Why is this not the default, and why only for JS?
Maybe it is better to add checking for status code duplications? It can prevent some stupid copy-paste user errors.
I noticed (SonarCloud noticed actually) that the implementation of `::edit` method is the same as `__construct` is. Does it make sense to call the `edit` method from the constructor?
Would it be too greedy to preg_replace `VuFind (\d+\.?)+` with `'VuFind ' . $this->to` anywhere in the string? This would update something like 'Finna (VuFind 7.1.0)' as well. Just a thought, please disregard if you'd like to keep it as is.
Oh interesting - does web-test-runner not resolve package.json files?
Should these methods be renamed in this PR?
Fix for URISyntaxException.
Nit: Group this with the other commands by moving it down one line.
I would prefer to set up space between classes in format pattern, `%s %s` and then use `trim()` to remove unnecessary whitespaces. This will also solve stripping whitespaces from the beginning and end of a string `$attributes['class']`
lets leave out the `-S` ?
Can we define this constant in the`deploy` pkg instead? this would allow us to keep it private
Could combine this with `encryptionKeyGetter` to have a single `keyGetter` interface. I'm not sure which way is better.
I believe you meant "specify `desiredUID` and `desiredRole`"?
since this makes the indexer thing really only used for a single table, now, you can put in a TODO for me to cleanup and simplify this
is this "unless" actually needed?
can you revert changes to this file.
now that we have the signature in the hive messages, it might be that this must be drastically reduced, since there are limits on the protobuf reader/writers i believe
Please remove this blank line.
I think we can remove this function, right? (duplicate with `ses_starter.py`)
If FLAGS_meta_server_addrs is not empty, in which case "toHosts" return empty array?
This can happen with any dialog. Maybe the best place to add this change would be the dialog component instead.
Please re-format/groupimport this line. You might need a little manual work.
The convention is to use <p> see the google style guide and use checkstyle to check. You can change it later.
I'd like to see if this can just be set on the service account instead of the project. Using the SVC_ACCT_ROLES (which should otherwise be deleted as I don't think anything else is using it.)
is it not a problem when one synchronized function is called by other?
"contingent to" -> "contingent on"
this test only covers the happy path. what about no acceptable rest template found?
I'll fix the InMemoryExporter right after this PR lands
Update year range in Copyright notice, and elsewhere too.
We don't have a requirement anywhere in Test Platform for GetStream() with write access. It is ok to directly change `return new FileStream(filePath, mode, FileAccess.Read)`.
The whitespace removal above here is probably unintentional :slightly_smiling_face:
would rename to TopicsFilter and original one to SequenceTopicsFilter
req.getQueryString() != null is not necessary since same check is already done in allowedPostRequest
If we don't have a `dir` yet, we wouldn't need to do a sync right? If so, perhaps we can just `getStoredDir()` like `Attr()`?
fixes ArgNullEx when using both `x-ms-parameter-grouping` and media type `application/xml` in the same operation (issue #2236)
I think you should use `$event->getOriginalFileUrl()` instead of `$sourceFilePath` here.
nit: It's a matter of taste, but it would be tighter if this is called `api_quota`.
...and in turn, this should probably be var updatePreviews = true; if (!(localConnection && localConnection.type == Blockly.OUTPUT_VALUE) && (Blockly.localConnection_ && Blockly.highlightedConnection_)) { since the first clause is a no-op. If you want to leave it this way for clarity, that's fine too.
Class import is therefore redundant I guess :)
Is that `try..except` block really needed? I mean, when it could fail?
nit: blank between, for consistency.
Not sure I like the name ``_apply``. Even though ``_process`` is supposed to process elements already, how about ``_process_element`` which processes elements, *excluding* Overlays/NdOverlays.
Might not hurt to mention the function never returns (since this all ends in `execve`) so `main` never actually runs.
Should we generate `gem "rsolr"` into the application Gemfile?
All stories in this file also need to have the default padding.
If you end up changing grant to an association, this may need to change to a reference to enforce the foreign_key `add_reference :plans, :grant`
Typo: this should free `xwayland` instead
Please add `ConsigureAwait(false)` here and on `ShutdownAsync` below.
I think it's the time for bumping `REQUIRED_QT_VERSION` to the last LTS, 5.12. `QFontMetrics::horizontalAdvance()` doesn't exist in 5.10.
An hour seems a significant amount of time to wait for within a test, does it need to be that long?
i have removed this line because whenever a video is played in AntennaPod this line was making play button invisible
Issue is that `currentMode = newMode;` is called at the end of the method. Passcode screen will come up, but since the activity thinks current mode is biometric check we don't check passcode when submitted.
please move this down to immediately above the assignment to `c.dirtyBcache`
nit: If we want to squeeze out a few more milliseconds from the startup, we may actually be able to remove this line (`wait_for_port_open(PORT_DYNAMODB_BACKEND, http_path="/", ...` should already be sufficient to ensure that the service is up and responding to HTTP requests). Thoughts?
has this changed? are we testing "all possible situations" now?
We may use `_pair` to wrap `dilation`.
Would you explain why here please? E.g. from the PR description > the renderer expects to be able to use the secondary color as the fill for a shadow.
Can we check for containsKey here?
add 'sriovNetSupport' also to this list
For some reason `protoc` doesn't copy license header from `proto` files to generated code. But this code will never be checked in, so it is ok.
So it seems that loading a script file from the classpath needs to be enabled explicitly now since this is `false` by default. Is it possible to enable this via the YAML config file in a Camunda Platform Run distribution?
We don't need this anymore, as Google's library handles various auth mechanisms for us. We'll be less explicit about why we're failing but we gain support for several authentication methods- swings and roundabouts!
This should be `pygment=False` like in `browsertab.py`
:+1: that's a easier example :)
Turns out the unittests also had a false positive.
This tag was broken, the value write to log was the memory address. Please verify that this actually write out meaningful content in log.
What happens if the certificate rotation fails and we are prematurely removing this file?
I'm not sure if there are any links to swap for Handosntable package. Should this be a top lvl script?
That's fine though, meaning that you can send to this channel under the server lock. The internalSendLoop will pick up the change when the server lock is released (if loop is blocked trying to grab the server lock). Even the way you do it here (releasing the lock, sending, then reacquiring) does not guarantee that the internalSendLoop will have time to refresh in that interval.
Also update line 2205 below
This was necessary due to a bug uncovered in testing. If an actor method which requires params is called without any params at all, not returning an error here causes a panic.
change size to 50MB criticial, 10MB warn... change count to 50k critical, 5k warn...
From what I can tell, the `serviceAccountFile` is never set to anything except ""? It'd be best to remove this altogether, so we don't mislead future developers  
quick question, isn't ProcessJob used by all job types? Then why is JOB_ID not found?
Please add line breaks, so the line doesn't exceed 80 chars.
This is fine, but by Symfony convention this part is responsability of the compiler pass class, i.e `DependencyInjection\Compiler\?`
I don't think this should be here?
Why are you changing this?
`if (is_string($value) && $this->getDefinition()->get('allow_html')) {`
Afaict, nothing cares
Might we want a hook to allow emitting metrics or logs in the case of a permitted empty service header response (or similar UpdateSpanWithErr on empty service header in response if strict enforcement is desired by the caller)?
Rather than have another member and and if/else statement, if the user passes in `PreInvocationAuthorizationAdvice` it could be adapted to match `PreInvocationAuthorizationReactiveAdvice`
This occurrence of "master" is unrelated to master/slave replication. Maybe simply remove the word "master" or replace it with "reference" but "primary" doesn't really make sense.
Simple Storage **Service**
Why change this?
This is the only "extra" change here.
We run prettier as an eslint plugin, so this harmful
before the fix, does this sentence make service crash? My point is can you re-produce the problem. I'm not sure the bug is due to non-asiic code
Maybe call it `WireBridge`?
This type of list + delete always make me a bit uneasy but guess there's no atomic way to do this...... Could you put a todo to retry the "ClearRepository + delete repo" flow a few times? Basically, imagine a new image is added right after we call `ListImages`, then `DeleteImages` will not delete that newly added image. Then the delete repo call will fail
Maybe change into `return _concurrentWrites ?? PlatformDetector.SupportsSharableMutex` ?
Btw. this API must definitely change with PMD 7 - we are exposing here a implementation detail (that we use Saxon). And it happens, that the way, how custom functions are registered, changed with Saxon 9.5... which makes the need for a implementation agnostic API relevant...
is this one all platforms?
Can you remove this change?
I tested it only in Firefox (`./go //rb:firefox-test`)
Do we really need these? This is expanding on an API that we're about to do work on with the error stuff @kriskowal
This `aria-labelledby` stuff is all new to me, but my reading of the spec is that the value should be a list of element id values, and `dLabel` doesn't seem to be the id of any element?
Unsure of how to handle this one.
We generally avoid wildcard imports. If you feel like changing it back, great. Otherwise, no big deal.
temp change so the predicate can be used by the `exp` package
This is wildly unhelpful to users --- they need to know when a proxy has been registered.
we should discuss how to not hard-code this version
We were trying to move away from this to force people to always run tests under py.test.
Yikes... That was probably me.
Is it is a hard requirement for this field to be 'cn-northwest-1' when wanting to interact with AWS China? It appears that putting in 'cn-north-1' would also result in using the alternative API endpoint (with the region overridden to use 'cn-northwest-1' for the created AWS client).
Don't need to clear them - because nobody have data there, also can don't delete buckets - just leave them, new nodes will not have them if remove bucket from buckets.go
can we get height from sf at very beginning of the function and use that as height of the block?
drop the todo?
It bothers me that the user calls `initialize` without also calling `finalize`. It seems to me that we're essentially making `lbann_comm` a singleton object. Going further down this path, we would put `initialize` inside `lbann_comm`'s constructor and `finalize` in the destructor. This has it's own weirdness - the user must make sure it's lifespan matches the beginning and end of the program. We may also run into the case where someone might want multiple instances of `lbann_comm`, but this is not too important.
we shouldn't need the `FactoryBot.` in these. Ok to leave for now since all of these specs have them. Can clean up later
Nitpick: Please add a period after `link` :wink:
`mPluginLoader` is nullptr in static plugins, which causes segmentation faults
Is it correct that `SessionDto` should be here?
oh yeah, `tail`, `update`, `prepend`, `append`, `subSequence`, `trim` just became effectively constant (without memory leak) :)
Who deletes the memory for the granteeList? (or the roleList for that matter)
maybe will be better to put it into the default worker's config rather than hardcoding the address?
We probably want to let the translation library handle the string replacement for these as well.
if we won't use, should we remove this?
I think other places changed to use `Deque` instead of suppressing the warning.
This change is responsible for #2775
Just hide the textview
You could probably dispose request & content if you `await` the SendAsync.
I think contains on `Multimap` was broken - it should return true if one of the values is associated with the key? It that right
why add function explicitly?
File is empty, consider removing?
No need for the `.keys()`, iterating over a dictionary gives you its keys (and thus you can also do `key in some_dict`). With that, it also fits on one line :wink:
This calls sanitize twice if the name isn't valid.
What's the reason for excluding those from the fuzzing here? You probably could just add some inner type via `functools.partial` like below with `FormatString`.
nit: I think "They"?
also fetch block hash of this height and return hash
assignments should only be cuddled with other assignments (from `wsl`)
Is this a sometimes leaky test?
Are the coefficients the actual bug fix?
Nit, this could be json:",omitempty"
While this is commonly correct, the more reliable check is to get the package's identifier from the type checker and check those for equality. The information should be there, just another matter of plumbing it.
How exactly are you expecting the user to see issues with their Midas library? It seems like all error information is being swallowed and not clearly reported to the user. Even if the eventual result is to report that loading the file failed, it seems like the exception, in this case, might have more information about why.
Can we avoid this. upgrade engine code should take care of this.
do you think this should be `osd/auth` as a pkg to make it more unique and void conflicts with other `auth` packages?
Should something use the lock passed in?
what's the reason you had to add the `host` argument to all `get_work` calls?
only dev and local
Since we kept the original constructor we might not need this change now.
payload entered on command line is in hex-encoded format should use same processing as in ioctl/cmd/action/actiontransfer.go
Would use parenthesis to explicitly state the associations of operands ```js const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (-(2 ** 53) - 1)
Just verifying: this change doesn't break the 18f layout, right?
Thank you for this, I gather this repairs failures that I've seen in another PR.
I know that previously this check was here but @ralph-pichler replaced it with the `CheckTimestamp` field stating that checking against `Timestamp` was incorrect. @ralph-pichler can you elaborate?
There is a `is_content_editable()` method just above this, what's the difference?
This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, ","); You can use it at multiple places shown in this diff.
Either I'm missing something or specs actors should remove this call cc @anorth
Maybe just one import line - `from collections import OrderedDict, Mapping` ?
What about Secrets, are we not also trying to cover those?
The filter parameters are a bit confusing. I understand that one of them has to be set, but what takes precedence if a from/to is set and the hash as well? Should that fail?
Ah, so the change is that you want the `prune()` side effect before doing the `task.id not in necessary_tasks` membership check? Stupid non-Haskell programming languages :p
can you change this instead to just `type.toString()` and then you wouldn't have to expose the getBitMask in the enum. (Alternatively you could have used `type.hashCode()` but that doesn't feel as nice)
I suppose it's a false-positive error. Maybe there is a way to configure the `eslint-*` package to accept `i.e. .... lower case` syntax  
if we are returning the `ws` here when passing in `se:cdp` we can just return it straight or do we have to make a request to get the `ws` address?
Wondering whether it should be `self.clone`, or `other.clone` or maybe a new `DynamicMap` declaration entirely. I see this is in the condition where `other` is a `DynamicMap`but is this definitely right in terms of `kdims`? I need to think about it more...
Can this also include a quick test for transpiling by name?
In general I'm saying "if there is no common type I'm just going to skip some stuff and fail silently."
I can't recall if there was a fix specific to this in the past?
Maybe call it `WireBridge`?
@aws/aws-ecs-agent, @yumex93: how concerned should we be about user provided envvar names clobbering existing envvars? i'm not convinced we should be doing additional validation here.
this one should also have quotes i guess :)
Still confusing. Why don't we return something like `'Fee too low: expected X but found Y'`?
Is this `{clipboard}` or `{primary}`, as the deprecation message for `:paste-primary` says?
a super thin wrapper like this makes me think we should consider not having it, instead just defining in the plumbing.api the publisher and subscriber interfaces we expect a ps dependency passed in to support and then to pass calls directly to that thing rather than through this wrapper
@jalavik should be have somewhere enum/list/registry of possible tags?
@nghialv btw, perhaps was this method originally created for copying the repo root to the given `dest` as a subdirectory?
Why to introduce this intermediate variable?
Can you adjust `open_path` to simply call `path_to_url` and then `open_url` instead of duplicating the code?
In my opinion I think it is possible to add `private final` here
In C, file scope variables are already initialized to 0 so the "= NULL" is redundant. Not a big deal.
I only now spot this `freebsd,!baremetal` in the code, which doesn't make a lot of sense. The fact that there is `linux,!baremetal` is because baremetal targets pretend to be linux/arm to get the standard library to compile. Such a `!baremetal` exclusion is not necessary for FreeBSD. But this is not something that needs fixing in this PR.
I wonder if we can just check if the mSession is active and then only call `setActive(true)` and `callSurfaceChanged()` if it isn't?
Implement the "collect all props for one vertex" logic inside QueryVertexPropsProcessor
Just realized this should be fixed instead of changing here. Concatenating int should still result in lowercase string.
Maybe putting ones they've used before first would be good, but this is fine for now.
How to distinguish between warning and error?
Thanks for this fix @eltone !   Wondering if we should make this a bit more resilient to upstream changes, e.g., via a regex replacement. Not critical, though - we can pick that up in a follow-up PR.. Thanks
can RDSE be added to the list? It has its capnp files.
Why do we have that extra "ENGINE-16002 Exception while closing command context:" now? Is that done intentionally by us or where does that now come from?
Are there any other templates where this command needs to be added, or were those issues specific to storage requiring us to enable a new command group?
We would like this code to run, even when `config.XDPEnabled` is false, so that Felix can clean up its own XDP state after a restart.
We probably don't need to print the msg with e.getMessage(). It will be printed by the logger since we are passing the exception as a parameter.
Should we define a const like NETFRAMEWORK or NETFULL which will be set for NET452 NET461 and anything like NET47 etc in future?
I removed that from here because I am hoping that will stop the random unwanted updates to the website with unstable versions.
At some point, we would like to get rid of these custom injections as well. Looks Ok for now.
nit: I'm assuming you have verified this is what the error message should read like
mmm I followed the convention of this collection. It has Add, Remove, RemoveAll, so All sounds reasonable. Else It would likely be AddPeer, RemovePeer, RemovePeers and Peers.
This looks out of scope for this particular PR.
what if the collection is already there?
We should check somewhere here and in the partitioned_io_buffer that the max_mini_batch_size is properly computed for each model and that it is not aggregate (sum) for all models. The global/max_mini_batch_size should be as specified by the user in the prototext/cmd line.
there'd be more changes in the area, when we implement "clean-up" of aggregators if no new updates. (i think we currently send metricitem to exporters with zero as value)
this line got me confused for few seconds, as the `AccountData` is both the name of the data structure as well as the function name. I think that `GetAccountData` is a better choice for a name. ( note that the same applies for the previous `BalanceRecord` function name )
If we are going to add config to specify the maximum message pool size, we should probably also add a parameter for the maximum nonce gap and pass it into the `IngestionValidator`. This could be done in this PR or added as an issue.
Why? I thought this is for graceful shutdown.
A "tab difference"? As in, there are tab characters somewhere? This disabling of clang-format for all the code here seems like overkill. Are you sure there's not some other solution? I don't really understand the problem though. Do you mean clang-format-diff?
I'm suspicious of this. For one thing, `query._fields[paths[i]]` may be `0`, `false`, etc. so checking for falsy will catch both cases where both the field isn't in the projection and if the field is explicitly excluded from the projection. For another, I'm not so sure that #6546 is a bug. Let's discuss that more.
We're fine with double quotes here. Just for future reference.
should we end the text with a .?
since we're calling the file .rspec-local, I think we should rename local_options to project_options and use local_options for .rspec-local - WDYT?
@qqmyers this looks fine but have you seen any performance issue here? If so, we could right some helper method like doesExternalToolNeedDataset(externalTool). But if there's trivial performance impact, not worth it.
Here is the test that checks that the sqlcipher in use was compiled with the right flags
This seems unused.
Is there a need to replace the Index with a MasterIndex?
Why public and not protected?
a small nit pick ...this can go into `lib/patterns.rb` ?
I understand why `xhr = null`, but I think adding `error = null` implies that this method should work even if we don't pass the `error` argument. Should we remove it?
this is gonna be different in an IDE vs from gradlew??
nit: spaces seem off
Is this because "KOALAS_USAGE_LOGGER" can be `None` ??
if I give a non-existent script, then I don't get an errors. I would have expected the `copy` method to raise, but maybe `net-sftp` silently exits?
It is good to mark it! Maybe we can remove the method for Vavr 1.0.0 - but for now it can stay as-is. Thx!
What is the logic behind `ReadVectorSize` reading `CountElement64`, then skipping `T` (in this case `unsigned`)? Naming doesn't cover what's actually happening here. Ideally I'd also take this through a `files` layer, any input as to how?
Unless I'm misunderstanding something, this should just be `prefetch_(param.data_param().prefetch())`, no? That should just use the default value if there's no explicit `data_param` or `data_param.prefetch` set, removing the need to also duplicate and hardcode `PREFETCH_COUNT`.
it's better to be : void attach(String name, Part part);
I'm really impressed by the AppendElements addition! Very cool! :-)
Comma police. :) Also, the docstring needs updating.
when message type is not expected, contine to next loop instead of return to finish infinite loop
nit: please move these inside namespace.
I think the check should be `config.sync.fullSynchronization === false` - otherwise this will get triggered even when full sync is `true`.
Why this deletion?
nit: `<p>` after the line
Simple `for` loop instead of `for_each` would help here by making it more readable.
This TODO isn't related to this change. We should remove it.
Why remove the crash protection? We're just going to get a bug filed on it.
What about calling this package "parameters"? utils\parameters are utils related to parameters.
Would prefer to see an actual script here.
`TimeChaos` does not contains a field .spec.action
If the status is `ERR_SPACE_NOT_FOUND` why return `SUCCEEDED` ?
here is `:seconds` missing again
Can you break this onto multiple lines?
The name of this argument is not too intuitive. The point is, these kind of subprocess calls will return `str`s in Python2 and 'byte`s in Python3. It would be a lot of work to make CodeChecker handle both `str` and `byte` everywhere. Using the `universal_newlines` argument, we can force Python3 to return text rather then bytes.
Is it possible to use `np.random` module instead?
The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?
I'm surprised rubocop isn't picking up singe quotes?
Again I'd prefer if this is done in JavaScript rather than in SQL.
We need this left in as `axe.configure` is for the top-level page `axe` and we still need to configure the axe script inside the iframe as well (so both have to be configured),
What is the motivation for this change?
This makes the BlockHeaderValidator mutable, and IMHO should not be done. Note we have a builder that has the exact same method, so instead of mutating a produced BlockHeaderValidator we should hook into wherever the builder is being created.
Use the new Ruby 1.9 hash syntax.
This test passes in `dev`. Why wouldn't this work?
Why was this merged? It should have raised some questions IMO @core23 @OskarStark . It's already in 3 releases now, so we can't revert it can we? How can we fix this? Please have a look at #1065
Could this be done by mocking objects instead? I feel like this is changing too much of the actual logic just for the tests.
Why changes in this file?
This should not be called Flow Trigger. FlowTrigger should has its own flowTrigger job name, for instance, "flowtrigger"
Nit: rename to sendError.
Hmm, I'd really expect this to work, and yet it doesn't. I'll investigate later, though it might get Monday until I get the time.
not a great fan of this change - maybe worth splitting into CommitTree() and CloseBlock(long blockNumber)?
This was the only caller of CreateRepo, so I inlined it.
I'm curious why the table name is bound at compile time? Is it just to save the table create/drop overhead in a prepare-once-execute-many situation?
Where is this used for Node?
Just as a note: Is it possible that the select css class is the same as the hover one? If this is true we should choose a different style for the selection css class, to make it more clear to the user I think.
Not important, but the code used to keep checking other cases even after one of them failed, and now it's not. Fine either way for me, just noticing.
This was renamed to avoid any confusion with the more general case of debugging via `plz debug`
Why is the getIdentifier() call required here?
Flag is removed because it is only gRPC now.
alpha sort the imports
Seems like this might need to allow for `"`s to be used here?
why not context from stdlib?
Add a `yield User.init()` here to wait for all indexes to finish building
Let's fix the extra spaces above.
nit: type this
Not clear here what you mean with this list
so sweet to see a test as the first thing
_and_synched seems to be more consistent w/ exited_and_cleaned
See this error on console too so I don't think it's just test simulation. For some reason event doesn't show up sometimes
Why when current user is owner but still check access? Should we use `else if` here?
You can delete this, it will now need to live in `gointerfaces` package
moved to `errors.go` which is the only places `math/rand` is used in this package
We should check whether or not the input node has a value since we can just have an onChange on an uncontrolled component as well.
pls pr a name change fro muon here too separately.
ps - first letter from preview, when we move it into public it will not be relevant. my suggestion is spmd or ds(distributed)
How would AQR work for an INSERT/SELECT of one table into another where a LOB column is being copied?
shouldn't this work? nodesRegex = regexp.MustCompile(api.SpecNodes + "=(('[0-9A-Za-z,_-]+')|([0-9A-Za-z_-]+)),?")
we had some situations where we merged some promql bits then took them out. i'm not sure what's going on here, but unless your code actually needs promql (probably not?) let's remove this line.
I think I was involved in writing that caster, but I never fully understood the `import_mpi4py` thing. Why is importing mpi4py still necessary at that point? I would think if the user is passing a communicator from python code, they must already have imported mpi4py themselves, or does that not propagate through into the wrapping layer?
Another question is, do we want to call `os.Getenv()` every time we parse a file? That seems a lot.
Not added by you, but we don't really need the '5' here..
Good that you mention this constraint in the docstring :)
can remove, it isn't reachable.
Does it work to run all the sil diagnostic passes before we serialize? That would be more consistent with what the normal compiler does in `FrontendTool.cpp : performCompileStepsPostSILGen()`
an unused import
The handler will have an extra property in the marker to signal the implementation is in the provider, for the cases we want to add functionality, for example, custom implementations not in moto.
Please break this into multiple lines.
See above, same for all similar cases below.
This shouldn't be here but `self.connected = None` in `__init__` instead, otherwise that'd be an attribute which is set this way in _every_ instance of that class (i.e. a class rather than an instance variable). I'd also say let's make it "private" (i.e. `_connected`) and please add a quick note about what it is to the docstring of the class.
nit: use %s for strings and %v for objects.
Just saw this and wasn't able to hold myself from renaming :-).
This is likely to return an error value if the client fails to read the response we write, which is why I chose to ignore this error.
Thanks for looking into this. I think it looks a bit strange to have this check inside the for loop. Wouldn't it also work to initialize `idxCurrentSort` with 0 instead?
We definitely want some detailed and thoughtful docs being added to this type.
add some form of docs in docstring or on :74 for what the effect is
No need to use `this->` here
Was changing this to a write transaction required?
How do we manage updates to this view down the road?
Default max cpu should be 8 and memory 64GB
Not a blocker, but would probably be useful to have a `scope :non_pending_approvers` on the `Proposal` model.
Why not return success?
@angmas1 move the else up, next to the closing bracket of the if block. Also, there is no need for the braces as your else statement contains only a single line. Make your if-else block similar to the block in lines 277-280.
should we perhaps write a spec that ensures we don't send a welcome email to a user on login when the user is not new?
It looks like this is only used in order to extract the snippet file names from GapicProviderFactory. I wonder if it would be better expose the snippet file names directly, without exposing a test-only function in non-test code.
I'd like to ensure that the error message at least has some reference to the flag that is not allowed. Something like `/ERROR(.+)--hosts/` would work.
nit these will get changed back during next release.
Shouldn't these options also include `@babel/preset-env`? Also I see you set `babelrc` to `false`, could we rely on our existing `.babelrc` file? Feels like some duplicate configuration otherwise.
Instead of building in routing for a browser-specific command, could you refactor the HttpCommandExecutor to allow arbitrary commands to be registered?
Thanks! I somehow lost this between my far too many branchs.
The stages are correct, but the more forgiving `kAttachmentRasterOrder` should be used, based on a review of the spec. That should give the same effect of suppressing the false positive conflict between the DEPTH R/W and resolve. > End-of-subpass multisample resolves are treated as color attachment writes for the purposes of synchronization. This applies to resolve operations for both color and depth/stencil attachments. That is, they are considered to execute in the VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT pipeline stage and their writes are synchronized with VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT. Synchronization between rendering within a subpass and any resolve operations at the end of the subpass occurs automatically, without need for explicit dependencies or pipeline barriers.
There is an option to hide the subscriptions list from the sidebar. If it is hidden, the filter text should not be displayed.
can container ID > 255 chars? why are we doing this check?
Out of the scope.
Please expand "later behavior". Presumably something to do with the prefetch logic?
Should we be sharing this property key with the read? Maybe it should be belong to the file-scan-task object itself?
Unrelated to this change, but this is a fix for when TestDoStartCgroupInitHappyPath has a failure after the test goroutine has already exited.
We have this functions in a couple of places. It should probably live in util or something.
Not sure if this needs a doc block or not since it's completely internal, but   for cleaning this up. (@felixarntz docs?)
This cancels the above null-check I guess.
Set default value as empty array instead of null
Is there a reason why you're not using Rspec `skip`? It allows to specify message and makes it clearly visible in test results which tests were skipped.
Was this change triggered by baseline?
This should be ` /$(ghc_find #{config[:ghc]})/ ` instead of ` /#{ghc_version}/ `, I think.
invalid operation: exp (variable of type *Service) has no field or method getAddressDetails (from `typecheck`)
The library -> modules and filters -> filter path changes are breaking changes or?
For the first look, this change is strange. Were we passing these tests before?
We would want ssmp to wake up every 3 seconds if there are no other requests to it and do some cleanup tasks. So, it is not clear why do you want to set this to 0.
Nit, these Err not nils should be `t.Fatalf` not error. We want to the test to stop if this error occurs.
This check looks odd to me. I can't quite grok it. Why is it needed now? What's changed?
Please add return and return type description to docstring of this method.
What are your thoughts on the long term solution for the naming of this variable? Do you think we should revert the logic when we are ready to make the next set of breaking API changes?
How about that `scaleFactor`?
How about passing this through the `config`?
What's the motivation behind switching to plural here? I think we want singular cc @abhinav
Hmm... this feels like discovery should come first. perhaps `--discovery-dns-url`? @NicolasMassart any opinions on this or ideas on who it should be run by?
This doesn't solve the entire problem we talked abut yesterday, right? Because it's possible that the step itself didn't skip, but rather that it chose not to yield the output in question?
What is the purpose of this interface? Unlike ParamDocView, it doesn't seem to be used anywhere to enable polymorphism
Should this be set to something else?
Without that check it would fail later (probably in the getDecryptingCipher method) but the error could be hard to make sense of.
The genesis block needs to exist in the store the fetcher pulls from, this is because the fetcher will stop fetching when it finds a block it has seen before and this can sometimes be the genesis block.
Is there any value in setting the process to null like this?
Probably missing return here as well
is there any reason we are not adding this to companion as well?   There are no CORS concerns there, so adding probably shouldn't be a problem, no? **One question about the requestId;** Are the request Ids unique to each tus-js-client request, or are they unique to an upload instance instead?
Why are we not wrapping here?
That import now isn't needed anymore
Perhaps move this option into a separate speechViewer section, as we are planning to also save position information as well.
could you also update the starting log at L146?
`MPRester(os.environ["MP_API_KEY"])` can be left simply as `MPRester()` and it will pick up the API key from the environment. What is the purpose of this file otherwise? Is it better suited for `dev_scripts`, or a test?
should not be this lessThan15MinAgo ?
Tell me if you have a better field name for this.
We can get rid of this import then.
I guess that there is still a window here, because the GC could happen between the `PodExist` and `Delete` calls. Would it be better instead to check `err` and allow it if it says "pod has already been deleted"?
Sorry... I just realized... since we use sts_endpoint in the EKS Provider, this error message is no longer true. Role_arn is not required.
Should we update integral to operate on a single column as well?
In iceberg, we usually don't use `*` to import package, it's more clear to import the specify package one by one.
Sorry to do this, since you're touching this file can you resolve the pylint doc messages above?
There is already a log in `BaseMetastoreTableOperations` for this. It has the location, but not the table name. Maybe just add table name to that one.
`lile *LeaseInLedgerError` to reduce copying?
TODO: check whether this is needed or not
Lowercase `boolean` - use the primitive type.
Probably will undo this change for now, as I'm just targeting Weekly Iteration in this PR.
change pkg_errors to errors. Keep it consistent across all the files.
This fix has nothing to do with the product change. Just a fix I am making for the test issue.
I think we can make a safe assumption that if only two values are passed in then you have `(optionsToValidate, optionsForValidation)`, if its three then you have `(optionsToValidate, overrideOptions, optionsForValidation)`
Could be a timing thing here. When options are created they'll copy the ref for the current default propagator. If user sets through SDK the global propagator after that, it won't be reflected. Could leave it null here and then when it is used in instrumentation do `options.Propagator ?? Propagators.DefaultTextMapPropagator`. It would be a slight perf hit but it makes it hot-swappable.
Is this supported by every implementation of Java (and Android)? Should it be conditional upon `gen_nullable`?
I think this should just be worked into the next message and follow the verbosity of it.
@cijothomas do we want this to be `Set` or `Add`?
This `if` is not necessary
Use single quote to wrap the str.
There are scenario's where we skip an update with a placeholder, in this case tmp returns null with render, this is not an array so we `[null]` it
This line should actually be: `if c.KubernetesProvider == config.ProviderAKS && c.Wireguard.EncryptHostTraffic {` because we only need to tweak the MTU like this on AKS.
Was this added by accident? It doesn't seem related to Syndetics, and I don't think it should be necessary in core VuFind (but maybe it's related to one of your local customizations).
you can use a different name, like `maybe_activate` or `is_active` without `component` in the method name as this is used in the class name. E.g: `$component->should_component_be_active` is using twice the `component` word
It is is more appropriate to use `downsample_first`. If `downsample_first=True`, the downsample block is the first block and it is used for ResNet. If `downsample_first=False`, the downsample block is the last block, which is used by Hourglass network.
Here's an example of how the files in the `NotYetGenerated` directory drifted out of sync from the generated files. When we made the equality comparers internal, we neglected to fix this one.
import below copyright statement
I think we can now remove this test case since we can ensure that multiple calls to `Fetch` will double the interval on each call
Is there an easy way to check for conflict suffix to avoid false positives here?
the previous code used 'export' when platform is cisco-5, presumably because 'env' cannot be used to load variables? I have no idea if that's the case but this env vs export logic is not here
Remove this because we already added it in another pr
@The-Compiler Is this style okay or would you prefer a common userscript exception base?
Should probably skip the success event here, since it could be a noop.
I think a "string" in Scapy's spirit (if such a thing exists) is actually a `bytes` object in Python 3 (see `Str*Field`s). So maybe `RandString._fix()` should return a `bytes` object. What do you think?
nit: let's move this right under where we create the `responseWriter`, before `h.callHandler`
Would it be more performant to just `include ::RSpec::Core::Pending` here? /cc @myronmarston
I think this should read "is always observed before" or "is never observed after".
Nit: I would actually prefer that pretty JSON is the default, with a flag for compressed JSON. Can we acheive that easily?
`@package *` can be removed as well.
Changes in this file aren't related to the PR, are they? You took the opportunity to change the group deletion to using the subscriber too?
What would you think stat'ing the directory first before doing the log+mkdirall and only proceeding if the directory does not exist? The logging might be less confusing (I'd be wondering why it was logging that it was creating the directory when I knew it already existed).
this is a breaking API change. Do we really need to do it in 6.2.0? Can't we just deprecate the methods?
This isn't directly related, but the `import React from 'react';` below should be removed. We never import this directly and any modules from it we need are imported through `@wordpress/element`. This was probably added automatically at some point, but we also provide this automatically via `ProvidePlugin`.
We should call `Windows.onResume `: - When the app is launched for the first time - When the app is resumed after being paused (home button and resume or device goes to sleep) - After a permission prompt is displayed
What's the motivation for having one of these be a cycle and the other be a fixed color?
This line doesn't seem to be right?
Why not use a docstring for it?
Could you move this to the original position?
We should raise `ValueError` if `update_policy not in ['existing', 'incoming']`. (or `in Enum.__members__` or however we want to express legal values)
The cleanup call
this flag not used
What about the request headers if someone uses `request_header`? :thinking:
This askes a blocking question, which means a local Qt eventloop will be running. While this is unavoidable sometimes, the async functions should be used whenever possible (`message.confirm_async` in this case). This means: - Split everything after this question in a separate private method (you can probably just call it `_tab_close`) - If the tab is not pinned, just call `_tab_close` directly - If it is pinned, call `message.confirm_async` with `yes_action=self._tab_close`
This change is incorrect: the current log level is correct.
the test was failing likely due to locale issue. had to increment the date by 1 to make it pass
There's a syntax error on this line.
nit: I think that `workloadID` should suffice for this test... that's what we'd be issuing anyways
I'm not sure we should be doing this based on the extension? Calling them `.build_defs` is just a convention
I think we might need some special handling for `Spec.ControlPlaneLoadBalancer.SecurityGroups`, it looks like we are currently only handling the case that `Spec.ControlPlaneLoadBalancer` is nil.
We should add the definition to `.storybook/config.js` as well.
Could we use just a normal string here?
These are really meant to be the keys in the capabilities, not the keys of values within the capabilities
Let's move the check outside the `for`-loop so that we don't have to do it for every prop. If we change it to check for `vnode.type === 'string'` we can automatically skip checking text nodes which don't have props  
Should this be moved down (or up) to under the client lock instead of server lock?
An iterator **of {\@code n} sequential elements,** where each element ~are~ **is the** given {\@code element}.
Why are these variables renamed? Is there a conflict with some Windows specific variable?
Can this just be an else?
filterCache can be null
using factory method. return CompletableFuture.completedFuture
Missing new line.
`XUnitIntegration` doesn't need to cache this anymore.
While we're at it should we add Department? See Dataverse Category: Add Department #2829
So this is not needed anymore for all attributes?
This should just be a `.Bool()` flag I think, we don't encode anything beyond y/n here. See `$(RUN_CHECK)` and `$(STOP_ON_PKG_FAIL)` for examples of how to pass those in.
looks like you forgot to actually increase the version
nit: the correct name is "request line", so let's use the right one here :)
nit: maybe call these `loadCollection()/loadDb()`
What if you don't want to continue with the behavior, but you just want the deprecation to go away? Should we add `skip_after_action :discard_flash_if_xhr`?
We can't unfortunately change any of our old flags :( it'd be a breaking change. Instead, we can keep both `githubURLFlag` and `repoURLFlag` and make the description of `githubURLFlagDescription` as "(Deprecated) Use --url instead. GitHub respository URL for your service." It would be even better if we can make `githubURLFlag` as hidden but keep in the command. This way old commands will still work with `--github-url` but it won't appear anymore in the help menu.
Howdy! You'll want to do this same thing (replace `hydrateParamCache` with `proofs/bin/paramcache` and then do the copy) in `smartdeps`, too.
3) Subscribe to the script change signal in `FlowMaster.__init__`. The event handler should call `self.masterq.put(("script_change", script))`. 4) Add a `handle_script_change` function, that once called, takes the script object and calls `script.reload()`.
nit: just for consistency we can move this import block down. Right above openshift/hive imports
Does this need its own import block or can it be combined with the imports below as in most other files?
This may change "" into None. Better return filename.
What if `AddOpenTelemetryTracing` is called multiple times?
I think you can just simply fix this line to `self[:2].to_pandas()`
There is a simpler way to do this: 1. Don't bother with the whole lowerCamelApiTypeName in SampleConfig 2. Use this code: `return localVarName(Name.upperCamel(apiTypeName, "Service"));` Basically, each of the static creation methods of Name just need to have their arguments all be in the same casing, so you would just pass the upper camel string "Service" here.
I don't think we need an empty value here; any middleware that wants a default value for empty placeholders will pass in what that value should be.
@wxing1292 to double check this is the right version to use?
can we have String() and GoString() implementation of `apis.CStorPool` struct to pretty print it.
replacing the `1` with `io.SeekCurrent` may be good here
Should we put a TODO here to route the http.Transport through here?
is there a better way to detect this rather than just always assuming it's cygwin if everything else fails? i think you can check `if sys.platform == 'cygwin'`
Try to separate it to different methods. Invoke is huge :)
Should these link be removed?
1: D400 First line should end with '.', not 'd' 4: I102 copyright year is outdated, expected 2014 but got 2012 25:29: E126 continuation line over-indented for hanging indent 31: D103 Docstring missing 40: D103 Docstring missing 57: D103 Docstring missing 68: D103 Docstring missing 101: D103 Docstring missing 115: D401 First line should be imperative: 'Call', not 'Calls' 115: D400 First line should end with '.', not 't' 134: D400 First line should end with '.', not 'e' 134: D205 Blank line missing between one-line summary and description
as before - if you've set this, you should be able to get rid of the `os.Setenv("ALGOSMALLLAMBDAMSEC", "500")`. make sure that the various tests still takes have the same execution time.
That's actually not as bad as I thought it was going to be.
Please put it like this: `CStorPoolPhase is a typed string for phase field of CStorPool`
The desktop app will load this fine. on iOS I get `TypeError: undefined is not an object (evaluating '_$$_REQUIRE(_dependencyMap[8], "stream").Readable.Readable')` if I change it to `const Readable = require('stream').Readable;` or `const { Readable } = require('stream');` I get undefined errors from the stream on iOS: `[TypeError: stream.on is not a function. (In 'stream.on("data", function (chunk) { return chunks.push(chunk); })', 'stream.on' is undefined)]` What am I missing?
This should be grouped with the below imports, and the two separate groups of imports below should likely also be grouped together
That's a strange name =)
index by memory address? I realize I don't understand why we don't just build a list :)
`ClaimFromRewardingFundBaseGas` is a global variable (from `gochecknoglobals`)
why delete this method?
I think this can be moved into the model, at the very least, but I also think you might be able to do a has many through.
This also runs a patch if its in the middle of one.
Things like these should have been addressed before submitting a pull request.
It was decided that blockSignerAddress is not only redundant (use the miner owner public key instead which is already stored), but does not belong in config.
This needs to be fixed before we can accept the PR
This isn't a fatal error, we don't want to crash just because we can't set configs, we have sane defaults set
Why is this being added here? Is this relevant to these changes?
I was seeing `Warning: preg_match(): Unknown modifier 'a' in /path/to/project/vendor/vimeo/psalm/src/Psalm/Context.php on line 480` here
would be nice to have this as a parameter (Options), re: technical debt discussions
> the time range the listen search the time range of the listen search?
nit: align the leftmost quotes
I think this blank line may be removed
It might be good to have a note here: > work-around for issue #7562 allowing us to differentiate presentational lists from interactive lists (such as of size greater 1 and ARIA list boxes). In firefox, this is possible by the presence of a read-only state, even in content editable.
commit mesasge: I would append "...Kernel::loadClassCache() method call"
Should this be inside the `else` below and right after `CDebugf` so that we still get the logs?
Thanks for the pr. Would you be able to edit the file to use spaces rather than tabs? Normally we have prettier run on commit, but I guess file patches don't do that.
Can we move this logic into the `boto.compat` module? Then it's just `from boto.compat import OrderedDict` instead. Also, this is introducing a new dependency. What about users on 2.6.x that don't have the OrderedDict module installed? We may need to fall back to an ordinary `dict` so that existing code in the wild does not break.
I think this is added to wrong file. You wanted to add to cmd/agent/, right?
We'll be renaming ActivitySampler to Sampler anyway, so this change will be non-required. Prefer to avoid changes here to avoid merge conflict with my PR doing the rename.
I was thinking about this for #2928 too, which also uses `endsWith`... Presumably `SomeOtherObject` would match `endsWith("Object")`, meaning that something more sophisticated like splitting it then iterating right to left would be needed in order to do this robustly?
Include the standard parameterized error tests as well.
Here is another concatenation which should be updated. Even though `Source:` and the link are essentially separate, it isn't RTL friendly. This would be another good use for `createInterpolateElement` I think so that we wouldn't need to include all of the classnames in the translation string (or extract them to a placeholder). That would allow us to use the `Link` component as well, rather than using its resulting HTML as a string which will be a pain to maintain if we were to make changes to the base `Link` component.
My only concern with changing the node selector here is that someone else _could_ have built their own images for other platforms and set them to be used using the flag override on the controller, which in turn this change would break. Perhaps not changing the selector for acmesolver pods makes most sense, and then working on actually having support for Windows? wdyt?
It's a minor quibble I know, but I like having the imports ordered by lengt
Can this just be a feature flag to check if it's on? This will give us flexibility on launch date (which could be turned on July 1st) and allow us to easily revert back in case the policy is reverted.
Awesome! We may also use negative rule `never` to fix new lines after `return`: `{ blankLine: "never", prev: "return", next: "*" }`
Adding fixture to the body as we don't have the `runner.tmpl` anymore
But won't we do case-insensitive matching for all the drivers? For example, we will get the revision field case-insensitively. Let's make this case-sensitive. I think the way the mongo driver works, by lowercasing field names, will be OK with that.
Does this need to be global?
Do we need to internalize net.sourceforge.pmd.lang.java.ast.JavaParserConstants on master, so that we can rename it?
don't we need to set this label on pool pods? I don't see them being set
Are you sure? We've changed it during an introduction of the IME support.
Double check the issuers package too :)
Do we need to change occurences where `setup` was called before?
> UI plugins swallow rejection errors so they don't end up in the console with no way to fix But it will still catch upstream in `addFile` and restrictions to show the informer?..  
The same `ifdef` should apply to `#include <wlr/backend/x11.h>` line 14
What is triggering this message in this file?
this change should be described in the changelog. I'll update it when merging if nothing else arises.
Had to add this to get macOS to work.
It isn't necessary to check whether there are projected ID columns. The code is shorter if the values are available by default, even if they aren't used. This fixes the problem where there are constants to add (like `_file`) but no identity partition values are projected.
Why need alias?
nit: `"Unexpected error while calculating: unable to convert %T to %T: %v"`
This isn't needed here, we still run `this._afterAuthentication` which loads settings & config - the reason the settings fetch is here is to make sure we have all the settings before saving the blog title rather than fetching everything once auth has completed. Probably moot anyway as the oauth code will be removed shortly  
Is this needed? I don't see any uses.
Could this line use `url: current_user.subscription`?
It should be return "''"; I will fix it
Converting this to an enum makes it obvious that I combined things that don't really belong together. It would probably be better to create two enums `StoreType` and `TransportType` (in more appropriate locations). That also makes it necessary to have (at least) two `ServerSettings` classes. `IncomingServerSettings` and `OutgoingServerSettings`. Also, the naming is inconsistent. Maybe it would be better to make the string that is used for import/export explicit, e.g. WEBDAV("WebDAV").
do we want to register this in the mock server for testing?
This change shouldn't be included with this push. Shouldn't push version changes with a pull-request.
Wait, what is this doing? Is this a way to create methods that are only accessible from tests?
This looks a bit cryptic to me, and also it contains a dash. How about `mymysterium.url`?
You are fixing the crash problem, and you have fixed it, so it won't crash anymore. So `crash_test` is not a proper name.
could you change this to instead of being a `try.. except` be `message = message.get('message')`
just clarifying the error messages a bit.
This set of changes is the one part of this that I'm not completely sure is valid. Can someone look over this to make sure I got the E's right?
Suggestion: specify `arity` for this option.
Would it be better to put like `Which Dockerfile would you like to use for %s?`
are this docs neccesary ?
Could you explain why we default to binary now? It seems it's safer to default to text to avoid stuff getting executed or parsed by browsers accidentally. If we need to add support for particular types, we can add them explicitly right?
While I think it makes sense to update the mapping programmatically, I don't see much value in exposing it as part of the table API. We want to keep the Table API small, so if we can handle this by using a separate API that consumes and produces JSON, then that is preferred. Also, we may have more than one mapping in the future, so keeping this decoupled also helps out for those use cases. For now, let's build a utility class to perform these updates. We can always add this to the public API later if we choose to.
Do we really need separate error in manager if utils.ErrRequestCancelled is the only error which indicates cancelation ?
I know we're deleting this soon but I thought I'd fix it anyway :smile:
curious about this change, since it is not mentioned in the commit message and now we have `uint8` all over the place
This is not really needed, the line added in `GridNodeConfiguration.java` is what really fixes the `remoteHost` regression.
can we rename `fileLogLevelUsage` to be more generic like `instanceLogLevelUsage`? Same goes for other var below like fileLogLevelFlagName, FileLogLevel.
I believe this env var won't be set anywhere. Do we need this condition?
All the callers of `ExtractSomeIfAny`, always pass `true` to `synthetic_value`. Can we get rid of the extra argument?
You didn't mean to export this, right?
Just a thought (doesn't change the output or anything) - do you think we'll ever want to access the other properties of `oldVNode` from within `_childDidSuspend`? If so we could pass `oldVNode` here and then check these properties in the _childDidSuspend implementation. I don't have strong feelings either way, just occurred to me.
I don't think this import is being used.
@lpabon having a separate package name `aws_test` allows to test the package as if the tester was an external package. If the test package name is the same as the package being tested, the test package can also use methods and variables not exposed to the eventual user.
Why would the read access need to be mutexed? The caller might still get a wrong answer since the value might change immediately after the mutex is unlocked before the caller receives the value.
I wonder if the default here should be nightly? I won't block on that though just a question for a follow up.
This is clever, but I do admit I think it's kinda weird. We can go with it for now and fix it later if people complain.
I think same here - in general we don't need to use Setters / Getters since configParams isn't a public API.
why is this changed ?
You've not updated the `o.Status.Reason = fmt.Sprintf("Failed to retrieve Order resource: %v", err)` line below here when you changed this, so here we are checking `errUpdate` but will print the contents of `err` instead.
why zero value for `arrayType` for the default value of the optional args?
What about `selectedColumns`? I believe it is frequently used throughout the project.
it's unclear to me which method you are recommending overriding?
I'm guessing this was just added for debugging? Should probably remove it so we aren't modifying 3rd party libs.
I think this should never happen and should return an error also. Having `WorkflowBackoffTimerTask` with `UNSPECIFIED` type looks weird.
License copied two times!!
@tofumatt, has it been changed intentionally? It doesn't seem to be required in IB, plus we haven't had `content-drilldown` before... If it has been changed intentionally, then should we update the `AnalyticsDashboardWidget` component to be use `content-drilldown` instead of `content-pages` as well?
If we want to expose this for FFI use in the standard library, it needs to get either a `pony_` or `ponyint_` prefix to its name, for cleanliness of the function namespace. `pony_` means it is a public API meant for use by third party code, whereas `ponyint_` means it is internal. Unless there is a good reason to make it public, we should prefer to keep it internal because public functions require us to treat any changes to them as breaking changes in Pony. So, this function should end up named `ponyint_address_length`, or something else with that prefix.
How about just override the `buildFilter`? Passing another function here is a little weird.
I think the docstring should say something like "Alias for the `source` option" or something similar.
What is this page going to do that is different than the products index we already have?
this package has to be renamed to `typeinference`
this was flapping
Is the tutorial going to move to the new Trafodion website or will it stay on the Confluence wiki? (Check with Gunnar.)
This function isn't useful? it's just a clone of GetParserWithBuiltins?
It looks like there's a new `isNavigatingTo( url )` selector for this very purpose so let's use this here instead. This way we just need to use the one selector rather than two. Let's assign that to a similar-named variable here (e.g. `isNavigatingToPostResetURL`) rather than the prop it's used with.
Since we're returning the error with the same content, we don't need to log it here; it will get bubbled up and emitted that way.
Unrelated bugfix for NPE.
is type a free string too?
Isn't the point of the clock module to encapsulate access to `time.Now()`? Coming later?
Use `String.format(Locale.US, ...) to avoid the `Lint` warning.
Stephen already fixed this one. Only the OverSize test is flaky now right?
I know there's only two values but I find it a bit confusing that it's true/false. Could you change it to a string enum with values "portrait" and "landscape"? Then when calling printToPdf you can just do `landscape: Setting.value('export.pdfPageOrientation') === 'landscape'`
This should say "why" NVDA should do things in this order.
I was dubious about putting getNonStreamingMethods in the context, but after some thought, I have decided to embrace the approach. In this particular case, the loop is supposed to be over page streaming methods. So, could you add a getPageStreamingMethods() method in the context, use it here, and remove the isPageStreaming() check below?
Why not `queryUUID` (and reference the same constant as in other places)?
Let's keep using NewKeeper so that it got covered by tests.
I like the idea of replacing all the `#if NET461` with `#if NETFRAMEWORK`... is that worth doing now? Means fewer changes if we go to 4.7.2 at some point  
This is now done in the after method, so this test won't pass any more.
it should instead be `from .hmac_drbg import DRBG` also, please put it at the bottom of the imports (PEP 8 order), so near line 36
this namespace is never used
How is this env var populated? Can this be retrieved from cluster metadata?
I think normally we'd make this a precondition (using e.g. `g_return_val_if_fail`), but meh, this works too!
At load time, we ensure the config'd objects exist.
qq: Should this include the iptables6-save sim. to the inverse checks above?
Mentioned elsewhere but repeating again: would be nice to have units (ideally `Size *Bytes`).
As defaultSendPort is being removed, and I don't like TODOs on examples, please remove the whole line
This has the likely potential to break existing tests that are relying on the old beaker behavior. If we are going to release this in beaker 3.x, then we need to preserve the old behavior as well (so set both the `upcase` and original values). On Windows, they env variables will overwrite each other, with the same value, so not an issue. On *nix, there will be two env variables, but they will have the same value, so again no issue.
why use these rather than regular named paths?
This is wrong, should be `entry.getValue()`
There is no docblock on the parent method. Also, not related, but I forgot to typehint the `$templating` constructor argument above.
`apply_prep.run_task` also seems like it can just use `@context.run_task`
Feels like this could have a default null value to remove the need for this explicit "null" use.
Maybe leaving this out will save some bytes as in let `let isHydrating = replaceNode === null`
You forgot an optimization? `$countries = CountryField::FORMAT_ISO_3166_ALPHA3 === $countryCodeFormat ? Countries::getAlpha3Names() : $countriesAlpha2;`
why is this called toBuilder when the method is called fromBuilder? (I realise you did not change this...)
I wouldn't make MethodDeclarator an AccessNode, nor an Annotatable. It's the MethodDeclaration that can be annotated, and has info about the modifiers, and is already an AccessNode
Should we validate that this is between 0 and 100?
Thanks for catching the bug. Here your change lets `v4IPNet` and `v6IPNet` take the first IPv4/IPv6 address in `addrList`. Maybe choose the last one also works and makes code simpler? What's your idea? @tnqn
OK, so the concrete implementation will loop? But then it's important that this method waits for a while before it returns no messages. To be specific, a GCP implementation that set `ReturnImmediately` to true or false would both satisfy this requirement, but the first would cause busy-waiting.
Should it be `'uppy-input-`?
Is there a reason why we wouldn't want to check this every time? Why are we only checking for the footer and scroll bar when enableCellEditOnFocus is true?
i think this should get put into its own file. This could start to grow :)
It would be better to keep focus on the main text control. But to get around the fact that Dialogs focus their first child on show, even when not active, something like Dialog.isActive should be chcked when appending text, rather than whether the text control has focus.
As the test failures indicate, making this change is going to mean changing everything which currently implements this interface.
grant bonus depends on both `admin{}` stored in statedb, and `P2Start/End` in local struct, which is kind of weird at Kamchatka height, we add the bonus Start/End epoch into `admin{}`, so it solely depends on `admin{}` stored in statedb
Perhaps use the new `.keys()` method here instead?
IMvxFormsView -> IMvxElement is a breaking change, isn't it?
Use `UpperCamelCase` for function names
should the group_id = "{0}" be group_id = %s You'd still keep the {} for the group_members_{} for the tablename but make the filter clause parameterized.
I just realized that we are logging time now - we shouldn't do that here, that's the logger's job. I've opened a new issue for that #444.
Just curious... why the alias here?
Why not put this below "strings"?
Maybe use ChoiceParameter?
@aimanrosli23 Judging from the commit description, I do not know why this file got changed so much. Could you help to double confirm if you do not revert the changes brought by commits: SHA-1: 643623147a1feaddd734ddd84604e1d8e9dcebee * MdeModulePkg/SdMmcPciHcDxe: Send SEND_STATUS at lower frequency SHA-1: 49accdedf956f175041040e677163b7cbb746283 * MdeModulePkg/SdMmcPciHcDxe: Hook SwitchClockFreq after SD clock start
This change and other similar ones should not be part of this commit. This commit is about adding a ImageUploadType not fixing controllers and stuff.
I think a test in `spec/integration` might help keep this file a bit more manageable, especially since we're just checking file contents and errors. But basically the same idea!
This now checks nearly all errors that can occur. How about explicitly listing cases where we want it to retry? I think there are not many cases where we want that, as the many added conditions in the last years show :)
Checking for actionable here instead of grabbing the first pending approval. I tested this with proposal ID 265 on staging.
i think you want a different flag and help like `--ffmpeg` or something; and you need to mark any tests you want skipped
Could you add `s` to `@return`?
Can we escalate this to `warn`. It is a major event.
Sorry for the delay on this! It looks like Circle CI isn't running tests on some of the PRs, but this doesn't look like it would work   I might be missing something, but are the tests all passing locally?
Code style. Btw, it's weird Codacy didn't catch that.
A correct by unrelated change. We'll slide this one in without another word ;)
That was a really bad CR from me before if I did not spot it.
It wasn't possible to call this method with `PartitionSpec.unpartitioned()` as the schema in the spec was empty.
`ctx` is unused in EnablePiped
replace "Child Workflow" with "any workflow"
Please revise the naming of these two flags. _**default**_ is the value we take when user doesn't provide. You could infer from the fact how `default_parts_num` are used.
Please use the Google java code style. Basically, add more space characters like in the statements below. Next to method arguments and curly braces. This is currently not checked on CI because it is too inconsistent in the code base but I would prefer new code to be consistent.
delete the empty line "github.com/pkg/errors" should be grouped with other third party packages same for the rest
I think we should change the variable name of `err` in `if err, ok := err.(*exec.ExitError); ok `, this re-assignment of `err` still affects the next `else` branch
Having a negative in the variable/method name makes the code harder to read. Also, you inverted the logic but didn't invert the default value. I suggest sticking to the original name.
this is not necessary?
`published.recently_published_first` reads a little oddly to me. Is this the same thing as `Video.published.ordered`?
Can we update bool to an enum instead of a string? This helps future extensibility
Missing the license
I don't see us ignoring the field. Are we sure Prometheus wouldn't refuse to load the rules?
`assertItemsEqual` compares the sequences after sorting them, is that intended?
Why has this timeout doubled?
Superfluous space inserted.
"default 65536" Not sure if it's important to state, but block_processor_full_size has a different default for fast_bootstrap.
lol that variable name
Please put it in following way : `// DeleteStoragePool receives StoragePoolClaim delete event and calls the required handlers to delete other pool related resources.`
Can you rename this and the file `InfluxDBProvider` and `influxdb_provider.go` respectively?
Why is api-version now removed in the generated code?
How did you determine these - and how can we be confident that nothing is missing?
If you only want to run a specific group of tests you can always use `.only` like `it.only()` or `describe.only()`. It may not speed up the globbing process as much as this change here :)
The name `errors` is a bit mis-leading -- usually I'd expect a field called `errors` to be an array of errors but here it's just a count. And it's not a count of _all_ errors -- it's a count only of some errors.
I don't think these asserts are necessary, because `subsurface_find_sibling` already searches in the parent. Or am I missing something?
I would skip this check or add an internal server error response.
Since you have defined this struct, I would suggest to replace all exist literal structs by this.
Please change from `let` to `const` here and above. Setting value to `this.hot.countSourceCols()` should be enought probably.
Simple Notification **Service** (singular)
@preda-bogdan let's use a filter for the header classes, something like, hfg_header_classes where we hook this logic, in neve pro
The docstring is outdated.
@cijothomas I needed a way to set the Exporter.ParentProvider when the Processor's gets set. Internal to SDK though.
`QtOSError` inherits `OSError`, so I don't think it's needed to list them both here.
Instead of just "See SubscriberOptions....", say something like "Use ... to choose between the two."
would it make sense to return empty or error if label doesn't exists?
You just changed my life :) I grew very attached to this safe nav approach when working with Groovy years ago `obj?.method`. Glad to see its now a part of Ruby!
A bit late, but I don't think this is necessary, as all callers will send absolute paths. And if you ever get a relative path, resolving it with `toAbsolutePath()` leads to it being relative to whatever CWD the app is started with, while the typical resolving of relative `instanceDir` is to resolve it relative to CoreContainer#coreRootDirectory.
This doesn't seem related to docs? :)
Technically the "right" variables to use would be the ones in `libgit/autogit_node_wrappers.go", which define how the tlf types map to subdirs for autogit specifically. (They would have to be exported.) But this is fine too I guess, just a little dirtier.
oh! missed a `:` here; let me fix that; also can get rid of the intermediate variable
Not sure if this doesn't require explicitly adding this library to cmake.
why is it in the list twice to begin with?
Why target cannot be external endpoints?
I see the `+1` issue, but we used to check if `o.lss != nil` and we don't anymore, so we are sure that it won't be nil here, right?
after ||, no need inputs != nullptr
Why do you think that it is necessary to create this class?
How portable is this? (e.g., Windows). I'm relaunching tests of windows because they failed for other reasons.
Actually there is race condition here, because pointer assignment isn't atomic on some platform. But this is a rare case we should hit, we can just let it go for now. Maybe this is one of the TODO list.
Maybe rewrite to `Is only implemented for React Native`? (I assume that is the case).
nit: no need to add an alias for this case.
Please add docs here. And also warn users that this mode should be avoided whenever possible, because any blocking IO will make the keep-alive-thread not run.
Why do we remove the Sign in link?
nit: `procfd` seems more appropriate now?
Changed per review in Blockly.
While you're in here, "build, push and install"?
What do these `#if TRUE` accomplish?
@red2k18 Are we sure its correct to only have 1 now?
A few things: - This may not serialize because I think the property for the sequence number on an input is `.sequenceNumber`. - There should be tests to cover these statements - Indentation is incorrect (should be two spaces, as similar to the statements above)
we should probably deprecate (and display a warning) the misspelled keyword arg here rather than removing it... and then add the new one. This changes a public API and will break any code that is currently using the misspelled version.
`if (llvm::dyn_cast_or_null<swift::WeakStorageType>(GetSwiftType(compiler_type).getPointer())` ?
Passing in and saving a reference to the `BlockCache` at init time is going to break if something calls `config.ResetCaches()`, because it replaces the `BlockCache` instance completely. This happens on user logout or by a manual write to `.kbfs_reset_caches`. So you probably want to give it the whole `config`, or maybe just the `config.BlockCache` function pointer.
`argNameVal.length` will still be !=2, so line 22 will give true and then continue on line 24
Is this a future fix? I thought the local identifier scope and the package issue were the same one.
`m_al_comms` now contains smart pointers.
Was this removed to ignore the extra columns coming from the file projection?
Is PHP the first dynamic MVVM language with grpc streaming support?
`affine_grid` and `grid_sample` are currently unused. We may remove it from `ops/__init__.py` to speedup the loading of mmdet.
Why did you remove this?
We should check if the response (`d`) contains bar as response, screw the log. :smile:
nit: just to be similar to others, can you change to interpolation?
I'm not going to stop accepting the PR, but I really hate these artifacts getting dropped in the Python code just to stop things like coverage checkers and linters from complaining.
Remove these unnecessary imports that you've added.
Adding the type hints revealed that it was necessary to distinguish between a ``PackageEntity`` and a ``ClassEntity``, because the ``ClassEntity`` has additional attributes that were dynamically added in the previous code, which confused ``mypy``.
Can you update the `Usage` to be an absolute path as well? Something like `/path/to/firebug.xpi`
I think this will change `''` to `'%'` unconditionally, i.e. there'll be no way to set `''` anymore. This should really only be used for values which make no sense anymore.
Could we shorten this constant to maybe `FEATURE_USER_AUTH`?
NPE here and in other APS plugins
Again, would not change that.
Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.
Like I said, please replace by `EXPECT(kTokenString)`
do we also need to change `mlvl_confid` -> `mlvl_confidences`>
wouldn't it be useful to split this into an error metric for the timing?
Do we require the specific implementation information here?
We can allow 7-char SHA, does not mean we want to show with 7-char in default, please change to `if len() > 10`, then cut.
As for Owin, I think we should exclude this URL in `IsNotServerLifeCheck` too?
It's a little hard to tell from the diff, but as a result of this PR, the only non-deprecated helpers are: - `has_facet_values?` (probably not long for this world) - `render_facet_partials` (perhaps part of a future component) - `render_facet_limit` (possibly obsolete once components get traction) - `facet_field_in_params` (a little tricky to deprecate at the moment) - `facet_field_presenter`
Please change to `1070400`. I promise to look into this PR in more detail before the 1.7.4 release ;)
Shouldn't this `TEXT` also be dependent on the platform, then?
It will stop working with orm, so this is not a good fix, Try using some method in a common interface
See above, no need to pass the module name.
You've got an absolute path here referencing your home dir :-).
Still curious why you need to modify this method? Why not in the future just have a method called `LogFactory.ReloadConfiguration()` instead of the config assigning itself?
Adding one line `prob = prob.clamp(min=EPS, max=1-EPS)` already works.
Want to remove this?
is this configuration key already exist in prometheus ?
unsure if the methodname can still be `GetMetricPoints()` as before...
Tiniest nit but this can be `tabindex={-1}`, `width={11}`, `height={11}`
Is that because we don't provide a UI for these?
is it possible to have both forms here? I was hoping we wouldn't be introducing more cases where we had to check the upper and lowercase version of URI options.
This should still have a value when there is no page title, e.g. just `__( 'Search Traffic Summary', 'google-site-kit' )`.
Are you sure it should be null and not an empty List?
This pattern should be applied to the other instance where NewtonsoftEscapeJProperty is used and you can remove the NewtonsoftEscapeJProperty method.
It looks like for newpullsubscription, we have two functions. One for pullsubscription with default, one for pullsubscription without default. If you remove setdefault here, then there is no differences between these two functions.
Maybe we should add flag aliases for service as well.
I'd end the sentence after `special indicator (line 3)`. And then start a new sentence: `The special field can indicate that the field specifies a reset, is a sequence ID, or is a timestamp for the record.`
Is it intentional that we removed this annotation?
no newline for function
Why not just access `ops` directly like before?
Guava changed `Objects` -> `MoreObjects`
change looks good.. but, better to make populateVersion to return same object in the case of error.. that avoids lot of complex logic and probable issues
Should this be optional for existing configs to work?
import but not used
Note this should be `delay` instead of `scale` here. I'll fix this in my branch.
Can you show before/after output in the PR description? From a cursory look, seems like it will just drop the duplicated column which isn't consistent with pandas' results.
Add a space between if and opening parenthesis please (i.e. `if (`)
@phirefly Can we look at a list of RWAs, or ask someone to double-check that this format is correct? Otherwise :shipit:
checking for ref. equality is probably fine here, but it takes a reader longer to navigate the code and figure out whether ref equality is really wanted here vs just using `equals()`
Just one more thing... How about doing all of the following? 1. renaming h2o.rb to bootstrap.rb 2. require and include the acl code _from_ bootstrap.rb
actually use type_name=print_config_type_to_string(self, with_lines=False) to populate this
Is this needed?
I don't understand this change, what is happening here?
Looks like this might be one of those "promoted features" where you can enable it by _either_ enabling the extension _or_ enabling the feature bit. If that is the case, I think this needs to be: `(device_extensions.vk_ext_scalar_block_layout == kEnabledByCreateinfo) || (enabled_features.core12.scalarBlockLayout == VK_TRUE)`.
Where did this functionality move to?
You're using the Sphinx docstring style here (maybe because it's the default in PyCharm?). Instead, you should use the NumPy style (that you've also used in other places) to be more consistent with the rest of the project.
nit: What do you think of `copilot-task-group`?
can you make the C in Consent lower case to match the other ones in this list?
There is a function to output a "JSONBool" string. That would be a good start for finding uses. But maybe just have a look at where we decide whether it is a numerical or not, thus wrapping quotes around its value. Then you have it all I guess.
I remember there were some misleading code about this but forgot to correct them. Although we initialize `config` here, it was discarded in `complete`, so I guess setting the default value here doesn't take effect. We should change L139-L140 as well to use the initialized `config`. So do antrea-controller.
this change should be reverted
Was `DefaultLogMessageRateLimit` not configurable anywhere?
Does pandas throw an exception like this?
hm is this really &&? Not ||? Was it initially correct if any of these things are not set that it needs to recreated?
do we need this change?
This log should not be an error as it communicates that we need to retry till we get the cert information for remote ingress controller.
Why do we need both includes here?
I don't think we need these. Simpler just to put `routetable.TargetType...` inline below.
rough that this needs to exist, but it is what it is
Please use packageInfo here instead. As it is used in `app.js`.
Maybe add short example list: .... type body declarations, such as AnnotationMembers, Methods, Fields
Make this private and update all the public functions to not take this argument. The variable you set below should also be private, then in the tests instead of passing the variable in to the function just update the variable. We don't want to expose the testing implementation in the public api if it can be avoided.
What the reason to change imports?
In php8 named parameters were introduced and now it is required to match called method parameter name when setting parameters by array destructing or call_user_func_array() etc.
Is this part of spec?
I just noticed that we use Return here, when we have logically allowed a packet, whereas in the forward chain we use AcceptAction. Do you know why that is?
Does this need to change `'active'` to `'Active'` and that? Or is that done in CSS or something?
Do we want to add this to the docs?
This seemed broken to me. Why would browserify only check the (previously `cdn`, now) `bundle` example? And even so, the path is incorrect here. Fixing this is unrelated so should not go into this PR I feel. But when we fix this in master, perhaps that solves the reload issues that you experienced @hedgerh?
The onNewPasscode method was taking care of creating the user account. Now the user account will already have been created.
Just for my own understanding, does aws ecs API take this token as a new input attribute? Which version of the aws sdk? I did not find it in the official aws sdk doc.
Is there even a need to keep the bool?
Maybe there is no need to modify it. Because if you don't use the mask, it won't be initialized.
Are you making it so startup script HAS to be in sources?
I don't understand why this is here and what's the intention with it? Can you elaborate what's the reasoning behind this change?
Is this case purely hypothetical or did it solve an issue that occurred in your testing? I'm trying to understand this change a little better
package header missing
we should probably deprecate (and display a warning) the misspelled keyword arg here rather than removing it... and then add the new one. This changes a public API and will break any code that is currently using the misspelled version.
why split into two lines?
This bit confused me just now as I was reading through -- turns out this is due to the `{@link}` on line 316. Reading up on this, the alternative seems to be to state the fully qualified name instead. Happy to edit if requested as I don't have a strong view either way (perhaps a small leaning towards keeping the import).
The `warn` message here seems to indicate that the forced closure of the SSH connection should raise an error; is that getting swallowed up somewhere and not raising?
do we plan to use anything else than flask for making HTTP requests inside localstack? if so, it maybe makes sense not to strongly couple to flask for now, and just leave the type of the `request` function parameters open for now.
I wonder if it's necessary to let app pass in the context. What app level context should be sent? If no, is it enough for p2p agent to compose a context with network info there?
Random extra newline.
I originally factored out these functions from date_input. Currently, they are only used in datepicker, but they seemed more general purpose. If you decide we should keep the current date_input API (in case anyone is using it directly), then I think it makes sense to factor these out in order to be able to maintain consistency, but otherwise they could be inlined into datepicker.jsx if you prefer.
In Exceptions' constructors, we always add a optional last parameter `Exception $previous = null`. In the past, this was (still is?) a part of the coding standards.
Don't check this in. This is already implemented in core_extensions/ruby/string.rb
line is 121 characters
Something wrong with cast to `(Comparator<> & Serializable)`, need to be investigated
client.getSelectedSpellName() can be used for this
Isn't this the default max width? In any case I would prefer to see these definitions in the css files.
interface for bitcoin should not change if possible. i.e: networks.testnet should return networks['btc'].testnet
I'm wondering why this isn't <openssl/md5.h>. Seems like one would have to copy the md5.h file into the source tree somewhere for this to compile cleanly. Maybe you meant to use angle brackets instead of quotes?
This change is incorrect: the current log level is correct.
Not sure what the todo is here? Is it to support some kind of defaulting based off of that?
I think we want to remove `omitempty` here
`ctx` is unused in ListDeploymentConfigTemplates
why is this deleted?
do you want to rename the codec tag here too?
No need for this variable.
What was the reason behind moving this?
`if X not in Y:`
Why is this called update params when it's updating project info? Should p called project?
I think we need to clear this out on logout, and update it on login, right?
the paymentchannel dir is where the paymentchannel manager will live. it will store the types below.
Do we want it to be so dynamic? My first idea was to base it on SyncConfig.BeamSync .
Let's use prepared statements here instead  
Please add some valid examples to help message like `"4:10"`, `"4:"`, `":10"`
Since we'e not 100% sure if `close` will be called more than once, should we set `client` to `null` or add an `AtomicBoolean closed` that will then handle the idempotency issue?
`ctx` is unused in GetEnvironment
`Vector<byte>.Count` should Jit to const when intrinsic; not sure when `Vector.IsHardwareAccelerated == false` ; however we know `readonly static int` does Jit to const.
haven't been implemented the `__constructor` for `NormalizerConfigPass` ?
this change is to avoid duplication on the defaults. They are already on the Configuration class. (Also I removed the false default, because the admin format does not have it). This is also produces the rest of the diff, changes from false to null.
This rename should also ideally be in a separate PR.
Should remove the default templates as well.
Line is too long. [82/80]
I have concerns about using this in more places before #3278 - I'll take a look at that again shortly.
`options['binary'] = WebDriver::Chrome.path` if set?
Hmmm I thought spotless would wrap this line, but it doesn't seem to complain about it
There may be a few isolated cases where the FirstN node is added during preCodeGen. Please see GenPreCode.cpp RelRoot::preCodeGen(). The example given there about Order by where sort is added in optimizer, or a FirstN where the N value is to be specified with a param seem to be cases where we would add the FirstN later. Will current change cause such views to marked as updateable? This is minor and could be resolved later, if any change is necessary.
Can rename `req` to be `opener`, since that is the object, and it wraps `req` internally?
Why do we have both `before` and `after`? Naively I would expect this to work as follows: `plz query changed` with no arguments compares the current working directory state to the last commit (i.e. HEAD, i.e. a noop when directly on a git commit). `plz query changed --since [reflike]` compare the current working directory state to the given reflike. So for CI I would expect to run something like `plz query changed --since @{upstream} (or origin/master I guess)`. And on merge I'd either run everything or just `plz query changed --since HEAD^` (given our workflow) - I don't think I'd ever want to do anything else. Either way I think before and after are slightly confusing terms here.
can we add a try / except around this to make it more stable? I like the idea of any mistakenly un-quit drivers closing down after the process is quit (the java server does this... also i forget to do driver.quit often when i use the command line repl :) )
I wonder if we should look at moving the Python stuff to a plugin and doing this there rather than adding to core plz at this point?
Please do not add author here
The config option should probably have a more specific name. Also it's not for all gridded data but specifically for Images (and its subclasses).
Similarly, this has only one implementing class
Similar to the above, put this setting back but keep the value as `'{}'`
~~Should this match the key updated above?~~ :+1:
why did you remove `zip`? It is used!
Need to do this to unblock mockgen. The interface method needs to be public to be visible in another package. The right fix is to delete this test only interface method
Let's be consistent everywhere: either "Disable"/"Enable" or "Disabled"/"Enabled". I'm voting for the latter.:)
extract a method to call from a test
In general, I suggest using the `kind()` getter inhereted from `TransportInterface`
Let's assume that on Linux `eventfd` is always available as a wrapper of the eventfd2 system call. It is supported since linux 2.6.27 + glibc 2.9, as well as from the ancient versions of bionic. In other words, it would be fair to argue that the pair would be available on practically all platforms that provide `pipe2`. Therefore switching from using `pipe2` to `eventfd` on linux unconditionally would not cause issues on our users.
Turns out my previous fix of doing `!dom.hasAttribute('value')` is not a good one as it leads to all input values always being updated. The new fix only updates it, despite `dom.value === props.value` when the value is `0` for progress elements.
this check is now redundant. The rest of the function downwards basically does the same thing but with safer checks.
@martijn00 so this PR introduces a new ViewModel lifecyle method? It isn't in the PR description/any new docs  
Why do we have this here? I'm not concerned about it really, just curious.
Please put the `el.tabIndex > -1` in the first part of the expression. The matcher will run on every node on the page, so we should put the fastest part first.
I think that `Handler` should preserve the `operation` member and the span formatter should receive the operation name string as a parameter too, otherwise the `operation` parameter in the `NewHandler` function becomes useless if we pass a custom span formatter. Also, shouldn't it be called `spanNameFormatter`?
Nit: Might as well make this same change to AdaptedPipeline.
No, it wouldn't go there because that code won't reference or enforce it. Here is ok for now.
DRY, worth extracting this method to axe.utils
This could be more indicative of what it is... e.g... `stresstest_time_limit`
Would it be better to pass the dependency status as the parameter into the SQL string? In case the enum value is changed in the future, we don't need to change the code here.
this is 16 hours, is that enough?
Why is this a 'transaction' and not in the block header?
something about the arbitrary file access part here makes me nervous. Can we keep the `if not path.endswith(".ipynb")` check from before here as well? Just imagining a weird attack scenario where somebody somehow uses this to get access to confidental files or something
Please just remove this line. We have the git history if we want the old version.
we still can end up passing a blank org_id to the scope method if for any reason the params is not present...
Since this var is no longer defined we should remove the `if skip_targets.any?` bit below.
"including"? Since it doesn't take any parameters, I'm not sure how it can update anything else...
@aimanrosli23 Could you help to confirm if you do not revert the change in below commit: SHA-1: 643623147a1feaddd734ddd84604e1d8e9dcebee * MdeModulePkg/SdMmcPciHcDxe: Send SEND_STATUS at lower frequency
Will you link to {!webdriver.promise.Promise} here?
Does this mean the content changed with the new pyopenssl version? Is Wireshark already compatible with this new format?
Could we accept caseless strings (e.g. `off`, `on`, `auto`) instead of numbers to indicate the mode? Of course, we should use an enum internally (as we already do).
Thanks for moving this up with the rest of the variables. Much tidier :)
We try not to change the function footprints unless absolutely necessary. Why is it necessary to have both secuirty_group_ids and security_groups?
There doesn't seem to be a reason to copy this here.
don't need this line, since it is not tested here?
Probably "server port" -> "TCP port"
pls use `err` instead of `e`
I think this starts a new `powershell.exe` interpreter each time, which is pretty slow to run a single command. Can we just do `on(bolt, "cmd /c #{bolt_command}")`? /cc @Iristyle
Can we make sure ECS service treats it as int64 as well?
Is this the best way to import `FileSystemTarget`?
Why is this now public?
@i110 Do you have an idea on how we should propagate errors that occur in this block? The error condition happens when i) `h2o_buffer_reserve` fails to allocate space (happens in master as well), or ii) `fill_cb` returns an error (unique to this PR).
can you remind me why we keep the pointer if it's a `map[string]<PStruct>`? are there other scenarios where the pointer is kept?
Instead of patching vendor, let's update the version of sdk-go to a more recent one that doesn't have this line.
as best i can tell, you are setting this here in order to make it available in `(e *ETCD) Snapshot(ctx context.Context, config *config.Control) error`. It feels wrong to pass state like this through an env var. Could you instead add a `nodeName` property to the ETCD struct?
Shouldn't we throw an exception if the context is null instead ?
Although this change looks good. Maybe there are other inconsistent cases too?
Please use `h2o_lcstris` instead of `strncasecmp` so that the comparison would be a complete match (instead of a prefix match; current code would yield true if [val,len] is ["O", 1]) and that it would be locale-independent.
You can replace IP by hostname.
Is there a need for group as well? crun sets both.
I assume there will never be a scenario where justValidate is expected to be true on a restart
Should this be true now by default?
There are lots of default value changed, not sure if it break the old behavior.
We can revert this to reduce the diff of the PR.
Terminology question - these are called "global options" in the code, but the parallel non-global versions of these are called "directives"... Should this be `RegisterGlobalDirective`? Or does that have different semantics?
I would appreciate it if you could rename `link` to `all_link` so that the roles of the two links (the other is `target_link`) become clearer.
Not in the order of display : Front, Ingredient, Nutrition here (which is the right thing), Actually displayed: Front, Nutrition, Ingredients
There's a lot of changed tests -- but no new tests. You need unit and integration tests for this.
Wouldn't composite outbounds compose the transport, such that it would still be represented as a single transport?
A full parse of the plan here on listing the plans will be expensive from both a computation and IO perspective.
We control `octest`, so it shouldn't be necessary to provide struct literal keys. This is a case of vet being too picky.
I don't think we this field in session, it's a serial number for proposal but not unique index itself
I think it'd make sense to only calculate time.time() once (it's also used if max_ts and min_ts aren't set)
Assigning capabilities to the field here is not the best idea. Semantically this field contains the capabilities returned by the browser after session start. So here we sould better amend capabilities and return them from `init` method to pass later to `startSession` method (that will assign the capabilities returned by the browser to the field).
Should not be removed.
If I enable the clangsa analyzer with the `--stats` flag the checkers will be disabled even if they were enabled previously. I think we should check here if stats was enabled. `if 'stats_enabled' in args and args.stats_enabled` we should leave them enabled.
Need to populate the `RequestID` field for these errors. This can be obtained from r.RequestID i think, but need to make sure. The `r.RequestID` should of been populated from the `UnmarshalMeta` handler list.
Ah, yeah, this is the test for the validation that I mentioned in a remark above about relaxing the validation.
This is equivalent to stdout. Why not just replace stdin with stdout in `IsProcessBackground`?
Why add this here?
Should this be "the new revision value"?
Instead of importing context besides beehivecontext, I'd suggest include golang context functionalities into beehivecontext. To keep channelq only rely on beehive.
Why do we need this flag? can this be detected if the table is bucketed/partitioned and enabled/disabled automatically? Is this for backwards compatibility?
Perhaps this could be moved into `InitPWM`? I suspect not initializing the clocks will reduce power consumption.
We can remove this one. It's just a random one I got for free for testing.
Would using `HintLabel` here instead (without `setObjectName`) work?
S1008: should use 'return <expr>' instead of 'if <expr> { return <bool> }; return <bool>' (from `gosimple`)
You can remove these if they've been resolved in NODE-3405 and this isn't depending on it
@kvwalker should this method have `ignoreUndefined` supported as an `option`?
Using `Tracer.Instance` in here is problematic for testing   It will likely cause some other tests to break I think - that's why we started passing in `IScopeManager` EDIT: I see you used `[TracerRestore]` - maybe that'll be enough!
please revert all of these unrelated whitespace changes
Why is this required to turn the static readonlies into jitted const? Is this a bug in the jitter?
This is a change. The old code was just wrong before, but now here (and one other machine-readable place) we expose the start index as 0 for the first item.
See above, the `isValidWebDataStreamID` implementation from before is actually correct. What we need here instead is a new `isValidMeasurementID` function.
Why this is needed?
Why is this line deleted?
Why reference is converted to table?
If only Gatling uses it, can we skip introducing new entity for now? Looks like overkill...
Can you add a space before the equal sign? There are a couple other places where spaces are missing in this PR.
Capitalisation seems inconsistent here?
do we really need this behavour to be configurable?
Should be 2.1.1
this method is not used
Does this not do the same thing as `copy`? I thought that `copy` just did an elementwise assignment, but maybe I was wrong.
Kind of a nit-pick, but is there no way to solve this while still not rendering an empty div if `footerText` is empty? We could still use the `Row` to maintain the same layout but then only render the `Cell` for the pagination - I think it's possible to use specific classes to horizontally offset?
In theory `isset($metadata['associationType'])` is `false` if the linked field is not an association field, isn't?
Is it fine to pass the "-o compression=on" in the middle instead of at the end ?
Do we need to worry about a race condition on this decrement (@The-Compiler)? I'm not sure how the python callbacks work, so this might not need to be something to worry about.
If you move the other functions, this should also be moved to `makeflow_gc.h`.
Is this getting used in other places? Can we switch all the places to use the new API you added?
TODO: remove this unused import
m prefix no longer in code style
The PR description says the lowest on-demand request priority is `2^30`. Why the `-1` here?
I wonder if this is a fitting name. Why "expands user"? Wouldn't be `user_expanded` or so be more fitting?
This deletion is unnecessary.
Remove this line.
Isn't this an example that this will be prone to false positives ? We had nothing to fix in the codebase (And I think there is dict that could be named tuple in the MessageStore/MessageIdStore), but we have a false positives on our checkers.
Why do we want to remove this one? Are we planning to substitute it?
should we validate that AWSRegion has also been set here so that we don't get into the if-block that relies on the ec2 metadata client below?
does it return something?
This variable needs `.v1` at the end of it, or the tests below need it. There are some test failures as a result
I added this here because people cards (which depends on cardBuilder) had this added in blurhash. Not sure when this is used though cc @JustAMan
This was removed in a recent PR for the admin bar, but should have been kept. It's been restored in the other admin bar PR but I've added it here to for completeness.
Does this need to return an error or could it return `false, nil`?
We should initialize the observation in the constructor of the Script class - otherwise, we don't have this feature for mitmdump.
> k1 src0 src2 -> dst s/src2/src1/ nit: k1 is actually src0 according to instr_get_src(instr, 0) which makes this a little confusing
Should we just inline the assets here? I can't think of an advantage to having them in a separate file.
Maybe would be better to rename it to "onEveryKey" or "fireOnEveryKey".
Was there a customer who had this set to an empty string?
We should add `Secure` as well
Doc size increased by 1 since _root_ is also returned by queries.
please undo this change. you didn't really meant to make it, right ?
Line is too long. [86/80]
I think it's wise to keep the behavior backwards-compatible (so `false` as default)
This fix looks good. My concern, don't forget to fix metad too!
Is this not required?
can we use PC's time to version in Distributed Systems?
Nit: from the Internet.
SQLAlchemy's session management does magic to make sure that if the rollback fails you still get the original exception that caused the rollback. Also it looks nicer.
This check/exception is a guard for the next few lines of code. It shouldn't be necessary now. In fact, I don't think you need the if (parentConnection.type == Blockly.INPUT_VALUE) branch at all.
Generally, if cast from int to char*, you could cast directly. Because no errors should happen.
I'm not really a fan of this -- why not set up logging for `init` here (or setting a global flag) rather than doing it this way?
nit: We could parameterize the commit hash, as it's used in multiple places.
This isn't incorrect IMO, but I think it would be better to fix this in drupal7PostStartAction and also in drupal6PostStartAction. It seems to me like those were both somehow neglected on this. Use drupal8PostStartAction as example. Congrats on your first golang PR! Please make sure to test it manually.
I think the name of the method should match the name of the action: `removeReachableFiles`.
This is a parameter available for the matplotlib backend IIRC. In which case, it is good to see this support added to the Bokeh backend.
This will never be a dataset so we can simplify the code here
`RW` means read/write. Why do we have it here, as part of a func name?
Hmm, I wonder if binding `<Return>` is a good idea... this means it wouldn't be passed to webpages anymore, which makes me wonder how many people rely on that... I guess trying it is the only way to find out :wink:
Hmm, should we also cache the `smoothingScore` for this hit? Or, if we will keep it at returning `0`, couldn't we remove this impl and inherit the default from `Scorable`?
Haven't tried, but what happens currently if `-f` is used and it's not running? (thinking: `-f` should ignore the case and just proceed?) I see we have a special case for `all`
Not clear on why this change is correct.
The catch clause is not needed. The finally clause alone is enough.
Could the name of the status be confusing to users? It says the execution stopped but is it a temporary stop? Will it continue to run at some point? To me the name does not suggest a final status but a transition one. WDYT @sshardool @jakhani @djaiswal83 @aditya1105
line is 167 characters (from `lll`)
This line should be formatted
so this is to fix a scenario where the app is first launched normally, then background and foreground through the link, we are not updating loginOption
Minor: how about moving the trailing `if` to an `elsif` above?
Should MAX_PERTABLE_ENTRY here be 10 ?
`has(default)` i think is the preferred way of doing this
Is there still a way to specify no recursion?
Because linters don't handle reports now, this was breaking the setup for _all_ tests. I deleted it so I could run my tests, but I didn't check the impact on other tests as many tests are failing at the moment.
We had the checks for those two errors for a reason, why do we not need them anymore?
Since this is a recurring theme, would it make sense to have an ioencode interface for it like `ioencode_rank()` that takes an integer rank like before?
we might consider hard throwing when name is None since that is explicitly not working right now and then linking to issue in the exception error message
This isn't necessarily a year. It may be months, days, or hours. Can we return `intValue()` directly instead?
Maybe it should be `plugins.history` here instead of `listeners.X`, since we use those for listeners configured via `.ini` files?
Not using ExactName: true would remove the need for manually adding workflow ID as it would be added automatically by Daisy. E.g. 'disk-importer-2-import-ovf-7mn7h' was created from diskImporterDiskName above even though only 'disk-importer-2' was specified. ExactName: true should be used for resources that shouldn't include any temp prefix/suffix, such as disks that will be permanently attached to a created instance. Scratch disk is not one of them.
I think these method names would be clearer if written as "Create a {type} counter|gauge|measure with given name". eg "Create a int64 counter with given name" "Create a double gauge with given name"
The more correct way of doing this is `this.s.hooks.clone()` but either way works. Thanks for finding this :+1:
This is missing the definition of `fetch_until_empty_page` - it needs to go in the config section above.
`hasattr(cb, 'first_metric_only') and cb.first_metric_only` -> `getattr(cb, 'first_metric_only', False)`
The position change of this line may be a hard fork.
I think this migration should fail for MDBX if it uses old table names
This is my favorite part of this PR. Being able to `import` 3rd party tools will hugely improve our workflows. :heart:
If this method gets all the emails, it should be named appropriately. **all_emails** or just **emails**.
Maybe verify that an anchor was created -- that the markdown was processed?
seems reasonable to also want to include the 'to' location?
no need in BigInt just m.Unwrap().Big().Bitlen() == 0
aren't these the wrong way around?
`string.encode('utf-8')` is more common but I guess this is mostly cosmetic :)
Should we also add a line to print gcnArch?
Does this resolve the scenario when the user-triggered forseti process is running, and it would be killed by the cron job restarting the server?
Normally we use Environment.NewLine unless you really want it to always be \r\n
`ExpectedBalances` is a global variable (from `gochecknoglobals`)
confused by this: what we need here is not libunwind but libunwind-dev right? Why skipping detection?
This seems like an improved pattern :)
Just `writeBytes(content.array())` Back to my original, somewhat broken version ;)
This button should also be disabled when in secure mode since it opens a web browser from which you can easily do a lot of insecure stuff.
Let's just call this PERF_PACKAGES and have them in the same format as WINDOWS/SLES/DEBIAN_PACKAGES constants - since it is only a single package and, as written, you'd have to update the code to add more package names anyway. Might as well be consistent with the rest of the code.
File is not `goimports`-ed (from `goimports`)
Why do we need interface `InnerObjectWithSelector`, I searched the usage with this field, it seems nowhere use `GetSelectorSpecs()` methods provided by `InnerObjectWithSelector`
You could add this to stack.go, which has similar functions (to avoid yet another small file). None of these are likely to be implemented considering what TinyGo is designed for.
Do we want to add any specific error on how the url is malformed?
this may require a statefile version update
Hmm this is strange, why should the SettingsStruct import something from `WebServer` ? If that's really needed, then we must move stuff as it makes no sense to have some code related to viewing things included in a settings struct. It should be the other way around.
move 103~105 to in front of 97?
Rails will autorequire `acts_as_editable` once it encounters the constant `ActsAsEditable`. Thus if we move `ActiveRecord::Base.send :include, ActsAsEditable` from _acts_as_editable.rb_ to this file, the require line will not be needed anymore. Instead of requiring the file ourselves, we will let Rails do it for us. This fix will also remove the need to explicitly require `acts_as_editable` in _mock_active_record_base.rb_.
Could we only do this for all time? Because that's what is causing problems rn?
set real one plz (get it from DB).
Could this instead keep the `go_native` and add to it "or the last exit was the special reset exit"?
so now basically anybody could drink my tequila? currently electron dev-env runs on `http://localhost:9080`
seems to be redundant (mention `docusaurus`   )
The default should be "False", as "True" would be a significant change in behaviour.
After diffing the children we check whether the value got out of sync, if it did we update it. We also update the `_prevValue` to prepare for the next event hitting our controlled component
can we not expose the channel directly? or at least expose it as a read only channel?
Also found this bug, where we were setting the min passcode length to 6, but the min length for a connected app is 4. This can cause problems when the app is force closed or the shared pref is removed.
I don't think there is a maximum scale, neither for Hive nor for Trafodion. The only condition right now is that the scale can't exceed the precision. Example of a valid scale: DECIMAL(18,18). The maximum of 6 digits applies only to TIMESTAMP columns, where we don't support resolution below microseconds.
This is not consistent. Either rename the first to `tradePlayerItem` (which is ugly) or the second to `partnerTradeItem` (:+1:)
Would it make sense to include an `Untrust` as well? If I were playing around with this on the CLI I wouldn't want to make a change I couldn't undo.
The tests should be fixed in #4841, so this is no longer needed
This is changed because we need `projectId` to be printed as `$projectId` in PHP.
I do not think we need to do a source code change to handle this. We could set the subnetwork to default to /32 (/128 for ipv6 ipv4-mapped)
Why does this work? I'd've expected that an admin could create a file anywhere.
Can you delete this whole file now?
flb_strdup() should do the work here. note: use Fluent Bit memory wrappers
Isn't that already too late? I'd expect, that the LinkageError occurs the first time, we have the class instance (the classloader tried to load the class) - or do we get a partially linked class back, and we get the exception when retrieving the methods?
no need to add this flag query the endpoint set-up to determine the chainID
Use upper case: YOLACTHead, YOLACTProtonet, YOLACTSegmHead
if you are not dealing with cache now, please revert these changes. On their own they make little sense
Go ahead and provide the same implementation for all of the languages - I'm not sure there's a reason for it to be different.
`s/singlePointer/singlePtr` or please rename the type to `singlePointer`.
This can happen because we could get `PhantomNodes` that are not admissible as source/target right?
why can this modification avoid crash?
Does this mean the times will show up in emails as UTC?
should we actually switch to `All` or just add `0.4.0` explicitly to the list of supported CNI versions? What is a new CNI version is released?
Seems like it should be `generated by Wire` here and in the SUT?
This command displays available snapshots on a volume.
Needs a description added to CommandArgsUsage.resx
It looks to me that this does not have to be exported.
Please add back the description of the parameter
Sorry, could you explain more about the issue? Doesn't ComputerName already default to local computer? > -ComputerName Specifies one or more Hyper-V hosts on which the virtual switch is to be configured. NetBIOS names, IP addresses, and fully qualified domain names are allowable. The default is the local computer. Use localhost or a dot (.) to specify the local computer explicitly.
Can we add a `collection?` method to the `VideoPage` so we don't violate Law of Demeter here?
Not sure why the ternary expressions are used here, since the true and false results are the same.
maybe just do a separate implementation of the pool for openvpn case? It's a bit confusing having two methods here.
why is this pylint disable needed?
This will always add the authorization header to the request object. Is this the right scope for these two lines? If username/password are not defined, it will encode 'Basic :'
Rather than just getting rid of the memoization maybe we should use an `after_save` filter to set it to `nil` so that it will be recomputed on next read?
I'm okay with this, but I don't see a lot of benefit to removing unnecessary parens. If extra parens make something more readable (like this) or clarify order of operations even when matching the default, I would say we should keep them.
this will break R package, you should update the R files accordingly. BTW, the call state should be in the last argument.
Is this supposed to be part of this PR?
I'm still not convinced dropping Chrome logs is the right thing to do, but if you insist 
Could we simpify it as `cmd.Stderr = &bytes.Buffer{}`?
Does it make sense to keep trying to read the file every time the function is called, or should we maybe use `sync.Once()` here?
Lodash mixed in with WordPress dependencies
Instead of setting it to null, i think lets set it to {}
List is redundant.
This change could mute unit test failure, but it is better to update unit tests
I think this if should be removed (see issue)
Migrate the spec.Labels to locator.Labels ?
Could you add some extra text here, so that it reads "eth_coinbase function is not available, please use --private.api.addr option instead of --chaindata option", so that it is clear that the function can work, but different options
Looks like you've covered `-webkit-transform`, but what about `-ms-transform`?
`Bolt::Config.user_path` returns `nil` if there's no homedir, so this will still error in that case.
@janette looking at this test code, I'm pretty sure that it's going to give a false positive. Where is it actually checking the contents of the first four datasets against expected values? All the assertion at the end of the test seems to check is that at least four datasets exist.
these interfaces are defined twice. we should use only one and have it in `storage` package maybe
What was the bug that this is fixing?
This should now be made into `if (it->second.empty())` ?
Given that we are (conceptually) searching across multiple self-dependencies, all we can say is that we didn't have a self dependency in which *both* source and dest masks were correct. Since the spec doesn't imagine this case, the valid usage statement assume we can differentiate only wrong source from only wrong dest within a *single* self-dependency -- which we can't across multiple (at least not meaningfully)... so we always return both the source/dest VUID's if we can't find a self-dependency in with *both* are correct.
Does this changes affect process building dynamic libraries anyhow?
We should drop ipify in all places i guess
it seems python 2 don't support `end=''`. @StrikerRUS @henry0312 any better solution? or we drop the support of python 2?
Wouldn't this crash the app if the user is currently listening to a stream?
Let's call this "NEW_BROADCAST_MESSAGE". Msg.NEW_MESSAGE will be confusing down the line.
shouldnt we stop these routines BEFORE the db closed?
It will be better to use `commit()` on a separate thread, apart from the UI thread. The reason is `commit()` is synchronous while `apply()` is asynchronous. So in case it might not perform actions immediately as expected.
Just above, you have `const auto` for a `RDKit::MOL_SPTR_VECT::const_iterator`, here it is only `auto`. Why is this?
G204: Subprocess launching should be audited (from `gosec`)
I think you want to be asserting/clicking $saveLink, not $link.
`Log here: connect to default factory for goerli network <address>`
prefix it with azkaban. Maybe azkaban.server.schedule.enable_quartz?
I think this needs a json inline tag here
just to clarify - on line 1074 we update `zip_file_content` for non-local lambdas, but never store it, which means lambda never picks it up
We should still register the script. Just not enqueue it.
should this be kept in the `else` branch?
It might help here if you give a brief explanation of what you mean with a selection being anchored at the start.
Please use a string resource here rather than the hardcoded string "user". This allows the app to be multilingual.
nice extraction of the form for being used at new/edit. We should have more of these
I know the main cases show up in the daemon test already but a little bit more unit test coverage would be nice and probably not too annoying to set up. Ideas: 1. Verify that the string "no duplicates" is in the LastDuplicate field when we propose a new deal. 2. Verify that proposing a duplicate deal fails when the duplicates boolean is set false. 3. Start out in a state with more than 1 duplicates. Verify that the LastDuplicate field is set to the last duplicate when we propose with a true duplicates bool.
instead of passing in pointer to empty struct, we should make it optional and support passing nil and use default cfg if it is nil.
Why is this change necessary? `handleSingle()` will cast it to a string, no?
Nit: Here we don't need the extra `this` in iceberg because we usually use the `this` to distinguish whether it is a member variable or local variable when assigning value.
line is 143 characters (from `lll`)
Formatting here and all below: missing space before open bracket for the compound statement.
I think it's a good idea to log this as debug, the same way the other branch gets logged.
Whoa, TIL about this syntax.
That means we still create `UseLane` instructions but threat them like `Suppressed`? Can we maybe change this in the pre-processing so that we will just emit `Suppress` instructions in these cases?
please add a blank line at the end of this file. Applicable to similar cases below
what's the reasoning to keep these always true or dead-code blocks?
This is a coarse solution. This check is helpful, but you should also add a check in `$__version()` to avoid calling `isSelected()` if `key === false`
Files should have an extra line at the end of them.
I suggest, that we move the regex (`[^a-zA-Z0-9_]`) to a separate constant field, because we're using it in multiple places and I think it's quite prone to misspellings.
If you get to this line avg_size_of_message is an undefined value, yet you use it below. You you should set this value to something in the exception block.
Just FYI, I had to remove this unused import because Travis/`npm run lint` were complaining.
kinesis-mock applies KINESIS_LATENCY to RegisterStreamConsumer actions so I added a sleep here.
there is a function to get namespace entry from mutable state directly
Do we use this const?
This needs an end keyword
I snuck this one in as well as checkstyle crashing (on files from resources) caused an unfinished xml to be written, and it wasn't obvious where that XML was
These changes look like a hosts file _must_ be provided?
please add `var _ impltypes.ChaosImpl = (*Delegate)(nil)`
These tests use a self-signed cert so the CA *is* the cert. I considered making a proper chain to use in the tests, but wasn't sure it was necessary to test here, since we test it in the E2E tests anyway.
Why you can't use function here?
What if we changed this to this? roleText=attrs.get('roleText', lambda:getSpeechTextForProperties(reason=reason,role=role)) That will prevent the function from ever needing called in the roletext case, and removes that if.
We should deprecate this at some point.
You could pass the MetaClient instance in ctor, and create a new instance if nullptr.
Hot take: could this instead become `NO_DIFFICULTY_BOMB` and have` HOMESTEAD` wrap it? So this comes first then homestad with the bomb adjustment, making no difficulty the base case?
This seems like a more appropriate message under `ListenAndServe`. WDYT?
Instead of adding the `--target` flag here, the `Target` struct should be set up correctly. Assuming this is for the Raspberry Pi 3, adding it to the `cflags` key of the JSON file should be enough (if not, you can print `config.CFlags()` here to check whether `--target` is already included).
Should this `PUPPET_AGENT_STARTUP_MODE` have a corresponding yardoc change?
I'm confused as to how these are both passing.
You should probably include a `json:...` annotation here.
Is there an else clause (with a lock.unlock ()) missing here as well? If we think we do not need an else clause then lets add an else clause containing assert zero.
Unrelated line change :)
uint64 seems excessive here. Should we reduce to a uint32 @whyrusleeping ?
@jlerbsc 's fix in #2918 in action - thanks! :smiling_face_with_three_hearts:
Why send the parameters? They're accessible directly from `$this->request` so there's no need to inject them in the method
I prefer to make it `protected set`. What do you think?
exiting at this point is leaking memory, take a look at the valgrind output. the sbuffer must be destroyed.
We'll have to account for CI installations being faster than local ones. Do y'all think we should leave it at < 30 green / < 50 orange | >= 50 red or lower our thresholds?
The `!r` is unnecessary.
I think convention is snake case for import naming?
There are two question here: 1. If you only modify lastLogId, but the `iter` is not modified, I really don't know whether we can succeed. 2. We will check the if the term has changed in `replicateLogs` (if rollback really happen, the term must have been updated), so I really doubt whether the problem should be fixed in this way. Or you could describe it in more details.
this should only be indented 2 spaces
"google.golang.org/grpc" should be together with "go.uber.org/zap" all ""github.com/iotexproject/iotex-core/*" stay together
Are these forward declarations needed if we `#include <node/common.hpp>` which includes the definition ?
Why this new configuration?
shouldn't clearance be setting these up for us?
Please change MPI to CCTOOLS_WITH_MPI
This is necessary due to a bug in 4.7. Follow HIVE-1561 for getting rid of it.
I'd recommend using generateDataDiskName here as well -- might as well benefit from the safety that it gives to protect yourself from future changes to w.ID().
could we switch to `undefined` here?
Need copyright/license info.
Please make `_path_suggestion` public (i.e. remove the `_`) in `downloads.py`.
i don't think we need to add duplicate check for clusterinstallref here, the function already assumes that it was invoked for clusterprovision
The iterator is not wrapped when the score mode is set to `COMPLETE_NO_SCORES` so you don't need to change this assertion anymore ?
Feels like this should be an option and not the default. Leaving them running would give you immediate response to claims, which might be what some people would want. Hibernation is AWS only right now and probably other clouds will just disregard the setting but arguably validation should be rejecting attempts to create / update powerstate on gcp/azure/etc. I'd pitch we put this onto the pool spec and make you opt in.
This check is still correct in some cases, but I guess erroring out is acceptable if someone explicitly asked for an impossible cgroup configuration (now that we could in principle nest things). I would like to see a test for this though.
Wanted to double-check: does the `log` middleware still set its own "empty" value (should default to `-` at least for the default log format)?
Maybe add `positional=False`. It does not need it more than the other parameters, but one must start somewhere.
No idea why it ended up in the code. You can remove the entire line.
Should these assert that the extracted `SpanContext` is remote?
I think this change is redundant; see the previously defined method "writeUnescapedXML".
@guolinke Don't you mind to rename this variable to `DATATABLE_INSTALLED`, for the consistency with other variables (for example, there are `PANDAS_INSTALLED` but not `PD_INSTALLED`). Also, `DT` is a little bit confusing: sometimes `dt` is used for `datetime`.
do we still need SanityCheck()? seems they all return nil now
it introduces a lot of complexity to the state, can we flush straightaway or create a two level flush store where the questions are read form unflushed data?
This is good and something that I think opens a lot of possibilities. I think what would be even better is to change up `TracerProviderSdk` to take factories for the processors just like it already does for the instrumentations. Should probably use use a factory for the sampler. If we made those 2 changes then we could actually split this all up into the config and the build phase and we could use the factory methods in the hosting version to call into the IServiceProvider to get those instances.
nit: you could have named it just "TestCase" (if django's TestCase was imported differently)
This breaks CI. I am not sure why you need to include io.h in this file especially on linux.
need to filter the entities in buffer as well
Do you think we need to keep this in, or is it just leftover personal debugging? Seems like it wouldn't be too useful most of the time, but I don't care too much if you want to keep it.
What is this number value for? How is it used?
We don't want to include the `IntegrationSpecHelper` for models...mind moving this line out of the loop to be `config.include EnvironmentSpecHelper, type: :model`?
is choice_name not needed anymore?
This is used in o.a.l.sandbox.search.BM25FQuery.
It's kinda funny to read `s.Image.Image` I wonder why it resulted to this way. What would it take to refactor to just `s.Image`?
Can be replaced with `org.jkiss.utils.ArrayUtils#add`.
Maybe you can correct the typo "if" too :)
`invocation.getInvocationStageTrace().startSend()` is inside `RestClientSender.send`
What's the theory on why this could fix the hang? It seems like the call to `GetRootNodeForTest` will always need to call into the crypto object before returning an error, and so it should block on that `c` receive, after which the test immediately drains `errCh`. So I don't quite see how buffering would help...
@argakiig previous work was above live threshold, causing the high difficulty to bleed into other blocks when genesis open was processed in tests.
unrelated minor fix
Why did you remove the time? It can be useful if some actions are ran in jobs?
Can you provide a `--with-systemdsystemgeneratordir` option here? So that I can do unprivileged installs without completely turning off systemd. I can add it as a follow-up PR too.
Align the parameters of a method call if they span more than one line.
I am unsure the below implementation is correct, but need this method to not panic else it borks the chain-validation tests.
Please can you pull out the shared function into a shared file? I think that'd be pretty easy to do for this module. I think you could: - pull out a function `configureSyslog` that is implemented on Linux, but stubbed on Windows - pull out a function `openLogFile` that is implemented differently on each - share everything else
Let's make have a signature that's consistent with `PhysicalKey.from_path`. Users should also have access to PhysicalKey since that class is part of the API (e.g., `Package.resolve_hash`).
since this debug message is inside a plugin code, it should use flb_plg_debug(ctx->ins, "..."), on this case don't need the component prefix since the API will put it there automatically
This should remain as mailrelay.blackducksoftware.com for staging. Not sure this will be valid, but it shouldn't go through the production mail server.
This was properly set above as `<target>.runfiles/<workspace_name>` (with a fallback to workspace root dir) but never used past this line.
Nothing would change here even if this `if` statement were removed.
should use Number instead of Long
This is smart but hacky! I would probably prefer an alternate solution that would be more obvious to read/understand.
Could you add description for below static function?
can you make all the `_` into `-` to be consistent with the other options?
concurrent poller won't be larger than concurrent execution. Jump from 2 -> 16 seems aggressive. I suggest to use 8. Ideally, this should be dynamic config. :)
I think you should remove "fmt" here. And change `fmt.Errorf` to `errors.Errorf`.
How can there be a configured max ipset size? Surely we need to write ipsets with however many members are implied by the Calico datastore?
can you revert changes to this file.
is this already called by actPool.validate()?
This is not a segment responsibility this query should be in exporter-File module
I think this might read better: > some apps need the response headers before starting to stream content with http2, so it's important to explicitly flush the headers to the client before streaming the data.
remove 3.8+ f-string format to allow use in google colab
I'd suggest to add "ATI " and "Intel(R) " to this list
Why is this get;set;?
This is a breaking change, and cannot be made. We have committed to this API for v1.
Noticing this is really just the same as cart_notification_email. Would be nice to be able to view custom templates. I may update this with some set up that will make viewing specific custom emails easily.
Same points as in other test file.
`sql` module is imported later.
I must have forgotten that one in previous PR
`function (` is correct. A space must be there. Please run `make cs` to have correct coding style.
why this is an issue?
why remove `Symbol`?
Why is this required? The user should be able to omit it and use the defaults.
This has nothing to do with master/slave replication. Is this something we want to change too? If so, I guess this is an aggregation?
will this not make it possible to use a zip file, e.g. on other importers who do not have to support it ?
Presumably we no longer need `force: true` here.
create ticket to investigate this
`_applicationDelegate` and `_window` are already set in the call for `: this (applicationDelegate, window)`, no need to assigning them again here
Why do we need to explicitly use keyword arguments?
is this the intended behavior now?
Sorry I'm confused. Why not kwarg this like the others?
A `case` statement may be simpler here.
Properly describe valid flag values here: `neither` should be replaced with `none` as they parsed below.
This whole block bugs me. Expire_time to me suggest that an absolute time of when something happens and duration is an interval of time. While the code looks correct, it feels awkward to read.
This looks a little suspicious to me, can you explain what's going on here?
No CLR overhead?
Quick follow-up @aaemnnosttv, why this and not `.trim()`?
Why change this from a foreach? I can't see it gaining anything here and code styles shouldn't change just for the sake of it.
Is this change needed? `start()` is still defined and uses `HiveMetastoreTest.class`. The only difference is that this doesn't pass a `Configuration` and the parameterless `start` passes `new Configuration()`.
Doesn't belong to this PR
I'm not confident about this...
The button for the date range selector has incorrect width since it has `padding-right: 8px` which sets the width to: `44px`. Can you review to make the button `36px` on small screens as per the AC?
check Lukasz's fix with NonceReserving - is that not better?
the last parameter name should be `serviceName` as is in the implementation  
I guess `sid` was for `sessionID`, but now it looks strange: `sid.ID`.
Good removal here for two reasons: we're redeclaring `app.ConfigPath` immediately below without having used the initial value, and `app.GetConfigPath()` will build the value using the same process as in this line anyway.
You want to return if it's quiet time and notifications during quiet time are **not** enabled. So this is either a logic error or it's bad naming of the setting/field/method.
We called `t._1.equals(...)` where `t._1` potentially could be `null`.
Can we rename this file to `lambda_echo.py`, to be more descriptive and in line with the other files in this directory? (all files in this folder are lambda functions, after all)
What's the thinking here? Only logging when the test has not ended yet?
__toString() is not a part of QueryInterface
PersistBlockLevelInfo -> UpdateBlockLevelInfo
nit: can we remove "can't" from the error message?
Should we be doing this with `make_unique` or something?
I'd prefer to have a blank line between the class declaration and its first member. Is it possible?
You could try moving this closer to the call, where we request label info. We might be doing the check very early.. all the resources may not be present with the informer at this point.
Please add your name to the list of copyright holders.
Hit a flake here where I think there may have been some output to stderr that got mixed in with the output from Stdout. Hence switching to `Output()`, which does also capture stderr as `err.Stderr`
the latter part can go but isn't the first part of this still sound -- that we assume "id"?
Lets have simple function arguments here, because now struct `traversal.Params` started to have 2 purposes: 1. used as contract in DTO between consumer-provider 2. as function parameters for internal code calls
Add docs to the new methods here
This may cause a new allocation, please consider merging the concat in above line. Same applies to change in dotnethostmanager.
I've had this happen recently with IntelliJ, was this intentional?
Repeating big interface in many places shows smtg is wrong with design
proposal: **always** add the exception to the end of the message. So no need to to pass exception twice (implicit and explicit). Need a lot of changes.
can we explain to users in the docs what happens if they leave the field blank?
The api/docs/release.dox changelog message is missing: maybe you planned to add it once NtAllocateVirtualMemoryEx and NtMapViewOfSectionEx support is in? I would say, add it here in the same diff that raises max_supported_os_version.
I think this can stay as a method. And we can write our own attribute_change(name) as required.
This was used in `app/views/video_tutorials/_video_tutorial_details.html.erb` how are we handling that now?
I think it should still panic for when there are no outputs; might be nice to special-case that though so the message is more explicit.
Use correct, alpha sorted, include order. Correct order means: 1. Header corresponding to this source (i.e. `"LatencyTestPublisher.hpp"`) 2. C system headers 3. C++ system headers 4. Alpha-sorted external libraries headers 5. Alpha-sorted public headers from this project 6. Alpha-sorted private headers
accidental? i guess it's the same as any other boilerplate
I think we can avoid using this pattern for this use case.
Maybe move all the Loss Recovery constants to a separate file.
I would make this level 1 or 2.
The exporter should still be able to test these histogram instrument kinds, right? Is there another reason to remove these?
As far as I can tell, these always get and set the context as an `IReadOnlyDictionary<string, string>`. Can we use that here instead of `object` and get rid of the `as IReadOnlyDictionary<string, string>`?
Verify that external-dns allows setting this parameter multiple times (that it's not "last one wins").
thanks for noticing this! But I think we should not have it in this PR.
FormatHandle isn't current typesafe w.r.t. requiring *VULKAN* handles... so this slipped through.
All buttons are submit buttons, except if they are `type=reset` or `type=button`. I suggest you do an exclude of those, rather than only include `button[type=submit]`.
maybe we should rename: MinTaskID -> MinTaskIDExclusive, MaxTaskID -> MaxTaskIDInclusive,
Is `Reporter#reset` no longer used? If so, can we remove it?
Was this an intentional deletion? Why not just allow overwrite of `deploy_mode`?
Should this be removed now?
Is it safe to assume that these two keys are always present? `this[string]` will throw a `KeyNotFoundException` if they are not.
Was the addition of `GasPriceOracleAddress` here erroneous?
So... when we want to install mitmproxy with pinned dependencies, we first install all pinned dependencies, and then in a second step install mitmproxy as editable, making sure that no additional dependencies are sneaking in.  
We keep who wrote the code anonymous.
just looks like you should return an **empty map** with nil error
Is it really necessary to store them in a new setting? I think it should be enough to store the credentials in `ProxyConfig.direct()`. Then AntennaPod does not need to store multiple different proxy settings. Also, it will not change existing users' settings (currently the proxy settings would be lost on upgrade).
what about 0? Version probably can' start with 0, but v10 is theoretically possible.
I would use shorter yet still descriptive names, e.g. `KernelPerCpu` and `UserPerCpu`.
I'm wondering if we should add this to a `utils` module in `astroid`. Porting the util to `pylint` doesn't make sense as we would need to duplicate the globals that are being used in the function, but importing from `brain` also feels weird. @Pierre-Sassoulas Do you have an opinion?
Would be good for this not to say `10` anymore...
need to update this command to use the name field instead of principal_id
Just double checked the `-in` operator. It's PS3 only, so we might want to change `$_ -in $allowedArgs` to `$allowedArgs -contains $_`
Safe to reference c.srv without capturing it first under a client lock?
Is there any security issue here? If we integrate with Hive security (and I don't know if we have or not) is there some notion of re-authentication at connection time?
i am aware that you did not add these, but might i ask why we need these one-liner funcs instead of just exporting the struct fields in the first place?
why? event.getInvocationType is not you want?
Did it not work out to wait until after containerd and kubelet are started?
out of curiosity, why making this change? If no real reason, could you restore to avoid unnecessary changes of several generated files?
You left in a puts.
Where does the auth go?
nit: why can't we combine the two add operations into one so that we add `{"nameCertificates": []}` to `/spec/servingCerts` ?
File is not `goimports`-ed
I would rather recommend using 'Wird hochgeladen' since the imperative form of 'Lade hoch' confuses me whether this is an action I need to do or whether it's an action that Uppy is currently doing. Just my two cents.
Please undo all these changes as they are white-space only.
Why not `export default API` instead? This ensures we export the same that we export on the global.
As previously mentioned, best to drop this locale override. It's not something we only provide in exceptional circumstances. Moreover, it doesn't work for this PR anyway, while massively increasing the code complexity!
Prefer adding a second `positive(String, double)` that delegates down to this three-param version. Using `null` in code is generally Not A Great Idea, and it looks ugly.
I don't think retrying here is as useful, since `git-checkout` doesn't access the network AFAIK, and if it fails once it's probably going to fail all three times.
so those regexps were wrong previously? e.g. they would match `/v\/foo`? If so, raise a bug and fix on the 1.0 branch.
better use `with mp.Pool(...) as pool:` here
Please name the file ShareExtension.js, as you import it under this name (also could you convert it to TypeScript please?)
Can you change this to use `.format()`?
where `$aliases` is defined ? @javiereguiluz
File is not `gofmt`-ed with `-s` (from `gofmt`)
nit : I think it would be better to have the multiplier being calculated along with `pool.numPendingWholeBlocks`, so that we could always multiply the feePerByte with that multiplier. Not only that it would be faster, but it would also have constant time. btw - Correct me if I'm wrong, but with this change, you're practically rolling back your previous change while making it `pool.expFeeFactor` adjustable, right ?
I cannot see that this new permission is used anywhere? And if the new zk handler is covered by `zk-read`, should not also existing `ZookeeperInfoHandler` handler implement PermissionNameProvider and declare the same permission, for consistency?
We should start thinking of an object that encapsulates this information :) we might need more arguments in the future.
`identity` is unused now, is it for future usage?
Isn't this PENDING?
The reason I didn't suggest it before is because I didn't want alerts for every tried - but not updated provision, but I can see a value in it from OSD perspective
could be misread as `<body>`, maybe something redundant but very clear like "before the closing `</body>` tag"?
For Se 3.x we shouldn't need to specify `marionette: true`? I'll see if I can figure out where this is getting used that it might be necessary here.
What is the current default? Is that inconsistent across uses and that's why this is null?
Oh is `bucket` actually higher cardinality than `eventname`?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
It is relatively cheap to tell whether a bond is a ring bond, we don't have to perform an SSSR.
Would welcome a stringification method on big.Int in specs-actors
maybe we can do this in Init function?
This looks like it goes beyond the scope of removing `BlockHeight()`, in the future please do this in a separate commit at a minimum -- separate PR is fine too.
Remember to close SOLR-11877 after this
Hmm, do we need to do this for Windows too? It won't have this private loader TLS issue but it will run DR code in a separate thread before DR init is fully done which I think violates some assumptions. For Windows we would move this wait from win32/os.c to win32/callback.s intercept_new_thread where it checks whether it's a client thread right before calling dynamo_thread_init. If you do not want to deal with Windows you could bail on my suggestion and leave the issue open (or maybe file a new issue) for Windows, or if you want to put the suggested core/win32/ change in place and your new test passes on Appveyor we could then claim to have fully solved this related issue too for all platforms.
No formatting directives, `glog.Error` will do just fine.
I'd rather catch those to `utils.py` and raise a simple ValueError from them. From the resource point of view, these are details of implementation
Why `2` in this and others?
I want to propose couple of different names for catchpointWriting: syncInterruptedWaitingCatchpointWriting syncWaitingForCatchpointWriting catchpointWriting is lacking context, and I found it difficult to understand the logic without this context.
I would recommend using Psr\Container\ContainerInterface here instead of Interop\Container\ContainerInterface; both currently work, but the Interop version is deprecated and will eventually be removed, so using the Psr version will save us time in the future.
This logic should be handled at informer handle functions i.e. AddFunc, UpdateFunc, DeleteFunc
Why was this needed?
change `v.recipient` to address.Address, so can use `AccountState(v,recipient)`
can you put this flag in `blockRefInfo` instead? It would be a shame to add one more file per block, especially since we've run into inode limits. I guess `blockRefInfo` should maybe then be renamed to `blockInfo` or something. But we're stuck with the filename.
thx for removing these
Please log once here at Error level "Failed to connect to Typha, will retry..."
Hmm, why did we come to need the `,` at the end?
Is there a reason we _wouldn't_ want to do this? A bit of a security hole :grimacing:
Will we be adding this to `AppliedTo` as well? If not, any reason why not?
Please take a care about prefixing.
why this recursive relationship definition?
if retcode is < 0, it should return -1 indicating an error.
Should this if block better be changed to `#if H2O_USE_LIBUV \n #else ... #endif`? The reason I wonder is because that's the way the QUIC context is being initilaized at the beginning of this function. Though I would not expect practical difference between the two approaches, because ATM the only case where we create QUIC connections is when the protocol selector is set to non-zero, and because when it is set to non-zero `h2o_quiy_close_all_connections` becomes a no-op.
WHY U NOT SORT IMPORTS?
Better use `Optional<Consumer<String>> onSearch` here.
I'm not arguing with it, but how did you decide to make this change?
Does `sudo` required for `darwin` only? Don't we need it for `linux` too?
maxResults should come from FLAGS once #244 is submitted.
Ok, we can't switch it now, because the properties are a field of the interface Rule - which makes it public API. Maybe we should remove it here in the (Java) API in 7.0.0? The only API left would be, when using a rule and setting the properties in the ruleset xml. There the type doesn't matter - since the String is then automatically converted into a Pattern.
There is a strange $b that looks wrong.
TransferFormat.Text in general purpose connection interface? :/
ListWorkflowExecutionsRequest <- this can be nil?
Does this log line work? We need Warningf or just warning without the format string.
@lmolkova This ok? I'm getting random failures from the build checks that don't happen locally from a few non-deterministic time related comparisons.
Removing since all of the domain-neutral testing will be done in the new `Samples.MultiDomainHost.Runner` app
import but not used so you did not resolve compile warnings?
Just do: `return node.hasAttribute('aria-hidden')`
The driver tests should be updated to use the concrete type instead of the driver directly; right now your test coverage of the concrete type is 0%.
This should not be needed. 1) all 1.1 promoted extensions are marked as enabled when a 1.1 device is created (which happens iff both physical device support and apiVersion are set to 1.1) 2) The KHR and non-KHR versions of the bits are aliases of each other, so no different set is required.
Does this really make a difference?
~Why are putting all these APIs in their own ~packages~ files? So many more ~directories~ files, to what end? Why not just have them all be a part of the same API file and all live alongside each other so you can easily see them?~ Edit: nevermind, probably works best in separate files.
AWS Identity and Access Management (IAM)
I don't see much difference between this and `create_db` module. How about having a function with a `database` argument?
Why the `os.path.abspath`? `os.path.dirname` should always give a valid directory path.
Is it really LEGACY_HELLO if we are using the most up to date HELLO? Perhaps `MONGOS_HELLO` would work here?
hmm.. this is Hacky, the test will succeed in Windows even if you remove the calls to these, right?
since we're not using mysql, do we need this migration?
Style/MutableConstant: Freeze mutable objects assigned to constants.
Shouldn't this be `cls.param.warning`?
I seem to recall this being the cause of a bug at some point.
Should we ignore case when doing the comparison?
I'm not sure regarding this approach, for me the whole text including anchors should go to resources like ` netConfigLink.setText(CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link); ` You shouldn't concatenate translated values inside the code. If you need some params, please use NLS.bind()
Let's not call it django. Maybe `auth_provider_headers`? `auth_headers`?
String valStr = (String)val; valStr.substring(0, Math.min(valStr.length(), prefixLength)) Make it clean.
This one could be replaced with a `std::max`, no?
Isn't `nil` the default return value from an empty `rescue` clause? If that's correct, then we could just remove the `nil` line entirely as it doesn't serve a purpose.
# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done
Is this `info log` necessary? If it is not useful, can you consider deleting it?
There should be a migration for that as well to reflect the change on in-production instances
Pick more specific exception types for these cases. Not sure what would be best for this one (`ValueError`?) but the next one could be `IndexError`.
Perhaps remove this line
Please ensure that this will not start putting single quotes where double quotes are expected.
if lowest inserted header is non null non zero then pivot should be higher and a better best known on the left. maybe Head?.Number ?? Math.Max(Pivot, LowestInsertedHeader))?
It seems like reducing the sensitivity would make the test failure less likely to occur, but not fix the issue?
We shouldn't require dimension values to be a string. They just need to be scalar values (probably we could check whether it's either a string or a number). Something more important to cover in the validation here though is to ensure that a map of `dimensionName => dimensionValue` is passed. The keys here actually need to be strings. For example someone shouldn't be able to pass an array of values.
Should you capture o.asflr before releasing consumer's lock?
nice to see the usage of block for a more readable link name
can we make `replace-partitions` property a static variable in `SnaphotSummary.java`?
So `queryRange.Step` will be ignored?
I've filed an internal spec issue to add these missing VUs.
Note generally it -> It
this seems a bit wrong no? why is this change needed?
This shouldn't be necessary (same below). Do you have a traceback for me?
Maybe `sortByColumnHeader` would be more precise? The plugin has a method with the same name and it could be confusing.
Would it work if we changed the return type of 'RejectRequest*' methods to Exception and instead did `throw RejectRequest(...` ?
File is not `goimports`-ed (from `goimports`)
similar here for imports, these should be consolidated (and also consolidated with the grouping below)
we should not resurrect this method that we just removed
Why are you changing this?
will `failure` always include `arn` and `reason` in its dictionary? If so, :+1:
Perhaps you want to check if UIAHandler.handler is not None. The current check will break NVDA if you call UIAHandler.terminate() for some reason.
@p-l- Hey it seems that this was len-4 ?!
not handling in case of `repr` makes the behavior probably a little too unpredictable. Is there a reason not to, apart missing stuff in the `repr`? Does it lead to some problem?
You can simplify this by doing: return (EndTime - StartTime) * 60 / PointsAcrossPeak;
could we add this file only when we need one?
... their **superclass**
Isn't this a false positive? Why are we reporting `unused-variable` on a `del` operation with a `undefined-variable`.
Do agents usually download these from puppetserver when applying a catalog?
So if I understand this correctly the externalEntities should be computed and stored in GroupMember, while current code usage of GroupMemberPod will be migrated to GroupMember later?
"Openvpn check" we could move this to separate prefix.
hey, aren't we supposed to be passing in two parameters here?
What do you think about using `self.id` ?
I can not think in a good use for it, but may we allow a way to setup a fake with a hook for logs? this fake is special, and we may need access to some of thoe logs, at the same time it may be an overkill because we dont want to test "sql" implementation but results.. but we can create some tests with end to end logs in some scenaries, What do you think about it?
FTR: Unlike commonly known practice, `latest` in Ansible docs corresponds to the stable version, not to the latest state of the main Git branch. Is this your intention? Just checking...
move cachedStates to handle function
Shouldn't it be more specific, like "gcppubsub supports all UTF-8 strings"?
@acud The reason I moved these here is because I need them in the traversal tests. The traversal package doesn't need this. I don't see any particular reason why any package apart from api would need this. api package imports traversal, so I cannot import api in traversal pkg. Also if these change in future, the traversal tests need to change. So maybe enough reason to move these here? That way both packages can access these as they both depend on manifest
this extra dot at the end is causing a couple tests to fail on Travis
I feel we need to impose a lower limit here maybe? What about a max and default for when none is set?
nit: Move `IdentityTemplateLabel` to be under `IdentityTemplate` to match the struct in config_crd.go
wonder if we should collect c.trace, c.pa.subject, etc.. while under the lock to prevent data races.. or simply move the tracing under the lock.
where is the default being set?
Is this second check necessary? we know that just after the plugin was created its metricRegistry is null, it's set only after `initializeMetrics` has been called.
you need to add the content type
this is critical to avoid state root saving from beam
Wouldn't it be more space efficient to make this a `byte` enum or bitfield?
@abhinav @kriskowal what do you think about putting the handler on `d`?
Add `--format` as an option. Does it make sense to have all display options available? Also need to add `--inventoryfile` and possibly the global_config_options.
I am not sure if we need this, we already have DifficultyBombDelays
Should there be a template or something associated with this email? Right now it's identical to `notification_for_approver`
I believe there is some javascript that also uses this 60px number for calculations. I think I'd rather keep the number in px instead of rem to make that correspondence easier to see. If 3.25rem != 60px, can you also change the other place where `60` is used to in the JS?
Remove the trailing white space
nit: is this added deliberately?
Doesn't this go in the opposite direction of #1051 / #1062 by putting platform-specific logic back into this module?
`Object.is` is an ES6 feature of JS so I don't think we can use it here (or we have to change our browser support matrix or specify that an Object.is polyfill is pre-req of `preact/hooks`). Should we just do an `===` check in `preact/hooks` and provide a `Object.is` polyfill and version of `useReducer` in `preact/compat`?
@itholic can you also update the parameters in the docs?
Oops.. meant to link to SplitOp here. I'll clean up in my next commit
While we're here, this line (and a few others) should be `customThreadPool.submit(() -> IOUtils.closeQuietly(overseer);` I have no idea why we're creating a collection and a stream for a single object.
why add this? don't think it's correct? for instance, it returns ErrCandidateNotExist (not critical), in this case we should return a receipt with corresponding status
synced offline. let's move this to `agent_unix.go` to make the IMDS call, since this is not supported in Windows.
This line is unnecessary.
How about putting `epochLength` (or something like that) in place of `a` just to make it easier to read
You should add the check above this line instead. If string is empty, don't even call the function.
You could change the name of the command line switch too. Short options are typically one character after hyphen. wxWidgets' command line parser seems to handle `-nd` without confusing it with `-n` or `-d` but I'm not sure if that's by design or by accident. I'd remove the short option. `--no-daemon` is with hyphen but the rest of Manager and client uses underscore. Please change that.
do we also need to profile the time to getConnection()?
Right now it's a bit unclear that this needs to be called explicitly by the implementing class. If, for example, there's another backend, it won't get this update unless we add the same function as webkit. Could you either add a note to this docstring explaining that this needs to be called, or find some way to automatically trigger this so the webkit override isn't needed (and some override passed on webengine).
I only want the proxy request for this to run for kinesalite. So this just returns true if the KINESIS_PROVIDER is kinesis-mock
Please add spaces before and after the equals sign
since we are no longer using these numbered icons can we remove them from source control?
hmm should this be `VERSION_81` instead?
Why is there an "enable" in the param name? Couldn't it just be `overrideDebug`? Here are everywhere else.
Obviously, don't merge this to master.
Does this make it easier to read? Previously this would have run `kubectl describe certificate` right? In which case it would have included events related to the cert. Will we miss that? Would the old `kubectl describe` output have gone to stderr?
Based on discussion with Chad it feels like trail_map_json could be a good column name.
Did we decide once and for all to use req/resp throughout spring?
clean unnecessary modification.
I tried to follow the code structure already present.
`hasattr(task, 'param_visibilities')` is more concise with the same effect, but either one works.
no need to use a pointer. Just string and check for != ""
FWIW `from qutebrowser.browser import hints` is okay - it's just things like `from qutebrowser.browser.hints import HintManager` I try to avoid.
Using sync.Map(key: nodename; value: state) instead of this "EdgeNodes" string slice here would be much better. Reasons: 1. Using sync.Map makes the time complexity of function UpdateEdgeNode and IsEdgeNode O(1), while using string slice with for loop makes it O(n). 2. Later we could be checking node state whether it's "ready" or still "not ready" by directly comparing "value" of sync.Map and doing the node state updating.
This is not an `id`. This should either be `invocation_time` or `invocated_at` to be consistent with what we are using elsewhere, and also to better rerflect the column's DateTime type. Also, within the context of this table, there is no idea of what `invocation` is. I know that `scanner` may not be future-proof, but we need to find something more descriptive. Perhaps one possibility is to call this `audit_time`.
is this exhaustive? or rather, any psudo header started with `:` is un-parsable/invalid in HTTP/1 right?
Just asking: What does this line do? Does it add the stylesheet from the parent to the dialog?
Ahhh... this makes sense. Does using functions to defer evaluation of these values have anything to do with #916 (where the `Host: {host}` was 'cached' between different hostnames)? If not, could you help me understand what this change does?
Would be nice to put this in a separate context named `"with a string and a non-string"` (since that's what it is -- it's definitely not a non-string and a string!).
We definitely need to address this duplication after MVP
Check the return value of the drmgr ones.
@briri Thanks! I just caught this too updating my feature branch
For GCP we included the API name (see below) so you can distinguish between uses other than `blob` once they exist, WDYT?
Maybe the empty `delete()` should be implemented as default in the interface.
i think it's OK to leave this?
Looks like `TestCloudRecovery` changes are unrelated?
nb: this change is unnecessary
Here we should use <code>List</code> in generic
Add the issue number too i#4400
Why a separate block?
Register needs lowercasing
I believe respond_to whitelists the formats passed to the block so if we don't want to display html, we can just remove the line format.html...
keeping this as an unexported constant, as importing the role pkg creates a cyclic dependency.
`ctx` is unused in ReportStat
this change looks wrong to me. I think the test is trying to signal that something went wrong by throwing the `Error` here, otherwise the `catch` below will swallow it.
nit: shouldn't be part of this PR.
This code was doing nothing as far as I can tell and was making the SQL find nothing with the new version of Rails. Remove it unless someone can explain why it is there.
Can you please tell me why you did this?
Maybe we should put that in the option description?
why is this space removed?
This might be overkill for test code...but as stewards of accessibility it would be appropriate to have a label in the fixture.
This is what breaks the build. Apparently w/o this line, `sqlite` package is not even compiled. With this line it gets compiled but compilation fails because we don't use CGO for our production Linux builds and > ***Important: because this is a `CGO` enabled package you are required to set the environment variable `CGO_ENABLED=1` and have a `gcc` compile present within your path.***
This isn't a test, so it shouldn't be named `test_init`. You could name it `cmdhistory_init` or so.
I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs
This is ignoring compatibility: it needs to check the size to ensure this field exists in the client.
Could we consider a more explicit name, like `devicePciAddress`?
Looks like this falls through, should break.
Are we setting these values anywhere?
s it the best way to tag "foo" of "`define foo ..." with constant kind? Introducing "d/definition" kind and tagging the "foo" with the definition kind is an alternative way. Using the unified kind "constant" in many areas reduces the information that client tools get from a tags file. In my experience, it is better to tag different things with different kinds. If ctags hides the differences, and just reports various language objects as "constant," in some cases, a client tool must parse the raw .sv source file for distinguishing whether a given tag is "`define"'ed or not. IMHO, ctags should not be too smart. Instead, ctags should be stupid; it should report what it sees in source input files as-is to client tools that will do something smart.
Why not adjust `currentTime` to be in ms directly?
What if formatPrefix doesn't include a space? Will the resulting error have e.Error() stuck at the end without any space?
I believe this should be on `workshops/show` now, not `products/show`
Prefer TextUtils.isEmpty() which handles getReportSpamRecipient() being null
Shouldn't there be another case for when both min and max are specified?
This should not convert each value to a literal on every invocation. Instead, this PR can add a `literals` method to `BoundSetPredicate` to access the values as literals. That way, the conversion happens once and can be lazy.
This looks better than before, but we'll now likely run into issues with `'` characters in the spec. Maybe we can just use `manager.call_strings` instead?
when is this consumed? I'm probably missing it but I can't find it right now
optional: while there's nothing to do, a good way to catch bugs (where we use an outbound without calling `Start`) might be to have this outbound verify that `Start` is called before `Call` or `Stop`
Don't need this-> here.
Does this need to be public? Can't one of the helper functions below pass the data? If it really needs to be public, could it be write-protected?
why should unknown raise a 403?
We'd better reserve enough space before using kvKeys to avoid extra malloc.
Another option is to always write it without quotes. I always have to use SR. And why not?
Can you please change the name of this class to be something else?
Should this be a constant somewhere?
Please add a space after the comma here (generally, with arguments there's always a space after commas).
We can revert this to reduce the diff of the PR.
Maybe wording could be improved. Is this "not enabled" or it is "not available". Not sure about that.
Should we remove this?
Do we need to change this?
`that is null` doesn't sound very useful to me. Could we rename `that` to `target` or something less context dependent :)?
This code should be executed in NashornEngineFactory
nice. we should do this elsewhere too. We have a lot of repeated stuff in the policies
`retrials` isn't the word you intend. I think you mean `retries` and to that end, can the var name just be `max_retries`?
Technically, this would allow `pingWaitTime` to be `false`. I don't know if it matters here.
All the changes in this commit are mechanical. Produced by the script in the previous commit.
I think logic will have to move to bolt since the vague discussions around bolt run plan --noop is that it would just skip any tasks that don't support_noop rather than error. This is fine until we actually elaborate that though.
Style/SymbolArray: Use %i or %I for an array of symbols.
Any proposals how to make the naming somehow include the "completed" idea of this hook? `TlsHandshakeCompletedHook` or similar? Or using the `...Start/End...` scheme?
Just to be consistent, can we use the print function `print()` instead of the keyword. Same goes for line 437.
`ctx` is unused in Close
Not sure about that, an array is iterable right? But if I pass array, that clear method wont work
Will it still be an issue if all the models use the same data set?
It looks strange a bit. What is the reason?
For the command executor, which in turn, uses the HTTP client to talk to the WebDriver, the client might have high-timeout values set, so the shutdown can take a long time if we wait for it to complete, especially if multiple-long running threads are there. I think it might be a good idea in general to couple the shutdown() with `awaitTermination()` with a timeout, if the ongoing tasks do not complete within that timeout then call `shutdownNow()`. What do you think?
would these require any account lock here?
`.wav`?! cannot we use something slightly more modern and compressed instead? :) I dunno, like `.mp3` or `.aac` or `.ogg`...
Was there an issue on `net452`?
This use is wrong, corrent is: `Shopsys\FrameworkBundle\Component\Environment` It is the same in classes below
Use existing `grpcStubCallString` instead
Yep, jsdoc again .. It seems that when the plugin description is wrapped within `eslint-disable/enable` expression it's not generated at all. After adding the `@class AutoColumnSize` tag right after the `@plugin` tag the plugin appears in the docs. Please review the other plugins.
Thank you! That's better, especially the conversion test should not test the mkString method :)
This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted.
Interface members are always `static final` right?
This just always calls refs. I think we need to either hoist ref invocation back out of `setProperty()` (it used to happen during rendering), or wait for component recycling to go away.
The line breaking is unnecessary.
This file still uses Blockly.VariableModel...
Please add the Copyright header.
This change means that users can't easily see which version of the selenium server they're using. This is `info` level information.
Make this a member variable instead (move to header inside `class` and rename to `m_bUsingLocalPrefs`).
I presume this isn't some special term...
I noticed in all of these we now have to import the PrecompiledContract under testing. Could also rename the package these are in s/precompiles/precompile to keep them in the same package as they are elsewhere.
This was on purpose that I would set logging (NoLog=false) and a dummy logger below. The idea is to have better code coverage and test of debug/trace statements. Any reason you have removed this?
Should this happen even if the above failed?
don't use style. Use a class instead. reducing `col-xs-12` down to 8 or 6 or whatever should do the trick
I think with MultiBackend we could have a slightly different logic: return true if there are no configured login targets ( = getLoginDrivers returns an empty array). MultiBackend could also check all configured login targets for loginIsHidden support and verify that at least one of the configured login targets allows login, but I wouldn't go that far without a use case. In a related note, I'm not quite sure if loginIsHidden works with ChoiceAuth at all, but that's a different issue.
`HardKiller` doing `os.Exit()` without proper shutting down other dependencies. I think there should be a better approach for this.
Unnecessary new line
I think `NoAuth` is a better name
@rhc54 Is this intentional or for debug purposes?
why not remove the need for the `quiet_o` method and just add it similar to how the `--branch` is added? also, looks like the indenting is a little off
The `HitsThresholdChecker` should be created once and shared within the collectors ? We also don't need to use the `GlobalHitsThresholdChecker` if the executor is null or if there is a single slice.
Instead of returning null here and discarding nulls automatically, I think this should return null (or some other signaling value) and fix the part that consumes the output of the visitor.
are we not asking for trouble here by not pinning this? or does 3.* imply all of the draft versions we'd try to validate?
`k` is unused in PutHash
Line is too long. [84/80]
Maybe `driver.Watcher` -> provider (2x)? This is the concrete type, this user doesn't really know anything about the driver.
Please move this test method just below `oauth2LoginWithOneClientConfiguredThenRedirectForAuthorization()`
We're capturing cb_state non-const, but the function is const so, safe enough, but after going to reader/writer locks we're all going to have to key a careful eye on anything in this pattern.
Can you rename `Ports` to `PortsUnsafe`?
I count only four times where `selection_specs` had to be specified as a keyword instead of by position! If that is how often it was used that positional argument in our own codebase, I am pretty certain users barely used it (if at all).
Here is a newline missing
Fuzzer did not like this change. Looks like I misunderstood how the pool works... if allocated from a pool we should never free it manually, right? I think I'll need to drop this patch.
Are these changes needed?
FYI: inlined this method in the internal review.
It's a bit weird to have `svc.go` to include a `ScheduledJobType`...should we rename this file?
`cfg.model.get('neck')` will return None if neck does not exist, thus we can omit the default value.
hmmm did this pass spotless check? I don't think we typically use wildcard imports
"Gets the JSON serialization settings." would be better?
retrying is an installed 3rd party library just like jinja and sendgrid; perhaps try grouping all of them together?
Shouldn't we need to sanitize the `params[:filter]` from a defined expected values?
this should happen before the `go k.manage()`, otherwise the node will always try the bootnodes first
Why not make this a subclass of `MessagingException` so we don't need to change all `throws` clause?
Hmm what are these magical constant numbers? And why does this change mean they should increase?
What if the Series contains null values?
Would it be appropriate for this to be a `MongoStreamClosedError`?
This just grabs any one of the proto services defined in the API, right? What happens when there are multiple (like with PubSub)?
nit: The format recognized by tooling is `// Deprecated: [..]` so you likely want this to be, // Deprecated: Use "go.uber.org/yarpc/peer/peerlist/v2".Implementation instead.
Can we grab it directly from `__pkginfo__` as that is the source of truth for the version?
If we support multi-index column later, we need to rename to fit the pandas' requirement.
Not really introduced by this PR, but I don't recall why these have to be pointers, while `PodSelector` / `NSSelector` do not. Do you know the reason?
I think we should make this a separate test case: it seems like making the precondition fail is the test case that would ensure that this escape hatch worked. Otherwise, if it's always true, then it would be the same as if the escape hatch didn't modify the outgoing request.
1:D100: Docstring missing 35:D101: Docstring missing 37:D102: Docstring missing 42:D101: Docstring missing 44:D102: Docstring missing 57:D102: Docstring missing 66:D101: Docstring missing 69:D102: Docstring missing
We're passing the same thing twice?
template is not correct?
Why this way?
@straker should this not push to `vnode._cache.isHiddenWithCSS`?
This `startsWith` seems a bit brittle because in the code base we'll occasionally spell it "DataFile".
Test used to use old bouncycastle dependency which isn't needed anymore from Hadoop. Switched to use builtin Java split.
"break" is right? You skip the line 768.
Let me know if this is too pervasive. It is currently a private method in `BaseTableScan`. It seems both `SparkBatchQueryScan` and `SparkMergeScan` need to know the scan-specific split size when planning tasks. Therefore, I made it open. Another approach is to move all the `planTasks` logic to scan implementations, but for the combine tasks by partition feature, it requires grouping scan tasks by partition first, instead of returning them in an iterator fashion. I'm not sure if this is OK. `SparkMergeScan` also seems to re-implemented its own plan tasks logic.
Not sure it makes sense to send the reply if we did not delete from the map, but I guess it does not hurt..
I don't quite get why there would be key errors: ``deep_mapped`` is a clone of ``self`` and ``k`` comes from ``self.items()`` so why would the key ever be rejected?
nit: I'm under the impression that `log` is the convention for golang, and that the `er` suffix is usually reserved for interfaces
Can we make the script output trailing commas?
We have to update the filename here.
The field name doesn't really capture what this option does. I think `mConfirmDiscardMessage` would be a better choice.
`typeof child != 'boolean'` maybe?
Base model is imported here
i hope there is some magic where isEmpty or some cron can strip all non listable products from cart, but since we have the situation tested it should be OK and also we'll see during tests
just remove the entire variable.
I think there's another spot for this in DefaultCapabilityMatcher
this conditional is useless now so it should be removed
What happens if there is no NIB/XIB with that name?
change of name is not needed
If we return error when we are unable to found country in database, using country detector would be much easier - if error was not returned, that means country was returned :) This doesn't have to be solved in this PR, but since you're adding such case, we can add a `TODO` just to track this :)
Why is this not required any longer?
This is a bug during handling the recover logic in `common chaos` controller, I fixed in this request when I found it.
Non-Blocking: This might be too trivial. It doesn't allow us to test that it's being callled.
This try-catch should be here so that watcher thread doesn't just exit in case of an exception. This change alone would probably be enough to fix the error as well, assuming that there's another `ENTRY_MODIFY` event when the file write is finalized. But of course not a perfect fix because it doesn't protect against possibly reading a non-empty but only partially written file?
Thats odd, I'd actually not expect this output at all...
We should also test type confusion here (e.g. `{"anticache": "foo"}`)
Would "DisableIID" be a better name? For example, we used DisableMetrics, ImageCleanupDisabled, ... etc. for other similar fields.
See above, this should probably remain `isFirstAdmin`.
is this something we've been missing this whole time?
It looks like the proto code needs to change the function name from set_name to set_type to be consistent.
Unrelated whitespace change.
Break out tests for events into their own tests rather than placing them in other ones. That makes it easier for us to figure out where problems lie and to do a TDD-driven implementation over new APIs.
Throw an exception instead
That's only executed when users switch from 2.2 to 2.3. Please create a new block with code `2050000` for the next release :) Please also adapt the version number in PodDbAdapter
Is this relevant to this PR?
This is a revert, is it really an issue?
> subpass uses a depth/stencil attachment in renderPass with a read-only layout for the depth aspect Assume - VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL - VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL count as well seems there is a `NormalizeDepthImageLayout` for this
Is there a possibility of a clash between periodSeconds and timeoutSeconds? For instance, the current probe is not yet timed-out and the next one has started.
Looks like there are no callers left of this function.
For some reason it worked for frontend even before this change.
This line always confused me   anyway. Good catch!
Please use more meaningful names than `te`here and in other places.
I think we should use `FileExistsPolicy.Overwrite` instead. Files _should_ always be newer, but in the unlikely case they wouldn't be, I'm afraid some files would be overwritten and other not, leading to inconsistencies that will be hard to figure out.
It would be helpful to clarify this is only for unmarshaling a response. not marshaling a request.
It'd be nice to assert the right deprecation is being raised, just add a third argument of `/"its" method/`
Last time I checked, this technique did not work on all major screen reader - browser combinations. What screen readers have you tested?
bad line wrap
Why the white space changes?
Sorry, typo s/unusuable/unusable/
It should follow a `continue`.
Should we add `ctx` to `BlockServer.Shutdown()` for this purpose? Would be nice, but I don't care too much.
1. Use `const` instead of `var` here. 2. Move the check to after the `if (update == null || typeof update !== 'object')`.
The id is not mandatory for web extensions. Could you update this to support a web extension without an id?
Changed this helper to also get class name.
nit: I'm not sure it can be addressed in this diff, but it seems odd that NewOutbound supports TLS but NewSingleOutbound does not. As a somewhat naive user I would expect the only difference between these two APIs is how peers are chosen.
Looks like this doesn't need to change. Can you revert this?
Minor: you can access `current_user` in here directly - don't need to pass it in. Unless you prefer passing it explicitly?
I think this was correct before. The nonce passed in here is the nonce at a block (which is the next nonce not yet used, e.g. 0 if the account was never used, 1 if only the tx with nonce 0 has been sent). So if the in-block nonce is 12, then a transaction with nonce 12 cannot have been included yet.
other declaration of errors (from `typecheck`)
Why this is in the diff?
Loading login page right away only for the regular use case.
good job finding this package, I hope it's actively maintained
I think we also need to add `name:` to the bolt-project.yaml files in `spec/fixtures/projects`.
Ah now I have at least some idea what these are for.
Why to `Get()` value twice, while u have it 2 lines before
Do we need to save the existing value of the stolen reg somehow?
And here - what happens if name id is invalid
A correct by unrelated change. We'll slide this one in without another word ;)
Can't we just make _serializer static? We use same settings every time. I would also put those fields on top of the class for readability.
Can we rename this field to `Subject`? Looking around, it seems like 'subject' is the standard terminology for this stanza  
These are covered by routing constraints.
- Use type from `service_discovery/dto/price.go` - Rename `Price` -> `Money`
This obviously won't work for all the other platforms.
I doubt it will work, but without space between -o and ControlPath it should. Lets see. What I do not understand is why we did not see a failure on CI related to this?
This was broken before as the name of the metadata table started with its type, not catalog.
Any reason not to move it to after line 281? These are all pubsub related fields IIUC.
This was raising intermittent errors, since Lorem ipsum contains the word "error"
If I'm not mistaken, this line is now outside of the `if signed_out?` block, right? Any concerns about that? Seems odd that we wouldn't accept coupons for signed in users, but I want to make sure we understand the ramifications of this change.
Noticed some missing imports in manage.py so thought I'd add them
Why remove this?
Shouldn't this be `i * Interval`? You're multiplying nanos with a Duration, I'm not sure what's the result :)
does this boolean indicate unsafe serialization?
Based on the assumption that when `EnablePulls` is `true`, `CanEnablePulls` must be `true` as well, then this `if` check is redundant. Actually... we have `AllowsPulls` now... why not use that?
these tests are currently somewhat nonsensical. This code expands to `a, b = {}.keys` when it really should be expanding to `a, b = {}.keys()` -- though fixing this causes the test to fail so I suspect something worse is going on here that I don't quite understand?
I changed the name of the key, to make deployment easier.
While we're doing some translation work, could you extract this button text and the other static text from the view?
nits, should add `break` to avoid redundant iterations.
I would be nice if we could describe this without the word "agnostic"
Actually it could also be a video playlist. But music is used more often.
We don't want to write this back to the definition do we? Probably just want to create a local variable for it.
I believe you should either remove this or rename the PR. You can't change the behavior of the tracer (even to fix a bug) in a PR named "unit test improvements"
What does 1 << 32 do? In irb typing this yields 4294967296. I didn't find the append operator in Numeric or Integer.
Move these two arguments before `loss_cls`.
fix trailing ,
Ah, so we are going to need to update node/host files for this to work?
Don't think this is quite right - think the build one also needs an `IsOriginalTarget` (c.f. code in `src/build`)
This should not be nullable, instead it should be `->default(0);`
I'd like to avoid changing this method since it is public and using a URI will probably change behavior for users passing strings (String -> URI -> Path instead of String -> Path).
I would avoid the term "errno" as it implies the glibc variable. Use error_code or status or something.
these 2 no longer needed after refactor
Tim, please add { } to this 'if'.
Nit: I think it should be `to handle` here.
I think typically K8s APIs will use `int32` and not `uint32`. I think we should keep it consistent with the rule `Priority` above. I believe that the rationale for using `int32` in general is: * some programming languages don't have native support for unsigned integers * it's easier to catch sign errors with signed integers, depending on the programming language (it it's negative, it's clearly an error but if it's a very large number, it could be normal or it could be a negative number overflow)
I like the overall idea here, but I wonder if it would be more clear to define the property in the trait, and then set it in the constructors of the classes using the trait. Alternatively, at a bare minimum, it may be a good idea to add `?? 'Bibliographic'` here, to account for the possibility of the trait being used in a class that does not define the property at all.
"currently" implies it should and will be changed: so TODO i#?
nit : move this into a default clause in the previous switch statement.
why is this test case here? this file is for testing functionalities in utils.py
why are we adding the current tag count to new tag count ?
are you sure that the privacyGroup cannot be null?
most spec options appear to be snake case - `fa_direct_raw_block`, let's stick to that convention
Can we avoid no-change changes being committed - they make it harder to distinguish actual changes from code editor changes
Is this specifically that if we capture the cast in another variable, even if it passes escape analysis, that the runtime will copy?
This should be before the if on line 1028, which should turn into an else if
The super impl Spliterator.getComparator() throws an IllegalStateException by default. Is it really necessary to return null? If null is used somewhere it will throw a NPE, which is roughly the same as throwing an IllegalStateException. I'm just curious - I'm sure there is a reason!
a space after comma?
not calling this is going to impact current functionality which depends on PVC.. let us still call this and set the values to default as 'none' (or empty) by handling the error from 'get' operation
Do you also need to check if Blockly.localConnection_ is non-null?
Shouldn't we re validate/update the in memory suppress data here?
Can you change this to `sampleInitCode`?
Standard is either to use `HappyPath` (CamelCase) or `happy path` (lowercase sentence). I usually prefer the latter.
This should be a failure if we don't get the exact number of expected rules. You can use a constant if you don't want to update several lines any time you update the test rule strings.
I must be missing something, but why does not having a node cache imply not neededing to re-embed the block changes, in particular? Isn't it just the fact that we don't do any writes?
Those functions are not currently wrapped, so I don't think it is necessary to exclude them (at least for now).
Ideally, I'd have converted dicts to object but this way was less changes so this way for now.
The related statements should also be deleted.
This panic is incorrect - this is a full implementation of a slice equality check. This should be something more like `type x is not comparable` maybe?
May be better make `stopped` atomic, then it can be just `for (auto i (node.store.latest_begin (transaction_a, next_frontier_account)), n (node.store.latest_end ()); i != n && && !stopped && elections_count < max_elections; ++i)`
This output is only present when `DEBUG=True`. Does it really bother so much?
Please add it to the `REMOVED_HOOKS` constant.
Keccak.Zero should not be used to mean null
Can test use a Mockito mock instance instead?
1. Nit: We can have a general helper to identify if a region is pseudo region. We might already have one somewhere. 2. Does any type of ARN support FIPS? If not, we may just move this check in arn package?
Why not use ASTAnyTypeDeclaration? AbstractAnyTypeDeclaration is deprecated
I think you also want to update the condition to add ` || impl.Visibility == TypeMemberVisibility.FamilyOrAssembly`.
same here, move it out
nitpick: regular order is private than final.
If you're going to start testing that impl itself is not NULL you should probably be doing it everywhere.
make this 1.0 ? I don't think all that many people do `language: julia` without any `julia:` specifiers, but may as well keep that possible?
Probably overkill, but maybe we should be using a fake clock here. I won't push on whatever you decide though.
nit: Space after comma
Does this change affect the performance of other algorithms, except KMeans?
Can we do this without a breaking API change? What about adding a different name to convert directly to a Schema?
Is a FakeApp class needed? Can test use a Mockito mock instance instead?
Nice use of std::distance. I'm a bit worried about first += 9 though.
Is this the code that's supposed to use the Rails app's only when in Rails4? What's the point of the first `if app.respond_to?(:secrets)`, both the `if` and the `elsif` have the same body, is only the second one needed? If `app.config` has a `secret_key_base`, then use it, the end. Is there a need for first checking if `app.respond_to?(:secrets)`?
I think if yo use %s then you do not need reason.String() and can just do reason.
These files should in `/javascript/brython`
It should accept executions as the input
ClockIpLpi2c4.Enable() is required. The same change is required for enablePeripheralClocks().
The bug is not about the priority , But we use 2 config items CAPACITY and SEQUENTIAL to control 1 action: thoughput. If 'sequential' is given to 'False' as default in configfile and then I use 'capacity' to 10 in my test.yml , the 'capacity' 's priority should be higher than default 'sequential'. So, I suggest we use only one 'capacity', it is enough. '1' is sequential, more than 1 is capacity, None is sys.maxsize.
why update Copyright ?
We can revert this to reduce the diff of the PR.
User-code doesn't see the internal ADIOS headers anymore. This whole include block should just be `#include <adios2.h>`
Here would be the same case you don't need to call `loadConfigs`, but you would need to reread configs using `getConfig` on each getHost function call, not once per file.
Can you use `authority, _, path = rest.partition(b"/")` here? That should make stuff a bit cleaner.
instead of using `prometheus.Gauge`, using `promethus.Counter` will be better.
If strstr returns NULL, the check on 378 won't fire, because param_name will be at least SET_PARAM_CMD_LEN.
If it parses failed, both of the `containerName` and `podId` should be the empty strings, it's non-sense to define this error, I suggest just return it.
I think `bypass_frontier_confirmation` conveys the intention better (default false as well)
To avoid a circular import between pcapdnet and automaton
heads up @JunTaoLuo
File is not `gofmt`-ed with `-s` (from `gofmt`)
Not sure why this is changing to a hard-coded string.
We also have a typo on the line above! OUt or Out?
For my understanding, the DATA manifest & DELETE manifest could share the same read / write path so I think we could use the common reader+writer. Is there any other reason that we need to make them separate paths ?
Why do we have both a list of valid sessions and an instance variable if a session is destroyed?
Not cool with this. I think we talked about it in past. This is a side effect. If we want to introduce the side effect in our functions like `inRange` (which I am for) the side effect (error) should originate in that function and not in some internal `throwError` function. Every stacktract will start at line `2` of `trowError.js`. Been there, done that and falled back to throwing the error from the place where it should be thrown.
How about `nextAlreadyDefined` variable name in method signature?
Don't we have tests to change after this breaking change? probably we're not using hard coded strings in our tests when we create a `Span`?
Unrelated to this PR, we should remove this exception. We now require `numpy`.
Why did we make this a static string?
Shouldn't we pass here a proposal too?
What is the purpose of this? It seems like it is used to indicate whether there is a filter on a span. But what filter? Could there eventually be multiple filters per span? Just not understanding.
You have to verify the return type. If it's a reponse, return it. Otherwise do nothing.
Can we use the existing `InstalledTimestamp` function?
When would this be the case? / When would SelectElement not be available? Is this change compatible with 6.2? (I'd like to roll a release that works with 6.2+ first, before moving on to 7.x)
How does this controller_name method work? Does this method grab the context of the url request? Wouldn't this always result in 'widget'?
I think this is should absolutely be `==`, as the interface cannot control the implementation of equals (and it's part of the contract of the enclosing function). Can we add this interface to the exceptions of the rule?
Okay sorry about this I was really confused on how to support uncontrolled in this case, so what we want to do is apply `defaultValue` when `props.value` is falsy but not undefined, right? In the case of us seeing it is controlled (value & onChange present) we apply defaultValue to `props.value` (and delete props.defaultValue) In the case of uncontrolled we shouldn't enter this branch at all and go for full native dom behavior
I'd rather not activate this protocol by default for now, unless there is a good reason for that.
question: would this convention automatically and always apply to all classes derived from `LuceneTestCase` including any non-`org.apache` name spaces or would it be possible to opt-out (without an exclusion list) somehow for custom code that might perhaps have chosen a different convention?
Hm. This could be a case of left-sided driving, having u-turn lanes on the right side. Good catch, but looks good to me.
If the span producers pushing to the queue do so faster than the this can drain, it will cause this to hang. I'm guessing we can update the `enqueue` method to check if the `stopCh` is closed and not send any more spans while this flushes what has already been pushed.
maybe switch the order in order to make this a positive assertion instead of a negative one? i.e. `if key =~ /id/` first.
Are these imports needed (BiConsumer and Consumer)? If they are unused imports, then precommit will fail.
Why are we calling these as annotations? I guess this is an old type that we are re-using. But lets make it a point to avoid once we feel that this design/code is not good.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
missing space before `TextView`
Nit: since this is now a private function rather than a variable, would it make sense to move it after the public functions in this file for readability?
I prefer naming this rateLimitedRemoteHost This can be local host but reads remote Host Is Non Local.
How about name it with NullResponseTypeProcessor
Is this thread-safe? (If not, and if the solution is to introduce locking, let's reconsider how we do the scheme changing instead...)
Should we print this error?
maybe rather than `bool` make this field a `StructDef *` ?
The point of the exercise has been to eliminate CoreChecks as an object dependency for DescriptorSet et. al.
I haven't thought about this a lot yet, but if we were to try this change, we'd still need to keep the code to delete it from the `.origin` file for backcompat.
The VUIDs in this area are not great, but I think `ValidateQueryPoolStride` should probably be skipped if the query pool was created with type `VK_QUERY_TYPE_PERFORMANCE_QUERY`. VUID-02828 might be a better fit, but again, the existing VUIDs step on each other so it requires a bit of interpretation.
A function that returns empty string.
do you mean how to "use"
During our zoom and working on this, I said that I believe it was set to 64MB, not 32MB, but the diff shows that I was wrong. So we could change it back to 32MB.
Can you move `crypto/tls` into the block at the top with all the other stdlib imports?
Pending has been set only for SPC.. why? for other CRs as well, this need to be done.. right?
AWS Identity and Access Management (IAM)
The description predates this diff but I think we can come up with something more grounded.
falling back to `x64` seems like a really bad idea given that the VS templates default to x86 these days.
Looks more appropriate to stick this in `AbsolutePath`.. actually that already has `FLATBUFFERS_NO_ABSOLUTE_PATH_RESOLUTION`
If you want, you could change this to `allowCors(response` (like in "version", above) to allow Cross-Origin Resource Sharing. I'm sort of wondering what's returned if no API terms of use are set.
formatting... can this import go next to the other sources ones?
This is probably more nuanced than I can feasibly check in a PR review, haha. Was the issue here that `replaceChild()` removes `initialBase` from the DOM before `recollectNodeTree()` invokes `componentWillUnmount()` on the owning component?
We already have a method for it 'icon' => $content->getIcon()
This likely needs to be double checked -- I recall being convinced at the time of writing this, but now I am less sure
This is now outside the mutex, so could race.
please inline imports
Hmm, I wonder if this should just be e.g. `--with-grub-2.02` instead. (Not sure Autoconf supports periods in these switches.) Today's modern GRUB is tomorrow's ancient GRUB. :) Or maybe we should be specific about the feature this is enabling, which might be safer given that each distro carries so many patches. E.g. `--without-grub-efi-16-suffixes`?
Please split this into two lines
What we did in docker before, when working directly with libcontainer, is check if the source is `/dev` and the destination has a `/dev/` prefix. This implementation is probably ok. If someone is mounting their own `/dev` I would expect it to be pre-configured and not need the extra check for if it's the host's `/dev`. (that said, I've not tested yet, just reading through the code)
Please remove it or remove all `std::` namespace prefixes.
can we get something emitted in the logs on non-zero exits to trace back to for problems like this failing on the first invocation?
Why do we returning `interface{}` here? Don't we have a predefined type for `ID`?
Feel free to add your own name while at it.
I think this class is only relevant for updating the QbftConfigOptions based on the transitions config, so probably not.
can delete this line
`req` is unused in RecreatePipedKey
Can you make this accept an action instead?
+1 on this. Do we want to have it as `WRITE_METRICS_MODE_COLUMN_CONF_PREFIX` to be consistent with defaults? Is there a possibility we will have `READ_METRICS_MODE_COLUMN_CONF_PREFIX`? Not sure.
doesn't this enqueue a double render or is that safeguarded somehow
IIRC this flag disables re-rendering entirely (`s/recursively //`)
For consistency, the return type could be `TelemetryDataDto` here. This would be more consistent with the other REST API interfaces. From a functional perspective, the current code is perfectly fine though.
You don't need to say `rune(' ')` - `' '` is already a `rune`.
I think after change this check `rowInMapper === null` is always false, so it's useless.
Are you testing that the values are always false? I think you should test for setting values to true or false, right? Who is going to take action with these values?
I didn't see where the IOException can get thrown, is this just to match the V1 reader?
the naming convention I'm been adopting if `_type` for instances of these classes. So maybe `context_config_type` is a better name for this fn
I can't believe we didn't see this typo before :))
Please remove `HIP_UNSUPPORTED`
we have a standard format for putting these together elsewhere, it does the filter check first and errors out and then sets based on the value. i think this should be adjusted to do that. there's no logical change, just an approach change.
FWIW, wondering if the error is interesting here (I actually arrived at this code initially to change `supportsFreezer()` to return a `bool`
That looks fine! You could use `"rclone/"+fs.Version` too if you wanted. BTW does tardigrade use http under the hood? If you were using rclone's http Client then you'd get a User-Agent and you'd also get support for `-vv --dump bodies` and other nice things.
I think this is an unrelated remark. I thought we had moved toward the practice of using "Config" as the structure name, and Option as a functional argument (`func(*Config)`), and Options as a `[]Option`. See api/trace `StartConfig` and `StartOption`, for example. That's why I prefer this struct be called Config.
I don't think this should be added to PyRegion. Adding it here requires that every region have an "algorithm" which may not always make sense and the return value type will be different in every case. But fine to use the same name in the regions where we choose to implement it as a convention if that makes the API more discoverable.
put this hash in variable
ignore this.. just didn't want to litter with a commit update to satisfy license plugin
this doesn't sound pretty... I would rather we have a proper navigation for all modes - AFAIK TV remote navigation is very similar to normal keyboard, but maybe it just uses another key codes - those should be extracted in a single file and defined there depending on context then
That's a huge load of new dependencies. I think it's better to create a reload function on ScriptManager and control with enum instead.
Just to confirm, this will take care of all the nodes in graph. right?
I like the new directory `/api`, what is the thinking behind `/external`?
weird naming: `is` but `fields` (plural or singular ?) . If the method checks if the fragment has an invalid value, then "hasInvalidValue" or "containsInvalidValue" is fine no ?
max was wrong here. As its buitlt-in, not a number, and a TypeError was thrown.
Should be ARM
Maybe `LibraryDetailsPanelType` would be clearer.
I think that this test doesn't cover this bug correctly. When I attached the older version of the handsontable to this test it passes, should fail. Can you check that?
I think it's better to throw `UnsupportedOperationException`
Looks like we are trying to match the new ordering of fields in `ManifestFile`. Earlier, we co-located `...FilesCount` with `...RowsCount` to match the ordering of methods in `ManifestFile` and args in constructors. Is this change intentional?
wouldn't `int.to_bytes(counter, 32, 'little')` be equivalent, clearer and faster?
also check RPCName?
These changes are just to make cli_spec a little more readable for VS Code users, as there's a bug with the Ruby plugin's syntax highlighting when you use multi-line regex literals.
This method is still possible insecure as it may archive not only logs files. I suggest to filter file names to ensure that they start with `.mysterium-log*`.
Might as well fix these bare returns by making them `return errors.New(...` directly.
Why not just return QueryMol directly? Why require the copy?
Should be `if sys.version_info[0] > 2:`
Q: are we supposed to change this for files that already exist?
We should able to use 0x30 as summary, and make 0x80 reserved for future.
Instead of showing the words "symbolic link" under the "Size" column, how about we introduce new icons for symbolic link to file and symbolic link to directory?
See above, we could avoid adding that (same applies below).
JMX offers normal APIs for this. I don't think you want the glassfish one.
Can we propagate this error up the stack?
You're basically converting client to screen coordinates here, doing it manually. Is there a specific reason why you aren't using clientToScreen here? Does it fail?
I looked and couldn't find any usage of `container` in any of the editor component files (js or hbs), so I assume this was used once and didn't get removed?
This can return bool. RelaxedReclaimPurge(nodeID string) (bool, error)
Is this limitation necessary?
Don't use DCHECK to debug your code if it's the regular branch you need to handle.
The format like gcloud-beta-prod is a bit hard to understand. Maybe find a a more clear way to describe it,
This change is necessary because the schema version is ignored unless a schema is specified. I think that has always been the intent.
there is no static method as a go between -- how does this work?
`zap.String("image-provider", provider.Name())` should be in a same line.
This should consume less resources because str_replace don't need to assign arrays with all the values
I'd add `// +build go1.10` to prevent from accidentally compiling with older Go.
Remove the handling here as well.
Nit: missing a space. I think we should phrase the new content a little differently. "It is important" isn't very clear. I think it should be "offsets will be returned in sorted order."
That seems wrong.
I'm curious, do you create this commit at the very end by rebasing and taking the value you had after moving everything ?
non-blocking: Now that we have a handful of statements which deal with creating a listener, it may make sense to introduce a `createListener` method or something similar
I'm assuming that MolDraw2Qt drops the alpha channel?
The blank line between the summary and detailed description is better to be kept.
Couldn't you just write this as an if/else or a guard clause like on line 87? Just seems a bit weird doing this conditional assignment for essentially an if/else.
Can you explain why you went from a positive value (metrics.viewTop) to a negative value?
Why is this done twice?
nit: Remove this assignment because it is not necessary.
Is betterLOG_IF(ERROR, status != 0) ?
body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests
Should we bite the bullet and poll for the full 5 minutes that AWS recommends? If we do that, we'll probably want to leave some kind of breadcrumb in the event log to let users know why it's taking so long to launch.
Add a TODO explaining why this is being done
Sorry about the code churn here, reworking this use normal loops and async await made debugging far more straight forward. For example, if configuring the fail point fails you find out when stepping over that line vs having to look for the ultimate catch clause that handled it.
shouldn't we name abbreviations up-cased? `myId` -> `myID`?
not sure how this got in master, but the linter is unhappy about it so I fixed it here
This was definitely a subtle bug right here.
Maybe move _agreedCapabilities and _availableCapabilities from List to SortedSet ? We could order them by code and then by version already.
Could you please remove `#include <spawn.h>` as a whole and see what happens? I believe that this is no longer needed; it was necessary when we called `posix_spawnp` directly, but now we use `h2o_spawnp`.
minor: can be in-lined in return
`.` at the end of the sentence
For insurance, it's best not to take it directly
This could be made into a function expression, yes?
We maintain that each (logical) key generation has the same set of device keys, so no need to plumb through `keyGen`.
I think you need `-y` here to prevent a user confirmation prompt
Does this line (and the corresponding one in the test bootstrap) actually do anything? I don't see where CACHE_ENABLED is used as a global constant.
I usually set idea to never use wildcard import such as `import java.util.*;` Now i use setting from javaslang standard.
Lets call this getConfigSetService and maybe rename the field now (or later)
This line is getting a little long; let's move the conditions to at least two lines (maybe three).
Like I said, this code looks incorrect. Why is it still looking up the attribute? Why is it getting the type from `nested->type.struct_def` instead of `field.nested_flatbuffer`? Are you running `generate_code.sh`, because I think `nested->type.struct_def` would be null?
Lets not give packages names if we dont have to. If a package requires a rename, we should change the actual name while/if we can.
what is the difference between `/core/events/javascripts/countly.views.js` and `/core/events/javascripts/countly.events.views.js`
Most tracer settings can be set in several ways: environment variables, `app.config`/`web.config` file, or in a json file (`~/datadog.json` by default). Most exceptions to this rule are settings in native code (where we use env vars only). Currently, `DD_TRACE_ASPNET_ROUTE_TEMPLATE_RESOURCE_NAMES_ENABLED` will only work as an env var. Was this limitation intentional?
This is a good start, but what do you think about just using `libkbfs.GetCurrentSessionIfPossible()` to avoid calling this altogether if there's no session? That way we can avoid continuous RTTs to the server when logged out.
`= default` is implied here, so having it is redundant. Is it a stylistic choice to include it, or just an oversight?
`props.children` is not always guaranteed to be an array. When only one child is passed this will break. We can use `toChildArray()` to turn it into an array :tada:
It probably doesn't matter in practice, but we're not supposed to access a map without holding a lock. This is why I have suggested using `m.Path("devices")` earlier -- it takes a lock before accessing m.paths. Alternatively, you can leave this code as is but add taking a lock (same as `Path()`).
We really, really want to catch _everything_ here. It is safe to leave `azkabanEventReporter` set to null.
Is there anyway to get rid of the global variable, if it is specific for each task, can you add it to the `mtask` struct?
Do we need to set the members to final like submitTime, submitUser ...? They are only used by getter method.
Could you clarifty why some of those are removed?
Compute `(time_forward + 1e-3) * 1e3 / loop_num` ahead.
Why would this be called to copy a non-Date object?
"this table hasn't mutated within this transaction" may sound like implying that if this transaction contains table mutation changes, `refresh` may have impact, which I think is not true? I guess what you were saying was if other transactions committed to this table successfully when this transaction is half way through, refresh in this transaction will still return the same state as when this transaction begins.
Something is wrong with the indentation here.
These files should in `/javascript/brython`
Is this always how Bazel does paths? Would it be nicer to do `-DBAZEL_TEST_DATA_PATH=../com_github_google_flatbuffers/tests/` so this string is not hardcoded in the the source?
there needs to be a change here. setting up the batchstore with localstore.Unreserve hook
MAX_RETRY_TIMES makes much more sense.
Could you please add a `TODO` here that we won't need `docker.AuthConfiguration` anymore when we migrate to SDK's pull image?
JMX offers normal APIs for this. I don't think you want the glassfish one.
Is it possible that test failures here are real and that we should improve the rate limiting logic? Or are we ok with rate limits to be exceeded by 15%?
Could you also update it in `at_time`?
Also added this check, since client secret is not used except in the IP bypass scenario.
Compared to using traditional enums, I suggest to use `Status` or `StatusOr`, since they are more expressive and informative. Besides, isolating the definitions of error code of individual modules from the ones of the RPC interface is a good practice, isn't it?
I think we have to manually write a down for this migration.
Please only increment by 1.
would be `DEPRECATED Percentage of the graph (in vertices) to contract [0..1]` better?
I believe these rules will be enforced both (1) on egress from a local workload, and (2) on ingress **to** a local workload. Right? I understand that we definitely want (1), but do we really want to enforce (2) as well?
If there are more items to add to what's being written out here, please add a TODO.
I don't think this is going to work. We need to get the actual assembly of the app project. @johnnywebb thoughts?
Thanks. Now that you've improved this we should just init and expose the StorageAPI on the node, like the other.s
This shouldn't be changed.
Did you mean to put that `join` after the `map` rather than inside it? Also should it be `safe_join` or is interpolating it into an `_html` resource going to have much the same effect>
This test name doesn't really reflect what the test does any more... Then again I'm not really sure what it is testing now - is it actually just testing that FactoryGirl can create records? or does that itself funnel through the rails code so that we're testing rails can create records?
what is this, is it going to be used later?
We don't need this file, we can use the one that is in the grid-ui directory
Because the default value of allowedOrigins is * (all origins), so it isn't necessary to set again at all.
I would change "should be sent" to "must be received".
This would be better served as a method/property that is set when people don't want to a window.
This was a bug.
nitpick: Please move this down to the other imports, as it's a Python stdlib import.
`next->opaque` should not be cleared.
i was confused by keyword "inventory" here. my understanding is this starts the osconfig-agent which covers inventory lookup and package-management(correct me if i am wrong).
I'm wondering if we need to delete jsonStr and jsonAttr after the json_extract_path_text call to avoid unnecessary heap pressure. Though if json_extract_path_text itself does new's on the same heap, we'd get heap fragmentation. Another approach would be to allocate these on the stack instead, avoiding both concerns: char jsonStr[len1+1]; char jsonAttr[len2+1]; ...
I don't love this syntax; it doesn't match anything we're currently doing and it's not obvious. Why isn't this `/keybase/private/jzila,kb_bot/.kbfs_autogit/public/jzila/kbp.git`?
this is a breaking change, any specific reason you want to do this?
it's a bit strange that this doesn't match `aggregationElements` which is what I would expect. I guess I am not familiar enough with go-ipfix.
should be a case insensitive match though no? DOCTYPE and doctype are both widely used
My preference here is to keep a stricter hierarchy. We should have a mixin or something that is an AssetEvent that Observation and Materialization can both inherit from. That way we can check the type in the frontend if we need to.
This could be simplified (if including <boost/algorithm/string/erase.hpp> is fine): `auto address_string = boost::algorithm::erase_first_copy (address.to_string (), "::ffff:");`
I don't see a validation on `published_on`, we generally shouldn't specify it in the base factory unless the model would be invalid without the model. Is there a different way we can handle this?
nit: arg description for "key"?
I think we should keep these, o.w. our examples will be wrong (where we're importing from `dagster.utils`). Also, we might break folks who've imported following our docs.
I'm confused why the expectations here would have inverted? Seems unrelated to topic stuff. Can you clarify?
I dislike the messages.go pattern; the strings are only used once and make more sense in context. The other two added reportErrorf() calls in clerk.go have inline strings.
Same as above: don't start error strings with a capital letter, and don't fix unneeded things in an unrelated commit ;)
Can you import `bundler.ErrOverflow` rather than redefine it here?
I don't think this is used any more, please remove.
Metadata tables loaded through `HadoopTables` will have their names as location.type (which is weird as we normally use location#type). I am not sure whether it is a big deal or not.
We shouldn't have a bool for this. If there is a path passed, then we use it. Resource may or may not be empty.
nit: We could import `APPLICATION_AMZ_JSON_1_1` from `constants.py` here.
Since CD updates (assignment & power state) are now done in this controller...
Hm, I wonder if the `see:` prefix is even necessary?
Does this mean manifests will be written with the v2 schema (i.e. with sequence numbers) even though `TableMetadata` is v1 and the manifest list is written with v1? And this should work because we do a projection on read and sequence number is optional?
I think we also need something similar for `rebuild-index`?
Why not make `SearchForNodes` do a `GetOrCreate` for the root node? (Not advocating for it, but just wondering if there's another reason than avoiding having to pass in the path.)
May be useful to have the reason here, though clearly not pressing.
Maybe we can use `this.instance.getCell` with `topMost` flag to get `TD` element?
What about raising `ActionView::MissingTemplate` instead? That's what HighVoltage does.
"failed to create ..."
Probably best not to have an empty test....
One day we can try to allow the user to specify font sizes in something other than points. For now this is fine though...
body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests
Why not have mailPort as int since your are already parsing while calling t.connect ?
If all of the `SqlCommandIntegrationName` values are the same, can we just remove it from `IAdoNetClientData` entirely and put the constant there?
We're trying to avoid X.org specific code. So I'm not a fan of this. Can't this be achieved in display server agnostic way?
The formatting seems different from the rest of the code
this was updated after linking the latest ethereum/tests after a submodules recursive update
We should not use a static import to be consistent with other existing use of the QueryElevationParams.
Should we better change the operator to `<` since the variable defines the minimum size that gets compressed?
Should this have been removed? We still set the region to "aws-global" in v3model.go#L115
have you envisioned other cancellation reasons?
All lowercase in route rule.
Should be in the same import group.
This is done few times, replace with some well named method
Actually, I don't think we need to create object on heap.
This spec can be modified, giving you extra strength (Check this fetch key doesn't work and therefore returns `nil`)
Same here, we need to call `callback` in else branch
Should just be `#ifdef ADIOS2_HAVE_HDF5`
`Id` defines REST resource address and should not be in payload
This snprintf, etc. needs to all be inside the DO_ONCE: all this overhead happening on every single decode is likely a huge performance hit.
Could we use `0x7ffffffe` instead, since `INT32_MAX` is an ID of a _pull_ stream? Other than that the PR seems ready for merge. Thank you for working on the fix.
Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?
Mysql allows for `||` concatenation (e.g. `firstname||' '||surname`) if you enable it: `set sql_mode=PIPES_AS_CONCAT;`. I think this check is safer though
This is not the correct path on all hosts. How can I correctly determine whether I will need to look in `Program Files` or `Program Files (x86)` for the script?
_plugins should be removed too
This is just a renaming of the function getResourceType() to getResourceReference()
Blocking: populate a non-empty value and check it below.
Isn't this case handled as a custom tag in `Span.SetTag()` below? This switch is only for special tags that actually set `Span` properties.
I think it might make more sense to do this in Name.upperCamel; it is the entry point for upper camel strings.
Super Cool bitwise   Minor: Most likely you don't need `System.Collections.Generic`, `System.Linq` & `System.Threading.Tasks`
nit: use `corev1.ConditionUnknown`
we got no chance that `err` is not nil here, need to revisit how `NewUpstreamController` is defined.
Yep, looks right; your new selector _should_ disqualify the rule from being XDP accelerated.
Not sure if the warning message is enough for this time, if the configuration is wrong, java-chassis may need to stop working instead of sending out the warning message to let the admin know about it. BTW, we may need a default override policy here.
Why change the name in the XML?
Should we expose this attribute in the Asciidoctor.js API ?
probably don't need `[:]` why not reference into `github.com/algorand/go-algorand/daemon/algod/api/server/lib` here and skip bouncing off daemon/algod/server.go ?
is this test in the move tests? I see what you mean then - it works, but I wonder if we won't lose track that it's being tested here.
I like the idea of this being an interface as it makes the test setup a bit easier, thoughts?
nit: remove this line. All "arrange" may be in one code block.
We should probably test with constructors which aren't in the schema, and functions which aren't constructors.
Here are two things I wonder: First, would it make sense to replace the TRUE here with "leftExpr->getValueId().getType().supportsSQLnull() && rightExpr->getValueId().getType().supportsSQLnull()". I'm not sure we have optimizations elsewhere that set the "special nulls" semantics back to FALSE if one of the operands it not nullable. Second, I wonder whether we have bugs elsewhere in the code that may not check for the "special nulls" semantics. For example, hash and merge joins probably can't use such predicates as equi-join predicates - one of the reasons for the optimization above. When I look at method ItemExpr::isAnEquiJoinPredicate() in core/sql/optimizer/OptItemExpr.cpp, I don't see a check for that. You have an example with a NULL value that is working, so hopefully this is not an issue, but I'm not sure how and why it works.
The formatting seems different from the rest of the code
Should this section not be converted to a secondary action list?
@peterzimon came up with this 'NM' piece as a placeholder for New Member initials, without this the screen looks broken. It changes to normal initials calculation once email or name is entered. Lmk if you'd like to put something different here ;)
I'm not sure we should deprecate this. I kinda like the idea, that we would provide all exceptions (if we throw any) with a common super type. Of course, the exception should be not a checked exception like this one, but rather a runtime exception. We maybe need additionally an internal exception that we would convert into such a public API exception. But that's out of scope of this PR - that's the question of exception handling.
Is there a reason why you need to support negative `AttackTimeout`? Why not just throw an error?
Should we log a warning/error if only one is specified and not the other?
Should we add some default case if non of the above return some analyzer name? Something like `unknown analyzer`?
Every place you see a change like this, it's because `PhysicalLocation` is now its own object, not an array of `PhysicalLocationComponent` objects. The `Uri` is the key into the `FileInfo` dictionary.
Iceberg doesn't use `final` because it is unlikely that this actually helps. In Java 8, final detection is quite good, which is why non-final variables can be used in closures and lambdas. And final doesn't produce different byte code so it can't do much to help at runtime.
If `crt.Spec.CommonName` is not set, and `cert.Subject.CommonName` *is* set, we are not correctly handling it here.
A reminder that we should discuss whether to rename this to "sockets" or "listeners".
Why && changed to || ?
I love seeing diffs like this one, adding a `String` message to an otherwise cryptic `assert`! It makes me realize you must have had a hellacious debugging session!
I refactored the Aggregate, those are hard to read
probably better to assert the values directly; technically you could pass this test with an implementation that always returned "" for the subrepo for example.
How about the following faster alternative that doesn't need `strlen()` at all: if (*tmp_optarg == '\0' || *endptr != '\0') { fprintf(...) ... This would treat the bus argument as invalid if it's either empty (`tmp_optarg` points to '\0') or invalid (`endptr` points to something other that a '\0'). Actually, the existing code would accept an empty argument and set the bus to `0`, so if (*endptr != '\0') { fprintf(...) ... would be enough. The check for an empty argument doesn't hurt, though.
Rename `need_unmap` to `unmap`.
maybe it's time to rename `ProductSearchExportWithFilter` to something better, what do you think?
This entire method can be deleted; it isn't used and it isn't an override of Stream.
move this line together to after line 16, group internal packages together
Do we need to check `fieldId` is larger than 1000?
Should we put in which account we were trying to look up?
Previously you could only order by the field you were searching by. But for full-text search, you can search across all indexed fields, and it didn't make sense not to have a sorting. For backward compatibility, the javascript code uses indexPath as the orderPath when no orderPath is provided.
We could go further and directly give the tips of the `columns` property for someone (like me) who would like to specify some column width and let the others be autosized.
org was not used in the mail content
This should be in qtutils and imported to here and the other place instead of declaring it twice.
What happens if the minimum x coord is > 0? This will incorrectly set it as zero, right?
Could you add a docstring?
You can avoid changing the code if there are parameter defaults. right ?
Please check if is it possible to mark it as private. What's more please add this to the TypeScript definition file.
Should the thread join be done in the stop function maybe? I am simply wondering and sharing my thoughts. This is my thinking: * The join used to be done in the stop function of node class and now it has moved in the destructor. * The class state_block_signature_verification joins its thread at the stop function too.
I believe this `order` isn't tested.
Please, use the default padding here.
Shouldn't this be in the child and not in the base plugin? Wouldn't having it here enable all derived plugins at once?
Since http2 is coming do we want to call this something more specific?
Not really related to this issue but should we use fuzzy search here as well (like for apps)?
clean unnecessary comma
I think it may be safer not to touch Concurrent to normal.
How about if request ID not set, service should generate a random uuid?
Let's go back to 1.4.0 until the release is being prepared.
@ueshin, I thought we can remove this entire file. Does that require some more works?
\`bbox_feats.shape[0] > 0\` requires the number of proposal is not 0.
Shall we maybe put this in a `const` like `backgroundTaskTimeout`?
This logic is now duplicated here and in `_delete_temporary_files`... Maybe do it all at once - find temp files, delete them, and fix the logical keys?
Pretty sure these should only contribute to the runtime hash.
Would be good to say the normal behavior is scanline order (left to right, top to bottom) and that transposing makes it work top to bottom and left to right.
this line is so long, split it to multi lines.
prefer to just add this to the `verify_authorized` exception list above since we're already making exceptions.
nit: we can use `defer opts.spinner.Stop("Error!")` after l.180 to make it slightly neater
Is it ok to use "math/rand" instead of "crypto/rand" here? Do we need to protect this ID somehow?
Ah, I see here that 'LongDomain' is defined as something that contains a subdomain segment that is `maxLengthOfDomainSegment` long (which I think is 63 characters) - I don't think any public ACME servers/Let's Encrypt's staging environment has a restriction on this?   if it does, and the 'pebble' based ACME server does not, then Pebble needs modifying to also fail in these cases as it aims to replicate the ACME RFC as closely as possible
Sorry :) Would be really helpful to integrate something like Eclipse Code Formatter, so it will fail if the code style is broken (the same as eslint fails on the frontend) I use IntelliJ IDEA and their vision of imports is a bit different :)
Not sure if this constant is defined at the right place style-wise. Maybe move it up to before 'belongs_to' like DISCOUNT_TYPES in coupon.rb?
Question - do we cache NetworkPolicy itself? If so, here we can point to NetworkPolicy?
Can this use the route helper instead?
There is a typo here, this needs to state `october.fresh`
Hmm, probably we should instead write whatever `status` is returned instead of coding a special case.
Are we eventually moving those type interfaces from plugin project to datatype project? If not, then we'd have a dependency from core onto plugins, which seems a little counter-intuitive to me.
I think it would be better to move this try/catch block inside of the `FlushAsyncInternal` function as there are a few of places that can call it, eg event timer (here), AppendAsync, FlushAsync and CloseAsync.
You may need to make this configurable if we expect people to be able to use the normal Nvidia runtime on other Linux distributions like Ubuntu or Debian.
@skestle Just recognized that the `::apply` is not necessary. Does it compile if you leave it away? Could you please check that, I'm on vacation and have no IDE at hand... Thx!
Nit: missing period.
Do you think we can name this variable in a less ...negative.. language ? maybe `ProposalTieBreakerEqualizer`
This seems more like a personal preference, so maybe this should be in your `~/.rspec`?
This seems to only be used by the server/ca package.... maybe this can live there instead of being lumped into these API implementation helpers?
Looks like the actual rename is missing in this commit edit: Arf, nevermind, I was at the wrong commit  
The description of `load_time` here is different from the description below..is that intentional?
This is something I added which resolved a few large errors in the output, although not related to the refactor here I don't think.
Can these also assert at least the length of arrays returned and ideally contents?
What is this `collection_id` field here?
nitpick: Please remove the blank line here
Note that the package github.com/golang/protobuf/proto is deprecated. We're instructed to use the "google.golang.org/protobuf/proto" package instead. I didn't want to change it now to avoid intrusive changes whose consequences are, currently, unknown.
If we have a redirection policy for Selected API forwarding, why isn't "redirect all" just a special case where they are all Selected?
The host object already has a nice way of querying configprint. Try `puppet('master')['user']`
Is this from a third-party library?
Just FYI we need this to align with `builtin.EpochDurationSeconds` from specs-actors or the state machine computations will be off. We'll need to turn this into a config option and follow the same monkey patching paths as the min miner size, seal proof types etc. The EpochDurationSeconds is currently a `const` so can't do it yet tho.
this could receive the MediaInterface directly or an identifier, it is correct to type it with int|string? or just use mixed?
Let's change to tx
The bind address should be configurable.
indentation of resulting file is different between 11 and 8 where 8 doesn't indent lines and 11 does
Do we need this? isLuaIdentifier() is used not only in extract_next_token() but also in extract_prev_toke(). I wonder whether the change for isLuaIdentifier() has an impact on extract_prev_toke() or not. If you are not sure, keep isLuaIdentifier() as is. If you are sure, could you write your conviction to the commit log.
Why reference is converted to table?
Some weird blocks formation again.
These ineffectual assignment changes intrigue me. Our CI tests have been checking for these for months; how come the tests haven't been failing? How did you catch these?
I don't understand the reason for the changes from unique_ptr to ROMOL_SPTR that you made in this file. The pointers aren't being shared or used elsewhere so I don't think there's any reason to make them shared. Did I miss something?
I think we need an if block to check that if this API is really missing. We wouldn't want to override the browser's implementation.
Nit: its scope can be reduced to package default
I don't think we still need this check, but I'd leave it as an assertion for now.
Not a requirement here. But i see a change in naming convention. We can rename the function to `CstorSparsePoolArtifactsFor070`.
I don't think this is necessary since `CommonLabels` is a public func and every component name is also public constant.
# `attr_value['string'] is not None` probably not required as `attr_value['string'] == value` check is already being done
can this be removed now?
parameter should be called removeFromStaticNodes
I don't understand why this change is in this PR?
That doesn't make sense. LayoutEntry doesn't match the generator concept.
Did you file a bug to follow up on this?
Suppresses UTF-8 BOM in outputs
Single quote is used by default in this project.
What happens if nodes throughout a hierarchy are modified (as they would be)? It looks like we're going to `Reset` once for each `NodeID` affected.
This option is now unnecessary
I don't know why this worked before, but we should be explicit on not verifying that a blank string (allowed as a way to remove a url/download_url) is a valid url as it is not.
might be worth to call these `Isolation` instead of containers here and when presented to the user -- docker/rkt , in addition to cgroups and namespaces, also provide image discovery and filesystem preparation; there's also the security context and probably 1-2 other small things
this got me a little confused when reading `build.log`. The err is printed with a log.Error later on but that ends up after the stack trace.
Originally the DenyExport was a subscribe permission because it meant that if on this LN connection, if we deny export of "foo" it means that it would reject a subscription (hence subscribe permission) on "foo" from the other side. Now you are changing to simply not allowing this server to publish on "foo". I am not saying this is wrong, but we completely flip the meaning.
// the test is skipped on given servers because it will fail.
Is there a corresponding BUILD dependency to prune?
This should be `re.search` with a `^` anchor added to the regex, as what we want here is really any path starting with something like `E:`.
I didn't realize we were hardcoding this, thanks for moving it to an env value.
cc @anurse This exists now. Kestrel currently passes the current time to all callbacks as an optimization. Just an FYI.
Is this one of those `LexicalPreservingPrinter` issues?
Do not import torch in the test function because it will import torch every test iteration and will slow down the testing speed.
Slower construction, faster matching. I wonder if this will be noticeable in the relenv?
getHash should be a public and without an `_` if used here.
Should we use logger instead?
@halter73 where is this file generated from?
TTemplateParamClass is handled above with the same content in the conditional
Should we also create sender resources for unicast locators? Should we make a similar change on StatelessReader?
is the plan to fully migrate to boltdb and then remove the state save here?
This covers the `RESTRICT_ACCESS=true` x non-gsa pair, but we probably want to test the three other permutations: (`RA=true`, gsa), (`RA=false`, non-gsa), (`RA=false`, gsa)
did `conftest.py` actually show up for you? `test_files` should never contain it...
The split and join was probably done to ensure that this still works on Windows because os.path.dirname works differently depending on the os you're running under :(. It would probably be a little better to do `dirname, _, fn = path.rpartition('/')` if you want something cleaner than the split/join.
can we also test for `transport=rest`?
The spaces are actually legitimate here: in python, you: - first import standard library modules (hint: time is one) - then import 3rd party library modules - then import the modules from you project (here kinto). Between each block you need an empty line.
So this means that we can remove a callback via instr_set_label_callback(). Maybe consider adding another API function for removal, and add a new assert here such that cb != NULL?
possible bug if `fullResponse` is false
Should sending an address into address error? Since the call isn't needed, and could be fixed easily.
We are no longer including file name in the source files.
Are these limit changes related?
can we add some sample of JSON_DATA format in the usage?
Order(1) vs Order(logN) -- not sure it's measurable at the ~200 element size of the table. All of the published comparisons start at ~1000 elements.
FYI modifying an existing file generally doesn't invalidate the copyright date. The date here is when the copy right _begins_, so moving it later is arguably misleading-it still applies. Not a big deal, just something I've seen a few times in passing.
Could we not just always include `self.config.options.listen_host`? If that is empty, the `address[0]` check should also never be true.
There's `pushString` to use with C++ strings.
Interesting, was this needed for a test case to pass? I figured if there is no opening brace, there is definitely no placeholder -- we don't even have to check for a closing one.
Are the fields in this struct grouped by IP address family or by function? There are separate fields for IPv4Addresses and IPv6Addresses, but a single field for DomainNameServers. Should this new field be named SubnetGatewayAddress with type array consisting of both IPv4 and IPv6 gateways?
maybe we can leave this change un-reverted.
Looks like that helper function is general enough that it should reside in testhelpers
Instead of setting this here, why not have the flag call in the init function set `caddy.LogDestination` directly, and switch on that?
Is this excessive?
Is ExpectData still used anywhere?
Why the `/-/verdaccio/` ?
Do we still want the "admins" gate?
Given this will 'pause' bolt for a few seconds on older rubies, perhaps emit a debug message saying "Warming up OpenSSL" or something to that effect
No need to modify this.
should be general?
i missed these discussions- but ` "secrets-ssm-environment-variables"` is what was agreed upon with cp?
Should this be negated? `!@options[:hosts_file].nil?` Otherwise it'll enter the `if` statement and `nil` will be passed to `HostsFileParser.parse_hosts_file`, which I'm assuming is bad.
perhaps this is better modeled as a pkg-level var?
On second thought... this affects how often the function specified by the `load` property is run. So I wonder if, for consistency, we should call this `LoadInterval` instead. Does that make sense?
This task can probably be deleted since we don't need gulp to run Jest.
Put these includes in alphabetical order
Revert this blank line
Are most of our other fields default-zero-value? Would `AllowVXLANPacketsFromWorkloads` be a better formulation of this? I think it would make it easier for golang users of the API (default value matches the type zero-value)
this method is need for full screen video button to appear in players
~Method is public and removing it would be a BC Break, you can deprecate it if you want.~
please run gofmt.
Nit: what about just `pay`? Is there some other subcommand that would conflict with?
Just noticed this nil context. Perhaps plumb through ctx too, or change to `Debug`?
I suggest "no parent snapshot found, will read all data\n".
Maybe it's time to fix the param name for this interface?
Just noticed, are we specifically missing the addition of `SharedConfigState: session.SharedConfigEnable` ?
Does order matter? Should we sort by enode key to make duplication checking easier?
Hi Ramya, rather than checking here in the perf counter library, we should add the privilege check in the host_exerciser app.
This kind of concern should be handled in the `TableMetadata` update methods. This is similar to `metadata.rollbackTo`, which not only sets the current version, but also updates the table history. I think that all of those methods should add the current object's `file.location()` to the previous metadata location list, if it is non-null. That way, the caller never needs to remember to update it.
Do we normally force ReadPreference primary on other write operations? Or is it just that we normally ignore it?
Please use only `Logger` instead of `org.slf4j.Logger`
Is it possible to import from k8s instead of copy in? :)
I gave them the EXACT SAME NAMES in my branch :)
There are enums for genders + `PLAYERSEX_LAST`.
I would say `!= 5`; A packet with <5 would be malformed.
Using a plural route helps in detecting the path automatically for `= form_for @password_reset`.
Can we change to use `LogicalType.getChildren`?
Same user/visitor thing.
Do we still need this?
Does it matter that #include changed to #include? ? I think the change makes sense since it aligns with the method name on Hash but unsure if anything called #include that would break with the change.
Did we need this alias? Or is it just a holdout from development?
Rather than test for nullptr, just treat the pointer as a bool, i.e. `if(p_jmsg["compress_method"])`
It is not a "perfect" test, but: webOS 1.2 emulator says `probably`. webOS 3 emulator says \``. webOS 4 emulator says \``. Why did you remove `options.supportsDts`?
One thing tho - I would really appreciate any advice on where to move this to, so that it's called on initialisation of the website.
we can just have this method call the next, passing in the file metadatas (deduplication of logic)
not blocking: can we remove extra lines here?
Same here: Empty line before and no `Internal dependencies` docblock (mandatory anyway once #217 lands).
Nit: should not we hide them from printing out?
that's fine by me to have simple test for provisioning check
Remove this file from the PR
Golang naming convention is to use camel case `icmpPktWithTypeCode` Often the linter will complain
wrong code: should be `Wh_e`
This route excluding needed for reconnect only when one connection is lost and we trying to establish another. I was thinking to make 2 separate flags for killswitch and reconnect enabling. This way we can keep killswitch working, but we don't need these routes excluded.
if we think this is likely to be augmented with a additional 'run coordination' features or configuration in the future, we could make it an object of some kind instead (or an enum, if we think there may be other resume modes in the future besides just on/off). Just imagining 6 months in the future, it would be unfortunate if there were 7 new args here as the feature gets more complex
Why these changes to existing tests?
I wonder what would happen if the granteeName becomes DB__ROOT but the granteeID is not DB__ROOT ID (33333) but something else.
Do we need to check if `exp.Target.StressChaos` is `nil`?
I dont think this line is needed
Instead of doing this let's add another function similar to `hasZeroData` for selecting the `reportArgs` since this is all sourced from selected values. Then `hasZeroData` can use this internally, as well as the component itself. Since this function would be internal just for the purpose of avoiding duplication, we don't need to expose it on the component the same way though.
PTAL, looks like the order of PVC & PV is reversed for different storage-engine types, for Jiva/CStor the args sent to sendEventOrIgnore are `PV, PVCName`.
Is the idea that `@product` (and `@workshop` for `workshops_controller`) would eventually go away here?
This TODO isn't related to this change. We should remove it.
This can be removed too, right?
Why was this change required?
this is spelled wrong and also not used so remove it
This is a way better method name.
action should use a prefix of `hfg` rather than `neve` as we plan to bootstrap this as a standalone library. Moreover, previously filter/actions used in this library was using the same pattern.
Please host to a GitHub repo.
The method name is incorrect. It does not check the existence of the file. I'd suggest deprecating both methods `fileExists` and `findIdByHash` and use findIdByFilename instead of fileExits
(ignore this. testing a codeflow bug)
This recommendation isn't very helpful because it isn't clear what "the metastore" is. How about this instead: "To fix this, use an alternative metastore".
For consistency, it's best to either always use strict equality (`===`) or loose equality (`==`) in `typeof` checks, and to not mix them.
Hi @cjimison good point but doesn't this break the compatibility with Erlang/OTP prior to 17.0? I think this could be done over an conditional macro defined in the rebar.config: `{erl_opts, [ {platform_define, "^R", pre17} ]}` and some additions with `-ifdef(pre17). ... -else. ... -endif.`
What about `sort_by(&:in_progress?)`? Maybe with a `.reverse` thrown in?
Please use the style of the rest of the code, a space between the type and `*`
is there a reason we don't want to gx this dependency?
How about to skip if and returning null and return a result of `ArticleFacade::findById` directly?
Required for the SparkDataFile SerDe
Longer term, I think it could be valuable to move this to cluster-api, and then other repos could take advantage of this as well.
Hi Simon. Whether this should return true depends on what byte buffers are used? The same applies to ByteBufferIndexInput, actually... I don't think you can generally tell whether the ByteBuffers the input operates on come from a mmap call or from somewhere else (even direct buffers don't have to be a result of mmap).
Very cool. We are now collecting the fruits after your length implementation!
NOTE: this is the default ENS registry address. If the ENS suite is deployed from the current builds to any chain, it will always be found at this address.
is there anything still referencing `checksumAddress` or can we just delete it?
Only V1 or V3 is return from `getMetaVersionFromKV`. So where do we call `updateMetaV2ToV3`?
Do you still need to call the superclass `createVariable` if you've already determined that the variable exists?
Pls remove the print statements. Also, you do not need the if statement.
Do you still need the `name` in the arg description, if this is not `str` type anymore.?
Why you duplicate it? The underlaying transport should live as long as the multiplexed one. And must be destroyed after protocol is destroyed. Duplicating the transport may lead to object references hold and maybe memory freeing problems. I think this property must hold a reference to it and not a copy. The copy can lead to memory freeing problems.
This seems much simpler! I'm not sure I follow what you mean by the threading part... Also tests are not liking this constant. Might need a require or to fully qualify this.
> i#1312 AVX-512 support: Add code cache to/from context switching. s|to/from|| (redundant and mildly confusing (called "enter" and "return" in code)).
Remind me why this is needed?
You could perhaps call this `strlen` (although I don't particularly care about the name as it is an implementation detail).
Do we have test cases that name is null?
Could you split this into multiple lines?
Does this file actually need to be committed to git? Having to run `make generate` is rather tedious on each PR and it conflicts easily.
Why does this include `bolt/inventory`?
Maybe we can change it to a more generic name like source_id.
rename ibftTwo arg to bft
Please convert int params as well.
when will lost exception? by my test, never happened.
Please update the method described to point out that it maintains a chain of interceptors and they will be called in the same order passed in the options.
i guess these types & cron / retry specific belong to a dedicated util / struct
This doesn't seem to be used anywhere, probably doesn't need to be a new interface.
We can get rid of this import then.
But why introduce publish on `accConnsEventSubjNew` subject if we never subscribe on that subject. What is the plan then? Replace subscription on "old" with "new" at one point? Not sure about all that..
Can you add : 'password' => 'The provided password is incorrect.', ?
prob should still have an example that has multiple option names even if you have to make it up. Or maybe we don't need this method?
Seems we don't need it anymore.
Shouldn't this work as well for Disjoint?
I think you missed this.
nit: the others use the method name in the api and not the class name of the api
This looks fine as a first approach, and can we put a TODO here about ubuntu 18.04 being hardcoded?
This is maybe more of an admin request? WDYT?
This is this a copy / paste error from above.
Do we really want a new type, or can we just use `SpanContext`? The `ISpanContext` interface is read-only, but there's nothing stopping users from casting this to `SpanContext` and modifying it.
Or maybe put into alphabetical order with the other #includes.
All stories in this file also need the default padding.
Why set to GPU, is it CPU?
Just wondering - would it make more sense to simply replace `PMIX_DESTRUCT(&t->nslist)` with `PMIX_LIST_DESTRUCT(&t->nslist)` here, and then add `PMIX_RELEASE(p->jobbkt)` to the `pmix_nspace_caddy_t` destructor on line 154 of src/include/pmix_globals.c? Seems to me like we always want to have these things removed/destructed.
I would inline the constructor as well
I assume this is a performance optimization to only check this once when creating the signal filter? While you're at it, maybe make `BLACKLIST` a set instead?
nit: `Contentful` is the word used in the GV API, without the uppercase in F
This require isn't need anymore, right?
This also needs to be reverted.
I think this should also filter out `validate_resolve_reference` hooks.
Minor suggestion, but wouldn't it be cleaner to simply replace PACKAGE_NAME_FORMAT to all the optional path, then check that the path is empty in validate_package_name? We might also want a helper function to pull out the package name and sub-package path.
Could you also remove the `defaultSamplingProbability` constant from `sampling.go`? It seems to became unused with this change.
Why does VirtualMachineMetrics have to implement Metric?
nit: change it to `Exchange: unexpected status 0x%x` so that we'll know where this issue came from as well as making it easier to decode.
Should unsupported query parameters just be ignored? I think that's more common than error out.
Probably need to understand/implement this one now.
This isn't how you throw an exception in C++. I'd suggest you take a look elsewhere in the RDKit C++ codebase and see how ValueError exceptions are thrown. Hint: there's a function called `throw_value_error()` that you may find useful.
The `move_topic` action be a `post` request since it changes the state of the object.
can we keep this around? We should make sure we can distinguish between properly wrapped errors and "unwrapped" errors
I don't think it's necessary to change this for the history plugin tests?
Initializing _format to None, but asserting that it's not None later, seems unnecessarily fragile. We shouldn't architect the package class to rely on classes or methods that use it (e.g., build). Let's at least set the format to the default in case we don't create all packages through build.py.
Can we maybe move the `File` creation to a new method? I mean both changes look equal to me with the difference of two parts, which could be specified using two input parameters.
One more minor change, the string `ForAdditionalLiveTvOptions` is probably also unused.
Do we need to continue to support the old link, or is it dead dead dead?
what is this default about? I am not using ngrok atm so would prefer an env var.
There's an awful lot of test failures here because `localFieldPathType.schema` may not contain a `getters` array.
The limitation is if somebody configure another policy with the same name, but it is an edge case we can ignore I guess.
Why delete this?
Maybe just `FAILED`. We can't be sure loading was the thing that failed.
Is this necessary with line 38?
`status` is just one of the features, named as status is not suitable.
Should be inside `ifdef X86` I would think (or moved to ... I guess arch/x86/emit_utils.c)
it pushes a boolean, so it has to be explicitly casted to boolean with != nullptr, same with all other similar stuff
style violation: { on own line
This code is new and not tested well. While we may drop the log level before we ship 4.0, right now this is extremely helpful to users.
Since we created a Provisioners directory, can we do the same with the tests, and follow the same structure as the code?
Do you test for file existence simply to reduce the warning message that may occur using the include? Also - I think the practice used in BOINC is to go ahead and use include_once even though it isn't strictly necessary in this case.
should we rename this like `mongodb_srv_tests.js`?
Can you make this a member var as all the other deadlines? Then you can drop the param to resetTimer() and simplify some of the code below iiuc.
str.Substring(3).Split(' ')[0] would also work and is more concise.
unnecessary spaces here are doubling the size of this otherwise extremely useful addition
private static final, and it should be located in raidsoverlay, as it's not needed in the plugin. also the name could be a bit better, DC_SCOUT_RAIDS or similiar.
Should this be: `aws.infrastructure.cluster.sigs.k8s.io` instead?
this warning shouldn't be produced if we configured a cache either
German keyboard would also be used in Austria and Switzerland, so this should have included `.at` and `.ch`.
maybe give it a more descriptive name, e.g. `competitiveFilter`
I think this is the only line in JS legacy code that should be updated based on the renaming. `global.googlesitekit.setup.isAuthenticated = response.authenticated;` would be sufficient to keep the old name for the legacy JS data (which will be phased out in the long term) while supporting the new name in the API route. All updates to the JS components above wouldn't be necessary.
Can we give this field a more descriptive name? When I use a variable named `icon` I normally expect an `Image` object.
Unfortunately, the site example only has access to imports from `components/index.js` that means that you can't import the items file `carousel-items.js`. You can import that file in all the other storybook files though.
Please run Platform tests `DiaSessionTests`.
Is there any particular reason to have 6?  
I could've sworn I got a `403` myself when I got that response locally. Is `200` what the API would send back for a `permission: false` tag?
Is this a breaking change, or is the API private?
Is this necessary? I would expect YARD to treat it as public anyway... (Don't hold off merging on this...I'm mostly just curious).
This will be only available when data-manager is enabled, is there a fallback in case data manager is disabled?
why need this? i don't see Gen.CreatorPubKey being used?
If this is `project_number` now, can we also update the `id` the description?
Please update the yard docs to indicate this new option.
If/when you rebase from `dev`, this is going to cause a merge conflict. I'd suggest that soon after merging this PR as the capabilities code has been moved to "agent/app/agent_capabilities.go"
You should use the current directory instead - it's a temporary directory that will get removed when the test is done.
This change (import org.shredzone.flatter4j.model.User;) does not seem relevant to this fix / commit.
This should be made private.
this partial is used also for previewing a template, did you test if still works?
Why don't we drop the packageImplementationVersion in general? That way the version will be fetch all that time only from the properties file and it will be consistent.
What is the need to use string as key? Can we use the apis type as the key?
Loading the login page after the certificate has been loaded. Views can only be loaded from UI thread.
suggestion: if we perhaps make `attributes` a getter in `virtualNode`, it does look seamless to access the property, same as what we have done for `isFocusable` or `tabbableElements`. `node.attributes` can become `virtualNode.attributes`
Is this OK to add in the spec helper? I need to call `Bolt::PAL.load_puppet` so that I can use the new `Bolt::PAL::Issues` module when verifying that plans forbid functions.
Why not just import this from `data_transfer`? As a rule copying the same code twice is not a good idea. Also: please run `pylint` on all files in this PR.
Owww, I think I found a typo. `suche`
Do a TrimSpace before setting.
Should we explain more here?
should this be here twice?
add an entry in makefile to generate binary with diff name?
Probably doesn't go here because I think it's specific to the HTTP API layer. This class is too internal to declare such a name.
We should use `! isValidAccountID( accountID )` for the `accountID` checks.
nits, I don't get the point of this change  
What about integrations where we don't plug ourselved on OnMethodBegin?
There's a comma missing here at the end :wink:
`spanReference` -> `baggage`  
What criteria do we use to bump the copyright years? An update to the module?
it have no sense in python -> it makes no sense in python
any testcase for saargs, and tidyargs argument processing?
Alternatively (and better) would be to look for the .level attribute of the node. If it's bigger or equal to 1, than that is a relative import. So "from . import x" should have level 1, while "from .. import z" should have level 2 and so on. The same should happen for "from .c import z".
Why do we need `\n` if we already use `WriteLine`? (and `\n` is not cross platform)
Nodecfg should be downloading from a private bucket -- these shouldn't be for public consumption. In general these should be generic and expect environment to provide appropriate credentials and bucket.
Probably also needed for the `http.client.FOUND` below?
DRY these 5 lines into a function call, no?
`on_lateral` can also be implemented
Trailing tab, remove it in another PR.
Now it's double logging, is not it? Because `service.ipForward.Enable()` logs extra `warning`
Now you don't need the localization module here then :)
Should revert this copyright change, when the file isn't changing in any other way.
Can we remove respond_to block its not required here
not sure i like this change. The encryption package does not need to know about references
@luguanglong , Thanks for the fix, can you re-phrase it to sound better something like "This OS version is currently un-supported by keadm"
This is the actual fix.
I was using this imports for writing the results to file to more easily check that it was valid JSON. You can probably remove these `java.io` imports.
If this default doesn't depend on the argument, shouldn't it be delegated as the default for the no-arg version instead?
can you please change this to `_collection_to_single_partition()`, like we've done for alll other helper methods defined in this module?
a bit weird to see payments crypto package inside connection manager. There probably will be services not having any relation with payments that will use connection manager. Thats why probably ping-ping by itself can be useful without any relation to payments..
We should add those only once we have successfully synced to the BSC main net, we have a utility to generate those. Please remove for now
These are good cleanups: I didn't realize there were so many like this in the samples and tests. But given that there are quite of few of these mcontext changes I would separate these into their own PR (no need for an issue: iX branch) since they are logically distinct. Cleaner history, simpler revert paths, etc.
It doesn't make sense to accept all 2xx status code. For example, `203 Non-Authoritative Information` or `205 Reset Content`, etc.
form => from
let's move this into `slack_helper.go`
currently the puppet-agent package doesn't symlink files into /opt/puppetlabs/bin. Also many puppet acceptance tests that execute on Unix assume puppetbindir is a single directory (windows doesn't have this issue). So I think if we want to unblock testing, this should just be changed to `h['puppetbindir'] = '/opt/puppetlabs/puppet/bin`
Please only indent this by four spaces.
Are you sure `v3EndpointIDToContainerName` and `v3EndpointIDToTask` are saved in the state file, can you verify that?
Just curious: where do these pin numbers come from? I see you took the SPI0 pin numbers from the Arduino board layout which is good, but I can't find such a relation for `SPI1`.
This brings up the question... do we need to start assigning users to the different use cases in some way? We don't want this link to show up for Ric, for example.
These should both be const, not var right?
feel free to make this a "typed" named tuple (overriding __new__) if you are feeling frisky
Nit: continuation indents are 2 indents / 4 spaces.
I'd suggest a default value of `false` just to make sure existing tasks are ok when they get deserialized after an update to a version containing this code.
Just a small tip: I think you don't need to include pytest here. You can run tests using: - `pytest tests/path/to/my/test` under the virtualenv to run a single test. - `pytest tests/` under the virtualenv to run all the tests. - `make tests` to run all the tests for all python versions, like travis do. Hope this helps! :)
The const can also be used in cloud/pkg/cloudhub/servers/httpserver/server.go L46-47?
File is not `goimports`-ed (from `goimports`)
Aside: this is a confusing name for an interface that contains multiple addresses.
As we can't use old names we should warn in whats new for 2.12 that this can happen.
passing in a `nil` here just so that the tests can pass in an alternative implementation seems weird, but I don't know what the convention is for doing something like this - @briandowns?
Looks like you're also changing logic and not only tests.
This change should also probably go into the corresponding method of the abstract By class?
I think he meant the docstring in this constructor. yea we should fix
Kick off the download after login.
AWS Identity and Access Management (IAM)
Why are currency signs considered punctuation? They technically fall under the BMP range for Currency Symbols `\u20A0-\u20CF` (covered in `getUnicodeNonBmpRegExp`, which is itself a misnomer)
Why is a restart necessary?
Consider make the second argument a `encoderOptions` which includes the `lowercaseFields` just like opening a collection.
Given that this is a boolean predicate, maybe it should be `full_backtrace?`.
Maybe `consumerID, receiverID, issuerID`, at least it's a convension in overal repo
I was planning to add it as a common option, but there is a cyclic import for the rc & fs libs. Thoughts on avoiding it or should I remove this for now?
Why the change from rdkit.six to six?
This is random line :-) overridden String type by custom trimmed - please change that commit message to something like "introduced custom String type with automatic trimming"
Low risk to fix this by default because existing baseline consumers pass this check. We don't attempt to fix checks that have been opted out of.
should use Number instead of Long
Can you elaborate on why you need different behavior depending on Tools being built independently or not?
Please make this a keyword-only argument by adding a `*` argument before `add_undo`.
This change was not really intended but made by the linter of VS Code. And looking at other packages this looks like a best practise to place interal packages on the top and gh imports afterwards.
nit: Would you mind alpha-sorting this?
Should remove in `_MissingPandasLikeMultiIndex:` too
I'm fairly sure this precondition is always true due to the mod (%)
Shall we keep this test?
I'm assuming that asSmarts & cxSmiles == asSmarts
The actual User-Agent string uses "CriOS" not "CRiOS"
"Re-upload all fragments (even if fragment is already in registry)"
Optional: This function is C++ specific and could be declared as `static`.
Have we reached binding-level agreement on the `subscribe` terminology? My only concern is that it doesn't seem descriptive enough and may be confused with subscribing for notifications.
Why are we catching and logging exceptions? By doing that we make it look like the job has succeeded and it will be removed from the queue - if we didn't do that then it would stay queued...
Since this is workflow agnostic, should we put this in common?
Inheriting from `AccountsController` to get access to the `redirect_if_disabled` filter.
I assume this is because you were seeing cases where left was a negative number? When?
This will call `componentWillUpdate()` for mounts because the else clause is removed. It should only be called for updates.
let's just fold this inline in mux.go, no need for the indirection to this new file
How come we don't allow this to be configured with the ACME issuer? Happy to leave this as-is for now if there's a lot more consideration that needs to be made, but it seems like we could/should be able to allow this?
Could you update this to `structLike` instead of `arg`?
nit: "*mapping" for a map is unnecessary. Consider calling this `originalNames` or similar.
@bbondy Two messages because the label and description differ very slightly in their wording...
Does a type-hint work instead of casting? `return ofAll(toList().<U> zipWith(that, mapper));` (Probably not, just a question.)
were all these ones missed in the previous PR so you are adding them now? the sources v1 and some of this? Is that right? If so, can you update the PR title
We don't have `target_name` on `@sensor` - why introduce it for `@asset_sensor`? If we do want to introduce it everywhere, can we just call it `job_name` to avoid introducing a new term?
Now I start to wonder, do we want to have `80` as the default or `9090` (or depending on whether we are exposing it via `PrometheusExporterMiddleware` vs. `PrometheusExporterHttpServer`)?
This is a duplicate generation of the same file as below.
Looks like glassfish went a bit nuts doing a refactor
We're only testing `RateLimiter.Allowed(Span)`, so I think we can use a mock `ITraceContext` instead of a real `Tracer` or `TraceContext`.
I don't see anything here that excludes people on a Team plan from from the revenue report. I see that TeamPlans are counted below, but the individual subscribers on the plan would still be included.
Should this be initialized to zeroes?
Same: DO NOT USE IN PRODUCTION. Yes we should shout ;)
Solr dependency was downgraded?
isn't the usual capitalization for subcommands force-qr? (don't care too much about it)
Why is this value set to "min_by", and what are the implications of it? Does `&:to_f` play nice with semver (e.g. 1.2.0)?
This is not supported in Spark 3.0.0-rc2 yet. I'd skip this for now.
nit: rename to nativeStk? proto might lead to think protobuf
Nit: below on line 449 we use `%v` to print an error - perhaps would be nice to do it in the same way in both places (but probably not that important). Similar in other places in this PR.
@cijothomas This build-up pattern was really confusing. It looks like internally ActivityProcessor is intended to be chained but there is nothing in the abstract class that enforces it. We never set a "Next" or make sure that the chain is called. Probably need to do some more work in this area?
To reduce complexity, please use OSError on Python3 as well.
I wonder if this new logic would actually fit better as a support method, both for readability and overriding... e.g. <pre> protected function getRouteNameFromDataSource($route) { if ($route === 'collection') { return $this->getDataSource()->getCollectionRoute(); } elseif ($route === 'record') { return $this->getDataSource()->getRecordRoute(); } return $route; } </pre> That's extremely nitpicky, and you can feel free to leave this as-is if you prefer... but that feels marginally better to me.
qq: Should this include the iptables6-save sim. to the inverse checks above?
I assume we have a package reference somewhere that pulls down the nuget package?
Nice to see that your local environment is up-to-date now for these changes.
No possible chance for weird overflows here, right?
Generally with these tests please split up these tests so that there is a different test for each method
this is a behavior change. solid_subset=[] represents an empty pipeline where as solid_subset=None is the full pipeline
Is this an oversight for some code in the body?
Why we need another error printouts? We already have it inside addMapping..
can you assert the value of this field below similar to other fields?
I think this method is unused now?
None not needed, can just be `return`. not important for this release
Just noticed this while debugging -- it's unlikely to be causing issues in practice.
Small formatting thing, but can you remove the space before the semicolon?
I assume you want to change NetworkPolicy to use bundles in a separate PR later?
Not sure how particularly useful these exceptions are. Seem to be exceptions required in copying and pasting the EndpointResolver over. I wonder if it makes sense to move these out of ``exceptions.py``
`ProvideConfig` was changed, looks like it will not compile for windows, and should be changed too.
Can you please remove `codec` from the parameters too? I think it's unused now.
Not sure if we need this. It's not tested because it only guards against a new conditional definition of a dunder method in a built-in package. I am fine with leaving it out.
Oof. I may have missed this while reviewing #3805
From the code, a check's metatdata was only added to `axe._load` if a rule used it. Since `role-none` and `role-presentation` were no longer used in any rule, their metadata was never added. This caused any translation file that passed translations for those checks to fail `axe.configure` with > "Locale provided for unknown check: "role-none"" To fix I added this line to parse all checks regardless of if a rule uses it or not.
nit: This error message doesn't mention that the path is a directory, maybe "Dockerfile path is a directory:%s, please provide path to file."
We have Vue application at our disposal, and have examples container implemented as component. Shouldn't helpers be imported instead being global? Not the best practice in Vue app I guess
how about "unknown" instead of "fafafaf"?
You need to override where possible in rs-api
Please undo this :wink:
Various things to note here: - Why would `question` ever be falsey (or `None`) here, i.e. why the `if question`? - Why would `question` ever not have that attribute? You set it in `Question.__init__`, so that check does nothing at all (and generally, `hasattr()` should be avoided if possible). - Why do you want to yank `None` (what does that do?) rather than e.g. show an error if there's nothing to yank?
Any particular reason for 8? I feel like we could probably handle more...
Why change it?
Sectorbuilder behaves differently depending on whether it's given 1 or more threads. It won't seal if only given 1.
s/must specify secrets/must specify secrets or Role info/
I think the instantiation of the new objects i.New() and T.New() need to be done in a function to have local variable and reduce the amount of memory used.
line is 147 characters (from `lll`)
Should this be "no limiter drop", since this isn't an absolutely essential activity for the stability of the network?
This would also change back to /var/www/html/docroot if we go that way.
detectStaleEndpoints to be more specific?
Why do you compare by nodeid? Simply saying d == e should be enough. Unless we have to objects in memory with the same nodeid. If that is so, something went really wrong.
we can remove this template, it is no longer in use
A similar field is already define in `scapy/layers/bluetooth.py`. Can you merge both definitions ?
Should we add a warning for anything over say 8M? Just suggesting that is not recommended?
please inline imports
Including the source twice here makes the filesize jump to 432kb. Is there any way to minimize repeating it?
You can safely revert changes to this file.
Had to rename this because `InitialPackage()` already existed.
I think that I have a better proposal for this test - improve it so that it would know how to read the list of SupportedProtocolVersions and dynamically use these. The motivation here is that I expect to have another network version soon, and this test seems to be a good test case for that.
Why `restic.TagLists` and no `restic.TagList` ? Because I'm using `restic.TagList` here and using `restic.TagLists` is a lot of changes
File is not `goimports`-ed (from `goimports`)
s/for use/to use for/
Please do not submit a commit that is not part of this PR.
I think the correct pragma is `# -*- coding: utf-8 -*-
oops, it should be `data._scol` so that it respects the expression stored in Series. Let me fix it quick.
Do we need to include the path?
Wait, so it looks like this function is called _every_ time we fetch the root node, i.e. we do an MD head fetch every time we fetch the root node? Not for this PR, but it seems like we should make that unnecessary, since this function only ever does anything when head is `nil`, i.e. the first time. Maybe add a TODO?
This change is suspicious. Why did the number of partitions increase?
We should bump this before releasing and remove all legacy fields that are safe to do so. Since we cannot have multiple versions anyway there's little value in walking around with the "alpha" stamp.
Why listing only first error reason (`ErrStatus.Details.Causes[0].Message`)?
This also makes the exception to be raised on non-dict falsy values which I think was expected.
[Nit] I don't have a proposed suggestion, but security seems too generic of a name here.
@AutomatedTester @davehunt thoughts on a new keyword argument?
Please check the return on these.
Not sure if it's a good idea to remove stop channel. If user cancels connection how will you stop pinger?
I am pretty sure it breaks the visitor pattern, visitor should have no knowledge about the structure of what it is visiting or control over visiting mechanism
So this is a swing of 2: but I think we only need to reduce by 1? The artificial jump added on truncation is not passed to clients: it's like other mangling added later. So if `-max_bb_instrs 4` means 4 app instrs passed to clients, we'd want ==, not ==-1, right? Plus, if we did want -1 and to stop at 3 instead of 4, this is not sufficient: the inner loop above currently has `total_instrs <= cur_max_bb_instrs`.
Was this done automatically or by hand?
nit: let's call our address ioAddr from now on
I think this is more of a semantic difference than a typo - `weiter hinzufgen` is like `continue adding` whereas `weitere hinzufgen` is like `add more`. I think it makes sense to change it though  
Better to rename this to CASDefaultCstorSparsePool.
Please put in a separate line-separated block
`isIE9` was reverted. Shouldn't this condition be reverted as well?
How should we set this for existing teams?
util.Warning()? Easier to say.
Can `result.stdout` or `result.stderr` be nil?
No need for this, as pylint already only turns things off for this function and it's needed for the entire function.
nit: I can't help but think the privateTransactionHandler should be a base-class member ... every Priv Json RPC seems to need it...
What do you think about `mentor_mail_to` or `mentor_mail_to_link` in order to match Rails' `mail_to` method, which is what this calls? I'm not sure about this suggestion...
Could you revisit the full header and add appropriate spaces after the hashes?
Same here. This should remain unchanged. Please, add it back.
This is already done by `view_set_fullscreen`
The link to valid syntax is not really applicable for NET2_1, right?
Now that we're only using this repo as a Gem you shouldn't need to `require` an expanded local file path like below.
Leaving this log line because it helped me to diagnose that the reconciler client was using a different cache than the event sources, so not always seeing the injectable that triggered the reconcile.
Is the `flowDefinitionId` sufficient to uniquely identify the flow or does it need to be the tuple `<flowId,flowDefinitionId>` ?
Please could you remove the useless space.
This tests seems it was broken from the start :joy:. It "worked" because the old sample chance was small enough that this have always be off. Thanks for fixing this. Could you also change the strings on this test? `"Recording off"` and `"new span is recording events"`
I would just say "Signed before publishing."
`ChainID()` is a getter method, move up to `Nonce()`
Looks like the template argument doesn't resolve by default so you need `std::lock_guard<std::mutex> lck`
I couldn't tell from reading the test - do we every criss-cross transports in the same test? I want to make sure we aren't breaking the chain...
Is this `@missing_text` ?
can you delete the `generateDeploymentStrategicPatch` function as well?
Metrics/BlockLength: Block has too many lines. [166/25]
when will this happened? if happened, just ignore it Silently?
where is this coming from?
Need to include "common/base/Base.h" in front of this line
Nit: no need for "to" at the end of the doc because it already uses "to which".
This doesn't fit the abstraction level. Should we have a property bag for extra stuff?
Use instead `convert.Int32ToString` that was added in #762 for this purpose.
Please use var declaration for variables you are declaring. I could not find one for userInjectedExpandableRowHeaderColDef and finalExpandableRowHeaderColDef. Also code styling in the if block needs to be corrected.
Btw this class probably doesn't belong in PMD. It says it's there to test UIs, but arguably UIs can use their own test fixtures, and this in in src/test so probably not even shipped anywhere.
\[Checkstyle\] ERROR: 'protected' modifier out of order with the JLS suggestions\.
Why change to element ?? in whole application use plural convention ??
Lint didn't like this context being before the skip
Is there something missing from the message here?
I think it would make sense to also set `internalWebPropertyID` to `''` here. Otherwise, it might keep its previous value (let's say a property was selected before, but then the user chooses "Create new property"), but since it always should depend on `propertyID`, that would be incorrect.
Is this not required?
Since we now keep track of all bytes written, and extend the write timeout as needed, it's tempting to no longer add 2 times the max buffer size to the bytes written accounting for the connection drain timeout. As we've discussed before, this add several minutes to the timeout with the default 240 bytes/sec rate limit. I'm thinking instead this line changes to `timeoutControl.BytesWritten(minDataRate, 1);` to add a grace period to the drain if necessary. What do you think @Tratcher?
Shouldn't we use store a message which indicates that there was no available checker command? By the way how is it possible that metadata.json doesn't contain the checker command? Maybe this was the case in the earlier versions?
Be careful memory leaks. memory leaks occur when getters.getAliasProp == nullptr . right?
Whole thing could be collapsed to `data['config']['transport'] ||= 'local' if target.name == 'localhost'`.
Here also, let's not cache value on top of file, but use `plugins.getConfig("api").offline_mode` directly where it is needed
1 - create browser specific options class: - chromeoptions - firefoxoptions - argsoptions
oh come on :(
I'm confused; are we just dropping these methods without deprecation?
I think a `std::copy` with `std::back_inserter` will get this done in one call.
it doesn't look like these need to be exported?
Does this mean we cannot update statistics with sampling on a table with LOB columns?
Bit surprised by this. I would have thought either you want to set it for both mpl and bokeh...or alternatively it was only ever meant for bokeh and was always wrong?
Just wondering whether it's safe to send all CQDs to the child compiler. As this missing CQD is causing trouble, maybe some other user CQDs that now get sent could also cause the statement to fail? Also, if I have a table with a nullable unique column, should I have to set this CQD to create another table like it, or should the CREATE TABLE LIKE work without the CQD?
Is this method called at another location too? I'm just asking because you didn't remove another call to `updateLibrary`
maybe `duckpubsubv1alpha1` ?
I intend to do this as soon as I have tests passing.
why RpcSchema need this annotations?
Rather than deleting this entirely, could we just emit it as a `warn` or `info` log line?
nit: syntax : neither -> nor
Should this be instead a configurable option?
@developit I vaguely remember you mentioning something about some JS engines having an escape analysis feature that makes objects (and arrays?) locally declared that never leave the function essentially free from a GC perspective or something. Do you think we could benefit from that here? Or should we leave this as it is?
We should be able to add sensitive by hard-coding the parameters, same as you put into the metadata in apply_helpers.
you don't need to create a enum for this, java allows you to switch on a string ;) (since java 7?)
Can you add back these newlines? We try to avoid non-functional changes like this because they can cause commit conflicts.
During genesis sync it can unwind 5M blocks?
Nit: Maybe merge this with the configProto check on line 208? Don't feel that strongly though, please keep separate if you prefer.
I think you need to be careful to honour isTest and stamp here.
should it be `newsessionqueue` or `newsessionqueuer`? In case we'd like to be consistent
Avoid comma after the last parameter of a method call, unless each item is on its own line.
I moved the instantiation of the signature algorithm here, to execute it before the native libraries are configured. Otherwise the wrong signature algorithm could be configured in a future release when more than one is supported in Besu.
Is the infrastructure layer an appropriate one? I don't think so tbh, more like an application, or even a domain one.
Under what circumstance would we have a span id already? Is this for testing purposes?
This was added to fix a race condition and you are reverting it here, right?
There's a few `return nil` cases above this -- we should probably move this above the big switch.
@billybonks Why move `import Ember from 'ember';` to the top?
Thinking if it would be nice to have something like `setNothingSelected`.
Could you remove `,' at the end?
I'm not sure about adding more flags here when we're trying to simplify things, I thought we were going to check for patches changes to decide if we needed to update or not?
should a similar change be done for findElement?
I don't think we use `AspNetAmbientContext` anymore since . We can probably delete this file.
As a side note, I get why this is up here (sort order), but it'd be easier to not forget to update it if it were down next to `1.x` -- would it be acceptable to make that change the next time I make this sort of PR? :smile: :innocent: (don't want to hold this one up since folks are blocked on getting this one in, it's a pretty superficial change, and I probably won't have cycles again for a few days to update the PR with the change :sweat_smile:)
Is OK that we don't have some placeholder?
please don't use wildcard imports
Can't we return an empty list and then just compare the lengths? Thereby removing this `if`.
This should be in the last group.
This code is way too complicated for what it does. I don't want to be a PITA, but what can you consider rewriting it in a simpler way? I'm talking about the whole `_getDerivationIndexes` function
I have followed the convention of `cp`
A repository has many badges so we should also add type column in scope.
Why did you not add the signals to the call of block_all_signals_except() and instead baked them into the function? Ok, if you had a good reason for it, otherwise I would add it to the except list of the function call, since that's what it was meant for.
Should this be in a bundle?
As this is already a child of `auth`, I think we can shorten this to `path`
Do we need to drop the remaining items from the batch? Otherwise we might end up with a dead loop. Add @CodeBlanch for awareness.
This seems different than what we do for corrupted request headers. I would like to determine the correct behavior and consolidate this logic.
Can we get a test with multiple directories as per the initial example?
if `checkStockNotEmpty` returns a reponse, you must return it or your script will continue its execution.
I think it should been in `SharedKernel` module.
"Este :attribute j est anexado." sounds better.
maybe should firstly check whether current tidb support `split table region`?
this shouldn't be beforeClickOn, but rather beforeSubmit? and added to WebDriverEventListener. Since submit does not synthesize the 'click' events, this isn't accurate.
I don't think the Internal API types need the json annotations. They are never serialised, right?
and -> or
Remind me why you are using CUDA vocabulary when naming these variables.
This approach would work only if there's a guarantee that the stream does not get freed before `establish_tunnel` is called, even though it _may_ enter CLOSE_WAIT state (at which point `stream->tunnel` is set to NULL). I do not think that assumption holds. Hence the alternate approach.
Why do we use the `winrm_nodes` variable here and not the string `"winrm_nodes"` as we were using before?
Early translation , should be logic-less
Why are we using `repr`?
Why this change? It will now only show on the bottom of the screen as white text, is it correct behaviour?
If the execute_task returns an `ExecutionResult`, the passing of a block would be unnecessary. Instead, the `ExecutionResult` could be presented to the user in some standardized way (iterating over the result of each node, etc.).
This was very confusing until I realized this might refer to the *bokeh* use of the word 'streaming'.
sorry, the default value for this field is no longer allowed?
nit: Can Linux-specific paths be moved to a conditionally-compiled file for Linux?
This is just `mol->atomNeightors()`, is it?
you don't need to create a enum for this, java allows you to switch on a string ;) (since java 7?)
How about YAML.load_file()
Why are we doing that change?
nit: a better name for this variable would be enableLogStats, but it's beyond the scope of your change.
Talking through this scenario with @srividyacb and she's wondering if there should also be a check of `(from_trunk && node_based_graph.GetEdgeData(eid).flags.road_classification.IsLinkClass())` as highways with trunk classifications can also have this scenario.
Can you also add this `"version"` tag to the CoreTags? Now that we're targeting the service/env/version trio
why does this suddenly need a config ref
This is an API change. Why was it made?
can you add `, echo: false` to the end of this as well. I don't think we need to echo this to the log. You might need to update the spec as well.
Just a thought, really. If it's a bug that can be probed for (and it can be - see Adrian's repro) then it could as well be a static initialization of a supplier of Deflater instances; if we probe for a buggy JVM, we return the wrapper. If we don't we return the Deflater. This way on non-affected JVMs nothing happens and if we do use the wrapper, we know the JVM is broken.
`testExecutionPb` is a global variable (from `gochecknoglobals`)
Just to clarify: I see that only the hive2 withZone object inspector is changed. Does that mean that the predicate pushdown problem only occurred on hive2?
I think "Don't replace variables ..." would be cleaner.
If the `MemoryBasedStorage` relies on a `self._bump_and_store_timestamp()`, then every child class will have to implement it. So it should not be prefixed with `_`. And should raise `NotImplementedError` etc. :)
Isn't the % 128 redundant here?
Not sure what this is. Bad merge?
This method is validating permission for hp flow. Can you please rename this method to convey the same?
Why this change (test name still says "must pass with metadata")?
probably better to use `wlr_seat_keyboard_end_grab()`.
instead of modifying 'Status' which impacts the state diagram, how about using some annotations on CVR? This can probably help for our upgrade as well. Is this possible? cc: @AmitKumarDas
Why are we removing it? Looks like useful info. Obviously, field names should change.
btw that's obviously out of scope of this PR but since i noticed this line here it reminded me a thing: on some systems i've noticed the font didn't had those characters, so it was just a square or empty space and sometimes they're just a bit shifted in position (if font doesn't have them and using from fallback font which have incompatible dimensions of characters) how do you think is it worth creating an issue to discuss/address it or it could just waste time on bikeshedding?
I would do `new BN(Interpreter.LOCKTIME_THRESHOLD)`
Umm... this isn't relevant to this PR
this class is permissioning so let's keep "Onchain" here
this should be on default-switch, uhm? else you will handle twice (c++ and lua). I'm just saying...
Let's manually create one extra whitespace line here (code_ += "")
Maybe maxRetryTimes should be bigger than 2. Return Max(maxRestryTime, 2)?
What will be logged when the `Input.Namespace` was not specified?
I'm not certain that `res`+`utl` isn't a thing.
Do we still need this?
This is an interesting way to do this. I like it. An alternative way to implement a multiple kind pattern was to have this return `AnyKind` and then have match perform an actual check to see if it matches.
Are we marking what the browser's accessibility tree says or what screen readers with those browsers say?
Perhaps note here that `--drive-use-created-date` takes precedence if both set?
We don't need to disable the flow controller here as in `StatefulWriter`s destructor?
It'd be nice to fix up existing configs with the change - that'd mean adding the option to `RENAMED_OPTIONS` in `config.py` and adding something like `_get_value_transformer({'true': '', 'false': '*'})` to `CHANGED_OPTIONS`. I think I never tried adding an option to both, but it should work.
Please remove this extra blank line.
This stat may fail, right? I think dag_file_exists does not actually check the file is there.
why not call `respond_to?("#{name}=")` from the `if` line?
Please update the license header in each source file. For more information see: #2697
Just curious, but how did you work out that Aleksey Sadovoy, Peter Vgner and Joseph Lee contributed to this file? Did you look at the repository history?
This seems like left-over debugging code. I think I fixed this to no longer be necessary, switching to UserControl for the designer.
Is it necessary to add the suffix `on_head`, because it belongs to` bbox_head`?
nit: "The current project does not have requested application"
Might as well use translate here, as @jcsteh suggested
This test is specifically checking behavior on sync I/O (note there are tests with Write in the name, and other tests with WriteAsync). Enable sync I/O here.
the cartTrait is not used anymore
These logs should probably use the `LOGTAG`
What does the `8` here represent? Can you give it a name?
I feel we should not fix this.
The `Transport::Config` objects don't serialize properly. We probably want to just turn them into hashes at this point.
To be consistent, these should go at the top between `DateTimeZone::listIdentifiers` and `SQLite3::createFunction`.
How about `null: false` on these two lines? Also `t.timestamps null: false`?
I think this should be a keyword-only argument, i.e. do `def add(self, url, title, *, toggle=False):` and adjust the caller to do `toggle=toggle`.
I see someone say SIGKILL can not be caught by process. The original code here about `SIGKILL` is useless?
Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)
.NET Framework: Fallback to `DD_INTEGRATIONS` if `DD_DOTNET_TRACER_HOME` was not set.
Also update line 2205 below
why not simply `paths = search_path_opts.LibrarySearchPaths` ?
I think this is somewhat definitive proof that this error exists in `core` rather than `native`. We are correctly resolving the `readPreference` in the previous line, but you are able to identify that eventually the command generated in `core` is not decorated with the passed `readPreference`. Did you try to solve this there already?
i know the ergonomics are a little nicer with map[string]bool, but I prefer map[string]struct{} for sets for a few reasons: 1 - optimized storage (not very relevant here) 2 - don't have to think about the conditions where the key exists in the map or if the value could somehow be false
Need an `if err == nil {break}` above this line so that we don't log/sleep if the retry succeeds.
You are comparing two signerIDs here, error message should be "Signers should match"
Why not TempDir?
I am not sure which one of these is considered idiomatic go... maybe @azdagron has an opinion here? /me prefers the verb since it's shorter. I guess I don't care _too_ much, but it would be good to get some general agreement so we are all following the same conventions
Shall we remove this variable at the end of UTScapy execution?
Does this need to be an ERB template?
I had some weird issues when importing ``from .. import util`` getting the wrong utilities, hence I did this.
Is it worth injecting the whole configuration object for just one setting? Would it be more generic to pass an $options array with the override_from in it? I'm not completely opposed to passing $config, but since we've avoided it so far, it seems like it would be cleaner to maintain that separation. Simply adding a getOptions method to the factory would make this a lot more readable.
nit: move this one down.
Here we also need to determine if gJobMgr has called the init function.
Just to clarify, should this be 'composite_root/root/' or 'composite_root/'?
how **to** deny
Would this mean that podMonitorSelectors suffer from the same issue if they are the only configuration set?
nit: I think this would be more readable as "Some language names contain Unicode characters".
do we have a way to avoid the string concats, if there is no username/password in the Uri? if (uri has UsernameInfo) { do what is done in this PR. } else { existing behavior. }
I'm not good at picking colors, if anyone else has a preference.
I think we need `#if !SILVERLIGHT` here and at the test.
nit: seems rather large.
How come we need ``Dimensioned`` in the top-level namespace?
this is a duplicate file of the one in demo-schema. please remove this file.
Why is this bounded between -30 and 30?
Again, we can also guard `g_host_hip_lock_arrays.atomic`, can't we?
The convention so far has been to require directly from the defining file (in this case `../../read_preference') . I think the concern has been mostly about the potential for circular dependency cycles
Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.
Please use the `assert` instead. Same below.
Who invited yoda?   In all seriousness though, wouldn't an `if (empty())` be better here?
Maybe we could update these to use $future and then check on stderr? that way when we deprecate stdout we can not have to delete tests.
nit: aspects are defined in `OperationBase`, should `defineAspects` live there as well?
Could you reduce this to one line and change the first argument to a single quoted backslash string? Perhaps we can add this as an option named `:preserve_backslash` to the manify method. That way, we don't need an extra method in the first two cases. Obviously, we still need it for the inline case.
Is there a reason why we wouldn't use this as the default?
Can we remove the argument from this message? A message will include a line number already that points to the place in the code that has the problem. I think we can remove it.
Recursive -> Recursively converted -> convert
Have not tested this yet, lets see if tests complain, but I suspect it should be as easy as this  
Most of the following test changes can be avoided if need be.
This is unused.
This const has already existed in the code, no need to define a new one
Should we break this up into a separate line?
Do we really need the param here? If only partial results returned, we could return ResultCode::PARTIAL_RESULTS;
sorry, why this change?
this need to be moved up after getting policy..
Why was this removed here (also in the other file)? Shouldn't we import them so that the reference in the docs below is interpreted correctly?
We shouldn't depend that url is `mysterium` - it can be just `testRequestURL`. Also, `URL` has to be upper-case.
This is actually matched with pandas's result since the output is sorted.
can you de-uglify at least this line?.. hard to tell what changed...
Technically it doesn't belong here; let me remove it.
Does that mean we disable service loop prevention for packet generated by local host?
These should be importing from `pill-container`
this one is unrelated right? (Don't mind including it, just making sure I understand)
Does this mean we can remove `raw` from `_head_contents` partial?
suggest to indicate the value range & meaning in docstring
I am very sorry that I neglected to resolve the conflict and did not fully unit test edge
Convention is to use TEST
I'm worried about we hide some important log here
Please remove the unused import of DBPDataSource.
Since this is private and single use it should be un-wrapped inside of the two-arg dagSeed method.
I'm not sure if this is the right thing to be doing here. It seems like there should be a more systemic fix instead of this patch.
Having 2 items with the same key (Mvx) won't work in a dictionary
I wonder if adding this new param in the middle of the param list might screw up some existing code that is depending on the old parameter order. Might be better to add it to the end of the parameter list?
Another nitpick: parens around the arg pretty please
More proof that this check is needed always.
These defines cause issues in base.h leading to failing android builds. Locale independency is now set in multiple spots, in cmake and in base.h. The base.h uses feature test macros wrong. Feature test macros can be used to indicate that a feature should be made available. They do not guarantee that it is available. On the cmake side this is done by the check symbol macros (similar to what autoconf does). On the android side not. I would suggest removing this from base.h and define locale independent in gradle. It is available since android 21 I believe. Is there a way in gradle to set locale independent only if android api >= 21?
Does this code fit on one line under 80 characters? It would be more consistent with our existing style.
what about making a `ProfilesController` or `UserProfilesController` and having this be a `show` action instead? That would be more Railsy (although that can be considered a compliment or a dis, depending on who you are :hamburger: )
Similar to `collate_fn`, we may rename it to `tpfp_fn`.
move all constants to `pkg/util/constants.go`, these constants had been used in `volume_stats.go` file too. So better to import them.
What's the advantage of doing it this way over, say, changing the `.circleci/config.yaml` to have `TRACE` as the `root.log.level`?
I wonder if it would it make sense to push the pivot facet handling down into `FilterField` (or maybe a subclass, `PivotFilterField`?)?
See above, we don't need to pass the module name here.
I like that we have this attribute here. However, I think the way we use it right now might be confusing in the future. For example, when only camunda admin is checked, this exception will be instantiated with a message and `missingAdminRole` is `false`. I think that is counter-intuitive. I would expect this exception to have `missingAdminRole` set to `true`. With this explicit information, the exception message could now be generated inside this exception class with the text block that is currently used in the authorization manager. We could maybe generally reuse that text block then also for the case where a user is no admin and also has none of the required permissions. I haven't tried it myself but I think it would be great if we could streamline those things a bit more if we're working on it now. Let me know what you think.  
this chain ID determines only from which chain to withdraw, therefore your changes do not accomplish what you want them to accomplish. You'll need changes to `func (aps *hermesPromiseSettler) Withdraw(chainID int64, providerID identity.Identity, hermesID, beneficiary common.Address) error`. The method probably has to include two chain ids: to and from. Currently, the method internally uses: `aps.config.L1ChainID` -> the chain to withdraw to `chainID` -> the chainID that was passed as the chain that the withdrawal is originating from.
The Email field is not translated into Russian, and into any other. It's kind of a "standard" word. Therefore, we may face the fact that you have to create files with exceptions for all languages. @caouecs, what do you say?
Our habit is to go ahead and put a description line (or more) in front of every function, not just non-test or exported functions.
@orklah are you sure it's the same as `$chars[$i]`? It looks like `$i` is changed above, after `$char` assignment.
Maybe just IEnumerable? Not sure myself.
Will need to think about this one. `additionalIngressRules` feels a bit opaque in terms of eventual outcome.
Please do not approve PRs without tests!!!!
see above - this is only used to select the correct view, we don't need to handle the boundary information here.
I suggest that we rely on `--controllers='*,gateway-shim'` for now, and we can then move from `--controllers='*,gateway-shim'` to automatically enabling the Gateway API support on startup using the discovery API in 1.6 or 1.7, what do you think? Note that the logic I wrote in e5436df521015057e77de3fe02c174ea8a863b93 should also use this `GatewaySolverEnabled` flag I think.
Audit log will not have a warning about they are using a deprecated path, is it something we must care about?
It seems that you only need to do this `checkExprDepth()` inside `deduceExprType()`. So you don't have to add this check everywhere.
move to line 18 below
Don't make it sealed
what is the justification for the removal of the registered label? it doesn't seem to have high cardinality nor is it redundant. Seems useful to shed insight into understand situations where workloads aren't registered....
I think this is a bad name, as its not clear what it does by name alone. If we merge this it should be something like `use_links_to_files_in_output` and should take either a custom scheme like `rspec` or default to `file`
this looks very weird
This might be very confusing. Maybe `resource-tags`? I
Is it called some where?
Seems a bit weird to add a timeout in "logging" middleware, but I see that that is done elsewhere, so fine.
Please check also whether `null` occurs in the rest of `beforeChangeResult` array.
Maybe use { } here like we are most other places now.
is this supposed to be `Desired`?
This sync can ensure that the condition of the child node is consistent with the parent node, but I still don't understand when the child will be overwritten, and this behavior is not what we expected?
Wouldn't it be better to use double quotes for the opening parenthesis ?
if its optional, move it to last item an use JsonRpcUrl? url = null
That part that still leaves me mystified is how the String class, when populated with a value from the SQL_ASCII encoded database is set to "UTF-8" encoding. Since the database is SQL_ASCII, each byte in the string stored in the database is considered one character. Ruby, however, is using UTF-8, which is writing a series of one-byte code points that are only meaningful when considered in the correct encoding. When Ruby passes a string to Postgresql, the code points are essentially "flattened" into bytes as they are written to the DB. When Rails (through Ruby) asks for a string from the DB, where does the information about the encoding come from?
already what? I know what, but seems like smth. is missing in this sentence
I would avoid importing `felix/ipsets` package because this package is the windows equivalent and should be at the same level of `felix/ipsets`. We could add linux specific dependencies into `felix/ipsets` later and it will break Windows build.
may users try to abuse it?
seems incorrect - for 5 validators it will tell that 3 is enough to seal and you need 4 2/3 * 5 is 3.3
We are trying to support IE 10-11, so we'll need a polyfill for this one, I think.
Need change it back?
would it not be safer to move this condition to the `addLink` method?
if using dict.get, this could just be `kwargs.get('protocol', 'https')`
So this will only be executed when it is true. I'm not sure that makes it always usable. Why not make the afterAction, `Action<bool>` and always call it, with the result as parameter.
same as above, can this be null now?
Might be cheaper to reuse the `null` assignment of line 313 and set `isHydrating` to null instead WDYT?
I think this is a useful InfoLevel message. In production, if webhook client connections suddenly start failing due to change of serving cert, you'd want to see this information in the logs.
Shouldn't we have a low bar for generating out-of-line context switch, i.e., if we need save more than n (3?) simd or m (4) gprs we should go out-of-line? And it should be || instead &&. It seems the bar is still very high after this change.
Is the `cascade` necessary? It should work also without the casdade, because Payments are always already persisted when use cases with them. If it doesn't work, please tell me the reason. It is as same in Transport.
line is 165 characters
Ack, @chrisdunelm snuck this class extension past me. This is not a pattern I want to have used...
Hmm, this feels hacky. Maybe good enough if it makes the test more stable, but why is timing even an aspect here, since below it should wait for these two things anyway?
It's not printing the range. Also I think it's useful to print a warning above stating that the minimum change is -1000.
Does it make sense for this to be fatal? Could there be an embedded application that does not have xcursor themes at all? For instance, compositors without a pointer (like a touch-screen kiosk) will never show a cursor. I think I'm ok with this assumption since it simplifies the code and rootston is assumed to have desktop features, but we should always make sure xcursor is not required to be used in the library.
It seems like we have the main plan in the database but the downgrade plan in the code. Probably okay for now, but as our thinking of how downgrades/plans develops we may want to consolidate.
Maybe 'failed' instead of 'missing'. Also do we really need to write ticket numbers here?
So what happens if I try to get code on a EOA?
the CAS call here is now wrong since dirty will never be 3 anymore. it might be useful to sweep through the entire usage of this field to see that everything is correct
Why did you remove this line?
Why do we have to change the test dir?
Shouldn't the global pull secret by in the namespace of the hive-operator? It is part of the operand.
Could we rename this method to `updateKnownStatus` ?
PGP_INLINE is clearer IMHO
@angmas1 just make one more change here too. Move the else line to the line above it, where the if block ends and remove the braces like in line 280.
These variables are already created in constants. Please reuse those.
Why not use `msg` directly below?
Did you mean to return here? ;) You'll also need to add an `incomplete` message to the rule metadata.
When the argument list is `["one", "two three"]` then you concatenate it as you do it here, you won't be able to get the original list back with split. You need to annotate the list items better. (Or if you won't do the split by yourself, the called shell will do it. So you need shell escaping. How portable is that?) The main driver to change this in `intercept-build` was to get rid of these concatenation and splitting errors. The current compilation database parser in Clang understands the `arguments` filed... So the question, why don't you pass the command around as a list instead of a string?
It seems like we should leave `notice` here since it can be configured in Bolt config files, and that's what sets the console config for messages from Puppet. For example, this will break plans that call `notice()` in their apply blocks.
not dramatic, but why 32bits if we allow a range that is smaller than 8?
Instead of importing `golang.org/x/net/context` The SDK should use `aws.BackgroundContext()` instead of `context.Background()`
Out of curiosity, why is this needed? Does it enforce what class can be assigned?
`bool` vs `BOOL` in native side :)
@JaeseungYeom I believe you had set this in a previous commit to, by default, not train model1 when loading from ckpt. Would it work for you to have this as a command line option `--no_model1_train` instead of the default behavior?
Files should have an extra line at the end of them.
Should we use `\DateTimeInterface` or `DateTimeInterface` and declaration of `DateTimeInterface` in `use`?
I prefer not to have markdown here, while it is nice for the site this is also shown for `kubectl explain` where this will look weird
Why do you need that? (real question)
shouldn't the import be renamed `crdv1alpha1` by convention? It seems that you took care of renaming everywhere else...
Put a comma after the last parameter of a multiline method call.
TODO: in fact At when used with noncurrent time should not return a next index. only latest should..
We should probably require an increased verbosity to output for anything below the cluster itself to avoid spamming the logs. It would also be good to give additional context as to what we are attempting to reconcile since the controller has multiple workers.
CI is failing saying `expected [TypeError: null is not an object (evaluating 'implicitNodes(role).map')] to equal null`.
Please hide this behind a flag and add a setter function to the builder.
Is this PR implementing compute service account for OVF import as well? I thought it's only image/one-step import? Btw, OVF importer uses "-" instead of "_" in flags (should be `compute-service-account`).
Hi @myml, thanks for the contribution! `blob` and `blob/driver` are both in the same module, so you shouldn't need to split this change up into multiple Pull Requests. Also, I'd like to see it working, including the implementation for `s3blob` and `gcsblob` (these should be easy, just pass-through to the provider) and `fileblob` (might be trickier...), and a test in `drivertest/drivertest.go`.
You should just use `with patch(...):`, so it unpatches it automatically. Also, much simpler.
Sorry I might have missed some context, but what's the reason you choose `Period` over `Duration` or `Interval`? (Thumbs up for using `org.joda.time` instead!)
Adding a warning or an error in the Thelia log would be a nice idea.
Put this higher in the list, like after "bind", since I guess we're considering the max request body size to be kind of a native/fundamental feature, built directly into the vhosts.
Good catch! But is it guaranteed that `old_size < new_size` here? If not, wouldn't we want to take `min(old_size, new_size)` as the copy length?
"memory pressure could be decreased" --> "to avoid memory pressure"
This is an unrelated change, but was failing CI... probably introduced in master.
Consider instead moving this into an _test file so it's public but only usable in tests.
I think this mutex is only used here. Remove it.
What's the benefit of having jobExecutorTests as a member variable? What do you think about making the method static? Afterall, it is a stateless method.
minor: I'd add a space between `,` & `'paginggroup'`.
according to the PR (schema changes?) these 2 field should be removed?
Remove this line by accident?
@aokolnychyi, shouldn't this check whether the operation is a delete? If this is invoked by `DELETE FROM` then we don't need to validate conflicting deletes.
We should pick this across for all our deprecation specs
can we make this something more descriptive? like... types should compile? I'm still not sure exactly what this is testing... this says "Exported types" - but what does tsd actually look at?
It feels like this dependency should not be here. Some deep internal openvpn package (middleware) knows about one of possible stats consumers. Maybe as an alternative, statistics and state callbacks can be extracted as separate interfaces in top openvpn package and reused by both sides
minor: please rename all occurrences of `A` to `T`. please also rename `v` to `value`.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
i think you have to regen the api stuff, `make generate`
Tests for JWT handler functionality?
You somehow got a change from `master` into your branch again, in e6d2167085688264e5ee6a81cfd2a7a8f10ded13. While it's not something terribly bad (as it will be fine after merging), it's kind of confusing, and I have no idea how it happens :laughing: Are you trying to update changes from `master` while working on your branch somehow? How do you do that?
n_: It is a good practice to name the variable to indicate what they contain. In this case since `shared` is supposed to have boolean, calling it: `isShared` can help in the readability of the code.
Error return value of `dao.Stop` is not checked (from `errcheck`)
These were inverted before
just realised... This breaks things since there is not selenium types module, is there a PR for this?
Do we not need this in Java because Java *is* handling map responses?
At this point, maybe it would make more sense to write this as a range rather than listing specific versions?
format.h is not a system header but bundled with LAMMPS. This should be `#include "fmt/format.h"`
and is it possible that mset.mirror.msgs be nil? because if so, then you would get a panic also because of that.
@cijothomas I couldn't make the unit tests work without a way to destroy the ActivityListener we create internally so I return it as an IDisposable here. But we'll also need to also stop any ActivityProcessors/ActivityExporters on application shutdown right?
Why? I thought the previous way was idiomatic. (Same with the `MetadataVer` stuff above.)
`localsecrets` should be updated in the same way.
@janos I moved this back here, to avoid having multiple add peer calls being handled. I think it's either this or a global lock across the whole function. I think this is a better approach, especially since `hive.Broadcast` is blocking . We can remove the map entry on errors if needed. LMKWYT?
Are you suggesting deleting the concept of message querying from plumbing (sounds like more trouble than its worth) or suggesting deleting the snapshot based implementation?
those change are done by save plugin.
Should this be `codes.Error`? `codes.Internal` was an error status before.
I think, we should fix/improve AbstractRuleSetFactoryTest. I guess, both apex and visualforce rules are now tested, which is unnecessary.
maybe we will have something like `Bodies []byte("bodies")` instead of them being a number? with numbers we are making it harder to insert stages mid-process.
revert this file change
I think we should move those util functions that work with drag-drop to @uppy/utils, so they can be shared (maybe later) with drag-drop plugin? Otherwise it will continue to depend on drag-drop module.
this looks like it may be something that needs additional refactoring
This is incomplete I think (at least source_address and ip_address are missing)
Please remove the unused imports :)
Change this to Debug Level
@naofum please use `isEmpty`method instead
Why do we need to make this optional? Isn't the idea of the builder that if you don't need this value you just don't call the `keyFilePath ` method?
not related to this change?
In the future, do not remove these trailing commas as they have the purpose of making append-diffs easier to read. :)
@chengren311 : where does this logic move to?
Probably in another PR, I think the package should be renamed to `servicebus` to be consistent.
Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?
Does everything on cursorState belong in the command options?
how about moving it under L26
Line is too long. [87/80]
Needs xml docs. The API names alone don't provide enough explanation about what these mean and how to set them. Also, we should provide some validation of inputs, such as MaxTime must be > MinTime, MinimumRate must be >= 0, etc. Consider making the properties readonly and adding a constructor that does these validations.
An ENV should be used? Are you sure that the Vue examples are built in the production mode?
Is there a reason not to do something like `if _, ok := doNotUnref[ptr.ID]; ok { return ops }` here?
We could pass `excessDomChildren` to `options._catchError` and only do this if an error-boundary catches the error. Not entirely sure if that's better.
nit: Is this error message accurate?
Waiting for the pull takes a long time. This message informs the user that at least one of the images being pulled is available. Please leave.
s/object content/blob object/ (for consistency with the `Size` docs)
Please follow the naming convention for variables, i.e. `windowText`.
typo: `asmsecrets "github...`
maybe we should keep one test case for ErrFileNotExists and update only one file for ErrWorkspaceNotFound?
Still request a local sort for bin-packing based on the defined table sort order.
Can we remove this other line now then?
Will this mess up parsing the messages by other editors? (vscode, vim ...)
No need to check return value?
Do we need these changes? If so, can you tidy up the messages? Looks like it might have been your testing/debugging changes  
G204: Subprocess launching should be audited (from `gosec`)
Are you using an automated tool for sorting the imports?
This isn't critical for test coverage, but it seemed off that we had disabled wrapping the reader.
Should we mention TLS map here?
_base_ = 'retinanet_pvt-t_fpn_1x_coco.py'
Why this is needed?
I like the general idea, but this will break: - JSON is not binary-safe, so anything binary will break this. - JSON is super slow for multiple-MB things - We want to have drag-and-drop upload - the easiest way to implement this is FormData upload, so we should have a multipart/formdata endpoint. Can we put to /flow/content?
Would this break things if Ghost is run in a subdirectory or no?
I wonder if the version should be part of the deprecation API. It might ease our future selves while debugging issues =)
Let's add some assertions here to ensure we don't panic. Length of results. Conditionally cast second result to error.
Add newline at end of file
you could probably remove keyValue and just compare idx vs ann.length (ex I think the goal here is to ensure it works with a value like `foo=`
Rather than this maybe `Text.sanitize` would be better here
this file can be removed
Nit: I would leave `Wire` out of the description; if you use this without wire you can still use it.
Dont need to cast `string` -> `string`
NULL change, could you move that out too?
I think we can just change this to `Split` instead of `SplitN`. I don't think we need to limit the number of parts in the tag.
Suggestion: `.. the CertificateRequest is ready for signing` - could we perhaps word this differently? I understand that in this case it will be the associated X.509 certificate that can now be signed, so maybe `the certificate is ready for signing` ? (Same with `CertificateRequestReasonDenied`).
Definitely not required, but it would be better if you had a constexpr for `"INPUT_DUMMY"`
`image_tag` in the `testimonials` files?
Looks like I was wrong about the sync cache size being 15% before. There seems to be some reporting bug related to my use of the sync cache, that makes the limit different from the working set cache limit. For now, I say we keep this at `0.10` (change the param default too), and we can change it later if needed.
Please alpha sort these filenames.
Weird they don't expose the type for dynamo and this seems a pretty common error.
How soon after this will Apply() be called? It would be a shame if there was still a significant delay before a missing or superfluous route was corrected.
Shouldn't this be called `hp` instead of `life`?
I this used anyplace?
Do we not already have something for isolating syntax?
To keep it simple, how would you feel about just using r.RemoteAddr? Since every request comes through here I want it to be as lean as possible. Frankly I'm OK with the port showing up in the log; maybe it'd even be useful to someone.
`setFlags()` overwrites the previous flag, we should be using `addFlags()` to append flags.
`NotFound` is a generic error code derived from the HTTP response message's status code, and can be returned for any S3 operation that responds with a 404 status code and no other error code present. Due to this the constant `ErrCodeBucketNotFound`. In addition, these constants are generated based on the API model defined by Amazon S3, modifications to the file directly will be lost during regeneration of the API. With that said, we are looking at ways to work with the Amazon S3 team to better represent this error in a way that is more easily consumed.
What is the purpose of this debug message? I'm not sure how it would help.
Didn't we extract this logic to a `react-features` helper?
Is this the correct place for this assert? Does this routine rely on it being 64, or was this only for testing?
do we need to add this one in this PR?
/DispatcherStatistics ? /statistics is a bit confusing with /stats
Is it possible for opt not to be a string? I couldn't tell if this was a typo or if there is actually a case where it is not a string.
move them to internal group of imports
Is this TODO still valid? Or are we going to put this somewhere else later?
Please update the user guide too.
*NULL_DEREFERENCE:* object `null` is dereferenced by call to `meterSupplier(...)` at line 122.
what is potential use for current scope? It seems you'd only want it to stop it. But if you get current scope you never know if it's yours to stop - i.e. this is not safe or correct to stop current scope. So I wonder should we even try to expose it?
`assert not in`
Nit: unified names between geth and contracts
good catch, thanks. This is going to make the user experience much better.
The deploy should come before template? EDIT: I see that in other files, we put a separate line and put deploy at the end. What is the reason for this?
consumerMeta only belongs to this invoker instance only relate to this one consumerIntf class seems no need to build a complex key?
I think that a single `Get` method would be preferable, that would have the following parameters: Get(addr basics.Address, withPendingRewards bool, cidx basics.CreatableIndex, ctype basics.CreatableType) where we ignore cidx of -1, and adding support for ctype of "AssetParams" or something like that. (i.e. so that this Get call would be good for asset holding/asset params and applications )
+1 for creating this script to help people get boot strapped
Can you explain this too? This seems to go beyond linting.
NULL check should be before this line
This should remain as `ListServices`
this file is autogenerated. you should edit `model/api/api-2.json` and then go generate this file. otherwise the next people generating api.go will remove the changes you added here
Line is too long. [82/80]
Why do we need both `HPX::m_hpx_initialized` and `HPX:: m_was_initialized`?
What happened to the assertion on `conf.TaskCPUMemLimit`?
Typical to report the value found as well as the valid bounds.
should we assert for the type for `FeatureGroupData` ? I think it should be 1-Byte type.
question: can we always get the startts from dagrequest?
Do we need to test the redirection?
so this attribute is used as u8 in code, but saves as int32? Why?
we can replace `for` with `params.update(response_headers)`
We chose `info` in the test code for obvious reasons. Changing to `finest` makes debugging harder and noisier.
Put a comma after the last parameter of a multiline method call.
Moving this code inside the last case statement doesn't seem right. Why are we defining `name` and `is_relative` variables there if we aren't using them anywhere?
you can directly call show() method from **SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in)).show();** no need to create an extra object and then call the show method.
Is this the right place to do the validation? If a user adds a bad property or performs some schema update that causes a validation error, that would break all writes to the table. To me, it doesn't seem like we are catching the problem early enough and possibly allowing a typo to break scheduled jobs. What do you think about adding this validation when altering the table? `UpdateProperties` could check whether any properties starting with `write.metadata.metrics` were modified and run this. Similarly, `UpdateSchema` could run this as well, although I think that we should probably modify `UpdateSchema` to simply update the properties for column renames (if that's easily done).
Let's leave a note in CHANGES to replace this with an error metadata struct or interface, unless it would be less effort overall to take a run at it in this change.
I would throw an exception if the type is not solved
Not sure if it's an issue, but this is a breaking change in a public API. Maybe we should add as an overload without optional parameter instead and delegate the existing call to this one?
I think that this should be a POST method, as it changes the state. Get requests should not change the state. With different method, I would suggest to have the handler under `"/settlements/{peer}"` path.
Isn't this the same check as two lines above?
File is not `goimports`-ed (from `goimports`)
roundInfo() is called by couple of places in consensus for safety, better test/verify the delay of return err due to this Sleep() would not affect the normal functionality, like consensus can still be reached, full-node can correctly sync
extra brownie points ( overall solution ): we've currently triple-encoding the payset - 1. we encode it to calculate the block size. 2. we encode it to calculate the commit hash ( either via flat, or as Merkle tree ). 3. we encode it as a whole for the purpose of preparing the proposal ( I know that this isn't always the case, but this case happens to be on the critical path ). Caching the encoded data of the *first* block could help us repeating the process.
These should all call `findUpVirtual`.
@Samuell1 Will assigning the same icons array to all the tabs result in, for example, a primary tab called "Colours" and secondary tab called "Colours" having the same icon?
This error was unused
I tested it only in Firefox (`./go //rb:firefox-test`)
The string "DVN_3_0" appears in `if (!SOURCE_DVN_3_0.equals(xmlr.getAttributeValue(null, "source"))) {` in ImportDDIServiceBean. It's not an exact match so I don't *think* this will break dataset import from DDI but I thought I'd at least mention it.
Are we removing this public method? Could it be useful to someone? Maybe we could implement it once in Node using the metamodel
I am not sure what GitHub wants to tell me with this icon here :)
Since this is a config problem, BAD_REQUEST is probably not the right response.
I don't see a corresponding call to freeSelectorSet... am I missing something?
I would find it pretty reasonable to add a MinerSigner method on the state view that puts these together.
The name "Without" in code is a little nebulous. Maybe something more descriptive like TrimPrefix or StripPrefix or WithoutPathPrefix or something like that. (Thoughts?)
Glad we fixed this as well. Blockly is going to be left as-is for this case, right?
util.Warning()? Easier to say.
Why not just check the backdrop setting here as well for the time being? We can combine the code later but at least then it would be configurable if people like the backgrounds.
Looks like this file has tabs instead of spaces.
wut. We can do this at the beginning of tests if we want right? Why are we depending on init?
Why did this value change?
DO we want to have >= here? Or ==
Any specific reason for this change? klog should work correctly here.
not needed, ADIOS2 also needs to check for subfiles. ADIOS2 tries to remove dependency on serial `fstream`.
@danieldietrich let's leave existing extension. Here we just mark `keyComparator()` with `@Deprecated` annotation
Is this change implying something or just seems fit b/c regardless of outcome the sessions should still be length 1?
Good catch, and if we don't declare the newSchedule here, will the last schedule be executed in multi goroutine?
This should be `return (ev->flags == ASIO_DISPOSABLE);` because `ASIO_DISPOSABLE` has a value of `0` as defined in the enum in `asio.h` and because when `ev->flags` is assigned `ASIO_DISPOSABLE` it is assigned as `ev->flags = ASIO_DISPOSABLE` unsetting any other flags previously assigned.
This doesn't look right. I think what you want here is `\\[([^\\]]+)\\]\\[[A-Za-z_][A-Za-z_.0-9]*]*\\]`.
`fi` is what the result of Stat is called elsewhere in this file not `finfo`
Since this is only counting the failed attempts, can you call it failedAttemptsCount or retryCount instead of attemptsCount?
As far as I can tell, there's nothing that creates an instance of `Random` or that calls `rand` or `seed`. Am I missing it? If not, let's remove the `Random` class since we don't really need it and we can move the definitions of `shuffle` into `RSpec::Core::Ordering`. One less type :).
Unrelated test fix. Already in cordova34 branch.
Please use something like html.escape() to ensure that the text is totally safe to include within html. &lt; is not enough.
I think this is now going to fail the scenario where there is a `main` with aria-hidden="true". I don't think that should fail.
I'd say "cgroup2 hybrid path" instead.
I think Rails complains about the `null: false` part if we ever decide to roll this migration back. Might need to split this up into separate `up/down` methods to handle that.
How about `write.metadata.previous-versions-max`? No need to refer to these as a log.
Something I didn't catch before I merged this PR, is the hyphenated constant a problem? E.g. should "data-lists" be "data_lists"? @paulkaplan
You did notice the no newline at the end of this file, right?
is this for everything, or just legacy?
since the logic here and in `Proposal` is exactly the same, do you think it makes sense for us to include it elsewhere? I am not opposed to duplicated code when it makes sense, but the reason I first identified this was that I was looking for code in NCR::WorkOrder that was not specific to Work Orders. Seems like fiscal year logic might be helpful for reporting for other clients. In that case, we'd want this scope on those client data classes as well. Might be wrong to include this in the FiscalYear mixin, but it does seem like it should be outside of Proposal and WorkOrder. Does that make sense?
This can also be removed.
If you do go this route, I think it would be worth adding a note here that IE 11 is the only reason why we're not using the more obvious `node.remove()`.
We generally use metadata for this sort of thing, indeed there is a `metadata[:execution_result]`.
Prefer a human-readable string rather than querying specific technologies. How would I indicate a session is running on BrowserStack? Or some custom thing?
id is unsigned  
move this above the "Constants" as this is 3rd party ones
Do we need indices for this table?
why. is this called per request? if so this also adds a lock internally. can we not add this at the moment until analyzed as this assumption isnt carried to the several other impls. the only other consumer of this is the http api and that isnt hit often enough for specializations.
This is duplicated with `+build !cgo`?
This can probably be removed?
This should have failed before.
Can we log if this actually happens.
Mongo is a hard dependency for Mongoid. Why do we need an if-statement to if it's defined? We should always use Mongo::QueryCache
we should sort the headers like in spark: public packages, then pyspark, then internal
Why we need to use recursive_mutex here?
How about `SPARK_DEFAULT_SERIES_NAME`?
@smcnulty-sfdc We do want to finish the hybrid activity in our hybrid apps though. Could the caller not pass in `frontActivity` instead? Or start it up again post-logout?
No need for a separate variable here - just call `utils.read_file` directly below.
Copy and paste error here. Edit: Also missing commas here and in other Perl croaks between some parameters and not others.
out of curiosity, with IPv6 introduced, why there's no change to the expected output of openflow in the test?
This is so useful and safety, I want to propose making AppendBool, AppendInt, etc. all private functions, and forcing us to use AppendValue(j, values.New(false)), etc.
Freeze mutable objects assigned to constants.
I'm starting too feel we have too much abstraction and too many interfaces here. But this method is definitely the most confusing IMO. For one, it's called "Get*" but it does not return anything... I don't have a good understanding of what's going on anymore, so it's hard for me to suggest an alternative, but it's pretty clear to me that this interface needs to be rethought. An interface where all the parameters are themselves arbitrary objects (`interface{}`), whose actual type depends on the specific interface implementation, is not a helpful abstraction
The changes in this file look unnecessary since `rpccontext.AuditRPCWithTypesStatus()` already does this check. Was there a reason you needed to add them?
Why is IsolationLevel fully qualified? System.Data is already in scope? What do I miss?
`readActiveBlockProducersByHeightTests` is a global variable (from `gochecknoglobals`)
What do you think of a name like azkaban.server.logging.kafka.brokerList? This way the name signals that this is a server config.
can you add numbers with this change? the CLI is a javascript engine and it can worh number - java adds strings vi concatenation
This class is very similar to `Catalog`. Is there a way to have this class compose a `Catalog` instance or extract a common class which they can both compose?
@Marwes @wolffcm This is the file where I made a change the the expected output. Its a little bit weird, but I think that the final output makes sense for the most part.
We should file a bug for this - we don't need the extensions class if there are no operations on the client
Talking about style, IMO extracting either `getComponent()` or `getPubDate()` to variables would make this line easier to read.
Why the space?
Let's go ahead and change "Site" to "Project", since that's the path we've chosen. One less thing to alter in the other issue.
I'm confusied - Isn't `countryString` left empty if `len(country)` != 0?
@CoderZhi Please confirm if this change makes sense
Perhaps show attempt x of y in message ie: Failed to download block %d (attempt %d of %d). %v
Might want to add that this only happens if you have write permissions to the folder.
`ctx` is unused in GenerateAPIKey
This change may be hiding more errors, if we continue to see more.
Could we rename those to `CustomClientAuthentication` (same for Router) to remove ambiguity between Authentication and Authorization (permissions)?
Might be good to test that no emails were sent out, either. You should be able to use `deliveries` for this
i think haspk is false?
Should we convert the entity name to snake case using `Doctrine\Common\Inflector\Inflector::tableize` or similar ? Should a `snaked_name` or whatever be part of the entity metadata in order to use it for form names, ids, & other html attributes ?
Can't you just add `SelectSubscriptionActivity` directly to the manifest instead of opening `MainActivity` that then starts it?
I am afraid this is going to cause problems on Windows where it is not uncommon to have injected threads (CTRL_SHUTDOWN, CTRL_LOGOFF, etc.) we have no privileges to suspend -- and thus retrying will just fail again, and with the new "synchall failure is fatal and should kill the process" approach it turns what used to work for us on Windows into process death.
This looks good to me. Personally, I would have the following for maximum flexibility: * convert peering_port from uint64_t to int. * Set the default value to "-1" to specify the value is not set * if the value is -1 then do `config.node.peering_port = network_params.network.default_node_port` That would allow for 0 to mean, select the port number yourself and be more consistent. But I am happy with the change as is, as well.
The previous version didn't use `keyProjection` because the entire key must be projected. If the key is a struct of multiple columns, then projecting a subset of those columns can easily introduce key collisions that aren't in the original data.
these change means we are changing epoch to 1 hour?
Put on top of the import.
I don't understand this change
I was actually looking at this code over the weekend and wondering whether we were trying to link here. I assume it's been cargo culted from something else in the compiler.
Wouldn't it be better to use a sql `IN ( :exact_value )` ?
the buckets are created via the stackset, customers don't need to provide them
Try to use factory association declaration for default values, so it could minimal the line length. You may write in fetch_job factory like association :repository, factory: :repository.
This seems reversed... if `success?` is true, wouldn't we use `success`?
When does 'expiresAt' change? Do you need this?
nit, does it make sense to get this variables outside the func where they are used?
Since this may be the case, wondering if we should call the param `updated_at_i` or something so that we don't run into a problem distinguishing them down the road?
It feels like this will break some stuff, but let it break. We need "text" version anyway.
Does this need to be public? The only reference to `FlinkTypeVisitor` that I see in this PR is here, so I'm not sure why this is needed.
"Request line" here too.
This will make other pods that run antctl will also connect its localhost? Maybe only do it when it's in antrea-agent and antrea-controller
Can you link to the GitHub issue and/or PR so that it is easy for future readers to find out more about this?
Think you need to keep `RawWrite` around as obsolete until NLog6 (Property that just assigns `ForceTraceWriteLine`)
this seems extraneous.
nit: sort alphabetically.
Can you put spaces after the `{`and before the `}`
Why aggregator should have this translator? It's Selenium specifics for now...
can this one also be moved to the top of the file?
Our habit is to go ahead and put a description line (or more) in front of every function, not just non-test or exported functions.
I would use static_cast<label_t>(0) and static_cast<label_T>(m_num_labels) just in case.
Does anyone still use the cst out of this method? If not consider deleting
This piece isn't backwards compatible, but it's enough of an edge case that I think it's unlikely to be a problem.
How about `Object.prototype.toString`? Or using the `typeof` operator?
Does it make sense to just fold these options back into the exporter options? My thinking is that this option is unlike the processor/metric reader options in that it actually is about the exporter itself.
nitpick: `required_subject` doesn't seem to be used here
`HostDataDir` is misleading. Can we rename it to something more relevant ? The constant should also be moved up and reused as necessary.
I realised that this is not used anywhere
We can re-use the config in our tests.
So now we are checking twice, both here and in `weaveCIDRsFromConfig`. Not great. I suggest changing the `ok` return of `weaveCIDRsFromConfig` to a messsage (or error?) instead, which we can then log.
Do we need to distinguish between these two processes? I'm thinking maybe we can have a list of processes and treat them all equally.
the done channel only aims to be closed, so `chan struct{}` is better then `chan interface{}`
Do not understand why this needed for table. All new classes defined in the `preview` namespace.
Should we remove the key-value pair entirely? Same for workflows in general. We have a "sourceExists" method that checks if a key is there if I remember correctly.
Why do we need RawTransactions?
I'm surprised we didn't go with something like `flow := f.Flow.Copy()` to take care of all the fields at once, but as long as it works it's good enough for me
This field is not needed.
Same change just above?
Shouldn't we use `:branchname` here? Or just `:branch`?
Same, remove the error handling.
These whitespace only changes make it very difficult to review this change. Is there any way you could separate just the code changes into one PR and the whitespace only fixes into another? Or are they sufficiently merged together at this point? Chrome is having a real tough time rendering these large diffs.
Did we not use this field @_@
I think we can leave this import and use non FQNs in the code.
Looks like `org.json.*` can be removed?
Add names to tuple elements ValueTask<(Keccak? Hash, AddTxResult? AddResult)>, should they both be nullable?
Do you now why is it a specific table name is used as a default?
I'm not sure this naming is a good idea; that's the format for macOS xattr metadata files on unsupported filesystems.
Spotless is configured to reject star imports. Please replace with explicit imports.
Would it make sense to create an empty file here, perhaps in a tmp dir, instead of checking empty files into Git?
these urls are still in `a` tags so we should probably include these links separately for a non-HTML version
Why do you need to specify the kinto prefix here?
This is invalid syntax on 1.8.
`warn_with` prefixes the message with `WARNING:`, right? So this will put `WARNING:` twice. It would be good to verify all the warnings look good after this change, given how easy it is to make a simple mistake like this :(.
DB is implemented in PR 951
commit message, "currently ignored"? (-ed)
Can we remove this file?
The reason a `ByteCount` is used here, is that the H2 mapping in gQUIC requires this layer violation, which is why `CloseRemote` is not part of the public API. This layer violation will be resolved in IETF QUIC
Can you catch a more specific exception here? Thanks :-)
This was an out-of-date dupe of the check on line 335
FYI @lucaspimentel and @colin-higgins since you have already approved, I wanted to point out this required change. By fixing `FrameworkDescription` to use the correct logger, it created a cycle between these two static constructors, so I'm removing this log line and delaying it to when it's actually constructed later in the Tracer. Let me know if you find that acceptable or have any suggestions.
Blocking: we still want read write separation. Node functions should absolutely not write to the chain store and the interface should reflect that. Only the syncer should have this capability in production code. It should be no problem to keep casting chainForTest to a read-write interface, or doing other function decomposition and automatic casting tricks.
could you please explain a bit where these numbers come from? for example: why is there no `swarm.EncryptedSectionSize`?
Put a space between `(array)` and `$this` and I'll merge it
Think it's worth extracting this to `Exercise#complete?`?
Would it not be more sensible just to move setting of the title to later in the method rather than duplicating it here?
This expected value should probably be what you literally expect, otherwise there's a chance getClusterRegion is doing something wrong and the test wouldn't catch it because it's being run for both expected and actual.
We do this in lots of places I'm starting to notice...typically you'd avoid taking concrete dependencies, but we also avoid package dependencies as well which makes sense (i.e. not using an IoC, etc.). Any reason we don't implement some form of poor-man's DI and/or a simple factory instead of new-ing things up everywhere. This may be a simple example (as I'm guessing this is likely the only place this is ever or ever will be used), but separating them doesn't take any more time/effort either really.
Did you measure the performance with and without this option. Do we want to export fixits even if the `clang-apply-replacements` tool is not available in the user's PATH?
Agree that exporting these maps is the best tradeoff, just registering my ongoing discontent with the lack of `const` collections.
I think replacing `.*` with `\s*` from after the hash makes sense, but not the rest of the changes.
nit: @sonofachamp pointed out to me that the idiomatic way is "archermocks" (lowercase for package names)
Please add this to IMvxMainThreadDispatcher as well
Modifications are also needed for PolygonMask.
Should be a space between line
debug? I suspect this will be removed before merge?
Add blank line below license header.
I don't think this belongs here. If the application can take a local_ip as input, the application should take care of it, not in this common library
Where will this exception get caught ?
why isn't rubocop failing for single quotes?
Am I right in thinking this completely avoids the situation where `enable_calltarget_state_by_ref` is `true`, but the managed integrations don't expect a by ref argument? For example, if there's an exception here, that seems like a fatal problem, as we would have a mismatch for jit rewriting? We should disable instrumentation entirely in that case shouldn't we? i.e. if this (or the existing `EnableByRefInstrumentation`) calls fail, should we bail out of this method entirely as we can't safely instrument?
This is the common way of dealing with optional dependencies
We could also test this easily with `runpy.run_module`, what do you think?
Guessing this locates the key you get when you run `gcloud auth application-default login`? What was the previous behavior/the behavior for the manual Veneer creds?
Don't need () if only one.
Do we need `==` for true?
We should add write inheritance too.
Generally, we do not use newlines between project imports, we only separate them from the stdlib imports
And again. The reason it's bad is that if someone uses a JDK not produced by Oracle they won't have this class.
So the request.Headers is a map of []string. Are you sure that the HTTP library doesn't already do this split for us?
Update to real tag before pull.
Oh, was that a bug in the validation?
Should this tag addition for generated files be handled explicitly in `private/model/cli/gen-api/main.go`
We know debug and trace as globals exist and are defaulted to 0. In this instance we need to know that c is non- nil, srv is non-nil and logging is non-nil before we can trust this statement not to panic.
The `rowPosition` will be ignored if the position column is not projected.
`Intermediates` or `Intermediate`
We could put this implementation in `RTPSWriter::create_change_pool` and avoid an extra function.
Its this golint or govet stuff?
How about `column_index_names`? `column_names` sounds ambiguous.
I'd make this a `throw new NullPointerException("registry == null");` instead
No line at end of file warning
`!FormatIsMultiplane(image_format)` will always be true at this point due to the test on line 4639.
assume the user will be able to register for a custom service name in future?
Please remove this line to comply with the standard for copyright headers.
This can be combined to 1 line, just tested, seems to work.
You may want to use assertNull
Let's maybe be nice and `unlinkat()` here in the interest of having `/run` be less littered. Or in addition/alternatively, make the file `/run/ostree/initramfs-mount-var` since we already made `/run/ostree/` for the deployment staging bits.
please resolve the extra indentation
!numbers -> numbers
can't these just use the global `include` and `exclude` flags?
As an alternative to this, we could also create a new method, like `Common() *AppManifest` This way we don't have to add a new method to the interface everytime we add a new field to the `AppManifest`. This is a nit though so it's up to you.
Could we keep this as a static reference (JsonPrinter.jsonAsDatasetDto(releasedVersion); and perhaps change the constructor line to just be a static set method and use that here instead? (I suspect it was the warning that 'static methods should be accessed in a static manner' from my IDE that caused me to make this change in the first place...) (I can make a PR to your branch if you want.)
not sure why this is in a "rule" child package from the interface...
I wonder if we should create new tests for header checks; here for instance we're mixing querystring and headers. Thoughts?
We know it's a boolean and it's in the MemoryCircuitBreaker, why not simply call it `enabled` (like many other Solr plugins do)?
Hm, I guess that you're doing this here since `WellFormed` is on a `transactions.Transaction` and not a `transactions.SignedTxn`, but quickly grepping through our code, it looks like we always a `SignedTxn` around when calling `WellFormed` (except maybe some tests?)... this doesn't have to happen here, but maybe we should update that in a separate PR since this really feels like a `WellFormed` check.
Consider making a constant (e.g. `MetricStreamConfiguration.Drop`).
is there any scenario when `$temporaryFilename` can be null?
can we also check for smaller zoom levels returning valid error codes?
assignments should only be cuddled with other assignments (from `wsl`)
What's the purpose of this `backgroundCtx` field?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Should foreign key here be something like `diary_entry_id`? Or above, in `diary_entry.rb`, it should be `diary_entry_id`?
This code is necessary. It makes sure that you can sleep for longer durations than the timer supports.
This is an incorrect change. The dialect spoken is an important part of the handshake and should be communicated to users.
:+1: That does resolve my security concerns about this feature.
Maybe we could provide our own `configure` function that includes `logger._logger = None` because I don't see a use case in kinto for using `reset_logger` besides configuring the logger.
It's fine to leave these checks in. It'll make the exception come from `FirefoxDriver`, and that's probably clearer to a user.
@codepoet2017390 You have already initialized this ArrayList in the onPreExecute method then why do it here too?
@durran Was this change intended to be included in this PR?
if name is empty will this become enumerate ? (and cause the unmarshal to fail ?)
Is `<your-id>` really easier to understand than `<your-identity>` for CLI user? For me, `identity` seems like a concept we use publicly, and `id` is just an internal shortcut for it.
Not part of this commit, but we thought that this may not be a good place for this url, as it is in the `/user/` namespace (effectively preventing us having a user called `lastfmscraper`, however rare it may be)
This should be a Bool() rather than a String(). (See the other PR for an example)
as a future improvement, maybe we should just change `ForAllFlowRecordsDo` so that `updateOrSendFlowRecord` uses a flow record pointer instead of a copy of stored flow record. This whole code is executed with the lock any way.
This function is what **the compositor** calls when it wants to fullscreen a client, not what the client calls.
Code shared by ParentChildrenSyncDownTarget and ParentChildrenSyncUpTarget moved to ParentChildrenSyncTargetHelper
Looks like there is a closing parenthesis `)` missing here.
Our checkstyle config likes it better when the `<p>` is before the first word of the next paragraph, and not on a blank line
Since this migration hasn't been merged to master yet, what do you think about just squashing these two into the migration you really want?
This should be done when updating to the next release (2.5). You currently only perform the upgrade when users go from 1.4 to 1.5, so it will lead to crashes for existing users.
`FromCommand` seems to fit better, since with my suggestion below, all pauses will raise a signal on `needPause`. Also maybe the format `journalPauseConflict` and `journalPauseCommand` is better, since the journal isn't necessarily paused yet once we raise a pause signal.
At this point we probably want to ensure there's a store command set.
same concern here as above
Why we need to add this?
Are these changes from `class` to `struct` breaking if called from an older version of `Datadog.Trace.ClrProfiler.Managed`?
Why were we disabling health checks before?
Looks like this was previously guarded by `EnableCleanupReplicationTask` flag. Now looks like this is always needed. Just want to confirm the intention is if `GlobalNamespace` is enabled then we want run cleanupReplicationTasks in all cases?
How about use `protected` ?
You may put 'open-mmlab://res2net101_v1d_26w_4s' here. MMCV will be updated later.
So `Status` returns metrics?
should also be alphabetized or at least grouped and alphabetized within group
blockheighter would be more clear
I'm confused. This exception is thrown when `HeurekaCategory` is not found in database. But this exception extends Http exception. Why? What has database search common with http? If the only reason is that it is the same in the whole project, then fine. But then we have even bigger problem - we don't know how to use exceptions.
The value of `key` will never be `null` at this point, because `getKey()` will generate a value if it is `null`.
This is required, otherwise multiprocessing will (for some reason) crash
`isinstance(ip6, Net6)` instead
Not sure what benefit we gain by extending BaseProcessor here, as this seems to be defining a new OnEnd method. Could we modify MeasurementItem to have all the things, and then MeasurementProcessor can be simply extending BaseProcessor<MeasurementItem> (not blocking. just noting some observations in the PR :) )
@danieloeh @TomHennen. Some of these files are using spaces, the others use tabs. Is there a project wide preference? I personally like spaces, because they are consistent across editors
please use return type
couldn't we just read the boolean as a string (I would assume that this return "true" or "false"), migrate if to its new value and keep using the same pref key?
This alignment issue had not appear because no multiple `Boolmsg`s had been serialized at once.
If you feel like it, may as well apply all the suggestions below to this test too.
`get` has an optional second parameter that is the default if the key isn't found.
Looks good, but seems `ReadMessage` hadn't used this Deadline in Underlying `WSConnection`?
can we add an example?
I don't think we should include the `hasAttribute` test here. Even without aria-valuenow, it's still an aria range element. This check is going to make reuse of this function problematic. Better to move the attribute check part outside this function IMO.
Let's only change a file if it is really necessary. Such a change does not bring much value and makes it harder to find the original commit in which the method was introduced.
Commit 676eeeab10884456a5f70ce708a8aa5116ecbaf7 contains a lot of unrelated code style changes. Please get rid of these.
Do you plan to support Pod spec change? Like hostPort is added/removed later after Pod creation?
This was copied from JavaMethodViewGenerator; only the `public static` method modifiers were added.
I don't think is necessary to remove the return type
i don't understand why we need this change. what information is this providing when running in less than Debug loglevel? I prefer to revert this
Probably cleaner and more general to do this: string,Format("Column {0}", i+1) That way if the local language has a convention like "3 column, this is" it still works.
I think we should `return arn` as a fallback at the end of this function (otherwise the `['Resource']` entry below could become `None`).
I will add the following to the list: - api.SpecScale - api.SpecSticky
Not directly related to the topic of this ticket: I think this API design is a bit confusing. To disable delemetry, I would write `managementService.enableTelemetry(false)` which is not intuitive to read. Maybe `toggleTelemetry` instead of `enableTelemetry` is more clear.
Fix file endings here and elsewhere.
I agree with this because it is the opposite of `GetProjectedIds` used above.
@Pierre-Sassoulas Are we sure this doesn't create problems? Without it for some reason we get an error on `accept-no-param-docs` being a duplicate error. I couldn't figure out why it did this. This solves the issue and passes the tests, but I wonder if this creates other issues..
`lodash` shouldn't be grouped under WordPress dependencies
Thanks for avoiding the default value for the param. But, I think sending heap as NULL might make this program to fail. Have you tested this program? If you have tested this program already, then this PR is ready to be merged.
For my understanding, why was this removed?
Minor: you can set it to byte here and only set it to *virtualDiscDesc.CapacityAllocationUnits if that's not nil/"". Saves two lines
* Should be tagged `@Unstable` * Should be a default method, returning `null` * Also, perhaps `Optional<Long>` instead of just `Long`? Always empty when the BASEFEE isn't relevant? If so the default is `Optional.empty()`
LooseVersion class can help here
What do you think of renaming this file to `stack.go` or `cfn_stack.go`? `common.go`/`util.go` don't provide us anything descriptive about the contents of the file.
Just to be clear: 1. This is required for compression, right? 2. This won't actually result in our dynos serving the assets, since they'll be served via the CDN, correct?
This is extra awkward, QVariant.convert() takes a QMetaType which takes the value of a QMetaType.Type.
There should be no space before !Buffer
I wouldn't expose this until the feature is ready. We are most likely to cut releases while still in development
if remove `dt.skipLoad` - then this tests will run. You probably mean opposite?
This is wildly unhelpful to users --- they need to know when a proxy has been registered.
Use the return of the conditional for variable assignment and comparison.
It seems that the two words mean the same thing.
minor: use a non-default CE service account for testing (since default is handled in a specific way in the code)
There are no changes in this file. Please reset.
how does that happen?
I think the customer visible strings should be "Service" instead of "Svc" to make it obvious to them
maybe we should have a unit test for this and then just test one case in `spec/services/ncr/approval_manager_spec.rb` ?
Do we need this `init` here? We have already called the `InitContext` in `StartModule` directly.
Another redundant import
Don't use ! in the messages because it isn't used on xplat. There is a SOSPrefix define that can be used (blank on xplat and ! on Windows). Do we really need 3 newlines?
The Hash interface states that a call to `Write()` never returns an error. Does this also apply to the number of written bytes?
Why will the gomock files be regenerated? It seems to be irrelevant
Added validation that `config: transports` isn't used @adreyer @katelopresti Curious what you think about having Bolt link directly to the docs site.
Nested if statement. You can merge both statements nested together to create one
This isn't aligned though.
Working around a possible limitation in the JSDoc plugin's typescript syntax checking. This means the same thing
This line needs to be removed
No need for this when you don't need to customize anything about the argument.
Not really important in this PR, but does BlazeMeter describe "progress" values anywhere? It might be nice to have a set of constants like `PROGRESS_DOWNLOADING_IMAGE`, `PROGRESS_BOOTING`, `PROGRESS_RUNNING_TEST`, etc in our BZA client.
I think this should just say "build <date>". And when builddate wasn't set, e.g. somebody built weave with 'go build' or some other way, this should return "unknown".
Please not abbreviations
Are those necessary? I feel like `useless-suppression` could be avoided here?
remove todo on line 28?
I don't understand why this is changing to a hard-coded string.
@glennsarti you want to validate this on Windows? IIRC this won't work
This is not correct, it will override everything else that is currently in `Widgets`. This file shouldn't be modified at all, we should be adding `components.Widget` in `assets/js/googlesitekit/widgets/index.js`, where the rest of that object is defined. Oh, and there's a typo here :)
I don't think this will work.
This code is passing a non localized string when it should be passing in a localized string or it should use the name of the item being deleted.
And the old names for these variables made more sense imo.
Check here for sles-, and i'd prefer a regex since I don't know what an 'include' is going to do exactly. :)
Removed now-unneeded param.
I think you should add some extra message here saying it was originally sent as an error, for diagnosability.
why is this here? We already have a message pool in the node.
Did we forget to remove this field?
I think this should be a throw. Or the method should be TryGetSlot?
Could we move this to a class for Hadoop configuration properties, like `org.apache.iceberg.hadoop.ConfigProperties`?
it's just a pattern as it was. SystemAttributeCode should have it's own definition and validate by it
May clean the unnecessary modification.
@reyang when exponentialhistogram arrives, we won't have any bits left for it.. unless we take Summary or make this 16 bits instead of current 8 bytes
Why did this change?
Can we define this directly in the function `NewConnTrackOvsAppCtl` instead of passing this as an argument?
Move the line 27 to line 31 is better?
I've never seen this `boost::make_shared`...why use it instead of `reset`?
See above, same for the other cases.
It's not directly related to this PR, but it would be nice to flow the original error as we're going to print that if the promise is rejected and it'll be more informative than the vague `Network request failed`. Also, I'm not a js dev, so maybe I'm wrong, but throwing a TypeError feels a bit odd.
moto mock setup needs to happen before boto usage.
You should not rely on `PitchCommand` being imported into speech. Please import it from `speech.commands`.
line is 195 characters (from `lll`)
Setting browser based login as the default for `RestAPIExplorer`.
You can reuse `USERS` above as well.
May I ask why change this?
Unsure why this is `RestoreFiles` now vs `GoldenRetriever`, thought we deprecated the first?
Can you expand the warning slightly "Your password contains leading/trailing whitespace - in previous versions of rclone this was stripped" Just so users know they might have to type their password without a leading space.
`The %s is deprecated...` -> `The %s method is deprecated...`
Those variables are only been used once, I think we don't need to create them at all, just pass values to the `GetRawDiff` directly.
wrong place hehe
How would you feel about a static method to express intent?
Should there be an equivalent check or is it ok to remove this comparison?
nit: ServiceReference represents a reference to a v1.Service.
I understand that this grabs a Licenses objects but what is the autocomplete method used for? What does this do in context of the auto_completes controller?
I think `element` can stay of type `Character` because `Character` is a final class. The we do not need the cast in the line below.
`spb` is the standard package name we use for this proto.
Please remove Descriptors3D from this file. We just did this in master.
Adding `// +build !windows` (as a separate line) will do the same for Windows. So while you are at it we might add it as well.
How will this code behave with hostnames that contain hyphens?
.GetMethod() cannot return null now, correct?
This `if` statement can be merged with the above `if opts[:collect_perf_data]`.
File is not `goimports`-ed
This is the actual bug fix. I prob should have broken this out into two PRs.
will your editor integrate `gofmt`, `goimports`, etc...?
it seems `random.uniform(0, 1)` similar to `random.randint(2)`, all have 1/2 probabilities.
Yeah, not filled in yet.
Can we just say that having a non-nil `autocomplete_path` implies that autocomplete is enabled?
don't mind the snake cases in the test names. If there are in the test cases, it's fine IMO
any particular reason for suppressing this change?
nit: Looks like the whitespace got thrown off, can you fix this?
Why is this hack needed ? Ideally, we shouldn't need that.
Resharper annotations, always +1
I don't think we need to necessarily check if that returned true or not, we should just remove the shutdown hook. Since nothing would check or do anything with this flag anyways.
nit: move to last block
We usually use OkDialog()
Why is this deleted too?
What about providers that don't have a reliable location? Do they return null?
Is it a concern that we initialize these fields irrespective of whether resources like cgroup/volumes are enabled or not?
`RpmDependenciesDirectory` should start with a lowercase character so it's not exported outside of this package, it looks like its only referenced in this file.
I had an eslint error saying I must "alias" my model - so I copied this from controllers/site.js
Intentionally committed? I'm not against it, we already have a way to get goroutines without killing the process: `/keybase/.kbfs_profiles/goroutine`.
this was a bad Goland auto-import that I missed in the previous PR. Thanks to @rkowalick and @acruikshank for catching it
Please change the name of the file too.
This was unused across the codebase
looks like this snuck in from your other change?
Need to remove the surface destroy listener (and `wl_list_init` it so that `touch_point_destroy` still works)
You want "current_min_count"
@rhc54 This doesn't look like a comprehensive comparison. For `PMIX_STRING` we seem to actually compare the content of the data while here we only compare meta-information which doesn't ensure that values are the same.
will delete this.
I use the same zms instance to check authentication in swagger endpoints. Same thing in ZTS.
nit: all other types in this project have full names, so maybe a better name would be `OperatingSystem`?
It's strange here, because I saw the `TableColumn` is marked as `PublicEvolving`, but after released flink 1.12.0 it did not have any Interface compatibility guarantee. At least, it should marked as `deprecated`, and keep it a major release.
should we have a common `Escape()` method that can be used everywhere?
"Failed opening" or "Failed to open".
Aren't you duplicating this option?
What does setting partitionInfo to null mean exactly?
Remove the initializers ("`= null`") from both parameters. Remember that that's why we added the overloads: to ensure that all languages could have the convenience of the abbreviated argument lists (not all languages understand default parameters).
does this still allow this file to be used with Python installations that don't have numpy?
Should I remove this in favor of the HttpsConnectionFilterOptions overload?
We said we would put `[ ]` around the version. `[forseti-security] [v2.3.0]`
not sure whether we should do this. It may cause problem that delegates upgrade their nodes at different time, that they will have different "last block time", some use "commit time", some use "block time". Potential solution: Only use block time after berling, and then delete it in the next version after berling. Open to discussion.
Since we have the same logic in both forms, can we make a shared partial/helper for it?
Do we need to call ToList here?
Ugh, we were using cwd? =(
This does create a minor bifurcation in how closing the InputWriter is done in success vs failure cases. Is there anyway to merge this with the success exit path? This is something that seems like it would be better as a function closure instead of method on the `$esapi.Name` type. Can the `es.Close` not be used instead of this method?
I believe this whole file can be deleted now.
We avoid static method imports. Can you call `MetadataTableUtils.createMetadataTableInstance` instead?
*"This **field field** prohibits :other from being present."*, **field** word repeated is right?
Why the separation of imports here?
The indentation on this is off by one space to the left
I agree with Stephen it's better to invoke getStandards() only once.
Don't miss this one `2: I102 copyright year is outdated, expected 2014 but got 2013`. Thanks
Can this be `BuilderForYAMLObject`
Spark3 Is supported in OSS Iceberg, Do you mean this particular function is not supported in Spark3? If so I think we should have a more clear reason why
Given the slightly vague discussion in basename(3) about POSIX basename (modifies arg) vs GNU (doesn't), I always assumed it was advisable to pass a string copy However, I guess you'd get a "discarding const" warning promoted to error by our build system here if you were getting the POSIX implementation. Hah! Cool, I probably can go remove some memory copies in other parts of the code where those conditions exist.
This may be an automated change, but the import seems to fit better where it was previously.
closest to the address
Would it be too complicated to refactor `currLimit` to be an `int64`?
This fixes some import errors, due to the fact that this file has the same name than its module.
`has(default)` i think is the preferred way of doing this
I found ~10 more instances of this typo. we can fix those in subsequent PRs.
The error should be `At least :number items are required`
This... looks like it plainly didn't work before? Good catch. I would suggest we change the logic here to 1. Check if `self.headers["content_type"].startswith("multipart/form-data")`, and if that's not the case, add a content-type header with a random (?) boundary. The point here is that if someone assigns to `.multipart_form = ` in their addon, the header should be updated accordingly if the request was not multipart before. 2. *After* that, call `self.content = multipart.encode(self.headers, value)` (as we do right now)
let's actually use the direct include: `require('../core/error').MongoError;`
Should we add a note here to file a bug if this ever happens?
I think this should be done outside LocalPSMP, but in `getNextInQueue`. The reason is that I want to reduce the dependence of the media players on the preferences and database. Also, it will then probably work on Chromecast.
can we remove it ?
Should we provide a little more context in the error message? Maybe throw in something about what operation was being performed?
Is there a reason you're not using `self._die("The file {} ...")` here?
Might be better to rephrase to: Please refer to the ``init scenario`` command in order to generate a custom ``molecule`` scenario. Since you aren't customizing the default scenario since it already exists, right?
Is there a reason for the order swap here?
I'd suggest using `ast_error_continue` here to get the `apply` message in the `Info` part of the error report.
Is this a related change?
I think you should use `app.config`. In the usual case, the config file is not overwritten, there is additional config file outside of the source of `Invenio`.
focusRedirect is used in the powerpnt appModule. We might have to make sure that this does not break. Having said that, I really like this being handled on the events level!
make sure the config changes stuck. are there any invalid config values? maybe write tests around empty `trust_domain`, negative/missing `ttl`, invalid `key_size`, etc...
@NiklasGustafsson - I had to make these changes for the x-ms-client-name extension tests for java and python. The tests were expecting wire format instead of the client name. Hence modified them appropriately. Let me know what you think ?
Is the ID correctly normalized at this point?
I needed to add this import for Sphinx to inspect C++ runtime objects properly. This should be the only code change in this PR.
Add a TODO here to revisit if this was problematic.
Small nit, in the PR description its `publicAccess` but here its `public`. Guessing the preferred naming is public?
Could probably move these constants too?
You did not check this code
Any idea why you want to change the behavior here? Is there a security risk not to have the prefix in the principal here.
This `context` is used correctly, there is nothing left TO DO.
Unused parameter warning? How comes we did not catch that before? In any case please open another PR for this.
A blank line at the very end of each file should eliminate the "No EOF" warning we see above
Looks like the test had a bug prior to this.
unnecessary conversion (from `unconvert`)
@MichaelDCurran, thoughts on adding a breakpoint format field attribute? It seems almost app specific, but I guess it does seem odd abusing line-prefix. Is there any more generic concept here?
It would be better to use `return refStr[12:]`. or `11`... I have problem with counting..
What if we do not change this file ? Are we using this `pkg/disk/v1alpha1` elsewhere for block device requirement?
Quick question: Is this true for all `onAnimation*` and all `onTransition*` events?
Should there still be a ` bool` trailing `showOutput`?
VirtualNode has a `hasAttr` function, any reason why you're not using it?
Why setting the status to Continue as at the end it is written OK? Status should be written only once.
ad.Source is disk name? Shouldn't the order of initialization be reversed here then? First set ad.DeviceName, if it's empty, set ad.Source? Or this is a different use case? This is the third place where this device/disk default logic is implemented, so another reason to move it to regAttach, if it's possible to be generalized.
we shouldn't add a bunch of static initializers 'everywhere' in the code. Probably just one would be good, during the construction of the 'RemoteWebDriver' class.
The case of a negative size (= keep all elements) was not handled in this function.
I know this is a port from the previous PR, but I am wondering if we can take the chance to improve the naming? `--vpc-host-project-id` ?
Is this the critical change? It does seem wrong to use Select() instead of Checked = true. Not sure why that would pass sometimes and not others, though.
This seems like another unrelated change I've done in `master`.
FYI, visibility task processing is local only, meaning pushing something to local ES cluster / local archival endpoint
This tests for < 0 but the error message says it must be > 0. The `if` should probably be `<=` to match the message.
For tensors, it is better to illustrate the shape.
I'm concerned that we're conflating multiple things here. There are 2 things that Beaker should really care about: - Network transport - i.e. `ssh` vs `winrm` - Interpreter - i.e. `bash`, `cmd`, `powershell`, etc The problem is that @cowofevil is running Bitvise SSH, and he assumed we should be setting `is_cygwin: false` in node definitions. But that doesn't really accurately convey what we care about, and since Beaker doesn't appear to track network transport apart from interpreter, we end up in a strange state. `is_cygwin: false` appears to end up setting `is_powershell?` to `true`, which IMHO is not accurate or appropriate. Bitvise templates use `ssh` (like Cygwin), but the interpreter used is `cmd`, not `powershell`.
I wouldn't add this. Just completely ignore config if custom reporter is not `nil` in server options.
Please take a look at the docstring of `F.binary_cross_entropy_with_logits`. `weight` should be a tensor that matches the input tensor shape. It is Not the class-aware weight. `pos_weight` should be a vector with a length equal to the number of classes.
Why do we need to make so much more of this ScanContext public?
What will happen if neither `rvm` nor `ruby` is present in the .travis.yml?
Why do we need to override this if all we're doing is passing it up?
How about renaming the `ApiJob` class to `JobApi`. As per rails convention, get method is to get a single object, not a collection, can we change that to `fetch`/`where`. It would be great if we can move the `get` method to a class method.
This should now use `[]`, so it crashes if the var is missing
What I am missing in this PR, and I think we discussed that on the weekly meeting, is that all the code snippets that advise using `loadData` should be changed to one of the two new methods. Otherwise we send confusing mixed signals by promoting `loadData` everywhere in the guides. `loadData` is not deprecated, but is legacy.
`open_id_authentication` is no longer the name of the function, and it's not OpenID specific
This seems like a strange change ... I wouldn't think that a change to access tags in the profiles would result in different bearings in this tests?
there are tests that use `client.get` which will fail now
Can we avoid making this public with the other updates?
Make it `internal` if it's just for testing.
And another empty test. Please remove until there's content.
Revert this change and see below why...
What is is subject when it's not the email subject. Why are we having to do this crap? What's calling this with an empty string?
This looks to be a breaking change. I know it will affect some of my code that uses the Tautomer enumerator.
Why was this changed?
I think it was reversed
I fixed this today with a direct push to master. My build was failing otherwise.
Hmm I would have expected this to go away? What role does it play now that we have a minimum?
any chance in == nil? same below
All changes to signature code stem from here. The syscalls interfaces expects VerifySignature to return an error. I performed the change here and bubbled it up through the rest of the code - mostly mechanical.
I think that the JSON encoding should be handled by the control itself, not the sanitization function. This should only confirm that the input is correct, not reformat it  
Remove this whitespace
it is mean -> it means PAAHead does not support test-time augmentation.
Not sure why you want to make the distinction between null and undefined? And also `null == undefined` anyway so I think you could simply have `!noteIds` here.
I think you can just remove most of these attributes outside of `ElementType()`. Instead, this should expose the arrow array. We're not going to use these methods anyway.
The pointer to a pointer is kind of gross. How about either taking the `ROMOL_SPTR` directly or, preferably, returning an `std::pair`?
The body can just be `os.RemoveAll(dir)`
Given that 115 returns `True`, why would this be `False` here?
Should we have an avatar, truncate, etc examples, too?
you can just remove this
Can you move these to the top please, for consistency with other models - normally we put scopes immediately after the associations at the top of the model. As to names I agree with @gravitystorm that these names may be confusing but I'm not sure the ones I suggested are perfect either so I'm not really sure what's best. The goal of my names was just to separate point which could be ordered (as `ordered`) from those which can't (as `unordered`) but I realise that may not be very clear from the names.
This is very strongly opinionated so feel free to disagree with me better, but as conditionals get more complex I like turn them into ifs instead of unlesses. What do you think?
This is so weird as a utility function.
Walk should actually be completed (`onWalkCompleted`) after the event is stopped.   This also makes it possible for monster to walk by smaller paths.
Please add two additional SECTIONs that show that this also works if the dative bond is in the reactant (reaction SMARTS `[O:1]->[H+]>>[O:1].[H+]`) or in the agents (reaction SMARTS `[O:1][H]>N->[Cu]>[O:1].[H]`)
Actually, this is not correct. Package `cmd/bee` doe snot have any notion of commands or even libraries used for them. It is as simple as possible, just calling the function from `cmd/bee/cmd` which actually implements commands.
I wonder if this absolute path is gonna affect the build-cache relocatability of these compile tasks??
Could / should we make these constants and give them a type?
This newly added method should be well defined, should it return `TableIdentifier` or just `String`?
using **an** Amazon Simple... Simple Notification **Service** (singular)
Should this be `*string`?
We're calculating the full list of kwargs here (even if the first element of the list would return True) so we could improve performance by using a generator line 408 in ``for default_node in all_defaults:``.
In case there is more configuration to be added to the "inmem" metrics later (however unlikely that is), we may want to play it safe and create an `InMemConfig` struct and include the disabled flag there. This also gives the config symmetry across the plugins.
I'd say the format like `"xxx: %w"` is more convention when wrapping an error basically. You refered to anything like this?
Shall we do the same for ORC and Avro?
these should be alphabetized
nit: 200 is superfluous
Why don't we want to catch segfaults by default?
Are you subclassing from `UserList` instead of `list` to satisfy some constraint of Jython? My main concern here is that this is a subtle breaking change to the API because `UserList` is not a subclass of `list`. This has the unfortunate side effect of breaking any user that is using `isinstance` checks to see if a `ResultSet` is a `list`.
nit: this should be below the yarpc group
shouldn't this be `android_keystore_name`?
this reads like "mock database cache", maybe a clearer name
Would it make sense to also add `setMaxParallelism` in addition to this to match the Flink API?
Good catch here. Reading the code, it actually seems kind of dumb that `replaceAtom` needs to copy the atom it's passed. Ah well, we're more or less stuck with that.
If you use an enum for the streaming type, you wouldn't need to add each boolean as a separate attribute.
What about using `!files.hasNext` instead? I'm not sure we want to assume that the iterable can be consumed multiple times. Plus there's no need to consume the entire iterable just to check whether it is empty.
Hm, taking a second look over this, this is why we have the object inheritance structure that we do. This could be divided up by having a custom determine_if_x86_64 in the pswindows/exec hosts and then a default method in hosts.rb. That way all the custom ps windows work is in a single location.
Seems like this should conflict with changes I made during merging of the 20.2 RESX file translation
unit test needs an update?
Why not simply remove the `pytest` import now that it's not needed anymore? :wink:
why do we have an env var for this? not sure why we'd want to suppress welcome emails but not any others
looks good to me, but it would be better if you assigned `this.countRows()` into a variable, so it doesn't trigger twice in the return statement
Can't have two benchmarks with `Baseline = true`
The docstring of this context_manager should be updated. As now ``sort=False`` is valid, it should just say it disables sorting regardless of whether the NdMapping has ``sort=True`` or ``sort=False``. I also think the line 'Should only be used if values are guaranteed to be sorted before or after the operation is performed.' should just say something else - maybe just that the initial ordering (whatever it is) should be preserved?
nit: should go before `grpc`?
`lodash` shouldn't be grouped under WordPress dependencies
Was this just wrong before? The names indicated types but type wasn't specified. I guess the tests passed as comparison worked with ``type=None``?
You should use C++-type casts instead.
Group w/ algorand imports
If instance could not be found when the provider id is set, `findInstance()` returns `ErrInstanceNotFoundByID` error. So that during reconcileNormal(), we don't create a new instance. In `reconcileDelete()`, when ErrInstanceNotFoundByID is seen, deletion continues to clean up even if the instance is gone (may be manually deleted).
Well, it is providing a platform neutral way of calling Task or TaskEx. We could just call it PlatformTask.
Do you want to make this an assertion instead?
Hmm, why is this needed? `wlr_input_device_destroy` should destroy the tablet tool.
usually when HTTP_PROXY="" (empty), proxy should be disabled. could you set it to NULL when it's empty string?
This method will be for debug?
Maybe this should be exported so (external/third-party) plugins can also use it.
This line should not be removed, as it is not the description of the package, but a copyright header.
This should be grouped together with the import of "go.opentelemetry.io/{api/core,sdk/export}" below.
Are there other callers to this function. How will they be impacted.
@martijn00 I'm not sure why we're keeping the object parameter and return type since this can be done by using MvxApplication<THint> with THint set to object
I'd create a different method for each render section.
I just moved this into the render.js UT file since this test doesn't actually use an components
About ~7% memory usage increase on average, at most 512KB
why do we create a time type here?
nit: s/has cancel method/has a cancel method
i like that you are trying to correct the naming, but its making the PR longer :( i guess in future we can do such changes in separate PRs
lets keep our "testing framework" header only if possible. since there is an `assert(0)` in there, it is intended to halt on the first test failure.
Perhaps the code at `source/core.py:564: postNvdaStartup.notify()` should be queued instead? If we are saying the loop must have started before NVDA's startup is complete, then the `postNvdaStartup` action is incorrect.
Does this mean it's only returning tasks associated with the primary deployment? or something else
For my view, `Register` means the process of **insert node resource to etcd through api-server**, which is called by upstream rather than here, how about changing the func name to `OnConnected`?
Would use parenthesis to explicitly state the associations of operands ```js const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || ((2 ** 53) - 1)
nit: Should we make this an attribute of the LoadGroupMembersPIpeline class?
Oh, so this test leaks DateTimeUtils offset? It would be safer to place the reset in an `@After` method to not cause side effects even if the test case fails.
Any noticeable performance hit? Any other way to avoid the allocation and copy even of the array?
Think this needs to go right below line 91. `parseResponse` can return `null` (line 133), which will cause this future to never complete.
So I haven't tested this - but since the icon location is just directly dumped into the img _src_ attribute, won't this cause issues with Ghost blogs in a subdirectory? If I'm misunderstanding what the purpose of the default is then let me know  
I was saving this white-space for my retirement :nit:
Why this field is made public?
This bugfix also included, in case a subjectAlternativeName was present in the cert, then URIs (e.g SVID SPIFFE auth) would not have been attempted.
Let's call this color_host_output or some such - preserve_host_output makes it sound like you won't get any output without this being set.
Are we renaming this too in a follow up PR?
Does it send requests with urlencoded bodies anywhere? I thought it sends only json. Maybe content-type should be `application/json` by default?
Avoid wildcard imports
please import it like `from kinto.config import template`
This edit is non-essential.
can we make tabAccessibilityIdentifier = null as default?
should use Number instead of Long
I presume this isn't a big deal
why removed the MemoryDiagnoser attribute?
This should be called `Uint` or `Uint32` or simply using our `Uint64` type instead. All of our numbers have varint encoding. It's not inherently a varint.
code smell here, a function that create a reward calculator from transaction processor?
Maybe this should just be passed in on construction time
What is this checking for? Why is returning the list of interfaces the correct behaviour in this case?
haven't we got rid off `randomSP` recently? (I think `not learn` implied that)
This switch statement can be removed. Just return q.items[act.Nonce] != nil
Did you mean to use `identifier.toString` here as well?
This doesn't follow our spacing convention. It's also a little hard to read. Can you reformat?
We have `stdbool` imported, might as well use that for clarity.
will this fail if the env variable doesn't exist? Is this the preferred behaviour?
I though that all data objects are being unified in the fashion where all default values are initialized in constructor, are not they?
ultra nit: missing Oxford comma :P
Note that this is in the context of SolrCloud, so "secondary" doesn't apply and should be instead follower
I think these should remain as they are.
Iguess you should use ToDbKey here
nit: I feel multiple `if (...) { return ... }` is more readable than `if ... else ...`.
should we error instead of silently ignoring the `cleanup` param? it defaults to `false`, so someone must have explicitly set it to `true`
This needs to be done for server-side copies too, earlier in the function.
Since it's not working for linux, maybe leave the !linux in there as well?
Does it make sense to change that to a custom error instead of `ValueError`?
line is 175 characters
Are you going to change that back?
Does it make sense to restrict this option to `exec` only? You could add it specific to that subcommand using the `method_option`...method. There's an example of it for hosts in the `init` function.
I've been meaning to fix this for a while. Thanks.
Can you change this to `ResolvedUsersMap` and build a new map with both readers/writers? That way, we get the nice side effect of not exposing the internal map of the handle, and simplifying the callers a bit.
How was this set before? Was it just ignored?
Import order has been violated here.
This looks a little weird, but it's a feature of the gem we're using. You can give it a symbol representing the method you want called on current_user.
Storing a reference to source data isn't the best choice. Maybe you can find a different way (without storing the reference) to save removed data?
Must this not change to `MustBeRethrownImmediately`?
Should the docstring mention the vscode option?
This already exists under the `theme` lang key, please remove this.
What if `wxLang` is returned `None` from `getWxLang`
thanks. Note that returning at this point might leak memory from the allocations above, so the PR will need to take care of that too.
Do you need the prefix?
I think this line is gofmt issue? @daixiang0
I looked up that one, and it seems correct: Authentification is French, Authentication seems to be correct
Note that `sudo` is not available by default on BSDs; there are a few places in the codebase here where that's explicitly worked around by using `su`.
The license header should be updated to the Apache one.
for my own edificaton, what's this?
I think we probably need a util.Warning() here.
Minor, but these two nullable and the logic around them could be replaced by a Lazy<Bool>.
can you rename `that_col` to `that_column`?
Why does this start the main activity and not the preferences? With `overridePendingTransition(0, 0)`, this could instantly switch the theme without the user being disrupted
Why not put two other routes after this line (221)?
fields may be an object.
I don't think this should be changed since on the reactive side we don't support anonymous users.
This isn't new, but getHeightWidth is now defined in block_svg.js, block_render_svg_horizontal.js, and block_render_svg_vertical.js. One of these should be unnecessary.
since these thoughts are all Jack Handey's the generator should probably be called `jack_handey` to reflect that.
At first I wasn't sure, but now I think I'm sold on making PrepareRequest an action over adding a state object to the context.
Again not 100% sold on the name
This method is designed to allow the condition runner to tell users something interesting. The current `INFO` log level is correct.
I'm not sure where this should go, but one of the `get_extents` methods should mention that `range_type` can be `'data'` or `'combined'` (are there others?). I found out those are the two expected values by searching the code...
Now, It's redundant, I suppose.
I think you should move this block (and the `envpw := os.Getenv("RCLONE_CONFIG_PASS")`) right to the start of the function, then we can remove the duplicate code below
what is the effect of changing these buckets in existing data that is available in the monitoring system? if there are any existing dashboards that use previous histogram buckets they are probably going to be wrong ot invalid? also any reason why we chose these specific values?
I'd rather just send the parameter twice than break encapsulation here. There's already precedence with webelement IDs
I think "this" should be "parent".
nit: refactor into a const map lookup.
We should let this module inherits from the EvalHook supported in MMCV, and only override the `__init__` function by adding the warnings. The other functions can use those in MMCV.
I feel like goimports would move this import line by the other non-std packages... can you double-check that? Run goimports or set up your editor to run it on save. :+1:
The data structure of `MatchClauseContext` may need to be redesigned.
We don't need this additional method.
ref. above, this also can be omitted in case `txt = std::move(other.txt);` could work (or copy), consider `std::array<String, VARS_PER_TASK>;`? or a custom object implementing `Object& operator=(Object&&) noexcept;'
Why remove this one? It doesn't work yet, but we'll add it sooner or later.
This needs to be removed since we removed the mixin.
Mention that it only applies to Windows. This is kind of implied, but better to be explicit.
I think the more complete solution will save off a `ignoreUndefined` in the base class for the bulk operation (with a default of `false`), and use that for calculations. Was there a reason you didn't want to support the option from the operation level?
`within this with` typo, should be `within this width`
I'd feel a little safer if the first argument were a string, not a *string unless there's a particular reason for making it a pointer.
This is the fix for the crash. The function to create the intent to launch this activity requires `dbName`, so it has to be set to `null`. In such cases, the value for `dbName` will be set to `null` and cause issues throughout this activity. This adds a default value if the explicitly assigned value in `null`.
I don't think this needs to be a float if its a number of seconds... :)
Will you please update the copyright message to now include `2021`?
`ctx` is unused in rollbackTraffic
Just for the sake of keeping things logically co-located, I'd like to see this functionality in `Quantity.java` which has a lot of utility methods related to this. Maybe a `static` method like `Quantity.isValid(String string)`?
Comparators (or functions in general) cannot be compared for equality. Therefore `PriorityQueue.of(comparator, ...)` always has to return a new instance.
Use swarm.Address not []byte as type, and construct it from actual byteslice or use swarm.NewAddress if it is constructed from hex-encoded string.
Looks like the whitespace is off here. Not sure if there's a space or two too many or if there is an issue with tabs vs. spaces, but you probably want to fix this :)
I really think we should not use this style where unused arguments are named with underscore. While this eases the person writing the function it does it at an expense of readability and debugging. So next person who needs to actually use this argument will need to check the spec and rename this to `obj` and then use it or if he is debugging it he will is not able to watch for a meaningful variable name and will need to inspect `_` which is weird and uncomfortable. We have not used this style anywhere in the code while I agree its very tempting to use it :)
The file is not required - if you're using an IAM instance profile, for example. I'm not sure we can error 100% of the time if it's missing. @randomvariable any suggestions?
It would be helpful to explicit here what this really means and assumes.
would use an empty string here as default and then check for emptiness in the twig template. I dont like mixing types @core23 what do you think?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
is this phrase completed in a next line? Or forgot to add... what?
How is this related?
This metrics is only exposed in executors. Should it be defined in azkaban.execapp.ExecMetrics instead?
Should we just return a non-nil metadata from `Test`?
@Laurae2 good call. This is the only one I found (with `git grep transfered`)
What are these object with suffix Expansion?
Can we update this PR to not be a breaking change? i.e. if a user specifies `accessKeyID`, it is still used. But if a user specifies `accessKeyIDSecretRef`, it takes precedence?
check err or use gasPriceUnitIOTX, _ := if we are sure action.Core.GasPrice is correct
`hex(i)[2:]` is trying to do the same thing above. what is `i` in your malformed case?
adding this `abstract` is a breaking API change. Even though I agree it makes perfect sense to have it, we can't break this API until PMD 7.0.0. We should revert this particular change. We could make a reminder ticket like we did with #463 for 6.0.0
It seems ok. Because already created a file name at line 1815 and already checked if it is null or empty at line 1816. If file name is null, then already this line will not executed.
Nitpick: I'd append `_cb` to the function name here to mark it as a callback. Otherwise it looks a bit like this will do the entire job of removing null checksum refs from a hash table.
Extraneous blank line.
This would still crash on malformed database connection string like "test"
`json.RawMessage` is a `[]byte`, which is already a pointer. Why do we need to have pointer here if we just reading this value?
We will be removing this maya/volume package completely. Do not use this.
We don't need this anymore after #2151
Just a little change to make the var effectively final, which is clearer.
Can be inlined
Ah I see what you were saying about making it harder to validate types. We'll have to catch the return for that.
factory should be stateless if possible, looks like much complexity added
i don't think this test case is correct. in both cases inpalce=True returns nothing. We need to compare the ks. Also we probably need to make a copy of it. Otherwise you pollute the following "ks" because ks has been changed.
It's long-winded, but the convention is to give constants a common prefix which, see `reasonDomainVerified` .
Note that `hasAttacked` that is called before this function already performs this check. You probably don't need to check `hasAttacked` then.
Just curious, was wait not used at all before?
Minor grammar detail: the 'than' is unnecessary
Something to mention in the next changelog/release notes. It will be good to get histogram working consistently with everything else.
We normally suppress this warning with `RDUSED_PARAM(forceRDKit)`
I can't see any reason why this would fix a failure in `a.True(confirmed, "txgroup")`. We might have an issue elsewhere, but increasing the wait time wouldn't help.
The addition of delete files in `newManifests` far above the addition of data files threw me a bit. Is it intentional to ensure the delete files are at the front of the list?
we should keep the camel case format - selfServe
Same here we still need this test to make sure the fallback works.
Would this be possible: `addCNP` has already processed the CNP to an internalNP, just hasn't added this internalNP to the `internalNetworkPolicyStore`. In this case, `reprocessCNP` will skip processing this CNP and `addCNP` will just add the "old" internalNP to `internalNetworkPolicyStore`.
I think this should be a `MongoError` right?
Sorry about the confusion, I'm trying to address that in the PR follow-up. If we ever have `Span` objects, then accessing their properties is going to be safe. The only question remaining is "What is the runtime type for Scope.Span?" and we just have to account for it when it is `Datadog.Trace.Span` and when it is not
Better to just do `const err = yield User.bulkWrite(ops).then(() => null, err => err);` so you don't need to write out the whole `try/catch` block.
I'd move the empty assignment and non-null case into the if check directly above (adding an else clause as needed)
Do we need to export these new functions? I thought the plan going forward was to keep util imports separated to make circular imports less likely and possibly do better chunk splitting. Since only new code references these files, we can scope the import to the specific files.
  very important test as we want to make sure the old name still work.
Is this meant to be "2.7" or "2.6". The two lines in this commit don't agree with one another. Looks like everything else in this PR is "2.6" and that seems sensible.
I think we'll want @rickmanelius (or somebody) to go through all the help and make it more accessible. Probably later in the cycle. But "Run a command in an app container" doesn't do it for me :)
Could you add a docstring?
We don't need this file, we can use the one that is in the grid-ui directory
For a followup - it is better to use acceptlist/denylist. I realize this is a historical artifact of our codebase.
Swapped these to ensure that we aren't passing a nil cluster in to util.IsPaused
can we return null instead?
here shouldn't we use `depotFreeLimit`?
This should be `computed('i18n.locale'....`
`StressChaos` does not contains a field .spec.action
If we think we might someday write a native nftables backend, do you think it would make sense to just use generic dataplane configuration? e.g, `dataplane = iptables | ebpf | nftables`, but for now selecting `nftables` uses iptables in nft compat mode?
Still TODO I guess?
I'm pretty sure it doesn't harm, but don't we have a second pass here with the reverse() operation?
why change the variable name at all?
File is not `goimports`-ed
Always use `std::make_shared` whenever possible, it will save you one memory allocation.
It seems like most of these will never be nil, are they optional just in case?
Do we want validation somewhere that max >= min? Or simply treat the max < min case as ignoring max?
should we set a smaller initial size to make sure that we exercise the growing logic in our tests?
Perhaps this would be more idiomatic as `ConfigFor(interface{}) (*PluginConfig, bool)`?
Are the additional brackets necessary?
@chuckatkins most places used an empty string for "no type", but a few used `"unknown"`. I've converted both cases to `Type::None`. Do you know why there was a distinction before?
I think this should be initialized to `null` instead of a predicate. There is no need to run an extra predicate (with an extra method dispatch for each row in a data file. That's a tight loop so we should do more work here to avoid it. Instead of using `isDeleted.or`, this should test whether `isDeleted` is `null` and either initialize `isDeleted` or call `isDeleted.or`.
Why is this needed?
Need to add deprecated annotation and call the new fixed method to avoid the API broken issue.
The else doesn't return anything?
This is functionally equivalent to the code it replaces.
In the future, it'd be great if we can separate commits or PRs that aren't in the same scope
Not sure how to best do this without creating a new connection to the server everytime. Do this in another thread?
im not a huge fan of exact text match in these tests, not sure what a good solution is that solves the same problem
This line changed due to go formatting. Format was not there earlier.
Would it make sense to log a debug warning here?
Can also cast them as `set`s and compare them.
Why not always forward it to `_data`?
nit: Remove "insightfilestore". I think "insightstore" is good enough and as I see we are using that name at other places too.
I think even you can exclude to run it on nvcc
If the logger isn't used, it probably doesn't need to be added.
There is a very similar line `lowType = expr.Low.Type().(*types.Basic)` a few lines above this line. Can you change that in the same way?
Can all the BaseFeePerGas methods that are added be removed? It's not needed for the bomb and not referenced anywhere else in this PR.
This method is not needed for postgresql, by default sum function omits null values so we can remove this file
BLOCKING: Why does `Query` return an `*exec.FunctionSignature`?
Looks like this used to be UB before with an empty blocks and then calling `.second` on the `.front()`. Did it ever crash though?  
do we really need a relation or can we just assume INTERSECTS?
It should be `IsNullOrWhitespace` I believe, since we're going to trim the value afterwards (and I just realized the other configuration keys have the same issue)
you can use Enum#flat_map here.
IMO this doesn't need to be in the `kbfs` repo. And I don't like setting the byte. We can always compare with the randomly generated `TlfID`.
seems we missed de-uglifying this one
Nit: Past tense of `reset` is also `reset`.
What units are used for this default?
We have `ResolveRootfs` in `libcontainer/utils` so maybe use that one here?
This makes our life harder than it needs to be. A Set is unordered by definition. Please remove this method from Set and add it to SortedSet, but with no default implementation. We need to duplicate it then to LinkedHashSet but that's ok, it is the best we can do. Could you please add it also to SortedMap and LinkedHashMap? We are then able to close the original issue.
Why remove this? It seems like we should keep this around as a regression test, unless we can guarantee this will never be called without a model set (does your new code guarantee that?)
Do you know somehow that this was the culprit? Even 1 minute is a lot, so I would expect the bug to lie somewhere else.
shouldn't **call** return a boolean?
1: D100 Docstring missing 4: I102 copyright year is outdated, expected 2014 but got 2012 158: D103 Docstring missing 168: D101 Docstring missing 170: D102 Docstring missing 180: D102 Docstring missing 187: D102 Docstring missing
Looks like all of these can be put into a list.
Example output: "19.03.git.a7f4a860d0c" At some point `nixpkgsVersion` was renamed to `version` since someone may use an old channel we fallback to `nixpkgsVersion` for backwards compatibility.
nit: I guess we can omit this (unless you had a reason to specify it)
Is this covered by regression tests? Also you might make a patch onto refactor branch.
You haven't changed any of the callers of `.Add` to check the return value, so we're now ignoring duplicates. Please fix that.
Make it the last parameter, just in case someone uses the API with non-keyword args.
I like this, makes it clearer what scope the continuation is in
Why make this modifiable?
@thunterdb, can we increase the minimal version to almost the latest ones? I was thinking people will mostly use the latest version of mlflow
Any other possible names? Feels like going with "workshop" for this product_type could increase the confusion between course/workshop in the codebase.
I don't know if we even need this parameter.
Can you replace these by `else if` please?
It doesn't make sense. if we are going to have the profile page where the user can change the password and he / she is already logged in ... I do not need to register a new username. only: new password..confirm new password..something similar...and "USERNAME_ALREADY_REGISTERED" only if I have a register page..are we going to have? We need to talk about it.
Actually can we avoid mentioning `Register._UNSET_NAMESPACE`. I thought of it as an implementation detail of the simpler concept of "being unset". Perhaps the docs become more natural if we remove the "If called without arguments or with ..." part and just say "you have to call this function without arguments at the end of any file it has been used. That is to ensure blah blah". Something like that. Just a suggestion.
Why gauges, not counters?
I believe this is what we want to rearrange: this in.skip() should not be happening here, in the open method, but in the setOffset() method itself. Because we want to be able to change that offset after the initial open. The setOffset() method will need to throw an IOException, if it's called while the InputStream is still null; or if the skip() call itself results in an IOException()
Can this line be removed, as `SteadyStateDependencies` isn't updated anywhere? Also do we need to check the `TransitionDependencySet` here?
I think we should avoid changing any lucene classes for the moment - fileModified() can probably stay where it is?
I believe flow.toObject() method is throwing NPE if SLA option list (i.e. this.executionOptions.getSlaOptions()) is null or one of the value in the list (i.e. this.executionOptions.getSlaOptions()) is null. If that is the case we could fix root cause of NPE in the ExecutableFlow.toObject() method. The corresponding code to populate SLA options can be modified as follows. final List<Map<String, Object>> slaOptions = Optional.ofNullable(this.executionOptions.getSlaOptions()).orElse(Collections.emptyList()).stream() .filter(Objects::nonNull) .map(slaOption -> slaOption.toObject()) .collect(Collectors.toList());
We no longer have karma output in the test file so these selectors were now unique and the target didn't need a child selector. Updated to force non-unique nodes
Why was this necessary?
this is vendored code so i would hesitate to make random changes to it
It would be nice if we could verify that this is in fact the error we expected. But that's a latent issue, something for the backlog.
nit: call the arg something simple like `f` to avoid repeating "beforeQuery".
There didn't seem to be any good place to put constants that are .NET Tracer-specific, so I created this internal static class. If there's a better place, let me know.
order wrong for "outgoing and incoming"
DataHash shouldn't be needed here
Why did you remove these packages from the prelude, will your new functions not work without this change?
Typically we would add something to the build system environment to differentiate this; also is there an alternative that can be used with older OpenSSL? Other folks who are committers will need to decide if it is worth supporting an older and likely quite vulnerable (to hacks) OpenSSL library.
Do DiscoveryContext and GoGapicContext have a more specific common ancestor than Object? If so, let's use that.
Thoughts on this? I'm not crazy about the brittleness of this but haven't found a good way to test more generically that a specific (custom) template has been rendered.
We should avoid adding a pandera dependency to Dagster itself.
Isn't he diamond operator Java7+?
Can we add these when we need them  
@ScottGarman is there a reason that `redhat_fips` needs to be a beaker platform? Why can't it be another platform that beaker just understands as `redhat`?
This states very clearly that this is a derivative of Chrome and not Chromium. Do we need to extract an abstract `ChromiumCommandExecutor` and have both Edge and Chrome derive from that?
Please import modules and not classes (except for Qt stuff).
This is a mess. Can it be broken out as a separate function using ifs and return statements, which would also make it more debuggable.
I think this warning message is the same as above one. Anyway, it's fine to keep it.
Is `username` expected to be case insensitive?
I'm a little worried about the new extra calls to `MakeMdId`, since in most local-server KBFS profiles, hashing is the biggest CPU user, and not re-using the value calculated by the client will result in even more hashing. That said, I understand why you did it this way, and I don't have a concrete suggestion on how to make it better. Just something to keep in mind; plus it might be worth comparing the test speed before and after this change to make sure it didn't slow things down too much.
I'm slightly concerned about this because doesn't ORCID use XML instead of JSON?
These `Get`s are just cosmetic changes for consistency.
Should these restrictions also be reflected in the API docs?
Missing the `-y` argument which all other `apt-get install` commands have.
I think, there is no `#getKind()` method anymore, is it? The approach would now be testing with instanceof. Or could we return a more specific type than JavaNode now?
What are the possibilities here? Since we plan on supporting .net standard 2.0 from day 1, we might as well tackle that now.
"in the keystore", but nevermind
I do not think we should have any logic inside the null storage. 1 has a very specific magical meaning. We should either return null here or long.maxValue.
what if I want to load my own, a different, data URI in Private Browsing mode? I do this often on desktop (e.g., `data:text/html,&times;`). admittedly, I wouldn't expect this to be done by a non-developer, but this will certainly cause a minor bug.
You can start by logging out the error
This new class is for checking that #4551 works correctly with PlantUML output too.
Make `CircuitBreakerManager` implement `PluginInfoInitialized`
This story also needs the default padding.
I hope that this does not break anything... Probably needs detailed beta tests.
@demiankatz I'm not sure that this is very useful. I just did it to get started. If we had a small handful of predetermined prefixes that were randomly chosen, it would be easier to distinguish them from the rest of the call number. Would that be preferable?
Is it necessary to change this file? Doesn't `tableMetadata` call `newTableMetadata`?
This needs a more self-explaining name. Maybe `.is_focused`?
This is fix from another PR #120.
using folly::to is better ?
I see this getting unwieldy as we add more commands with subcommands. Can we perhaps enhance it to handle subcommands properly? Perhaps something like `"etcd-snapshot:1"` which would indicate that the etcd-snapshot command may have 1 subcommand after it, and if the 1 next argument after it doesn't start with `--` then the args should be appended after that subcommand.
I think we have to keep this as a fallback for now, else it's a small breaking change :(
no thought given to reload
It would be cleaner if you were to pack the name&desc in a `MetricName` and pass it to `MakeCounter`
you could use `bpf_map_update_elem` with `BPF_EXIST`
no need of pub;lic.
@tkaessmann when I ran tests I saw this line has a bug. It inverts the SHOULD and MUST. Hopefully I fixed it and merged it without the bug.
nit: I suggest that we rename `tag_error_response` to `tag_resource_success`, as later in line 132 we're returning an error if this value is *not* truthy.
Please revert unrelated changes
Why not make the ``derived_vdims`` flag (or similar, ``validate_vdims`` maybe?) an explicit argument to ``validate``?
`isDestroyed` is a function, not a property. This condition will always return false.
No. Keep the header include and do `extern template ...` to skip the instantiation from that compile unit. (I pushed a fix directly to your branch)
This whole class is now a mix of virtual and non-virtual. I tried to see what would happen if I made everything non-virtual in dev, and the build still passes. It turns out that none of the other methods actually need to be virtual. Can you make *all* the logging methods either virtual or not for consistency? Thanks.
I believe in previous PRs @mccheah frequently used `fileSchema` -> `newFileSchema` type of renames to avoid hiding fields in builders. Would it make sense to make it consistent?
why is this variable introduced? Please stick `_o.Test3.A` directly in the call below.
Is it still important to have `speakEntry` here? It is checked before this value `containerContainsText` is used in the "General" section.
What's the point of this block (and isn't it effectively dead code)?
@aimanrosli23 For the changes in file SdMmcPciHci.c, please make sure that you do not revert the changes made by the below commits: SHA-1: 49accdedf956f175041040e677163b7cbb746283 * MdeModulePkg/SdMmcPciHcDxe: Hook SwitchClockFreq after SD clock start SHA-1: c67617f3c677c342efde780e229f841f4e0f6c7e * MdeModulePkg/SdMmcPciHcDxe: Add retries for sync commands SHA-1: 6d387610855ee27b49cb720de29ed809ea59dadc * MdeModulePkg/SdMmcPciHcDxe: Read response on command completion SHA-1: 63fd7f389874081ea37452b1f79ac013d52755e3 * MdeModulePkg/SdMmcPciHcDxe: Do not map memory for non DMA transfer
What's that good for? The field is initialized in the constructor.
This should allow `role=definition` and `role=term`, possibly also `role=list`?
You're missing a `return` here, but I'll add it :smile:
'A' instead of 'An' here
I feel slightly that InterfaceExclude is not a clear name - bearing in mind that our config names are, to some extent, an external API. From an external point of view, a clearer name might be IPVSInterfaces. Then it would obviously make sense for the value to be something like 'kube-ipvs0', and it would be a matter of Felix's internal implementation that we choose to exclude those interfaces from our monitoring. Alternatively, if we want to keep this at a level that is more general than just IPVS, perhaps 'UnmonitoredInterfaces'? WDYT?
[Checkstyle] ERROR: Unused import - javaslang.collection.Stream.
looks like this should be `return array(LegacyFormHelper::getType('form'));`
We do have to capture and check the err here right? I don't think we need to capture the location of the file though for this context.
This should be moved into the PrivacyBlockProcessor instead of adding the constructor here.
For consistency, would it not be best to also replace the first class name? `traceLog('Class ' . static::class . ' has been deprecated, use ' . SystemMediaLibrary::class . ' instead.')`
This needs to take the group id, not the gsuite id.
Potentially it'll be good to remove all of them excluding "tbb/tbb.h" But let's do it next time  
Whoa, was this opto breaking something? I guess if this final path is filtered out, we still need the queue? Have you run the suggest benchmarks to see if removing this opto hurt performance?
This section needs to be modified; crontab format differs between OS releases (Debian and CentOS, at least).
I am curious, shouldn't "currentContinuousFlowProcessed++;" be added right after line 1873? otherwise we will count 1 extra when a exflow wakes up from the sleep section,.even though it hasn't been assigned
lets stick with lowercase for consistency.
Why do we not also have integration tests for postgres?
this seems to be a property key name, so should it be a inside configurationkey.java?
a peer's accounting lock is held during `Pay`. we should avoid adding additional blockchain calls here if possible.
Why did this need to change?
Why are we mentioning toybox in this message? AND it still says "tdnf error". What's the actual error? Should it be resolved instead of flagged?
Ditto, here and below
nit formatting here and below
Wearing my extra-douche-bag hat I would say not spaces on a blank line. Maybe at some point we could have some automated process remove these things. For now I would not bother changing it.
Maybe it makes sense to mention that those zombies are not forever, but only up to the moment when the parent process exits? Is that correct according to your observations, @benoittgt ? Please disregard this note if zombies remain after.
Sorry for going back and forth. Adding docstring here would be very helpful for others to understand the need of this method.
Thanks for paying attention to other places this might happen. This one is particularly important; I probably never should have gotten in the habit of CheckErr(), since it does a log.Panic() explicitly, which looks like something else until you look closely. It's supposed to be used places where "can't happen" but Things Can Happen.
I think it makes sense to do `metadata[:block].clone`, as thats what `new_metadata` is, but somehow it's missing the block from its clone.
Does it make sense to generate a dailyMotion url without the video reference? It does not to me, but can we throw an exception here?
getSpcResource should not be bothered about deletion. Can we have `separation of concerns` for this logic?
I believe this means dependent checks can no longer operate on virtual nodes, which is something we've been pushing for lately. We may need to find a different way to solve this issue, as I don't think we want to cause a regression while fixing a bug.
Should we use the shared chai-addon.js file here? Actually we should consolidate any `chai.use` calls, I see 20 instances, quick win?
so in the performance data fixtures, there will be references for the second domain only?
You should remove the outdated sentence.
Why isnt the return value checked?
nit: I'd probably rename this to `BATCH_SIZE_RANGES`, to use a slightly more descriptive name.
Nit: Does this make more sense as `iceberg.hive.metadata...`? The rest of the configs seem to start with `iceberg.hive`.
Cool. (I thought I had fixed this already in #812.)
Not an expert of ES, so not sure of the impact here.
optionals, shouldn't need to be stated explicitly
Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.
This should fit on the line above without going over the 79-char limit, no?
the name kTimelineCannotBeSignalled is confusing. It's not that a TimelineSemphore cannot be signaled... it's the "VK_KHR_timeline_semaphore is enabled *variant* of the "binary cannot be signaled" message. We should probably have a consistent naming scheme to clarify. kBinaryCannotBeSignalledAltTimeline or hide the complexity in Get*VUID functions as needed somehow (pass in the extension structure?)
This looks like it will pass an array as `:key` in the default case. That doesn't reflect how this will actually work in practice.
I don't know about this aliasing and 'factory'. Previous version was rather straightforward: `location.CreateLocationResolver`. Perhaps `location.CreateResolver` would be even better? What do we actually gain here from moving DI to a separate sub-package?
How about modifying the NOGIL definition so that it only does anything if the thread safety flag (RDK_BUILD_THREADSAFE_SSS) is set?
put this sentence in `if (onResult_) { }`
Might be safer to ponyfill this?
this example needs a fix?
Can you facet on this new externalStatus Solr field?
Generally I'd say we should factor this out into something more extensible (check an array of potentially skipped tests, for examples), but since we're likely to remove this soon for scheduled work I think this is fine. What do you think @daprahamian?
I think we need some YARD docs here, particularly to list all the color symbols that are valid. Otherwise users will have to look at the source to discover that.
This should be removed, and instead set the logger to None.
Could we just use case insensitive strings as keys instead of creating a new map implementation? e.g. simply using a treemap with a comparator `Map<String, Integer> idToPos = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);` could work I think
Please follow the import style, move it to its similar group
Would like a docstring and type annotations here
File is not `goimports`-ed (from `goimports`)
.decode(sys.getfilesystemencoding()) will be better. Although I think rrdtool should accept bytes..
can we pass some simple interface instead of a full additional processor? (an imterface with these two events only)
Perhaps `@node` throughout
session is a new term. Should we call more like currentCommandBatch or something else?
This shouldn't be here.
I'll replace this with the actual outbox object soon.
Everything in this class is SolrCloud-related, not legacy replication
You cannot move this here because it breaks detach. Just call `tty.Close()` before returning the error from start
this reduces the runtime by 50 times
I think we should log the exception to a log file instead of printing it. The current behavior (not catching the exception) should lead to an automatic print of the exception to the terminal/console.
rootston needs to unset this now
Selenium must compile against Java 6. Revert this line.
I don't know if this is something we should address now, but we have a cents_to_dollars private method in both `SubscriptionCoupon` and `Invoice`.
This is just rearranging it alphabetically
Do we need to also change `length` here (and below) to `bytesize`? Perhaps we ought to make a copy of `in_buffer` encoded as binary and then the existing algorithm should work.
Would it be good practice to add a nonce in here (that's also stored in the config), so it's harder to tell when passwords are being reused?
This check is a little odd, and will still mess up with empty strings `''` because empty string is falsy. Can we change this to `|| _this.getValue(path) == null`?
We shouldn't use the `&.` syntax here, since we expect that `executor` will never be `nil`. For the functions that _can_ be called from apply / without an executor, `&.` is still appropriate.
nit: Should we have something like `volumeName@snapShotname` and this will be filled only if it is a clone creation
`std::strtok` isn't necessary. The `std::string::find_first_of` is better C++ alternative to `std::strtok`. For example, see `CheckedError Parser::ParseEnumFromString` method.
I suspect this isn't needed because I think `rb_intern` gets marked already.
We should not change this at this time.
This is fine, but maybe we should change the variable name to "bufferSize_as_uint"? Or "...uint32"?
we dont use a `sugaredlogger` anywhere else in clutch, just curious why were using it here?
was it caused by the removal of removeTaskQueueManager() from this test?
This was a bug I picked up by using the TS interface as a guide, this seems like it was / is the intention, also is a bug in master (needs port)
Parsing URLs is hard. Any fixes should avoid manually parsing the URL.
As discussed in chat - we should run this function within an app context which means that we'd already have a logger configured, and a connection to timescale set up
Git doc seems to suggest `for-push` is a optimization. Do we have a plan/ticket for treating them differently?
I think this entry can be removed now, right?
there are changes that are upcoming to this section. For now, this works (to demo the usage of Gauge), and the changes to this section are coming as separate PRs.
Wouldn't a single signal call be enough? (without the boolean even)
let's replace this example with something that won't fail in Python. Like "for+if+print"
I believe these need to be explicitly initialized in `proxy_send_prepare`
Should not be a static import.
To avoid useless calls to `conf.l2types.get()` we could have a `set()` of types that are OK in this PCAP files. We could check if `p.__class__ not in self.l2_types_seen` first, only run this code block in that case, and add `self.l2_types_seen.add(p.__class__)`. I'm not sure if I'm clear here... let me know what you think.
I prefer if possible for `if`/`else` statements to have the positive case first.
We can import all of them in one line.
Do servers have no need of accessing this information?
This requires updating the name in the `endpoints` tests, please run `make test`.
Use `std::shared_lock` and `std::try_to_lock_t`. BTW. Why we fail on contention?
You are opening a door to race-condition-hell by returning an unprotected dictionary. I recommend that you return `IReadOnlyDictionary` that only works on the platforms where it is known.
Note that there are multiple OAI servers -- that's why `$serverClass` is a variable here. You'll want to fetch `$serverClass` from the service manager rather than a hard-coded value, and also set up a module.config.php for the authority record version, `VuFind\OAI\Server\Auth`. Should be easy enough since it can share the same factory.
Deleting the files before starting the audit helps avoid stale results if the new file is not created.
I think you need `.untaint` here.
I figured this was more fool-proof than trying to plumb the error up from everywhere.
With this commit, `MemoryUnlimited` is defined as a `unit64`, so I think you can drop the redundant cast from this line (and the later lines which also have `uint64(configs.MemoryUnlimited)`.
To follow the other build tags, maybe we can call it `criu`?
Nit: leaving these in place would have reduce the number of files that this needed to touch, and avoided a possible problem removing public fields. I don't think it's worth blocking for this change, but we like to keep patches as small as possible by not breaking references like these.
I don't understand why you want to populate the storage class in this case, if the S3 docs say they won't populate the header in this case?
Don't forget the {} symbols, and please use EqualsBuilder and HashcodeBuilder as possible
Does adding things here require us also to extend the FelixConfiguration resource in libcalico-go?
`typeof` is not a function - its an operator, and the standard way to use it is as `typeof foo !== ...` (i.e. no parenthesis). Also, I would personally use `opts.fee != null` instead (with a non-strict comparison, which also identifies `undefined` values because `null == undefined`).
I'd prefer a name less chat-specific, since later on we could have other app types that want the same behavior. Maybe `IdentifyAndAllowTrackBreaks`?
Note for those who come across this later: It was moved to `testhelpers.mining.go` so that `testhelpers.NewDaemon` and the `mining/worker_test.go` can share it.
We should specify format for a user. I.e: Integer, 1000 == 1 MYST
What do these changes have to do with the request ID?
How was this causing the exception?
Yuck. Rails bug.
can this long line be wrapped?
Hmm, I would think that anyone who can edit the request should be able to delete the observation, in case they accidentally add the wrong person or something.
I added this change to fix a bug with the legacy settings wrapper which was preventing it from working properly with the other modules  
This will require changes to the docs. I suggest searching the gh-pages branch for the previous variable name.
Seems a little low, but is this an installer default?
This will delete the whole bucket, which could have unforseen consequences in normal use cases. We should be deleting args.SourceFile instead.
This change is un-tested and requires testing
Wasn't there a subsequent reason why we had to keep the `/p/project_graph` route? Outside references or is the proposed solution to the original proposal we us `/p/g` as the `compares#project_graph` route?
nit: please move it inside namespace.
here is `:seconds` missing again
This is also missing in CreateScopeFromExecuteAsync. Can you add that there too?
I'm curious -- do we have information on the upper bound of the delay we would expect with high probability from a peer with no network issues? My intuition is that we want to set this as low as we can reasonably get away with before we start killing productive connections. My uninformed intuition is also that 10 seconds is probably higher than we need and I'd love to know if this is wrong and 10 seconds is already pushing the limit.
This is not going to work. You need to add a migration to the database.
Why implement this? It duplicates the value in FeatureConfig.
Clever but perhaps confusing.
Why can't this be determined by 'PARTIAL_SUCCESS' in the `status` field?
Please revert changes to unrelated file
why do we need lock here? if needed, then we also need to lock in Start()?
@greglandrum interesting, is this related to #3307 by any chance?
I guess we can start by putting the `const StatusContextCancelled = 499` at the bottom of this file
You should do: AssertEx.AreEqual(importPeptideSearchDlg.CurrentPage, ImportPeptideSearchDlg.Pages.match_modifications_page);
Why do we need this in this sample app and not the others?
no need to move here, iotex-proto is outside of iotex-core and considered same as iotex-address, go-pkgs
I am a bit confused about this function. If it is used to set priority, we actually use function "Table.BuildFlow(priority uint16)" to set the value. If it is used to parse the priority value, I think adding a property(if you don't want to consume Match.Priority directly) to cache it and consume that property should be simpler than using string regex.
Since `ga` is an acronym here, we should rename the generated actions and selectors to adhere to our naming conventions as it will no longer be capitalized properly. See below for how this is already done for the amp container ID settings. We should add `GA` to our list of checked acronyms as well in `packages/eslint-plugin/rules/acronym-case.js`.
`.addColumn("c1", IntegerType.INT, true)` means `PkHandle=true`, maybe should add `.setPkHandle(true)` in line 31
Feel free to use the full notation with my email address: `Maxime Steinhausser <maxime.steinhausser@gmail.com>` :smile:
Better to push getting policy details into a func we can reuse later.
We should really leave a TODO or something or else we will forget them ...
This one won't change as the resource is not included in the project getting tested with the composite root.
I actually think this wrapping is great, but let's call it `RunCommandOperation`?
Is this still necessary?
there seems to be one KeyNode in kubernetes.go of PV.. would it make sense to use it?
What about just printing an empty list in this case? That would make the output more predictable.
Not needed anymore
We explicitly don't want to do that. This was a complaint from users before.
nit: to match the others: s/private/Private/
This comparison looks a bit strange, we should first check existence of key "IsApiToken" and then check if it is equal to true. ~~Besdies, s/IsApiToken/IsAuthedByToken/~~
Can we add some description for this field?  
Does an empty struct really take less storage than a bool? I guess it must be, or else you wouldn't have changed this, but I'm curious about the detail.
Should move this to within the `#else` block as it's only used there.
nit: We can revert this now.
nit: how about `GitSHA`?
just curious, `region` is not used in the AWS IAM client, afaik. But I see this is a general field for clutch clients, is it just ignored internally?
delete the empty line here.
where is a test for it?
If these variables are only used in main function, move these to the beginning of that function. If there is a foreseeable reason to have them as global statics just let me know.
Simple Storage **Service**
either make this a config or a constant we can define at the top. Burying this in the code is no good.
Not sure whether this validation is useful.
Wondering if we can directly put types here & for other similar ledger_processor items like rai::block_type::state
The true clause of your condition, can't this just be c._nextState since `assign({}, c._nextState)` is equal to returning c._nextState, or am I misunderstanding something here?
Should there be any changes to this file at all?
huh does this work without a `Return`?
In this test, we want xax to be dead, so that aflags are not spilled to a slot.
Did you mean for this to be `FORM`, instead of `FROM`?
I think you'll need to add an import for runtime, before you can merge this PR. (Presumably it was already there for something else when you were working on this, but has since disappeared.)
Same here. Any way to fit on one line?
Maybe "For configuring which scheduler messages can be received."?
Don't penalize everyone with 250ms delay b/c some machines have problems.
I think we can entirely remove this `limit` parameter for now to be consistent with other APIs.
Can we make these asserts more strict/precise? I remember this test helped to spot the issue of inconsistent results on different platforms due to using `sort` instead of `stable_sort`.
I'd actually recommend not putting this in the `SampleConfig`, it's intended more for properties that are inherent of the discovery format. Add a method `getSampleAppName(String apiTypeName)` to `SampleNamer` and override it in the language specific `SampleNamer`s if needed. Then assign it in the transformer.
Can we keep this at 10 to reduce the probability of a flake? Or are you afraid this would be too likely to give a false positive if delayed cancellation is every actually broken?
Should this be `ISocketOutput<T> where T : struct`?
So is this invoked every time we extend the trace?
Why this change was needed? Because in `po` files it's with curly braces?
Like in atss_head
We should add an additional call to Recv() somewhere after here that we assert returns io.EOF.
Update after command rename
we should probably have some utility class for this sort of things
validate() will be called by either V1 or V2
Missing a `return`. Either way, I think it's better to add a `#if DEBUG throw;` in the catch block instead (so we keep the log in debug mode)
We can just use `.stack()` here? Then I guess we can reuse when supporting multi-index columns.
Should we add this to the other "never" verification in lines 71-73 above, too?
why not enable split by space here ?
Oh, that's the reason why you have two different data structures here. Does the order of the `selectedItems` list matter? If not, I think it would be more clear if both would be a Set.
To me, using a `RuntimeException` for this feels a bit weird. I would just extend `Exception`, or maybe even `IoException`. Could you also please overwrite the `getMessage` function to return something like `"Result does not specify a feed url"`?
nit: Not a fan of "fix" in the name, but don't have a better suggestion  
This should only be sent if the driver is speaking to a W3C conformant remote, so we need an if-condition check like we have in the Python bindings.
Not sure if this is intentional or snuck in through find/replace; while this is a correct style fix (and is welcome in another PR), it should not be done here so that the commit maintains a logical changeset.
`upsertHistoryTreeQuery` is a better name for this query now. Is it ok to change history?
I'd say the error should be an error, not instructions to the user. So error would be something like "site should be running and is not"
there is a `kEpsilon` you can use directly.
too long here. (104 > 100)
This informational message is important to users. Please leave.
I dont want to do composite keys on purpose to verify at compile time if the message is completely filled out appropriately @sectioneight
It is a bit weird to see a message like "something must be valid".
Can this be refactored to avoid including the aws sdk in the types that we expose? I know it's not being exposed directly through the types we expose, but I do worry that it might make it easier to accidentally do that in the future and not realize it as easily.
It's useally a common practice to not use `l` as a variable (we have disabled this test in scapy because our code has tons, but it would have PEP8 failed otherwise), but it would be better not to create any. In general, single letter variables are not liked that much. Especially with windows where the fonts make 1=l How about `lay` ?
`Anomaly` imported here, but not used. Please run the changed files through pylint with nupic pylint config and fix pylint findings related to your changes.
We need to switch from BeamSync to FullSync when we download all the needed headers, blocks, receipts and state
why not removing it?
Perhaps we should import assertj for tests. These assertions are so much cleaner with assertj. Don't know whether hamcrest equivalent exist (maybe it does).
I don't think we should be pulling the runtime name from the Compiler. There are two compiler frontends, but both of them compile the same source to generate the "go" runtime. I think until there is a request from an alternative implementation (the embedded world **might** have a different runtime), it's fine to hardcode this as "go"
Can we remove this featureConfig since you removed in L98 (assuming it is not used else where)
Good call. Makes we wonder if we should do this with the ARIA props.
Can you explain the history of the bug a bit, and why this fixes it?
These props should be less specifically named since the component is generic, for example `anchorLink`, `anchorLinkLabel`.
Can this be non-exported to avoid direct use? It would be a breaking change but using previous package version would work.
Please use snake_case for properties to keep it consistent with the rest of the codebase.
Roslyn conventions have const in PascalCase.
perhaps file can be removed altogether (trying to avoid an empty package for these build tags)
Could you please leave the explicit imports?
Let's be neutral with tag names. Let's just have "ReportURL"
Not sure I see where this is coming from. This is a bug fix? Should be mentioned in the commit message? Same below.
This is adding multiple processor pipelines. I guess you wanted to add multiple processors to the same, single pipeline?
Why is this needed?
Check modname instead, but only if it's a ImportFrom.
It's a little surprising that CachedThreadPool overrides the max_threads argument. This makes sense as a solution though.
Why remove this?
this is auto generated file so no changes are allowed here
I'm not sure that this should call `allowIncompatibleChanges()` because adding a required column when there are no existing values will break reading the new column in any table with data in it. The only time it is safe to add a required column is if there is no data in the table. What about throwing an exception here instead? I agree that the column should not be optional if NOT NULL was specified. Another alternative is to check whether the table has data and allow the incompatible change if it doesn't have any rows.
Is there any issue with 2.2.3? If not this should be `<2.3`.  
Feel like this should probably come into this tool as a flag rather than it just grabbing an env var internally?
How soon after this will Apply() be called? It would be a shame if there was still a significant delay before a missing or superfluous route was corrected.
this is golang's named return, err is defined, `return` is equivalent to `return err` the current code has no problem
Line is too long. [96/80]
Please use camelCase in new code
G104: Errors unhandled. (from `gosec`)
Is this change intentional?
This should only be used in the `ScrollEffect` component, as you have in the `DashboardMainApp` below  
There's not particular reason to use a short name. Can we use a more descriptive name for the metric? Perhaps "negativeLogLikelihood"?
Required by the libcalico-go changes
This spec can be modified, giving you extra strength (Check this fetch key doesn't work and therefore returns `nil`)
nit: can be removed before merging...
> specialised This isn't a typo in my neck of the woods  
So, why everything is in memory but the permission backend?
Can you check with @mahebbar how to work this error. Should be different from 404.
These tests actually go to the server.
@nbbeeken what were the cases where `!!this[kIsMaster]` was yielding an incorrect value? we should try to cover them in the tests
Collapse/expand animation of filter is broken - not smooth.
Looks like this is failing to compile on Windows (VS 2015 I think).
How would you feel about continuing to point this at the MyResearchController's holdsAction, but instead changing that action to force a redirect to the new holds-list route? That way, people will get sent to the new URL instead of having two different URLs that do the same thing.
thanks for adding this missing association
nit: `rename` instead of `alias`?
Please make this private by default
It's out of scope for this PR, but I don't find this utility's name to be particularly intuitive. It speaks to nothing of what it does. Does it create a token list? Process one? Get one? `tokenListToArray` would be nice.
Just use the word "veld" instead of "gebied" here
Or maybe `func(args ...string) Policy` to make it dynamic in case of any future policy that may require more than one args.
Huh, that's kinda weird. I get it, but it's unexpected to me...
same question: why not just switch this to range too?
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Adding a small blurb about why someone would want to enable this flag would help clarify what it is for. Such as something about when providing a custom retry handler and how`ShouldRetry` will be handled with and without the flag enabled.
would be good to have a test for the case when `shutdown!` raises
You don't actually need both tests here as "truthiness" means that `"0"` is false and hence the first test will be true...
this is a file we copy from gRPC, sp ideally it be fixed upstream as well..
Am I misreading something, or is there a mismatched parenthesis here? Please let me know whether or not this is cause for concern -- just wanted to be totally sure before merging, since I can't test this from here. Thanks!
Looks like this is for debugging? Maybe just remove.
You can probably move this up after the `._Numeric` line.
Not sure if this was discussed previously, but is there a specific use case in mind for having this as an API field rather than a configuration option on the controller manager? Is there a specific use case in mind where one would want to choose different backends for individual Clusters/Machines vs having it a global configuration for an instance of the infrastructure provider?
Since this constant is an implementation detail rather than a user-facing API, is it better to define it in a place where it is used?
It seems a little odd to have both `host.is_cygwin?` *and* `host.cygwin_installed?` defined (with a possibility of having `is_cygwin?` be `true`, but `cygwin_installed?` returning `false`). Do the docs clearly explain the difference?
Let's move this up next to the `id` as we usually have `className` as one of the first props.
Can we expect adequate information emitted to the log in case either requiring preloads.rb or doing the requires in preloads.rb fails? If the answer is yes, I think we can merge this PR right away.
Also this probably should be `error.As()` or something like it.
Let the Kind, APIVersion & Metadata follow the rules followed by Volume. What is the reason for a change for snapshot struct ?
I prefer to translate these `else if` into `switch` for more readability.
I'm confused, what did this actually fix? Is there a reason we are setting `err` in the parent scope to `nil` in this round-about way?
maybe say "returns the default cost method that returns an object of cost 1".
This looks like an "ES Module" to me. I do not understand this TODO.
I don't think this is correct. When `compiler` is not given in `.travis.yml`, the announcement will be `--version`, which results in "`command not found`" (though not critical), and the cache slug will lack this information (also not critical).
In general I'm a trying to understand the reason behind this PR. Looks like if a blob (name) already exists we check if the contents are identical? In what scenarios this is not the case? When we want to publish a package/asset that has changed but still we want to use the same version?
This is no longer needed and should be removed.
minor: skipOSConfigMetadata, otherwise, the name sounds like a boolean
discipline vs. Discipline? Not sure of which is correct. Also not sure if there is already an existing string const.
I also do not see any usages of this import. Is this a fix for a crash?
nit: a switch perhaps?
I feel the name of this function could be better, conveying it's a predicate. Something like `HasDockerTestEnvironment` or `CanRunLocalServerTests`, etc.
The abbreviation for "context" used extensively inside DR is "cxt", not "ctx", so s/MCTX/MCXT/.
There wasn't any special reason for this to return a pointer, right?
Not sure, if we should do it the other way round. If you ask be in the middle of the night, whether Interface should return true as "isInterface" and what Annotation would return. I'd tell you, Annotations should return false.... I want to say, on first glance, I'd say, it's easier to have "isInterface" and "isAnnotation" rather than "isInterface", "isAnnotation" and "isRegularInterface"... But I see, we also have "isRegularClass".... We still have the possibility to change the semantics of those APIs in PMD 7 *Update:* Or in other words: What is less surprising? That isInterface returns true for annotations or that it returns false?
Explain why this property is necessary?
networkVarPattern (etc) then?
All these hand generated mocks can be deleted. I think we already moved everything to gomocks.
The rule renderer isn't meant to be stateful so probably best to move this out of here
unrelated to your change, but I don't think that this is correct anymore. We also seen to remove application support from `primaryNodeUnupgradedProtocol` for the test to be correct.
Update after command rename
:+1: to inlining this.
I think you can use `build_stubbed` here for the same results but with more speed.
Are these protected by any kind of lock?
This will always generate a label for the first keyword, which means this will be a label linked to no element after the first keyword is entered. This label should be generated inside the `values.map` next to the `<TextField><Input /></TextField>` it is for, because the ID changes based on the index. Also, we have a `VisuallyHidden` component I'd prefer we use over the CSS class. Building as many things out of components is more React-y. Admittedly it's sort of a preference, but it's why we have the `VisuallyHidden` component. So let's use that instead  
used named path (`proposals_path`) instead?
I think we should keep this dynamic config knob for operations purpose.
Does this make more sense as `trails/_trail` now?
Don't use relative paths. src directory is already on the include search path
Please add "Array" back, right now it's not a proper sentence.
check it is != 0, just like `EVMNetworkID` above
Please remove this TODO, since they will not apply anymore after you are done. :) Can you please remove this everywhere else in this PR?
b did not mean branch - it meant the next version - so probably better to be able to release from a tag on the branch so we can create a hotfix branch of the 1.4.1 tag and tag it 1.4.1b and then version is picked as 1.4.1b
why do you rename this function?
Hmm interesting. Do the tests check out on this?
If you need only test db, use `memdb.NewTestDB(t)`
But if we're on the merge deployment, and the next one is the booted deployment, we'll still be inserting between the merge and booted deployment, right? It seems like we would need e.g. `met_merge` and `met_booted` vars to keep track.
Maybe it would simpler to ignore opt_port if type !== 'number'?
nit `non-standard` might be a bit subjective - maybe "Cron schedule {blah} is in an unrecognized format. Dagster cron strings must consist of five characters separated by a single space chacater".
run `make lint` to fix
Please do the same for the DebugFilter a few lines above.
This was the request that was often causing the test to fail as an unexpected API failure (or at least one of them   ).
The ignore import above should be unused now and can be removed.
savedStates is for confirmed states, not needed in working set
I think this can be called `HasField`, because that's what it's doing. It really is independent of revision.
Typo, should read `firstTimeEmptySubject`
typo --> gloabl
If this is needed for testing, you should use `pytest --log-cli-level=INFO` instead.
Even though the debug parameter is effectively ignored, should this default to `false` instead of `true`?
this file is model generated by protobuf, just for compatible test it's better not change it.
nit(2/10): `topology && topology.description != null`;
What is the plan when we deploy the Crawler VM project and eliminate the Clump model?
The `CLIENT_CONFIG` is "client_config" with underscore, so we can't reuse it in the second arg.
I don't think this needs to change. Can you go back to the previous implementation?
/go/pkg/mod/golang.org/x/xerrors@v0.0.0-20190410155217-1f06c39b4373/adaptor_go1_13.go:16:21: Frame not declared by package errors (from `typecheck`)
This method should behave as intended, to block until it reads an EOF from the other side.
Don't extend an instance initialized by `Struct.new`.
I think it's strange, whether `assert cfg.nms.type == 'nms'` would be better.
Let's keep it to avoid the diff
Does this mean the list operation is done for all the namespaces? How to list the volume replicas per namespace?
redundant null check?
Why are you passing out the Message?
I think checkCoinbase is not skipping checking coinbase. Instead, true-> checking num(coinbase tx) = 1, false -> checking num(coinbase tx) = 0.
Nit should be using `goimports` to format the import statements with standard libary imports first, new line, followed by non-standard library imports.
Nit: implement the methods for these interfaces explicitly in this file for consistency. It can be passthrough.
Dropping and recreating would delete all t he previous records, are they any important?
It looks like this error_code field is used to return a string to the caller, not just a const input string to be consumed as in the rest of this PR? If so, my personal preference would be to leave it as a std::string* instead of a reference; I don't know offhand what the VL coding style dictates.
why do we need to explicitly declare these fields?
Why are we renaming all of the tests?
I don't believe this is correct. Consider the query, "select a from t1x where not(b = 0 and c = 0)". When B and C are both null, both equal predicates evaluate to null, and the AND evaluates to null. The NOT then also evaluates to null. The WHERE clause should treat the result of the NOT as false. But with this fix, the result of the AND will be false, making the NOT true. There needs to be three cases here for ITM_AND: If the first operand is false, then the AND is false. If the first operand is true, then the result is the second operand. If the first operand is null, then if the second operand is false, the result is false otherwise the result is null. Similar logic needs to be added to the ITM_OR case.
should this state that we're falling back to `:acceptable_exit_codes`?
any reason you're assigning to the local variable 'id' too?
Doing a quick search, it looks like there are other places that would be handling this promise rejection. How did you confirm this is not needed?
highway have the same problem we can add a new method in invocation: mergeContext 1.if new context have more items, then addAll to new context, and replace old context 2.if new context have less items, then allAll to old context directly.
There are unneeded parens here, but I'll fix it up when merging.
The character class in the regex should probably be "[a-zA-Z0-9_]".
If this is a base method that could be used by others, should you hardcode 'GCS uploader' here?
Same as above (HTTP in upper-case)
question: what is happening here?
This class is never used, don't import it.
I think the `undefined` checks still need to be removed from here.
do you really want to change the behavior on foreign key ?
The use of `#should` was triggering an rspec depracation warning for me, which is why I switched this to the rspec 3 style.
in the current implementation, both schemes are supported (you can call either `/bzz` or `/v1/bzz`). i would suggest to keep it this way
We can revert this to reduce the diff of the PR.
Can you say what exception will be thrown in that case (or add an `@throws`, below)?
I deleted this because `WellFormed` is immediately called by `verify.TxnPool` below. Can someone please double check this for me since it's... pretty important
This could be an integer property if we supported explicitly setting non-string-valued properties.
Will be good to have the iris interface moved to geoviews. Could this be done for 1.10.6?
Its betet use MockedObject
I think i'd prefer this override to be in the test helper instead, if that's possible?
ITYM to flip this one...
Is it really worth expanding our public API for this? After all, isn't calling this the same as calling `notification.fully_formatted(...).lines`? If so, I'd rather not widen our API (and thus, increase our maintenance burden) when it's so simple to get all the lines already.
Minor: Hmmm...is it worth setting this explicitly for the tests that it affects?
I think you are missing `cftime.DatetimeAllLeap` here. That said, all of these are subclasses of `cftime.datetime`, so I think you could get away with just using `cftime.datetime` here, rather than enumerating all of the different subclasses (since `cftime_types` is only used for instance checks).
Is there a unit test that covers this regexp? I am afraid that changing it might break things =/
This exits if `-d` not specified which isn't exactly what we want, right?
We have a `stop` method here, we should probably be calling that instead of just exiting. There could be important resources to close or cleanup nicely now or in the future.
here, you want to use req.GetXattrOpt() referring to the in line 514 of api.proto. This will be nil if not provided. See the example above on line 801 on this file
Is this explicitly ignoring the effect of deleted rows on partition metrics or is it just that you are short circuiting any delete files (as we can't use them anyways)
Should the interface have 2 `ParseHeaders` methods?
variable must be in camelCase => $newStock
`instanceUrl` should be `cs1.salesforce.com`. `communityUrl` would be `mobilesdk.cs1.my.salesforce.com`.
why is a buffered channel larger than 1 needed here? the separate goroutines can just try to write to the channel with a select-default block, and then it is not needed. i find the current implementation a bit convoluted, maybe we could simplify it a bit? not sure why it is needed for example to communicate an empty result. these patterns can be simplified using waitgroups
This looks legitimate - Would cause a classCastException. But have we ever seen it in the wild?
Please log once here at Error level "Failed to connect to Typha, will retry..."
confusing naming. Identity from "id" package :/ why we need alias here? (and in other imports)
Why did you remove more than the asked command?
So the tests run only when the db exists? Else everything passes?
Mh... `MustBeRethrown()` above already logs `ex`, so `ex` will be logged here for the second time. I think this line must be moved to before `MustBeRethrown()`.
nit: this should be down further with the other github imports
`pylint` wants to know why this `import` isn't at the top of the file; and it's kinda right
This is bad. It is not a NULL-terminated string here.
ticket for the 4.0 epic?
This check should be after the HIP_INIT_API to ensure HIP tracing & lazy init works correctly. Also return should be wrapped in ihipLogStatus() so that logging works correctly.
maybe 'standard Tukey boxplot definition' if it is standard? Otherwise sounds like it is just *a* definition for boxplots...
We should never skip unit tests, but instead fix them. Look at `pytest.raises` for cases where we expect an exception.
Note to reviewers: latent, dedup import
Fixes test failed in some cases
This is basically a repeat of `main-is-top-level.js`. I suggest having these 3 checks point to the same evaluate file. You can change what element they test through the rule selector as well as the check.json options property. So you would have `main-is-top-level.json`, `banner-is-top-level.json` and `contentinfo-is-top-level.json` each point to `landmark-is-top-level.js`, and pass in a different `options` object which tells it what element you're trying to test.
I'd like for all of this to be dynamically configurable at some point, but it doesn't have to be in this PR. Can add it to the future SIP or create a separate JIRA for it, as you think would be appropriate.
This makes me wonder if the TBufferTransport should have a size limit that is configurable, with a default of INT32_MAX, and then the test can make a smaller one like 4KB, and write 4KB and then one byte more, instead of using up 2GB of memory.
I'm confused by the name. The string was a Hive string but it isn't any longer? Why should we care? (I imagine I'll find the answer later... there is some different semantic that we want downstream...)
@ivanbogdanov Does this fix the first time load gray screen issue that @wmathurin noticed?
I know it has no effect but my eyes can't help. Is that line not too long?
This is no longer called in any of our unit tests, right?
shouldn't this be `&& opts[:localize]` (i.e. both nil and false skip localization?)
`classification` is misspelled
This should be (POST,DELETE) `/pss/subscribe/{topic}` for subscriptions and there should be `/pss/send/{topic}` for sending.
Is there a reason to remove this attr?
We want to show this button only when there is a page for us to connect to. There is no reason to put the Browse Security Info button on the page at all unless we've identified the UUID from the KB.
Line too long
Maybe this was added incidentally. We don't need this function in the interface.
This was a bug in KBFS-2071 -- oops.
Should be "should fail if the **dt element** has a parent <dl> with a changed role"
We can do away with assigning the response here too.
I don't think this is right; in Rust terms it's like a `&mut String`, in Java `StringBuilder` - it's not a return value from the function which is what `(out)` is for.
If `docs` is an empty array there will be an error
Again. This is part of the start up of the server, and the diagnostics are helpful.
Small nit, and sorry for not spotting sooner.. this should have `omitempty` on it, else when marshalling nil values into json, it will be `caBundle: null` which trips up some JSON parsers
Sorry, one more thing... You should use `app.config` instead of importing it directly. See the code below.
Keys.COMMAND seems to be an alias to Keys.META. That isn't mentioned?
Moving this code from compat to core shaves 47 bytes out of compat and only adds 6 bytes to core so I thought it was worth it.
I still don't seem to fully understand this. Why are we testing the host if DR_HOST_NOT_TARGET is not set?
Hm, I don't think the extra flags are doing any harm here, but it does seem like `--help` is the only flag you could *actually* use with this command. We might eventually want to separate those out.
This test modification isn't correct. This task could run immediately and you wouldn't be able to tell if OnCompleted was called or not.
@LukeTowers I think I would prefer that we don't force it, on the basis that: a) some people would be opting to configure their web server to protect against this kind of attack and would disable this feature in October CMS to get a small performance increase. b) it might be a bit misleading to say that `app.trustedHosts` set to `false` disables the feature entirely, just to have it be overridden here regardless.
Error return value of `s.idx.BuildIndex` is not checked
The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?
nit: hasBytes should be hashBytes
I believe this `Stop` function _is_ called with deferred.
I don't believe that the `assertDictEqual` call can pass without `api_response` being a `dict`, so this second check isn't needed!
I guess this is ok for backwards-compatibility? Maybe it'd be better to check arity in the helpers? Or just call it out in the release notes, because there are at least a couple projects on github that overrode `initialize`..
Can you please move this interface as class in common Constants file in az-core module?
Why do you configure the UART like this? It's already configured by default.
`campaignSource` is unused (from `structcheck`)
Could you please add docs for this method?
unrelated, but required fix as metrics branch got broken with the latest main->metrics merge and conflict resolution.
What is the new result of this file if we keep it the same than before? It's just to picture easily what changed in this MR :) (thinking is hard)
What about tuples or pandas series? Do we want to support lots of different types or force a single type?
Do we want to make this configurable?
Is canceled considered failed?
Please avoid wildcard imports.
do not print the payload since it might be corrupted, you can get the data with _debug.http.response_payload configuration property
Use `ADIADIOS2_HAVE_HDF5`, not `ADIOS_HAVE_PHDF5`
Here `global.VERDACCIO_API_URL` I'd use something different as `global.TEST_VERDACCIO_API_URL` then when you search by `VERDACCIO_API_URL` we don't confuse with `window.VERDACCIO_API_URL`
Could you provide more information on what exactly each of those three options do?
Tiny nit: I would prefer `not selected_file` or `len(selected_file) == 0`, as if choose_file starts returning, for example, tuples instead of lists, this won't break.
You should also call `e.accept()` and `return` so the key press isn't processed further (as we're leaving insert mode anyways).
Use TryGetValue instead of catching exception
`show_img` is not normalized while `one_img` is normalized. And line 139 pass `show_img` for pytorch2onnx function. Is this expected behavior?
We'd lose the data here from the original teardown_exception and only get the dump_exception - I fear that that could make the actual error difficult to track if it cascades.
This seems like a more interesting change. Maybe we should re-name the PR
We've had that test on iOS for years.
do you mind sharing what is the reason for this change?
Not sure why these are up here   can we move these down to be part of the `@return` tag instead? This is what we usually do   (e.g. `getCurrentEntityURL`)
revert this for parity
Why do we have || CharInfo::UnknownCharSet here? I do not see it it in neighbouring statements. This is just for my understanding.
Beware of exposing the underlying features directly. Any mutable fields should be reset per request.
how come this is false?
I think this may need to be `SetCertificateRequestAnnotations` as it returns a `CertificateRequestModifier`  
I will add this to my PR  
Because this defaults to `{}` if `global._googlesitekitUserData?.permissions` is `false`-y, the checks below around `state.capabilities` always result in the `!! capabilities === true` path. This shouldn't have a default value of `{}` if there's the possibility that `global._googlesitekitUserData?.permissions` can be `undefined`/`false`/`null` legitimately.
What kind of dependency is here, I think we have own implementation of event wo external dependencies
Is it just preference or on purpose that using slice of structs instead of slice of pointers?
Is it safe to assume this surface is a toplevel?
Currently update is set as @plan.editable_by?(@user.id) Which one is the correct behavior? I can see a case for only owners/co-owners to be able to set visibility, test status, and other plan details
So, such tasks that could possibly not meet the deadline will never have a chance to run? I think this is not nice behavior, especially for those projects who has sometimes some very small tasks after the big one.
you could probably use `const` for both?
Should we be using version 3 now?
Does the name suffix hardcode something? Not clear how changing the name fixes this.
Lets move the whole string to next line for better readability
/javascript/firefox-driver is the Selenium implementation of a WebDriver for Firefox. Since it generally isn't W3C compatible, it shouldn't change. We can just drop this change.
It would be helpful to include some reasoning here. With the reflection model, it is often the case that names are not available.
Do we need it? If right now it's toml
What is this sleep here for?
Probably best not to have an empty test....
Why do you need to include this using declaration?
This only updates the metadata and not the actual thing you are trying to solve for the docker hypervisor.
Seems kinda dangerous - what if models length is different from paths length?
any tests for nextPrefix() ?
While we're changing this, I wonder if we can do away with `extra_controller_params`.. Maybe a new type of `solr_search_params_logic` that appends the attributes?
Curious, is there a way we can get around this without suppressing?
@alastair, because the `insertId` for two listens with different metadata and same ts was the same, only one of them would get written into BQ. A question is what would be the ideal way to write tests for stuff like this, so that this doesn't break again?
I'm halfway tempted to disable this for all https connections. Do you know of any clients that actually renegotiate for any reason?
Can you please revert changes to files in the `thoughtworks` package? This is legacy code and we will eventually phase out RC.
Created a single error so it's not interleaved in log
looks like you added newlines after blocks in a few files - I generally like newlines before/after multi-line blocks _except_ when the end the block is directly nested inside another block (eg: two `end`s next to each other) what do you think?
Why do we need tristate logic (pe, foss, nil)?
I think this mutex is only used here. Remove it.
You need to create an API for this class. This class should follow roughly the same dependency structure than RemoteAvailableInstallersPlayOnLinuxImplementation / RemoteAvailableInstallers. Maybe we could use a inner class here?
Closing over the closure arguments is a neat trick :+1: Love it :100:
I also took advantage of the changes to change the Timestamps used in this notification from "java.sql.Timestamp" to "com.yahoo.rdl.Timestamp".
if does not have a class I guess the exception should be thrown because we cannot recognize the type based on it?
Hunspell/C++ stems that a bit differently from Lucene, but in a controversial way, so I removed the check instead of changing the expectation
Surely all the above should go into `common`.
let's do a pointer cast of nil, similar to the `MapRouter` above
'fail unless X is a non-zero number' it will also fail if X is a byte string
When we undo this for 1.3, do we not need to leave these three entries intact to avoid renumbering of the subsequent constants? If so perhaps the changes to this file should be pulled into a separate initial commit so we can just `git revert` the remainder...
It's stored in `PodDBAdapter.VERSION`. I usually use the expected release version code for that change. As this will be released in AntennaPod 2.2.0, the code would be `2020000`.
I think the docstring here should include the CLI arg `--alert.query-url` just to make it clear to users which setting this uses.
this is going to throw for frontier transactions post-london
doing this as a binding map was insane, but with the ConstBindingIterator to hide the binding->index gunk and avoid the hashes during access it sticks out.
Having "wf" prefix doesn't make sense anymore. Please remove.
Hmm, I'm surprised if we don't already have a "find all unpublished datasets" method but I don't really know. Maybe @scolapasta knows.
As a long term thing, would it make sense to move the resource names as keys under the requirements map?
Is this going to be configurable? If not, it should just be removed for now.
This breaks tests on IE because this will import an `esm` bundle. For that reason `sinon` is available as a global in our test suite and never imported. The global is aliased to the proper `es5` file.
Should most of these non-globals be static?
body is being used here for the first time without every being populated. This will error. To run tests do `./go clean test_py` and that will run the Firefox tests
@joshyrobot, I think you can just use localeCompare with only the first argument and leave the other arguments out (here and all the other lines changed). It seems to do the right thing, and then we don't have to worry about these extra options.
Feel free to disregard, but I've been trying to use `Mapping` and `Sequence` instead of `Dict` and `List` when possible, because they communicate that the type is immutable, and also are covariant.
yess so much easier to read in order like this!
hmmm, ok, this is interesting -> Lukasz definitely uses rewards traces
Maybe it would make sense to use `webmVideoCodecs` here and just append `vpx`. I'm not sure if av1 is currently supported when transcoding to webm though. It looks like it can be included in the mp4 transcoding profile now.
`await this.driver().loadExtension(path);` should work
what changed in this line?
use function to check it. - don't do everything in main
Can we combine this with the Rollback API? We could still support the `rollback` method here, but combine `Rollback` and `CherryPick` into something like `ManageSnapshots`. Then we could reuse logic for enforcing checks of the current snapshot. What do you think?
remember to update the hash once the upstream PR is merged  
there is still `2` spaces after `a` here.. :P
would you please rename the message prefix to: [in_syslog] ..."
we should also skip the e2e flow aggregator tests if the Flow Exporter feature is disabled.
Took the opportunity to fix the import ordering.
Why not change the other samples?
Does this mean we now always include the dictionaries even if they're empty? If so, we should make sure that this doesn't break the Agent (even older versions). It's possible that it doesn't handle empty dictionaries well.
I don't get why are we baking new hash structures to represent phases, sections, questions. We are not only loosing the references defined in models but also we have to figure out keys and values for this newly structures.
this needed to change? or it was just some formatting thing?
I think we need an issue to track that chain sync omits BLS messages, and then to fix and test it!
Please change this back to `Error saving WebCal-calendar` (and `Error saving WebCal-calendar` only)
I don't think this is the type of network we should be putting in our named networks.
I guess it's not no-access to match Windows where guard pages are readable.
Why was this change needed?
`DeploymentConfig` is only for deployment configuration not Piped configuration so `ds.DeploymentConfig.PipedSpec` is always nil. Instead of that, you can have Piped config with `e.PipedConfig` because it is placing inside `executor.Input`.
This file shouldn't be in this PR
This need to be checked with linux. AFAIK, we have this file in our bin directory that is a link to the system file.
Why not use the JSdoc annotation as it did before?
We don't accept empty words for lookup anymore, again
What is the implication of removing these from the test? I thought the idea was to have all types supported by `docstore` here, and do things in the drivers to make them support them (e.g., list of size 2 for complex). If you're removing them because firestore doesn't have native support, then we're going to end up only testing the intersection of all types supported by all drivers; we need a better way.
It's somewhat confusing that the `preload` parameter shadows the instance variable; maybe rename the instance variable to `globalPreload` or `preloadDefault` or so to prevent future confusion?
I think this is a good way to do it. :+1:
~~I think lines 65-67 should be moved into this else clause after `type = ...` Else, it is a bit confusing why we check the enclose type validity a second time~~ Nevermind, will do some refactoring, myself. But thanks for "fixing" this!
Is this a bugfix?
Not sure you need the initial ``not_updated`` as ``any([])`` evaluates to false.
minor nit - add "persist-filesystem" and "persist-directory" into commit message, as its something people may search on (maybe applies to a few other commit messages)
Even if we want to keep in original case - domain will be lower-cased.
before php8 "goto" was a reserved word and was not allowed as part of the namespace. Now test checks for validity of plugin namespace according to PSR-4
@sjplimp just checked this API in the latte repository master branch (which is what Install.py downloads) and this still does not provide the 18th argument. We cannot merge this pull request until this is available. i would also suggest to implement a second binding, a function called latte_abiversion() returning an int with an ABI version number (starting with 1). This way, it can be tested, whether the ABI expected by the LAMMPS interface and provided by the library is compatible *before* calling the `latte()` function and risking a segmentation fault.
If it's not the root package, or if it is the root package but we don't add the psudo :pleasings rule there, print an error.
Again, you don't want to depend on glassfish.
New generators should have version `next`
I made this change because, while trying to debug, in Visual Studio, the `IntegrationSignatureTests`, this property getter was hit and interfered with my ability to complete the debugging.
Better call it `CleanUpMirrorInfo`?
Shouldn't the logic be: * the result is a mismatch if either is a unix path but the other is not * if both are unix paths, then perform case-sensitive comparison * if both are not unix paths, then perform case-insensitive comparison
What's the point of this class?
Should really be `one()`, not `one_or_none()`
Why the override on the env variable, wouldn't we want to use the value set from Prow?
Oops, I missed this initially.
Please don't make unrelated changes or let your tools make unrelated changes.
nit: this `if` isn't necessary since we immediately follow it up with a range over the slice, which works fine with a `nil` slice.
Please just enclose if blocks with brackets; this has created issues in the past so I'd prefer we don't use them
Surround code issue. RequestError may not be null terminated when the RequestError size is less than the length of the string in p_buffer->errorText. Also, this can cause core dump due to segment violation if length of errorText is less than the size of RequestBuffer.
Please update copyright year.
The formatting is a little off here.
This should be computed('i18n.locale'....
Hmm I think I might've messed up this condition here... Need to look more at it
If we make a new backbone class, we don't need to support `BasicBlock`
You dont use this dependency anymore
is this deliberate? or testing?
Does it make sense to check for "Created" here as well? Or should it return an error in such case?
I believe this was happening for several different flash messages - should we add `now` to all flash messages? (there might be a downside to doing that, but I am not sure what it would be)
why does it have to be here? Due to breadcrumb navigation?
Shouldn't this be a `libfs.nullIDGetter` (exported, of course)?
I'd suggest we use `response.profiles[ 0 ].webPropertyId` here instead, to make sure it's based on the profiles retrieved. The value _should_ be the same, but I think it's a bit more accurate like that.
This strategy seems good. Just wondering do you think this is a good time to move stuff out of core? For example, I guess storage, since it's for use by server and not client, doesn't need to be Java 6?
This seems like an internal error still?
Minor thing, but can you use 1.9 hash syntax for this?
We probably want to log the fact that a `MessageId` was not present in the response. In addition the `RequestID` from `request.Request` should be included in the message so that the user is aware of the issue.
Do we need `&=` or `=` is sufficient?
This line is too long
this makes sure there is some padding space around the size column
nit: grammar: instruction
yeah, can change to 8545
if there is an tag of the same name?
is this a breaking change? If I'm not mistaken, this is translating a user-provided `wtimeout` in the connection string into `wTimeoutMS`
This seems relatively high, is it the recommended value from the etcd folks? Or is this debugging cruft?
Small thing, without the check above this will throw a NoNodeException if the path doesn't exist. Maybe this can be wrapped in a try/catch just for the NoNodeException, so that the more user-friendly message used above can be thrown instead: `throw new KeeperException.NoNodeException("No collection found at path: " + path);` Just a thought, I'm not even sure it's worth it.
@bennothommo can you revert this section? It shouldn't be required.
Docstring for public function pls
This is not valid, a `div` shouldn't be in a `span`. You could apply the `className` attribute to the `span` tag.
@johnduarte I know this isn't part of your code change, but it seems to me that this `curl_with_retries` is not necessary. If the `retry_on` host command is successful, isn't puppetdb ostensibly listening to the ssl port as well? What do you think about removing that `curl_with_retries` after the `retry_on`?
What's the difference between typescript-eslint/eslint-recommended and typescript-eslint/recommended? I really can't get it.
We may create an issue to track this so we don't forget?
this should probably be named somewhere if you want to reuse it.
This is unnecessary. The declaration of `t0` on line 179 is still in scope inside the `except` block.
I wonder if we should trigger a PHP error and ensure it ends up in the log?
does this line cause a panic if it is above the if condition ?
You mentioned this change was prompted because the `before_create` action was actually a defect. This will be done only for a new record; why is `before_validation`, which will be called repeatedly as accounts get updated and saved, correct whereas `before_create` is not? It looks like one would want to assign and activation code, etc., only once.
I think this might be a little more readable in two lines as: <pre> $preferredMarcField = $this->mainConfig->Record->preferredMarcField ?? 'fullrecord'; $marc = trim($this->fields[$preferredMarcField] ?? $this->fields['fullrecord']); </pre>
Do we want to allow users to disable `console` as well? The schema currently says that it only permits a hash for `console`.
for the tag, should it be `requestor_rtt` since the other is `responder_rtt`?
how about a default parameter instead?
I checked the tests coverage and strangely it look like those three lines are not covered (?!). Do you have the same result on your side ?
Can we just have 2017 here @kmova if possible, as i seen in other projects as well( kubernetes etc..), they mentioned only the year when the file has been created.
would be good to turn these into constants.
Maybe we rename this to `command_monitoring.test.js` to match the directory name change? Or would you rather do that as part of the greater test cleanup? I'm fine either way.
Extra empty line detected at class body beginning.
should we do the same for os.Mkdir(criuOpts.WorkDirectory, 0755)?
@csrwng what should we do here? This one is from origin.
During testing, we adopt the score threshold specified in the config file. Here the threshold is only used for visualization, and the variable name `score_thr` can be misleading. Renaming it to `show_score_thr` would be better.
Sort of believe We should put MetricManager in constructor parameter given this case.
The double (and thus triple as seen below) pointer gives me pause. I could imagine providing some larger API surface to smooth it out, but it's likely not worth it.
Nit: each field can be on a separate line to make it visually easier to read.
I believe it's misleading name for the condition. I prefer "element_to_be_disable" We can have a condition, when element is enabled but we can't click it, because another element overlays above it. So, If we use "unclickable" we might mislead people, who use that condition to verify if element can be clicked
We don't need that one anymore?
Similar to the code block when we use prefix, maybe we can unify them to base?
Why is this necessary? Just in order to get an indexed loop?
I'm not quite sure that we preallocate memory. Do you have a good reason for that?
Add space between License and nameapace
@DanHarrin please add a `return true` at the bottom of this method, as the docblock indicates a boolean return value.
The serviceDirOnHost[0:1] was completely wrong. It wasn't just Windows, glad you got this fixed!
Can you add back a deprecated `destroyLinks` method for backward compatibility? It can simply proxy `destroyResourceLinks`, and we can remove it in the next major release.
not sure about removing this ping @Soullivaneuh
`s => s.IsHidden == false` What's the purpose of adding this?
Using non-keyword args after the keyword arg (parent-self) will cause a SyntaxError.
Can this be moved to QbftBlockHeaderFunctions class as it is only used for qbft
It looks like you've removed `bisect_round_finished` but kept `bisect_round_started`. Seems a little odd that they aren't paired. Not sure if there's anything to do about that though...
Almost makes me wonder if this should default to Rpc-Context so everything defaults under Rpc-
Werid, the checksum between this file and the one on branch `develop` is the same not sure why it's showing a diff
I don't really like the name of this file, especially the encoding of an implementation detail (the fact that it's a table) in the name. Can we just use `_message_body.html.erb` instead maybe?
nit: these imports were in a separate group to ones from this repo
should calculate numEpochIn1Year = xxx and <= fairBankEpochNum+numEpochIn1Year a.foundationBonusLastEpoch just happens to be equal to 1 year now, but should not count on that
instanceID should stay the same for a AWSMachine?
And how is that related?
The handler will be installed twice if you don't remove the below one.
Put a comma after the last parameter of a multiline method call.
what does this change do exactly?
We don't need to cast to client here. (well, from spell gem not AA etc) We should also make sure the charm is a casted spell before calling SendSpellBarEnable.
I'm breaking one of the rules here, it feels like the right thing to do. Open to alternative suggestions.
Here (and on line 158 as well), would it be more efficient to use the String end_with() method? Not tested
How about renaming `escape` to `use_path_normalized` or something to better indicate that it is a selection between `path` and `path_normalized`?
Or `QUIC_LOG_LEVEL`. Which one do you prefer?
I like when `@deprecated` contains how to resolve it - eg. "use `SplFileObject::fgetcsv()` instead". The information in upgrade notes is usefull only during upgrade.
when send log failed, why update the last sent log id?
One or the other should be non-NULL. If segments is NULL, the alloc above will have size zero, which we do not allow (there's no header): it should assert in debug build. So there should be asserts that one is non-NULL at the top, and if there really needs to be some kind of defensive check down here, it should cover the alloc too.
File is not `goimports`-ed (from `goimports`)
not sure if this has to be here or not tbh
I would recommend to leave out `None` because None is already the default.
I think it makes more sense to have this be a method on TaskStatus. Also, nit, Backend, not BackEnd.
There might other values that we don't support here (eg. `[]`). So it might be safer to check for the supported types instead (string or number).
This adds a case-insensitive flag to the type in the RangeSpec, but I don't think RangeSpecs are written to handle case-insensitive comparisons. Take a look at the methods that deal with comparisons when building RangeSpecs, in file Range.cpp. So, I think you would have to do one of two things: a) disable the RangeSpec transformation for case-insensitive comparison operators (the easy way) or b) change the RangeSpec methods to handle case-insensitive comparisons.
I think this is not the best way to handle this problem. This way every relative path will be converted to absolute path. What if the user would like to move his config directory to a different directory?
Could we public events if `manager.serStatus()`?
Is this intended to be `spells[spell_id].reflectable` here? Edit: Should be `spells[spell_id].feedbackable`, right?
Why did you change this equal instead of less or equal?
just to confirm, so backend will deal with both old format and new format?
Nit: Should we add support for `int` and `uint` in the `values.New()` function? That would allow us to to handle all of these types in one case. Maybe there's a good reason why we don't do that already, but I'm not sure what it is.
This block of changes looks like you removed tests without replacing them anywhere. Did I miss something?
Report listeners are synchronized, even 'though the cache is thread-safe... I've not profiled it, but it may be a cause of contingency. Any better way around this? Also, do listeners **really** need to be synchronized? Can't we just make them thread-safe?
Not new, but nit: _writeLeng*th*.
In the listenstore you catch the exception and then pass it on via Raise. However, here you do not catch the exception. You should catch the exception, but since this is a minor aspect of this page, perhaps show an error message when the count cannot be loaded in time. Then the rest of the page can still be rendered, rather than failing the whole page.
None of the child return null here, plus it was creating an incoherence between interfaces.
We should be configuring the base paths somewhere..
NIT: This shouldn't be a TODO. It is just a note isn't it?
`bbox_feats.shape[0] > 0` requires the number of proposal is not 0.
These changes look concerning. It looks like the old offset (only index) must not have been correct. If so, there are places where `getDataBuffer().setLong(...)` and similar methods are called but aren't updated like these. Are those cases bugs as well?
sloppyReassign: re-assignment to `err` can be replaced with `err := kv.WriteBatch(batchForBlock)` (from `gocritic`)
Curious that I'm not seeing any occurrence of the new error check in this file. Why was it disabled?
line 26 can be removed i think > applicationId: or('config.unsplashAPI.applicationId', 'settings.unsplash.applicationId'),
Should the API have a dependency on the SDK?
While you're here, can you change the casing on this so it is unexported? `nextPlanNodeIDKey` instead.
Note generally it -> It
Just a thought that any further extensions of `buildBinaryFor` signature could be done as `buildBinaryFor(..., opts... BuildOptions)` for better readability.
If you're going to allow people to specify multiple SMTP servers, you should also properly export/import them.
There may be another bug, it looks like we're already in a `if telemetryConfig.Enable` block at this point, maybe that block should be unnested?
this includes the port as well right? should the name be `destinationServicePortName`?
nit: Is this `using` statement still needed?
AsReadOnly() would be better here
Shouldn't this use `'n'` instead?
Not directly related to your PR, but I think here we should create a Type enum (MAP, ARRAY, PRIMITIVE) instead of having 3 flags.
Is this intended to be here? Seems it belongs to a different PR.
shadow: declaration of "err" shadows declaration at line 408 (from `govet`)
In which case will this actually return 0? If there is no snapshot, then there is no `Snapshot` object, right?
You can use `netloc.rsplit(":")` for that.
Is there anything we should do in the event we're unable to renaming the directory?
Why is this necessary?
i think it might be nicer to have a message like: `database capacity: %d chunks (%d bytes, %d megabytes)`. counting in bytes is so 90s :)
_nitpick_ I'm thinking about whether this method should be in the previous commit or not. I know it's not yet used there, but in theory, neither do UUID itself.
this dynamic config should still be valid, i.e. operator should have the ability to control each individual task queue just in case
Where do we _get_ tag values? edit: I mean, where are these `GetFoo()` methods called from? It just seems weird to me that we are getting tag values from spans. I thought we only ever _set_ tags on spans.
Duplicate call to the method. Better to put in a variable.
both edge and normal need to set this, so set it to be default action?
if we keep this, can we stick to our convention of using UPPER_CASE for constants? Otherwise this looks like a floating variable to me.
Can you please make each of these in a separate line. It will be easier to keep them sorted, and add/remove.
assignments should only be cuddled with other assignments (from `wsl`)
Encountered this because I had a stray comma. Figured I'd tweak it a bit.
The `response` variable is not used, it can be removed, also the fmt.Errorf.
`maxWidth: width * 2,` Potentially, this will be the same as `getImageUrl`: 80px or 500px. I can't verify this - need for normal LiveTV tuner.
Should have json tag
Should it really be done on test side?
Would you mind removing the default parameter above? (I doubt I'll ever use defaults again since you still have to protect against callers explicitly passing `null` or `undefined`)
Merge with next condition
nullability does not apply to headers type (that is always an object)
Separate it to different methods :D Invoke method look's like old fashion portal class :D
I think it would be a good idea to wrap this in an if like the stats above, just in case.
The vendor prefix is still being used on Chromium based browsers like Edge Chromium and Chrome. Did you mean to remove this?
do not toucm NDM please - there will be lots of conflicts
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is a bit of a throwaway field in the xunit output, it doesn't impact anything on EVG, should we just name it `integration` now?
This LGTM, but I'm curious if this fixed a specific error you were hitting?
Nit: this table's row key map -> this table's row keys map
File is not `goimports`-ed
`LongRunningOperationDetailView` already has `isEmptyOperation`.
It might make sense to log this.
Please move these up to line 86 so the numbers are in order.
This looks like an unused import to me?
Is the idea that ``self.keys[0]`` here normally matches ``init_key``?
Don't call it GPU mining, call it `externalMining`, here and throughout.
namespaces in this file need a sorting
The formatting of this is a bit strange; I'd suggest collapsing this back to a single line, and moving the `&&` to the beginning of the second line to meet the line length restriction.
if we are returning `nil` from an `else` I think we can just remove the `else` (and this method will still return `nil`)
This won't work. For the flag to be passed to the plugin, it should be passed as part of the --plugin argument. --plugin "yarpc --sanitize-tchannel"
spotted a bug.
nit: Looks like this can be removed now
Maybe add *key* i.e. `"The \\`deploy.on\\` key should be a hash (dictionary).`
Out of curiosity, why is `condition.any?` also necessary here?
worth mentioning the same warning here as in `md_util.go`, I think.
Hmm, AFAICT `*out_variant` isn't explicitly set to `NULL` in the `ENOENT` case.
maybe at least pull the file identifier arg out of the if?
I understand that it is a common practice in this script to add indexes this way but why don't we check index existence before adding it? I'm not very familiar with MySql but it's can be done easily in MSSQL and I'm pretty sure that there is a way to do the same here.
Should we rename this to tailProbability?
This doesn't look like it has as much coverage of the recursive code as it once did.
@justicz Why are these switched here?
This is very unclear what Server means. We need a better name, maybe ServerExtension?
For consistency, shouldn't this use `SwaggerModeler.GetMethodNameFromOperationId(method.Name)` as above? I'd just reuse `"Additional parameters for " + SwaggerModeler.GetMethodNameFromOperationId(method.Name) + " operation."` here, `string.Format` with `CultureInfo` is complete nonsense here anyways.
Probably best not to have an empty test....
when Op is illegal should return here?
Was this our code @csrwng
This should either be `hint` that takes a string to render inside of the partial container or probably better you should just render a separate hint field above the code field in the same tab.
Shouldn't it be optional?
Might be worth sorting the replacement items so this is deterministic.
I would name this `clef-ethereum-address`. We already have a bunch of addresses in Bee, and people might wrongly think that this is yet another address
think it should only be in create_dist
Would be good to UT this case
Use !! to cast to bool, rather than the ternary bool antipattern.
`go.sum` needs to be updated for this. Please run `go mod tidy`
I'll be interested to see if our gettext rake tasks will pick up on this text to translate
Is the publicLink mostly empty? I'm just wondering how much this will bloat memory usage as sometimes rclone has millions of Object~s in memory.
This leads to a small "leak" (mostly theoretical only though), if we don't want it this could be created in `initialize()` and destroyed in `finalize()`.
same here, replace `ks` and `kc` to something more related to Source.
`this.ieService_` should be initialized to null in the constructor.
INCR_BATCH and DECR_BATCH could be exposed as tuneable command line options but that might be too low level to expose. I think keeping private for now where "in the know" folks could use to try and tune makes sense. These values were choosen mostly "at random" and have worked out for us thus far.
line is 138 characters
I think this will break the case (you can try even with /usr/bin/bison as value): `YACC="/path/to/bison -y" ./configure` I wonder if we should use AC_PROG_YACC at all or simply use AC_CHECK_PROGS since we want to use bison and not another yacc
I thought that the main was in catch_qt.cpp?
what about the line below, forceUpdateCollection?
i noted that we are inconsistent with when we indent includes (see atomics.h which is rather different) and for example cpu.c which is also different. we seem to have 3 styles.
:thinking:, the line number here is the line of the example (`example.location`), that's probably why I finally chose to display the example title because it's what can be found on this line, and saying that the error is from there is confusing. But presenting the actual failures is indeed better, so maybe we can get the failure actual line number from the exception backtrace and then output two distinct lines for failures like this one?
... is probably automatically vectorized, since it has the same speed as `System.arraycopy`
What if you remove this line entirely from here?
Going with definition from here: > Does Unicode have private-use characters? > A: Yes. There are three ranges of private-use characters in the standard. The main range in the BMP is U+E000..U+F8FF, containing 6,400 private-use characters. That range is often referred to as the Private Use Area (PUA). But there are also two large ranges of supplementary private-use characters, consisting of most of the code points on Planes 15 and 16: U+F0000..U+FFFFD and U+100000..U+10FFFD. Together those ranges allocate another 131,068 private-use characters. Altogether, then, there are 137,468 private-use characters in Unicode. It looks like we are only ignoring ones in BMP and not the supplementary private-use characters. Shouldn't we consider the supplementary ones too?
windows size might be off
can you remove this unrelated change?
There are various places where `setZoomFactor` is used but `fuzzyval` isn't set: - `__init__` and `on_config_changed` (should be okay as `init_neighborlist` gets called which essentially does the same) - `zoom` (calls `zoom_perc` with `fuzzyval=False`), which is used by `:zoom-in` and `:zoom-out`. Are you sure this won't break those calls? (Yes, I know there should be tests for this - I'm working on that.) Other existing places probably should get simplified.
It would be nice if we have some docs explaining this. Core luigi should avoid having hard to understand code.
nit: perhaps calling this `config` would be more clear?
You'll also need to adjust `FakeWebTabAudio` in `tests/helpers/stubs.py`.
`k` is unused in PutHash
This is not the right exception class. There is an InvalidSelectorException class that covers bad locators.
I think that there is a general consensus of trying to avoid this kind of mocks in the new tests that we write. I would suggest to have tests using fake service implementations. In this case, we can have a fake entry service. Examples of how tests have been written this way are the tests for the `spire-server agent` and `spire-server bundle` commands. It would be great if we can have that kind of testing here also. What do you think?
I think something like `size_res` would be more descriptive.
`saveSession` allows easier mocking - just save function which You need, instead full interface
Make this consistent with the other definition please `'false'` vs `false`
Nit: Change is not needed for this PR :slightly_smiling_face:
These functions only ever read from the API and should always be reading from a cache, so I have made that explicit by expecting a Reader here and supplying a `cache.Cache` as the client.
wow :+1: , i do not even know how this test works.
Doing this adds the actual resources themselves to the dictionary. I think for now, there's no way to know what the resource config provided may be, as we don't permit resource config on `build_solid_context`, so this part can be omitted.
Do we still need to return the `Response` here?
Maybe `DEFAULT_GITHUB_API_ENDPOINT` would be a better name, since we refer to this as an API endpoint elsewhere?
End with 'Method', so: - FlattenedAsyncCallSettingsMethod - FlattenedAsyncCancellationTokenMethod
Should we allow `string|string[]` here?
I think it might be helpful if we add `Default value: False.` on the end of the summary.
This loop is going to burn CPU if len(s.q) == 0. Maybe a small sleep?
We can just include the public UDPv4TransportDescriptor header here ...
Picking nits here, but as a Dictionary already is a collection of KeyValuePairs there's undoubtably a way to code this that doesn't involve constructing any new ones.
on the one hand I like how little this is doing. On the other hand, `inbound_mail_parser` is doing most of the work here so maybe it's not as helpful as I originally thought
Can you judge the type of error?
For some reason these tests started failing due to an extra `NEWLINE` returned from `h.query()`. Have not tried to check whether this may be a problem for real templates or not, just fixed the failing tests. Anyone with an opinion here?
Hello, The PHPDoc is `string[]` not `int[]`
Do we actually want to split on `\r`? I thought that the "newline sequence" was only `\r\n` on windows.
Need to update the doc for `TelemetrySDK` and `Host` structs deleting references from removed functions.
We'll want to remove this one if we make the assembly version constant.
Can you remove it from the menu instead of setting it hidden? Or are there any other trouble?
We need to pass in the Activity context here, so that LoginActivity is used, and so that LoginActivity can get onActivityResult from the PasscodeActivity. Without this, the application context is used, and we don't get a callback when the passcode is done.
Why do we need this `check_same_thead` to be false? I feel a bit uncomfortable about this.
Shouldn't this return code conditionally? The above line seems like an error occurred.
1:D100: Docstring missing 23:D400: First line should end with '.', not 'p' 23:D200: One-line docstring should not occupy 3 lines 36:D400: First line should end with '.', not 'n' 36:D200: One-line docstring should not occupy 3 lines 48:D400: First line should end with '.', not 'p' 48:D200: One-line docstring should not occupy 3 lines 63:D400: First line should end with '.', not 'p' 63:D200: One-line docstring should not occupy 3 lines 76:D400: First line should end with '.', not 'p' 76:D200: One-line docstring should not occupy 3 lines
I've never seen us do this anywhere else - why here? Why not `address, meshAddress string`?
Could we keep the original signatures as well, so we do not have to rewrite the method calls everywhere and add `null, null`? I think this could greatly reduce the changes needed in this patch
should it be `newsessionqueue` or `newsessionqueuer`? In case we'd like to be consistent
Reason for adding this? I couldn't find where you are retrieving it back.
Wait, does this not work if we do `btl.reload`? That seems odd that we have to have the object in the same state.
Include the key word "translated". Otherwise the reader will find this confusing.
Why is that test different to line 4022 (allocate is not tested there)? Shouldn't that be consistent?
what if I set SynchronizableEntitiesPrefix to "a/b/c/d" in config?
As `DeleteFiles` is not only used for prune this function deserves its own file. Maybe something like `delete_files.go` or `parallel.go`?
Maybe add `@lucene.experimental`? We are exposing (slightly) internal details about `IndexWriter` so maybe we need to reserve the right to change this API in the future ...
MB is presumably 1024 * 1024.
have a relation with a product
This function is also called in various Site Kit module components, where the error object (here `data`) also needs to be passed, otherwise the link to fix the issue won't appear.
That's the code that would prevent any SalesforceSDKTest from running. At class loading time, SalesforceSDKManager.getInstance() would throw a RuntimeException because init() had never been called.
Returning here bypasses all the health check and load balancing features.
when would this happen? backward compatibility?
Probably better to ask @AssadHashmi or another AArch64 expert for a review rather than me -- @AssadHashmi if you could confirm that these status registers are 64-bit despite having only a few fields?
git checkout since this is unrelated to this PR? (running migrations also changes this for me -- not sure why it keeps going back and forth
How about including a flash message that explains the exercises are only available to subscribers of X plan?
The only field being used is the KeyType; Instead, we can probably just make a `keyType` variable here.
Took me almost 4 hours to find this.
Why are we adding it to the integral function?
I don't think you can call this optional unless it's a pointer - remove this?
Nice, I did not know about that