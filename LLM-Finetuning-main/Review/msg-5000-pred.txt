nit: `manifests` is not a good name for this variable. It is not an iterable of manifests.
Do we need to do this? I thought we were trying to avoid Uri.ToString() calls in the code?
This will break `procCode_` that contains `%a` (which is a valid escape sequence).
I think we should add the same message to `E702` as well.
I think we should log the error here.
glue code is a bit too vague imo. How about "this package provides the necessary code to run a Harmony node"
I think this should be `GoQuorumOptions.goQuorumCompatibilityMode`
Why not using the `isPrimitiveType` method from `ASTType`?
I don't think that's a good error message. Maybe something like "chained comparisons are not supported"?
I think you'll want to check for `is_front_page()` here, since you don't want the homepage to have the page slug in its classes.
This seems like a pretty severe restriction. I wonder if it's worth noting that in the doc.
Why are we waiting for the element to be unclickable?
I think it would be better to have a builder for `PathTemplateCheckView` and not `Builder`
This is the only change that I think we should keep. I'm not sure why it's `privatebindir` here, but I think it should be `puppetbin`.
I think we can move these constant to `io.servicecomb.java.chassis`
This TODO is no longer relevant.
What happens if the user doesn't have an ORCID?
I think this is an unrelated change?
This should be called `allowOptionalValues`
If this is a static variable, it should be initialized in a static block.
I think this is a leftover from when we had to prefix the store names with `test/`
This is a bit strange, I think it would be better to have a separate class for all data files table scan
Why does this need to be here?
I think this should be `DocValuesWriter<T extends DocValues>`, so that you can't accidentally use this with a `DocValues` that doesn't implement the methods you need.
I think this log message is too verbose. It will log the connection ID, and the amount of the increase, which will be very small for large values of `c.maxReceiveWindowSize`.
This assertion was causing a crash in the tests.
`CachedUser` is not needed here.
This should probably be `if not js_elem == "selected"`.
@liggitt is this going to be a problem for the test suite?
I don't think we need this option.
Why is this special case needed?
This should be `assert(ptr!= nullptr && bytes!= 0)` instead of `if`
`model` should be a dictionary, not a list
Why do we need two different timeouts?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
Why did this change?
No need to change this, but you could use `append` with `this`
Is this change necessary?
Can we use `IsNetCore` instead of `#if!NETCOREAPP2_1`?
Why not just set to `nil`?
What is the reason for this change?
If the hosts_file is generated, we shouldn't realpath it
This was changed to a map of strings to allow for the same field to be used in multiple partition spec fields.
This is a bit of a nitpick, but I would prefer this to be a class method on `Beaker::Shared::Timed` instead of a module method. I don't think there's a strong reason to prefer one over the other, but I think I prefer class methods in general.
Should we use `||` here?
nit: the name of this boolean is misleading, it's not the "Group By Aggregation" node, it's the "One Row Subquery" node.
I think the factory: is redundant here.
This is a bit of a hack. I think we need to move the hash calculation to the api object.
Please update the error message here as well
Should this be `true` or `false`?
I think `controlTypes.STATE_PROTECTED` can be removed from the function
I think you can remove the include of `MolTransforms.h`
This is a C++ standard library header. Please don't include it in the C++ API.
Please fix the spacing on this line.
Why is this skipped?
We should make this a helper function.
Should this be an `cbor:"toarray"` instead?
nit: remove empty line
nit: this is not needed
This is a bit hard to read. How about `if ('Email' === $this->strategy ||!in_array($this->strategy, $this->strategies)) {`?
I think the validation is not correct here. The error should only be returned if `o.name!= ""` and `o.appName!= ""`
I think we need to use `version` here, not `cdh4`
`AllowAttrs` can be used here directly, not need to assign it to a variable.
Why is this needed?
typo `negtive` -> `negative`
This should be `!layer->current.keyboard_interactive`.
The cache is not used at all, right?
I'm not sure if we should be using `HighVoltage` in the core of the app? I think we should be using it as a gem that we install as needed.
This is the only place where the `time.Duration` was being used incorrectly.
3600000 -> 3600?
shouldn't this be `double`?
We should probably add a validation that the file exists.
why do we need this?
This should be removed
I would prefer to have this as a `string[]` to avoid the additional allocation.
This is a nice cleanup!
Shouldn't we be able to use `boost::algorithm::join` for this?
I think you can just use `this->dilation_` here instead of `dilation_data`
I don't think this is the right place for this check. The parser should be able to handle an empty path, and there should be a way to do that without having to set `needDecode` (and without the need for the `pathStart` field).
this function should be renamed to GetDefaultVersion.
The function is named `special_ibl_xfer_tgt`, but it also transfers the data for `IBL_UNLINKED`.
I think the right answer is that the caller closes it.
I think you've missed a closing parenthesis here.
This is a good idea, but should be in a separate commit.
This is a bit of a hack. We should probably add a `searchform` method to the `WPSEO_Utils` class, that returns the search form.
Why do we need this?
Should this be `whether to NOT validate...`?
this is a new constructor, it's not used anywhere, right?
This isn't correct. We're only using `RenewCert` to get the `certManager` to invalidate the cache. The `RenewCert` function does not actually attempt to renew the certificate.
I think this should be `Psalm/ExceptionHandler.php`.
`Article` is not a class anymore
I'm not sure we want to do this. What if someone is running Bolt on Windows? They won't be able to run the tests?
@zhangjinpeng1987 @siddontang can you help me review this?
Do we need a size for this?
I think we should be using the `config.Config` for this setting.
I think the correct order is `title` then `artist`.
I think this is a wrong import order.
Shouldn't this be Apache License, Version 2.0 (the "Apache License")?
why do you need a constant here?
This should be `let cb = () => {}`
@joshblum: I'm not sure if this is the best place to put this flag. What do you think?
Is this change necessary?
Is this a constant that we use elsewhere? If not, maybe just inline it?
Can we just return `blockPtr` here?
@zcbenz @peterjosling is this OK?
This is a change in behavior, right? Previously, the argument would have been passed as-is, and now it's quoted.
I think we can remove the try/catch here.
This is a bit hacky. I'd rather remove the `PythonSdkType.isStdLib` logic here and add it in `getStdLibSources` instead.
Why are we checking this?
I think this is a bit too much for a single request. It is not clear why we need to pass the shard ID.
I think this should be `Seq.ofAll(iterable)`.
I think this check should be done in the `else` branch, since the `if` branch will always have a match.
nit: I would have expected the fd to be closed in the error case (see the other callsites in this function).
I'm not sure if you want to hardcode the subject here.
I think we can get rid of the `id` conflict test now that we're using the `parent_id` and `collection_id` as the conflict test.
I think it's better to add a new variable for this.
I'm not sure if it's good to have a method that's only called once in a test. I'd rather just call the functions directly.
I think we should remove the node from the `osdconfig` node list even if the node doesn't exist in etcd.
I think this line is not needed anymore.
This is a breaking change.
I think we can just do `d.GetValues("Include")` instead of `d.GetValueList("Include")`?
This is a controller action, not a route, please use `Backend\Info\ApacheSolrDocument`
I don't think this is a good idea, we should be testing the latest version.
I'm not sure we should be printing the error. This is an error that is expected.
I think this test should be kept, but with the status code.
I don't understand why you're renaming this.
This is a bit faster than the convolution, but I am not sure if it is more correct.
I think this should be `attr('object')`
Could you add this import to the top of the file?
should this be v4?
Can we use `github.com/containers/buildah/pkg/validate#ValidateGithubRepo` here?
I think we should trim the output of `extract_parquet` to avoid the risk of truncation. I think we can use the same logic as `trim_to_bytes` here.
I think we can remove `percentiles` from here.
Is this a reasonable number?
nit: remove spaces after `=`
`Topic.top` is a bit more expensive as it has to do a query to the database to get the topics that are being watched by the user. This is not needed here.
I would use `opts` instead of `options` to avoid confusion with the `options` method
I'm not sure I like this name, since it's not clear to me that this channel will only deliver results.
I think we can just create a function with `lambda_name` instead of using `short_uid` to generate the name.
I would prefer `comma_separator` or `comma_sep` (to be consistent with the function name)
This is not a good idea. The `rect` property is supposed to be a dictionary (or a tuple of 2-tuples).
This is not needed in the interface.
I think it would be better to use `ctypes` here.
I think the `useless-suppression` is useless here.
shouldn't this be `RootFSMountMode`?
What is the issue here?
This should be a boolean.
We are running 2 scans here, one with `conntrack.NewLivenessScanner` and the other with `conntrack.NewScanner`. Is that intentional?
Why do we need to implement the `JsonRpcMethod` interface here?
It's not needed here.
Do we need to create a new ReadOnlyDbProvider here? Can't we just use the original DbProvider?
This is a change in behavior. The original code was zeroing out the value before the parallel reduction.
This could be `if org_id.present? && org_id!= funder_id`
I think we should keep the class public and add a new internal class that inherits from it.
This seems like it should be `list<mixed>`?
Shouldn't this be called `ErrorNotifications`?
I think "Invalid" is a bit ambiguous. How about "Invalid username: %s" % username?
Line is too long. [85/80]
Is this interface still needed?
Can't we just make this `owner: {}`?
I think this is not the correct place for this change.
I think it would be better to add `remoteHost` to `pendingConfiguration` above, so that this method could just be `pendingRequest.configuration = pendingConfiguration`.
@jciesko, is this the right way to do this?
I'd suggest `return nil, errors.Wrap(err, "bucket not a directory")`
I think this should be done in the `NewAccountCreateAddCmd` function.
Metrics/LineLength: Line is too long. [121/120]
This test has nothing to do with pausing. Please remove this.
I think we need to remove this from the interface.
I'm confused by this change, the `if` condition is now always true.
This is a breaking change.
this is a bugfix, right?
This is a breaking change. We need to maintain the existing retry task error type.
I think we should not change the original content of the file
I think this will always be null, as the if statement above will always set the width.
this is a good change. I've been meaning to do it but didn't know if there was a reason for the `result_output`
this is a bug fix, right?
`act(() => render(...))` is a bit weird. Can we just do `act(() => { render(...), render(...), })`?
I don't think you need to use `u` here.
I think this is not needed.
This is wrong. `$pluginCode` is the plugin code, not the plugin name.
Why do we need this change?
nit: remove {} around this block.
why not just remove this?
I don't think we should be adding `ArrayList` to the interface. I think we should just return a `Set<String>`.
Can we delete the whole method?
Can you change this to a function that checks the map?
What happens if we have both `--validate-shape` and `--no-validate-shape`?
This is a bit confusing. Shouldn't it be `transfer_window`?
@kacela, I'm curious why we're changing this from `google.bigquery.Dataset` to `google.cloud.bigquery.Dataset`. Shouldn't it be the same?
Why is this disabled?
Why not `if`?
@xpl I think you should use `bundle!= null` instead of `bundle == null`
This is a breaking change. We should leave this as-is and add a new method with a different name.
Why are these changing?
This is not the same as before. Before, you could do a GET, POST, PUT, DELETE, HEAD request to any endpoint. With this change, you can only do GET and HEAD to any endpoint.
`report_path_hash` is not used anywhere.
I think the `pkg` argument is now unused.
I'm not sure why we're not logging this as an error.
This is a bit of a hack. I'm not sure if it's the best way to do this.
This was a mistake, and should be removed.
Is this needed?
I think you can get rid of the `arg_alloc_size` parameter from this function.
Why are we changing the test to not pass in a runID?
This should be `config->xwayland_lazy = true;`
This is a bit odd. You're spawning 2 goroutines here, but only waiting for 1 of them.
Line is too long. [82/80]
I think this flag is causing the error that I see in the Travis logs, `ERROR: No match: --ignore-certificate-errors --enable-features=NetworkService`
this could be a class method, right?
This is a very minor point, but I think you want `@role.user.email` to be lowercase.
Why do you need this?
I think it is better to put `execution_source` into `FlowConfig` instead of `Flow`, as it is a property of a flow.
I think this is a bug in the current implementation, as the resourceType is not set here.
I don't think the unique_ptr needs to be a local variable here.
This is not possible.
Is this a test?
Can we make it klog.V(4)?
This is not needed, you can import `RunOnceTask` directly
Can you explain why this is necessary?
Why this import?
Is this change related to the PR?
This is a little problematic. If you look at the code in the `lib` directory, you'll see that the `set_cache_line_size_using_ctr_el0` function is implemented in terms of a `__set_cache_line_size` function that is supposed to be implemented by the platform. So this pl
this is a bit hacky, but the rest of the process is async, so I think it's ok
Is this line necessary?
I don't think we need to add this to the default environment, it is only needed for conda-build to work, right?
I think this change should be in `setAccountsInOrder` method.
you can use `std::max(creature->getMaxHealth(), 1)` instead of `std::max<int32_t>(creature->getMaxHealth(), 1)`
Same question here, why is this not a `Func<PipeWriter, T, Task<long>>`?
This is the test that is failing on the master.
I think this should be moved to the top of the file, before any imports, so that it gets registered before any other codecs.
I think we can get rid of this one.
I think this is the right idea, but we should make sure this regex works for all the cases we care about. It would be good to have a test for this, and if we can't find a test that fails without the change, that would be great.
This is the same function as in `bytealg`
Should we remove the `options` parameter from the `HttpInListener` constructor?
Should we log the block hash here?
This is the same as the other one, please use the macro.
This method is called by `Base64String.fromBytes` and it throws a checked exception.
you need to add `self` to the args list
This is a bit of a hack, but seems to work. I'm not sure how to make it more elegant.
nit: it might be more clear if this was called `ISpanDecoratorFactory`
why nextEpoch is needed?
I think this is a test that should be skipped if the `--skip-network` flag is set
Why not `CHROME_OPTIONS`?
I think we should keep retention days here.
This is a debug statement. Please remove it.
This import seems to be unused
This should be removed.
You can use `mCurrentFolder.folder.getMessageCount()` directly here, no need for `msg` variable.
what does next prefix mean?
I think this is set to the wrong default value. The number of active partitions is always greater than or equal to zero.
I think this method could be more specific, i.e. `void uploadFlowFile(int projectId, int projectVersion, int flowVersion, File flowFile, String flowName) throws ProjectManagerException;`
I think this change is a bug fix.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not a good solution. The target is already checked on line 100
I would use `std::ostringstream` instead of `sprintf` and `snprintf`.
This is wrong. If you're in fullscreen and then click the fullscreen button again, you will end up in windowed mode.
Why change this?
Please keep the imports in order.
Is it possible that we could accidentally log something if we do this?
This constant is not used.
This is a bug fix.
Maybe use a different name for this one, since it's not exactly the same as the one passed into the main function.
I think we need to add a note here that this is a minimum of 5 members.
I would also use `retry` here.
Is it possible that the first shortcut of a category doesn't have an icon?
Shouldn't this be an `int`?
This was a bug that I found while working on this.
Is this going to work for the systemd socket?
I think this is a good catch, but I think you can just catch `KeyError` here.
Why is this file using `use strict`?
@jamesgolston, this is the change I was talking about.
Why did you remove `structs.Duration`?
It is a little confusing to see this in `cmd_nebula_graph`. Can you please rename this option to something like `cmd_hist`?
this should be `proposal_url(@proposal)`
I think this is not correct. This should be `NamedList<String, Object>`
Can we add an assert here that `h.Type() == tlf.Private`? I think that should be the only case that this function is called.
This is the only change in this PR.
It's a bit of a nitpick, but this line is too long (pep8 complains)
Why do you remove this?
This is not correct, it will prevent the tools from showing up even if the engine is not null.
I'd prefer `expect(cancellation.can_downgrade_instead?).to eq(true)`
Is this used anywhere?
This is the same as `GetBufferIdentifier` but with a different name. Please remove the new function.
I think you missed a `}` here
This should be `delete tmpStream;`
I'm not sure if this is the best way to do this, but it's what I came up with. I'm open to suggestions.
I think this should be a separate commit, but I don't have a strong opinion.
Can we use `user.DisplayName` instead of `signedUserName`?
Is it possible to use the macro instead of hard-coded version?
I think you need to check if the `w.DefaultTimeout` is less than 0 as well.
I'm not sure we need to explicitly test that the debug log is present, I think that's covered in `test_installers`
Shouldn't this be `KOKKOS_COMPILER_CLANG >= 1300`?
It would be better if we can use the time format here.
I think this should be 10, since the top line has 10 chars, and the bottom line has 10 chars.
I'm not sure if we want to keep the `kinto.core` prefix for the cache and permission backends.
Why the change?
I'm not sure if we need this interface. We could just check if the object implements the `TableObject()` method.
I think we should keep this, and use the other one below.
Line is too long. [81/80]
This should be `if mock_main and sys.version_info < (3, 3) and "runpy" in sys.modules`
I would add a `toTokenList()` method to `VirtualNode` to avoid the `axe.utils.tokenList()` call here.
This is a bit hacky, but it's a good way to test the error handling in the frontend.
This is a bit odd. Shouldn't this be `false`?
rename is a bad name for this. it should be something like alias or withAlias or addAlias or addAliasTo or addAliasOf or whatever. rename implies that it is changing the name of the column in the dataframe.
I don't think this is needed. We can just call `register(name, metric)` and let the `IllegalArgumentException` bubble up to the caller.
Why not just RequestBodyMinimumDataRateGracePeriod?
I think `create_no_window` should be put after `env` since it is a specific form of `env`.
Layout/IndentationWidth: Use 2 (not 1) spaces for indentation.
This is an API break. I don't think it's worth it.
Why was this needed?
nit: typo in summary
nit: is this necessary?
`Long.reverseBytes` is not available in Java 5.
`T` should be `WebElement`
shouldn't this be `this->GetTarget() == this->GetVictim()`?
This one is a little bit more interesting. The spec actually uses `trace-parent` as the header name. I think we should be consistent with the spec here.
I'm not sure about this, but it looks like it might be a good idea to check that `MaxIdleConnections` is an integer.
This test case is now failing because the base64 output is empty.
I'm not sure if this is the best way to handle the case where `subprocess` is not available on the system. I tried to check if it's available by checking if `subprocess.call` is available, but I'm not sure if this is the best way to do it.
I think we have this somewhere else. Can you check?
I think this should be called `old-style-super-call` instead of `old-style-super`.
Can we use `ExecutionSource` from `org.graylog2.scheduler.SchedulerService`?
I think we need to do this in a few more places, in particular `Bolt::Flow#run` and `Bolt::Flow#execute`
I think this can be removed now that `ParallelPostingsArray` is no longer used.
I think it's time to convert this to `px`.
We need to add this to the `TranscodingInfo` enum.
Wouldn't it make sense to pass the stateRoot into the constructor and keep it there?
Should we have a spec that ensures the exit code is not overwritten?
what about `TotalStreams`?
(style) trailing whitespace
Please fix the casing to be consistent.
Why is this here?
It's probably worth adding `@return string` to the function docblock too, to be consistent with the other functions in this class.
Should we be calling this on every `Execute`?
I think we should also add this to the `GetState` function below.
Why not using `shlex.split` from `pip.utils.compat`?
(style) do not initialise globals to 0
I would not remove this, but rather assign `None` to `_fpInfo` so that the next time `GetAtomicWeightsForFingerprint` is called, it will be regenerated.
The subrepo name is `plz`, not `pleasings`
The "assert_is_extension" function is not used in this file. I think it is a leftover from a previous attempt to implement the "extension" command.
this was the only file that was not up to date
This is wrong, it should be `DECIMAL_LITERAL` as it's used for integer and decimal literals.
I don't think this line is necessary.
Is it possible to have a single string with `--review-status` and `unreviewed,confirmed,false_positive`?
Should we have a test to verify that the cache is working?
The error here is that the user is forced to type "y" or "yes" for the package to be overwritten. I think it would be better to change this to: > Overwrite? (y/N) If the user types "Y" or "YES" then the package is overwritt
Why not just `protected Scorable scorer`?
I think this should be `TypeError: Series.name must be a hashable type`
This will cause problems if we use it in a `genhash` function (which is used by the hash table).
I'm not sure if we need this, since `utf8` is not available in `pcre.h`
Can you move the `PoolingParameter pool_param = this->layer_param_.pooling_param();` out of the `Forward_cpu` function? It's a bit weird to assign `pool_param` in each forward call.
I don't think this is a warning.
We should log the error here.
Should this be in the `AbstractSnippetRunner`?
This is not a `Notice` component. Maybe `ExistingAccountNotice` would be more appropriate.
nit: can we call this method `positive` as well?
I think the `isFocus` argument is a bit confusing. How about `setNavigatorObjectWithoutFocus` or `setNavigatorObjectWithoutCaret`?
I don't like that we have a different option for this in `get`, but I guess we can't make it consistent, because we need the opposite for `put`.
I think we can remove this.
I don't think we should rename `name` to `key`.
I don't see any tracking protection here.
I think this is fine. I think that we have a bug in the way we were handling the result code, so that we were calling onFinished too many times.
This is not a good idea. It is not a builtin.
Can we have a single "dark" theme here? I don't think we need to have a separate dark theme for each accent color.
I think this should be `>=`
why is this removed?
This should be `ConcurrentQueue` on all targets, right?
I don't think it's a good idea to do this. I think it would be better to leave this as is.
Should we be disposing of these if we get an exception in the `TryStart()` call?
I would prefer to have a test case for each rule.
I don't see why this is needed, the delete manifests are always going to be the same as the data manifests, right?
I think we should be able to do `to: :purchaseable, prefix: :purchaseable`
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
should this be named `CodeFlowSet`?
why move these import up?
What is the intent of this change?
This is a good time to add a `const` for the refresh interval.
I think it's more important to log this than it was before. It was already logged at INFO, and now it's at FINEST.
Can we use `LogLevel` from `Microsoft.Extensions.Logging`?
I'd prefer to have this at the top of the file.
Is this needed?
This is not right. We still need to check if the block is the genesis block.
I think we should also throw an error if both are not set.
This seems like a regression to me. I'm pretty sure this was changed to exit with 0 because we don't want the exit code to indicate an error.
I think we should only show this option if the notebook is not a part of a folder
Should this be removed?
nit: `daysFromDate((Date) leaf.getLiteral())` is a bit redundant, since `daysFromDate` takes a `Date` object as a parameter.
I think it would be better to have a test for the case where the thread name is not available.
This else can be removed.
I don't think we need this to be a delegate, can we just use `exporterOptions` here?
This isn't a good example. I think the `unwrap` is only useful for internal debugging, so it should probably be omitted.
This is not the correct error code. It should be `TEST_FAILED` which is defined in `testing.h`
This is a change in behavior. Previously, `q_puppetagent_server` would be the FQDN of the master. Now it will be the certname.
I think this TODO should be removed.
nit: `@return {!Builder} this builder`
I think the code below is still incorrect. The signing key is allowed to be the subject key if the authority allows it.
@bharatviswa504: could you please also update `isColumnWithDefault()` in `ColumnValueIdentifier` to use `isAddedColumnWithNonNullDefault()`?
I think we should move the `readConcern` and `writeConcern` properties to `CommandOperationV2` constructor, and then pass the `this.readConcern` to the `CommandOperationV2` constructor in `CommandOperationV1` constructor.
Why do we need to keep track of the combinations? Can't we just do a string comparison on the tags?
I'm a little confused by this. I thought that we were trying to use the external version of Button?
This method is only called from `getMatchingFields`, so we should probably just remove it.
I removed this because it was causing the error message to duplicate the same error message twice
nit: we could make this more general, e.g. `TEST_ARN = 'arn:aws:sqs:eu-west-1::testq'`. The reason is that `testq` is not unique, and if we ever run the tests in an account with a queue na
I don't think we want to deliver the email here.
Is this change needed?
I think we can remove this field. The `VectorHolder` is only used for the Iceberg type, so `icebergType` is sufficient.
We should probably have a function in `base` to generate a temporary directory name.
So if you click on Home, the HomeFragment will be recreated, but if you click on Search by code, the FindProductFragment will not be recreated?
This was moved into `ensure` to ensure that `pending?` is always `false` when an exception is set.
I think this is a breaking change.
Why is this necessary?
is this a real bug?
@sttts - Is it possible to have a default value for this field?
nit: it seems to be missing the trailing slash.
I would move this check before the `if err!= nil` check below.
Why do you need to store the domainId in the edit method?
I think this should be changed to `preg_match('/^VuFind (\d+\.?\d+)$/', $newConfig['Site']['generator'])`
Why remove the jsx pragma?
I think this method is actually called `resumeGroupPlayback`.
Why do we need to trim it?
I think this should be `GET_CONTEXT`?
This should be a separate PR.
The kJsonSchema is not used anywhere.
Is there a way to use the same naming convention as the other providers?
This is no longer used
This is the only change to an interface that's not a `GoInterface` in the whole codebase. Should we make it one?
I don't understand why we are removing these two indexers.
Line is too long. [89/80]
I'd prefer you remove this extra line.
Why do we need to remove this line?
Is it possible to have a test that passes, but still has the `xfail` decorator?
I would add a TODO to move this to `es_starter.py`
Why is this change needed?
I think we should try to avoid blurring the screen, it's a bit annoying. What do you think about just setting focus back to the dialog?
This file is not related to this PR, but it's an issue that we need to fix, because we are missing this file in the `pkg` folder in the `pkg/controllerutils` folder.
I don't think we need this interface.
This should be `roles/logging.writer`
Is this change really necessary?
I think it's fine to reuse `StatusCodeServerErrorInsufficientLocks` here.
This import is not used.
I think you can just return `builder` here.
Why is this line changed?
Should we throw here if `mode` is not `Create`?
I think we can get rid of this file now, no?
Can we use `ref` here?
I would prefer to have a more specific check for POST requests. This check is used in many different places, and it would be better to have it more specific.
This is not thread safe, right?
Why is this `RealPath` being set to an empty array?
I would use "IMAGE_WIDTH" and "IMAGE_HEIGHT" instead of "IMAGE_WIDH" and "IMAGE_HEIGHT"
This is a bit weird. Why are we using `get_notifier_config()` if we are only interested in the `api_quota` key?
I don't see `localConnection` defined anywhere. Is it an instance variable?
Why remove this?
Why do we need to catch this?
Is there any reason not to use a `*url.URL`?
I think this should be called `downsample` or `downsampled` or something to make it more explicit.
We need to be careful with this, this will limit the number of cores that are used by the container. This is probably fine in the short term, but in the long term we need to make sure that we can do this in a way that allows the container to take advantage of multiple cores.
Style/PreferredRequireStyle: Use require_relative if the required file is in the same directory as the current file, or a subdirectory thereof.
What is this for?
Can we call this column `granting_subscription_id`?
Should we just call `free(xwayland)`?
Why is this no longer needed?
`QFontMetrics::width` is deprecated, so I changed it to `QFontMetrics::horizontalAdvance`
This seems like a pretty long delay. I'm assuming it's here for testing purposes?
This is a change in the behavior of the app. Before, if the video was playing locally, the play button was hidden and the bottom sheet was collapsed. Now, the play button is still hidden, but the bottom sheet is not collapsed.
This is no longer used, so can be removed
I think we should call this `resetCaches` and have `resetCachesWithoutShutdown` call it.
You can use `dynamodb` instead of `aws_stack.connect_to_service("dynamodb")`.
nit: `DependencyName` is not a great name. `DependencyContainerName` or `DependencyContainerNameOrID` is more clear.
I think we should not add dilation to the forward function.
I think the `this.sourceBlock_.setColour` method expects a colour, a secondary and tertiary colour. So you need to pass the correct values here.
I think we should throw an exception here if the methodConfigProto.getName() is not in the methodConfigMap.
Nit: Can we alphabetize this list?
I think it would be better to exclude the whole `internal` directory.
I think the name of the variable should be `enableScriptEngineLoadExternalResourcesJavaScript`
I think we should keep this. The only reason we are not using it anymore is because we are using the SDK.
I'm not sure this is a good idea. This method is used by the `python` command to show the source code of a rendered document.
Can you explain why this is being removed?
This is a bug in mypyc, not mypy.
Is it better to use `shard` instead of `shardID`?
Can we add a note here that this is a temporary solution?
I would have expected a `console.error` call here, but this is probably fine too.
I think this is a bug, I'm not sure why we need to unlock here?
We should be able to just pass in the promise directly here.
I think this check should be done before the `if len(data) == 0 {` check, otherwise we'll get an error if the array is empty but the data is non-empty.
I don't think this is going to work. The problem is that `dynamicconfig.HistorySizeLimitError` is the default value for the config, so the actual value is not going to be set in the database.
I don't think the ambient flag is needed anymore.
This is a bug fix.
Can we use `->isRequired()` instead of `->defaultValue(null)`?
I don't think we should do this. We should use the new `setLocale` method instead.
Why remove this?
Should we rename the window object name?
This should be `@return string|array|Markup|void`
I think this change is not needed.
I think this should be handled by the service name middleware?
Why is the field `final` but not the constructor parameter?
I don't think this change is needed, `keysSource` is used for both primary and secondary keys.
I think we should rename this to `s3_add_encrypted_item`
This is the only change that matters, all the rest is just moving stuff around.
I would recommend using a new component here to avoid a lot of logic in the `Component`.
This should be `eslint-plugin-prettier`
Please remove the extra lines here
this is incorrect, it's still using the OSS bridge
Nit: This import is redundant.
I think the `?? true` is unnecessary here since the default value is `false`.
Can you add `@Deprecated` on these methods?
We should at least file an issue to track this.
Please don't remove the blank line
Use the new Ruby 1.9 hash syntax.
Can we make this a little more specific? Something like `UnrecognizedEncodingErrorForRouter` or `UnrecognizedEncodingErrorForRouterChoice`?
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
The CA1026 is not applicable for this case as the ctor is not public.
This is not needed.
I don't think this is a good idea. If we're going to be passing in the logger everywhere, we should just pass in the `*log.Logger` and then create a `logr.Logger` from it in the function.
I think we should keep the `info` log level here.
This should be updated to `0.2.2`
I don't think this is needed
This is a regression?
Why is this optional? I would expect this to be a required field.
I think we should have a `Migrate` method in `ethdb` and then just call `db.Migrate()` here.
this should be the latest block
This is the actual fix.
This is going to be a problem if we want to use the `lbann_comm` object in the Elemental code. We can't pass it as a reference to a static function.
This should be `let(:org2) { FactoryBot.create(:org) }`
I would make this a private method, and use `get_parent` to get the parent element.
I think we should use `QLoggingCategory` here.
this is not a sessionDto, it is a sessionStats
I don't think this is correct, we need to check `size()` and not `isEmpty()`
If this is the only change to `getRoleList` that is needed, then the rest of the changes are not needed.
Why is this leaked insecure key being exported?
I think this should be passed to the `translate` function.
It's good to see this change. I think it was causing some of the tests to fail.
Can we make this a `List`?
This is a constructor. Why is it removed?
This is a bit confusing. What is length?
I think the justification should be "the `Activity` objects are not disposable".
If `v` is not a `Iterable`, then `v.contains(element._2)` will throw a `ClassCastException`. This can happen, for example, if `v` is a `String` and `element._2` is an `Integer`.
Why is this needed?
Why this file?
this can be simplified with `if config.val.url.open_base_url and term in config.val.url.searchengines`
Is it possible to have the `sanitize` call in the `new Schema.Field` call?
What is the difference between `configtypes.List` and `configtypes.LengthList`? I see they both have `__eq__` defined.
I don't think this is correct. The `Params` field should be a single `interface{}` (i.e. a `json.RawMessage`). The `JSONParams` field should be an array of `json.RawMessage`.
This is a bug fix.
why change this?
Why was this skipped?
This is a bit confusing. The potential is a sum of 6 terms, but you have 7 coefficients.
The `json:"DesiredStatus,omitempty"` is not needed here, as the `TaskResponse` is not going to be marshalled to json.
I think this is the same behavior as before.
Can you please make this more specific? This is an exception block without a try/catch statement.
This constant should be added to the `template` package, not `common`
Let's register this as `authz`
I'm not sure if I like this. `add_pull` should be used for adding a pull to the list. This function should not be used to change the size of the list.
I think this should be `HOST = '127.0.0.1'`
This bundle should be removed.
can we have a test to cover this new parameter?
We need to keep the length check here.
I think `Number.MIN_SAFE_INTEGER` is only supported in Chrome.
this is a very minor thing, but is there a reason we're not using the `ncr-layout` class?
I think this is the only place where we use the options from the criteria.
I don't think this is correct. The first time through the loop, lastTime.CheckTimestamp and lastTime.Timestamp will be the same, but currentTime will not.
Why is this `isContentEditable` method needed?
@nsivabalan, is this change required?
why not use the same VerifyPoSt for both?
I think this import should be before `from collections import OrderedDict`, otherwise it will not work.
Why do we need to store the annotation keys? I would think that storing the full keys would be enough.
This is a little bit confusing, can you add a check for `getBlockhash() == null`?
This is a bit confusing. `if removed and task.id not in necessary_tasks` means that we prune a task, and then check if it was pruned. If you're going to prune the task, you don't need to check if it's in `necessary_tasks`.
why not use `type.getBitMask()` directly?
`freezeColumn()` doesn't re-render the table, so you need to call the `render()` method afterward.
nit: use `String#replace` instead of `String#match`
I think you can remove this line.
This is the test that was failing before. I think the error was caused by the fact that the `plan convert` command was not using the correct `modulepath`.
I think you can simplify this to `n.getMaximumCommonType().ifPresent(this::printType)`.
I don't see where this is handled in the code now?
I'm not sure why we have both `W3C` and `W3CBridge` here. Shouldn't we only have one of them?
This could be a `copy`
I think this should be something like "Cannot add the file %{fileName} because you are already uploading it"
This is a little confusing. I think it's better to say `Fee is less than`
This change is to make the paste-primary command only work for Qt 5.9+
I think this could be private, we don't need to expose it.
This is a bad name. `ptags` is a very generic name. I would have called it `actions` or something like that.
I think this should be `copyCommand(r.dir, dest, true)`. I think we should always copy with the repo open, so that we can make sure the repo is in a consistent state.
I don't think we need this line.
You can use `self._open(url, new_tab=new_tab, new_window=new_window)` here.
why is this here?
I don't like this, it seems like a global variable which is not initialized properly. The start_cb is a handler for the msg, so it should be the one to store the handler.
I think this should be `heapSize` not `heapSize/2`
I think this is a little redundant since `mSession.hasDisplay()` is already a check for the `Display` being active.
If we don't have any tag contexts, we don't need to do the `collectVertexProps` either.
This is not related to the PR. But why do you have a `:` in the closure id?
Layout/EmptyLinesAroundModuleBody: Extra empty line detected at module body beginning.
I think this should be an error, if we don't support a new version of the row reader, then it's a bug.
This is a breaking change. We should only change this when the users are forced to upgrade.
Is this a bug?
I don't think this change is related to this PR.
This was removed because it's not hidden anymore?
I think this is not needed, we don't want to create XDP state if BPF is disabled.
I think it would be better to put these in the `catch` block above this one
This is needed because of the `using System.Runtime.InteropServices;` above.
@ramzimaalej I removed the gh-pages:bower task from the release task, because it was causing the release to fail.
This is a hack too, but I think the right fix here is to move this to the constructor.
I think we need to keep the old message. If you look at the code, the string is only used when we are in a non-https scheme, so I think we should keep the original message.
Can we just return the slice that's stored in the ring?
I think this needs to be `setup-show: True` to work.
I would prefer to have this in a separate test case.
I don't think this is true. I think the code works with multiple cpus per model, and the `if (partitioned)` checks are for the case where there is one cpu per model.
MetricsToExport is a list, so it always has Count > 0.
why not use `AccountBalance`?
why do we need to pass the config here?
I'm not sure if we still need the PrepareToStop() call, but I'm also not sure if it's safe to remove.
I think this should be `#if 0` or similar, so that the lines are not compiled into the binary.
Should this be `query._hasField(paths[i])`?
I don't think we should have `bold` around the seconds
This one is a bit of a mystery to me, why was it changed?
@benhalpern I was thinking of putting `personal_options` inside `local_options` but it seems cleaner this way.
This is a good example of why we should have a `DataFileBuilder` (or similar) to make it easier to create a `DataFile` object.
I'm not sure this is a good idea. We should avoid making changes that affect all users of the database.
I think we can remove this import now that we're using `io.BytesIO` instead of `StringIO`.
I think this was a mistake. The `tombstones` index is used to keep track of deleted blobs.
Why do we need this method?
I think we can get rid of this `bypass_url_validation` now.
The message looks weird, I think it's better to just remove the last part of it.
I think this should be done after the eclipse formatting, if eclipse formatting is enabled.
I'm not sure about this. It's a bit confusing to use `int` as the type. I would rather use `string` and have the `ResourceTypes` as a `map[string]struct{}` or something.
This should be `"" or None`, right?
Use `File.join` to build the path.
Why not use `Objects.requireNonNull` here?
This is not a real bug. The fingerprint is verified when the file is opened, not when the data is read.
`prefetch_full_` is not needed anymore
This is a breaking change, right?
I think you can use `Stream.generate(new Supplier<Integer>() { @Override public Integer get() { return 0; } }).limit(1_000_000).count();`
I think we should be using the `eventHandler` here instead of a global.
this is to avoid a crash if we get an invalid message, right?
I think this file is not needed anymore
This is a bug, I think.
I'm not sure this is the right change to make. We should keep the strict mode flag, and fix the code.
I'm not sure about this. I think it would be better to have a `sortOrder` field in `File` that is a `Comparable` and then have the `File` class implement `Comparable<File>`
Should be `boost::optional`
This is not where we are checking the signature. We are checking that the signature is valid. If the signature is valid, then we are assuming that the signature is valid and proceed with processing the signature. This is where we check that the signature is valid. We then proceed to check that the signature is valid.
Why remove this?
Can we make this function part of `types.go`?
This is not a good example of a script.
I think we can drop these two since they are the same as the ones in `spec`.
I think it is better to use the `LOG` to output the error message.
The plural version of `seconds` is `second`.
This was a weird bit of code that we no longer need.
This is a bug fix for a crash that happens when running mypy on Python 3.6.
please use relative import
This is used by the `webdriver.js` file which is not part of this PR. I think we can remove this, it's not used anywhere.
Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I don't understand the output of this query. Can you explain the purpose of this query?
This is not necessary since we can access the iframe's window through `iframe.contentWindow`
I think we should be using `anomalyScore` here too.
Why not just add the rule to the existing list?
Line is too long. [85/80]
I think this test name is still not very descriptive.
I would rename this method to `getHelperOptions` to make it clearer what it is doing.
This class is unused and should be removed.
Why is this being changed?
This is not a public API, so you can keep it as it was.
I think you meant to make this a `Task<Exception>`?
I think you can move this import to the top.
Do we need to pass the block number to the commit?
I would use `InitFSRepo` here.
I think this should be `char *hiveTableName = nullptr` as we are not using this anywhere.
This is not a good place to use `context.getNamer()` since it is not in a method that has the context.
I think we should be able to get away with just `selectAll()` here.
This was causing the test to hang.
I'm not sure why this is here.
This is wrong. The method `getIdentifier` should be used to get the identifier of a plugin. If the identifier is not known, it should return `null` and not a code.
I don't think we need to remove this.
nit: This is not used in this file, can be removed.
I think the vagrant file is always in quotes, but I'm not sure if this is the correct solution.
Should be `context`
We should use the `userSchema` defined above here instead of creating a new one.
`dilation_h` and `dilation_w` are not used here, right?
This is a bit of a breaking change. Is there a way we can add these new fields without changing the name of the namedtuple?
The lint command will also validate the dependencies.
This test should be in the `LruCache<T>` class, not the `LruCacheTests` class.
This will be the value that will be returned from `DynamoModel.IsExiting()` method.
what is this for?
I think we need to add a `repo.OwnerId = ctx.User.Id` here to make sure that we can see our own private repositories.
This is not needed
We probably shouldn't be removing this.
Is this correct? It doesn't seem like it would work for all inputs.
I think we should be able to just drop the `buildMuon` call.
Is this `ps` namespace needed?
pls remove this line
why do you need to change this?
The only other standard library that I think we want to keep is `github.com/influxdata/flux/stdlib/strings` (and maybe `github.com/influxdata/flux/stdlib/math`).
This is the same error message as above. Can you change it to something like "ERROR: mpi4py not loaded correctly (mpi4py_import failed)"?
I think we should make the `useRustParser` function private. It's only used in the test.
I think we can drop the PEM key here since it is not expected to be present in a secret anymore.
I think we should check if `hadoop version >= 2.3.0` before calling this function
Why remove the exclamation mark?
I think we need to move this before `swift_ast_ctx->GetReplExprModulesDir()`, so that the module dir is correct.
`os` is still being used in `common/logger.py`
I think we should keep this as `context` (or `contextual`) rather than `override`.
Should we make this a goroutine?
The `core/modules` prefix was removed because it was confusing. The `data store` part is still relevant, but it's not a good idea to repeat it in the file names.
Is this still used?
We need to add the message type to this log.
This was a bug.
This change is required for `fsrv.loadDirectoryContents` to compile.
This can be simplified to `if (currentSortOrder == null || currentSortOrder == values[i]) {`
Why we need this?
I think it should be `receiveUpdates` (with one `e`).
I don't see how this works, the `Save` is called after the pet is removed.
Why do we need to write to the database here?
Do we need a migration to drop this view in the future?
Is this 0 the default value for CPU and memory limit?
This is not a good idea. The user could be removed from the proposal and then re-added, so the email will be sent twice.
This is a minor issue. `fs::FileUtils::remove` can return true if the path doesn't exist.
Why not just `selectAllPhotosUpTo(getImagePosition(m.getPath()), mediaAdapter)` here?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
nit: Can we use `ApiConfig.newBuilder().build()` instead?
This is the fix for the test failure
This is an unrelated change.
Can we make this a single line array?
This is a Chromium-specific API, so should be put into `ChromiumWebDriverCommands`
Is this really necessary? Can't we rely on the fact that the `PayloadFlatteningThreshold` is set to a very high number?
This is a bug, I think. The `kDepthStencilAttachmentRasterOrder` was only relevant to the depth buffer, not to color attachments.
I think you could use `R.string.feed_is_filtered` directly here instead of `getString(R.string.feed_is_filtered)`
I'm not sure this is the right value. I think this is the max length of the ID, but it might be the max length of the ID plus the hostname?
I think this should be `Level logging.Level`
I think this is a bug, but I'm not sure if it's worth fixing here.
Is this a public property?
We should not return here, as we should continue to retry.
This should be `int64_t`.
I would recommend using `mapStateToProps` in the container component instead of creating a selector.
The last two assertions are redundant
why not just add the param and throw an exception if it's not null?
What does it mean to run this even with the conditional on the block?
This is a bit of a nitpick, but I think we should keep the `javaClasses` variable name. The `initializedClasses` name is too generic and it's not clear what it refers to.
This should be `cmd 'export PATH=/usr/local/ghc/#{ghc_version}/bin/:$PATH'`
Is there a better way to do this?
This is not the default Ansible path. I don't know if it's possible to configure it to be the default.
It is not a big deal, but I wonder if we should create a new test for the additional account?
I don't think this is right. It seems to be waiting forever.
I think we should just fail the test here.
Is it possible to have a null bundle when this method is called? I would think that if that were the case, we should throw an exception.
@bryevdv I think this is a bug, we should only raise an exception if the job failed.
We should not add this field to the `spec` of the CustomResource. We should add it to the `status`.
I think this should be `0.75` to match the previous behavior.
I'm not sure if it's a good idea to add a `frozen_sort` attribute to `Container`. It might be better to just set the `sort` attribute to `nil` when `frozen_sort` is set to `true`.
What do you think about renaming this to `outboundFilters` and `inboundFilters`?
I'm a bit confused by this option. If I specify a URL here, then I can't use the `--eth-node-urls` option, and if I specify a list of URLs with `--eth-node-urls` then I can't specify a URL with `--dns-discover
This is the only change that is specific to the new behavior of the scheduler.
nit: we usually use `interface` here
Why not 302?
I think it's better to use a `Preconditions` check here.
Add the genesis block to the test fetcher so we can use the same fetcher for offline and online.
This is a good find. I would say that this is a bug. I am not sure why it was removed.
Is this warning enough? It might be better to error out, but I'm not sure.
I think it would be better to pass the request id as an argument to the `tus` config. This way, you can disable it without having to change the config.
This import is no longer used.
This import shouldn't be necessary anymore.
I'd like to see this as a `showSpeechViewerAtStartup` and `showWelcomeDialogAtStartup` setting. This is a bit confusing right now.
I think we should add the `app` variable to this function.
I don't think we should add this file to the PR.
I think you should just use DateUtils.isOlderThan().
This is a bit of a breaking change, but I don't think we have any choice. The existing JSON format is not extensible, and the only way to add fields is to add them to the `common` package.
nit: static imports should go first
I'm not sure if it's possible to delete the pod, but the error is not checked.
I don't think we need to free tmp here, since it's a tmp variable and it's not allocated by the caller.
"just a single column"?
nit: remove empty line
This line is not necessary, as the next line will raise an exception if there is one.
@harikrishna-patnala I think this is not required. This is called from `refreshFromMetadataLocation` which is called from `refresh` which is called from `put` which is called from `save` which is called from `create` and `update`. So this will be 
why not just use the lease id?
Should this be called `SuspenseBase` or something?
Is there a reason to use R.style.SalesforceSDK_Dialog_Dark for dark theme and R.style.SalesforceSDK_Dialog for light theme?
This is the only change that is not a 1:1 replacement. I was a bit confused as to why there was a `card` class here, but I think it was added as a way to make it easier to find the videos when editing a tutorial.
I think this is a typo, merrors should be errors.
I think this could be refactored a bit to make it more readable.
This is a change in behavior, right?
I think it's worth mentioning that `DefaultTextMapPropagator` is the same as the one we used before, it's just that we're not using the composite one anymore.
The asterisk is not needed.
I think we should use `@logger.debug` here, since this is an internal detail, not something a user needs to know.
I think the `SetPushInterval` should be moved to the `MeterProviderBuilder`, since the `MeterProviderBuilder` has access to the `MeterProvider` instance.
This is a duplicate of `maximize_window`
The error message is not complete. You should add the other possibilities.
This is going to cause problems. You need to be able to pass an array of nodes to a `Fragment` and have it render them. This is the root of the problem.
Should this check be `c.KubernetesProvider == config.ProviderAKS && c.RouteSource == "WorkloadIPs" && c.Wireguard.EncryptHostTraffic`?
If $raw is not an array, you should get an error here.
I would make this `protected` instead of `public`
what is the reason to expose the reverse?
Was this just a bug that was causing a test failure?
Please remove this file.
nit: test that the given date for 0 retries is less than 4s in the future
This is a very minor thing, but I think we should make the variable name `prefix` here too.
This is the only change that's needed, the rest is just cleanup.
I would rather see these in `BinPacking` class as it's an API.
this is an error, but not a fatal one.
this should be a warning, not an event.
I think you can use `random.choice(self.chars)` directly, without the need to iterate.
If this is the right place to do it, then it's a good place. I'm not sure if it's the right place though.
This is a bit hacky, but I think it's the least invasive way to make sure we're using the right skip method.
This is the one line that fixes the bug.
I think this was the actual bug.
I think we should rename this class to `OptionsFacetPackage` as well.
I'm not sure we should be importing the whole module. I'm not sure how that works for the `subscriber` decorator.
This is a nice change. It's not clear to me why this wasn't the default before.
Can you remove the `implements ASTAnyTypeDeclaration` from the class header too?
Can you remove this whitespace change?
nit: I think you can just use `GleanMetricsService.resetOpenedWindowsCount(mRegularWindows.size(), false);` here.
I think this is the only change you made that changes the behavior of the tool.
I'd rather see this as a `Func<HttpContext, bool>`
I would add a note that this is only valid when the message is generated by `mypy.semanal`.
I think we should make this a `global` variable to be consistent with the rest of the code.
This is a breaking change, but I think it is a good change to make. We should make it in a separate PR.
this should be done in `SyncState`
why remove this?
I think this should be in `restoreOriginalRequest` instead, since that is the function that is supposed to do this.
The `result` variable is not used anywhere.
I'm not sure if it's fine to remove this log line, as it's useful to know when running a local build.
Why is this change needed?
I think this is the only place where `command` is a string, not an array.
Do we want to have a separate ID for agentless?
We should not be converting from a URI to a path for the purposes of determining whether or not a file exists.
I'm not sure if we need to copy the `NetworkSpec` fields. I think we should be able to copy them directly from the `spec` field.
Is there a reason to use `||` here?
This is a good example of a place where we should use `aws.StringValue(instanceID)` instead of the `*instanceID` pointer.
can we make the property names more specific, like `implicitWait`?
I think we should use `typeof vnode.type === 'function'` instead of `vnode.type!== null`
Is this actually used anywhere?
This is the only place that uses `fillObject`, so I think we can just inline it.
Why do you need to make a copy of the iterator?
If I'm reading this right, you're checking for the existence of the alt modifier, and if it doesn't exist, you're checking to see if the parent is a menu bar. If it is, you're setting `altModifier` to true. If it isn't, you're settin
This is a bit misleading. It should be something like "Using join queries with synchronous filterCache is not supported!"
Is this a fix for a bug?
This interface should be renamed to CursorContextMenuSupplier.
Is this a breaking change?
I think it's better to add a new `enum` called `DATAPROVIDER_TYPES` and put these new items there.
These were removed as they were not needed. This class is not thread safe as it uses a `JsonSerializer`.
nit: I think this should be `Is this just a TestRPM build with all RPMs hydrated?`
Can you add a note to the docs that this is the default, and that it will be overridden by the actual setting?
I think this should be `IHttpParser<T>` so that the `T` is the handler and the `ParseXXX` methods don't need to be generic.
I'm not sure if this is a good idea to import from the same file.
I think this would be better as a note, as opposed to a warning.
`url` is a little too generic, I think. `github-url` was a little better, even if it was not entirely accurate. I'd rather keep `github-url` and make the associated variables (e.g. `githubAccessTokenFlag`) match.
Can you explain why this is necessary?
This is a bit weird, shouldn't this be `self.scripts.append(s)`?
I'd use `controllerutil` instead of `librarygocontroller`
This line will cause Travis to fail. You need to make sure that you remove the line before you check in.
@kalefranz, I'm not sure this is the right thing to do. I think the right thing is to let the user handle the case where `filename` is empty.
I think we can remove this change now.
this looks like a bug fix?
I think it is better to keep the original `Name.lowerCamel(Name.upperCamel(apiTypeName).toLowerCamel(), "service"))`
This will break the tests. The request.Context() will be nil.
Can we have the version in a separate PR?
@kohsuke can you add a check here that diskList is not nil and > 0?
This is a bug fix.
I think this should be a private method.
Why not use None here?
This class is no longer used, it was moved to the ORM projector
I would remove the `*` symbol as we don't have other options for `samplingRatio`
I think we can revert this change.
why do you need to set this?
I don't see this being used?
is this a typo?
I think the `@` symbol is causing a lint error.
We can revert this change.
I'm not sure if this is the right place for this. The `async_select_unrequired` attribute should be set on the base class (which is `SocketBase`).
This is a bug, it was not working before.
`ClaimFromRewardingFundGasPerByte` is `uint64(100)` or `uint64(200)`?
I'm not sure this method is used anywhere.
Trailing whitespace detected.
`gapi-cloud-osconfig-go` is a bit of a mouthful, can we use a shorter name?
This is also a bad commit
I think we need to keep this around for a little bit to allow for a graceful transition.
Can you explain why this is needed?
I don't think this is the right place to have this fatal error.
Remove empty line.
Can you add the preg_quote() function into the preg_match() function instead of using it in the preg_quote() function?
I'm not sure about this, but I think it's not necessary.
I think you want `time_range` to be a `int` and `time_range = 3` should be `time_range = 3`
`max_results` is a more widely understood name.
I think it is better to use a temporary variable here, and assign guidP with the result of `getGuidPrefix`.
This is a bit confusing. It's not a list, it's a wrapper for a list.
I think it would be better to add this in the `AppKernel`
This is a bit of a hack, but it's the only place I found that the block is retrieved.
Please add the new `group` route to the `routes` list in `src/config/urls.js` as well.
I think it's better to just use `six.moves` here.
This function is not used anywhere, right?
This was changed to a more descriptive name.
This change is not necessary. `getFullyQualifiedName` returns fully qualified name of class. So, it should always end with class name.
Can you use `self._assert_success_response` instead of `self.assert_success_response`?
I think the translation should be `Source:`.
@liggitt is this the right place to set this?
You can remove this file, it is not used.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
nit: extra new line
I'm not sure about this. I think it's cleaner to just call `axe._audit.checks`, `axe._audit.audit` and `axe._audit.rules` directly in tests instead of keeping references to the original values.
I don't think this is the right fix. `fields.MatchFold` is already doing case-insensitive matching.
nit: "before evaluation" is a bit confusing. "before it is evaluated" would be more precise.
Please use a more descriptive name for the test class.
I think this should be `openebs.io/bd-predecessor-name`
The `z-index` test is now in the `before` block of this test.
I think we should be checking `iss.Spec.Vault.Auth.AppRole.SecretRef!= nil` here. If we don't, we'll end up deleting secrets that are used by other applications.
I don't think this is related to the PR, but I noticed it in passing and wanted to call it out. We should probably be using `configure_rvm` here, since that's what we use in most of our other RVM-related changes.
I'm not sure if this is the best thing to do. In some cases we may want to report the error to the user.
I would prefer to see this ifdef moved to the top of the file and the entire section guarded by it.
The new logical-tautology is used here?
This is a bit tricky. The problem is that the `targetType` is an interface. So if you have a class that implements the interface, you will get an `IllegalGenericArgument` exception. I think the only way to fix this is to have a separate method to get the children that implement
This is a bit of a hack. I would prefer to have a way to tell `beaker` that a particular user is the admin user and needs to be set up. But I'm not sure how to do that.
This is a change from the previous behavior. Previously, if the partition schema had no identity columns, `idToConstant` would be empty. Now, it will be null.
why is this change?
Can you explain why this change is necessary?
I think we can change this to `return this.get('settings').fetch().then((settings) =>`
This is not used anywhere.
I think we can remove the `id` here.
This is not right. The value is not always a string.
I don't think this is really needed.
This should be named `feedbackmock_service`.
is this correct?
I think this should be `atomic.LoadInt32(&d.done)!= 0`
Does this need to be a command line flag?
Can you explain how this flag can not be read?
I think this is a good change, but I wonder if it should be in a separate PR.
is there a reason for the change?
I think this should be `DigraphNode<E>`.
This is an identity for the node, not the client.
Do we want to call this "application" or "project"?
Why removing this?
Doesn't this allow for anything with a `/` in it?
I think this method should be named `updateNameMappings` since it returns a collection of name mappings.
This is a bit of a nit, but I think it would be more consistent with the rest of the codebase to use `utils.ErrorToGRPC` here.
I think this can be removed, since it's a wrapper around the same function.
This was unused and I think was causing some confusion.
I think we need to validate the remote host here too.
I don't think we should be using the term `driver` here. It's a bit confusing to the user and I think it's unnecessary. I think we should just call this `dockerLogLevelUsage` or something similar.
The above change is the only one that I'm not sure about. I'm not sure if this will cause issues with other commands like `make` or `check`.
Is this change related to this PR?
why the rename?
I think this is a bug. I think we need to add `&&!newVNode._hydrating` to the condition above.
This should be imported before `net.sqlcipher.database.SQLiteDatabase`.
I think it's better to keep the `test` suffix to indicate this is a test file.
I'd suggest using a `unique_lock` instead.
nit: `target_chanel` -> `target_channel`
This is a bit hard to understand. I'd prefer to see this as `if d.NextArg() {` and `if d.NextBlock(0) {`.
This should be logged as debug.
why change the port?
@joshblum I think the problem is here, `errUpdate` is the error returned from the update, which will be a 4xx error.
`com.google.api.codegen.config.MethodConfig` -> `com.google.api.codegen.transformer.MethodTransformerContext`
This is not a breaking change, but I wonder if we should be more explicit here. This is not really the "select" clause, but the "project" clause, right?
I think we need to make this more clear. We don't just handle the exception, we catch the exception, and then we execute the query on the caller thread.
I think this is a debugging statement that should be removed before merging.
Should we add a TODO here to fix this?
Can we remove the empty line here?
This is the only change that I'm not sure about. I don't know what this is for.
I think we should remove this function and use the new `address_length()` from `net.h`
I think this should be done after the `buildEdgeColName` call.
It would be better to change this to `The database that the user should authenticate against.`
I think you need to add a `</h2>` tag here to close the headings
I would remove this file. It doesn't seem to be used.
Why did this need to increase?
this should be https://cwiki.apache.org/confluence/display/TRAFODION/Tutorial%3A+The+object-oriented+UDF+interface#Tutorial%3ATheobject-orientedUDFinterface-DebuggingUDFcode
This is the only change that is specific to asp. All the other changes are shared by all the other languages.
I think that `useSelect( ( select ) => select( CORE_LOCATION ).isNavigating() )` is not needed, because it is not used in the return.
It's a little surprising that `addr` is not the address that was provided, but rather the first address that it maps to.
The `if (o!= null)` condition should be moved to the top of the loop.
Why do we need this?
I don't see where this is used.
I would have expected these to be in the `SmartStore` class.
Can we file an issue for this?
I think this should be a `TYPE_STRING` instead of `TYPE_BOOL`
This should be moved to the `HID` driver so that it can be used with the Braille devices in the `usbID` list.
This is not the right fix. The problem is that we're not handling the case where the method is annotated with `@Experimental`
Maybe call this `QUERY_UUID`?
I think you should be able to do `return NewKeeper(ByteKey("very secret secret"))`, and the `secretKey` field will be initialized.
@tarekgh I don't think we can remove the NET452 here. The `System.Linq.Expressions` namespace has a dependency on `System.Reflection.Metadata` which was introduced in.NET Framework 4.6.1. If you want to remove it, you'll have to remove `System.Refle
We can remove this test now, right?
This line isn't needed, and will cause flake8 to fail.
Why do you need to import this class?
Why is this needed?
This is a bit of a nit, but it would be nice to have a test that covers this case.
This is a bit weird, I don't think we should have this method here.
It would be good to have a test that checks the iptables rules are set after the restart (or some other action that causes the rules to be removed).
I'm a little confused about this ask type. I thought it was the value of the offer, but this is a price.
This was for testing, not needed anymore
This is a bit of a nitpick, but I think we should leave the key upcased for consistency.
I'm not sure if this is a good idea to have two actions with the same route. It's going to be confusing for the user, but also for the developer. I think we should change the `/me` route to something else.
This is not equivalent.
missing the `@return`
This is the only place we're using the `TaskValidator` in the `puppet_library`. I think it would be cleaner to remove the `TaskValidator` and just call `@context.get_task(opts['task'], params)` here.
Why is the null needed here?
I think `replaceNode` is the wrong place to store this info. I think we should be able to set it on the `vnode` instead.
This is not the same, you are using the `alpha2` code for the flag image and the `alpha3` code for the form choice.
This is a non-backwards-compatible change.
I don't think this is the right place to make this change. The ASTMethodDeclarator has no concept of access modifiers, so it should not extend AbstractJavaAccessNode.
can you also add a default value for this?
I think we should move this to the `else if` clause, as it will never be `nil` if `ipNet.IP.To4()` is not `nil`.
I think this is confusing, because it suggests that the client can get an error out of the call, but the client should just return the empty slice. I think it would be better to just say that this method should return a slice of messages or an error, and the client should return an empty s
The `id` prop should be a function that returns an id. This is to make sure that the id is unique, since `this.id` is not.
Can you make this `gridCol.columnDef.enableCellEditOnFocus`?
This is not a good place for `FirefoxWebElement`. It should be moved to `selenium.webdriver.firefox`.
I think we need to keep this as MiniFrame. The user shouldn't be able to close the window.
I'm not sure we should be changing this API.
why this is not in the p.cfg?
This is the actual fix.
I think the `IMvxElement` interface should be removed.
I don't think it should be called `engineThrowUp`. It's not throwing up.
I'm not sure I like this change, as it means that if we ever have multiple groups with the same email, we will get the wrong one.
This is a bit hard to read. Maybe `if err == nil {`?
nit: remove empty line
This import seems to be unused.
I'd suggest "secure" as default, as it is the most common configuration.
This is a good start. However, we should also check for other status bits that are not set, like `DEV_STAT_BIST_ERR`, `DEV_STAT_INHIBIT` and `DEV_STAT_FAIL`.
Shouldn't this be `$this->paymentEditFormFactory->create()`?
This is a bug fix. We're not resolving so we shouldn't have the resolve error here.
Why is this change necessary?
should this be `.first&.user` or `.find_by`?
`config.option.markexpr` is already set to `None`, so this doesn't have any effect.
Do we need to return anything here?
Why do we need to remove the executor from the database?
This is a bit hacky, but I'm not sure how to do it better. I think we need to do something similar for the other variants too.
I think this should be in the `self.scenario.get("additional-classpath", [])` block
I think you meant `convert` here instead of `transform`
We should use `JsonRpcConfig.DefaultTracerTimeout` here.
I think `table.spec().schema()` would be a bit more readable than `schema`
Why not just use the error from the real implementation?
Why is this needed? It seems like we can just use the default values of the fields.
I think it is better to change the name to `default_max_space_replica_factor`.
This is a little bit of a hack, but it's the only way I could get it to work. I tried using a regular expression in the `feedUrl` constructor, but that didn't work.
Remove empty line.
I think this is the only change in this PR, so you can revert the rest.
I think this should be `notificationDuringQuietTimeEnabled = true;`
This is the only place where the `API` config is used.
Use 2 (not 4) spaces for indentation.
What's the purpose of this change?
Should this be called `Kokkos_Tools_Test.cpp`?
This is a bit confusing, as `PartialResponseStrategy` is only used by ThanosRuler, not by Prometheus.
The test is a bit too long. I think it's better to split it into two tests.
Should we be using the config.Timeout here?
Please revert this file.
I would make this a hidden option.
This should be `SonataMediaBundle` as well
No need of this change.
Can we add a `MockQuery`?
We should not be removing the apiVersion parameter from these tests. The tests are designed to validate that we are getting the correct apiVersion from the service.
I wonder if we should do this for all packages. Maybe we should just move the "NVDAObjects" package to the top of the list, since it contains the most packages.
I think this is a mistake, I think we want to keep all the tests.
Can you change this to `errors: nil` when there are no errors?
This is a bug fix.
I think we should also remove the `if fileSize > 0` below since it's not needed anymore.
I think you can use the `assert` package to assert equality.
I think this should be `Math.max(this.hot.countCols(), this.hot.countSourceCols())`
I think we can remove this line
I'd suggest using `wpcom` spelling.
This parameter should be removed.
If we're going to do this, let's add it to `BaseProvider` as well.
This is a bit odd, because the only thing that can cause this error is an error in the code that writes to the file, which means that the error message will never contain any useful information. I'd just make this a `pass` and let the error bubble up.
I think this is a bit too much detail. I would just say "Azure ServiceBus supports at-least-once semantics in the default Peek-Lock mode; applications must call Message.Ack/Nack after processing a message, or it will be redelivered."
this should not be needed anymore, the `NodeHostname` is already available in the `Node` object
why don't you use the safe navigation operator here?
I think we should not change the instanceDir field. This can be done in the constructor of the DataSegment class.
I think you can just use `from warnings import importwarning`
Is this used anywhere?
Why not using `uidMapInUserNS(string(uidmap))` here?
Should be `#include <boost/algorithm/string/trim.hpp>`
It's better to do `sn.Paths[1:]` than `sn.Paths[0:]`
I'm confused, the `rule` field is still a `*Rule` which is a `*v1beta1.NetworkPolicyRule` which has `From` and `To` fields which are `v1beta1.GroupMemberSet`. So we're not using `FromAddresses` an
This is not safe if we have a gap, because we may have the same subject in the queue twice.
What's the difference between `inputs == nullptr` and `!inputs->hasData()`?
Why do we need this class?
Please remove this empty line.
I think we should be calling `purgeEventHooks` before we call `cloneEventHooks`, and then restoring the event hooks after the restart has completed.
`@throws` doesn't make sense, since this is a static method.
@ramr Can we use `npl` instead of `nplclient` in the package name?
This is probably the only place where we need to add the `@property` decorator.
I think it's still useful to have a link to sign in, especially on the main page. It's not always obvious how to get there.
This should be `int32` to match the other fields in the struct.
Should be `@protected`.
@charlesccychen is this something we want to do? I'm not sure if it makes sense to have both `quilt` and `quilt3` packages on PyPI.
Should this be `#if!BUILDING_TEST_PACKAGE`?
The change here is not in this PR. I'll fix it in another one.
shouldn't this be in the constructor?
This is a bad idea, because it's not clear what the unit of time is. I would either just do `time.sleep()` (which is ugly), or do `time.sleep(1)` and add a `1s` note in the docs.
I don't think this is right. The type returned by `GetSwiftType` is the actual type, not the canonical type.
I'd rather pass a `cache.Config` than a `codec.Config` here.
I think it's better to use a proper boolean type here, instead of "true" string.
This doesn't seem to be related to row functions.
The destructor of `std::unordered_map` will call `delete` on all values in the map.
Why was this removed?
Can you use a more descriptive name?
why not `affine_grid`?
Shouldn't we just get rid of the `wlr_output->scale` field now?
This test should probably be in `test_ssl.py` instead, right?
Why is this a bad change?
why is this unresolved?
Please update the copyright year in this file
I would not make `PackageEntity` a `DiagramEntity` if it is not used in a diagram. It's a bit confusing to have a class which is not used in a diagram, but is a `DiagramEntity`.
This should be a `str` type.
It's not clear from this what the default is. Is it `""` or `"%"`?
I think this constant can be moved to `SFClient` since it's only used there.
is this an attempt to fix the sync issue?
Is this a breaking change?
Unnecessary import.
I think we need to check that `name` is not empty here.
Please also change the docstring.
You can also use `time.Now().Sub(start)`
This is not necessary anymore
This is a bit more lenient, but I think it's ok
I'd rather see this be a static method on the `Process` class so it's more discoverable.
Why is this here?
I think it should be 0, not 1
This is not true anymore.
This is the actual fix
We don't need to pass the `analytics` string here since it's already available through the `useAnalyticsContext` hook.
I'm not sure why this change was made, but it seems to be incorrect.
I'm not sure if this is the best place to fix this. I'm going to leave it for now and will see if it gets merged.
Why do we need to clamp here?
why this line?
I would prefer a separate config option for this, as the other config options are all about the configuration of the container runtime.
I think it's better to return `MetricPointsAccessor` from `BatchMetricPoint` instead of `BatchMetricPoint` from `MetricPointsAccessor`. `BatchMetricPoint` is a temporary container that is only used in the context of `MetricPointsAccessor`.
I think the `tabindex` should be removed from the `a` and added to the `span`
This should be an error.
typo: `directConnection` vs `directconnection`
I think we should add a `null` check here, in case the `pageTitle` is `null` and `length` is `0`.
I'd say we should have a `copyList` method in the `StringUtils` class, which does the same thing as `copyOf` but without the `null` check.
We don't need to cast here?
I think we still want this line here, otherwise the test code will be missing some of the default values.
@liggitt this flag was used to indicate the application type, but now that we have the `--service` flag that takes the type as an argument, this flag is no longer used. I just want to make sure I'm not breaking anything by removing it.
I think it's better to say "The other fields contain the values for the records."
why was this removed?
I don't think we should add this. The `grpcutil` package already has a `NewServerStreamHandler` function which does the same thing.
nit: can we remove the `public` modifier?
I think this import is not needed anymore.
why are you changing the value of cspcGot?
I'm a bit confused by the name of this field. It's not a prefix for the alias name, but the prefix of the KMS key name. I think we should rename this to `KMSKeyPrefix` to make it more clear.
import order should be consistent with coding style
Should we add a note that this will only work for metrics that are emitted every N seconds?
I think it would be better to move this check to `from_pandas` method.
Why not just use `substr` to get the last character?
Layout/TrailingWhitespace: Trailing whitespace detected.
`Objects.equal` is used to check whether two objects are the same, and `==` is used to check whether two objects have the same value.
I wonder if this should be done in the init() function (like other H2O libraries).
This is an issue with the `Config` type. We should create a ticket to fix it.
We should be able to use `metadata->GetFunctionType` for this case, right?
We should be more specific here. If the release is not alpha, it should be beta.
This is probably a bug. I'm not sure why we would ever need to set this to true if `vk_ext_scalar_block_layout` was not present.
The problem is that we are removing all the `paramInits` here and not just the ones that are not in the `orderedItems`.
I think the docstring should be updated to say that this is a dummy implementation of a stats function, and that the numeric_only param is not used.
Curious why we need to hard-code this?
You need to add the new consent type to the list of links here.
I'm not sure if it's a good idea to have this in `settings.cpp`. I think it should be in `json.cpp` or `json.h`.
Should we also set `EnablePrometheusPusher` to `true` here?
This is a bit worrying, if you change the code in this file, then you need to update the doxygen suppress tags.
@QilongTang @Benglin @mjkkirschner @ramramps @harry-cpp @jbrooks-va @SzymonPobiega @QilongTang @mjkkirschner @ramramps @harry-
I think we should call this `GroupByQueryError` and `GroupByDataError` to be consistent with `SparkPandasIndexingError` below.
The old code is not correct. You can't use `pthread_attr_init()` without setting other attributes.
I think we can just return `TestIcebergSourceHiveTables.catalog.createTable(ident, schema, spec);`
This warning is actually not correct. It should say that it will retry until it can find all the secrets.
You don't need this include here
These are not needed.
Why do we need this?
This will crash the app. We can't do that. This needs to be a user-facing error, that's the reason we have this check here.
This interface is not used.
This is a bit of an abuse of the type system, but it makes the code easier to read.
this is a change in behavior. It is better to keep the old version as default and add the new version as a separate struct
Why is this necessary?
What was the reason for changing this? I think it's more consistent with the rest of the keys.
The `RETURN` at the end of this block is redundant.
can you add a check to make sure `statusLabel` is a string?
can we use `write.location.provider.impl` instead?
Why is this changing?
What's the reasoning for removing the passcode check here?
Nit: Should we make this `token string` instead of `registrationToken string`?
why did you remove this?
`copy` is not needed here, please remove it
This is a change in behavior. Previously we would have errored out if the file did not exist. Now we will ignore it. I think this is the right change, but we should be aware of it.
This should be done in `config_file_parser` and then the `global_set_option` call can be removed.
I'm not sure I follow. Why would we want to return `null` here?
Nit: I would call it `CustomOption` or `CustomTaskOption` since it's not really an option in the generic sense, but something specific to the task API.
typo in variable name
Please revert this change.
This import is not needed
This is a bit hacky. The `scp` module will raise an error if it encounters one. But it won't raise an error if the connection is closed. So we raise one here to make sure that the client sees an error.
Can we use `typing` instead?
why import this?
I don't see the `dependencies` package used anywhere.
Can you please add a doc line here?
Shouldn't we have here the same message as in the validation constraint?
I'm not sure how I feel about this. I'm not sure if we want to change the behavior of the String class like this. What if we just add a method to the `SiteConfig` class to fix the encoding on strings?
Why do we need to call `SignVote` twice?
This is not a good change.
why remove the brackets?
I'm not sure this is correct. The left button is supposed to be a fixed width, as it is part of the header. The only thing we should do is set the max height.
this is going to cause a problem with the bitcoinjs-lib tests
I am not sure this is a good idea. The zlib header should be the only one that includes openssl headers.
I think this should be `info`.
`TODO: https://github.com/googleapis/google-cloud-go/blob/master/compute/metadata/metadata.go` -> `TODO: https://github.com/openshift/origin/blob/master/pkg/servicecatalog/servicecatalogclient/client.go#L35`
I don't see the new `AccessKeyIDRef` field in the `ACMEIssuerDNS01ProviderRoute53` type.
we should probably return a list of templates (or a list of pointers to objects) here.
@andrewkroh @pabloem @fmaximus @vburenin this is the place where we used to add the capabilities for the trunking.
Can we keep the `SpendingKey` field? It's a bit confusing to have two fields with the same meaning.
I think this is the only change that needs to be made here.
I would call this `enabled` instead of `active` since `active` can be confused with "subscribed to email notifications" or something like that.
I think you want to use `%r` here, not `%s`.
Shouldn't we lock the mutex here?
I'm not sure if we need this here. I think we can just use the preferred name in the TLF handle.
Why is this a pointer?
Should this be `FastSyncLag`?
I think you can change this to `final`
I think this should be a `int` type.
this should be `s3.close()`
Can you add a `logger` call here?
nit: use a readonly field instead of a const.
this is not needed
This is not the same thing. If the `format` is not set, the value will be `null` and the format will be added with the default value.
This is a bit confusing. The function is called `updateEthContext`, but it updates the `updateContext` field. Can you rename this function to `updateUpdateContextField` or something?
I'm curious about this change. Is it because we want to allow for the empty string?
Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
The `useCallback` import is no longer needed.
I'm not sure if this is the best place to put this, but I think it's better than nothing.
This is a bit of a hack. I think we should be able to get the size of the merged object from the size of the arrays we're using to merge the objects.
Why this change?
This will not work. You need to build the opener before calling `urlopen`.
It's not really a command, it's a subcommand. I'd prefer to make it a subcommand.
why did you move this?
Do we need this here? I think it is only used in `pants.pex`?
Remove these empty lines.
Can you also add this to the docstring?
Can we put this in `com.google.api.codegen.java`?
This is the data for the `subscribers` flag.
Just a thought, maybe we could make this a helper method?
Please don't remove `filter` import, it's used in `scapy.contrib.smb` module
shouldn't it be a `func`?
I think the `hidepidEnable` var is no longer needed.
Please keep the original name `loadDictionary` for consistency.
The order of these is important. The IP must be set after the kind.
I wonder if we can get rid of the pipe completely.
I think this is an issue with the `i!== dom.value` part. This is the actual value of the element. So if it is 0, then we don't need to update it.
This is a breaking change. If `file.type` is not set, and the file is remote, it will fallback to the default `application/octet-stream`. Previously it would fallback to the mime type based on the extension.
I think this is the only place that uses this. I think we can just remove this interface.
Why is this file generated?
I think we should make it clear that this is a private method and not meant to be used outside of axe-core.
I think we should keep the operation field, and make it optional.
It would be nice if we could use `RuntimeInformation.ProcessArchitecture` to choose the right value. This would require `KestrelMemoryPool.MinimumSegmentSize` to be a function that returns the right value for the architecture.
this should probably be moved to the constants package
This should be in the `dom.js` file, and should be a method of `dom.js`.
I wonder if this should be an option in `Test::Unit::TestCase`?
why are we removing the 4 here?
This is not a typo, the variable name is correct.
This is not enough, you need to check the group size is 1, the type is CompactCertTx, the sender is CompactCertSender, and the fee is zero.
`get_notebook_data` is not a very descriptive name. It looks like you are reading a notebook file.
Is this needed?
I think we can just do a single `unless funder_id == org_id` at the top level here, and then do `funder_id.blank?` or `funder_id!= org_id` inside the `if` below.
This is the same as `ssh_nodes` so it is unnecessary
Can we call this `UpdateBlockMetadata`?
I think this is the only change that is needed.
I don't think this is accurate. The resolution time is not factored into the timeout.
I think this is a bad test. The `tls.log_master_secret` logfun is only called when the master secret is sent in the client hello. So it's impossible to have more than one.
I don't think it's a good idea to change the request compression hint on every header that is received. This could potentially change it many times.
You can use `@plan.administerable_by?(current_user)`
`security_group_ids` and `security_groups` are mutually exclusive, so we should raise an exception if both are provided.
`pull.head` is not a block hash, it's a block height.
why is this needed?
This is a server port. Please change the name to be consistent with the APIPort above.
I think we can use `if err := t.Append(sourceSet); err!= nil {... }`
I think this is missing the `assert` check.
Nit: I think these should be `int` instead of `int64`
I'm not sure this import is necessary.
This is a public enum so we should keep the public access modifier
Please remove FIXME
This is a breaking change. I don't think we want to break this.
This is a nice cleanup.
I think this will cause a panic if `os.Hostname` returns an error.
this is not the right place to do this. this should be done in the `getFormatsAction` method.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think this can be made more readable by using a switch statement.
I think this should still be `:`, no?
I would add a sentence or two here about why this is only supported for cgroupfs.
You're passing `false` here, but `true` on line 171. I think you want to be consistent here.
Why not just remove the flag?
This is a breaking change. Please revert the change.
Intentional change or just some IDE magic?
This should be `panic("global option " + opt + " already registered")`.
this is a bit confusing. target_link is not a target, it's a link to a target.
SummaryProductFragment was instantiated twice.
Nit: you can use `github.com/aws/amazon-ecs-agent/agent/pkg/agentconfig` now
Why do we need this to be an interface? Can't we just have a `Transports` method on the `Outbound` struct?
I think this is the root cause of the problem. We're sending all the plans back, including private ones.
This is a style change, not a semantics change, right?
this is a bug fix, right?
This is a bit of a hack, but I couldn't figure out a good way to get the latest listen time. The problem is that `db_conn.fetch_listens` doesn't take a timestamp as a parameter, it takes a start time and an end time. So I had to pass in
Is this necessary?
I'm not sure this is the right change. `JX_OP_CALL` is not handled in `jx_print_expr`, but `JX_OP_LOOKUP` is.
I don't think this is needed. The `ReturnValueCollector` is disabled by default.
We can probably just use `awserr.NewRequestFailure(err, r.HTTPResponse.StatusCode, "")`
I think we should keep this test, but with a duration that's less than the default renewBefore.
We should probably add a `context.Background()` context to this loop, otherwise we'll be consuming the same context in multiple goroutines.
Is this line necessary?
I think the TODO is no longer relevant.
This is not used.
nit: this can be `read.split.by-partition.cost`
You could move the call to `initPWMClocks()` to the `initRTC()` call above.
do we need to add the other nodes here as well?
I'd rather have a class for this, but I guess it's not a big deal.
I think this can be simplified to `len(poolSpec.RaidGroups[0].Type) > 0`
I think we can remove the TODO now.
This should be `this.s.options.ignoreUndefined`
I think the old implementation was correct. If the tracer is not initialized, it will still return the correct value from the scope.
I think we should keep the blank lines.
This should be moved to the bottom, so it doesn't pollute the declaration.
I think we should keep the 1st result index as the first result.
I think this should be a const.
I think you can use `$view->getStatusCode()` directly.
Please revert this file.
Why do you have a reference here?
I don't see this being used anywhere, can we remove it?
nit: can we call this VERSION_LOW_CARDINALITY_LEAVES?
Should `Debug` be true by default?
why not just remove it?
This needs to be 2.2.0
i think we should add a check here that this is only enabled if the script is present
I think you can just do `nodeStack = make([]PlanNode, len(inputPlan.Roots))` here.
Should we keep the `Pagination` component in this case?
I would not use `&` but `===` here.
Is this a legacy block size?
I think this is a bit too much, maybe we could use a `QWebEnginePage.search_finished` signal instead?
This is a little confusing. I'd suggest `makeflow.fail.%d`
I think you could just use `context.Background()` here.
`options` is not used anymore
I'd like to keep the code as simple as possible. Can we get rid of the `DisplayPreference` member variable and just use the enum directly?
1<<30 - 1 is 1073741823, 1GiB. I think that's way too much.
I would make this `_expands_user = False`
I think it's better to remove the `loss_single` method, and use `_compute_loss` directly in `forward`.
This should be updated to use `getClusterRegion` instead of hardcoding the label name.
I'm not sure this is the right thing to do here. This is a mapping of error codes to strings, so it's not really a tuple of things.
This is the default for now, but we will be changing this in the future, so I left it up to the user.
Should this be an error, or a warning?
Does this need to be public?
I'd suggest moving this to the `describe` call at the top of the file.
Should this be an array of blurhashes?
I think we can just use `google-site-kit/v1` as the URL.
Should we be returning the error here or just logging it?
This is a bit of a hack, but it seems to work.
This function seems unused.
This should be `CleanWebpackPlugin`.
This is a local option. It doesn't belong here.
Should this be `.present?` instead?
I'm not sure that this should be here. This is a response header, but it's being set on the request.
I think this is wrong. The "rows" parameter should be 10, so there should be 10 docs in the result.
I think it's better to remove the blank line here.
This is the only change that actually fixes the bug.
I would prefer to see this in a constructor, and not a property.
`gStorageServer->stop()` is called in `notifyStop()`, so `gStorageServer->notifyStop()` is redundant.
Why not stop the server?
This is only for debugging?
This name is no longer unique.
I am not sure that this is safe. I think it will cause problems.
This is the only change that will break the test.
This is a very minor optimization. It would be better to have a single `folly::to<std::string>` call in the loop.
Is this really necessary?
What changed here? Is this a different commit?
I think we need to add this to `fileutil.FgrepStringInFile` as well.
I think we should add this method to `FileSystem` interface.
I think this should be `default=False` by default
What is the "true" parameter used for?
We should be able to get rid of this function.
I think this is a little confusing, because the `select-follow` command is already bound to `<Return>`. I would just add the `--type` flag to the `select-follow` command.
Shouldn't this be `Float.NEGATIVE_INFINITY`?
Is there a reason why we're not doing this for all signals?
I don't think this is correct. The shear viscosity is not isotropic, and the coefficient for the z-direction is different from the coefficient for the y-direction.
this is not a good idea, this will prevent the error to be logged in the log file
I think it would be better to keep the number sequence intact, and just use a new number for this.
why change this?
remove empty line
I don't think this is correct. I think you want to set the JWT when the JWT is not null.
I think we should make this `|| User.find_by(email_address: session[:user]['email'])` to match the behavior in prod.
I think this is a mistake, the number of entries in the list is 34.
I think this line should be `defaultProfile.Spec.EgressRules = []api.Rule{{Action: api.Allow}}`
why did you remove the `if options[:recursive].nil?` check?
The reporter should be set here.
Why not just make the check in the `parse` function?
I'm not sure this is the right thing to do. I think it's better to just pass the rank in the call to `ioencode` and make the rank a parameter.
This seems like a bad idea. It's not always the case that a `RuntimeType` is named. The `get_object` method should not be changed to depend on the `name` attribute.
I think this should be `return Long.valueOf(granularity.between(EPOCH, timestamp));`
This is not the right place to do this. This is not an `on_resource_changed` event.
I don't think this is the right name for the disk. The disk is being created by the `disk-importer` service.
This is not related to this PR but I wonder if we should consider to make this class internal and have a public MeterFactory class that has these methods.
I would not do this.
I think it would be better to have a separate config for `partial_page_fetch` and `fetch_until_empty_page`
can you add this to the docstring of `callbacks`?
why is this moved?
We should probably add a note here that this migration is a no-op.
The `@namespace` tag should be at the top level of the file.
I don't think we need to fetch all of them, just the first?
I think we should also check the content type is correct.
We can remove this check. If the `Files.copy` call fails, then we'll get an exception anyway.
I think this is a bit too much detail for this abstraction. I think we should just have `IsZero` on `common.Address` and `NewEthAddress` on `common.Address`
This seems a bit high for this menu. I think 90 is more appropriate.
This is to make sure that the same string (with different encodings) doesn't cause different hashes.
This is not a real fix, right?
Should we remove the `run_frequency` and let the script run every minute?
This is the standard line ending for CSV files.
Is this a global variable?
I wonder if we should make this a separate package. The configure script is already pretty big.
This is a very minor thing, but I would prefer the `if`/`else` structure.
This is a bug in the previous implementation?
why not use `self.getAddonsButton` here?
Should we be setting this in `__init__` rather than here?
why not put it in consensus?
We need to keep this as `InnerObject` so that we can still use it for all objects.
I don't think this should be in `runtime` - it's not a core concept of the engine. It's something we're inventing to make it easier to build a service that wraps the engine.
I think we should not return error here. We should only return error when we can't find the uri.
This should be the digest of the image as it is stored locally. The digest of the image as it is on the registry should be in the ImageReference.
Is this include required?
I think we can simplify this code to `if err == nil && v == nil { return nil, ErrNotExist }`
I'm not sure why this is here. I didn't see it used anywhere.
I'm not sure if we should clip it here or later on, since it might be better to clip it at the time we show the data in the UI.
Do we want to pass prune mode here? I think not.
I'm not sure why this change was made.
Can you add a license header to this file?
shouldn't this be `require.resolve('@docusaurus/preset-base')`?
Please make the default value `False` and not `True`
I think we should just always call `setProperty` here.
Why this change? I prefer the previous name
Shouldn't we keep this at 6?
I would recommend to use `MAX_PRECISION_ALLOWED` and `MAX_SCALE_ALLOWED` to refer to `HIVE_MAX_PRECISION_ALLOWED` and `MAX_SCALE_ALLOWED` respectively.
why did you change this?
How about logPeerTracker.Debug
I'm not sure this is a good idea to use google's feed as the test. If google changes their format we'll have a test that fails without us knowing.
I think we need to make sure that the variable name is unique.
This is the only change that actually fixes the bug.
Why is this changing?
This is a bug fix.
I think you need to check that *s_val is non-NULL before copying into it.
I think we should add a TODO here, saying something like "This is an incomplete classpath, report the missing class"
why default to 0?
Please add `YolactHead` and `YolactProtonet` to `__all__`
This is a `final` class, so it should be `private`
This is a bit unfortunate, but I think it's necessary. It's not clear how to generate a human readable name for a class file name, and it's not clear how to generate a class file name from a human readable name.
I'm not sure why you're adding this. You can just use `unsafe.Pointer` directly.
I'm not sure about this. If it's empty, then we're going to be searching the whole tree and not just the sub-tree we're interested in.
why move this line?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I think we should keep the explicit list of supported versions, to avoid adding other versions by mistake in the future.
I wonder if we should just delete this entirely. We're now just using the `wire` package directly and so the generated code should be the same as if you ran `go run...`.
Do we need to mention about the volume name being passed?
I would make this argument "import-peak-bounds" (singular).
I think this is a breaking change.
I think this should be `@param string $rangeFilter`
@rileykendall - This is a bit concerning. Are you sure this is the right thing to do?
This change is needed to ensure the link works correctly
why are you adding this?
Shouldn't this be called `OpenvpnPortSupplier`?
Is there a way to avoid disabling pylint here?
This will fail if the password contains special characters (e.g. `#`)
I'm not sure this is actually a problem, but it looks like we could remove this instance variable.
Shouldn't we check the type of `other` here?
I think this is a breaking change. The `LGBM_SE` type is supposed to be used for the buffer size, not for the buffer itself.
should be `$response =`
this is a nit, but if we are using nil here, we should probably be using `GinkgoWriter` for both `Stdin` and `Stdout`
This is the same error that you are catching on line 68, could you catch it in one place?
This is not the right fix. This fix is only for the case when you don't have a cgroup controller. The cgroup controller is the container runtime itself.
I would like to keep the imports in order. Could you please move this line to the bottom?
Why is this check needed?
You can delete this file
I think the condition here should be `l.IsEvmTransfer() && l.Address!= nil`
`setHours(0, 0, 0, 0)` is not necessary because `Date` constructor does that by default
I think we should keep this.
The error message should be "eth_backend is nil".
I'm not sure if it's safe to assume that `transform` and `webkitTransform` are the only two prefixes. Shouldn't we check for `msTransform` too?
This is a bit of a hack. I think we should be able to do this in a better way.
I would prefer to have `Date created` in a separate field, but this works as well.
I would add a `LoaderSaver` interface here.
Why is this needed?
I think this is a bug. This should be `noext = StripExtension(it->first)`, since `it->second` is the path.
These should be in the same order as the `VUID`s.
This is a good place to use `auto`.
This is the only change that is really required.
Should we have a way to turn off printing, like `GBT.log()`?
This will be always false, because the `FeedMedia` is not a file.
You need to add this string to the `blockly_en.js` file
Shouldn't this be called `close`?
I think you can just remove this method.
Is there a reason why you're not using `auto` in the next line as well?
this is a temporary change for debugging. This should be removed.
Why is this change necessary?
I don't think we need to hardcode this. We should be able to get the factory address from the node config instead.
I think it's better to use a more specific name for this property. How about `azkaban.quartz.enabled`?
why did you add this?
Why do we need to save the zip file to disk here?
I think we should just remove this line, since it's not used.
Could you please use the `hasPricingGroupByDomain` method?
The only time this is called is from `setSelection`. If we want to make this a public API, we should make it a method of `TextSelection` instead of `TextEditor`.
You can use the android:windowEnableFeature in the manifest file instead of this.
Do we want to keep the wording here?
What is the difference between the new version and the old version?
Why did you change this?
This is a breaking change, as it's no longer possible to use an object for `$options`. I'm not sure if that's a good thing, though.
this is not a part of the PR, right?
Why is this being removed?
I don't understand this change. I think you may have forgotten to remove it.
I'm not sure about this part. If the path contains characters that the locale cannot handle, then we consider it as non-existent.
I don't think we should be ignoring this error.
I think this is the only change needed to fix the bug.
can we put these constants in a file called constants.go?
I think this is a good candidate for the new `auto` keyword, if it's not already used in this file
I think this should be done in `ngModelController` and not here, as this is not a model validation.
Shouldn't we call this in the `before_action` of the `show` method?
I think we should also have a test case to make sure that the id is unique, because it is the primary key of the Type table.
I think it should be a warning, as it is not an error.
why is this being removed?
Is there a reason for the sleep here?
Should we return a failure here?
I think this change was unintentional.
I would have expected this to be a separate test case, e.g. `it 'does BiocCheck' do`
This could be an IOException.
Line is too long. [82/80]
Why are we removing this?
I don't see a corresponding change in the test where the ca is not set.
This define is used in 3 places. Please inline it.
This seems to be the only change that needs to be merged.
I think this is not the right place to change this. We should change it in the `styles.scss` file.
I think we should remove this function.
This is a bit of a hack. The difficulty calculation should be done in the same way as the other difficulty calculators.
I think this note should be somewhere more prominent, like in the godoc for the server itself.
This is not a good idea, we should be using the compiler's own flags, not gcc's.
Can you use `msi_opts['PUPPET_AGENT_STARTUP_MODE'] == 'Automatic'? 'Auto' : msi_opts['PUPPET_AGENT_STARTUP_MODE']` here instead?
Line is too long. [83/80]
I think this is a little too specific. The type could be used in more places.
You should be using `unique_lock` in here.
nit: revert this whitespace change
This is the number of committed sectors that the miner has.
nit: unrelated change?
If you use the `toggleBooleanProperty` method, you don't need to check if the request is an xhr request
Why is this change required?
Shouldn't this be `if (ctx->protected_mode &&!lua_isfunction(ctx->lua->state, -1))`?
We need to make sure that this script runs before `build-system/test/amp.js`.
This should be reverted
I'm not sure this should be 443?
I think we need a new variable here, because the `lastLogId` is not only used here, but also used in the `replicateLogs` function.
Use the new Ruby 1.9 hash syntax.
why do we need to import `protogen/iotexapi`?
I'm not sure if this is needed
Why is this needed? The default is already infinite.
You might want to use `devise_scope` here
(style) externs should be avoided in.c files
Why is this needed?
I'm not sure we want to use `w.ID()` here. I think it should be the name of the instance.
Why do we need to set the `vnode._component` to null here?
I would not remove these. We have a style guide that requires them.
@miciah: This is what I was talking about.
I don't think we should have the same logic here as we do in `ReconcileCluster`. I think we should check whether or not the cluster install ref is present here and skip creating the cluster provision.
why remove these tests?
This will be a breaking change for anyone who has a cluster in a `Stopped` state.
This is the root of the issue. This is the only place where we check for rootless.
I think we should have a `nil` `context.Context` here to avoid the extra allocation.
"used to pass in parameterized value" -> "used to pass in a parameterized value"
Can't this be removed?
This test was only testing the `RemoteSpanContextFromContext` case, so it should be renamed.
@Scottmitch Shouldn't the `val` be escaped by default?
this should be `DataTable = None` and then `DT_INSTALLED = DT is not None`
Is this still used?
This is a very important change. It was a bug that it wasn't there.
Why public? Seems like a breaking change
I think we should use `super(BaseTestCase, self).tearDown()` here.
Is this file supposed to be in the PR?
Why do we need this?
This is a good sign. We should start adding more of these.
Shouldn't these be in the order they appear in the API?
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
This is a bug fix, so I would not remove it.
Why is this needed?
This is the only place we're using this function. Can we just inline it?
this should be a single line `this.permissions[i] = new ObjectPermission(privilegeType, permission.getGrantor(), permission.permissions);`
I would add a docblock for this function.
Can we add a check here to ensure that the filter is not already in the chain?
This is a change in behavior, we're now buffering errors.
Why is this changed?
I wonder if this is the right default. I guess we need to check if we can even do aggregation in the first place before we can drop.
Do we need to worry about people who have kinto.ini in their cwd?
this variable should be conditional on the have_libsystemd variable
This is the view for the "Upgrade" button on the "Upgrade" page.
This is a bad panic, but it's a good panic. I'm not sure what to do here.
I think this file is not needed anymore
This is going to be confusing to new users. It's not clear that `path` is a `PackageRegistry`.
(style) line over 80 characters
@shahzad1235, please keep this change in sync with the one in the `synopsys-blackduck` branch.
Is there a reason for this change?
I don't think this is necessary. The format is just an enum, you can just do `output->format = format;`
This could be an Integer instead of a Long.
I think we need to use a different key for each exflow. Otherwise, we will have a race condition where multiple flows can be submitted at the same time.
This should probably be renamed to `IS_OVERLAPPING_MERGED_CELL`.
This should be `--java_primitive_has_method=false` to be consistent with the rest of the options.
I think 16 is a bit high for the number of pollers. This is a system task queue and it is important that it not overwhelm the system. I would make it 8.
nit: remove empty line
Could you add a docstring for this?
The original formatting was a tab.
I don't think we need to check for negative gas price anymore
this is a BC break
This is a good place to use `httpgrpc.Flusher`
I am not sure if this should be an error. It is not mentioned in the docstring.
This is not the best code to use, but it works for now.
Do we need to make this public?
Should we keep the old `SetApplicationError()` method too?
I think you meant to call `cart_pending_approval_email` here?
I would use `IPPROTO_UDP` and `IPPROTO_IPIP` for these constants
why `Col` is removed?
`PhpParser\NodeAbstract` is an interface, not a class.
`FormEvents::PRE_SUBMIT` would be better here.
Why not use `int(record_get_field_value(self.record, "001")) or 0`?
This should be a `Symbol`
This should be `computePath.Child("platform").Child("aws")`
I think it's better to use `getPivotFacet` method to avoid code duplication
I'm not sure if this is the right place for this, but it's the only place I could find that matched the naming convention.
This is a bit hacky, but it's what we do in other tests.
I don't think we need to remove this
This should be called `Window` and not `_window`.
The `kind` parameter was added in 0.22.0, so this test will fail on older versions.
I don't think this is a good change. The default is to not disable iptables.
Why do we need this?
this looks like a bug, I'd expect `true` to be rendered as `"true"`
I'd suggest `--blacklist-type` to be consistent with the CLI flags we use in other commands
I'd rather use `listen['track_metadata']['additional_info'].get('duration_ms', None) / 1000` and then check if it's `None` rather than doing two separate checks
We should do this check only if `this.options.resumeAfter` is set.
I'm not sure this is the right way to do this. It's not really a size of a node. It's the size of a node in the array.
We should use `trim` here.
This is not a good idea. The idea is that the executable name is not quoted, so that it is not interpreted as a shell metacharacter sequence. It should be quoted if it contains such sequences, but otherwise not. The pattern should not try to guess if the executable name is quo
can we use `HiveMetastoreTest.class` instead of `HiveMetastoreTest.class`?
I think it's cleaner to have a `cudaStream_t` parameter to this function, so the caller can decide what stream to use.
Why the change in naming?
This is a bit weird, but I think it's necessary to avoid the conflict with the existing `mdc-button--round` class.
should we make this an async Task<bool> so we can return false if the nonce is not available?
Can we pass in a `[]string`?
This is the only place in the test where we use the `ID` field on a `SessionID`. I'm not sure if this is intentional, but it's not the same as the other `SessionID` fields that we use.
This was removed because it's not used anywhere.
This check should be done before the lock is acquired.
This is not the only place where we have a similar code. I think we should try to use a common helper method.
I think it would be better to use `logging.info` for this.
This is a bad idea. We shouldn't be logging in tests.
Shouldn't this be `public function __invoke(QueryInterface $query): string`?
This is not a run action, it's a `PersistBlockLevelInfo` action.
Can we just use `errUnmarshalCountOpts` as the error for all unmarshaling errors in this file?
Can this be `world_comm_ptr{nullptr, &lbann::finalize};`?
I think this is a side effect of the flake8 changes.
is this a change to fix a bug?
I'm not sure we should be adding this, as it doesn't actually reflect the copyright of this file.
I think the issue is that `CombinedOutput` is waiting for the command to finish and then reading the output. But by the time it finishes the command has already exited and we are trying to read from a closed pipe.
I think we should keep this information. It's important for people to know that this class is not a Solr client but a wrapper around it.
I think it would be nice to have a test for this.
This is the only change that is really needed.
I wonder if this will work on Linux. I think we need to add a little bit more logic to make it work.
We should probably revert this
I think this should be `StoreSession` instead of `Store`
why do you need to pass the function name?
What's the difference between this and the `EnodeAccount`?
Why is this needed?
I don't think we want to do this. This will always return an array, even if the attribute didn't change.
this should be `has_many :video_teachers, dependent: :destroy`
This is the fix.
These are already included above
This file should be removed
Why is this file generated?
I don't think this is right. It's a fraction of the RTT, so it should be `1.0/8` (or `0.125`).
I think the `d_r_set_avx512_code_in_use(true)` is enough, and we don't need the LOG.
Why are these being removed?
I think we can remove this interface and have the profiler directly implement `IClrProfiler`
This is the only change I'm not 100% sure about. It seems to work, but I'm not sure if we should be passing the `--domain-filter` flag at all.
I think this is a typo.
This was the only place I could find where the `commandBuffer` was being used. I assume that it's safe to pass in the `commandBuffer` here, since we're already in the command buffer loop.
This should be `node.querySelectorAll('input[type="submit"]:not([disabled"]), img[type="submit"]:not([disabled"]), button[type="submit"]:not([disabled"]), textarea')`
Should we rename `TaskType` to `TaskKind`?
I don't think we should call `reset` here, since the reporter is not being re-instantiated.
I think we should keep this force. Otherwise, the only way to use the cluster mode is to manually create a cluster and set the correct spark properties.
Line is too long. [81/80]
Is it possible that spanContext could be null here?
Why is this necessary?
I would use `pip3` instead of `pip` here.
Why do we need this class? Selenium already has InterceptingElementExeption.
Maybe we could return a list of countries instead of a map?
This is a breaking change, right?
`goPkg` is not a regular expression, so you can't use `\w` or `\d` here.
I would add a note that the value is per core.
I think that this should be `from pylint import brain`.
why do we need this change?
nit: this seems to be a little out of place. It would be better to have these in `PrincipalDao`
I think you'll need to do `$private:tempArgs.Keys -notmatch '^--'` to remove the `--foo` flags.
What does this FIXME mean?
So, this is the actual fix, right?
This is no longer used.
why not use `event.getInvocationType()`?
Do we need to unset this in the end?
I think we should just switch the order of these to match the protobuf
Metrics/LineLength: Line is too long. [85/80]
Is there a reason to use the `s3` protocol here instead of the `s3a` protocol?
This is not necessary. We should not add a `namedCertificates` section if the user has not specified any certificates.
remove this empty line
I think the English is better, but this is fine too.
Is this whitespace change intended?
This line is causing the test failures.
Should we have these two routes in `app/controllers/concerns/communities_controller_concern.rb`?
Why is this needed?
this is not related to this PR, but what does the `+` do here?
I'd prefer to use `substitution` instead of `substitutionName`
I'm not sure if it's ok to register the close() call here.
I think you don't need the conditional here, `NativeModules.ShareExtension` will be undefined on iOS
This is a bit confusing, as it doesn't match the `str` output of `BigqueryStorageClient` (which has `project_id:dataset_id.table_id`). Also, it doesn't match the output of `str` for `BigQuerySource` (which has `project_id:data
I think you should use `if (!\array_key_exists($sortFieldParts[0], $aliases))`
why not use `github.com/iotexproject/iotex-core/iotxaddress`
What is the `pool.expFeeFactor`?
isn't the default `null` already the same as `*`?
I'm not sure if this is the best way to do it.
This is a change in behavior. The node will now try to connect to the OpenVPN service instead of a noop service.
Why is this needed?
@bparees @smarterclayton I'm curious why this was removed in the first place. I think it's important to have this condition to indicate that the requirements are not met, and the cluster is not ready to be used.
I think the `Invalid target option given to` part is a bit misleading, since the problem is not the target option itself.
This is a bit of a hack. I would prefer a proper `marionette: true` option in `Selenium::Driver`
Should this be named `task.initialize.threads`?
I think it'd be better to have a `GROUP BY` clause in `CREATE TABLE` that accepts a list of column names to group by.
Block has too many lines. [43/25]
Why is this needed?
I think this is a bug.
I think this is not necessary, because we can just pass in the address of `input_buffer_` to `SyncUpGlobalBestSplit`
I think this should be `github.com/filecoin-project/go-filecoin/address`
I think this is an unrelated change?
Is there a reason this is not just `wait_for_event(dynamod_initialized, 0);`?
Is this change required?
I think this is a good idea, but I think we should put these in the `pulp.common` package. This is a common library that is shared across all the Pulp plugins, so these exceptions should be in there as well.
You could use `#include "res/androidicon2.xpm"` instead.
This is not a boolean, but a flag.
This should probably be `VuFindSearch\Search\Search`, no?
why is this being added?
why is this needed?
Is this an unrelated bugfix?
I think we should be careful about using the term "flushed" here. As far as I know, the term "flush" is used to denote writing the data to the disk, which is not the case here. The data is not written to the disk, but is only saved to the server.
@rhatdan - I think we need to do this - otherwise the request is sent to the service itself.
I think this is a bit overkill. Why do we need to retry 10 times?
The trailing comma is not needed.
This should be `before_filter :authenticate_user!, only: :create`
I would not put it here. I think it should be in the `NetworkPolicy` struct.
I don't understand the point of this change.
I think this is not needed.
This looks like a bug fix, right? Should this be done in a separate PR?
I don't understand this. If `ctx.protocol_selector.ratio.http3` is 0, we will close the connections.
Please use `goimports` to import all standard packages.
The `Button` class is already imported at the top of the file.
I don't think this is correct. The original copyright was correct.
This is the only thing I don't like about this PR. I think it's better to have a separate service for SOCKS5.
This is the main change.
I'm not sure we should do this. There are a lot of plugins that use the old style `PropertyDescriptor` and we'd have to update them all. I think we should leave the `PropertyDescriptor` and `StringProperty` as is for now.
This should be `confirmed: %2$1b`
This is the interface for the connection object that will be passed around in the new connection layer.
why is this change needed?
Do we want to log the error?
I assume this is because of the difference in the way the test harness runs the tests?
I assume this is being removed because it is no longer needed in.NET Core?
It's better to use `io.servicecomb.transport.rest.vertx.accesslog.impl.AccessLogHandlerImpl`
This is a bit weird. Why don't we just return `!!node.hasAttribute(aria)`?
I think this should be `Crypter` instead of `crypter`?
Is this guaranteed to be true? If not, we can still use the extension to get the list of supported image formats.
This is the only change that might be a little suspect. I don't think it actually matters. The `Microsoft.AspNetCore.Server.Kestrel.Core` namespace is the same as the `Microsoft.AspNetCore.Server.Kestrel.Core.Internal` namespace, so this is just a matter of the `using` statement coming 
This file is not used.
The snippet service doesn't like the `AWS IAM` in the description, it needs to be `AWS IAM`
I think it is better to have a `create_database` function in the `config` module.
This is a bit of a hack, but I think it's the best way to ensure that we can run the migrations from within the tests.
This is a legacy field, I think it's not worth it to change it.
Should this be `MinTimes(1)`?
I think this migration should be in `db/schema.rb`
I'm not sure if this is the best place for this. Maybe it should be in `UpcomingCourse`?
`cls.__name__` is the class name of the caller, not the class name of the `Dataset` class. I think you should use `cls.__name__` in the warning message, and `Dataset` here.
I don't think this is needed.
I wonder if it would be better to always use `quoted-printable` and only add the `8bit` header when the encoding is `8bit`?
I would prefer to keep the text as it was before, it's not a message so we don't have to localize it.
We can probably just set this in the `send_request` function.
I think we can avoid the `min` call by adding a check for `prefixLength` being > array length.
why not keep the check?
I'm not sure how to fix this one. It's the only one that's not a regex match, but it's still a SecurityError.
I think it is not required, but I am not sure.
I think we can remove this import as well.
This is a fix for a typo in the default SEO values.
This check is not needed. We have already checked that `isSparse` is in bounds in the `if isSparse > 0` check.
I would use `len(m.Bucketlist) == 0` instead of `m.Bucketlist == nil`
This method is not used by the base class.
I think this is incorrect. If the node is syncing, it should be using the lowest number it has seen so far.
@Pearl1594 This change is not related to the fix.
You can use `Object.keys` instead of `Object.keys` to get a more robust type check.
This is the actual fix.
I think this might be better served by a partial.
This is the only change I'm not sure about. It's a bit odd that we need to set the config here.
I would keep the name `RunQuery` here, it's a bit more general.
I think this is a good thing to keep. The subtest can be replaced with a `VK_EXT_extended_primitives` extension.
What is the default for `reg_decoded_bbox` in the `AnchorHead` class?
Why change this?
This is a bug fix for the case when `self.wfile` is `None`.
I think this is a change in behavior. The sortByColumn function is a function that is used to simulate a click. I don't think the change is bad but it is a change in behavior.
I don't understand this one. Why would it be ok to ignore the exception?
remove this line
nit: remove empty line
This method should be called `getFieldNames` instead of `getFieldNames`.
`length_from` is a required argument now.
nit: This should be a `TaskFailedError`.
Shouldn't this be in the else clause?
I would have used `!I` here, but I guess it doesn't really matter.
`parseFunction` should be called only if `repr == NULL`. Otherwise, it will be called multiple times for a function expression.
I would suggest that you use a named parameter for `StartTime` and `EndTime` to make it easier to understand what is going on here.
I don't think this file is needed anymore.
I think we should update the docstring for this function to reflect the new behavior
I think this should be `augvar += 1  # [unused-variable]`
I'm not sure if we want to search for `types` inside `mod.files` too?
Shouldn't this be `GroupMembers []GroupMember`?
I think we should remove this log package and use the one from golang
I think we should use `window` here, as that's what the browser sees, and it's the most common case.
Line is too long. [82/80]
I think this was done to ensure that we don't accidentally use the wrong datastore, but I don't think it's necessary anymore. I'm pretty sure we're using the correct one.
`http` is deprecated, should be `https`
this is not needed
"are" -> "are not"
I'm not sure if this is the right place for these constants.
This is a bit redundant. `java.lang` is already a constant in the `AbstractJavaRule` class.
I'm not sure about this change. The `Expires` value is in milliseconds, so this will add `time.Now()` plus `time.Duration(cr.Expires) * time.Millisecond` to it. The `Expires` value is supposed to be in the future.
This is the only package I'm worried about. I'm not sure if we should use `k8serrors` or `errors`. The `k8serrors` package is only for errors that are specific to k8s, so I'm not sure if we can use it for errors that 
Should we do a `c.traceOutOp` here?
Why is this needed?
I think we should use the same prefix for the authentication and pki authentication metrics.
missing type-hint for both
I don't think this is needed anymore.
Why do we need to store this in the block?
can you explain why this is needed?
@jurre this is the command we'll use to build the inventory file.
I think the code is wrong here. If I'm not mistaken, the `IsEip3238Enabled` property is never set to true.
Layout/EmptyLinesAroundMethodBody: Extra empty line detected at method body end.
Can you use `rem` here as well?
You've added a space here, remove it.
I would call this "skipCleanup" or something similar.
This is the only change that isn't backwards compatible. I think we can make the change and then backport it.
I think we should use `Object.equals` here, to make it consistent with `Object.equals` in `State`
why not use `isinstance(to_replace, (str, list, tuple, dict, int, float))`?
@anistor should we change this to `SplitShardRequest`?
I'm not sure if it's a good idea to block on the election context closing. I think it should be done in a separate thread, and then the close method should be called in the original thread.
This is a bit confusing. Is this a log of a failed action?
nit: remove the `out` prefix from the function name
I'd rather this be a `@handleException` function
Shouldn't we just use the epoch block number here?
this is the fix for the crash on startup
I don't think this is correct. I think this option is still relevant if the daemon is disabled.
This should be removed
I don't think we need to emit here. The signal is already emitted in the `updateLoadStatus` function.
I think we can remove this test case now.
I think we should make this package-private, and then use `@VisibleForTesting` to annotate the method that can be used outside of the package.
I think we can also remove the `else` here and just put the `emails/numbers/icon-number` in the `if`
This is the version of the current `Indexed` implementation.
I think you want to add this to the `New` function.
Why is this disabled?
Why remove this?
I think this needs to be `def change`
This change is unrelated to the PR, but I wanted to catch it now rather than later.
this should be moved to utils.py as well
I think this will break on windows, but we can fix that later.
This is a bit confusing, because `task` can be None.
I think we should default to empty string.
This should be `from functools import...`
why do we need this?
I don't think this is needed anymore
Should we add `:authority` to the list of supported headers?
I think this should be `this.getScene().getWindow()`
I think this is the root of the issue. The `replacements` and `customReplacements` are both being used as a map of string -> string.
I think this should be `expect(group_value_for 'group', Object).to eq("Object group")`
I'm not sure this is correct, but it seems to fix the issue
This should be `drwrap_unregister_fragment_delete`
I think the original intent here was to filter out all sections except the last one in a given phase. The old query would return an empty set if there were no sections in the phase, but it would still return a set of one if there were only one section in the phase. I think this query w
I'm not sure how we were using this before. I think we were using the `Azure-SDK-Go-` prefix. We should probably keep it.
I think this is a good place to add a TODO, that we should implement this, as it will be necessary for the upgrade scripts.
why remove this?
We should try to avoid changing existing tests.
This is wrong. It should be `../src/whatever.js`
I'd be in favor of calling this `compose()` instead of `transform()`, since `compose` is a more common term for what this method does.
If the base is aligned, we don't need to do anything.
nit: new line after this one
This is a breaking change, but I think it's fine to break these since they are internal.
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I don't know why we use `const` here instead of `var`
can we remove this?
This should be `assertThrows`
why did this change?
I think we should keep the `.where(id: orgs[:thirty_day_activity_id])` here, since we're trying to filter by `thirty_day_activity_id`
I don't understand the removal of this constant.
This is the only change I think is really necessary. The rest is just a cleanup.
This is the actual fix, the other changes are just for clarity.
I think this should be `<input id="id">` instead of `<input name="id">`
@pabloem @dmitshen I think this is a regression introduced in #2258.
This is a bit weird. I think it's cleaner to move the `objreg.delete` to the `test_init` function.
Is this necessary?
Is this really the correct way to get the peak number of threads?
I think it should be `json:"-"`
I don't like this name. It's not descriptive enough.
Do we need to store this in the config?
I think we can keep the K_UNDEFINED as it is, just add the K_DEFINE and K_IGNORE for parser private items.
I think this should be 1000, not 10000
If you're going to change the signature of this function, you should also change the name to `wrapErrfWithPrefix`.
I think we can get rid of the `.text-box-wrapper` class here.
I think you should use the `getReportSpamRecipient()` method in the `AbstractAccount` class
I think you should use `containsInt` here
I don't think this is correct. The `in` is rewritten as `eq(col, x) OR eq(col, y)` which means that if any of the values match then it will return true. The `notIn` should be rewritten as `not(eq(col, x)) AN
This is the only one that wasn't already doing this
I'm not sure if this is a good change. Why do we want to keep the connection if it's not in the conntrack table anymore?
What's the purpose of this?
I think this can be removed now since the `TooFarAway` message is sent on line 1218
This is a breaking change in the API. I think it's better to use a setter function, like `setSharedPreference(SharedPreferences sp)`.
This was a bug in the previous version, right?
nit: I don't think this is necessary.
I'm not sure we want to allow this, but I can't think of a reason why this would be bad.
This is a bit weird, but I'm not sure how to do this differently. I think this is the only way to get a `Symbol` into an index.
The error message is not very descriptive.
I think this should be `capacity > 0`.
Please remove extra empty line
We should probably just use the constructor here, `new Error(`Sync is not enabled. Note that the developer edition of the Node.JS SDK for Realm does not include sync on Linux.`)`.
why is this here?
This is a change that's unrelated to the PR. I'm going to revert it.
This is not the right place for this. It should be in the `Stream` class.
Shouldn't this be done in `createEngine()`?
I think this is unnecessary since the `admin_index?` method already exists.
I think we should default to 5 or 10. I would also suggest to rename this parameter to `max_retrials_to_get_pods_information` or something similar.
this looks like a good candidate for a `defaults` function
This is the only one that I'm not sure about. I think `k8s.io/client-go/kubernetes/typed/core/v1` is supposed to be a type alias for the package. I'm not sure if this is a problem or not.
The `noop` option is not a parameter of the task, it is a parameter of the task _invocation_, so it should be passed as a separate argument to `invoke`, not a parameter to the task.
This migration should be in the same file as `AddClassifications`
This should be `tls.TlsHandshakeClientHook`
I think this is not necessary.
Why don't you use `context.Context` instead of `ctx`?
`iterable` is not a real interface, it's just a typehint.
I don't think this is necessary, the reader will just return an empty string.
Why is this needed?
this may be a breaking change for some users.
I think this will fail if `mset.config.MaxConsumers == -1`
We should add `src` to the exclude list.
Do we need these changes?
Shouldn't we use `Shopsys\Environment` instead?
It seems that `grpcStubTypeName` and `mockGrpcStubTypeName` are not used in this PR.
I'm not sure if this is intentional, but I'd prefer to keep it on.
Shouldn't we have a `get()` here?
I don't think we should be hardcoding the name here. If we change the name of the form, we would have to change this string as well.
I would use `UNACCOUNTABLE` for this.
@rsimha @jridgewell FYI: I added this to the `applyRef` helper.
Could you add `__init__.py` file to this folder?
It looks like we have a circular dependency here. We can't load `variable.js` before we load `variable_map.js` because this file requires `Blockly.VariableModel`. We can't load `variable.js` after `variable_map.js` because this file requires `Blockly.VariableModel`.
Remove this file.
@jbertram - do we want to make this change?
Why the global? It seems to be used only in one place.
This is a command line flag name change.
I would not change the import names.
I am not sure if this change is necessary.
Why not do this in `EnableJournals()`?
This is not needed here, it's already in the `New` modal.
Why is this needed?
I think this is a mistake, we want to make sure we always call `stop`
This file should be reverted.
This is a very specific use case, it would be better to create a middleware that can be used for this, and only use it here.
Should we make this an error?
@benhalpern I think we should always clone with `--quiet`. It's annoying to have it printing all the time.
This is a bit of a breaking change, but we could add a new constructor that takes the checker.
nit: maybe `return null`
I think we can remove the `*` here.
Maybe we should implement this for the testing?
Style/EachWithBlock: Use each_with_block instead of each.
I wonder if we should make this a `type Decoder struct { Type: reflect.Type, Func: Decode }` and make the `Decode` function a `func (d *Decoder) Decode(...)`
I'm not sure why you need this. It's a bit of an odd test case.
The `typed_handle` is not used in this function.
I'm not sure I like this method. The Ports field is not public and should not be accessed directly.
this is an example of a place where we should just let the server raise the error.
Can we remove this method?
This is the only change in this file.
This should be a `Serializable` to be compatible with Spark.
This is a bit hacky but I think it's necessary to avoid the empty line check in the following code.
We should have a `type JobSpec interface{}` that is implemented by both `ScheduledJob` and `ReplicationController`
I think this is not needed, because by default we set `pretrained=False` in `build_neck_rfp_backbone`, so this is redundant.
Please revert this.
This is not a `public` property, it is `private`.
why did you move this?
this is the same as the above method, why not just have one?
This doesn't make sense, if we add previously connected peers, then we should also add the new peers
We don't have any other Unsupported...Exception classes. Why not just make this an UnsupportedEncodingException?
I think this number is too low. We should test with 100_000 or so, as that's what we will use in production.
do we need to check the values are the same?
Is it expected that the error is now `MongoGridFSStreamError`?
Shouldn't we use `productConfig.getApplicationName()` here?
I don't think we need to mention this in the code.
Why do you need to import this?
nit: this can be simplified to `internal = self._internal.copy(sdf=sdf, column_scols=data_columns)`
I would suggest to add an `IsMatchExpSet()` helper function for the `[]metav1.LabelSelectorRequirement` so that we don't have to do the logic in multiple places.
Why not just `return errors.New("Writer.As failed to get ObjectHandle")`?
This is the only change in this PR.
This is a mistake, it should be `cmds.NewEtcdSnapshotCommand(etcdsnapshotCommand, cmds.NewEtcdSnapshotSubcommands())`
Package Name:org.apache.servicecomb.serviceregistry.task.event
I think this should be `aws.StringValue(cfg.SigningName)`
I'd say this is a bug, but the `isHiddenWithCSS` is not used anywhere, so I think we can just remove this function.
I think the message should be "Datafile" instead of "endpoint"
I'm not sure this is correct. I think you need to revert this change.
The "previous" term will never be equal to the current term, since the current term is always one behind the previous term.
This should be `long getTargetSplitSize()`.
I think we should just use `s.mu.Lock()` and `s.mu.Unlock()` instead of `s.sys!= nil && s.sys.replies!= nil`
@pmeier @choldgraf I'm not sure what to do here.
Can we use the `logger` package in this file as well?
Why is this being changed?
shouldn't this be 'jhipster.com'?
This should be `mConfirmDiscard` to match the `mConfirmDelete` variable above
I think this should be `child === true` instead of `child!== true`
I think you can remove this one.
Why do we need this? I think we can also just remove this entire `if` block and just always return the cart, even if it is empty.
why was this removed?
I think we should use a more descriptive name for this capability. What about `applicationNameRequired`?
@tjgillies I'm not sure if this is a good change. This removes the `emby-select-withcolor` class from the element when running on Firefox.
Should be `null` for backwards compatibility
Why is this test changed?
This is a duplicate of the above line.
I don't think this is necessary. The `Publish` task should be able to handle it.
This was a bug.
This is not needed.
I'd suggest logging the exception before throwing the exception, as otherwise the exception will be logged twice.
I'm not sure why we have to call `run` here, but without it the `formatter_output` string is empty.
Shouldn't this be `dict`?
Why is this in `AgentConfig`? It's not an agent config option.
Can you rename the config to ownerEnabled?
this is not the same as what we had before. We were passing the string directly to the `ReadPreference` constructor, which is what we want.
I think this should be `m_name`?
I think this change should be reverted.
I think this is a bit misleading, since the `timeStamp` is not used in the event.
This should be a `Kokkos::abort` so that the stack is unwound and the error is printed to the error stream.
I would use `0` instead of `-1`
Do we need to keep this around for debugging?
this will not work for all cases as the loop will stop at the first matching entry, so if there are 3 entries with ids 1, 2 and 3 and you want the 3rd, it will return 2.
This is redundant with the check below in `pColorBlendState`.
@bharatviswa504 can we use `zfs list -p -s -o -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m -m
why did this get moved?
This is a bit hacky. I think we should create a new type to represent the service port.
Why is this removed?
This is a bit of a nit, but I think it would be nice to keep the `AddTaskEvent` call here.
I think this will overwrite the `tracer.ini` file, which is not what we want.
I'm not sure this is the best place to explain this. I think we should probably create a new page in the docs that explains the concept of header maps, and then we can link to that page from the `aws.Config` section.
Use the new Ruby 2.3 style `it.` syntax.
These should be `th`
This line is 100+ chars long
nit: whitespace changes are not needed
I'm not sure I like this change. I think we should have a `ddev-ssh` container that is always running and that we use for the `ddev exec` command. This would allow us to do some other things like `ddev exec npm` that we had planned to
This is not the right fix. This is going to fail in all cases where the experiment record name is not in the format `namespace/name` and that is a valid record.
this is fine, but it's a little weird that we're calling `shutdown` on the `BlockServer` in the `Shutdown` method, and then calling it again here. Maybe we should call it on the `BlockServer` in the `Start` method.
`checkForAtomicOperators` should be moved into this file and called from here and from the `ngModelController`
Can you use `manifest.get('applications', {}).get('gecko', {}).get('id')` instead? It'll handle the case where the add-on is listed as an extension on AMO but doesn't have an ID.
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I would add a `TODO` here, that we need to add TLS support.
This is a method that does not use any task. I would rename it to getInputFileFromLocation.
We should move this to an NCR specific template.
I think this is a bug, as it will always return the watch with nonce equal to the input.
I think we should remove this line.
I don't think you need the space before `#` here.
Can we keep the existing behavior of showing the login page for both cases?
Can we call this `TestBincoverRunMain`?
This test was removed because it was redundant with the test above, which also validates that the error message contains the project name.
This should be a `type` not a `struct`
I think this is not needed as the `Get` function already returns `[]string`
I think you need to move this after the IF_ARM above, as that's what is setting up the context for the IF_ARM.
please use a const reference for `second_intersection_name`
I'd say "convert" here as well
Why is this necessary?
can you please add `// +optional` to the top of the CertificateSpec struct and then to all the fields that are optional.
Missing space after #.
You should add the `goimports` header.
Why is this line removed?
I'm not sure this is correct. I think you need to keep the `-o` here.
I think it is better to pass `catalogName` instead of `originTableIdentifier`.
I'm not sure if we should be setting this to `""` or if it should be left as `nil`
is this going to catch errors that don't have a colon?
I think this should be `coupon_code`
I would suggest using `time.sleep` instead.
I think this check is now redundant because `ds.colNames` is initialized with `colNames_`, which is not empty.
I am not sure if this is correct. I did not test it.
this is not the same as the original code. the original code was calling `Transaction(hexa).serialize()`.
We can remove the `EnablePulls` check here, right?
I'm not sure if these tests are sufficient. I don't think we should be testing that `max` and `min` are called with the right arguments, but rather that they are called at all.
What about the time difference?
I think this should be `expect(page).to have_content(I18n.t("beta.replies.flashes.success"))` (with the `have_content` at the start of the line)
Why not use the `strings.HasPrefix` function?
ThreadSafe is already in the base class.
I'm not sure if we should use a different icon for boxsets and playlists. We could also use a generic icon and add a title attribute with the boxset or playlist name.
Is this a good default?
Do we really want to send stats when an error has occurred?
What is this magic number?
can you add these to the original `FCOSHead`?
nit: "both" is a bit ambiguous. "alice and bob" would be clearer.
Style/WhenExpression: Use case when instead of when.
This looks like a good place to use a `context.Context` to pass the `c.state.ForceRerun` and `c.state.ForceRebuild` values.
this is a change in behavior, this column was not nullable before.
this is the only place where we use `String uri`?
This is not the right errno. We need to use the errno that was set in the user process.
why removing them?
This is a bit confusing. If the result is RESOLVE_LOCAL, then you don't do a lookup at all?
this is not the same condition, this is for when the node is not a placeholder.
this is not an int32, but a uint32.
I think it should be `addAttribute('type', 'Bibliographic')` for now.
Can we just have one `get_buffer` and `ref_buffer` array that's `proc_num_simd_registers()` in size?
I think this is the only place we need the `transactions.ApplyData`
This test is not doing anything, please remove it.
I think we can just use `tags.size()`, instead of `calculateTagCount`
nit: since the method is now public, can we rename it to something more descriptive?
These seem like they should be in the spec.go file.
Please revert unrelated whitespace changes.
This will have to be reverted.
This is the only change that isn't strictly about the bug. I think it's a good change.
This should be `getComparator()`
nit: "bottommost level compression algorithm" sounds a bit awkward. Maybe "Specify the compression algorithm used for the bottommost level"?
why is this removed?
Do you need to change this?
This is a bit confusing, but it looks like this is because we are using `suppress_file_handler` for both storing suppressions and retrieving them.
Is this change necessary? I thought we were planning to remove `methodInitCode` in a separate PR.
I think we can drop this now.
This is a regression, but I'm not sure why it's a regression.
I think we should do this in minimal mode too. The node cache is only used in the same process. So if you have a node that's not running, it doesn't matter that the node cache is broken. But the node that's not running might be a server, and it does matter.
@fowlesch these are the functions that are not tested in the `test_numba_fft` tests, but are available to the user.
`user` should be `self` here.
why remove this?
nit: don't need to import unsafe now
I think this should be moved to the loop condition.
I think this should be `info` level, it's a good idea to keep track of what configuration we are using.
I think this should be called `isHidden` or something similar
Why not just return `Hash` here?
Is this needed?
This is a bit odd, since it's not actually part of the ARN specification. I think we should move this check to the `GetRegion` method in the `awsiface` package, and just return the error from there.
It seems to me that the code is more readable if we use `instanceof` instead of casting.
@MichalStrehovsky I'm not sure this is the right place to fix this. It's not really a difference between the contract and implementation, but rather a difference between the implementation and the type being implemented.
why change this?
I think `final` is redundant here.
This is the same problem as above, if you change the if to an else-if, then you don't need the extra else at the end.
This was a leftover.
This is the only change I'm not sure about. This is the only place we're setting the `BGFlushPeriod`.
This should be `checkArgument(width >= 0,...)`
I think the kernel name should be changed to sum_singlesubgroup
What's the difference between `org.apache.iceberg.Schema` and `org.apache.avro.Schema`?
This is the only place where the FakeServer is used. We should move the instantiation of the FakeServer into this class.
Why not use `std::distance`?
I don't think this initializer is needed. If you want to use the secret key from Rails, you can do it in an initializer in `config/initializers/blacklight.rb`.
I think this will cause the connection to be closed immediately after it's created, which doesn't seem like a good thing.
I think it's better to use `appendChild` instead of `appendChildOrReplace`.
What is the reason for this change?
@frosted I'm not sure if this is correct. The PLL3_SW_60M is 60 MHz and the OSC is 24 MHz.
I think it would be cleaner to keep the previous code and reverse the `if` statements
I'm not sure why this file was changed.
intentional whitespace change?
I'm not sure if this is still needed.
`plugins` is a reserved word.
I'm not sure if this is safe. Is there a guarantee that `paths_` will be non-empty? If not, this could crash.
Should we use a `Counter` here?
I think this is a different issue. I think you need to use `param_name + strlen(SET_PARAM_CMD)`.
What is the error here?
I think it's better to have a default value in the json schema, and not in the code.
I'm not sure this is a good idea, I would rather keep the original error message, and only catch the error for the pcapdnet case.
I don't see any reason to have this class.
Please remove this import
@jgallimore - I'm not sure if this is intentional, but it looks like you've removed the ability to specify a specific platform for a service. I think this could cause some unexpected behavior, for example if a user had an app that was running on the `node` platform, and 
I'm not sure this is a good idea. I think we should just pass the outbound service to the dispatcher.
Should this be `Preconditions.checkArgument(manifest.content() == ManifestContent.DATA,...)`?
I'm a bit concerned about the fact that `Session` is now a mutable object. This is not an issue for the current usage, but we have to be careful about it. I would suggest to create a `SessionState` class, and have `Session` be immutable.
why is this needed?
What is this for?
Nit: I'd prefer the name `ServiceName` to be `ServiceName` rather than `Datadog.ServiceName`.
@jona-sassenhagen is this correct?
This is a copy-paste from the actual page, but I removed the wistia_script.js reference that was here
This is the only one that is a string.
This should be an `ImmutableList<Func<Span, bool>>`
Please use `!empty` instead of `=== true`
Is this used anywhere?
I'd prefer to use `\TYPO3\CMS\Backend\Form\FormEngine::makeSelectElement` here.
Do not use parentheses for method calls with no arguments.
I think this was a bug, and `t.getNext()` was never intended to be called if `t` is `to`.
I think this should be `props.value === undefined`
Could you please fix the indentation here?
Is this rule actually used?
The TODO should be removed.
What's the difference between `bsp.processQueue()` and `bsp.processQueue(&batch)`?
Style/RegexpLiteral: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I don't think this import is necessary
Can you please change the name to JivaCloneIPHolder?
Should this be `should redirect_to(practice_path)`?
nit: `txtNoDataString` -> `textNoDataString`
This function is only called from within the `go` block below.
If the config is set to 0, do we want to still check the limit?
I think this should be `Object.class`
This is a bug fix.
Is there a reason to drop the error here?
If you don't have a nested_flatbuffer field, you can't have a nested_flatbuffer attribute, so this is redundant.
Can this be a const reference?
I think we should not remove this, but instead make sure that we don't call this function at all when we are not in a detached state.
This one isn't really related to the query API changes, but it was the only one that had a number mismatch.
I think we can do better than this.
This is a great example of what I'm talking about above.
What is the motivation behind these changes?
I would suggest moving the tls code into a new file `tls.go` or `tls_wrapper.go` and keep the cipher code in `cipher.go`.
@deads2k, I'm not sure why we're setting the state to pending here. This is a post-reconcile call, so the state should already be pending.
Nit: We should avoid using "AWS" in our code samples.
I think this is a little confusing. It's not the entire set of work. It's a single slice of the entire set of work.
Can we do this in a separate PR?
Is this change necessary?
I think this should be `/api/terms_of_use`
Should this be moved to `pkg/build/reconciler/events`?
I don't think this is the right fix. The `base` variable is only ever assigned once, so it's not necessary to reassign it here.
This is missing the icon type.
Note that this will not include `java.lang.Object` unless it is explicitly added (e.g. `class X extends Object {}`).
This is the fix.
I think this is the only change in this PR.
can we make this a configure error?
"flat representation" sounds like a UI term. Maybe "non-interactive" or "non-visual"?
I think this should be `Device!= "bind"`
This is a change in behavior. Previously, if the name couldn't be demangled, the name would be empty. Now, it will be `""`.
nit: this should be wrapped in a try/except and return True if it fails, so that the caller can handle it.
I wonder if this should be `serviceID` or `serviceIDString`
I would prefer to keep the `# -*- coding: UTF-8 -*-` line here.
If you don't need to implement it, please remove it.
Can you move this line down to be with the other external packages?
Just a nit, but the `RecreatePipedKey` API should probably return the same error as `EnablePiped` (or the other way around).
This is a very subtle change. I'd prefer to keep the original, and put the `doSync` in a different place.
It would be nice to have a test that exercises the new config
Is this intentional?
Why is this in `src/preact/index.js`? It doesn't look like any other constants.
Shouldn't the path be `/telemetry/data`?
I think this is the wrong approach, as it would be possible to end up with a file name that does not include the job ID at all. Instead, we should just truncate the name to `fs.Config.StatsFileNameLength` characters, and add the `...` suffix.
It seems that the `isSorted()` check is not required here, since the `rowsMapper` will always be set to an object when sorting is enabled.
I think this should be `loop_device` for consistency with the other fields
Is this change really needed?
Do we really need this? Can't we just pass the pipeline name to `define_context_context_cls`?
I think this can be removed
I think this should be `CONV_NUMERIC_LITERAL`
Is this a typo?
This is a bug fix. The freezer cgroup is checked to see if it is supported. If it is not supported, then the freezer is always set to thawed. This means that if we try to freeze a container, we will get an error, but thawing the container will succeed.
I'm not sure if this is the right place to set the user agent.
I don't think this should be renamed.
This is a bit misleading. It is not the underlying algorithm, but the underlying Region.
this is a bit of a hack. i wonder if we should have a test for the deserializer instead of the serializer
The `2018` should be the last year.
I'm not sure this is the best solution. This is a generic keyboard shortcut. I think we should just disable it when the TV is on.
this is a lot of includes. I think you can remove `databasetasks.h` as it is not used anymore
I don't think this is correct. If a flow is stopped, I would expect the node to stay in the READY state. The node should be killed when the flow is killed.
It's not obvious what this does.
Nitpick: missing "o"
I think this should be `max`, not `max_query_limit`.
I think we should make this method internal, it's not really meant for public consumption.
Shouldn't it be `ShortcutCreation`, `ShortcutEditing` and `ShortcutDetails`?
why is this here?
I think it is supported, but not sure. I will check.
Can you please fix the indentation of this line?
`b16` is a better way of writing this
I think we should still panic if RPCName is empty.
this is a regression from the previous version.
We should probably update the help text for this option to mention that this is the case.
This should be `return nil, nil, errors.New(...)`
This function is called only from the `mcs` module, so you could just define it there.
Why is this needed?
I think this should be `Hyperledger Besu` without the `Contributors`.
I think the existing code in `summarize` is also assuming that 0x30 is histogram. Is that correct?
I would just use `if.IsDir ||.IsSymlink` here and below.
This will be a breaking change for anyone using the `sparkline` component outside of the context of the `Analytics` block. I think it would be best to add a new `Sparkline` component for the new chart type, and keep the old `Sparkline` component for the old chart type.
It's probably better to use `javax.enterprise.inject.spi.ManagedObject`
This could be a bit more descriptive. Maybe `GetValueAsBoolOrZero`?
I think we can avoid this extra variable.
`this.container` is not used anywhere else in this file.
We need to ensure that the `RelaxedReclaimPurge` API is called only when the node is in `RelaxedReclaim` state. We can add a `node.state` field to `RelaxedReclaimPurge` struct.
why only support batch size of 1?
This is not correct. We should return a transform result for any limit expression that is not a constant.
We should probably add GAE GA to this list.
this is a bugfix, right?
I think we should call this in `on_connection_opened` instead, otherwise it might happen that we get a new connection, but we don't start the timeout.
I think you can add the provider name to the error message.
You should use `str_replace('\r', '', $matches[2])` instead
@rhatdan is this a good change?
I think the example would be better with a `log.Fatal` in the `err` case.
`If applicable, null otherwise.` -> `null if not applicable`
I think you want to pass `cmdutils.Value('tab')` here, otherwise it will always be `cur_tab`.
Is there a way to disable these warnings for this file?
What about `RunUser`? I think we should set it to 0, so that only root can use it.
This is wrong, the `col` argument is a `DrawColour` and not a `Colour`.
Why is this change needed?
This is a bit confusing to me, why is `manifest['application']['gecko']['id']` the id of the addon and not `manifest['id']`?
This is not correct. `delta` is in viewport units.
Why is this needed?
Why do we need to add this?
This is a good example of where I think the `osquery::status` should be used instead of `errno`.
I don't think this is a good idea to close the connection and raise an exception. I think we should only raise an exception if there is an HTTP exception.
I'd probably call this `EcsDescribeTasksTimeout` or something similar.
I don't think this is the right fix. This is a local variable that is only used on line 113.
This is an unnecessary change, right?
I think this is the same as myId
The `return` here is not needed.
This is a different error variable than the one in line 110. I think we can get rid of `perr` and use `err` everywhere.
is there a way to avoid the lambda here?
I think it would be better to make this a conditional define, rather than an ifdef. Then you can have the same define for both platforms, but with different values.
I'm not sure how to handle this one. This is a function that returns a Loggable, but it's not a Loggable itself. I think I'd rather just make a struct for this.
I think `but` is the wrong word here, and that it should be something like `instead of spreadPath, which does not preserve object under property path, this method`
Is the first two `if` redundant?
This is a bit awkward, can we maybe call it `VectorizedValue`?
I think it's probably worth making this function a little more robust. Maybe it should return an error if the TLF is public, or if the given user doesn't exist.
Shouldn't this be `sh.rm "/tmp/#{r_filename}"`?
I'm not sure about this. Why not just use the `$useCache` variable?
`import java.util.*` is not recommended.
I don't think we need this method.
What does this do if the two `ClientCAs` are different?
Why remove this check?
nit: remove empty line
this is not needed anymore
I think we should keep this in the `Startup` class.
The error message should be updated to say that the quota usage isn't available.
I think `public T Data { get; } = default!;` should be enough.
This won't work if the user has set `selected` on a child.
Shouldn't this be `cgroups.PathExists(m.paths["cgroup2"])`?
This change seems unrelated to the pull request.
Why do we need to set this twice?
Please remove this.
@ZacRostek @hustodemon @jamesgeorge007 I'm not sure about this change. The only thing that really needs to change is the `x-gtar` to `x-gtar-compressed`. We can't change the other extensions because they are used by other
`time_forward` and `time_backward` should be divided by `loop_num`
I'm not sure this is necessary, since `o` will always be an instance of `Date` here.
I think this is not true. We are not using the transactional catalog for anything. We are using the isolation level to control whether the table is read-only or read-write.
I think you can use the base class constructor instead of calling the base class constructor directly.
this is the same as `script.src = ''`
Is this correct? Should it be `bazel-out/local_release`?
The localstore is initialized before the batch store, so I think this change is not needed.
can we use constant from `OmClientConfig`?
This is the only change that I don't like. I'm not sure if this is the correct approach to take here.
It's probably better to use `javax.enterprise.inject.spi.ManagedObject`
Why is this 1.15?
Can we have a test for this?
I'm not sure if this is a bug, but the clientSecret is decrypted with the passcodeHash which is not the passcode itself. This could be a problem.
I think this change is not required.
Line is too long. [82/80]
I think it's time to switch to a more modern versioning system.
Is this a bugfix?
I wonder if we should also add a "comment" here that it's not the only place where we drop VXLAN and IPinIP packets
This is a bug. `edgeSets` and `edgePages` should be passed to `WriteLevelDB`.
this is the reason for the tests failing, because the tests are calling `MvxApp` from `MvxAppTests`, and the assembly passed in is `MvxAppTests` instead of `MvxApp`
This is a breaking change.
No need to remove this line
Line is too long. [82/80]
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Why is this empty?
is this still required?
I think this is a security issue, you should not allow `PUT` and `DELETE` methods.
This feature is not being used anywhere. It should be removed.
This is a breaking change.
I think it's not necessary to pass the default value (1.0) here.
I'm not sure this is necessary.
This is a bit of a problem, because it means that if you have two windows over each other, you'll get the opaque region from the top one, and the input region from the bottom one. That might not be a problem for the examples, but it will be a problem for real-world applications.
I think we need to check the `!osquery.OperatingSystem().IsUbuntu1804` here to prevent this from being run on Ubuntu 18.04.
I'm not sure we need to keep the `JsonReturnType` value, but if we do, we should update the error handling below.
`kbp_record` sounds like it's the record itself, rather than the record type.
Why not just use `Logger.LogWarning()` in `LoadCustomSettings`?
I think this should be `cpInput.NumExtraElements = len(antreaSourceStatsElementList) + len(antreaDestinationStatsElementList) + len(antreaLabelsElementList)`
I'm not sure if this is the right solution for the issue. The problem is that the localstack docker container will return a `text/html` content type for the `/healthcheck` endpoint. I'm not sure if this is correct. If the container returns the right content type, then the localstack 
`Or` is not very descriptive. Maybe `MaterializationOrObservation`?
This is not the right place for this. The host field should be set to the IPv4-mapped literal for IPv6 addresses, but the port should be set to the port number, not the literal.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
Please add docstring for key.
I'd like to keep these in `dagster.seven` because they are only available in `python>=3.7`.
I think we want to keep the `have_no_content` here.
nit: use `%s: %s` so that the `teal` prefix is also logged.
This one is weird. It looks like the `Write()` function is called from a different package.
Should we make this `ErrBundlerOverflow` or something similar?
This is a little confusing. I think we should have a map of hash -> rule string.
This test does not test the table name. It only tests the location of the table.
I think this is a bit misleading. What does "fully created" mean? Can you please elaborate?
This is the only change that I think should be part of this PR.
I'm not sure if this is the right place for these new expectations.
@josegar74 - I changed this to remove the period at the end of the sentence.
I'm not sure I like this. It seems like we should be able to use a v1 writer.
I think this should be a separate PR.
Why not just `rootNode`?
I think we should have a link to the dashboard instead of to a specific proposal
I think we need to remove this line.
This is a bit of a hack, but I'm okay with it. I'm not sure how we'd do this in Rails 6, but this works for now.
`createFirestore` -> `createFilestore`
Can you please remove this file?
What if the user specifies a `text_align` and `text_baseline`?
Should we close the connection after we've raised an exception?
Could you please add a validation for this new parameter?
We're not using `IntegrationIds` at all in this PR, so I don't think we should reference it here.
This is not necessary, Qt handles it automatically.
I think this should be `@since TODO`
This is a bit of a hack. Is there a better way to do this?
Should be moved down to the imports section.
Is there a reason to use `<=` instead of `<`?
This was unused and I couldn't figure out what it was supposed to do.
I don't think the `cancel` function is a good name. It doesn't seem to cancel anything.
I think we need to add `middleware.RepoRef()` here.
Is this used?
This should be called `logDir` instead of `logsDir`.
why not use the `std::make_unique` here?
This test is not needed anymore, since we no longer use the `goog:chromeOptions` capability.
I think this should be `plugins.getConfig("server").offline_mode`.
I would put this under `else if (type == "HDF5Reader")`
Shouldn't this be `passphrase`?
This should be `dynamo_preserve_zmm_caller_saved = ZMM_ENABLED();`
I think this is wrong, since it will make us stop opening new streams after we receive a GOAWAY frame.
I think this should be `@param theKey Either {@link Keys#SHIFT}, {@link Keys#ALT}, {@link Keys#CONTROL}, {@link Keys#META} or {@link Keys#COMMAND}.`
Line is too long. [89/80]
I'm not sure if we can do this in the installer. We have a few different ways of running commands: `cmd.exe` `powershell.exe` `powershell -c` `powershell.exe -c` I'm not sure what the right way is to get the full path to the envir
why remove these?
Is this change correct? I think this is a bug, and the `getResourceType()` method should be used here.
This test is failing because you need to set the value to `types.NewAttoFILFromFIL(0)`
Is there a reason we don't use `SetTag` for `DatadogTags.ServiceName`?
I think you should do the same thing in the `toDash` case.
This is not really a validation category, it's a flag.
why is this needed?
I think this should be `klog.Errorf`
I don't think this is needed, since the rule is being created with `DstIpPortSetIds: nil`
Should we warn when the key is not found?
This is not an issue of the test but of the test data. This test is supposed to test `fragment_loss` elements, not `potential_loss`.
I don't see this being used anywhere. Can we remove it?
I think you can use `json.Marshal` to serialize the genesis structure
You can use `assertThat().statusCode(FORBIDDEN.getStatusCode());` directly.
I think this is a good abstraction, I wonder if we can use it for other places in the code that have the same interface, like the state machine.
I think you can use `Constants.ParentProcessIdOption`
This test is failing on iOS 8.0.2, but passes on iOS 8.1 and 8.2.
why is TRUE needed here?
This should be `@throws IOException`
@description is not raw
I think this should be `undefined` rather than `'NM'`?
We should also add a TODO to remove this class in 6.0
This is not needed.
I think we should validate the values here. If the user specifies an old value but no new value, we should throw an exception.
This is a bit hacky, but I'm not sure how to get the right checker name without this.
Why this change? I think this is a breaking change.
Shouldn't this be `spec.isPartitioned()`?
this is the only change I'd like to see in this PR.
I'd prefer to have this as a separate option, `--certs` (or `--cert`)
I think this should be `!rawErrorData.containsKey(CLASS) &&!rawErrorData.containsKey(STACK_TRACE)`
I think this should be `containsEqual`
This is a bug fix. Previously, `DefaultIfEmpty` would cause the first layout to be used for `StackTraceUsage` even if it was `None`.
Could you use a different name for the test?
This will be wrong if `sizeof(tmp_optarg) < strlen(tmp_optarg)`.
I think this is not needed, as it is already done in `detection_output_to_detections`
Why not `setFirstResult`?
This should have been done in the previous PR.
This import should be in the `internal/utils` package, as this is only used there.
I think this should be `PartitionField(int sourceId, int fieldId, String name, Transform<?,?> transform)` instead of `PartitionField(int sourceId, int fieldId, String name, Transform<?,?> transform)`
I think the TODO can be removed now
I think it would be better if you change the value of this constant to "ORDER_BY_PATH" to make it more clear.
I think we should use `number|undefined` instead of `(number|undefined)`.
I think we can also remove the `@user.org` and `@user` variables
this is a bit of a hack. can you please add a note in the release notes that this is a workaround for a qt bug?
I'm not sure why you changed this. The only way `min_x` and `min_y` could be anything but `0` is if an output with a negative position is in the layout. This could be a bug.
I think this is not necessary.
I think this should be `network::NetworkUtils::getAvailablePort()` to get a new port every time.
can we put `@example` above `@type`?
I'm not sure if we should join the thread here, if the thread is still running, the process_blocks() will be called again on the next block, but if the thread is stopped, the next block will be processed on the main thread, which is not the same as before.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Can we get rid of this?
nit: `protected static boolean fragmentVisible = false;`
Is there any reason why we can't make `ParseHeaders` generic on `T` as well?
I think this is not correct. If I search for `1.1`, I should find `1.1.1` and `1.1.2` but not `1.0.1` or `1.2.1`.
The backbone should be resnet50, not resnet101
I think this is the reason for the perf regression. The ConcurrentDictionary is allocating a new Dictionary each time.
This is only checking the length of the string representation of the ID, not the byte length of the ID itself.
This should be 1.5.0.
I think we should keep these imports. It looks like PandasLikeDataFrame and PandasLikeSeries are still used in the tests below.
This can be split into multiple lines.
Can we make this a constant?
I think this is a little more generic than we need. Can we just check the path for APP_DIR_TEMPFILE_DIR?
This was causing a test failure.
I don't think this is necessary. If you want to transpose the layout, you can do that in the `Layout` object itself.
Is it possible to use a constant list of valid values here?
You don't need the `and return` here.
I think this is a good idea, but I don't think we should stop the spinner here. We should only stop it when we've actually created the environment.
Why is this not in the golang standard library?
@liggitt does this make sense?
I'm not sure how I feel about the `MergeById` class. I think it's a bit of a code smell.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is not a metadata. It's the name of the policy.
Use the new Ruby 1.9 hash syntax.
Should be `theme.uninstall`
Can we do this at the end of the function, so we don't need to check the status code twice?
Is this class used outside of the plugin?
Is this the right event? Shouldn't this be FailedToSend?
This is not needed, the runtime is already set in the ECS service task definition
I think it's not necessary to lift it here, since we're going to call apply directly on the function.
@strib This looks like a good change, but could you please add a `TODO` to remove this limitation in the future?
Do you think we should keep this in the old node? Or is it safe to remove after the upgrade?
Metrics/LineLength: Line is too long. [82/80]
nit: I think `td` should be `trustDomain`
I think `join` should be renamed to `apply`
I wonder if we should make this a hash of `example_count` and `load_time` for consistency with the other notifications.
Why are we receiving settings here?
I think this could be `Band.all.to_a` twice?
Shouldn't this be `str(value)`?
This is a bit of a hack, but I think it's the best way to get the font to render correctly.
@maxtaco this is the only change in this file.
I don't think we need a new constant for this, we can just use the existing one.
I'm not sure why you need to do this. `mktemp` should be creating the directory with the correct owner already.
please add `style='pytorch'` as in original model
I think it would be better to have a default value of 0, so that the node doesn't wait at all.
this should be `@param MediaInterface|string|int $media`
I don't think we should use `NewObjectDatabase(kv)` here.
I'm not sure it's safe to assume that there's no conflict with the RPC port.
The `\\p{Blank}` is a regular expression that matches any whitespace character, which is why we can't just replace the `<` character by itself.
I'm not sure this is the best solution. I would have expected `::` to be part of the identifier too.
this is not needed since you are already using `te::abs_error`
I don't like the idea of a global eventbus. What about moving the eventbus into the `Server` struct?
I would log the error instead of ignoring it.
This is a minor thing, but the braces are not needed here.
I'm not sure we need this at all. We can use Array.prototype.forEach
This is not necessary, right?
I think this should be `sdf.columns` instead of `sdf.schema.names`
The order of these should be `JivaVolumeArtifactsFor070()` then `JivaPoolArtifactsFor070()` then `JivaVolumeArtifactsFor060()`. The order is not important for the CRDs, but it is for the Jiva volume and pool CRDs. The rea
I don't think we need this here, it's more of a `cloud-run-events` thing.
@sebhrusen @pmeier I'm not sure if this is the right thing to do.
why is this change necessary?
I'm a bit confused about this. How does the static node list work? Do the peers in the static node list override the peers in the dynamic node list?
If `traceparentCollection` is null, should we return `SpanContext.Blank`?
Why are these changed?
You should be able to use `libdrm` on FreeBSD too.
Why is this change needed?
why not just `self.bbox_roi_extractor = context.bbox_roi_extractor[stages]`?
Is this list of node IDs used by the caller for any reason other than debugging? If not, we could consider removing it.
why 255 and not 512?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should we also add the `ContainerImplementationPodman`?
Is there a reason to use `%s` here instead of `%v`?
This is a bug fix. It should have been `perms.Publish = &SubjectPermission{Deny: remote.DenyImports}`.
I would prefer if the server names were not repeated here.
Can you also remove this from `go.mod`?
I don't think this change is necessary.
This is a bit of a hack. I would rather not have a script tag here but it looks like we don't have much choice.
nit: I think this should be `Action<DateTimeOffset, T>` instead of `object`
`import` statement should be before `protected static Logger LOG = Logger.getLogger(CollectionStrategy.class.getName());`
maybe you can move the code to `get_detections`?
I don't think we need to specify RegexOptions.Compiled. The regex is not being compiled by the JIT, it's just being used as a pattern in a call to Directory.
This should be `this.txs[t].getHash()`.
Please remove these debug statements.
This was the bug.
Why was this removed?
Doesn't this need to be moved above the line that calls `createSenderResources`?
It's not clear from this line why we are setting the local IP address.
This doesn't look like it's related to this PR.
Is this needed? I don't see any conftest in the repo.
I think this is the bug fix.
I think we should have a test for this, otherwise we may forget to change it when we add new transport.
nit: `from kinto.version import VERSION`
This check seems unnecessary.
I think we can move this up, above `this.readConcern`
I think we can remove this `instanceof` check, since the `else if` clause will never be reached if `data` is not an instance of `Address`.
shouldAllowIAccessibleFocusEvent -> shouldAllowIAccessibleFocus
please add a `min` parameter here
Why JSON_DATA?
I would rather keep this out of the core and make it a utility function in the `osquery` namespace.
I think the copyright date should be 2016-2020, right?
@cosmicexplorer @pmrowla can you review this? I'm not sure if this is the right approach to check if a connection is to itself.
`to_string()` returns a temporary, so this will cause a crash if the temporary is destroyed before `c_str()` is called.
Why not use `strings.ContainsAny`?
nit: I would call this `SubnetGatewayIPv4Address` for consistency with the other fields.
why remove protected?
Why do we need to do this?
This seems to be the only change that breaks backwards compatibility. I don't think this is a problem, but just wanted to point it out.
@bflad - can you confirm that this is the case?
This is a fix for a bug. The expectation is that if we've received an end stream, we should send a close frame. This bug is that we're not doing that.
I think we should use `res.sendFile` here, and set the `config.web.logo` to the `/-/static/logo.png` path
This is the only change in this PR.
This is a bit concerning. I'm not sure how it could be improved, but it seems like a bad idea to be requiring a gem at runtime in a library that is supposed to be used as a library.
Why `<` instead of `<=`?
Why do we need this?
I wonder if we should make this more generic, so it can be used for other secret managers too?
Line is too long. [98/80]
This is the only change in this PR, and it's not related to the title.
I would have expected this to be a `time.Duration` type, but I guess it's not important.
This is a good first step, but I think it would be better to have this run on a dedicated branch from master. This way we can easily merge back into master once the test pass.
Please sort this.
nit: remove the empty line here.
I think we should default to `true` for now, but maybe we should make this configurable in the future.
`List` is a raw type. It's better to use `List<String>` instead.
This method is unused and can be removed.
do we need to use /tmp/kubeedge/ for storing test data?
Why is it called `paych` and not `paymentchannel`?
Why is this change needed?
I don't understand this change. If!JSON, then we always print the parent snapshot, right?
This is not correct. This is the API for managing projects.
I think we can get rid of the `aws.NewConfig().WithRegion(region)` line below since it's now redundant?
I think it's better to have a separate PR for this.
I think this is unnecessary. The root user can always write to the perf counters.
What is the case where `base` is `null`?
This should be `finalOptions.readPreference = ReadPreference.primary`
This seems to be unused.
I'm a bit worried about this being a race condition. I think the mounter is used in the same goroutine as the mounter initialization.
I think we should make this an `id` rather than a `class` so we can use it in the JS to target the div.
can't this be a vector?
Do we want to do this for IPv4 and IPv6?
Why did you change this?
I think this should be `RowType fStruct`
I think we should have a new `sidebar.analytics.visitors` with a priority of 0, and then keep the old names under that menu
I think it would be clearer if the fields were named `IsTrue`, `IsFalse`, and `IsNone`.
This is a no-op change. The `include?` method was already delegated.
I think we should avoid the alias here.
I don't think this should be part of this PR.
Why did you remove the `options.supportsDts` check?
This is a bit odd. I don't think it is a good idea to do this in a controller. If you need this data for every request, you should add a `before_action` that calls the `add_to_i18n` method.
Please use `long` as return type instead of `Long`.
Is this intended?
This function is not used in the tests.
I'm not sure that these flags are needed. I think they're just being used to silence the flag package, which is fine.
This test was removed because it was testing the deprecated `prepare` function.
Nit: extra blank line
Nit: This function is only used in tests. It seems like it should be moved to the tests file.
I don't understand this macro. Is it used in the code?
I think we should remove this as it's not working as expected.
This is a very minor thing but I think it would be nice to have `False` as the default. This way if you call this function directly, you don't have to worry about `resume_from_failure` at all.
I'd probably test that the policy is actually created.
Should we use `coalesce` here? I think it's not necessary.
This is a breaking change, right?
why do we need this file?
I think it would be better to do `const reportArgs = {}` here and then just add to it below.
This change is not correct. `pvc.Name` is not the same as `name`. `pvc.Name` is the name of the persistent volume claim. `name` is the name of the volume.
I think we should rename this variable to @offering_product or something similar.
I think this is a good TODO to have.
I know it's a bit of a stretch, but maybe we could use an `account` route here instead of `my-accounts`?
why did you change this?
Why are these private?
I'm not sure why we have this method. It doesn't seem to be used.
I don't think this is the best place to add an action hook.
This should be lower-cased
I think it should be Hash instead of string
I think this is the same issue I ran into when I was trying to do this, where the serialization name is being used in place of the actual type name.
Should we catch this error first?
This should be `typeof xyRatio.x === 'number'`
This is the only change that is needed to make the tests pass. The rest of the changes are just cleanup and/or adding new tests.
This is a bit of a hack, but I think it's fine. We can always refactor this later if we need to.
I think this can be replaced with `const std::vector<const FieldDef*> union_fields;` since it's not used anywhere else.
We should probably put this in `install/requirements.txt` as well.
This was a bug. `getById` is a `Collection` and the `Article` is not an `ArticleCollection`.
Why is this needed?
I'm not sure we need to do this. If we're going to do it, we should use the same logic we use in `pkg/testutil` to find the binary.
Why is this `true`? I think it should be `false` (as it is for all other implementations).
This looks like a copy-paste from `AbstractList`, can't we share the implementation?
This was causing some flakiness in the tests.
Why is this not public?
Why we don't need this line?
This is a good idea. I wonder if we should also do the same for blocks.
please remove this print statement
This is a bit confusing, because the docstring still says "name" and the parameter is called "model".
Is there a reason for this?
This doesn't work for me, but I think it's because I have the puma gem installed locally, which means that `Puma::Statistics` is not available.
I would suggest to make it a static inline function, just to avoid the extra call.
Why is this here?
This should probably be in bytes.go
I think this change is not needed. The `@RequestAttribute` annotation does not have a `required` attribute.
I'm not sure that this is a good idea. There is a good reason for having these two roles.
This is a different hash, so I think it's a different commit.
this is a little confusing. I think the spec should be about `Bolt::Transport::Local`, not `Bolt::Transport`
I think this should be `inventory_index_id`
This should be `BftTransactions`
Can you add the new param into the phpdoc?
This is not consistent with the previous format.
Why not just add it to the list of interceptors?
This is a bit of a hack to get the `NewWorkflowType` to be exported. I'd rather have the `NewWorkflowType` in a separate file, but that's a little bit more work.
Should this be `debugEnabledLogMaker` or `debugForcedLogMaker`?
nit: this import seems unused
This is the bug.
Please use `__( 'These credentials do not match our records.', 'jetpack' );`
I think the example is no longer relevant.
I think the issue is here. This line is missing.
I think it would be better to add a `boolean intersects` to the `Rectangle2D` interface.
This is a bit of a special case because the server is in the process of being initialized and doesn't have any memory allocated for its write buffer yet.
Should we have the same for the `WriteOnlyTable` too?
This is a great example of where the new `Machine` structure is more useful than `ContainerService`. We are already able to look up the `KubeletVersion` from the `Machine` structure, but we don't have that available in `ContainerService`.
This is not needed
We should make the default value `AppSecCustomIpHeader`
Why is this necessary? Can't we just use `null`?
nit: I'd keep the blank line here
Is the `padding` prop used anywhere?
Is this a bug fix?
Why is this necessary?
Why not just pass the StoreSingleton to the constructor?
This could be a `@` decorator, right?
I think we can remove the `transient` keyword here, it's not needed.
I don't think we need to require this in the core lib. I think we can do this in the example group file.
This will be a good time to add a `@returns` tag to all of the selectors.
I think this is a good start, but I think we should be more explicit in the name, maybe `print_plugin_list_without_validate_resolve_reference` or something like that.
Can you explain the second capture group?
This is a breaking change.
I think the `NotImplementedException` should be removed from the codebase.
I don't know if this is the best way to go about this, but it seems to work.
I'm not sure if this is the right thing to do. It might be more appropriate to pass it through to `OpenBucket`.
Can we remove this function?
This is a debugging statement. It should be removed.
I think this is the right idea, but I think we should write the test for the actual behavior, not the current behavior.
Why is this removed?
Should we make this the default?
I would expect this to be a private method.
I don't think this is a good fallback. I would prefer to have a default icon in the `icons` directory and use it when the icon is not provided.
I don't think this is a good idea to remove this. If you don't want to show the message you can just move the message to the "other" button.
@jurre I think this will cause the `forge.puppetlabs.com` to be stubbed on every time, even if the API is being called against `forgeapi.puppetlabs.com`. I think it should be removed.
I don't think we should have this here, since the `asset_host` is set in development.rb and test.rb
this is a bit confusing. The `localFieldPathType` is a variable that can be either a string or an object. Can we rename it to `localFieldPathTypeObj` or something like that?
Should we include a note here about using `basic` for production?
please don't remove this line
I think we should use a more descriptive name here.
this is not needed, the `define_method` will overwrite it if it exists
We should also change the service name to `status` and update the UI to use the new path.
I think this variable should be called d_r_avx512_code_in_use_flag
this function can return true for a nil value, i'm not sure if this is intended, but it's definitely wrong
Should this be called "built_in_blocks"?
I think we should keep the message as it was, at least at INFO level.
I would import the whole molecule and use `molecule.provisioners.DockerProvisioner`
You can use `is_file` instead of `file_exists`.
I'm curious, why is this functionality test?
Can you explain why this is needed?
Please use `NumberStyles.AllowLeadingSign` instead of `NumberStyles.Float`.
Can we revert this?
This is not needed.
We need to make sure this is not exposed to users, and only used internally.
I'm not sure that this is the right message to show. It seems to me that the message should be about the benefits of incremental analysis, and not about the speed. I'm not sure that it is clear what the message means. I think it would be better to write a message that makes it c
@tarekgh I think this is the wrong place to put this, the base class is abstract and should not be called directly.
This is an API change, right?
This is the only change that is breaking.
Should this be a URI or a URL?
I'm not sure this is needed, I think the component example should be part of the PR.
Why are we calling `GetAssemblyName` here? The assembly is already loaded into the load context, so we can just use `Assembly.GetExecutingAssembly()` or `Assembly.GetEntryAssembly()` instead.
This seems like an arbitrary number, and I think it's not necessary to hardcode it in the class. It could be a config parameter, or it could be derived from the `max_retrials` property.
Nit: I think we can use the same `existingTag` variable here, and just add the `propertyID` property to it.
This method is called by the rspec core, so I don't think it's safe to remove it.
is this actually public?
why is this needed?
Does this need to be a `WorkingSet`?
please update the docstring
I think we want to use `opts.fetch(:modulepath, "")` here instead of `opts[:modulepath]` so that we don't error if the option isn't passed in.
Do we need to worry about versioning here?
I think it's cleaner to use `assert os.path.exists(buildfilepath) == False`
I think you need to add the `flattr4j` dependency to `build.gradle`.
I think this can be static, no?
I think you can remove this file
Why not use `ProductPropertiesUtil.getProductVersion()` in the first place?
why not use `type DiskType string` as in the other places?
I think this is redundant.
I think `getNodeAttributes` should be in `axe-core-utils` instead of `axe-core`.
this should be in the `Bolt::PAL` class, not in the spec helper
I don't like the idea of a global variable like this. Why not just do a `tqdm` import in the function that needs it?
@safontes I think there is a typo here.
@deads2k I think we need to add this to the `Volume` struct in the `pkg/apis/storage/v1alpha1/types.go` file.
Is this correct? I thought the idea was that the exporter code shouldn't generate additional telemetry.
This is duplicated
why not make it a global var?
I think it is better to put the constant in `ConfigUtils`
I would add a `return null` at the end of the `if` statement.
I think this is not an error.
I would have expected this to be inside the if block above?
I think this should be indented with the rest of the files, not with the `__init__.py`
I don't see why we need to change the method signature here, I think it's fine to have `in SpanContext` and `in Baggage` as the parameter type.
@paulzumwalt why is this necessary?
I don't understand this change.
I'm not sure why this was moved. It seems like it was intentional to have it after the `verbose` arg check, and before the `log` import.
Why do we need to check for the first point?
This should be `#if!BENCHMARK`, no?
Do we need to change the method name to reflect this?
Why was this enabled?
This is not a valid response code, should be 201.
I think we should raise an error if `add_extra_convs` is not one of the expected values.
if target is nullptr here then you'll skip the addInFightTicks() call which is incorrect.
Why do we need to call `service.enableRules()` here?
I think this line should be before the `plugins = require('../../pluginManager.js');` line.
I don't think this file was changed.
Why not `format.html { render :new, flash: { error: t('.error') } }`?
is it still called `serializedDataSize`?
I think we can just return nil and the k8s master will ignore the error.
This is not necessary anymore.
I think we can remove these imports.
I think we can remove this method as we have a default implementation in `AbstractRestResource`
Can we rename this to `merge_partitions`?
This is a bit of a misnomer. It's not crypto in the sense that it's using crypto primitives.
This file should be removed from this PR.
Is it really necessary to set the size here? I don't see that being checked anywhere.
What if the response is 204?
I don't understand the issue.
This is a bit of a nit, but I think it's cleaner to use the same `config` variable name here.
Should we be doing `h['puppetbindir'].split(':')` here, to avoid the potential of the extra `/opt/puppetlabs/bin` being added to the `PATH` if the `puppet` binary isn't available in the `puppetbindir`?
This is a good example of why the "replace" flag was added.
I think we should also remove the `AppliedStatus` field from the `apicontainer.Container` struct in the `ecs.go` file.
Why did you choose this mapping?
I think this link should only show up for NCRs, not for the general public
I'm not sure if this is the right version. It's the version I'm using on Mac, but I don't know if it's the same as the one being used by the linux install scripts.
Why do we need this?
can we use `HiveMetaException` here?
Is this variable only used in the `clearSearchIndex()` function? If so, you can move it there.
I am not sure if this import is still needed.
Please change the names of these constants to reflect their purpose.
I think this should be `github.com/rclone/rclone/fs/config`
This is a breaking change, can we keep the old method?
Why did you change the error message?
Why do we need to call this from here?
This is not used
I think this is not needed.
why do we need to convert to dataframe here?
I think we should download the profile photo on demand (when the user clicks on it), so we don't download it for everyone.
We should not change the description of the sample, since it is just an example.
I don't think this is the right fix. The `±` character is not in the range of supplementary punctuation.
This is the label for a checkbox in the Advanced settings panel.
This is not used anywhere, right?
This is a bit of a hack, but it seems to work. I think we could also do something like `@exclusion_patterns.any? { |pattern| line.match(pattern) }`, but that seems a bit more complicated.
I think this is wrong. It should be the sender (the one who sends the payment).
Why are we doing this?
I'm not sure if we can do this.
Why is this required?
Can we put this at the end of the list?
I think you can use `Long.bitCount(bitmask)` to get the number of bits set to 1 in the bitmask.
This is a bit of a hack, but I don't see a better way to do this. The `Kokkos_Macros.hpp` file has a `KOKKOS_TOOLS_INDEPENDENT_BUILD` macro that is set to 1 when building the tools without the rest 
I think we should add a note to the config file that this setting is deprecated, and will be removed in a future release.
It looks like this file is just a copy of `integration_test/remote_test.go`
Please remove this constant.
This is an unrelated change?
Is there a reason for this change?
I think this test is still useful.
I think the CXSmiles should be optional too.
Can we use `strings.Contains(ua, "CriOS")`?
I think we should just make this a subcommand of `push` to avoid the confusion of two `push` commands.
We need a better name for this option.
Is this something we should be exposing?
Should we be logging the exception here?
This should be `user.Current().Username`, which is what the `user` package is designed to do.
Metrics/LineLength: Line is too long. [123/120]
I think it's better to use `for` loop here.
Why was this removed?
I think this is a good start. However, I would not add this in the mux package, but rather in a separate package like `service`.
We should probably validate that the `renewBefore` is not greater than the `duration`.
This seems like a good candidate for a `final` method.
I think you need to initialize this to nil.
I don't think this is the right fix.
I think we should just remove this method and use `zipWith` with the `Tuple2` function.
This should be `if apis.IsInUpdateOrCreate(ctx) {`
I think this is the only remaining instance where we use `target_name` instead of `target`. Can you please change it?
It's better to use a constructor to initialize this. Otherwise, the `httpListenerPrefixes` could be null when it's first used.
This is the generated file.
Unnecessary import statements.
What does this `tracerInstance` variable do?
this is the same as the one below, can we DRY this up?
This will need to be aligned to 4 bytes.
I think we should add something about it being a security risk
I think we should not change this constant, because it will be hard to track back if a user has a Solr that does not match this constant anymore.
I think this should be `forceQR`, not `forceQr`
This is a bit confusing. The JSON is a string, not a number. It would be better to just return the version as a string.
I think we need to add `# doctest: +SKIP` to the docstring above.
why not use the interface?
It looks like this is a test for the `certificaterequests` controller. Do you think it's worth adding a `Sync` method that takes a `context.Context`?
I would just call `OpenTelemetrySdk.EnableOpenTelemetry` without the `using` and check the `shutdownSignal.IsSet` at the end of the test.
What about `from errno import ENOENT`?
You should check if the datasource has a collection route and a record route. If not, you should throw an exception.
I don't think we need to wait for 8s here. I would expect this to be done in a few seconds.
I wonder if it would make sense to make this a property of the `Package` struct. That way, we can use it in other places where we need to reference the libsqreen package.
This is not necessary, but I can't tell if the package is already imported or not.
I think you can remove the `itembonuses.DoTShielding` part since it's already added to `total_dotshielding`
I think we need to test that the encoding is different for each version.
This is a breaking change.
I think this is the only change in this PR that's not a no-op.
Should we log the error at debug level?
Should we check the networkMode here?
Do we want to do this check with `!` instead of `==`?
This will cause a `None` to be returned if the config is empty, which I think will cause the same errors to be thrown as before. I think it would be better to remove this check and just let the exception be thrown if the URI is not set.
This seems like a bug. If the journal is disabled, we should return the error, not nothing.
Can you put a space between `foo` and the paren?
You don't need this anymore.
This exception is not used anymore.
I think this should be `pingerPort int, _ int) int`, we don't want the pinger port to be passed in here, we should use the `pingerPort` variable that we initialize in the constructor.
Is it possible to have a test that checks that this is not the case?
This should be `itemmethod.parent.fullname()`
Can we check for a specific error here?
This should be called after `checkForOwn` above.
I don't think this is the right check. If I specify a `DockerfilePath` of `foo/Dockerfile` then I should be able to build `foo` as a module.
Is this only used for testing?
This will not work with private repos.
Can you remove this `@Import("takeFile")`?
It's better to leave a blank line here.
This could be a function in `question.py`.
I thought the plan was to have this configurable?
I would prefer to use the `cmd` package here.
why change to 2?
I'm not sure if we should be doing this check here or in the `validate` function, but I think we should do it somewhere.
Please remove this line.
This is a little odd.
What is the reason for not using the existing `flood_block` here?
This is a bit of a change of behavior. Is this intentional?
I'm not sure if this change is needed, but it's the only way I got this test to pass.
(style) line over 80 characters
I'd rather we didn't use the same markup as the actual email.
I'm not sure this is needed, since `XLongField` is a subclass of `LELongField`.
I'm not sure about this. If I'm not mistaken, it's possible that a user will want to have a high `max_payload` and a low `max_pending`. This is because `max_payload` is the maximum number of chunks that can be in flight at the same time, wherea
Please avoid wildcard imports.
Why is this change necessary?
Shouldn't this be imported from `org.triplea.selenium.page.web.util.SeleniumWebDriverException`?
This is the reason I didn't change the name.
Can we remove the `catchup` from the name?
I think this should be `[]restic.Tag`
I'd prefer to keep the old description, since it's more clear.
Can we rename `originalSchema` to `parameterNameSchema`?
why we need to move `to_tensor` here?
This is wrong. This is a Python 3 file.
I think you can use `data._kdf._internal` instead of `data._kdf._internal.data_scols[0]`.
We can probably move this to the common folder.
This is the fix for the "sometimes the head MD is set twice" bug.
why does it go from 2 to 4?
`Group` and `Version` are constants in `pkg/api/legacyscheme.go` so we should not add another set of constants for the same thing.
I'm not sure about this change. I think we shouldn't print the error message here, because the user may not understand what is happening.
This should be `issubset(set(package_stats))`
We should add a `security` section to the docs, as we're using it in several places now.
I'd suggest to move `options` to the end of the parameter list, it's an internal thing, and we don't want to change the public API.
Is this really needed?
I think this should be `int` instead of `[]int`
Why not `int ParallelLevels => 1`?
I don't understand this change.
I'm not sure what this is for. `dp_bits` is never set to anything.
is this address used for iotex blockchain?
This is a change of meaning, which is not allowed.
typo: wether -> whether
This import is not used
why do you remove `if (!Handsontable.helper.isIE9()) {`?
I would put `change_column_null` after `add_column`.
I think this should be an error.
this is a nice improvement. I was thinking we could have a `result.output` method that would be `result.stdout + result.stderr` but this is nice too
I would keep the `pylint: disable=` statement and just add `# noqa`. I find it more readable.
I think this should be called `getNonce`
I think we can remove this since the `gravatar_url` function is now in `ApplicationHelper`
This is not a new file.
I'm not sure if this is the correct way to do it, but it does pass all the tests, so I guess it's fine.
This is probably better as a `bool` return value, so you can do a `if (release_fullscreen(output))` check to make sure it was released.
Is it ok to change the default value?
I'm not sure if this is a good idea. This means that if someone updates their copy of the `beaker` gem, then their copy of the `beaker/options` directory will be overwritten.
this log line is probably not necessary, but doesn't hurt anything
why is the flow id in parenthesis?
`alpha-reverse` should be removed.
Is this test supposed to be testing that it is _not_ recording?
Should this be `[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", Scope = "member", Target = "Microsoft.Rest.TransientFaultHandling.ShouldRetryHandler.#Invoke(System.Int32,System.Exception,System.TimeSpan&)")]`?
The version field is now unused.
Why is this now required?
I think this test is not going to work on linux because of the `ctxserver` and `ctxclient` params.
this is weird, why not just use a constant?
I am not sure what is the purpose of this change.
The `Upcase::Application` is the only thing in this project so this file is now redundant.
Can we just return here?
This is not the default, so we should set it explicitly.
@shahzad29 do you want to use GenericThreadPool or Barrier in your test?
I think we should not add this column to the RowSchema. The partition column is not a part of the row schema. We should use the partition column as a separate data structure that is maintained by the table manager.
Why is this being set?
I think this can use the `int` conversion instead of `strconv.Itoa`.
I think it would be better to just have the user injected object, and then just extend that with the default. This way, it's not possible to override the default with an empty object.
I think the `defaultValues` is not used anymore.
I'd prefer `emptyWithNull()` to be in the `CollectionSet` interface, instead of `Set`.
@wachterjohannes this is not a typo, the previous path was wrong.
Why is this being skipped?
@mrhelmut this will be removed when you merge your PR
Is it possible to use `PROFILE_CREATE` as the profile ID here?
I removed this line because it was failing on Travis
I think we should only call `StartTimingWrite` here if we've already called `BytesWritten` above.
I think we should use `or` here, if it is only one command, we can use it.
This is the same as `eval()`.
I think we should keep this check in place. If we don't want to use the default of `local` we should set it explicitly.
We can use the config object directly.
Do we need to check that this is called only once?
Is it possible to move this to the top of the file?
@benhalpern @rhymes I removed this spec because it was redundant with the `each` spec above.
I think this could be a single line loop.
Is it better to use camel case for the names?
I don't think we should add this error message here. The error message should be added in the parser where the error is detected.
This is a bit of a hack, but I couldn't figure out how to get the real comm instance from the MPL comm object. Any ideas?
is this right? i thought the user CQDs should be sent after the transaction is committed
I think we should move this call to `onLibraryLoaded()`. The reason is that `onAppLoaded()` is called when an app is loaded, and we may have multiple apps loaded from the library, so it should be called only once.
This is a little odd. It's not a public API, but I guess it's okay?
I think we should keep the list of possible options in alphabetical order.
import order: java, javax, spring-framework, spring-tx, spring-integration, spring-test, aop, bean, context, core, data, http, jdbc, mail, messaging, oauth, odbc, security, web, xml
I think this is a bit of a breaking change. If you have a JUnit 4 test and you are using the `junit` plugin, this will now fail.
This should be `errMsigWrongAddress`
We don't want to sniff for the index?
I'm not sure that this is a good change. The old code was a bit more explicit.
I'm not sure if I'm missing something, but the apply_helpers namespace seems to be hardcoded in the bolt code, so I don't think we need to prefix the name with that.
nit: please remove trailing whitespaces
nit: `inputSchema` -> `rowSchema`?
This will cause the unwinding to be biased to the lower numbers. For example, if the current block number is 1000, and the expected root hash is correct for block 2000, then it will unwind to 1000 instead of 2000.
The `configProto` is not null here.
I think it's better to use a `sync.Map` here.
We should also add the new endpoint to the `GetNewSessionQueueSize` class.
I'm not sure if this is the best place to put this. The `create_user_from_params` is used in the `Users::RegistrationsController`
This is not needed, we are already doing this in `NativeLibs`
Should we add the `@phpstan-return string` to the `phpstan.xml`?
`propagated` -> `generated`?
Why is this lock removed?
I'm not sure if this is the right place for this. It feels like it should be done in the prefetcher itself.
@russrob this is the only change I think is required to fix this. The `computed` is a bit of a hack, but seems to be the only way to make the mixin work.
This looks like a bug fix.
I think this should be `F.mean(colname).alias("{}_mean".format(colname))`, right?
I would call this `--ignore_chromium_update`
This method should return `List<WebElement>` and the method above should return `List<? extends WebElement>`.
We're not using any Linq methods here.
this is the change that will cause us to use go 1.8 by default
you can use `array_key_exists` here as well
I would not use `*` imports
This is not the same as before. Now, it will not find `NamedTuple` instances that are not direct bases. Is that intentional?
Nit: remove empty line
This is not safe. `step` can be `undefined` or `null`.
This is not correct. The `--output=` option can be used to specify a specific output file.
Rails/InverseOf: Specify an :inverse_of option.
This is not true. If we get a SIGSEGV, we'll crash and dump core, and that is what we want.
I think the `startsWith` is not necessary here, as we are using the exact string.
I think this should be `MountPath`
I think we should have a `Log` method on the `SpanProcessor` instead of this `OpenTelemetrySdkEventSource`.
I wonder if we should also add a `throw` here to avoid accidentally forgetting to call `ProduceEnd` in the future.
This fixture was unused.
I think you can remove this `if` and always call `$this->checkStockNotEmpty();`
Why do you need this class?
This is an accepted English term for a file attachment, so I would keep it.
this method is not used.
I think this should be `dispatcher.beforeClickOn(element, driver, event);`
We should add a note that this list should match the `IPAddresses` field in the CSR.
This is a bit of a nitpick, but this error message should be updated to reflect the new behavior.
I'm not sure how well this is going to work. The `local_mem_size` is a per work-group value, so it's not necessarily the same as the per-block value.
Is there a reason we don't destroy the tunnel in the finally block?
I don't think we should have a default to winrm_nodes, since the default is local.
You can use `__('backend::dashboard.status.widget_title_default')` here.
I would suggest to use a smaller range, otherwise the test might take too long.
why not use `PLAYER_RETURN` here?
Is this still needed?
This is a bit confusing. I would have expected `streaming` to be a property of the plot itself, not a property of the `Plot` class.
Why this change?
Can we use the AWS ECS container image here? It's already built into the AWS ECR registry and we don't need to maintain a different image.
I think you should be able to do `mol->getAtomNeighbors(mol->getAtomWithIdx(aid)).begin()` here.
nit: this line should be removed.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I don't think we should be changing formatting in this file
Can we change the name of this field? It is a bit misleading now.
This is not correct. We need to make sure the ramp is connected to a motorway or a ramp.
Is this used anywhere?
I don't think we should add config to RoomHandler. It should be added to TheatreChatHandler instead.
I'm not sure about this change. The `shard_key_fields` is supposed to be a list of fields that are used to generate the shard key. If we change it to a hash, then it's not clear what that means.
I'm not sure if this is the best way to do this, but this is the only way I could get it to work. I'm open to other suggestions.
`dictLength` is used only in `writeDictionary()`, so I think we could just pass it there as a parameter.
why is the hash needed?
@markap14 - can you please check if this is correct?
I'm not sure what this is for.
This is a public API, we can't change it without deprecating it.
What happens if `tmpInt < 0` or `tmpInt >= 128`?
This is the main fix, if there are no points in the old time intensities then the scan index should not be set.
This needs a `@since 9.2` tag
this one is a bit odd, as the test is still checking that we are getting the metadata, so this is a test for the other case?
This is a bit hacky, but it's the only way I could figure out how to cancel the grab.
I think we should do this only when the cVR is in Pending phase.
Why remove these?
This is not right, you need to have `const char *has_xcb_errors = "✘";`
Should we make this a constant in `BN.js`?
This should be a critical error.
Shouldn't the method name be `createFlexibleConfigWithAccountPermissioningEnabledShouldReturnEmpty`?
why are you using `addGameTask` here?
I think this is wrong. The namespace imports should be generated in the context of the current namespace, which is the global namespace here.
I don't think it's a good idea to expose the retry times to the outside. If you want to make it configurable, please use a configuration class.
This will be useful when we'll start supporting multiple namespaces.
I'm not sure what this macro is supposed to do, but it looks like it's not doing anything at all in this case.
This should be a pointer, so we can check if it is nil.
Why is this plural?
This was a bug in our test suite.
I think we should add a note that if both flags are set, the created date is used.
Why is this not needed anymore?
Maybe add that it's a comma-separated list?
why is this required?
I'm confused by this change. What is it trying to do?
I think you can use `respond_to?("#{name}=")` instead of `responds`
I think this file should be removed.
I'm not sure if I should add the copyright for the individual contributors. I can remove it, if you think it's not necessary.
Is this change intentional?
I think we need a `_base_` for `dcn` as well.
I think the `claims` variable should be `role` or `roleClaims`
I think it's better to do this in `control.py` when the property is accessed.
This should be async.
why this use statement?
What if the compositor is already resumed?
I think you need to add the size of the block hash to this.
This is wrong. The format is "YYYY-MM-DDTHH:MM:SSZ" so this should be `time.Time{Time: 0, Location: nil}`
@honestlyspeaking this is a breaking change. I'm not sure how to handle this. Should we add a deprecation warning if the `config` key is present?
Why do we need to add these?
Line is too long. [91/90]
You're not returning anything.
I don't think we want to remove SIGKILL, otherwise we will be unable to kill a podman process.
What's the reason for this change?
This is a breaking change.
`keys.join('')` will throw an error if `keys` is an empty string.
This is the only place where we don't use `std::back_inserter` to append to the end of the vector.
I think we should remove the `command.readPreference = options.readPreference;` line
I would prefer if this was a `map[string]struct{}`
Why not set Live to false?
Can you make this a multi-line string? It makes it easier to read in tests.
This doesn't look right. The process is going to be different every time.
I think this is the wrong fix. I believe the issue is that `Attest` is not correctly returning a `*Select` struct.
this is not needed, we already set it in setup.py
Use `on` instead of `click`
is this necessary?
It's not necessary to add the `$config` argument to the constructor, you can just retrieve it from the service container.
This should be removed
This should be removed.
I think the composite_root is a better name for this than the "fake" one.
nit: I'd recommend removing the `Purpose` section here and including the `Purpose` statement in the `Prerequisites` section.
I think this should be `if p.Spec.ServiceMonitorSelector == nil && p.Spec.AdditionalScrapeConfigs == nil`
This is a bug fix, right?
I'd rather keep the name as `GetUriTagValue` as this is a more general method that can be used to get a URI tag value from any URI.
I would prefer to see this in the `draw` function of the view object.
This using should be moved to the top of the file.
I would suggest a different name. `fetch` is a bit confusing. Maybe `source.iceberg.reader.max-split-batch-size`?
Is this import needed?
The errorList is used to store the error message.
Please use `Math.min(Math.max(inputOffset, -30), 30);`
This is a little tricky, because it is possible to have a HIP device without a DESUL device. This is a problem for DESUL, but it is not a problem for Kokkos. We can either: 1. Disable the DESUL device checks for Kokkos, which would mean that t
Nit: you can import the read preference without the curly braces.
Please remove this import, it's not used.
This test is the same as the one above, just with a different error. Can we have one test for each error?
I don't think this is equivalent. The first check will be true if `$url` is `0`, the second one won't.
I'm not sure if this is a good change or not. The `--password` flag is a bit of a weird one, because it doesn't actually do anything. We don't pass the password to the node. But, it's a bit of a weird test, because it's testing
I don't think we need this. It's a very small function and we can just inline it.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should this be called something like `COMMIT_AT_STARTING_SEQUENCE_NUMBER`?
I think we should add the context to this message. Something like "used when something is compared against itself"
> Destination type. Destination -> dst
@deads2k I think this is the right fix for the original issue.
The original message is a bit funny.
@smarterclayton I think this is a leftover from the last PR
I would prefer `huawei.com/edge`
this is not needed, the build is already using the package manager to install dependencies
Could you explain the rationale for this change? I think that in the past we've generally tried to avoid changing the signature of methods in the interface.
This is a broken link. I think this should be `alembic.readthedocs.org`
why is this needed?
I'm not sure why this was imported from 'puppeteer' in the first place.
Can we use a const here?
I think this is a bug.
You should probably check if the value is empty before setting it, otherwise you'll end up with the empty string.
I think this should be `Errorf`
Is this not needed anymore?
Is there a reason to use `raw-loader` instead of `@salesforce/design-system-react/loadjs`?
this test is duplicated below
@benhalpern I think we need to sanitize this a little bit more. I'm not sure what the title is but it seems like we should at least strip tags and encode.
ignore_index should not be changed. We will fix it in another PR.
I think this is the only change needed to fix the test.
I think you can use the `&` operator here.
I think we should keep this warning level, since it means that the user will not be able to verify the server's signature.
I think this should be DBPDataSource. The only reason it was changed to PostgreDataSource was because the old name was a bit misleading.
I'm not sure if this is a breaking change. I think it's fine to break this since it's not a public method.
I think this is wrong. It should be 0 if it's not set, right?
This is really weird, but I guess it is what we have to do for now. I'll make a note to change this in the future.
This is a breaking change. Can we make it an optional parameter and default to None?
This is the only line changed in this file, and it's just a guard for the line below.
This change is not correct. It will cause the node to be marked as loaded when the Id changes, which is not the case.
What is the difference between `200809L` and `200112L`?
This can be `reffedHeaders.includes(header.id)`
I think you can get rid of this `user` variable and just do `current_user.first_name = first_name` and `current_user.last_name = last_name`
please, add to docstring
Is it not better to have these constants defined in the metrics package?
Is this a leftover?
I'd probably just do `Array(filter(value)).select(&:any?)` and skip the `.map { |f| filter(f) }` as that's a bit redundant.
`'adsense'` is the `id` prop of the `GoogleAds` component.
I would use a more descriptive name for this, such as `missingAdminRoleAuthorization`.
I'm not sure how I feel about this. It seems a little silly to check it, but maybe it's more of a safety thing?
I would use the singular form here.
Can we use `assert.NoError` instead?
Why is the `$chars` check removed?
I think it's better to use `GetActivePeers` here.
I don't think we need to expose this at the API level. We can have a `VPCIngressRules` struct that holds all of the rules for a VPC.
This pattern will match names that are 12 characters or longer. Is that what we want?
This is probably fine. I'm just a little worried about the fact that this is now a floating point number. If we're going to do this, we should be more explicit about what this number means and how it is used.
I think we should enable it by default.
The `ctx` parameter is unused here.
Why not just return the result of `checkExprDepth` here?
Remove this line.
@tomspilman @aosyatnik - I think we should not have this attribute here. It's for WPF only.
I think we should keep this telemetry point.
Maybe `link_failed_examples`?
This is a bit strange. Why is this needed?
Just curious, why did you choose `tags` and not `tag`?
I would say "IPs" instead of "IP strings".
Shouldn't this be `FetchCert`?
`beforeChangeResult.length === 0`?
Shouldn't this be `!strncmp`?
This is a generic patch template, we should not use it for `versionDetails` only.
Why not just call propagateDeadlineToChildren here?
This is a minor change, but I prefer `+ sourceIDs.size()` to `+ String.valueOf(sourceIDs.size())`.
Why is this nullable?
This is a little confusing to me, but I think it's fine. I'm assuming that `encoding` is the encoding of the string, and `valid_encoding?` is whether or not the string is valid. So the string is valid when it's 8-bit ASCII, and it's in
This is the only part of this PR that I'm not sure about. I'm not sure how to test this.
This is no longer needed.
I don't like this flag. If you want to do it, I suggest to add a new flag for debug mode only for payments in session.
can you please put the twoThirds default value in the docs?
Could this be done with `?html` instead?
why is this changed?
We need to keep the links that don't have a span context for the case where the span is not started yet.
I'm not sure if this is the right place to set the default protocol.
@ikeough - this is the only change I am not sure about. I think it would be better to have a method that is called by both methods, but I'm not sure if that would be too much of a change to make at this point.
This method can be removed.
@jridgewell this is the only place where we actually set `isHydrating` to `false`. I think this is correct, but I am not sure.
We should probably log a warning if this happens.
I don't think this is right. The only reason we have a `num_regs_skip` field is so we can skip saving the stack guard, which is only ever needed for `num_regs_skip == 1`. If we skip the stack guard, we don't need to save any registers.
why do you need this change?
is this logic still valid?
I think this is unused now.
Should we rename this function to `pageWaitAndClick` or something?
the changes here are only cosmetic, right?
I think you should check `roots_xcursor_theme_create` for errors here.
Should we make this a constant?
This is a bit of a hack. I think we should remove the pinger from the proposal process. The pinger is not necessary because the proposal process is already pinged by the validator when it gets a new block.
this is a fix for the wrong code being sent in some cases
why 3? can we just make this 2?
What is the purpose of removing this?
This was renamed because `ctu_on_demand_failure` no longer fails.
We should use the same namespace as the shoot.
This should be `seelog.Debugf("Updating task: %s", task.ID())`
Why do we need this enum?
Why is this code here?
It's a bit weird to have these constants here, but also used in `FlowFileEventReporter`. I think they should be moved to a common place.
I think this function should be called `format_message`.
This is a bit of a hack. It is not super reliable, but it is good enough for our use case.
I think this should be `os.path.relpath`, otherwise we'll end up with absolute paths again.
This is a change in behavior. The old behavior was to log `trace` messages at the `info` level.
This should be `int32` and set to 0.
I think we need to be consistent with imports in this file. Some imports are `context`, some are `context.Context`
I think you can drop the `class_name` here.
I'd rather not see this. I'd rather have the ILGenerator accept a bool and then set this internally.
this seems like a bad name for a flag
I think this is the wrong place for this method. It's in the wrong namespace, and I think it should be a class method.
@danrot why do you remove the typehint?
This is not a reference by name. It's an object reference.
This change is unrelated to the PR, right?
@ravening @ramramps, should we change this to use the new CRD version?
I think this is the only test that needs to be updated
This is a breaking change, so I think we need to do it in a minor release.
this is an example of a log statement that I think is useful.
I think you can get rid of `implicitNodes` and do the mapping in-line
I think we should just make this `new webdriver.http.XhrClient(url)`. I don't think we should be using the `CorsClient` for this.
I think this flag should be a `String` instead of `StringArray` to be consistent with the other flags.
It might be a good idea to add a note to the godoc that this field is only used when uploading blobs.
I think this is fine, but it's also fine to keep the order the way it was.
@harry-cpp @mjkkirschner Can you review this change?
I think we need to log this.
I think this should be `maxrequestbody` (lowercase)
This is a bug fix.
Is there a way we can avoid the lock here?
Why was this removed?
I don't think we should remove this, we may want to use it in the future.
The `wait_for_at_least_entries` is not thread-safe. You should use the lock.
Please rename to allJobExecutorTests
can we add an expected:goazure task here to be consistent with the rest?
What does version mean?
I would keep this blank line
I think this is the only place where we are calling `conflictDetectionFilter` method. We can remove that method and just inline it here.
I think this is the wrong approach. The `call_site` should be the line number of the `deprecation` call, not the line number of the `deprecate` call. The `deprecate` call should be in the same file as the `deprecation` call.
nit: you can use `expect(diagnostics).to.be.empty`
This is a regexp for byte count.
do we need to add the same methods to Seq?
Line is too long. [81/80]
I don't think we need this, as we can get it from `VPC`.
Nit: The `composeResponse` function is only used in one place now, so I would just inline it.
I think we can remove this one.
can you please rename this to `sharedMount`?
can you use `defer dao.Stop(ctx)`?
I'm confused. Why is this change necessary?
Should this be `Optional[AnyKey]`?
I'm not sure we should do this. The other languages do not have the ability to do this. If we do it for PHP, we should do it for C# as well.
This is a breaking change for the dev-tools, and it's a little unfortunate. I'll see if I can find a way to do this that doesn't require changing the dev-tools.
This file should be excluded from the commit.
This is the only place where we're checking for `mset.mirror!= nil`, so I think it's fine to just return here.
We should add the same to `EnableOpenTelemetryWithTracerProvider` and `EnableOpenTelemetryWithHost`
We should probably rename the constants to be more descriptive.
We don't need this line, we use `gocloud.dev/secrets` below.
We can use `atomic.StorePointer` to update the `receivedPeers` map.
this is a dead code, right?
Why is this change needed?
Why is this change needed?
If you copy the list of valid class names, it is a good moment to also copy the list of valid package names.
What's the reason for this new stage?
why change this?
I think this is not a good idea. The `webkitGetAsEntry` API is not implemented in Firefox. We should not be using it here.
@caitp @mhevery I think this is the reason why `ngClick` doesn't work in IE8. This is because `ngClick` directive registers an event handler for `click` event on the element. But when the element is destroyed, the event handler is not 
I think this is the only place this is used, so it should be fine.
unused import, please remove
why log here?
I think you could use the `isEmpty` method instead.
This should be `keyFilePath(Optional<String>)`
I think we should add a `description` for the default value.
This is a breaking change, we should keep this line
You can use `CollectionUtils.isNotEmpty()` instead of the null check.
I would also include the note that the service bus connection string can be overriden by setting the `SERVICEBUS_CONNECTION_STRING` environment variable.
@rhymes this is the fix to the "JSON is not supported" error.
@bryce-anderson, I'm a little worried about the performance impact of this. We are already doing this for the `query` method, but that only happens once per query. This will happen once per command (per cursor).
Is this import needed?
This is a small optimization that doesn't change the behavior of the test, but it helps us to avoid having to update all of our tests if we ever decide to change the text of the CTA link.
Is this being used anywhere?
can be removed
I think this should be `len(ops) - 2`
I'm not sure I follow what this is doing. Why does it need to check the length and then decrement from it?
Nit: I'd prefer if we only imported colors at the top of the file.
This should be fine. It's not a common action and we're not logging the name of the image being pulled.
I'm not sure if this is a good idea to add a new method to Reader.
I don't think this is the right way to do it. This is not an EditBox subclass, so it should not inherit from EditBox.
The name `asmsecretres` is a bit ambiguous. Can we rename it to `asmsecretresource` to make it more obvious that this is a resource?
Why change this to `ErrWorkspaceNotFound`?
Why is this needed?
Nit: can we remove this file?
This is a bit too verbose, I think. I'd prefer to see something like: `[{msg_id}] {path}:{line}: {msg}`.
This is not necessary.
is this debug output intentional?
Why do we need to change this?
I think we can just get rid of this file.
Can you explain why this change is needed?
This is not a change in behavior, but I find this more readable.
Please also add `_base_` to `retinanet_pvt-t_fpn_1x_coco.py`
This change is not needed. `go-homedir` is already in `go.mod` and `vendor` folder
I don't think we need this line.
This should be `ghost/api/v0/`
I think it would be better to remove the `Channel` field from the `RadioTap` class altogether.
We could use `reflect.Value` for `ctx` and `reqBody` here, as well.
I think this line is not necessary.
This is not correct. You are splitting the annotation into two strings, the first being the name of the annotation and the second being the value. You then pass the name of the annotation to `addAnnotation` which is a method that adds the annotation to the list of annotations. You then pass the value of
This is a change in behavior, but I think it's a good one. The player name can be anything, so it's good to check the player object directly.
I think we should add `[assembly: SkipOnCoreClr("System.Net.Tests are flaky")]`
This is a bit awkward. Can we just have `func Open(ctx context.Context, certSource proxy.CertSource, params *Params) (*sql.DB, func(), error) {` and then in `NewCloudSQL` call it and return the cleanup function?
This is a breaking change.
This is a new bug that I'm not sure we want to fix here.
I think it's better to use `strings.SplitN` instead of `strings.Split` here.
I think the wording here should be that the CertificateRequest is ready for signing by the signer.
I would have thought that `getIsotope` would have been sufficient. Is that not the case?
Should we add a "bio" or "title" for Anthony?
Do we have a reason for 10% vs 15%?
This is not a filename pattern, it's a file name.
This is a catch-all, right?
I would prefer `r.logCxt.Debug()`
these should be removed from the config too
This should be replaced by the standard `sizeof` syntax, which is what the code base prefers to use.
This seems like a lot of code to set up a test.
What is the point of this check?
I think this should be `Intent.FLAG_ACTIVITY_NEW_TASK`
I think it's better to use `ErrCodeNoSuchBucket` for this one.
I think it's more informative to log the names of the tables.
@jrfnl I think you're going to have to change this to `import { Fragment } from '@wordpress/element';`
`DR_HOST_NOT_TARGET` is an easy way to disable this check.
can you please remove this line?
It's a typo, but I'd fix it with `StatisticsServlet` instead of `stastics` (I think it's a typo, but it might be a deliberate change to "stastic"   )
This is a bit weird. It would be better to do `selected[opt]&.is_a?`
this should be `net/ip`
This seems like it would be a good candidate for a `PostShapeGeneration()` func.
We should also add this flag to the `--help` output.
I don't see the use of this field.
This needs to be added to the ref.
I think it would be better to test that the capability is not exposed.
Nit: the flag is `Eth1L1FeeWalletAddressFlag`, but it's a `L1FeeWalletAddress`. I would suggest changing the flag name to `Eth1L1FeeWalletAddress` (or `Eth1L1L1FeeWalletAddress` if you really wa
Why are we adding `__dir__`?
This was the only place that was using the `template` package. I've updated it to use the new `template` package.
is there any test to cover this?
Maybe `GetWithCreatable`? Or `GetCreatable`?
Is there a reason you don't use `Account.create!(...)` here?
This is a good example of a situation where we're mixing up the responsibilities of the `auth` struct. We're using it to configure an ACME authority, which is not a responsibility of `auth`.
I would prefer to not use this. I think we can avoid this by moving the `if (!strncmp(name, "libinput", 7))` below to `libinput.h` and have it define `WAYLAND_LIBINPUT` there.
This is the only place where we are using the term "workload"
I'm not sure if I'm missing something, but I don't see `environmentFiles` in the API response.
Layout/AlignArray: Align the elements of an array literal if they span more than one line.
Can these be `static bool`s?
This is a breaking change.
I think this should be a warning, not an error.
I don't think we want to limit the number of features per group, just the number of data per group.
What if we make `startTs` nullable?
This is a good start, but we'll want to make sure we're using `current_user` here.
You can use `readU32` here instead
I'm not sure if we should be modifying params this way. I think we should pass in a dict of headers to add to the request.
This will probably get lost in the logs. I think it should be `info`
should we keep the old column and add the new one?
This should be moved up to the `when` statement above.
I think we can remove this method since it's not doing anything.
What happens if the validation fails?
I would call this `Error` instead of `ApplicationError` to be consistent with the `Error` field in `Response` struct.
I think this method could be moved to `TypeSolver`?
I think we should just create a new overload of the method instead of adding a new parameter here.
I think we should also have a `settlements/last` endpoint, that returns the latest settlement.
This is a little bit confusing, the function name is `readUntil` but it returns if not `readUntil`?
I think you need to import `fs" github.com/ncw/rclone/fs` and then use `fs.New` below.
why not panic?
This is a bug fix?
This function should be changed to `findLabelFor`, and it should take the element to find the label for as an argument.
I don't like this method, I'd rather use `$this->allTabs->primary->icons[] = $icon;`
This is a global variable that is only used in a single function, and is never initialized. It is only used to return a static error. I think this should be moved into the `checkCertificate` function.
Layout/SpaceInsideBlockBraces: Space between { and | missing.<br>Layout/SpaceInsideBlockBraces: Space missing inside }.
@josegar74 : I think that this is the right change. This is the source field that is being used to identify the producer.
I think this is the only place where this is used.
We can also add the escaped unicode char `"\u2122"` to the list.
I would have a more specific error message for the DOI API.
I'm not sure why this file is changing?
This is not a miner control address. It's a worker address.
Why is this needed?
This is no longer necessary?
nit: should this be `errorf`?
I think this can be removed too?
This change is not needed.
Should we just make this a global var?
Why does this change?
This was already in `requirements-dev.txt` so I don't think we need to bump the minimum version here.
I think this can be removed too.
This is not used
This is not true, since `keyComparator()` is not deprecated.
This is not needed.
This is a good example of a case where a copy should be made. The function has pointers in it, and it is possible for the pointers to change between calls.
I think this should be `if (!ev)`
This pattern is too broad. It will match `[[a]]`, for example.
We need to check this before we start reading, otherwise if the file is updated during the read we will return an error.
I don't understand this change, why is this no longer a `<=`?
@zachmargolis I'm not sure this is the right solution. I'm not sure what the right solution is.
I'm a bit confused by this change - it seems to me that the original query is equivalent to the new one, so I'm not sure why it's being changed.
I think we should replace `<` with `&lt;` in the message when `isHtml` is `False`.
This is not needed anymore.
This is not right, we should use the default path.
This is probably going to be a bit of a pain when it comes to updating the plan schema. But I'm ok with it for now.
I think we should also add a config that enables/disables the metadata log. It is enabled by default, but we can make it configurable.
This is not a great name, I think. I would prefer `dataList` or `dataListName` or `dataListId` or something.
There is no need to have this file.
I'm not sure if this is the right place for this? I'm not sure if it's okay to just emit errors here?
Layout/SpaceInsideLambdaLiteral: Do not use spaces between -> and opening brace in lambda literals
import order is a bit weird here.
This is a noop in shadow mode.
I'd like to see this as `@succeeded = true` by default, and then only set to `nil` if it fails. That way, you don't have to check `nil` for `succeeded?`.
I think this should be `isDockerized()` instead of `isDocker()` to be consistent with the naming of other methods like `isDockerized()` and `isDockerizedSession()`
Why is this check removed?
Is this used?
this should be `add_index :completions, :trail_name`
This is a singleton, so the `@Memoized` annotation is redundant.
Why is this needed?
Is this used anywhere?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Do we need to change the logic here?
I'm not sure if it's a good idea to use `defined?` here, but I'm not sure how else to check if the module is available.
`pandas_wrap` is not used anymore, and it's imported from the wrong file
Why the recursive_mutex? I don't see any recursive calls.
I think this constant should be moved to `bokeh.plotting` module.
Shouldn't this be `if (!isHybrid() || isHybrid() && BootConfig.getBootConfig(frontActivity).shouldAuthenticate())`?
I think this should be `self._inject_early_js('js_print', js_code_print,...)`.
I think you meant `uint32 ground2` twice here?
I think we should have a way to specify the install flows in the test config.
I think we need to keep this check here, since the nil check in `AppendNil` will not work for this case.
I think we should probably set up a `.env-sample` file to show people how to set these up.
I'm not sure if I'm missing something but why do we need to have two interfaces?
This should be `rpccontext.AuditLog(ctx)`
This is not a performance tuning option. It is a feature.
It seems to be a breaking change, but it's good.
Why not use `AZKABAN_SERVER_LOGGING_KAFKA_ENABLE` here?
This is a bug fix, right? If so, should we be doing this in a separate PR?
Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.
I'm not sure if this is a bug or not. I didn't see a test for it.
this is not needed, we can remove this file
Please fix the indentation.
This is a breaking change.
It would be better to use `fmt.Sprintf` here, to avoid concatenating strings.
I think we can just remove this if statement and set country to "unknown" if it's empty
why change this?
Shouldn't we log the block number as well?
Is this a leftover from an earlier draft?
Can we add a TODO here?
What is the rationale for changing the value of 3000 to 5000?
These were added to be able to pass in the custom auths to the new `NewInClusterClient` method.
Layout/IndentationConsistency: Inconsistent indentation detected.<br>Layout/SpaceInsideParens: Space inside parentheses detected.
I think we need to make sure that the columns are added in the same order as they are in the index.
why are we calling strtolower here?
Shouldn't this be in a separate PR?
Why are we changing the flags here?
This is the only place where the node port is set, right?
Should we keep the same order for the arguments here?
why 200000000?
@strib this import is no longer used
Why is this change?
This is removed because it's done in `swift::performSILLinking` now.
This is not needed, since it is done in `addcslashes()`.
Can we remove this?
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body beginning.
I think we can remove the `case` here and just call `print_result` directly.
I think we should check for the expiry time and if it is 0, then we don't need to do anything.
I would expect this to be named `IsApiVersion` and to be static.
I'm not sure this is the best solution. What if we just added a version column to the table?
shouldn't this be `formatTimeAgoText`?
Why do you need to make it public?
Why are we exposing this interface? We can just make it internal and inject it into the pipeline.
@ramricken is this going to work for the `antrea-` and `antrea-`-`etcd` pods?
I think the keep alive period should be set to 0 on OpenBSD.
Can we keep the same name as before?
This is a python standard library import, so no need to use relative import.
It looks like we already have `InternalsVisibleTo("OpenTelemetry.Instrumentation.Http" + AssemblyInfo.PublicKey)` in this file. Should we remove that one and replace it with the new one?
I don't think this is necessary. If you have a controller for the modal, you should be able to update the view directly.
I think you'll need to update the docstring here.
I think you can drop the import here.
Should we have a test for the error case?
This is the only change I'm not sure about. The data reader should be able to handle a label of -1.
why not use `cst` here?
I think we should get rid of these `const` bools in the signature of `SubstructMatch` and pass the `flags` as a `Flags` object.
I think it would be better to use `Object.prototype.toString` instead of `({}).toString`.
Is it an `HttpClient` or `HttpClientHandler`?
nitpick: `for_s3_to_sns_to_sqs` sounds a bit verbose, maybe we could just call it `for_s3`?
I wonder if this should be a data directory, rather than a directory in /var/lib, since it's not necessarily related to the container data.
We need to remove this line as well.
I think we should only call this in `before(:each)` and not `before(:suite)` since it's creating records in the database.
It's not clear to me that this is the right thing to do. Why should we ignore the container?
I think you should add a `try/catch` block to catch any exceptions thrown by `SafelyKillProcess` and log the exception.
This is a bug fix.
Why do we need to change this? It seems like we should be able to keep the default constructor and handle this in the derived class's `read` function.
Is there a reason this was not being checked before?
I think this is not needed.
I think the TODO is still valid, the exported fields are still only for testing.
Can you add a `LOG.info` with the Thanos block number in the `createProtocolSchedule` method?
This is the only change that affects the dataplane, right?
`m.Group("/branches", func() {` => `m.Group("/branches", func() {`
I don't think we need this line
This is a very old file. The `holder` is not used anywhere in the file.
I think we should keep the app domain as it was, since we have a lot of code using it.
I think this is not necessary anymore
nit: this can be moved to the `TelemetryWrapper` class
This is not a breaking change, right?
This is the actual location of the data files.
I think we need to make this a `const` instead of a `var` so that the `gitSuffixToIgnore` const can be used in the `kbfsConfigNameTemp` const.
Is this import statement still required?
I think you can use `testing` package here.
I think it's easier to read when the links are on separate lines.
I don't like this change. It's not the first time we've had to make this kind of change.
`unless` is harder to read than an `if` with a negative condition, please change.
this is a change in behaviour. Previously this was a `Kernel.warn` which is why I think we did it this way.
I think it's better to throw UnsupportedOperationException. Otherwise, we may forget about this method in the future and try to implement it.
Should we make this a boolean argument that can be specified multiple times?
This is not needed.
This is not a big deal, but I think this should be `uint32` since that's what the protocol is using.
This is a bit odd, it looks like the `settingsFileName` is being created every time. Why is that?
I think this is still needed for Linux. IIRC, we need to disable BPF if the user has requested BPF but the kernel doesn't support it.
I would leave this in for now.
Why do we need this?
This is the only change that could break compatibility.
`$this->config` is an array, so this is not needed.
Layout/SpaceInsideBlockBraces: Space between { and | missing.<br>Layout/SpaceInsideBlockBraces: Space missing inside }.
I think this should be `t "user.account.update"`
this is the test that is failing with the new validation.
This change is unnecessary.
This should be `self.result_handler.fixit_file`
This map was already public.
What does the trailing `?` do?
Nit: I think we can remove this line.
I think this is a bit out of scope for this PR, but this is a public API and this property will have to be added to the ref file.
This doesn't seem to be used.
This file is not part of the library we're shipping.
Is this a debug statement? If so, I'd suggest using `DBG` instead.
Could you please revert all these changes?
Is the default empty string correct?
This is not the right file to throw the exception. This is a method that is called from multiple places. The exception should be thrown from the caller.
I think this is the wrong URL.
This error message seems misleading. I think it should be something like "CallTarget state ByRef enabled: "
This was the best way to suppress the error without changing the logging configuration of the app.
I'm not sure how I feel about this. I'm inclined to leave it because it's a helpful indicator that this file is not run as a script, but I think it's also a little annoying.
Can you use `SystemPropertiesUtil` for this?
`leafDefaultFirstPingInterval` is a constant, but `leafFirstPingInterval` is a variable. I think we should be consistent.
This should be `savestream = self.local.add_tarball(name, filename, uplink.config.cache);`
Does this mean that we can't read the history of a bucket that we don't have write permissions on? I think that's a problem.
I think you can remove this import now.
Is this import required?
I don't think we need to split here. We should just take the first one.
@spooktheducks I believe this is the reason for the "router-expose" tag.
This field should be removed from the spec.
This is the only change in this PR, the rest is just generated code.
This is the fix for the memory leak.
Can we make this `rowGroupsStartRowPos.get(nextRowGroup)`?
I'm going to need to rename this.
I don't think this is needed
I think this is safe to ignore, but we should probably add a TODO to remove it.
I'm not sure why this is optional? I'd expect it to be required.
please replace `!!!` with empty string
Can you please revert the changes to these files?
Why are you removing the check for `FormatIsMultiplane`?
This is not correct. We should not be registering an empty string.
I don't think this is the right person to update the copyright here.
Can we use a local variable instead of a global?
This is wrong. The method should return an empty list.
I think you want to check that the st_mode is not S_IFREG
This is not related to the PR but I noticed it while working on this PR. I think it's better to use the `@ConfigTitleSection` annotation to define the `zalcanoTitle` field and then just use `@ConfigItem` to define the `text` field.
I think we should rename this to `retriesRemaining`.
Maybe add a note that the filters are applied to the targets given, not the targets returned by the query command?
Do we need to do anything to ensure that this gets added to the manifest when we start generating the manifest from the builder?
Is this still needed?
I would rename this to `DeleteRuleViolationFix`
Why is this test case changed?
I would prefer to see this as a `boolean` field, so that we can easily see at a glance whether the circuit breaker is enabled or not.
Should this be a different error?
Is this a breaking change?
This should be `string $temporaryFilename = null`
Why the change here?
Why we ignore the error here?
Do we need this?
I'm not sure we need to autoload this, it's only used in the spec.
Line is too long. [96/80]
Shouldn't we also remove the call to `ticks()` here?
why did you change this?
Why not just do this via a field in the `Config` struct?
I think we should try to fix the bug rather than working around it.
I think we should keep the `Require` checks in the `public` methods to make sure that they're called in the right way.
This is a bad idea, the list should be initialized in the constructor, and then set to null in `onPostExecute`.
this is the only place where the default ismaster is used.
It's better to use `c.c.Get()` here.
I think we should keep the term `identity` here.
Why is this change necessary?
I'm not sure I like the flag name. I'm thinking more along the lines of `--hydrated-rpms` or `--hydrated-rpm`
Is it possible to have multiple flows for the same key?
This looks like a bug, the function signature has changed, the old signature required a boolean, and the new one does not.
I think you can remove this import as well.
I'm not sure about adding this header. We don't have any user facing service that needs it.
Could you revert this change? It doesn't really add anything.
What if we added a default value of `Time.current` to the `published_at` column in the schema.rb file so that the column is created with the default value?
Please add a migration check for this column too
I don't like this. I think it would be better to have a `type` for the reason the journal is paused. This way you could have `TLFJournalPausedFromSignal` and `TLFJournalPausedFromConflict`
The `RetrieveCommand` should be a `Command` (i.e. `*exec.Cmd`), not a `string`.
This line is the only change that introduces the behavior change.
I think we should keep these enabled.
I don't understand why you've changed the struct to readonly. It's not clear to me what it adds.
Why is this needed?
If we are not going to cleanup, we can remove the `cleanupTimer` and `cleanupTimer.C`
I think it is better to have a different interface, e.g. `org.apache.gobblin.rest.api.SqlQueryRunner`
Please remove this file
This is not a status function, please rename it to Metrics()
Could we add a commit message to say that this is the default for new sites?
This is the only interface I could think of that is used by both the node and the server. I'm not sure if it's the best one.
Why is this class needed?
Is this something we should do? I thought the key was always set on the rememberMeServices
I think this is the right thing to do, but we should make sure that we don't break the rest of the test suite by doing this.
I think you need to add a check here that ip6 is actually a Net6 object
This is a breaking change.
I think it would be better to use a boolean for this.
I don't think this is needed. The `PricingGroup` is already a part of the `Pricing` entity and can be retrieved from there.
I think you should change this to `UserPreferences.PREF_UPDATE_TYPE`
Should we have a `Boolmsg` type in `libbeat/beat`?
The `t` variable is declared in the same function as the `wg` variable.
I think this should be a `maxSegmentsPerCell` and `maxSynapsesPerSegment` instead of `maxSegmentsPerCell` and `maxSynapsesPerSegment`
Maybe it is a good idea to set a default value for `WriteDeadline` in the config struct?
`pd.Series` is not a good return type. It is a generic type, and we want a specific type. The return type should be `pandas.core.series.Series`.
nit: I think `isAriaRange` would be better named `isAriaRangeElement`.
this method should be private.
I believe this change is not necessary.
is this info level or debug?
nit: this is not a group, so `flatteningGroup` should be `flatteningConfig`
why removing the typehint?
This is the same log message as the outbound case.
Is there a way to remove the hardcoded `(i+1).ToString()`?
`aws_stack.lambda_function_arn` will already include the qualifier, so this function is not needed.
The idea is to use the `ephemeralDenyList` to prevent a user from setting a spec with a value that is not supported by Osd. The `ephemeralDenyList` is updated every time a new feature is added to Osd.
Why is this needed?
This file should be removed.
can we have a test for this?
I think we need to return something here, otherwise the `opt` is not added to the `optikcontainer`.
We can use `import { map } from 'lodash'` here, since the `lodash` package is installed as a dev dependency.
This should be `NULL`
Why is this removed?
why not `allocationUnits := "byte"`
This is a header, so it doesn't have a base fee.
I think this can be simplified to `version >= ('3', '2')`
Do we need this interface? It seems like we could just pass around the `Stack` struct itself.
I'm not sure this is true, we may want to keep this set to false as it will make the page load slower for our users
I would prefer to see this as `QVariant.Type.UInt32` (or `UInt32` for consistency with the rest of the codebase).
`payload.length` is not a valid length if `payload` is not a Buffer.
I think it would be better to have a separate command for auto-fixes, and not have this as a flag in the `check` command.
why is this removed?
I think this should be `finer`.
This is the change that breaks the tests, right? I can see that the `email` attribute is being set to `nil` when we instantiate the `Guest` model, so I think we need to set that to something, e.g. `Guest.new(email: 'test@example.com')`.
This is a test file, right? If so, I don't think this should be changed.
nit: remove the spaces around the `=`.
nit: I would prefer if you could keep the imports as they were before. It is ok to use wildcards, but please do not use `*` imports.
This is the only change that is specific to the new fee schedule.
is this a typo?
I think this could be a regular expression that is shared by all the classes that need it
why change the func name?
why is this needed?
I think this should be "is not supported on this target"
I think this is the right change, but why is it needed?
I don't think we need to add helpers here. This is a mock, so it shouldn't call any methods that need to be mocked.
This is not a good error message. You should always explain what the user should do to fix the problem.
I think we should also check that the bucket and object names are valid S3 bucket and object names.
these 3 should be put into a separate table in `teleport.cpp`
This is a little scary. `Record` is a generic, so this is effectively a `{ [name: string]: T}`, where `T` is whatever the type of `opts.metaFields` is. We don't know what that is, because we pass `opts.metaFields` to `op
This is not needed
I think we should make this `--pygment`
This is a bit hacky. What is the reasoning behind this?
Is this just a string? Or is it a `time.Time`?
It's not a protocol, it's just a simple message exchange.
I don't think we need to disable these.
I think this import should be removed.
This will cause all the DDEV services to use the DDEV plugin. Do we want that?
I'm not sure this is what we want here. If we're going to redirect stdin, we probably want to set tty to false. Otherwise, if we're going to keep stdin open, we probably want to set tty to true.
There is a typo in the variable name.
You can remove this change.
This is a bit weird, but `messages.delete_singular` is not a string, it's a function. So we can't just interpolate it.
We have to keep these externs, otherwise the linker will complain about undefined symbols.
Line is too long. [81/80]
This function is only called in `TestKBFSOps`, so we can just inline it there.
I think this is a mistake.
I think we can move this to the `BlockChain` struct and remove the `BlockChainPool` struct.
Shouldn't this be `docker_labels`?
I think we should add a `Debug.Assert` here to ensure that the slot is actually a `RuntimeContextSlot<T>`.
I think it's better to remove `ENGINE_HIVE_ENABLED_HIVE_CONF` and use `ENGINE_HIVE_ENABLED` everywhere
Why not use a `Pattern` class instead of having two regexes?
I think we can just use `device = next(iter(torch.cuda.devices))` here, as this is what we do in other places.
Can we use `0x50` and `0x60` for HistogramWithBuckets and HistogramWithMinMax? They seem more logical.
The `isTest` is a little confusing to me here. It seems like we should just be passing `c.state.Config.Remote.VerifyOutputs` here.
Can we make this a parameter to the function?
`req.get_if_not_exists()` is a bool, so I don't think you can use `req.get_if_not_exists()` directly.
Is this really a `SolvingDriver`?
I'm not sure if this is correct. The store is still called `core/widgets` and the tests are still in `src/core/widgets`. I think it's fine to leave it as is.
I think this needs to be `if (!options.headers &&!options.body)`
I think we should import the module here and call `start` on the object.
Why is this import here?
why change from 3 to 2 here?
I think this should be in the `onCreate` of the `SalesforceSDKManager` class itself, so that it's called automatically for all SDK-based apps.
Shouldn't this be a constant?
why did you delete this line?
This is a bit confusing. What is `fileIDs`? The `successful` files? Or all the files?
This is not a problem that needs fixing.
`1.x` should be `2.0`
I think it would be better to use `ctx.Repo` here.
This is a typo.
I don't think this should be a subscriber, it should be a service.
This was moved to `compare_datasets`
`v1.Service` is not a valid type reference.
This should be `self.class`
This is a problem. The `from` parameter is passed to the `back` list, but the `element` is cast to `Character` before being passed to the `back` list. The `from` parameter should be cast to `Character` as well.
I can't find where this is used.
I don't think you need this line, since the Descriptors3D is already in mods below.
Why is this needed?
I think the name file removal should be done in the `if err!= nil` block below.
We should probably add some assert to make sure that `stackFrame.GetMethod()` is not null.
@monfresh I had to change this to use `additional_pkgs` because the `UNIX_PACKAGES` and `SLES_PACKAGES` arrays are initialized at the class level and are immutable.
why this change? it seems to be a breaking change.
I would keep the argument name unchanged to avoid confusion.
This should be in the `upstreamca` package
how about `threshold`?
This test project is empty, so it should be deleted.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This is the only test that is affected by the change.
I think we should be able to remove the `Appending` codec suppression here now.
We should be able to revert this file as well.
The `proj.h` header file should have a `#define PROJ_S2 0` or something.
Shouldn't this be `targetsForLevel`?
I think this could be simplified to just `return baseDir.delete();`
nit: import order
I don't think this method is needed. You can just assign DialogResult in the relevant places.
I think we can just use `ctx` directly here.
I'm not sure if we should add this to LocationProvider. What's the purpose of this method?
Why are we adding this?
This should be the same as in the `rpm` package, which is `/etc/rpm`.
`alias` is unnecessary here
We should remove this now.
This line is a bit confusing to me.
I think this is a good change. Can you please add a note to the `@since 10.2`?
Why remove this?
Does this need to be added to the ref?
I'm a bit confused by this, shouldn't this be called on up event?
This is a bit of a nitpick, but I would have named this `current_min_count`.
Should we be comparing the buffers?
This is not needed.
this is a bit confusing. The ZMSImplFactory is not a factory, but a static instance. Can we rename it to ZMSInstance?
I'm wondering if we should have a `Version` property here as well. That would be a string property, but the value of it could be derived from the `PlatformDetection.OSVersion` property.
I think we should use `TableColumn.physical` instead of `TableColumn.of` for all these tests.
Can you explain why you changed this?
Can you add spaces in the quotes for these strings?
We should use `if` here to only set this if we are using a playbook.
nit: could you put the last two arguments on the previous line, aligned with the previous argument?
I'm not sure if we should have a public constructor that takes no parameters. We could make the parameter optional and use `null` to indicate the default initializer.
I don't think this is needed.
I think we should have the same method signature for the new and old APIs, so we can use the new API in the new code and the old API in the old code.
This is a great change, but I think this should be removed before merging.
This is the only line of change. The rest are just formatting.
I think we should add a warning that says something like "By submitting this form, you are sending a test request that will not impact your proposal score. This is not a submission of your proposal."
I think we can just return here.
this is not good, tmp should be in /tmp or a tmpfs.
We should be returning an error here if the input writer close fails.
Can we do this in the `import` above?
It seems to me like this is the only place we use `MetadataTableUtils`? If that's the case, I think we should just inline the method here.
This is a little confusing. It's a field, not a field type.
Can you move this to line 17?
This is not the Saudi flag but the Bahrain flag.
This is a good example of why it would be nice to be able to use the standard directly.
The copyright year is not 2014, but 2013.
I don't understand why we need to use a template to get the UpgradeResult. Can't we just use the Runtask directly?
Is it possible to fix this in the parent class?
This change doesn't seem to be necessary?
I'm not sure what happened here, but I had to move this line up to get the tests to pass.
This is wrong. It should return the base peer as the closest peer.
Is this still used anywhere?
I think this should be `from. import *` instead, right?
Why the change from `Tag` to `Selector`?
@strib I think the code here is right. The `default` case will return the error if it is not `EOF`.
You should modify the existing item.
This should be a separate PR, but I'd recommend removing the `multipart` field from `MultipartContent`. It's not used anywhere and I think it's a bad idea to have a private field that differs from the public field.
This is the only change that's not strictly related to the PR. It's a cleanup I did while working on this.
This is a bit confusing. Why is it a problem that the clientSessionState is not compatible with the TLS struct?
I think you should check if the current media is in the queue or not before doing this.
I think this is supposed to be `reject(err, this)`
This is not correct. You are assuming that read() returns sizeof(count) when it succeeds, but this is not the case. You need to use read() to read the actual number of bytes read, and then check that it's equal to sizeof(count).
This should be `os.path.isfile`
I am not sure about this, but I think we should avoid to have 2 options for the same thing (here cookiecutter template and init scenario).
I think this is a bug fix. The order of the args mattered when I tried to run this locally.
I think the message is a little confusing. I think I would just say something like "Value formal parameters not yet supported. See note above."
@kargakis is there a way to avoid this?
I think the `config` import is not needed here.
I think you should add a comma after `obj` here.
I don't see this used anywhere.
I wonder why these are different in the test and in the actual code.
You should also unset the plugins array entry here.
I think you can remove this.
I think we need to set `IsHandleCreated = false` in `Dispose(bool disposing)` as well.
I'm not sure if this is the best approach, but it does seem like the right thing to do. I'll let @bparees and @deads2k weigh in.
nit: remove these extra newlines
I think this is not a good idea. We should keep the fallback to master as it is now. If we want to use the primary, we should configure it in the config.
This is a change in behavior, right?
This is to make the `install_api_server` test more resilient to failures on startup.
this is the same as the other test. Can we just delete this?
I think it is better to put it in `bokeh.tools`
this is a good example of why we shouldn't be using the `eMS.Labels` and `rMS.Labels` variables.
should we define a constant for this?
I think it would be better to just call `breakpoint` `breakpoint` and not `breakpoint`...
This should be `strings.HasPrefix(refStr, "refs/")`
Can we make this a list of string, rather than list of object?
This should be moved to `processProps`
`attachStdin` seems like a bad name. The input is coming from the command line, so it's not stdin.
@jridgewell FYI I had to make this change to pass the test case. It doesn't seem to be an issue in the real code.
Should we also set the `Content-Type` header?
This is not the same as what we do for the `disk` command, but it's probably correct for this case.
I wonder if we should do this in the constructor instead of a static initializer?
I'm not sure if this is the right way to do this, but it works
Is there a reason why you don't want to use the `--network` argument here?
@QilongTang can you please double check this change?
I think this is the only change that actually fixes the bug.
Why is this TODO?
Why do you need this check? `scale_factor` is a `double` and will be initialized with the default value `1.0`.
`shape` -> `size`
Use the new Ruby 1.9 hash syntax.
This could be renamed to `FrameworkUser`?
is this api change compatible?
Why is this public?
I think this was a typo
This method is not used in the current implementation.
Layout/ExtraSpacing: Unnecessary spacing detected.<br>Layout/SpaceBeforeBlockBraces: Space missing to the left of {.<br>Layout/SpaceInsideBlockBraces: Space between { and | missing.<br>Layout/SpaceInsideBlockBraces: Space missing inside }.
This should be `print("WARNING: INSECURE CONNECTION TO CATALOG. Use the --allow-insecure-catalog-access flag to allow this.")`
Shouldn't we move this to the top of the class?
This is a bit of a hack. I think I'd rather put the `else` clause on the next line.
This is also wrong.
Why did we change the method?
This is a public API that should be used by other projects.
I'm not sure if it is a good idea to expose the internal count of the pipes here.
Unused class. We need to remove it.
This test was wrong, it was not finding the right error.
I don't think this is a good idea. This will show the subject on the ActionBar regardless of the current display mode.
I think you can use the iterator directly here, no need to range loop over the vector
I'm not sure if this is correct, but it's what the server expects.
This is a breaking change, but I think it is fine to make it.
Line is too long. [91/80]
I think we should make this `minimumUmask = 0027`
It's not necessary to check if filter is empty.
Why is this changing?
We should be returning `null` here, instead of `wp_json_encode( $allowed )`
This should probably be `cert-manager/cmd/ctl/pkg/install`
please change to: "PAA only supports "with_nms=True" now. Please use another head if you want to use test-time augmentation."
I don't think it is possible to have `noteIds` be null. It should be an array with at least one item in it.
I'd prefer to have this in `pkg/flux/vector/vector.go`
This is a public function, I think it should be renamed to `generateResultSMARTSAndQueryMol`.
I think this is the only change necessary.
`127.0.0.1` and `127.1.1.1` are both valid IPv4 loopback addresses. Should we check for `127.0.0.1` and `127.0.0.0`?
@franckc I think we should be importing these files directly as well.
Why was this skipped?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Shouldn't this be `unless pending || RSpec.configuration.dry_run`?
I think this is not needed. You can just use `std::max` and `std::min`.
i'm not sure i agree with this change. The logic is: - if we are walking and the listWalkDir is empty, stop the walk. - if we are not walking and the listWalkDir is empty, stop the walk. So i don't see why this change is needed.
This test should be in `test_chemical_reaction.cpp`
this is wrong, it is not a viper-cobra, it is a bee
This is a bit ugly, but I guess that's the only way to do it.
nit: could you remove the `klog` imports from `pkg/apiserver/server.go` and `pkg/apiserver/server_test.go` as well?
I think this should be `this.getClass().getSimpleName()`
This should be AWS SDK for Ruby (v2).
I think this should be an `[]string` as well, to allow multiple parameters to be passed in.
I think this is the main fix. The rest is just to make sure that the test for this case passes.
I think it would be better to have a `InMem` option that defaults to `true` and `DisableInMem` that defaults to `false`.
This one is a bit odd, because it's not really a deploy, but a notification.
The `MetricsConfig.forTable()` method will always return a new object, so this is not a good candidate for `fromProperties()`.
I think it's better to import the constant at the top of the file, and then use it in the function definition.
I think we should use the ETag header here.
should this be removed?
I think you can just use `list` here.
nit: sort this
Can we add a default value for these to empty strings?
dirty block cache is not needed for test
nit: I think it would be better to keep this as a void method.
I think this is better, but we could also use a smart pointer.
I think this is a good change but could you please also add the same to `setListMethodFields` in `MethodViewBuilder.java`?
Shouldn't this be a warning?
This is the same as the Windows code. I think it should be moved to a shared file.
You can remove this line.
Should we also set `SourceImage` to the image link here?
Why is this necessary?
can we put this in a `welcome_mailer_spec.rb` and make sure it gets sent?
What happens if the user selects all columns and there are more than 1 row?
We should also add a benchmark for plaintext absolute path.
This is the actual fix for #1410.
nit: remove the extra line here.
I think we should use `@wordpress/element` for `Fragment` as well.
This test is no longer relevant, but I left it as-is to preserve the test coverage
I would use `for (int i = CONST_SLOT_FIRST; i <= CONST_SLOT_LAST; ++i)` instead of `for (slots_t i : slots)`
This import should be removed.
I'm not sure I follow here. The idea is to check if the error is `nil` or not, and then check if the instance is `nil` or not. If both are `nil`, then we have a problem. If both are not `nil`, then we have a pro
Can we have a better justification?
This is the only place where we disable the binding of a base class. The reason is that the base class is a generic type and we need to bind it to a dynamic type.
I don't think we need to keep this.
I'd prefer to have a function for this, to avoid a bug where someone copies the content of `config->http_proxy` to a buffer, and then tries to use it without checking that it is NULL.
I would say that the name of the method is too generic. I would rename it to `printLastApiTokenResponse` or something like that.
I think we should use a proper type here, `state` is too vague.
Why did you remove this?
I think we should use `context.Context` here.
I think this was a bug in the previous version.
I'm curious if this is something we could/should change in a follow-up PR. It seems like the whole point of this interface is to allow the host to do whatever it wants to perform the startup, but this method seems like it's too tightly coupled to the `DynamoModel`.
I think we should not import the logo in the header file.
I think we can keep this test, but instead of using `input`, use `textarea` which has a `spellcheck` attribute.
Why do we need to add the size of the `wordHashes` to the total words count?
This is wrong. `TIME` is a type that represents time with no precision.
Is the `Stream` type no longer valid?
@liggitt this is the only change that's not just a rename. This is the only place where we need to use the "ACNP" indexers, since this is the only place where we are actually using the ClusterGroup indexers.
I think you can remove this one.
This is not a good way to do this. The callback is called in the main thread, but the lambda is queued on the event queue. This means the lambda will be run on the event thread, which will raise an exception. Instead, you should just call the lambda directly, then put the setting o
This should be `... and returns ECS tasks that are running by a service`
this import is still used
This is the same as `or`. I'm not sure why we would want to change it.
The group size is arbitrary, but it should be at least 1, and it should be consistent across all invocations of the pipeline.
I think we should be able to avoid this. If the test is failing without this then there is a problem with the code that is not related to this change.
This is a bit of a code smell. I think the best way to do this is to just make a copy of `qr` and append that.
is this going to be called in a thread pool? If so, you need to wrap the `parseResponse` call in a `catch (Throwable t) { propagateIfFatal(t); }` block.
I think this should be `app-asset-url` instead of hardcoding `/favicon.ico`
nit: revert this change.
`KeyStore` is a little confusing because it's not the same as the `KeyStore` struct in `src/keystore`
I think we should drop the `fallthrough` here and just `break` out of the switch.
I think this will be more readable if you invert the if/else, so the default case is the one that doesn't use `@options`
The interface name should be changed as well.
I think this should be `application/json` like the other one.
`import *` is bad practice
I'm not sure this is the right way to go. This is just a way to get the template to load the config from the correct place.
nit: can we avoid the concatenation here?
Why do we need to add tabAccessibilityIdentifier to the public interface?
I think this can be simplified to `type = new ConnectionType((long) allParameters.get("type"));`
I guess this is a leftover?
I think we should leave the attribute on, but set the value to `Skip` so that it doesn't appear in the results.
Is this type used anywhere?
Shouldn't we pass in the factory and not the instance?
Why is this `chan struct{}` and not `chan bool`?
Why not `model.getSymbolTable().getInterfaces()`?
This doesn't seem right. The SP should not be used as a random SP if it has not learned anything yet. This would lead to very poor results.
why not use `action.ConvertFromActionPb` here?
Can you add a test for this?
nit: `isListRole` can be a constant
(style) do not initialise globals to 0
I'm not sure this is the right thing to do. This means that any test that uses this will require that the user has the environment variable set.
Why is it nullable?
This is a test file that is used to test the `importpath` package.
@kohsuke: Should we use the same name here as well?
Why did you change this?
I think this should be `public static byte[] ToDbKey(this Keccak key) => key.ToBigEndianByteArrayWithoutLeadingZeros();`
I think it's better to use `instanceof` instead of `getClass()` for this check.
I think it's better to use `ConfigSetParams.CLEANUP` instead of `cleanup`.
I think this is incorrect. The limit should be on the transfered data, not the pending data.
This file should be removed from the PR.
I think this should be a `TypeError` instead of `ValueError`.
why not use the creator key?
I think this was a typo
Should this be `:type => :array`?
Why is the exception removed?
should we make these private?
batchSize is still used in some places.
This should be `from pants.util.contextutil import pushd`
I think you mean `has_active_subscription?`
This is not correct. `getSourceDataArray()` is the correct function to call. The reason for this is that `getSourceData()` is supposed to return a reference to the source data, and `getSourceDataArray()` is supposed to return a copy of the source data. The reason for this is tha
I think this should be `Logger.Error` instead of `InternalLogger.Error`.
I think we need to add a `conflicts` or `mutually exclusive` check here to make sure that `vscode` is only selected if `inline` is `False`.
This should be a period at the end.
The code in this file is a bit odd. We initialize the main frame here, but we don't show it until we call `main()` later in this file. I'm not sure if that is a problem, but I think it would be cleaner if we did the wx initialization (including setting the la
I think it would be better to print the error message here and return FLB_FAIL. Otherwise, the user would think that retrying would fix the problem.
Should we call this `PREFECT_ELT_KEY_PREFIX`?
This is a bit odd. Why do we have a `gocontext.Context` in this package?
This is a typo, it's not PAP.
What is this line doing?
Please keep the Apache License header, and add the Huawei License header after it.
This should have a return value, right?
This error message was not helpful.
Do we need this?
I think we should have a test that checks that this doesn't break.
You should probably keep the `else` here, as this is still used on API 16.
Can we use `user.Repos` instead of `repo.ListUserRepos`?
@stuartwdouglas I'm not sure if this is the best place for this.
We don't want to change this message because this is a bug that needs to be fixed. We need to make sure that `anonymous` is allowed.
Notch height is added in the previous block, so we need to subtract it here.
I think this could use a `@faker.version`
I wonder if we should have a `public Func<IFeatureCollection, object> PrepareRequest { get; set; }` instead. This would allow people to do more complex setup of the feature collection.
This is the only change that really matters. We're moving the user assignment to the role.
I think this is fine, but I would have expected it to be in the `debug` category.
can you make this an enum?
I think this should be a private field of the QueryConverter.
Why is this not done in `setConfigPassword`?
I think we should remove the `status` label.
I think we can use the same logic here as in `switch_to_window.js` and `switch_to_window_by_title.js`.
This should be `MessageDialog.Show(this, message, Resources.SkylineWindow_FindIrtDatabase_The_database_file_specified_could_not_be_opened);`
I think we should add this to the `getDNS` function as well
We should change `EvalHook` to `EvaluationHook` in `mmcv.runner` to make it consistent with the name `DistEvalHook`.
This import should be below the `net/http` import, since it's a subpackage.
Do we need to do this check? I think we should be able to support multiple paths, we just haven't implemented it yet.
We should use the enum here as well
@seibertp should we also move the `txt` and `vPin` arrays?
This is no longer needed, as the menu item is not used anymore.
@chirimoya Shouldn't this mixin be applied to the fontawesome5 package instead?
This flag is not used in this file.
I think we should do this in a way that we don't need to change the existing code. Instead, we can add a new option to `calculateObjectSize` for the user to specify what options they want.
I think you should add this to the `media` resource, not the `storage` section.
I'm not sure why this was a pointer before, but now that we're not using it, I don't think we should be passing it in.
@rhrhn I think you can use `bundle.getString(DB_NAME, DBOpenHelper.DEFAULT_DB_NAME)` directly.
I would suggest calling this `--stress-test SECONDS` or `--stress-test DURATION` and changing the description to "Repeatedly run randomly selected examples for DURATION seconds." (also, since it's an integer, you should use `Integer` in the type).
If this is the only change to this class, then I would suggest renaming it to `TrustedIssuerJwtAuthenticationManagerResolver` to be more specific.
It seems like this function is no longer used?
This is unnecessary, since the caller already checked that `input` is a `StringValue`.
this test is now a duplicate of the one below
why is this changing?
Can you add a `.` to the end of the sentence please?
I think it would be better to move this to the `Collection` class
I think this should be `if os.Getuid()!= 0 {`
I think the name `COLOCATED_WITH` is a little bit misleading. It is not the name of the flag, but the name of the reverse-link.
Can you make it `!empty()` instead of `isset()`?
It's a bit confusing that we have `purchases` and `purchases/:lookup` routes, can we come up with a better name?
I think this is a duplicate of the `S3Stubber` import.
This is a breaking change, since `setParentNode` is called in `NodeList(N)` and `NodeList(Collection<N>)`.
why is the name `OOMwaitingJobMeter`?
If the test didn't run, we don't have any metadata. So we return an empty `BuildMetadata`. This should be fine, because the caller will check `err` and bail out if it's non-nil.
I think this is going to be a bit tricky. The original line was correct, as `transfered` is a verb. It's a past participle, which is used to form the perfect tense (in English). In English, `transferred` is the past participle form of the v
We can't have these interfaces in the API package.
Why the change in the names?
Does this mean that the `gasPrice` will be displayed in `IOTX` even if the `action.Core.GasPrice` is in `ether`?
I think this is not needed.
why not make this class final?
@pinzart99 I don't see the code where we set archiveFile.
nit: space before the opening parenthesis
I don't see where the `aria-current` is used.
Why are we splitting by `?`?
This is a breaking change. I don't think it's worth it, but I'm fine with merging it if you want to.
Why do we need these functions?
I think this should be `protected`
I think this should be removed.
I think it would be a bit cleaner to pass the `startTime` to `Step`, and then call `recordStepTime()` from within `run()`.
This is a bit hacky. I think it would be better to add a return statement to the plan that we know will always be executed.
why is this needed?
This is not really a test, but just a check that fillna works.
Should we use `PresentedError` or `PresentedWithError` to be more clear?
why you need this check?
I removed `wait` since we don't use it.
nit: `than` -> `than`
This warning is not needed
I think you can delete this line, too.
why the change?
This is a bit dangerous. We could have multiple threads writing to the same file.
can we make the name more explicit? i.e. `autoServed`?
@philbucher this test was not working because the data is not available anymore.
I'm not sure this is needed. The internalNetworkPolicyMutex.Lock() is called in the following line.
Should we add a similar check to `changeStream.cursor`?
This is a bit concerning. I assume this was the only way to get the root span?
nit: `err` is a better name than `threw`
What is the reason for this change?
can we just add these to the `./helpers` file?
I'm not sure if I like this change.
This should be 2.6
This is the only change that breaks backward compatibility. I don't think we should change this.
I would prefer to have it in `scapy.utils`
we have this for app but not for ui?
@rhatdan I don't think this is a good change. The exact match is a very important piece of information that we're hiding now.
This is not right. This would mean that if the cluster is not paused, but the linked cluster is, we would not reconcile the cluster. This would mean that we would never reconcile the cluster.
I think this is wrong. We have to return the array with the filename, alt and path keys.
shouldn't the default value be `false`?
I know you did this in the past, but this should be `t('appointments.todayTitle', { currentUser: this.currentUser })`
@ramr PTAL. I don't see any new fields in the struct.
This is the only one I'm not sure about.
why is this needed?
It would be good to add a `nil()` method to `Iterable` so that this can be a one-liner.
I don't think this is a good idea to rename it to plural.
Why this change?
@Kitware/VTK @bryevdv @marclouvre @cgcgcg @dvlauer @scheibelp
I think we should be able to remove the `kind => given_or_derived` here, since this is the only place where it's used.
Shouldn't this be `int maxQueryLength = 0;`?
This array should be initialized with the same size as `fields` array, no?
I think we can remove this.
Not sure why you removed the `side_effect=MagicMock()` here.
This should be changed to `if (type == Type::Unknown)`
Wouldn't it be better to return `Collections.emptyPredicate()`?
Why is this necessary?
What's the difference between `destory` and `destroy`?
What is the difference between `if... or...` and `if... else...`?
I don't see this `OkDialog` call in the test code, or the `OkDialog` method call in the test code. Is it in the test code somewhere, just not here?
`matching deleted AWSMachine` -> `matching AWSMachine`?
We can import this after `from flask import current_app`
I think this is a little less helpful than the old error message, but I guess it's a little more accurate?
this is the only change in this PR
If the notification is being fired by a UIAElement that doesn't connect to the desktop, should we instead be checking if the UIAElement is not None?
This was needed because the order of the activeArray is not guaranteed.
I think this is not necessary.
This is a bit of a nit, but I think we should be consistent about the casing of the word `insight` in this PR.
I think the hip compiler is called `hipcc` or `hip+cc` depending on the version.
Can we use `LOGGER` instead of `log`?
This is a change in behavior. I think it's fine, but we should be aware of it.
`getBaseFeePerGas` is a bit misleading. It would be better to call it `getBaseFeePerUnitGas` or something similar.
This is a bit of a hack, but I couldn't find a better way to do this.
This is just a reminder for me, we need to add the same method to the `chainlink/core/services/keystore/keystore.go`
What's the rationale for this change?
This is a bit weird. Why not just make the `LatLonShapePointQuery` take a `Point`?
Should we do a null check on `serviceNameMappings`?
I think this is the only change that's not backward compatible.
Does this panic really make sense?
This is not related to the PR, but I think this should be `md-icon` instead of `material-icons`
I think we should not do this.
> 1.3 [](start = 41, length = 3) This is too high?
What happens if we don't have the right to change the root dir? Should we keep going?
This is a `default` method, so it's optional. You don't have to implement it.
This test was deleted because it was failing. The problem is that the `completionview` object is created in the `test_completion_item_focus` function above.
Why are these changed?
The name of the expectation should be changed too.
This is not needed.
It looks like `api_sig` is no longer used?
I'm not sure if this is the best way to get the version of `nixpkgs` we're using. It looks like the output is just the version of the nix package manager, which is probably fine.
What is the `data` used for?
It's still possible to get here with targetDataType being null.
I think we should make this function public.
I'm not sure if this is the right solution. The problem is that the package hash is not available when pushing a new package. The package hash is only available after the package is uploaded. So if you want to push a new package, you have to provide the hash of the package you're pushi
nit: could you please wrap this to 120 chars?
This change is not needed.
We should probably add `mlflow` to `packages` above.
I think it's better to have separate scopes for each type.
I think this is a good idea, but we should also keep the old behavior as a fallback in case the user does not specify `public: false` in their config.
This change looks wrong, the logic is the same as before.
I would rather change the error message for `JWT_AUTH_INVALID` instead of creating a new one.
This is a bit confusing, it's not clear what the difference is between the namespace being reset to None and to _UNSET_NAMESPACE.
It looks like `dealsGauge` is unused.
Why is this needed?
This is the main change. It's a bit of a hack, but it's the best I could come up with. It's a bit odd that we're checking the dependencies of the target container, but that's what the `steadyStateDependencies` field is for, so it makes sense.
I think it would be better to keep this method as `long getModificationTime(String name) throws IOException` and have the default implementation call the new `fileModified` method.
Is there any way to make this `json` variable final?
This is the only change that needs to be reverted.
Why is this needed?
What does this change achieve?
This test case is for a fatal error.
This is a little odd. What happens if you call `BeforeQuery` multiple times?
I'm not sure if we should be adding a new file to the project for this. I think we can just use the `Tracing` class in the `Common` folder.
This is a breaking change, it might be better to introduce a new type and keep the old one.
I would just call this `sign`
I'm not sure we can get rid of all of these, as they are still being used in the code.
This is a bit odd. How about just dropping the if statement and always calling the function?
This is a bit of a breaking change. I'm not sure how many people are using this method. I would prefer to keep the signature as is.
use the new hash syntax
Is there a reason to use `<0.8.0` rather than `==0.7.0`?
Why the change?
Why is this being removed?
I think we can drop the `redhat_fips` part of the string here.
is this change necessary?
I think we should add a `# TODO: Migrate to `CallbackChecker` in #5553` here.
This is a bit of a hack, but it seems to work.
"less" is not a good word here.
I don't think we should be doing this. The user should be responsible for providing the correct username. If they are not providing it, then we shouldn't be updating it.
The MakeMdID function should be moved into the MD struct.
I'm not sure this should be here. It may cause issues for other providers.
Can we add a test case to cover this?
I think it would be better to just have the `el` list be initialized here.
can you do a `on host, "apt-get install -y puppet-common=#{opts[:version]}-1puppetlabs1 puppet=#{opts[:version]}-1puppetlabs1"` instead?
This is a public API, so please revert this change
I would just remove the `#if` here and use `Environment.GetEnvironmentVariable("DOTNET_TEST_HOSTED")` instead.
This is not required anymore because we don't use SetDefault() anymore.
I think this is a bug. I think it should be `long.MaxValue`.
Please use `aURL.startsWith("data:")`
@bparees - do you have any insight on this?
Shouldn't this be called `DoSomething2` to avoid shadowing?
I think we should use the same logic as `SolrClient` to get the plugin info.
I think this is a mistake, as it removes the padding around the component in the story.
Shouldn't we keep the colon here?
This looks like it would be better in `src/Entity/Item` than in `src/Module/Import/Solr`.
nit: I think we can remove the `build()` call here.
Is `f` used anywhere?
why change this?
I would prefer a more robust parser that will handle leading and trailing whitespace, and that will also be able to parse a longer string such as `"set 1 1 1 1 1"`.
@spooktheducks are these the only valid flags now?
I don't think we should be using `this.plugin.uppy` here, we should be using `this.plugin`
Shouldn't we have a `BackupRepositoryPlugin` class, so we don't have to use the `PluginInfo` class?
I don't think this is needed.
This is not a DROP, it's an error.
I would prefer to have these in the `Common` class.
I think this is a bug that the default is `MUST` when it should be `SHOULD`
This is a bit confusing, can we make it more clear?
I don't think there should be any changes to this file.
I think we can just add this to `dimensions` function itself.
Why not just move the `close()` call into `this.splashWindow.destroy()`.
Do we really want to support int32 and int64?
why do we need to make it virtual?
We can remove this method and the corresponding implementation in `HadoopInputRowParser` as well.
Shouldn't this be `_test3`?
This is a bit confusing, but I think it is correct. We want the count to be included in the _name_ text, but we don't want the count to be included in the _role_ text. So, if the name text is "list with 5 items", the role text
why not just use `checkArgument`?
I'm not sure why you're removing the `Private` parameter.
This is a bad change. It will cause a NPE if a subclass ever instantiates this class.
I think we need to do this check before the `permitted.indexOf(nodeName) === -1` check. If a node has a role, it should be allowed even if it is not in the list of permitted tags.
I'm not sure that this is the right solution. We have a problem that we don't handle the `focused` state at all. That's probably because we haven't seen the issue. It's probably a corner case, but I think that we should fix it properly.
I'm not sure this is the best choice. The `TreeMap` is sorted, so it is not a good fit for `Multimap`.
I think we should make this a `stringSlice` instead. That way you can do `kube-ipvs0,kube-proxy` or whatever.
I think the imports should be sorted alphabetically.
I don't think we need to add this, as we are using Symfony 4.2.
This should be done in a separate command. We can't write the settings file in the middle of a command.
I think this could be `protected` and then we can remove the `AbstractBlockProcessor` constructor.
The `MediaLibrary` class is not part of the `System` namespace.
I think this method can be removed. We are not using it.
This file should be removed.
This line is redundant. It was only used to check if we should remove the queue.
I think we should be using the `sed` command in the `Chef::Util::Sed` module.
I'm not sure about this. If a flow fails, we want to know how many flows have been processed. If we don't count failed flows, then it will appear that the processing is stalling.
I'm surprised this isn't just a string.
why did you change this?
this is not used anywhere.
This will overwrite the previous value, right?
Is this a bug fix?
Does this need to be debug?
Should we be using `__x86__` instead of `X86`?
It seems like this is only called for local spans. Can we move this check into the `adjustTimestamps` method, and only adjust the timestamp if it's a local span?
nit: could you revert this whitespace change?
I think you should be able to just use `Process.waitpid` here, right?
This function is unused.
I'm not sure if it's better to just return here or to continue on with the rest of the function.
Line is too long. [82/80]
This is not a new behaviour.
I think this is the bug. We were returning the error to the caller, which would then return without invoking the pool deletion business logic.
This should be `option.hasAttribute('selected')`.
This should be in a separate PR.
Wouldn't it be better to use the `static::DEFAULT_DOMAIN` constant?
It is also used to keep the metadata of containers managed by the agent regardless of whether "Checkpoint" is set.
Is this supposed to be `DRM_FORMAT_MOD_LINEAR` or `formats[i].modifier`?
I think we should also add the batch size for `s3` and `redshift`.
Is this configurable?
The `count` is not used in this struct anymore, so I removed it.
I would use "timezone aware" here.
why is this null?
@wztdream why we need to make these final?
This should be `assert str(excinfo.value) == "Zero_count Argument cannot exist without count!"`
> vuid [](start = 34, length = 4) I think it's not possible to get here without a vuid, so you can just inline the vuid.
should we be using `Rails.root.join` here?
Why is this necessary?
I'm not sure about this. This is a public function, so it's not supposed to use NOGIL.
Why is the unique_ptr passed by move?
Doesn't this mean that `Object.setPrototypeOf` is always available?
I think we need to keep the pre-flight checks for the `upgrade` command.
If the value is a long, it should be `externalStatusLong`
We should probably just have a `pin-mongos` test suite and a `pin-redis` test suite.
I think we should stick with the default colors here, as they have been chosen carefully.
Shouldn't this be `Log` instead of `Logger`?
This is a good candidate for a small helper method in `CaseInsensitiveMap`
This change is not needed.
This function is not used anywhere.
It's not clear why we need this.
This is probably wrong. We should probably return the bytes object.
what is the purpose of this change?
Line is too long. [83/80]
I think this can be removed.
is this intentional?
This is a change that should be reverted.
I think we should be consistent here and use the `slaves` variable.
@baude Should this be done in the `if err := container.Start(process); err!= nil {` section, as well?
nit: I would prefer to see this method inlined.
This should be logged
This is a bad idea. If you have multiple instances of `wlr_xwayland` in a single process, you'll overwrite the display name of the first one with the last one.
Is this change necessary?
Should we add a note to say that this amount is in cents?
Why do we need to add this again?
This is a case where we're using `#byteslice` for the sake of `#write_nonblock`.
I think we should put this in the `keybase1` package.
Can we do this in a more elegant way?
We no longer need to add `add_facts` as a bolt function call. It's just a normal method call now.
can you use `VolumeID` or `Snapshot` here instead of `VolumeSource`?
I don't think this is necessary. The compiler should be able to handle this.
I think this is not needed.
I think we need to update the ref code for this interface as well
Is this a bug fix?
I would move this line to the `NewTransformer` function.
Can we figure out what's going on here? It seems like it's not a race condition because the test is not marked with `--race`.
Is it possible to have an array of strings? I think this will break that case.
I think we need to be more specific here. What we are looking for is a fragment identifier.
I think we should only log this if `year_count > 0` and `year_offset > 0`
This is a bit of a hack. We should probably clean up this code and make it more consistent with the other fetch commands.
Do we need to synchronize the nuspec file?
This is not needed as we have already added the logic for LongGauge and DoubleGauge.
I think you can use `lua_pushobject(L, swap)` instead of calling `luaA_object_push` twice
why is this here?
Can we use `bool` here?
I think we should remove this, and instead use the `org.apache.solr.common.params.CommonParams` class.
This is not true. If you have a mixed linktype pcap you can't use the `--linktype` option.
This is a bit awkward. I don't know how to make it cleaner.
Can we get rid of these imports?
What's the difference between `ShardKey` and `RoutingKey`?
Is this change necessary?
Could we move this lock into the `kvstore::KVIterator` constructor, and make it a `std::shared_lock`?
This should be a readonly property.
This is not the right place for this. The plugin manager is not available here.
@benglyn @joshmorony I think this is the place to remove the audit results file.
I would use `Kernel.uname` here
I think it's possible for this to happen, if you call `getOpsNoAdd` with an empty folder branch, but that should be a programming error, right?
You don't need to check this anymore, the memory swap will be set only if it's enabled in the kernel.
I think this is the wrong place for this error.
These are removed since they are not used in this PR
I would add a note here that this is not the same as `self.bucket.storage_class`
`equals` and `hashCode` are not used anywhere.
Is this a required setting? If not, I'd rather it be optional.
shouldn't this be `typeof(opts.fee)!== 'undefined' && (opts.fee || opts.feeSat)`?
Does this need to be public?
this was removed because we don't use it in the codebase anymore.
why is this a default?
I don't think we should be using `ln2port` here.
I think the indentation is off here
Rails/SquishBoolean: Use Squish to squash the given boolean operator.
Should this be `nowPlayingPositionSlider.setKeyboardSteps(nowPlayingItem.RunTimeTicks)`?
Use safe navigation (&.) instead of checking if an object exists before calling the method.
I think we can get rid of the `fillFilterWithComponent` function if we do this, right?
Could you also rename the variable `GROUPS_SERVICE_ACCOUNT_KEY_FILE` to `GSUITE_SERVICE_ACCOUNT_KEY_FILE`
I think we should use the defaults here.
This will delete the scratch bucket if it's not in the project.
This one is actually correct, but the other one is not.
Use the new Ruby 1.9 hash syntax.
This file was changed by adding the new using statement, but I don't think it's necessary.
You'll want to keep the number of seconds in here.
Why not use `tracer.GetSpanKind`?
I'm not sure if this is the right timeout to use. I'm thinking we should use the same timeout as the `requestTimeout` above.
I think this is a good idea. But we need to discuss the migration.
This method is only used in the Java language plugin.
I'm not sure if this is the right change to make. This will disallow the creation of a double bond with an arbitrary stereochemistry, which is what we had before.
It seems like this column is not really needed. We can just use the `complete_time` column to determine if the job has all data or not.
Please revert this file
I think we should take the lock around the call to `t.lifecycle.OnStop()` as well.
I don't know if this is the right place to do this, but I think the order is always 1, so I put this here.
@deads2k @spooktheducks should we make a constant for this?
This is a good place to start using `RunUIAsync`
I'm not sure this is needed. This test is in a different project from the tracer, so the tracer will be compiled into a separate assembly, which will be loaded separately.
why move it here?
What is the purpose of this?
Why is this in the `AMP_CONFIG`?
nit: this change is not needed.
This should be `@author Maxime Steinhausser <maxime@steinhausser.name>`
We should not use this to get the policy. We should use the policy from the client.
I'm not sure I understand the problem here. Is this a case of the verifier being a sub-module of the base name? If so, I think we can just put the full name here.
Why is this changed?
can we remove this?
what if there is no gpu?
We can't change this now as it would break backwards compatibility.
Would it be possible to check the version of the shared memory?
this is not used anywhere
I don't think we should be adding this as a step. We should be able to remove it and have the review still work.
It's not clear why these two API's are in the kernel32.dll.
Why not use `c.IsApiToken` here?
I think we need to add a description of what this annotation does to the `pkg/api/types.go` file.
Why does the index need to know about the parser?
I'm not sure why this is needed here, but it's not hurting anything either.
I'd rather not add this dependency unless it's needed for the tests.
I don't think we need this, we can just use `Version`
This is not needed, just use the `c.iam` member var
This is not needed.
this method is no longer used.
This is a public option, so it needs a description.
nit: could we remove the "Solution" portion of the name? It seems redundant.
Should we log here?
Why not just call this `setCpu`?
I think it would be better to move this `block_a.type()` call to `ledger.store.block_exists()` (or wherever it's called), so it's not repeated here and in the wallet code.
What does the `==` do?
Why did you set it to true?
This test is now mocking the `GetConnection` method.
@lancewf This is a change to the test itself, not the test harness.
I don't think we need to change the code here.
This seems like it could be a problem. We don't want to override the user's GOMAXPROCS setting.
Should this be `table.getMetadataTable(MetadataTableType.ENTRIES)`?
This is a bit confusing. It's not just a boolean, it can be a generator too. Maybe just call it `accepted_messages`?
I'm not sure if we need to wait for `attemptTimeout` before trying again. If we do, can we make it a bit shorter?
This is a good candidate for `get_option`
we should use the same value in test_regression_with_custom_objective
What's the purpose of this?
This is an unrelated change?
What is the purpose of the `where T : struct` constraint?
This is the only place where the size of the emitted code is changed. Is there a reason for not doing this in the other places that modify `md->emitted_size`?
This should be `t('messages', 'Credit card')`
Is this change required?
The test now validates the stream is not nil.
I'm not sure about this one. I don't see any `minimize` command in the protocol docs.
Is it possible that the name doesn't contain '.'?
why remove this?
I'm not sure why we have this try/catch here, but I assume it's because we don't want to throw exceptions from the test suite. We should probably remove this try/catch and not have this conditional.
why this change? it's not related to the bug.
Can we add an assert to confirm that the exception_type is set to the custom exception?
Is this a bug fix?
I think you can remove this one, it's not used
I don't think this is the right place for this class. I think it should be in `de.danoeh.antennapod.ui`
This flag defaults to true and is here in case customers need retrocompatibility only
Is this an API change? If so, please update the docs.
Why did you change this line?
isn't this a problem? this will overwrite the existing data, and data_encoding will be always 'hex'
Should this be `platform.SiteRunningLocal`?
I'm not sure this is a good idea to use this value. This value is different in different places in H2O code.
I think we should add a similar `copy` kwarg to `to_pandas` too.
I'm not sure if this is a good idea to change the log level to `FINEST`. This message is not that important and the level `FINEST` is usually used for debugging purposes.
What's the difference between `Error` and `appErr.Error()`?
This is the one place where I would have preferred to keep the original message.
Is this the right import?
Is there a reason to use `__class__` here instead of `cls`?
This should be `from nupic.algorithms.anomaly import AnomalyDetector`, or `from nupic.algorithms import AnomalyDetector`.
This is not a good change
Please remove the `@Deprecated` annotation as well.
This line should be removed.
Is this a temporary hack to get CI passing?
Looks like this is unused.
I would suggest to use a `Map` instead of a `Set` here, so that you can use the key directly as the value.
Can we use the variable name `projectID` instead of `project`?
I'm not sure if this is the best way to do this. But it's the only way I could think of to have the speed label and speed link on the same page.
I'd prefer if this were a pointer to a bool, and you initialized it to nil. Then in New() you assign it to &p, and then in Cancel() you assign it to nil. This way, you don't have to use a mutex.
This should be `?string`
This is the guid of the SarifViewer package, which we'll use in the package load event.
@rhatdan is this still needed?
Please revert this
Is it possible to get more information about the report, like the start time, end time, duration, etc.
I think this should be an error.
What do you mean by "MyActivityProcessor(C).OnEnd is not called"?
Why is this needed?
I think this should be done in a different way. We should use the `is_stub_file` flag to determine if we need to add the `.` or not.
I think we can get rid of this variable and use the `Concurrent::ThreadPoolExecutor.new` directly in the `initialize` method.
I moved this outside of the form because the error messages are not associated with any particular form input, and it was causing issues with the validation display.
this is not a good idea to use the system property as a prefix. this will be changed in the future.
This is a good change, but I think we need to make sure it is applied to all versions of Spark.
This is a breaking change for ldap3. Can we use the version 2.0.1?
Why do we need to append to the global var? Why not just use `cFlags`?
I think this should be called `InSync` and be a bool.
This is a change in behavior, previously we were just returning an error.
I think we can remove this entire method.
nit: I'd recommend using a `const` here.
I think the `String` should be on the next line.
why is this removed?
It would be great if we could move this out of the `DashboardEntityApp` component, since it is not really related to the app. I'd say we should move it to the `App` component.
I think we should be consistent in using `MetricNegativeLogLikelihood` as the name.
This is a bugfix.
should we remove this spec?
Do we need this?
I think you meant "The above logic is further specialized"
I would have put these settings into the `settings` variable, but I guess it's okay like this.
Do we want to return here?
This import is not used.
I don't think this is right. If `this[kIsMaster]` is undefined, then `!!this[kIsMaster]` will be false. So if the server is not in the master list, then we will get a before-handshake error.
I think we should just remove the `height` property on the element and let the browser do the `auto` sizing.
I don't think we should be skipping this error at all.
This should be named `legacy-hold`, not `legacy-holds`
This is a bit strange. It's a one-to-one relationship. Can we use a `belongs_to` instead?
why this change? is this the same as before?
This should be `protected $clones = array();`
nit: since you're making this change, do you mind fixing the indentation here?
I don't think we should translate this, it's a message for developers, not for users.
Why is this needed? It seems like it could just be a `func(string) Policy`?
I think this is a bug. This will cause the next `Tab` to be rendered in the same tab.
Is this needed?
Line is too long. [84/80]
Do we need this?
Line is too long. [101/80]
I'm not sure how this is supposed to work. Why would you check `params[:read_tou]` if `params[:decline]` is true?
I don't think this is correct. We are not importing the context package from the standard library.
Why not `LEFT JOIN`?
Shouldn't this be `objectID`?
It's weird that this is in the `pylint: enable=` block, but not the `pylint: disable=` block.
I think we should just use the full name for the AWS service here. I don't think there's any need to abbreviate.
Can we use the standard of `__azkaban` instead of `___azkaban`?
I think you mean `raise` instead of `raise RuntimeError`.
We should prefix this class with `gsk-` for consistency.
I would suggest to use `require_relative` here, as it is more idiomatic in Ruby.
I'm not sure about this. It's not like we can do anything about it, but it's also not something we can ignore.
This should be a pointer.
I don't know if this is a good idea, but it seems to work.
this is the only thing that could break, but I think it's fine.
This is not thread-safe.
I think this is going to be a common pattern. Maybe we should create a utils module?
I think we should keep the default as `gcc` to not break existing repos.
nit: `using Task = System.Threading.Tasks.Task;` can be removed.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
I would recommend using `skipOSConfig` as the key here. It's not clear why the key is `osconfig_not_supported` and I think it would be more self-explanatory to use `skipOSConfig`
Can we use the existing `ConvertSecondsToTime` function instead of creating a new one?
I think this import is unnecessary.
Is this a hard coded name? If so, I'm not sure if we want to hard code that here.
this is a bit confusing, because it is not really "depending on docker". I would rename this to `RunTestsDependingOnTravisLinux`
This is a good candidate for a macro.
Why change this?
I don't think it's a good idea to introduce a new method here. What's wrong with `isInterface()`?
Why is this added?
Can you add a note that this is used in the import.go and import_v2.go files?
This import is a bit weird.
nit: remove the empty line.
why do we need this?
I'm not sure if this is a good place for this command. The `window` subcommands are about the window itself, not about the actions you can take on it.
I think we should add the `video-status` class to this div as well.
We should also check that `today` is not upcoming when `today` is in the past.
This is the fix. The region count was not being reset to zero, so the code was trying to free the same buffer over and over again.
Can you please add a screen-reader text for the input itself as well?
Use 2 (not 4) spaces for indentation.
This setting is not a system setting. It's a worker setting.
I think you can use `trail.completed?` here
This is a very common idiom. You could define this in the common header, as `namespace eprosima { namespace fastdds { namespace DDS { using ParameterList = eprosima::fastdds::dds::ParameterList; } } }`
the `array` is not necessary here
I don't like this. Why do we need to set chain id here?
This function is used by the BigQuery scanner to find policy violations. It is not the same as `find_policy_violations` in `python/apache_beam/runners/dataflow/transforms/scanners.py`.
@jonathantyng I believe this should be `gitBranch.Insert(0, "b")`
why change it?
This is the only place that actually needs `node-mongodb-native` to be installed.
What's the point of the sentry in this test?
This is not a good solution. This check is not needed at all. The only time this check is needed is when we're doing a merge and we're trying to add the old deployment to the new array. In that case, we should add the old deployment to the new array if it hasn't alr
This is not a good test. It's true that we don't expect `opt_port` to be a function, but that's not what the test is testing.
I'm not sure if we want to make this more strict. I think it would be fine to allow for a 6th field in the cron schedule, but we can worry about that later.
this is not right import order
What's the difference between `/*` and `*`?
Would it make sense to test the `body` in this response?
I think this was a left-over from when I was working on this test.
why remove these?
This could be simplified to `if d.fields.MatchFold(revField)!= nil { return true }` and remove the `if d.m!= nil`
I think you mean "empty"
I think this polyfill is not needed anymore
Is this print statement intentional?
Can you also add the `configFile` argument to the `MPI4PY_Comm` constructor?
I don't think this import is needed
I wonder if this is the right place for this function.
why not use code_set.path?
Shouldn't this be "clientConfig"?
This is not correct. The task.file() is not the same as the location of the input file.
I'm not sure if this is the best place to put this interface.
This is the change that will let us pass the stream to `util.Logger` and `logp.NewLogger`
Should we change the name of this class now that it no longer removes team members?
what's the purpose of this?
This check is done in SyncService.verifyFee
is there a way to check if the cstor CRD exists?
This is a bit confusing, because `v` is a `QueryVisitor` and `visitor` is a `QueryVisitorFactory`
You might want to use `String.Empty` instead of `""`
why do we need this?
Remove the extra newline
Shouldn't these be added to the list of features that get added when using the `TransportConnectionFeature`?
This is to avoid the issue that the inventory table is not dropped even though the test failed.
Why not pass by value?
This is a very specific use-case, but I think it would be nice to have a helper method for it.
Why not `TestFailOver`?
is this a change in behavior?
why is this needed?
Is this change required?
This is the actual fix, it's not needed to return a promise for `dialog.show`
I think the old version is better. Because the cseContext is not a Map<String, Object>.
`len(elems) - short_count` is the number of elements that are not short ones.
this should be `JADE`
I think this should be `cls.supported_data_formats` rather than `DataFormat.supported_data_formats`.
You need to add `return` here to avoid the rest code be executed.
I think we should rename this function. It's not creating a vault role anymore.
I think we can remove this now
I think it would be better to use a `useEffect` hook here, instead of a `useSelect` hook that only returns a boolean value.
this is a BC break. Can you add a note in the changelog?
Prefer single-quoted strings when you don't need string interpolation or special symbols.
`fileUploadResource` should be `fileUploadResource = "/v1/bzz"`
intentional blank line.
It looks like this is only used by the `CompoundFileWriter`, which means this is only used by the `Lucene40` index writer. I don't think we should add this to `AbstractIndexMerger` as it is only used by the `Lucene40` writer. I'd su
This was causing a panic in the validator.
This is a breaking change.
I'm not sure we should import `CubeList` here, since it's only used in one test, and is not needed by the main `test_equalise_cubes` function.
What is the purpose of this change?
Line is too long. [81/80]
@walters, I think we should change this to `is_release_build=yes`
I think you can drop the `colorizer` argument here, since it's only used in the `ExceptionPresenter` and that's already been passed in.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
If you use `except Exception` then you can avoid the try/except statement
I'm not sure if it is a good idea to remove the `:`, but I didn't see any other instance of it in the mib files.
We should be able to use the same dataDir for all the logging.
Why not `throw new RuntimeException`?
shouldn't this be `req.GetXattr() > 0`?
I think this should be `dataManifests` instead of `manifests`.
These are the same as the existing methods above. We should be able to just delete these and use the existing ones.
I think this should be `if ($cartItem->getQuantity() > $pse->getQuantity() && true === ConfigQuery::checkAvailableStock()) {`
why do we need to change this?
Why did you reduce this?
This is a fix for a bug that was introduced by the previous commit.
Can we have a constant for the max retries?
This is a bit weird, we're importing the DTO from `service_discovery` but we're using the interface from `identity`.
I think we should also remove `commandStartExternalEditing` since it is not used anymore.
Is this change related to this PR?
I think we should keep the first message, and only log the exception in the second message.
This one is weird. I'm not sure how this is working.
This is the only change in this PR that's not directly related to the issue. It's not necessarily bad, but I'm not sure why it's here.
I think we can remove the strncmp here, if the topic name is too long, it will be truncated anyway, so it doesn't matter if the topic name is too long
I'm not sure that we should just ignore the error here. It would be better to fail the build, but I'm not sure if we have the right error code for that.
This is not needed. It will be checked by the compiler.
`BoxWhisker` is a `Chart` type, not an `Element` type. You can add the `BoxWhisker` docstring to the `Chart` class docstring.
I think it would be good to have a test that makes sure that the `safe` option is respected.
I think this was a leftover from the previous PR.
Why do you need this class?
Why do we need to do this?
I'd suggest using a more standard name for this property: `query/memoryCircuitBreakerThreshold`.
I'm not sure if this is the best way to test this.
nit: no need for `FALSE` since `wasHiveString_` is bool
I think you can remove this `if` and just call `reactActivityDelegate.loadReactAppOnceIfReady(getMainComponentName());`
I think the link is broken?
This is now safe to remove.
I'm not sure about this. We're trying to get away from the `opts` pattern, and we don't have any other places that use it. I think this should be a new method that takes an `options` hash, and not `opts`.
I think there is a typo here
The `POST` method is not supported on the WS endpoint.
Why not remove the `postgres` attr entirely?
Layout/SpaceInsideHashLiteralBraces: Space inside { missing.<br>Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
I'm not sure if the send is blocking or not. I think it should be. I'll check and update this later.
This is the interface that our service implements.
This was a bug that caused the cache to not work properly.
This should be `assert.isTrue(checks.dlitem.evaluate.apply(null, checkArgs))`
This is a good change.
Should be `(out)`.
We should use the same pattern as we do elsewhere, so we should use `handleCallback(null, docs.length? docs[0].n : 0)` here.
Maybe we should keep this at info?
This is a byte array, not a string.
The convention is that imports go before any code.
This should be a `ModifierKey`
This is a bit odd. We are using the `vnode` hook to check if a ref is present, but then we don't do anything with it.
This is a bit weird. If we have `DR_HOST_NOT_TARGET` defined, then the condition is always false and we can remove the whole `#ifdef` block. But if we don't have it, then we need to use the `#ifndef` block.
Is this `format` needed?
I think the indentation is off here.
I don't think this is a good idea. This is an app-specific setting and should be applied to the app only. If I have a WordPress blog and a Laravel app on the same server, this will break the WordPress login.
I think we can move this to `GetBlockByHeight`
I think this is a leftover from the previous refactoring.
I'm not sure about this. The old code was failing the test, but I think it was incorrect to do so. The `aws.IsReaderSeekable` check is for whether the request body is readable or not, and if it is not readable, then we shouldn't be trying to mak
I think the `goroutine` is already `defer`ed in `Start()`.
Is this change necessary?
If you're going to change this to take an optional parameter, you should also update the method signature in the docs.
I think we can just inline these values in the usages.
This file should be deleted.
I would add this to `dataSource`
I'm not sure if this should be `movie.title` or `movie.original_title` but I left it as `movie.title` for now.
This change is not needed.
I'm not sure how this got in here, but this is causing the test to fail.
I think this docstring is incorrect
Why so many spins?
I think this should be `public static boolean isStatusFailedOrUnknown(Status status)`
Why not use the * import?
I think this debug line is unnecessary, given that we have the same information above.
The above `if` statement seems to be missing a closing `}`
I don't think this is needed.
Shouldn't this be `strict` by default?
Is this function necessary? It looks like it does nothing except call `super().chooseFile`.
This is a bit of a hack, but I don't think it's a bad one.
What if the message type is not registered in the message handlers?
what is the purpose of `copy`?
I think we should rescue Exception here too.
Why is this deferred?
The test should probably be changed to use `getSQLCipherVersion()` to make it more future-proof.
This is a breaking change, if the token is invalid it will return a 403 instead of 401.
I don't think it's useful to return `undefined` here. If you want to communicate that dependencies are loading, you can use `this.getDependencies().isLoading()`.
This is a bit odd, because `minLevel` and `maxY` are the same thing.
What about other source charset?
@stephentoub, I'm curious, how does the JIT handle the ternary? Does it keep the branch if one of the branches is taken?
This is a weird one. I don't see why we need to do this.
This is a bit odd, because it doesn't actually modify the certificate request.
Why are we emitting an event here?
I think we should store the capabilities here as `capabilities` instead of `permissions`. This is a bit confusing because permissions is a concept in WordPress.
I think you should remove this line
I wonder if we should just make this a map of app name to buildspec path and then have the `IntegTestBuildspecPath` be an optional field that is set to `""` if the app isn't running an integration test.
This is a little tricky because the popup is still in use by the `wlr_xdg_surface` code. The `wlr_xdg_surface_send_close` function calls `wlr_xdg_popup_destroy` which in turn calls `wlr_xdg_surface_close` which closes the popup. So thi
This is not necessary.
I think this check should be moved to the top of the function, and the return value should be set to true here, so that if the result is simulated to miss its deadline, it will be skipped.
Why do we need this?
I'm not sure we want to use the same name for the db container as for the service.
Why do we need to change the test name?
Do you want to use "." in the key name?
I think this can be `string`.
Shouldn't this be `UnsupportedOperationException: Unable to get the name`?
This should be a json schema, not a hardcoded number.
is this needed?
I think this class should be removed.
This is not used anywhere.
@forward_ssh_agent is not used anywhere
Can you add a `typeof model ==='string'` check here?
This method is not used anywhere.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I don't understand why this is needed.
I think we should make the recording_msid an optional field, and only include it if it exists.
Do we need to set this for Http1.1 as well?
nit: remove empty line
It's a bit odd to use a StringBuilder here. It seems like the string would be small enough that the string concatenation would not be a problem.
Layout/TrailingBlankLines: Final newline missing.
I think this can be simplified to `found_env_vars[:type] = found_env_vars[:is_pe] == 'true' || found_env_vars[:is_pe] == 'yes'? 'pe' : 'foss'`
This is a change in behaviour. Previously the thread would only be blocked until `amount` entries had been consumed, now it will block until `amount * 2` entries have been consumed.
This is not used anymore, can be removed
I think we should be using `context === null` instead of `context!== context`
nit: this import is not used anymore
@danrot this is the only change I did in this PR.
This test was removed because it was testing a bug in the old implementation.
Why do we need this?
This is not a good idea. It's a type and not a var.
This name is misleading, as it's not an assert, but a check.
I'm not sure about this order. I think it should be in the same order as the enum.
I'm not sure how you can fix this, but you can at least replace the magic number with `PodDatabaseHelper.VERSION`
It's not clear from the name that this is only for alerts. Perhaps `AlertQueryURL` should be renamed to `AlertsQueryURL` or `AlertsQueryURLPrefix`?
This looks like a good candidate for a `final` method
This is a very minor thing, but I think it would be better to use `insert` here since the range is known to be sorted.
I think this is the only tag that needs a rename.
This query can be simplified to `SELECT o FROM Dataset o WHERE o.publicationDate IS null ORDER BY o.id ASC`.
Can you update the docstring to include the new resource?
I'm not sure if it's better to do this as a `@pinwheel ||= %w[- \\ | /]` or not.
I think you can use `sandbox` here
(style) do not initialise globals to zero
This looks like a very specific exception, why not `except Exception`?
I would prefer to have a separate function for this, but I guess that's a separate issue.
The new imports are unused.
This is a bit of a pain. I think it would be better to use a hash with the organization codes as keys and the team names as values.
why remove the rewards?
Do we need to do this for all of these entries?
This could be just `return this.driver()['loadExtension'](path);`
This file is unchanged
@SiddharthaSharan @siddharta-sharan @siddharta-sharan
Cherrypick does not have a return type.
This is the commit that fixes the bug, right? If so, we should use the commit hash instead of the branch name.
nit: typo, `a` instead of `an`
I think you should use the syslog() function here.
I think this should be removed because it's already enabled by default.
Please sort this import
I think the changes in this file should be reverted.
@annatisch @mjkkirschner I think this change is incorrect. The code below this line is only executed when `value.Metrics!= null` or `value.Tags!= null`, so the offset needs to be updated before these checks.
I think this will always be true, right?
The imports order is wrong here.
I'm not sure if this is the right place to add this, but the `fetchBlocks` function is used in the `fetchAndVerify` function. I think this is the place where the `fetchAndVerify` is called from.
"Could not save WebCal-calendar" is a bit misleading. It's not the calendar that could not be saved, but the subscription.
why do we need this?
This is the only change that seems to be causing the problem. Why are we changing the protection here?
I would prefer to throw an exception here.
We need to be sure we set this to false if it is unset.
I think it would be better to keep the `_test` suffix.
@jvillalobos @scheibelp I think this is the only place where we were using the CA_BUNDLE_FILENAME, so it should be safe to remove it.
Please add the link to the docs in the same format as the other links.
Shouldn't this be a `if (length == 0) return Collections.emptyList();`?
I'm not sure what's going on here, but I suspect the linter is getting confused by the `complex64` in `testdata/complex64_test.go`. It's not really a valid type.
You can use `super.openInput(name, context, preload)` here.
I'm not sure we should be printing this message here. The cleanup handlers may print a message, and we don't want to print something else as well.
Please use `&&` instead of `and`
The `range` function doesn't support `xrange` in python 2.6
I think you can use `isinstance(v, np.ndarray)` instead of `isinstance(v, (list, np.ndarray))`
Can you add a TODO here to remove this?
We should use a `String#of()` overload that takes a delimiter.
This shouldn't be necessary.
`bool *` should be `bool *const`
Why is this check necessary?
This looks like a leftover.
You should be able to delete this file now, as there is no longer a `TvShows` namespace.
This is a breaking change. I think we should leave it as `throw new NotSupportedException`.
You can remove this function and just call `UpdateRepository` directly here.
Is this the only place where we do `h2o_lcstris()`?
This is not really a namespace. What about just a `dict`?
what if `user` is `None`?
Why is this needed?
This looks like a macro from `assert.h` that includes a call to `abort()`.
This is the only change I don't like...
Should we have a test case for this?
please add spaces around operators
why is this needed?
This is not correct.
This is a breaking change. I think it's better to keep the default name and path for the cookie and not change it in this PR.
@rsimha @zachmargolis this is the change I mentioned earlier that I think would be good to have in the code.
nit: `type._lastDomChild` is no longer used and can be removed from the type
The three arguments are not necessary for the `BasicBlock`, please remove them.
Why not just use the `di` struct in the `serviceCommand` struct?
I don't think this is necessary.
this is a little hacky, but I think it's ok.
Line is too long. [99/80]
The route should be `admin_mail_template_edit`
This is a bit of an ugly test, but I think it's fine.
I don't think this is correct. The property ID is not necessarily the first property in the array.
I think you can revert this file, as it is unchanged
This should be a `NotImplemented` error.
This is going to fail because you've got a typo here.
This is the only line I'm not sure about. The reason I added it is because if an error is returned from `checksumsMatch`, then I'm not sure if `msg.MessageId` is populated. The reason I added the check in the first place is because if an error is returned, 
This is the fix. The original code was wrong in that it always set the trace flags to the default value. This causes the other tests to fail because they are relying on the default value of 0.
This should be a default value, not a fixed value.
I think the padding is too much here, and the space between the table and the legend is too much.
I think we need to update the TODOs here.
We can't do this. We can't have a default value for `Web3Port` because the server needs to know what port to listen on.
Why did you change this?
This is a breaking change, since it's possible that someone is using `wtimeout` as a config option. I think we should keep the old name as well, and deprecate it in a future release.
Why increase it?
Why did you remove this?
I think we should just rename this to `staticOptions` or something.
I'm not sure if we need this. I think we should be able to use the existing `aws.ErrParameterAlreadyExists` struct.
Is there a reason to add a div around the SVGs? I think we could just add a class to the SVGs themselves.
Indent the right brace the same as the first position after the preceding left parenthesis.
This is what I meant by "the recommended rules"
This is the only place where we use v1. I think we should be able to remove `v2` from `WithDetails` and `WithDetailsResponse` and keep this test.
It seems that you are missing the `core` import here.
I'm not sure about this. I think it's better to have one time for all failed tasks.
We can remove this check because we are not using the server anymore.
why move the close?
`before_create` is deprecated and `before_validation` is the recommended alternative.
You could use `array_key_exists` to avoid a notice.
I think we should use `Bolt::ValidationError` instead of `StandardError` here.
Is it possible that the account could get removed from the ring between the lock and the check?
can you do typeof duration === 'undefined' ||!duration? 3000 : duration
`qname` is the same as `reporter_class`?
Please change the year in the copyright to current year
This is a good change, but I would have put the `Trigger.TriggerBuilder` in a variable.
We could remove this `require` if we move the `runUnifiedTest` function to `unified-spec-runner.js`.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Why did we change this?
I don't think we should be removing this.
`show` and `out_dir` are not used here.
I think you can remove this `@Inject` annotation now.
I don't think this is correct. The `*storage.Writer` is already in the `WriterOptions`.
I think it would be better to make this a `com.google.api.codegen.transformer.ruby` class, so that the class can be fully qualified with `ruby` in the name.
I think we should also check that the button is indeed disabled (not just unclickable).
I think we need to keep `sentryAddr` and `coreAddr` as they are used in the `chain` and `chainConfig` structs.
Is it necessary to add this file?
This should be moved to the loop body, right?
This is the same size as in the sycl_device.cpp file.
Is this file really part of the test harness?
Why not just add a `delete()` method to the `CustomData` object?
@smarterclayton can you take a look at this change? I'm not sure if this is the right way to check if the command is in the global path.
This is a BC break.
I don't understand why you removed this warning.
this is a bit odd, why not just use the `s => s.IsHidden` lambda directly in the order by?
Why not just pass in `self.list_marker`?
This is a new method. Can you add a `@since` annotation?
this is because the round is now a property of the notification, not the event
I'm not sure about the `Context` part. It's a bit too generic. I'm not sure if we should add more context headers in the future. Maybe we should just use `Header-` as the prefix.
I think we should leave this class in, but remove the `@RunWith` annotation, and the `setUp` and `tearDown` methods.
This is a bit weird. Is it really necessary to use the `SERVER_URL`?
This is a bit of a problem, since we don't want to be depending on the k8s client-go.
I think this logic is not correct. You can check the logic in `GetEpochNum` method. It is always `GetEpochNum(hu.FairbankBlockHeight()) >= epochNum`, so the logic here should be `if epochNum < fairBankEpochNum {`
@smarterclayton I think we need to remove the `instanceID` from the `validateAWSMachineSpec` function as well.
nit: not sure if this is a PEP8 thing or not but I would leave the trailing comma off this line.
I think we can get rid of this if now that we have a single function to handle all validation.
Is this the description that Stripe will store? If so, it should be the business name, not the user's email.
This is a very interesting change. I didn't know you could do this. I think we should just use `dict(mount_volumes)` instead of `dict(mount_volumes).items()`
why is this check here?
I'm not sure why this was moved to the new method.
I think this should be `key =~ /^(?:.*:)?wikipedia$/`
Should this be `h2o_build_destination_path` to indicate that it is escaping path components?
nit: should this be `QUIC_LOG_LEVEL`?
@danrot Shouldn't we remove this class instead?
Is this really the right place to do this? It seems like it should be in the callback from `sendLogRequest_`?
I'm not sure why the else block is empty, but I don't think it's necessary to keep it.
remove empty line
why `Mirror` is empty?
I think this should be `message.get('value', None)` instead.
Can you please explain why `TaskDead` is equal to `TaskStopped`?
I think this will cause an error in `get_filter_value` when trying to cast a dict to a `date` type.
I'm not sure if we need to cast to `CharType` here. `getType()` should return the base type of `ConstValue`
What if the user does not provide a path, but just a directory?
Should we have a test case for this?
why is this not `return spells[spell_id].feedbackable;`
Should be `CHECK_EQ(datum_num, num)`
Is this the only place we set this?
Why is this change necessary?
I think we can get rid of `UnitTestDocTests.py` as well, since we no longer have a doc test suite.
This is a bit odd. I don't think we should be adding an analysis cache listener here. It would be better to add it in the `AnalysisCache` constructor.
nit: I think we should be consistent and use `int` for all of the changes in this file.
This should be `db_conn.get_listen_count_for_user(user_name, need_exact = True)`
This is an interface, so it should be `?:`
the gallery is not a has media, but a collection of media.
This is not correct. It should be removed.
I think it's better to use `isinstance` to check whether `bbox_roi_extractor` has `semantic_roi_extractor` attribute.
I think it's better to pass `typeWidth` instead of `dictionaryEncoded` here and in the other methods.
It's better to use kv.Commit, which will call kv.WriteBatch and kv.Sync.
Is this really necessary? I don't see anything in the lint that would require this.
This function is never called
I think we want to keep the `instrumentation` imports at the bottom of the file
nit: can we call this NextPlanNodeIDType?
I think it is better to move the `Default False. Note generally it should be` to the end of this line.
Do we need to pass this in? Can we not just set it to false if we're not building a static binary?
What does the 0 mean here?
This is the only change that is required to support the config.
why do we need this in the common constants?
this is the only change in this PR that I'm not sure about. I'm not sure why the `TraceWrapper` class has a `GetILGenerator` method. The method is only used once and the IL is generated in the `GetILGenerator` method on the `TraceWrapper` class.
Why not use `ReadOnlyTrieStore` directly?
i think we should add the `dynamic` or `static` fee as an argument, otherwise it'll always use dynamic.
I think this is a typo.
I'm not sure about this one. I'm not sure if it's the right place to do this.
why is this false?
Should we add a `@since 10.2` annotation here?
Is there a reason you don't use `parsed_url.port`?
Should we add a check to make sure the move was successful?
This seems like a bad idea to me. The participant is const, so it should be returned as const.
This is a little bit confusing, I would remove the first capacity, and change the second one to `bytes`
Shouldn't we use the `EntityRepositoryInterface` here?
This is a breaking change, but we have to make it.
This is going to return null if there is no host in the request. Is that what we want?
Why not just `return include $this->realpath($path);`?
I think this is not needed any more
I think we should rename the variable to `writeConcernOptions`.
This should be `['{}.yaml'.format(rule) for rule in FORSETI_V1_RULES]`
It's probably better to log this error.
This is the actual error message.
I think we should return the `address` here.
Can you explain why this change is needed?
This should be a string, and can be `"0027"`
Why is this needed?
I'm not sure if we want to do this. It seems weird that `createSession` would fail if you didn't provide a service.
This is the only thing that's actually wrong here. You can't have a blank line before a return statement.
Can you make this a separate PR?
Why do you remove the interface?
I think we should use a translation for the value here as well, it will be used to display the value in the UI.
This is a bit of a breaking change, but I don't think it's a big deal.
This is not used.
This is a good example of where the translation key matters. In the old translation file we had a key that was `dashboards.show.contact_your_mentor` but in the new translation file we have a key `shared.header.contact_your_mentor`. Since we are changing the key we need to
Can you explain this change?
I don't think this loop needs to iterate over the whole `location_map` every frame. Can you change it to iterate over the `numActiveColorAttachments`?
This is not a good idea. The `RowKey` interface is already defined in `io.prestosql.spi.connector`, and it is not supposed to be a property of a table. The `rowKey` is a property of a table, and it should be represented as such.
this test case is duplicated below
This is a breaking change.
I'm not sure if this is actually a problem. If the user has a language installed, and Cura has a translation for it, we should use it. If we don't have a translation for it, we should use the system default.
I don't see this used anywhere, is it intended to be used?
This is the only change to core, it is not required for this PR but I think it is a good change.
I'm not sure if this is the right way to do this, but it seems to work.
I think it would be better to have a boolean flag for gpu mining, and a boolean flag for cpu mining. That way we don't have to have a boolean flag for "any mining".
I'm not sure why this is needed.
I think it's better to use the `$this->getAuthManager()` method here, instead of calling `$this->getConfig()` and then `$this->getConfig()->Catalog->auth_based_library_cards`
I would use `self.vcap_data['application_uris'].first` here, as it's more concise and is the same as `Array.min` when there is only one element.
I think the `--plugin yarpc --sanitize-tchannel` should be part of the example.
`authProviderName` is no longer used.
The `using`s are in alphabetical order. Can you please move this one to the top?
This should be `doc_url`
Layout/EmptyLinesAroundModuleBody: Extra empty line detected at module body end.
I would change this to "returns a slice of the root MDs for this TLF's current unmerged branch and unmerged branch"
This is actually wrong. The function will return FALSE.
This seems like a reasonable default.
You should not need this.
This line should be wrapped to 80 characters.
I don't think you need to add this change.
I think we should have a `SetAction` type with a `SetBytes` and `SetUint` subtype. This is a bit cleaner than having two different types.
I would prefer this to be `ServerStatus`, because it is more descriptive.
I think this change is OK, but I'm not sure why we were doing this before. Do you know why?
Please remove this file
`optOpEnum` is not defined here, is this a typo?
I would prefer that we keep this file, but remove the license header, and then update the license header on line 2 to `// +build!windows`
I think we should have a default value for this (empty string).
I would change it to `--file=fixture.yml` instead of `--file fixture.yml`
I would make the replacements a required argument. I think it's better to have explicit arguments than to have a default argument that does nothing.
I'm not sure if we should add this option, because it's not a configurable option.
I think we can make the option name shorter, e.g. `--mac_installer_signing_identifier <id>`, and the same for the keychain one.
This should be `if routeUpd.Dst == nil || routeUpd.Dst == nil`
I don't like the idea of modifying the global state of the process here. It's possible that `FB_TS_TEST` is set by another module, and that could cause unexpected side effects. I'd rather pass the flag in the constructor of `TestRunner` and set it in `runTest()`.
Nit: I would prefer to use `type thanosStore...` instead of the fully qualified name.
I think the "historical in nature" bit is confusing. Maybe something like: > The data on the usage dashboard is for the current month. This means that the number of records below may not match the count shown on the usage dashboard. For example if one of your users created a plan in October a
This is a new field.
This line is not needed because of the `vStringNewOrClear` call.
This function needs to be renamed to reflect the change in the parameter.
I think we can use `ServiceBuilder` here.
I would have used 100, 100, 0
It's not a good practice to use `AnyTimes` for assertions.
This should be `test x"$YACC" = x"bison -y"`.
This file should be named `test_base.cpp`
The ZK state reader does not have a collection that is being updated, so it will always return false.
I think this block can be removed entirely.
the output is now more detailed and shows the actual line that failed.
This is a bit more expensive than necessary. We don't need to copy each element into its own array slot. Just copy the array once.
Should this be moved up to the top of the function?
is this needed?
This is just a reminder to check this in the future.
Can you revert this file?
This is a bit weird, because it's not a factor but a percentage.
This should be `isinstance(x, (list, tuple))`.
This is a breaking change.
Is this used anywhere?
Can we make this a `Cache` method? I think it would be useful to have a `Cache` method to get all keys and values, rather than having to do a `c.values.Range(func(k, v interface{}) bool {... })`
This is not the only place where we have this check. Can you please extract it to a separate function?
I'm not sure we want to use the mock generated by the code generator, that's a bit odd.
I'd prefer if you kept the `res` variable, it makes it easier to read.
Is this needed?
You can use `true` here to avoid using `false` in the array.
nit: remove empty line
This is the only place where the client is used. Can we use a `client.Reader` here instead?
This is not used anymore
This is an interesting case where the `@property` decorator is doing more than just property access. The `@property` decorator here is actually providing the `@classmethod` functionality. The `@property` decorator does not actually provide the `@property` functionality here.
Why is this necessary?
I don't think this is necessary, since we can just use the constant `GITHUB_API_ENDPOINT`
Why are these two being added to the `MethodCallSettings` enum?
I don't think we need to allow an array of targets, as I don't see a use case for it.
Should we add a new property for `RecordHttpServerAttributes`?
nit: I think it would be nice to have a `default` case here, to avoid a potential panic if the channel is closed.
I would use the namespace in the following lines.
This should be moved to the `MoleculeAccessionNumbers` class.
I think this class can be removed and the `create` method moved into `EmailHandler` since it's only used there.
Do we need to log the config here?
Is there any way we can remove this `trim()` call?
Can we add this to the interface?
I would add a test for a blank line.
I think it would be more informative if `noOp` was renamed to `none` and a `Detect` method was added to it that returns an empty `ServiceNameDetectorResult`.
This is the new native lib that is being built for.NET Core.
I think this should be done in `onCreateOptionsMenu`
This is going to be a problem for the OSM passcode screen. We need to get the context from the AnkiDroidApp class.
This one is a bit of a nitpick, but I think we should leave the `return` on the previous line.
why did you change this?
This change is not related to the issue.
I would use cniPlugin, cniPluginNet, cniPluginIpam, cniPluginConfig
nit: can we make this a constructor parameter to ManifestFiles.read?
Can we add a `/size` to this?
You need to call `putExtra` before `startActivityForResult`
Line is too long. [81/80]
I'm not sure about this. Why not just move the assert_not_tested() above this line, and remove the assert_not_tested() below?
I think this should be `g_free (name);`
This is not needed anymore.
Why not do this in a separate function?
I think it's more accurate to say that it returns the total number of documents that have been added, including documents that have been added and indexed, as well as documents that are being added and have not been indexed yet.
It's a bit confusing to have the `MaxBatchSize` and `MaxBatchByteSize` in the same struct.
I think it should be "Product has a relation with multimedia"
Please add a JSDoc for `getDataErrorComponent`.
Can you move this to the `SalesforceSDKManager` class?
What about other errors?
I think this is the right fix, but I'm not sure if this is the best way to check if the body is empty.
This is the only change that needs to be reverted.
Line is too long. [82/80]
Shouldn't we keep the original functionality for when there's no `subscription`?
This should be `autoPolicy *caddytls.AutomationPolicy`
This is a bit odd. Why is this a string? And why do we want to allow empty strings as valid?
What is the difference between `timeSrc` and `timeDst`?
I think the API change is fine. It's an optional field.
You can use `...` instead of `...`
