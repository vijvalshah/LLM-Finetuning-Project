 Tasks.range(readTasks.length).stopOnFailure().executeWith(readTasksInitExecutorService).run(index -> readTasks[index] = new ReadTask<>( scanTasks.get(index), tableBroadcast, expectedSchemaString, caseSensitive, localityPreferred, new BatchReaderFactory(batchSize))); LOG.info("Batching input partitions with {} tasks.", readTasks.length); return Arrays.asList(readTasks);
 if (!$asset instanceof AssetInterface) { throw new \Exception('No asset given for rendering.', 1415184217); } if (!empty($preset)) { $thumbnailConfiguration = $this->thumbnailService->getThumbnailConfigurationForPreset($preset); } else { $thumbnailConfiguration = new ThumbnailConfiguration($this->getWidth(), $this->getMaximumWidth(), $this->getHeight(), $this->getMaximumHeight(), $this->g
 // calculates synchronized time and rtt public class NetworkTime { // some arbitrary point in time where time started static readonly DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc); static ExponentialMovingAverage _rtt = new ExponentialMovingAverage(10);
 public String toString() { return String.format( "Top rising stocks:%n%s\nTop falling stocks:%n%s", topIncrease.stream().map(kwr -> String.format("   %s by %.2f%%", kwr.key(), kwr.result())).collect(joining("\n")), topDecrease.stream().map(kwr -> String.format("   %s by %.2f%%", kwr.key(), kwr.result())).col
 meter := metric.WrapMeterImpl(accum) var calls int64 observer := metric.Must(meter).NewInt64SumObserver("observer.sum", func(_ context.Context, result metric.Int64ObserverResult) { calls++ result.Observe(calls)
 */ public class MainnetTransactionValidator implements TransactionValidator { public static MainnetTransactionValidator create() { return new MainnetTransactionValidator(new FrontierGasCalculator(), false); }
 """ request: HTTPRequest response: Optional[HTTPResponse] = None trailers: Optional[http.Headers] = None error: Optional[flow.Error] = None """ Note that it's possible for a Flow to have both a response and an error
 // return the peers of current node func (a *API) listPeers() Response { return NewSuccessResponse(a.getPeers()) } // disconnect peer
 return p, address } func (sm *SyncManager) makeNodeInfo(bestBlockHeader *types.BlockHeader, listenerStatus bool) *p2p.NodeInfo { nodeInfo := &p2p.NodeInfo{ PubKey:      sm.privKey.PubKey().Unwrap().(crypto.PubKeyEd25519), Moniker:     sm.config.Moniker,
 { _transformed = true; // Transform each initializer recursively (to allow for nested initializers) if (expression.Members == null) return Expression.New(expression.Constructor, expression.Arguments.Select(VisitInternal)); return Expression.New(expression.Constructor, expression.Arguments.Select(VisitInternal), expression.Members);
 } $attributes = $additionalAttributes; $attributes = $this->addGenericEditingMetadata($attributes, $node); $attributes = $this->addNodePropertyAttributes($attributes, $node);
 } // Attest implements the server side logic for the gcp iit node attestation plugin. func (p *IITAttestorPlugin) Attest(stream nodeattestor.NodeAttestor_AttestServer) error { c, err := p.getConfig() if err!= nil { return err
 boost::optional<double> People_Impl::spaceFloorAreaPerPerson() const { OptionalDouble temp = peopleDefinition().spaceFloorAreaperPerson(); if (temp) { return temp.get() / multiplier(); } return temp; }
 */ public function insert_script() { if ( rocket_get_constant( 'WP_ROCKET_WHITE_LABEL_ACCOUNT' ) ||! current_user_can( 'rocket_manage_options' ) ) { return; }
 } // Poll instructs the broker to read new broadcast messages, which will be // relayed through the message channel. // TODO: This should be changed to poll the block store instead. func (c *Controller) Poll(blockReference flow.Identifier) error { return c.broker.Poll(blockReference) }
.. versionchanged:: 0.11.0 Frames now 0-based instead of 1-based.. versionchanged:: 2.0.0 Reader now only parses boxes defined with 3 or 9 fields. Reader now reads a 3 entry zero unit cell (i.e. ``[0, 0, 0]``) as a being without dimension information (i.e. will the timestep dimension to ``None``).
 /** * Delete the MatchSet structure in a safe way. */ struct ScopedMatchDeleter { ScopedMatchDeleter(MatchSet& ms) : _ms(ms) {} ~DeleteMatches() { foreach (const Match* m, _ms) {
 export function addEncode(object, name, value, set) { if (value!= null) { // Always assign signal to update, even if the signal is from the enter block if (isObject(value) &&!isArray(value)) { object.update[name] = value; } else {
 :return: """ if self.client.token: worker_index = self.__get_worker_index() artifacts_zip = "artifacts.%s.zip" % worker_index mfile = self.__get_jtls_and_more() self.log.info("Uploading all artifacts as %s...", artifacts_zip) self.client.upload_file(artifacts_zip, mfile.getvalue())
 Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope().getDeclarations(VariableNameDeclaration.class); for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry : vars.entrySet()) { VariableNameDeclaration decl = entry.getKey(); AccessNode accessNodeParent = decl.getAccessNodeParent(); if (entry.getValue().isEmpty() || accessNodeParent.isTransient() || accessNodeParent.isStatic
 def parseTimeReference(ref, now): if not ref or ref == 'now': return timezone.now() #Time-of-day reference i = ref.find(':') hour,min = 0,0
 else: self.bot.sniper_disabled_global_warning = False # Retrieve the targets if self.mode == SniperMode.SOCIAL:
 if (allowance && allowance.subscriptionType === 1) return true; if (!allowance &&!this.repoOwnerAllowance) { return false; // pending allowance call } if (!allowance) { return false; }
 } for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { pi := NewPeerIdentifier(tt.hostport) assert.Equal(t, tt.expectedIdentifier, pi.Identifier()) }
 try { result = httpAgent.httpGet(path, headers, paramValues, encoding, readTimeoutMs); } catch (IOException e) { throw e; } finally { timer.observeDuration(); timer.close(); } return result; }
 foreach ( (array) $submenu['themes.php'] as $item ) { $class = ''; if ( in_array( $item[2], $forbidden_paths, true ) || str_starts_with( $item[2], 'customize.php' ) ) { continue; } // 0 = name, 1 = capability, 2 = file.
 return super.dispatchTouchEvent(event); } private class GestureDetectorListener extends GestureDetector.SimpleOnGestureListener { @Override public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) { Log.d(TAG, "GestureDetecorListener:onFling() fired");
 return size; } /** * Return the owner of the key. * - Given @p user:someuser:/..... return @p someuser
 h2o_header_t *headers, size_t num_headers, int header_requires_dup) { struct st_h2o_mruby_http_request_context_t *ctx = client->data; if (context_is_dead(ctx)) { ctx->client = NULL; dispose_context(ctx); return NULL; } int gc_arena = mrb_gc_arena_save(ctx->ctx->shared->mrb); mrb_gc_protect(ctx->ctx->sha
 opt_group{custom_options_, "vast"}.add<size_t>("table-slice-size", "Maximum size for sources that generate table slices."); initialize_factories(); } caf::error configuration::parse(int argc, char** argv) {
 "io" "github.com/gogo/protobuf/proto" "github.com/pkg/errors" yarpc "go.uber.org/yarpc/v2" )
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4432-SEA 1645521621 1067110068</p> <hr> <p>Varnish cache server</p> </body>
 var result struct { Service struct { OnCallUsers []struct { UserID   string `json:"userID"` UserName string `json:"userName"` } `json:"onCallUsers"` } }
 assertNoProblems(result); } @Test void noModifiersInForEach() { ParseResult<Statement> result = javaParser.parse(STATEMENT, provider("for(static transient int i : nums){}"));
 from google.cloud.forseti.services.scanner import scanner_pb2_grpc from google.cloud.forseti.services.server_config import server_pb2 from google.cloud.forseti.services.server_config import server_pb2_grpc from google.cloud.forseti.services.utils import oneof from google.cloud.forseti.services.utils import opencensus_enabled # pylint: disable=too-many-instance-attributes
 func (c *Chain) ProcessBlock(block *legacy.Block) (bool, error) { blockHash := block.Hash() if c.BlockExist(&blockHash) { log.WithField("hash", blockHash.String()).Info("Skip process due to block already been handled") return false, nil } if!c.BlockExist(&block.PreviousBlockHash) { log.WithField("hash", blockHash.String()).Info("Add to orphan b
 </tr> <tr> <td><?php echo __('Ticket Unassignment');?>:</td> <td> <span> <input type="checkbox" name="unassign_tickets_dept" <?php echo $info['unassign_tickets_dept']?'checked="checked"':'';?>> <?php echo __('Unassign ticket assignment on department transfer (into)');?> <i class="help-tip icon-question-sign" href="#sandboxin
 void ModelComponent::extendFinalizeFromProperties() { Super::extendFinalizeFromProperties(); int geomSize = getProperty_GeometrySet().size(); if (geomSize > 0) { for (int i = 0; i < geomSize; ++i) { addComponent(&upd_GeometrySet(i)); } } }
 'transEsc' => 'VuFind\View\Helper\Root\TransEsc', 'translate' => 'VuFind\View\Helper\Root\Translate', 'truncate' => 'VuFind\View\Helper\Root\Truncate', 'url' => 'VuFind\View\Helper\Root\Url', 'userlist' => 'VuFind\View\Helper\Root\UserList', 'usertags' => 'VuFind\View\Helper\Root\UserTags', 'Z
 * @then there is an empty proposal */ TEST_F(TransferAsset, NonexistentAsset) { const std::string &nonexistent = "inexist#test"; IntegrationTestFramework(1).setInitialState(kAdminKeypair).sendTx(makeUserWithPerms(kUser1, kUser1Keypair, kPerms, kRole1))
 MaxConcurrencyPerEvent int    `envconfig:"MAX_CONCURRENCY_PER_EVENT"` // MaxStaleDuration is the max duration of the handler pool without being synced. // We set the default to 1m to avoid a stale pool if the sync period is 15s. MaxStaleDuration time.Duration `envconfig:"MAX_STALE_DURATION" default:"1m"` // Max to 10m.
 return JSON_JR.beanFrom(type, jsonString); } /** * Converts a JSON string to a {@link Map}. */
 'type'    =>'string', 'context' => array( 'view', 'edit' ), 'pattern' => '/^([a-zA-Z0-9\-]+)$/i', ), ), 'additionalProperties' => array( 'type'    =>'string',
 input->getName().length(),'') << input->getName() << " : "; if (input->getNumConnectees() == 0 || (input->getNumConnectees() == 1 &&!input.isConnected() && input->getConnecteeName(0).empty())) { std::cout << "no connectees" << std::endl; } else { for (unsigned i = 0; i < input->getNumCon
 $plugins->run_hooks("modcp_allreports_start"); $query = $db->query(" SELECT r.*, u.username, p.username AS postusername, up.uid AS postuid, t.subject AS threadsubject, pr.username AS profileusername FROM ".TABLE_PREFIX."reportedcontent r LEFT JOIN ".TABLE_PREFIX."users u ON (r.uid=u.uid) LEFT JOIN ".TABLE_PREFIX."posts p ON (r.id=p.pid) LEFT JOIN "
 timer := time.NewTimer(0) defer timer.Stop() resultChan := make(chan retrievalResult) doneChan := make(chan struct{}) defer close(doneChan)
 {} void StartUsing() { if (m_failed_init) return; if (!GetOptionsDB().Get<bool>("UI.system-fog-of-war")) return; if (!m_scanline_shader) { boost::filesystem::path shader_path = GetRootDataDir() / "default" / "shaders" / "scanlines.frag"; std::string shader_text; ReadFile(shader_path, shader_text);
 fatal_lang_error('registration_disabled', false); // If we're using an agreement checkbox, did they check it? if (!empty($modSettings['checkboxAgreement']) &&!empty($_POST['checkbox_agreement'])) $_SESSION['registration_agreed'] = true; // Things we don't do for people who have already confirmed their OpenID allegances via register.
 config.Docker.ResultsTimeout = cli.Duration(20 * time.Second) config.Docker.RemoveTimeout = cli.Duration(20 * time.Second) config.Go.GoTool = "go" config.Go.CgoCCTool = "gcc" config.Go.GoPath = "$TMP_DIR:$TMP_DIR/src:$TMP_DIR/$PKG_DIR:$TMP_DIR/third_party/go:$TMP_DIR/third_party/" config.Python.PipTool = "pip3"
 if ( is_wp_error( $link ) ) { return $link; } $taxonomyClass = esc_attr( sanitize_html_class( $taxonomy ) ); $links[] = '<a class="'. $taxonomyClass.''. esc_attr( $term->slug ). '" href="'. esc_url( $link ). '" rel="tag">'. $term->name. '</a>'; } /**
 tensor([0, 1, 0, 1, 2, 2, 3, 5, 4, 6, 3, 5, 4, 6])) """ if algorithm == 'bruteforce-blas': return _segmented_knn_graph_blas(x, k, segs, distance) else: out = knn(x, segs, x, segs
 #include "../Empire/EmpireManager.h" #include "../Empire/Supply.h" #include <algorithm> #include <boost/algorithm/string/case_conv.hpp> #include <boost/bind.hpp> #include <boost/graph/adjacency_list.hpp>
 AppAdapter.get().getPassword(), ""); } // Get CSRFToken response off the main thread. Response<MwQueryResponse> response = Executors.newSingleThreadExecutor().submit(new getCSRFTokenResponse(service)).get(); if (response.body() == null || response.body().query() == null || TextUtils.isEmpty(response.body().query().csrfToken())) {
 } } func TestStorageInitOpts_Execute(t *testing.T) { const ( wantedAppName      = "ddos"
 self.handle_private_mode = False self._tmphist = None self.history = None if history: self.history = history def __getitem__(self, idx):
 def define_graph(self): self.jpegs, self.labels = self.input() images = self.decode(self.jpegs) outputs = self.cmnp([images, images]) outputs[1] = self.affine(outputs[1]) return [self.labels] + outputs
 fprintf(stderr, "    Turn on experimental TLS1.3 support.\n"); fprintf(stderr, "  -w --https-server\n"); fprintf(stderr, "    Run s2nd in a simple https server mode.\n"); fprintf(stderr, "  -b --https-bench\n"); fprintf(stderr, "    Run s2nd in a https benchmark mode.\n"); fprintf(stderr, "  -h,--help\n"); fprin
 // aim to create chunks of 20 bits or about 1MiB on average. averageBits = 20 // MinSize is the minimal size of a chunk. MinSize = 512 * KiB // MaxSize is the maximal size of a chunk.
 { public interface IMvxOverridePresentationAttribute { IMvxPresentationAttribute OverridePresentationAttribute(); } }
 class new_build_ext(_build_ext, object): user_options = _build_ext.user_options + [ ('c-build-dir=', None, "directory for generated c files"), ] def initialize_options(self): _build_ext.initialize_options(self)
 } @Override public void removeSubscriber(Subscriber subscriber) { subscribers.remove(subscriber); }
 assert N == 2 assert_almost_equal(cutoff, 10.5, decimal=4) def test_pdc_on_off(universe, lipid_heads, vmd): lfls_pbc_on = LeafletFinder(universe, lipid_heads, pbc=True) lfls_pbc_off = LeafletFinder(universe, lipid_heads, pbc=False) assert lfls_pbc_on.graph.size() > lfl
 } auto YacInit::createTimer(std::chrono::milliseconds delay_milliseconds) { return std::make_shared<TimerImpl>(delay_milliseconds, rxcpp::observe_on_main_thread()); } std::shared_ptr<YacGate> YacInit::initConsensusGate(
 "canmanagemembers" => 1, "canmanagerequests" => 1, "caninvitemembers" => 1, "makeleadermember" => 0 ) ); }
 model_name = request.handle try: self.modeller.delete_model(model_name) status = model_pb2.DeleteModelReply.Status.Value('SUCCESS') except Exception: LOGGER.exception('Unable to delete model: %s', model_name) status = model_pb2.DeleteModelReply.Status.Value('FAIL') return model_pb2.DeleteModelReply(status=status) def ListModel(self, request, _): """List all models.
 * @param {!Object} json JSON representation of the manifest. * @return {!AddonDetails} The add-on details. */ function parseManifestJson({name, version, applications}) { if (!(applications && applications.gecko && applications.gecko.id)) { throw new AddonFormatError('Could not find add-on ID for'+ addonPath); }
 if (resolvedComponents.Count > 0) { // this is not actually creating the search parameter, it will return the existing one. GetOrCreateSearchParameterInfo(searchParameter).ResolvedComponents = resolvedComponents; } }
 if os.path.exists('/var/log/forseti.log'):  # ubuntu on GCE default_log_handler = logging.FileHandler('/var/log/forseti.log') else: default_log_handler = logging.handlers.SysLogHandler() if not os.path.exists('/var/log/forseti.log'): os.makedirs('/var/log/forseti.log') default_log_handler.setFormatter(logging.Formatter(LOG_FMT)) logger_instance = logging.getLogger(module_name) logger_inst
 """ Sets the status message of the task to message, i.e., invokes _status_message_callback if it is a callable. This propagates the message down to the scheduler. See :meth:`_Task.set_status_message` for an example. """ if hasattr(self._status_message_callback, "__call__"): self._status_message_callback(message)
 req *execution.GetEventsForBlockIDsRequest, ) (*execution.GetEventsForBlockIDsResponse, error) { if req == nil { return nil, status.Error(codes.InvalidArgument, "empty request") }  // validate request blockIDs := req.GetBlockIds() flowBlockIDs, err := convert.BlockIDs(blockIDs)
 */ private boolean isRequiredToUploadAtTime(TopicPartition topicPartition) throws Exception{ final String topic = topicPartition.getTopic(); final String topicFilter = mConfig.getKafkaTopicUploadAtMinuteMarkFilter(); if (topicFilter == null || topicFilter.isEmpty()) { return false; } if (topic.matches(topicFilter)) { if (DateTime.now().minuteOfHour().get() == mConfig.getUploadMinuteMark()){ return true; }
 @ApiOperation("Retrieve the list of logs stored in S3 for a specific task.") public List<SingularityS3Log> getS3LogsForTask( @ApiParam("The task ID to search for") @PathParam("taskId") String taskId, @ApiParam("Start timestamp (millis, 13 digit)") @QueryParam("start") @DefaultValue("0") long start, @ApiParam("End timestamp (mills
 @Override public Options forTablets(Collection<KeyExtent> extents) { if (extents.stream().map(e -> DataLevel.of(e.tableId())).anyMatch(dl -> dl == DataLevel.USER)) { throw new IllegalArgumentException( "readTablets only supported for user tablets at this time."); }
 from helpers import RunOnceTask import luigi import luigi.scheduler import luigi.worker import luigi.util import luigi.rpc
 nonliteral_other.append(arg) else: arg.default = DefaultLiteralArgNode(arg.pos, arg.default) if arg.type.is_pyobject: if arg.kw_only: default_kwargs.append(arg) else:
 $('.banner__badge').html("<%= j render'shared/course_badge', course: @lesson.course, user: @user, modifier: '' %>"); <% if $('.lesson-button-group').length > 0 %> $('.lesson-button-group').html("<%= j render 'lessons/lesson_buttons', lesson: @lesson, course: @lesson.course, user: @user  %>"); <% else %> $("#section-lessons__<%= @
 // instance of etcd in the event that etcd certificates are unavailable, // reading the data, and comparing that to the data on disk, all the while // starting normal etcd. if isInitialized { logrus.Info("Only reconciling with datastore") tmpDataDir := filepath.Join(c.config.DataDir, "db", "tmp-etcd")
 type colInfo struct { Name     spansql.ID Type     spansql.Type NotNull  bool // only set for table columns AggIndex int             // Index+1 of SELECT list for which this is an aggregate value. Alias    spansql.PathExp // an alternate name for this column (result sets only) }
 SFXSource* source = NULL; if( track ) { if (dStrcmp(x, "") == 0) { source = SFX->playOnce( track ); }
 return true; } if (putObjectRequest.getSSEAwsKeyManagementParams()!= null && (putObjectRequest.getSSEAwsKeyManagementParams().getAwsKmsKeyId()!= null || putObjectRequest.getSSEAwsKeyManagementParams().getEncryption()!= null)) { return true; } } else if (request instanceof UploadPartRequest) {
 @property def status_verbose_name(self): status_verbose_names = getattr(settings, 'OSCAR_ORDER_STATUS_VERBOSE_NAMES', {}) if self.status in status_verbose_names: return status_verbose_names[self.status] return self.status
 if len(svcEnvNames) == 1 { o.svcName = svcEnvs[svcEnvNames[0]].svcName o.envName = svcEnvs[svcEnvNames[0]].envName log.Infof("Showing logs of service %s deployed in environment %s\n", color.HighlightUserInput(o.svcName), color.HighlightUserInput(o.envName)) return nil }
 #include "Version.h" QString MumbleSSL::defaultOpenSSLCipherString() { return QLatin1String( "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128
 bitmap_masks = self.to_ndarray() return BitmapMasks(bitmap_masks, self.height, self.width) def area(self): """ Compute area of masks using the shoelace formula. https://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates This func is modified from https://github.com/facebookresearch/detectron2/blob/ffff8acc35ea88ad1
 supportedPolicies[name] = policy } func (u *staticUpstream) From() string { return u.from }
 std::shared_ptr<shared_model::interface::EmptyBlock> makeEmptyCommit( size_t time = iroha::time::now()) const { using TestUnsignedEmptyBlockBuilder = test::EmptyBlockBuilder< (1 << TestUnsignedEmptyBlockBuilder::total) - 1, shared_model::validation::AlwaysValidValidator, shared_model::proto::UnsignedWrapper< shared_model::proto::EmptyBlock>>; auto block = TestUnsignedEm
 def __getitem__(self, n): if isinstance(n, slice): raise nx.NetworkXError( f"{type(self).__name__} does not support slicing, try list(G.nodes)[{n.start}:{n.stop}]" ) return self._nodes[n]
 * @return a new module which imports the original user module and a set of marker modules. */ public Module getConfigGrammar(Module mod) { return getGrammar(mod, mod.name() + "-" + CONFIG_CELLS); } /**
 int main() { BEGIN_TEST(); if (!s2n_pq_is_enabled()) { END_TEST();
 public IModel GetURLModel(string culture = null, bool fallbackToDefaultCulture = true) { return GetModel<URLModel>(culture, fallbackToDefaultCulture, fallbackToEnglish: true); } public IModel GetGUIDModel(string culture = null, bool fallbackToDefaultCulture = true)
 Raises: ApiExecutionError: ApiExecutionError is raised if the call to the GCP API fails.  """ try:
 A new dataframe with the updated labels. """ def new_labels_mapper(x, suffix=str(suffix)): return str(x) + suffix if axis == 0: return self.rename(new_row_labels=new_labels_mapper)
 let(:registry) { InterceptableSpec::CallbackRegistry.new } let(:parent) do InterceptableSpec::CbEmbedsOneParent.new(registry).tap do |parent| parent.child = InterceptableSpec::CbEmbedsOneChild.new(registry) end end
 :coll_name => collection.name }).execute(server) end Cursor.new(self, result, server, session) end end
 mode = self.rule['mode'] has_violation = False crypto_key_rule = self.rule['key'] for key_data in crypto_key_rule: rule_algorithms = key_data.get('algorithms') rule_protection_level = key_data.get('protection_level') rule_purpose = key_data.get('purpose')
 // IsWindows returns whether or not the service is building with a Windows OS. func (t TaskConfig) IsWindows() bool { if t.Platform.PlatformString == nil || t.Platform.PlatformString == "" { return false } return isWindowsPlatform(t.Platform) }
 private OAuth2AccessTokenResponseClient<OAuth2ClientCredentialsGrantRequest> clientCredentialsTokenResponseClient = new DefaultClientCredentialsTokenResponseClient(); private Clock clock = Clock.systemUTC(); /** * Constructs an {@code OAuth2AuthorizedClientArgumentResolver} using the provided parameters. *
 if (ex is DocumentClientException dce && dce.StatusCode == (HttpStatusCode)429) { throw new ServerIsBusyException(dce.RetryAfter); } else if (ex is HttpRequestException) { throw new ServerIsBusyException(); } } }
 } } // This is a temporary function that will be removed in a future release. // It is used to ensure that the current implementation of SplitMonotonicAtFlex // is correct. static void SplitMonotonicAtFake(Monotonic *m,int which,bigreal coord, struct inter_data *id) { SplitMonotonicAtFlex(m, which, coord, id, 0);
 # now superseded by Tm_NN. warnings.warn( "Tm_staluc is now deprecated. Use Tm_NN instead.", BiopythonDeprecationWarning, ) if not rna:
 * @param Optimization     $optimize    Database optimization instance. * @param UserClient       $user_client User client instance; */ public function __construct( array $args, Settings $settings, Render_Interface $render, Beacon $beacon, Optimization $optimize, UserClient $user_client ) { $this->slug        = $args['slug']; $this->title       = $args['title']; $this->capability  = $args
 ); } if (productItems.length === 0) { return ( <React.Fragment> <div className={classes.noResult}> <FormattedMessage
 import org.w3c.dom.Node; import org.w3c.dom.NodeList; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import java.util.List;
 String MANDATORY_NETWORK_FORMAT_HELP = "<NETWORK>"; String MANDATORY_NODE_ID_FORMAT_HELP = "<NODEID>"; Wei DEFAULT_MIN_TRANSACTION_GAS_PRICE = Wei.of(1000); long DEFAULT_RETENTION_PERIOD = 1024; long DEFAULT_TRANSIENT_FORK_OUTLIVING_PERIOD = 10; BytesValue DEFAULT_EXTRA_DATA = BytesValue.EMPTY; long DEFAULT_MAX_REFRESH_DELAY = 3600000;
 } // DecoderByName returns a *Decoder based on decoderName. // Deprecated: use NewDecoder instead. // Supported values include: //   - empty string: Returns the default from the URLOpener.Decoder, or //       BytesDecoder if URLOpener.Decoder is nil (which is true if you're
 jobRepository = new JobRepository(jetInstance); jobExecutionService = new JobExecutionService(nodeEngine, taskletExecutionService, jobRepository); jobCoordinationService = createJobCoordinationService(); nodeEngine.getMetricsRegistry().registerDynamicMetricsProvider(jobCoordinationService); MetricsService metricsService = nodeEngine.getService(MetricsService.SERVICE_NAME); metricsService.registerPublisher(nodeEngine -> new JobMetricsPublisher(jobExecutionService,
 return url def check_forms_can_be_destroyed(self, tab): """Check if any of the forms in the tab have been modified. If so, ask the user if they want to save the forms before quitting. """ # Check for user modified fields in a single tab confirm_quit = config.get('ui', 'confirm-quit') if tab.isModified() and 'forms' in confirm_quit:
 <?php final class Company extends Elegant { protected $table = 'companies';
 if (this.parentIsRoot === true) { return; } this.parentIsRoot = this.template.shadowRoot && unwrap(this.template.shadowRoot) === this.template; } }
 if (!self->have_rofiles) { g_warning ("rofiles-fuse not available, doing without"); return TRUE; }
 }; render() { const { onClose, onContinue, onBack, step, stores } = this.props; const { walletMigration, app } = stores; const {
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4450-SEA 1645549164 1603279788</p> <hr> <p>Varnish cache server</p> </body>
 Annotations: map[string]string{ types.TagCommandType: types.TypeStart, }, Deprecated: "vela install is DEPRECATED and we will remove it after Kubevela 1.0. Please use helm chart instead", } flag := cmd.Flags()
 "have k8s service account and secret at the same time": { spec: func() CloudAuditLogsSourceSpec { obj := auditLogsSourceSpec.DeepCopy() obj.ServiceAccountName = "service-account-name" obj.Secret = duckv1alpha1.DefaultGoogleCloudSecretSelector() return *obj }(),
 errno = 0; if (env_ndevices_str!= nullptr && env_rdevices_str!= nullptr) { Impl::throw_runtime_exception( "Error: cannot specify both KOKKOS_NUM_DEVICES and KOKKOS_RAND_DEVICES. " "Raised by Kokkos::initialize(int narg, char* argc[])."); } int rdevices = -1;
 { public static Assembly Core => typeof(Clock).Assembly; } }
 http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url) if http_error_msg: if isinstance(body_text, basestring): http_error_msg += u' Response Body: %s' % (body_text[:100] + '...') raise HTTPError(http_error_msg, response=self) def close(self):
 def _get_streams(self): is_live = False video_id = self._find_video_id(self.url) self.video_id = video_id = self._find_video_id(self.url) log.debug("Using video ID: {0}", video_id) info = self._get_stream_info(video_id) if info and info.get("status") == "fail": log.error("Could not get video info: {0}".format(info.get("reason"))) return
 } else { foreach ( $response->get_links() as $rel => $link ) { foreach ( $link as $attributes ) { if (! empty( $attributes['attributes']['embeddable'] ) ) { $fields[] = "_links.{$rel}"; break; }
 clipboard.set(this.shot.viewUrl, "text"); notifications.notify({ title: "Link Copied", text: "The link to your shot has been copied to the clipboard.", data: "", onClick: function (data) { } }); }, openLink: function (link) {
 end def check_deprecated_file if (@path + 'project.yaml').file? logger = Logging.logger[self] logger.warn "Project configuration file 'project.yaml' is deprecated; use 'bolt-project.yaml' instead." end
 interface::types::HashType reduced_hash_{ shared_model::crypto::Sha3_256::makeHash(reduced_payload_blob_)}; std::vector<proto::Command> commands_{ reduced_payload_.mutable_commands()->begin(), reduced_payload_.mutable_commands()->end()); boost::optional<std::shared_ptr<interface::BatchMeta>> meta_{ [this]() -> boost::optional<std::shared_ptr<interface::BatchMeta>> {
 t="file", d=fd; static bool extractAll = Config_getBool(EXTRACT_ALL); //printf("  %s:warnIfUndoc: hasUserDocs=%d isFriendClass=%d isFriend=%d protection=%d isRef=%d isDel=%d\n", //    name().data(), //    hasUserDocumentation(),isFriendClass(),isFriend(),protectionLevelVisible(m_impl->prot),isReference(
 cmdline.type = "protein" self.assertEqual( str(cmdline), t_coffee_exe + " -output clustalw_aln -infile Fasta/fa01 -outfile Fasta/tc_out.aln -type protein -outorder input -gapopen -2 -gapext -5", ) stdout, stderr = cmdline()
 while (true) { index++; // get next byte if (index == length) { if (rest == null) { RejectRequest(RequestRejectionReason.InvalidRequestHeadersNoCRLF); } span = rest.First.Span; rest = rest.Rest; index = -1; straddling = true; // TODO: handle straddling spans throw new NotImplementedException("call to OnHeader below needs to account for straddling spans"); }
 Encoding for text data. prettyprint : bool (optional, default: True) If True use line breaks and indenting in output XML. version: string (optional, default: '1.2draft') The version of GEXF to be used for nodes attributes checking Examples --------
 # divide in degrees for mean reducer. if reduce_op =='mean': if g._graph.number_of_etypes() > 1: raise NotImplementedError("Reduce op'mean' is not supported in " "the new heterogeneous graph API. Use multi_update_all().") ret_shape = F.shape(ret) deg = g.in_degrees() deg = F.astype(F.clamp(deg, 1, max(g.number_of_edges(), 1))
 num_nodes_dict = defaultdict(int) for (srctype, etype, dsttype), data in data_dict.items(): # TODO(minjie): converting to index is unnecessary just for getting the max ID. if isinstance(data, tuple): src = utils.toindex(data[0], dtype='int32' if idtype == F.int32 else 'int64').tonumpy() dst = utils.toindex(data[1],
 } private void validatePercentileFunctions(SqlCall call) { // Percentile functions must have a single argument in the order by clause if (call.getSqlKind()!= SqlKind.PERCENTILE_CONT && call.getSqlKind()!= SqlKind.PERCENTILE_DISC) { return; }  if (call.getOperandList().size() == 2) { SqlBasicCall sqlBasicCall = null; SqlNodeList list = null;
 // from disk, but an active partition does not have any files // on disk, so it should never get selected for deletion. VAST_WARN("{} got erase atom as an active partition", self); return std::make_pair(atom::done_v, std::vector<error_report>{}); }, [self](caf::stream<table_slice> in) { self->state.streaming_initiated = true;
 /// </summary> public string StorageAccountConnection { get; set; } public ushort MaximumNumberOfConcurrentJobsAllowed { get; set; } = 1; public TimeSpan JobHeartbeatTimeoutThreshold { get; set; } = TimeSpan.FromMinutes(10);
 deSecrets := decodeCredentials(enSecrets) for key, value := range secrets { if deSecrets[key]!= value { t.Errorf("key %s value %s  not equal %s after encode decode", key, value, deSecrets[key]) } } }
 public static readonly string NumberCombinedWithUnit = $@"(?<num>\d+(\.\d*)?){UnitRegex}"; public static readonly string YearToYear = $@"((从|在|自)\s*)?({DatePeriodYearInChineseRegex}|{DatePeriodYearRegex}){DatePeriodTillRegex}({DatePeriodYearInChineseRegex}|{DatePeriodYearRegex})"; public static readonly string Month
 { uint8_t renegotiation_info_scsv[S2N_TLS_CIPHER_SUITE_LEN] = { TLS_EMPTY_RENEGOTIATION_INFO_SCSV }; struct s2n_cipher_suite *higher_vers_match = NULL; bool fallback = false; /* RFC 7507 - If client is attempting to negotiate a TLS Version that is lower than the highest supported server * version, and the client cipher list contains TLS_FALLBACK_SCSV, then the server
 </body> </html> <?php return ob_get_contents(); } /**
 return new RemoteWebDriverBuilder(); } private void init() { this.capabilities = new ImmutableCapabilities(); logger.addHandler(LoggingHandler.getInstance());
 if (reader!= null) reader.close(); } notifyConversationListListeners(); return false; } public static interface ProgressListener {
 } @Test public void testExpiredAuthorizationRequestsAreRemoved() { final Duration expiresIn = Duration.ofMinutes(2); this.authorizationRequestRepository.setOAuth2AuthorizationRequestExpiresIn(expiresIn); this.authorizationRequestRepository.setClock(Clock.fixed(Instant.ofEpochMilli(0), ZoneId.systemDefault())); MockHttpServletRequest request = new MockHttpServletRequest(); MockHttpServletResponse response = new MockHttpServletResponse();
 cr.Status.FailureTime = &p } }
 highlightCells.emplace( attackerCell ); if ( _currentUnit->GetTailIndex()!= -1 ) { const Cell * attackerTailCell = Board::GetCell( attackerCell->GetIndex(), _currentUnit->isReflect()? RIGHT : LEFT ); highlightCells.emplace( attackerTailCell ); assert( attackerTailCell!= nullptr ); } } else {
 "github.com/authelia/authelia/internal/logging" ) // ValidateSecrets checks that secrets are either specified by config file/env or by file references func ValidateSecrets(configuration *schema.Configuration, validator *schema.StructValidator, viper *viper.Viper) { configuration.JWTSecret = getSecretValue("jwt_secret", validator, viper) configuration.Session.Secret = getSecretValue("session.secret", validator, viper)
 if _find_unsafe(s) is None: return s __all__ = ["is_py2", "is_py3", "is_win32", "input", "stdout", "file", "shlex_quote", "get_terminal_size"]
 class PersistenceContext: def __init__(self, state_dir: str = None, lock: Optional[rwlock.RWLockable] = None): # state dir (within DATA_DIR) of currently processed API in local file system self.state_dir: str = state_dir # read-write lock for concurrency control of incoming requests self.lock: Optional[rwlock.RWLockable] = lock class StateSerializer(abc.ABC):
 $dst_h = $src_h; } foreach( array( $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h ) as $value ) { if ( is_null( $value ) ||! is_numeric( $value ) || (int) $value <= 0 ) { return new WP_Error( 'image_crop_error', __( 'Image crop failed.' ), $this->file ); }
 }, appMarketUrl: function () { const appMarket = settings.findOne({ _id: "appMarketUrl" }); if (!appMarket) { return "#"; }
 # Each fetch will take place in its own thread, since it's naturally # parallel work. nodes = [] for v in nodes_or_patterns: if isinstance(v, basestring): nodes.append(v) else: nodes.append(v._ray_object_id) results = [] for store in self.remote_stores:
 void replace_prefix_dot(flb_sds_t s, int tag_prefix_len) { int str_len; char *str = s->str; char c;
 echo = self.stub.Ping(notifier_pb2.PingRequest(data=data)).data return echo == data def run(self, config_content, inventory_index_id): """Runs the notifier. Args: config_content (str): Content of the forseti config file. inventory_index_id (int): Inventory Index Id. Returns:
 public function up() { Schema::table('settings', function (Blueprint $table) { $table->boolean('labels_display_model')->default(0); }); }
 * * @return string|null */ public function getArgument(string $name, string $default = null):?string; /** * Get route arguments
 o.RegisterItems(initContainerItems...) var containerItems []ItemDescriptor for i := range pod.Spec.Containers { container := pod.Spec.Containers[i] cc := NewContainerConfiguration(pod, &container, portForwarder, false, opts) containerItems = append(containerItems, ItemDescriptor{ Width: component.WidthHalf,
 // If Shutdown has been called, Add immediately returns an error. func (b *Batcher) Add(ctx context.Context, item interface{}) error { b.mu.Lock() defer b.mu.Unlock() b.wg.Add(1) // Create a channel to receive the error from the handler. c := make(chan error, 1) // Add the item to the pending list.
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4425-SEA 1645523397 1112076160</p> <hr> <p>Varnish cache server</p> </body>
 <dd> <select name="id_group" ', ($context['user']['is_owner'] && $context['member']['group_id'] == 1? 'onchange="if (this.value!= 1 &amp;&amp;!confirm(\''. $txt['deadmin_confirm']. '\')) this.value = 1;"' : ''), '>'; // Fill the select box with all primary member groups that can be assigned to a 
 int value = si.x + si.y*nx + si.z*nx*ny; fails += (array(i,j,k)!= value); AMREX_ASSERT(fails == 0);  // If DEBUG, crash on first error. }); } return fails == 0;
 if issue_owners: metadata['issue_owners'] = ','.join(issue_owners) additional_issue_fields = get_additional_fields(fuzz_target_path) if additional_issue_fields: metadata['additional_fields'] = additional_issue_fields return metadata
 newopts.password = "" return ReadPasswordTwice(newopts, "enter new password: ", "enter new password (again): ") } func addKey(gopts GlobalOptions, repo *repository.Repository) error {
 if (!compress) { return encode(); } ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); DeflaterOutputStream outputStream = new DeflaterOutputStream(byteArrayOutputStream, new Deflater(Deflater.BEST_COMPRESSION)); DataVersion dataVersion = topicConfigSerializeWrapper.getDataVersion();
 } func TestRegistrationEntryMetrics(t *testing.T) { log, _ := test.NewNullLogger() cache := New(log, "spiffe://domain.test", bundleV1) // populate the cache with FOO and BAR without SVIDS foo := makeRegistrationEntry("FOO", "A")
 [^\\\\\'])* ) )$/x'; const SPLIT_PATTERN_VALUEBOOLEAN = '/^\s*(true|false|TRUE|FALSE)\s*$/'; const SPLIT_PATTERN_VALUENULL = '/^\s*(NULL|null)\s*$/'; const SCAN_PATTERN_VALUEOBJECTTYPE = '/'
 * The method {@link #upgradeRelativePaths(ServerContext, Ample.DataLevel)} was added for resolving * and replacing all relative tablet file paths found in metadata tables with absolute paths during * upgrade. Absolute paths are resolved by prefixing relative paths with a volume configured by the * user in the instance.volumes.upgrade.relative property, which is only used during an upgrade. * If any relative paths are found and this property is not configured, or 
 if (--(sce->val4) >= 0) { // Needed to check the caster's location for the range check. struct block_list *src = map->id2bl(sce->val2); if (!src || status->isdead || src->m!= bl->m ||!check_distance_bl(bl, src, 11)) break; status->heal(bl, 150 * 
 return transactions.Transaction{}, err } return c.signAndBroadcastTransactionWithWallet(walletHandle, pw, tx) }
 var force =!!options.quiet; if (force!== true) { force = cli.interaction.confirm($('Do you want to delete the CORS rules? [y/n]'), _); if (force!== true) { return; }
 concat_data = obj.interface.concatenate([dense_data, obj], datatype=[dtype]) reindexed = concat_data.reindex([xdim, ydim], vdims) if pd: df = reindexed.dframe() df = df.groupby([xdim, ydim], sort=False).first().reset_index() agg = reindexed.clone(df) else:
 # Don't prefix with project name if it's the default project. return binary separator = '/' if project.startswith('/') else '_' project_prefix = project + separator if binary.startswith(project_prefix): return binary
 func NewDNSProviderEnvironment(dns01Nameservers []string, hostedZoneName string) (*DNSProvider, error) { project := os.Getenv("GCE_PROJECT") if saFile, ok := os.LookupEnv("GCE_SERVICE_ACCOUNT_FILE"); ok { return NewDNSProviderServiceAccount(project, saFile, dns01Nameservers, hostedZoneName) } return NewDNSProviderCredentials(project, dns01Nameservers, hostedZoneName) }
 "%(status_filter)s") paginate_by = 25 description = '' actions = ('bulk_edit', 'download_selected_orders') current_view = 'dashboard:order-list' order_actions = ('save_note', 'delete_note', 'create_order_payment_event') def dispatch(self, request, *args, **kwargs):
 } // NewWorkerService creates a new WorkerService stack from a manifest file. func NewWorkerService(mft *manifest.WorkerService, env, app string, rc RuntimeConfig, allowedTopics []string) (*WorkerService, error) { parser := template.New() addons, err := addon.New(aws.StringValue(mft.Name)) if err!= nil {
 use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface; use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Reference; /** * @internal
 enforceConnectionLimits(); } private boolean doTheFractionOfRemoteConnectionsAllowsNewOne(final int maxConnections) { final int remotelyInitiatedConnectionsCount = Math.toIntExact( connectionsById.values().stream()
 if more? if exhausted? kill_cursors raise StopIteration end @documents = get_more else raise StopIteration end else # cursor is closed here
 } else { Log.d(TAG, "Activity was started with url " + feedUrl); setLoadingLayout(); // Remove subscribeonandroid.com from feed URL in order to subscribe to the actual feed URL if (feedUrl.contains("subscribeonandroid.com")) { feedUrl = feedUrl.replaceFirst("((www.)?(subscribeonandroid.com/))", ""); } if (savedInstanceState == null) { startFeedDownload(feedUrl, null, null);
 """Tests for Email Factory""" from google.cloud.forseti.common.util.email import email_factory from google.cloud.forseti.common.util.email import mailjet_connector from google.cloud.forseti.common.util.email import sendgrid_connector from google.cloud.forseti.common.util.errors import InvalidInputError from tests.unittest_utils import ForsetiTestCase
 const tlsConfig = ClientApi.tlsInit(ca); let messageCallback, errorCallback = null; let notifyRunning = false; const startNotify = () => { notify(
 // Copyright (c) 2020, 2021, Tigera, Inc. All rights reserved. // // Licensed under the Apache License, Version 2.0 (the "License"); // you may not use this file except in compliance with the License.
 public String getLogFileParentDir() { ArrayList<String> elements = new ArrayList<String>(); if (mPrefix!= null && mPrefix.length() > 0) { elements.add(mPrefix); } if (mTopic.length() > 0) { elements.add(mTopic); } return StringUtils.join(elements, "/");
 // would have different encoded representation than the one on disk. // To address this, this startup proceduce would attempt to scan all the accounts data. for each account data, we would // see if it's encoding aligns with the current messagepack encoder. If it doesn't we would update it's encoding. // than, depending if we found any such account data, we would reset the merkle trie and stored catchpoints. // once the upgr
 $this->writable = null; $this->seekable = null; $this->size = null; $this->pipe = false; return $oldResource; }
 'id' => '1', ]; $config = $this->mockPickerConfig('tl_article', '15'); $provider = $this->createTableProvider( $this->mockFrameworkWithDcaLoader('tl_article'), $this->mockRouterWithExpectedParams($params), $this->mockConnectionForQuery('tl_article', ['pid' => 1]) ); $provider->getUrl($config);
 return value def __repr__(self): return utils.get_repr(self, none_ok=self.none_ok, minint=self.minint, maxint=self.maxint, minperc=self.minperc, maxperc=self.maxperc)
 status := toChunkRequestStatus(entity) if status.Locators.Contains(request.Locator.ResultID, request.Locator.Index) { return fmt.Errorf("chunk request exists with same locator (result_id=%x, chunk_index=%d)", request.Locator.ResultID, request.Locator.Index) } status.Locators = append(status.Locators, &request.Locator)
 "strings" "github.com/drud/ddev/pkg/plugins/platform" "github.com/spf13/cobra" )
 print("\nSetting up cluster\n") redis_address = cluster.setup_cluster(config) cluster.launch_notebook(config, port) cli.add_command(notebook)
 return action } // TODO add a unit test for successfully creating a k8s service account, after issue https://github.com/google/knative-gcp/issues/657 gets solved. func TestAllCases(t *testing.T) { calSinkURL := sinkURI
 require.Equal(t, 0, res.Code) res.RequireStderr(t, []string{""}) res.RequireStdout(t, []string{ "ID        STATUS  BUILD   CREATED     DESCRIPTION", "release1  active  build1  2 days ago             ", "release2  active  build2  2 days ago             ", }) }) }
 # root process broadcasts nccl id nccl_id = nccl.UniqueId() uid = str(nccl_id) store.set('SparseGradOptimizer.nccl_root_id', uid) else: uid = store.get('SparseGradOptimizer.nccl_root_id') nccl_id = nccl.UniqueId(uid) # needs to be set for nccl to work self._comm = nccl.Communicator(self._world_size,
 bool Way::isSimpleLoop() const { return (getNodeId(0) == getNodeId(getNodeCount()-1)); } bool Way::isValidPolygon() const
 bottomSheetCallback.onSlide(null, 1.0f); } else if (Intent.ACTION_VIEW.equals(intent.getAction())) { handleDeeplink(intent.getData()); } // to avoid handling the intent twice when the configuration changes setIntent(new Intent(MainActivity.this, MainActivity.class));
 init_db_connection(app) messybrainz.db.init_db_engine(app.config['MESSYBRAINZ_SQLALCHEMY_DATABASE_URI']) # OAuth from webserver.login import login_manager, provider login_manager.init_app(app)
 // EnvironmentVPC holds the ID of the environment's VPC configuration. type EnvironmentVPC struct { ID               string   `json:"id"` PublicSubnetIDs  []string `json:"publicSubnetIDs"` PrivateSubnetIDs []string `json:"privateSubnetIDs"` } // EnvDescriber retrieves information about an environment.
 if (al.volatileSpecifier()) result+=" volatile"; if (al.refQualifier()==RefQualifierLValue) result+=" &"; else if (al.refQualifier()==RefQualifierRValue) result+=" &&"; if (!al.trailingReturnType().isEmpty()) result+=" -> "+al.trailingReturnType(); return removeRedundantWhiteSpace(result); }
 from Queue import Queue import anytree as at from anytree import Node from anytree import RenderTree from anytree import AsciiStyle from anytree import node
 case 'error_withdraw': $notice = [ 'error', __( 'An error occurred removing the learner\'s enrollment.','sensei-lms' ), ]; break; case'success_withdraw':
 } func (s *Service) GetFederationRelationship(ctx context.Context, req *trustdomainv1.GetFederationRelationshipRequest) (*types.FederationRelationship, error) { rpccontext.AddRPCAuditFields(ctx, logrus.Fields{telemetry.TrustDomainID: req.TrustDomain}) log := rpccontext.Logger(ctx) trustDomain, err := spiffeid.TrustDomainFromString(req.TrustDomain)
.execute(function (servicename, options, _) { options.servicename = promptServiceNameIfNotGiven(options, servicename, _); var progress = cli.interaction.progress($('Retrieving app settings')); try { result = mobile.getServiceSettings(options, _); } finally {
 errNoSourceVolume           = errors.New("`source_volume` cannot be empty") errEmptyEFSConfig           = errors.New("bad EFS configuration: `efs` cannot be empty") errMissingPublishTopicField = errors.New("field `publish.topics[].name` cannot be empty") ) // Conditional errors.
 */ @SafeVarargs @SuppressWarnings("varargs") static <U> Arbitrary<U> of(U... values) { return forAll(Gen.choose(values)); } /**
 self.assertEqual(string_table, expected_string_table) def testReadUTF16(self): """Test parsing an ASCII string.""" self.assertEqual(binary.ReadUTF16(self._ascii_string_1), 'Whatis') self.assertEqual(binary.ReadUTF16(self._ascii_string_2), 'What is this?')
 return (resourceType == ResourceType.DomainResource.ToString() && searchParameterName == "_text") || (resourceType == ResourceType.Resource.ToString() && searchParameterName == "_content") || (resourceType == ResourceType.Resource.ToString() && searchParameterName == "_query") #if Stu3 || (resourceType == ResourceType.DataElement.ToString() && (searchParameterName == "objectClass" || searchParameterName == "objectClassProperty")) #endif ;
 <R_NEW> AggregateOperation1<T, A, R_NEW> andThen(DistributedFunction<? super R,? extends R_NEW> thenFn); /** * Adapts this aggregate operation into a collector which can be passed to * {@link java.util.stream.Stream#collect(Collector)}. */ @Nonnull
 s.postReceiveBatchHook(len(msgs)) } s.mu.Lock() s.lastBatchNumMsgs = len(msgs) close(s.waitc)
 e_repr = np.zeros((4, 5)) n_repr[[1, 3]] = 1 e_repr[[1, 3]] = 1 n_repr = F.zeros((4, 5)) e_repr = F.zeros((4, 5)) g.ndata['a'] = n_repr g.edata['a'] = e_repr
 $get_request_response_body  =! isset( $config['generate_get_request_data']['body'] )? '' : $config['generate_get_request_data']['body']; $post_id                   = 0; if ( isset( $config['post_data'] ) ) { $config['post_data']['ID'] = $post_id = $factory->post->create( $config['post_data'] ); } Functions\expect( 'wp
 # Cell add_docs(TfmdLists, setup="Transform setup with self", decode="From `Pipeline", show="From `Pipeline", overlapping_splits="All splits that are in more than one split`, subset="New `TfmdLists` with same tfms that only includes items in `i`th split", infer_idx="Finds the index where `self.tfms` can be applied to `x`, depending on 
 this.isDefault = this.isDefault || false; this.environment = environment; this.registeredResourceNamespaces = _.without(subscriptionData.registeredResourceNamespaces, 'undefined', ''); this.registeredProviders = _.without(subscriptionData.registeredProviders, 'undefined', ''); }
 func fromSystemError(err tchannel.SystemError) error { code, ok := TChannelCodeToCode[err.Code()] if!ok { return yarpcerrors.InternalErrorf("got tchannel.SystemError %v which did not have a matching YARPC code", err.Code()) } return yarpcerrors.FromHeaders(code, "", err.Message()) }
 // error_reporting(0); include_once __DIR__. '/../config/config.inc.php'; include'style/wrapper.inc.php'; function servercmp($a, $b) { global $usercount;
 Function applied to size values before applying scaling, to remove values lower than zero.""") style_opts = (['cmap', 'palette','marker','size','s', 'color', 'alpha', 'unselected_color'] + line_properties + fill_properties) _plot_methods = dict(single='scatter', batched='scatter')
 var force =!!options.quiet; if (utils.fileExists(rdpFile, _)) { if (force!== true) { force = interaction.confirm(util.format($('Do you want to overwrite file %s? '), rdpFile), _); if (force!== true) { return; }
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4468-SEA 1645541394 2053115695</p> <hr> <p>Varnish cache server</p> </body>
 if (n_runnable_jobs >= n_not_excluded && queue_est > (gstate.work_buf_min() * n_not_excluded)/rwf.ninstances ) { return RSC_REASON_BUFFER_FULL; } }
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4478-SEA 1645533494 262429935</p> <hr> <p>Varnish cache server</p> </body>
 } const text = message.join('\n'); const copyLabel = _('Copy'); const copyToClipboard = bridge().showMessageBox(text, { icon: `${bridge().electronApp().buildDir()}/icons/128x128.png`, buttons: [copyLabel, _('OK')], defaultId: 1, }); if (copyToClipboard) {
 */ private final ReentrantLock l; /** * Create a new cache segment. *  @param maxMemory the maximum memory to use
 } }() start := time.Now() vacuumStats, err := au.dbs.wdb.Vacuum(ctx) counterMicros(vacuumElapsedTime, start) close(vacuumExitCh) vacuumLoggingAbort.Wait()
 pass @property def range(self): """
 def follow_vk_redirect(cls, url): # If this is a 'videos' catalog URL with an video ID in the GET request, get that instead parsed_url = urlparse(url) if parsed_url.path.startswith('/videos'): query = {v[0]: v[1] for v in [q.split('=') for q in parsed_url.query.split('&')] if v[0] == 'z'} try: true_path = unquote(qu
 func (n *SMTPNotifier) dial() error { log.Debugf("Notifier SMTP client attempting connection to %s", n.address) if n.port == 465 { log.Warnf("Notifier SMTP client configured to connect to a SMTPS server. It's highly recommended you use a non SMTPS port and STARTTLS instead as SMTPS is a protocol is long deprecated.") conn, err := tls.Dial("tcp", n.address, n.tl
 r.log.CDebugf(ctx, "Waiting for %d journal bytes to flush", firstStatus.UnflushedBytes) bytesFmt := "(%.2f%%) %s... " str := fmt.Sprintf( bytesFmt, float64(0), humanizeBytes(0, firstStatus.UnflushedBytes))
 """Get a list of assets from the assets table. Args: asset_ids (list): a list of ids for the assets to be retrieved from the database. Returns:
 def test_defaults_replacement(self, klass, monkeypatch): configtypes.FontBase.set_defaults(['Terminus'], '23pt') assert klass().to_py('23pt default_family') == '23pt Terminus' class TestFontFamily:
 public static final FamilyOperandTypeChecker STRING_STRING_STRING = family(SqlTypeFamily.STRING, SqlTypeFamily.STRING, SqlTypeFamily.STRING); public static final FamilyOperandTypeChecker STRING_STRING_OPTIONAL_STRING = family(ImmutableList.of(SqlTypeFamily.STRING, SqlTypeFamily.STRING, SqlTypeFamily.STRING), // Third operand optional (operand index 0, 1, 2) number -> number == 2);
 import ( "bufio" "context" "net/http" "github.com/go-chassis/go-chassis/core/handler"
 AttachChild(m_icon); m_link_text = new LinkText(GG::X0, GG::Y0, GG::X1, m_sitrep_entry.GetText() + " ", ClientUI::GetFont(), GG::FORMAT_LEFT | GG::FORMAT_VCENTER | GG::FORMAT_WORDBREAK, ClientUI::TextColor()); m_link_text->SetDecorator(VarText::EMPIRE_ID_TAG, new ColorEmpire()); Att
 "Couldn't compute ratio for dividend sid=2, ex_date=1990-10-19," " amount=0.100", )) self.assertTrue(self.log_handler.has_error( 'Dividend ratio <= 0 for dividend sid=1, ex_date=1990-10-17,''amount=0.510', ))  self.assertTrue(self.log_handler.has_warning( 'Dividend ratio <= 0 for dividend 
 int Dialog::ArmySplitTroop( const uint32_t freeSlots, const uint32_t redistributeMax, const bool savelastTroop, uint32_t & redistributeCount, bool & useFastSplit ) { assert( freeSlots > 0 );  fheroes2::Display & display = fheroes2::Display::instance(); // cursor
 public const string GeneralEndingRegex = @"^\s*((\.,)|\.|,|!|\?)?\s*$"; public const string MiddlePauseRegex = @"\s*(,)\s*"; public const string DurationConnectorRegex = @"^\s*(?<connector>\s+|and|,)\s*$"; public static readonly string NumberAsTimeRegex = $@"\b({EngTimeRegex}|{PeriodHourNumRegex}|{BaseDat
 @JsonProperty private String s3UploaderBucket; @JsonProperty private boolean useLocalDownloadService = false;
 dwellingTobuild = ( Race::NECR == race? BUILD_SHRINE : BUILD_TAVERN ); return ConstructionDialogResult::Build; } if ( le.MouseCursor( buildingThievesGuild.GetArea() ) && buildingThievesGuild.QueueEventProcessing( buttonExit ) ) { dwellingTobuild = BUILD_THIEVESGUILD; return ConstructionDialogResult::Build; }
 if (len == 1) { /* bind=src */ m->dest = construct_path(mntarray[0], false); } else if (len == 2) { /* bind=src:option or bind=src:dest */ if (0 == strncmp(mntarray[1], "rw", strlen(mntarray[1]))) m->options = strdup("rw"); if (0 == strncmp(mnt
 // Decide on a modal message based on the opt_type. If opt_type was not // provided, default to the original message for scalar variables. var newMsg = ''; if (opt_type === list) { newMsg = Blockly.Msg.NEW_LIST_TITLE; } else if (opt_type === broadcast_msg) { newMsg = Blockly.Msg.NEW_BROADCAST_MESSAGE_TITLE; } else { newMsg = Blockly.Msg.NEW_VARIABLE_TITLE;
 if ( buf.size() ) { Surface surf( Size( head.width, head.height ), /*false*/ true ); // accepting transparency surf.Fill( RGBA( 0xFF, 0, 0xFF ) ); surf.SetColorKey( RGBA( 0xFF, 0, 0xFF ) ); surf.Fill( RGBA( 0, 0, 0, 0xFF ) ); // filling with transparent col
 from __future__ import print_function import glob import re import os import sys
 } private SearchRow getSearchRow(SearchRow row, int columnId, Value v, boolean max) { Column column = columnId == SearchRow.ROWID_INDEX? table.getRowIdColumn() : table.getColumn(columnId); if (row == null) { row = table.getTemplateRow(); } else {
 } // epoch contract name and get code for contract epochContractName := "Epoch" epochContractCode := contracts.FlowEpoch(flagFungibleTokenAddress, flagFlowTokenAddress, flagIDTableAddress, systemContracts.ClusterQC.Address.Hex(), systemContracts.DKG.Address.Hex())
 package org.flowable.editor.language.xml; import static org.junit.Assert.assertThat; import static org.junit.Assert.assertTrue; import static org.junit.Assert.assertFalse; import org.flowable.bpmn.BpmnAutoLayout; import org.flowable.bpmn.model.BpmnModel;
 try: backup_archive_path = shutil.make_archive(backup_archive_path, BACKUP_ARCHIVE_FORMAT, directory) logs.log('Created corpus backup file.', backup_archive_path=backup_archive_path) dated_backup_url = gcs_url_for_backup_file( backup_bucket_name, corpus.engine, corpus.project_qualified_target_name,
 // The limit menu depends on other panels that may set a filter query, e.g. search and filter. // In order to correctly calculate the total row count, the limit menu must be compiled last. // We insert a placeholder here and compile the limit menu after all other panels. // Note: The limit menu also depends on the "search" panel. //       It is therefore compiled in the same way as the search panel. if (
 def get_container_network_for_lambda(): global LAMBDA_CONTAINER_NETWORK if config.LAMBDA_DOCKER_NETWORK: return config.LAMBDA_DOCKER_NETWORK if LAMBDA_CONTAINER_NETWORK is None: try: if config.is_in_docker: networks = DOCKER_CLIENT.get_networks(bootstrap.get_main_container_name())
 module.exports = { cleanDistDir: false, target: 'experimental-serverless-trace', env: { nextConfigPublicEnv: process.env.NEXT_PUBLIC_ENV_KEY_IN_NEXT_CONFIG,
 self._assert_ext_pkg_file_status(expected_to_be_present=False, extension_version=extension_version) def test_ext_zip_file_packages_removed_in_update_and_uninstall_case(self, *args): test_data = WireProtocolData(DATA_FILE) exthandlers_handler, protocol = self._create_mock(test_data, *args)
 sockdir, dir_stat.st_uid, dir_stat.st_mode)) print('sockfile: {} / owner {} / mode {:o}'.format( sockfile, file_stat.st_uid, file_stat.st_mode)) assert file_owner_ok or dir_owner_ok assert file_mode_ok or dir_mode_ok
 public Writer(BlockFileWriter bfw, int blockSize) throws IOException { this(bfw, blockSize, (int) DefaultConfiguration.getInstance().getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX), null, null); } public Writer(BlockFileWriter bfw, int blockSize, int indexBlockSize, SamplerConfigurationImpl samplerConfig, Sampler sampler) throws IOException {
 HeartbeatMonitorsPerService ID = "heartbeat_monitors_per_service" // Only limits future overrides (i.e. end in the future). UserOverridesPerSchedule ID = "user_overrides_per_schedule" ) // Valid returns nil if a given ID is valid, a validation error is returned otherwise.
 private static final int DEFAULT_WORLD_STATE_MAX_REQUESTS_WITHOUT_PROGRESS = 1000; private static final long DEFAULT_WORLD_STATE_MIN_MILLIS_BEFORE_STALLING = TimeUnit.MINUTES.toMillis(5); private static final int DEFAULT_MAX_GET_BLOCK_HEADERS = 128; private static final int DEFAULT_MAX_GET_BLOCK_BODIES = 128; private static final int DEFAULT_MAX_GET_RECEIPTS = 128; private static final int DEFAULT_MA
 // IsCodeStarConnection indicates to the manifest if this source requires a CSC connection. func (s Source) IsCodeStarConnection() bool { return s.ProviderName == GithubProviderName || s.ProviderName == BitbucketProviderName } func validateVersion(pm *PipelineManifest) (PipelineSchemaMajorVersion, error) {
 return reply, nil } // GetAllByzCoinChainIDs returns the list of Byzcoin chains known by the server given in // parameter. func (c *Client) GetAllByzCoinChainIDs(si *network.ServerIdentity) (*GetAllByzCoinChainIDsResponse, error) { reply := &GetAllByzCoinChainIDsResponse{} if err := c.SendProtobuf(si, &GetAllByzCoinChainIDsRequest
 package component import "github.com/vmware-tanzu/octant/internal/util/json" type SelectFile struct { Base
 // Get the mtx before starting the rotation // In this way, the client do not create new connections until the new SVID is received r.c.Log.Debug("Acquiring rotation lock") r.rotMtx.Lock() defer r.rotMtx.Unlock() r.c.Log.Debug("Rotating agent SVID")
 import ( "fmt" "sync" "k8s.io/api/core/v1" "github.com/kiali/kiali/config" "github.com/kiali/kiali/kubernetes" "github.com/kiali/kiali/log" "github.com/kiali/kiali/prometheus" "github.com/kiali/kiali/services/models" )
 bookkeeping.Block SeedProof crypto.VrfProof `codec:"sdpf"` OriginalPeriod   period           `codec:"oper"` OriginalProposer basics.Address   `codec:"oprop"` ctx              context.Context //TODO(yg): set to background? } // ToBeHashed implements the Hashable interface.
 "io/ioutil" "github.com/go-sql-driver/mysql" "github.com/jinzhu/gorm" // gorm mysql `cloudsql` dialect, for GCP
 * \author [Benjamin Walton](https://github.com/bwalton24) * \author [Shiqi Sheng](https://github.com/shiqisheng00) */ #include <cassert>    /// for assert #include <cmath>    /// for mathematical functions #include <functional>   /// for passing in functions #include <iostream>    /// for IO operations
 import ( "github.com/dedis/cothority/omniledger/darc" "github.com/dedis/cothority/omniledger/service" "github.com/dedis/kyber" "github.com/dedis/onet" "github.com/dedis/onet/network"
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4432-SEA 1645540616 1112213163</p> <hr> <p>Varnish cache server</p> </body>
 self._lines = None def get_stock_info(self, product, options): """Hook for implementing strategies that depend on product options.""" return self.strategy.fetch_for_product(product) def add_product(self, product, quantity=1, options=None):
 } func extractSubBenchmark(b *testing.B, fn func(*testing.B, *http.Request)) { b.Run("Sampled", func(b *testing.B) { req, _ := http.NewRequest("GET", "http://example.com", nil) req.Header.Set("traceparent", "00-4bf92f3577b34da6a3ce929d0e0e4736-00
 configureJetService(config); HazelcastInstanceImpl hazelcastInstance = ((HazelcastInstanceProxy) Hazelcast.newHazelcastInstance(config.getHazelcastConfig())).getOriginal(); return new JetInstanceImpl(hazelcastInstance, config); } /**
.SelectMany(handler => handler.GetSupportedPaymentMethods().Select(id => id.ToString())).Distinct(); var syncStatus = _dashBoard.GetAll().Where(summary => summary.Network.ShowSyncSummary).Select(summary => new ServerInfoSyncStatusData { CryptoCode = summary.Network.CryptoCode,
 self._scheduler.add_worker(self._id, {'workers': self.worker_processes}) @rpc_message_callback def dispatch_scheduler_message(self, task_id, message, **kwargs): if not self._config.receive_messages: return
 </p> <p> <button class="button button-primary" data-enable-tracking="yes"> <?php _e( 'Enable Usage Tracking', 'amp' )?> </button> <button class="button" data-enable-tracking="no"> <?php _e( 'Disable Usage Tracking', 'amp' )?> </button> <span id="progress" class="spinner alignleft"></span> </p>
 } else { #ifdef HELLFIRE if (2 * curlv < AllItemsList[i].iMinMLvl) okflag = FALSE; #endif } if (AllItemsList[i].itype == ITYPE_MISC) okflag = FALSE;
 RESOURCE ='resource' IAM_POLICY = 'iam_policy' GCS_POLICY = 'gcs_policy' supported_typeclass = [RESOURCE, IAM_POLICY, GCS_POLICY] class InventoryIndex(BASE):
 return errors.New("service name must be at least two characters long") } return multierr.Combine( checkUUIDs(name), checkFirstCharacter(name), checkForbiddenCharacters(name), checkHyphens(name), ) }
 if ( $phpunit_polyfills_error ||! file_exists( $phpunit_polyfills_autoloader ) ) { echo 'Error: The PHPUnit Polyfills library is a requirement for running the WP test suite.'. PHP_EOL; if ( isset( $phpunit_polyfills_path ) ) { printf( 'The PHPUnit Polyfills autoload file was not found in %s'. PHP_EOL, $phpunit_polyfills_autoloader ); echo
 } var statusesAllowedToDisplay = new List<InvoiceStatus>() { InvoiceStatus.New }; var validInvoice = result.Invoices.FirstOrDefault(invoice => InvoiceStatus.TryParse(invoice.StatusFormatted, out var status) && statusesAllowedToDisplay.Contains(status)); if (validInvoice!= null) {
 try { asyncHttpClient.post(url, Header.newInstance().addParam(Constants.NACOS_SERVER_HEADER, VersionUtils.version), Query.EMPTY, getSelf(), reference.getType(), new Callback<String>() { @Override public void onReceive(RestResult<String> result) { if (result.getCode() == HttpStatus.NOT_IMPLEMENTED.value()
 int s2n_stuffer_read(struct s2n_stuffer *stuffer, struct s2n_blob *out) { // null check the out structure notnull_check(out); return s2n_stuffer_read_bytes(stuffer, out->data, out->size); }
 return nameAllocator; } public CryptoService getCryptoService() { if (cryptoService == null) { throw new CryptoService.CryptoException("Crypto service not initialized."); }
 dali_cflags, dali_lflags = get_dali_build_flags() tf_cflags, tf_lflags = get_tf_build_flags() cuda_cflags, cuda_lflags = get_cuda_build_flags() plugin_src = self.src_path + '/daliop.cc' filenames = glob.glob(self.src_path + '/*.cc') for filename in filenames: plugin_src = plugin_src +'' + filename lib_path = self.plugin_de
 } } else if (name==='dangerouslySetInnerHTML') { if (value!=null) node.innerHTML = value.__html; } else if (name[0]=='o' && name[1]=='n') { let useCapture = name!== (name=name.replace(/Capture$/, ''));
 result[i] += fmt.Sprintf(" (maxLoss: %.1f%%)", exp.ExpectedPacketLoss.MaxPercent) } } if exp.Error!= "" { result[i] += " " + exp.Error } } return result
 f'shapes cannot be applied to'f'{expr_stype.get_verbosename(ctx.env.schema)}' ) try: view_type = viewgen.process_view( stype=expr_stype, path_id=expr.path_id, elements=shape.elements, ctx=ctx) except errors.QueryError as e: raise e from None return setgen.ensure_set(expr, type_override=view_type, ctx=ctx)
.WithMinIterationCount(15).WithMaxIterationCount(20) // we don't want to run more that 20 iterations.AsDefault()) // tell BDN that this are our default settings.With(new OperatingSystemFilter()).With(JsonExporter.Full) // make sure we export to Json (for BenchView integration purpose)
 from. import NeighborSearch from. import formats from. import pkdtree from. import nsgrid from. import cKDTree # pylint: disable=import-self
 (target_h + eps)) # view(..., -1) does not work for empty tensor loss_comb = torch.stack([loss_dx, loss_dy, loss_dw, loss_dh], dim=-1).flatten(start_dim=-2) loss = torch.where(loss_comb < beta, 0.5 * loss_comb * loss_comb / beta, loss_comb - 0.5 * beta)
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4426-SEA 1645530231 1114154193</p> <hr> <p>Varnish cache server</p> </body>
 // switch (priority) { case MSG_INTERNAL_ERROR: snprintf(event_msg, sizeof(event_msg), "[error] %.*s", sizeof(message), message); break; case MSG_SCHEDULER_ALERT: snprintf(event_msg, sizeof(event_msg), "%.64s: %.512s", _("Message from server"), message ); break;
 defer cancel() if err := w.WriteMsgWithContext(ctx, headersP2PToPB(headers)); err!= nil { return fmt.Errorf("failed to send write message: %w", err) } h := new(pb.Headers) if err := r.ReadMsgWithContext(ctx, h); err!= nil { return fmt.Errorf("failed to send read message: %w", err) } stream.headers = headersPBToP2P(h)
 UnusedKeys   []string `hcl:",unusedKeys"` } type bundleEndpointConfig struct { Address    string                    `hcl:"address"` Port       int                       `hcl:"port"` ACME       *bundleEndpointACMEConfig `hcl:"acme"`
 goto Exit; } /* calls H2O.after_generate_handler hook */ mrb_funcall_argv(mrb, h2o_mruby_eval_expr(mrb, "H2O"), mrb_intern_lit(mrb, "after_generate_hook"), 1, &result); if (mrb->exc!= NULL) { mrb_value obj = mrb_funcall(mrb, mrb_obj_value(mrb->exc), "inspect", 0); struct
 func Procedure(name string, handler interface{}) []transport.Procedure { return []transport.Procedure{ { ProcedureName: name, HandlerSpec: transport.NewUnaryHandlerSpec( wrapUnaryHandler(name, handler), ),
 rightClickHandler.call(this, ev, term); } if (isFirefox) { on(this.element,'mousedown', function (ev) { if (ev.button == 2) { rightClickHandlerWrapper(ev);
 vpcID := envDescription.EnvironmentVPC.ID subnets, err := o.subnetLister.ListVPCSubnets(vpcID) if err!= nil { return nil, fmt.Errorf("list subnets of vpc %s in environment %s: %w", vpcID, o.envName, err) } var cidrBlocks []string for _, subnet := range subnets.Public {
 if(empty($mybb->input['groups'])) { $mybb->input['groups'] = $user->data['usergroup']; } if(empty($mybb->input['forums'])) {
 In order to query this endpoint, send a GET request. A JSON response will be returned, with one of three codes. :statuscode 200: The user token is valid. :statuscode 400: No token was sent to the endpoint. :statuscode 401: The user token is invalid (does not exist). :statuscode 403: The user token is valid but does not have the necessary permissions to view the dashboard.
 warn(message) print(final_message) def load_data(path:PathOrStr, file:PathLikeOrBinaryStream='data_save.pkl', bs:int=64, val_bs:int=None, num_workers:int=defaults.cpus, dl_tfms:Optional[Collection[Callable]]=None, device:torch.device=None, collate_fn:Callable=data_collate, no_check:bool=False, **kwargs)->DataBunch: """Load f
 if (typeof req.body.code!=='string') { return res.send({error: 'Body parameter \'code\' must be a string'}); } const input = {[req.body.name.replace(/\\/g, '/').replace(/\r\n/g, '\n')]: {content: req.body.code}}; this.compile_solidity_code(input, {}, true, {}, (errors, result) => { const responseData = {errors: errors, r
 */ @Nonnull public static <K, V, R> ProcessorMetaSupplier readHdfsP( @Nonnull Configuration configuration, @Nonnull BiFunctionEx<K, V, R> mapper ) { if (configuration.get(MRJobConfig.INPUT_FORMAT_CLASS_ATTR)!= null) { return new ReadHdfsNewApiP.MetaSupplier<>(configuration, mapper); } else { return new ReadHdfsOldApiP.MetaSupplier<>((JobConf) configur
 return buff.toString(); } buff.append(table.getSQL());
 /** * @given initialized storage, all permissions * @when get account transactions of non existing account * @then Return error */ TEST_F(GetAccountTransactionsExecutorTest, InvalidNoAccount) { addAllPerms();
 import java.io.File; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.HashSet; import java.util.List; import java.util.Map; import java.util.Objects; import java.util.Set; import java.util.stream.Collectors; import org.infinispan.protostream.FileDescriptorSource;
 } recordSchema = Schema.createRecord(recordName, null, null, false, fields); if (struct.isUnionSchema()) { // If struct is union, add the flag for union to record conversion recordSchema.addProp(AvroSchemaUtil.UNION_SCHEMA_TO_RECORD, true); } results.put(struct, recordSchema);
 vctx, cancel := context.WithTimeout(ctx, 2*time.Second) defer cancel() go helper.VerifyAndRespondNextTargetEvent(ctx, t, t3.Key(), &e, nil, http.StatusInternalServerError) go helper.VerifyNextTargetRetryEvent(ctx, t, t3.Key(), &e) helper.SendEventToDecoupleQueue(ctx, t, b2.Key(), &e) <-vctx.Done() }) t.Run("event with delivery t
 } @VisibleForTesting Enode getEnode() { return networkRunner.getNetwork().getLocalNode(); } }
 } public String getUploaderRetries() { return getString("secor.upload.retries", "3"); } public String getUploadManagerClass() {
 target (torch.Tensor): The learning target of the iou-aware classification score with shape (N, C), C is the number of classes. weight (torch.Tensor, optional): The weight of loss for each prediction. Defaults to None. alpha (float, optional): A balance factor for Varifocal Loss. alpha is used to balance the negative part of the loss. Defaults to 0.75. gamma (float, optional): The gamma for 
 // if the db name is equal to the schema name ArrayList<String> list = Utils.newSmallArrayList(); do { if (currentTokenType == DOT) { list.add(null); currentTokenType = IDENTIFIER_START; } else { list.add(readUniqueIdentifier()); } } while (readIf(DOT)); schemaName = session.getCurrentSchemaName();
 case 'extensions': if ($varValue) { $this->arrAttributes['accept'] = '.'. implode(',.', StringUtil::trimsplit(',', strtolower($varValue))); } parent::__set($strKey, $varValue); break;
 // Set the topic being used. topic.Status.TopicID = topic.Spec.Topic // If the Topic is a source, then we don't need to create the Publisher. if!topic.Spec.Publish { // TODO delete previous publishers before the 0.16 cut: https://github.com/google/knative-gcp/issues/1217 return reconciler.NewEvent(corev1.EventTypeNormal, reconciledSuccessReason, `Topic reconciled: 
 if cython.compiled: from cython.cimports.libc.math import sin else: from cython.cimports.libc.math import sin @cython.cclass class Function:
 } } private function handleLegacyRouting(array $config, bool $legacy, ContainerBuilder $container): void { $count = 0;
 using System; using System.Collections.Generic;
 watchFunction(captureSelection)(); } window.addEventListener("mouseup", watchFunction(function (event) { if (currentState === "text") { return; }
 */ public final class Compression { private static final Logger log = LoggerFactory.getLogger(Compression.class); /** * Prevent the instantiation of this class.
 "Bio.KEGG.Compound", "Bio.KEGG.Enzyme", "Bio.NMR.xpktools", "Bio.MaxEntropy", "Bio.motifs", "Bio.motifs.applications._xxmotif", "Bio.pairwise2",
 if err!= nil { return nil, fmt.Errorf("invalid package import path: %s", err) } return generate(pkgName, pkgPath, c, nil) } func runGen(c *cobra.Command, args []string) ([]string, error) {
 return $button; } /** * @param $mine * @return mixed */ function searchMine($mine) { $pageSize=Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']);
 for _, o := range makeWritable { stat, err := os.Stat(o) if err!= nil { util.Warningf("unable to stat %s: %v", o, err) continue }
 receiver.mu.Lock() defer receiver.mu.Unlock() sub, err := receiver.connection.Subscribe(messageTopic, messageHandler) if err!= nil { err = fmt.Errorf("failed subscribe message '%s'. %s", messageTopic, err) return err } receiver.subs[messageTopic] = sub return nil }
 "context" "fmt" "io" "github.com/ethersphere/bee/pkg/file" "github.com/ethersphere/bee/pkg/file/splitter/internal"
 { pr = this.Config.DatePeriodParser.Parse(er, referenceTime); } else if (er.Type.Equals(Constants.SYS_DATETIME_TIMEPERIOD)) { pr = this.Config.TimePeriodParser.Parse(er, referenceTime);
 node.mu.Lock() defer node.mu.Unlock() // start accepting connections node.net.Start() node.config.NetAddress, _ = node.net.Address()
 finding_id = finding_list[0] to_be_updated_finding = finding_list[1] if to_be_updated_finding['state'] == 'INACTIVE': continue if finding_id not in new_findings_map: to_be_updated_finding['state'] = 'INACTIVE' current_time = date_time.get_utc_now_datetime() actual_time = current_time.strftime(
 eval_hook(val_dataloader, **eval_cfg), priority='LOW') resume_from = None if cfg.resume_from is not None and cfg.get('auto_resume', False): warnings.warn( 'The auto_resume option is deprecated and will be removed in future''versions of PyTorch Lightning. Please use the resume_from option instead.') resume_from = cfg.resume_from elif cfg.resume_from is not None: resume_from = cfg.resume_from elif cfg.g
 // ACMEIssuerHTTP01Config is a structure containing the ACME HTTP configuration options type ACMEIssuerHTTP01Config struct { ServiceType corev1.ServiceType `json:"serviceType,omitempty"` } // ACMEIssuerDNS01Config is a structure containing the ACME DNS configuration
 let fullPageButton = document.getElementById("full-page-button"); let fullPageButtonScrollable = document.getElementById("full-page-button-scrollable"); let frameElement = document.getElementById("frame"); let toolbarHeight = toolbar.offsetHeight; window.onscroll = function (e) { if (e.pageY > 0) { toolbar.style.visibility = "visible";
 void TabMessage::processUserMessageEvent(const Event_UserMessage &event) { auto userInfo = event.sender_name() == otherUserInfo->name()? otherUserInfo : ownUserInfo; const UserLevelFlags userLevel(userInfo->user_level()); const QString userPriv(QString::fromStdString(userInfo->privlevel())); chatView->appendMessage(QString::fromStdString(event.message()), 0, QString::fromStdString(event.sender_name()), userLevel, userPr
 func (*topic) IsRetryable(error) bool { return false } // As implements driver.Topic.As. // It supports *topic for NewSubscription. func (t *topic) As(i interface{}) bool { x, ok := i.(**topic) if!ok {
 public: CommandExecutorTest() { domain_id = "domain"; account_id = "id@" + domain_id; account_id_2 = "id2@" + domain_id; role_permissions.set( shared_model::interface::permissions::Role::kAddMySignatory);
 TempData.SetStatusMessageModel(new StatusMessageModel() { Severity = StatusMessageModel.StatusSeverity.Error, Html = $"To create an invoice, you need to <a href='{Url.Action(nameof(StoresController.UpdateStore), "Stores", new { storeId = store.Id })}' class='alert-link'>set up your wallet</a> first", AllowDismiss = false }); return View(model);
 if isinstance(edges, dict): # TODO(zhengda) we need to directly generate subgraph of all relations with # one invocation. subg = {etype: self.find_edges(etype, edges[etype]) for etype in edges} num_nodes = {ntype: self.number_of_nodes(ntype) for ntype in self.ntypes} subg = dgl_heterograph(subg, num_nodes_dict=num_nodes) else:
 caf::actor_system sys{cfg}; fixup_logger(cfg); // Print the configuration file(s) that were loaded. for (auto& path : cfg.config_paths) VAST_INFO_ANON("loaded configuration file:", path); using string_list = std::vector<std::string>; auto schema_dirs = std::vector<vast::path>{}; if (!caf::get_or(cfg, "system.no-default-schema", false)) {
 HealthCheckPath:    aws.String(defaultHealthCheckPath), HealthyThreshold:   aws.Int64(defaultHealthyThreshold), UnhealthyThreshold: aws.Int64(defaultUnhealthyThreshold), Interval:           aws.Int64(defaultInterval), Timeout:            aws.Int64(defaultTimeout), TargetContainer:    aws.String(defaultTargetContainer), } if lc.RoutingRule.HealthCheck.HealthCheckArgs.Path!= nil { opts.HealthCheckPath = lc.RoutingRule.HealthCheck.Healt
 public static readonly string NumbersFractionPercentageRegex = $@"{ZeroToNineFullHalfRegex}{{1,3}}([,，]{ZeroToNineFullHalfRegex}{{3}})+\s*개\s*백\s*분\s*점"; public static readonly string SimpleIntegerPercentageRegex = $@"(?<!%|\d)({NegativeNumberTermsRegexNum}|{NegativeNumberTermsRegex})?({AllIntReg
 // The.NET Foundation licenses this file to you under the MIT license. // See the LICENSE file in the project root for more information. using System; using System.Runtime.InteropServices; using System.Diagnostics; using System.IO; using System.ComponentModel; #if BIT64 using nuint = System.UInt64; #else
 let rpcApi = this.config.rpcApi; let wsApi = this.config.wsApi; let args = ['--ipcdisable']; // Add --ipcdisable as ipc is not needed for Whisper and it conflicts on Windows with the blockchain node args.push(`--port=${this.communicationConfig || 30304}`); async.series([ function commonOptions(callback) { let cmd = self.commonOptions();
 with self.assertRaisesMessage(CommandError, 'Course "645343" does not exist'): management.call_command('exportcourse', 645343, stdout=StringIO(), verbosity=3) def test_export_course_command(self): self.assertEqual(management.call_command('exportcourse', 1, stdout=StringIO(), verbosity=3), None) self.assertEqual(management.call_command('exportcourse', 0, stdout=StringIO(), verbosity
 return { updatedCallback: (newConfig) => { config = newConfig; const oldSubscription = subscription; subscription = getObservable(config).subscribe({ next: data => targetSetter({ data, error: undefined }), error: error => targetSetter({ data: undefined, error }) }); if (oldSubscription) { oldSubscription.unsubscribe(); } }, connectedCallback: () => {
 }) } /** * @typedef {import('../types/index').UserConfig} UserConfig * @param {UserConfig} config * @returns UserConfig */ module.exports.defineConfig = function defineConfig (config) { return config }
 :Copyright: GNU Public License v3..Warning: This module will be removed in version 2.0. Please use :mod:`MDAnalysis.analysis.hydrogenbonds.hbond_analysis` instead. Given a :class:`~MDAnalysis.core.universe.Universe` (simulation
 }); return resolverContract.methods.name(node).call(cb); }).catch(err => { // TODO: Add to constants if needed. callback(new Error('Invalid resolver address')); }); }; __embarkENS.registerSubDomain = function (name, address, callback) {
 LOG_VARD(poisMergedIntoPolys); const QString description = MatchCreator::BaseFeatureTypeToString(featureType); LOG_VARD(description); double totalFeatures = 0.0; totalFeatures = _applyVisitor( map, FilteredVisitor(criterion->clone(), _getElementVisitorForFeatureType(featureType))); LOG_VARD(totalFeatures); _stats.append(SingleStat(QString("%1 Count").arg(description), totalFeatures)); _stat
 return require(['connectionManagerFactory', 'apphost', 'credentialprovider', 'events', 'userSettings', 'apiclient', 'clientUtils'], function (ConnectionManager, appHost, credentialProvider, events, userSettings, apiClientFactory, clientUtils) { appHost = appHost.default || appHost; var credentialProviderInstance = new credentialProvider(); var promises = [appHost.init()]; return Promise.all(promises).th
 defer p.m.Unlock() switch { case runtime.GOOS == "windows" && extConf.DevicePath == "": // Windows does not allow set a device path case runtime.GOOS!= "windows" && extConf.DevicePath!= "": p.c.devicePath = extConf.DevicePath default: tpmPath, err := AutoDetectTPMPath(BaseTPMDir) if err!= nil { return nil, status.Errorf(codes.Int
 p->Add(exec_treecompare, sequence(text("treecompare"), localFSPath(), remoteFSPath(client, &cwd))); #endif p->Add(exec_querytransferquota, sequence(text("querytransferquota"), param("filesize"))); p->Add(exec_fingerprintsumsizes, sequence(text("fingerprintsumsizes"))); p->Add(exec_getcloudstorageused, sequence(text("getcloudstorageused"), repeat(either(flag("-storage"), 
 #include "caffe/caffe.hpp" int main(int argc, char** argv) { LOG(FATAL) << "Deprecated. Use caffe.bin train --solver_proto_file=... " "[--resume_point_file=...] instead."; return 0; }
 PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; """
 $ echo "autoload -U compinit; compinit" >> ~/.zshrc # To load completions for each session, execute once: $ velero completion zsh > "${fpath[1]}/_velero" # You will need to start a new shell for this setup to take effect.
 } } /** * Scale up or down the number of application instances. * @param application App in the stream to scale. * @param count Number of instance to scale to. */ public void scaleApplicationInstances(StreamApplication application, int count) { scaleApplicationInstances(application, count, new HashMap<>()); } /** * Scale up or down the number of application instances. * @param application App in the stream to scale.
 private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class); public static int ringBufferSize = 16384; public static int shareBufferSize = 1024; private static final AtomicBoolean CLOSED = new AtomicBoolean(false);
 @pytest.fixture() def plot_data(self, psa): psa.run(metric='hausdorff') psa.run(metric='discrete_frechet') return psa.plot()
 String videoType = "V_MPEG4/ISO/AVC"; String codecV = media.getCodecV(); if (codecV!= null) { if (codecV.equals(FormatConfiguration.MPEG2)) { videoType = "V_MPEG-2"; } else if (codecV.equals(FormatConfiguration.H265)) {
 } /** * Sets the job ID. */ public TestProcessorMetaSupplierContext setJobId(long jobId) { this.jobId = jobId;
 messageCertificateIssued  = "Certificate issued successfully" messageCertificateRenewed = "Certificate renewed successfully" messageRenewalScheduled   = "Certificate scheduled for renewal in %d hours" ) func (c *Controller) Sync(ctx context.Context, crt *v1alpha1.Certificate) (err error) {
 */ package com.alibaba.nacos.config.server.utils; import java.io.ByteArrayInputStream; import java.io.IOException; import java.io.InputStream; import java.nio.charset.StandardCharsets; import java.util.ArrayList;
 super.onCreate(savedInstanceState); wasPreviouslyDarkTheme = systemThemeUtils.isDeviceInNightMode(); setTheme(wasPreviouslyDarkTheme? R.style.DarkAppTheme : R.style.LightAppTheme);  float fontScale = android.provider.Settings.System.getFloat(getBaseContext().getContentResolver(), android.provider.Settings.System.FONT_SCALE, 1f); adjustFontScale(getResources().getConfiguration(),fontScale); }
 try: tar.extract(member) except TarError as err: current_app.logger.error("{} while extracting {}, aborting import".format( type(err).__name__, member.name), exc_info=True) raise Exception("Error while extracting {} from {}".format(member.name, dump_file)) tmp_hdfs_path = os.path.join(tmp_dump_dir, member.name) utils.upload_to_HDFS(tmp_hdfs_path, member.name)
 return errors.Wrap(err, "init service store") } if app.BasicStore == nil { app.BasicStore, err = basic.NewProvider(ctx, app.db, app.Store) } if err!= nil { return errors.Wrap(err, "init basic auth store")
 if err!= nil || cookie.Value == "" { return } sid, _ := url.QueryUnescape(cookie.Value) manager.provider.SessionDestroy(sid) if manager.config.EnableSetCookie {
 } path = "file:" + path logrus.Infof("Connecting to database file %s", path) db, err := gorm.Open("sqlite3", path) if err!= nil { return err
 const ( // maxCatchpointFileChunkSize is a rough estimate for the worst-case scenario we're going to have of all the accounts data per a single catchpoint file chunk. maxCatchpointFileChunkSize = ledger.BalancesPerCatchpointFileChunk * basics.MaxEncodedAccountDataSize // defaultMinCatchpointFileDownloadBytesPerSecond defines the worst-case scenario download speed we expect to get while downloading a catchpoint file defaultMinCatchpointFi
 var err error mb.unlockedIdentity, err = mb.identitySelector.UseOrCreate("", "") if err!= nil { return "", errors.Wrap(err, "[ GetUnlockedIdentity ] Unable to use or create an unlocked identity") } return mb.unlockedIdentity.Address, nil }
 const apiLoadingLogo = apiIcon; const canReportConnectingIssue =!isConnected && (connectingTime >= REPORT_ISSUE_TIME_TRIGGER || cardanoNodeState === CardanoNodeStates.UNRECOVERABLE); const canReportSyncingIssue = isConnected &&!isSynced && syncingTime >= REPORT_ISSUE_TIME_TRIGGER; const showReportIssue = isNewAppVersionLoaded &&!isNewAppVersionAvailable &&
 for (auto &batch : batches) { if (auto answer = batch_validator.validate(batch)) { reason.second.emplace_back(answer.reason()); } }
 } public void decrementOpenFiles(int numOpenFiles) { openFiles.add(-numOpenFiles); } @Override
 // Takes registration entry SPIFFE ID func IncrRegistrationEntryCreatedCounter(m telemetry.Metrics, id string) { labels := []telemetry.Label{ common.GetSanitizedLabel(telemetry.SPIFFEID, id), common.GetSanitizedLabel(telemetry.LabelDomain, "registration"), } m.IncrCounterWithLabels([]string{telemetry.CacheManager, telemetry.RegistrationEntry, telemetry.Create}, 1, labels) }
 } /** * @param string $file_content_hash * @param string $file_path * @param mixed  $file_modified_time * * @return list<PhpParser\Node\Stmt>|null */ public function loadExistingStatementsFromCache(string $file_path)
 select { case <-ctx.Done(): t.Fatalf("Cancellation is not delayed") case <-time.After(10 * time.Millisecond): } <-ctx.Done()
 from nose.tools import assert_equal import networkx as nx from networkx.algorithms.approximation.steinertree import metric_closure from networkx.algorithms.approximation.steinertree import steiner_tree from networkx.utils import assert_edges_equal class TestSteinerTree:
 }, [=](telemetry_atom) { self->state.send_report(); self->delayed_send(self, std::chrono::milliseconds(defs::telemetry_rate_ms), telemetry_atom::value); } }; }
 import numpy as np import pytest import torch import torch.nn as nn from mmdet.models.dense_heads import RetinaHead, YOLOV3Head from mmdet.utils import convert_result_list, verify_model onnx_io = 'tmp.onnx' data_path = osp.join(osp.dirname(__file__), 'data')
 Number of input node features. hidden_feats : list of int ``hidden_feats[i]`` gives the size of node representations after the i-th GCN layer. activation : list of activation functions or None If None, no activation will be applied. If not None, ``activation[i]`` gives the activation function to be used for the i-th GCN layer. ``len(activation)`` equals
 AND p.outOfStockAction = :outOfStockActionHide ) OR ( p.variantType = :mainType AND ( SELECT SUM('. Product::class. '::stockQuantity) FROM '. Product::class.'AS pv WHERE pv.product_id = p.product_id GROUP BY pv.product_id ) > 0 )
 /** * Remove the given map. */ void removeMap(TransactionMap<?,?> map) { store.removeMap(map.map); }
 namespace MvvmCross.Core.Navigation { public class MvxNavigationService : IMvxNavigationService { protected IMvxViewDispatcher ViewDispatcher => (IMvxViewDispatcher)base.Dispatcher; private static readonly Dictionary<Regex, Type> Routes = new Dictionary<Regex, Type>();
 from streamlink.plugin.api import useragents, validate from streamlink.stream.stream import Stream from streamlink.stream.stream import StreamIO from streamlink.utils import parse_duration log = logging.getLogger(__name__)
 if 'ESDestinationDescription' in dest: es_dest = dest['ESDestinationDescription'] es_index = es_dest['IndexName'] es_type = es_dest.get('TypeName') es = connect_elasticsearch() for record in records: obj_id = uuid.uuid4()
 } function normalizeLocaleName(culture) { // If the culture is an ISO 639-1 language code, normalize the language name. // If the culture is an ISO 639-2/B language name, normalize the region name. culture = culture.replace('_', '-'); // convert de-DE to de
 if __name__ == "__main__": from Bio._utils import run_doctest run_doctest()
 level.setMaximumUniqueImagesUsed(5); if(achievements.getImagesUploaded() >= 100 && achievements.getUniqueUsedImages() >= 45){ level.setLevel(10); level.setLevelStyle(R.style.LevelTen); } else if (achievements.getImagesUploaded() >= 90 && achievements.getUniqueUsedImages() >= 40){ level.setLevel(9);
 $userhandler->set_data($user); $userhandler->verify_style();  if($userhandler->validate_user()) { $userhandler->update_user();
 Logger.debug('AdaApi::createTransaction called', { parameters: filterLogData(request), }); const { walletId, address, amount, passphrase } = request; try { const data = {
 <% end %> </div> </section> <%=javascript_include_tag 'event_instances.js' %>
 public Regex NonUnitRegex => NonUnitsRegex; public Regex AmbiguousUnitNumbersRegex => AmbiguousFractionRegex; public Dictionary<Regex, Regex> AmbiguityFiltersDict { get; } = null;
 def source_ssh? return false if prefer_https? (repo_private? || force_private?) &&!installation? end def force_private? source_host.exclude? 'github.com' &&!installation? end def source_host
 recordStat(ctx, StreamRequestCount, 1) log.Print("starting open") err = spc.Send(&pb.StreamingPullRequest{ Subscription: subName, // We modack messages when we receive them, so this value doesn't matter too much. StreamAckDeadlineSeconds: 60,
 EdgeDistanceExtractor::EdgeDistanceExtractor(ValueAggregatorPtr a, Meters spacing): _aggregator(a? a : std::make_shared<AverageValueAggregator>()) { setSpacing(spacing); }
 return &tx, true } // All returns all transactions from the mempool. Since it is using the HeroCache, All guarantees returning // all transactions in the same order as they are added. func (t Transactions) All() []*flow.TransactionBody { entities := t.c.All()
 wrapper = os.path.join(get_full_path(__file__, step_up=2), "resources", "locustio-taurus-wrapper.py") self.env.set({"LOCUST_DURATION": dehumanize_time(load.duration)}) self.log_file = self.engine.create_artifact("locust", ".log") self.env.set({"LOCUST_LOG_FILE": self.log_file}) args = [sys.executable, wrapper, '-f', self.script]
 'parent'                    => 'Parent', 'currency'                  => 'Location Currency', 'ldap_ou'                   => 'LDAP Search OU', 'user_name'                 => 'User Name', 'employee_num'              => 'Employee No.', 'department'                => 'Department', 'location'                  => 'Location', 'asset_tag'                 => 'Assets Tag',
 cout<<"Running tool "<<getName()<<".\n"; // Get the trial name to label data written to files string trialName = getName(); // Initialize the model's underlying computational system and get its default state. SimTK::State& s = _model->initSystem();
 proposals.clear(); } public Map<Address, VoteType> getProposals() { return proposals; } public Optional<VoteType> get(final Address address) {
 # @param [ String, BSON::ObjectId ] id of the related document. # @param [ Hash ] attrs The single document attributes to process. # # @since 6.0.0 def update_nested_relation(parent, id, attrs) first = existing.first converted = first? convert_id(first.class, id) : id
 def __init__(self): super(ApiritifNoseExecutor, self).__init__() self._tailer = FileReader(file_opener=lambda _: None, parent_logger=self.log) self._iteration_number = None def reporting_setup(self, prefix=None, suffix=None): if not self.reported:
 otherUserRealm.write(() => { otherUserRealm.create(schemas.TestObject.name, { doubleCol: 42.133 }); }); return otherUserRealm.App.SyncSession.uploadAllLocalChanges().then(() => { otherUserRealm.close(); }); })
 * Generates a token for this object. * @throws CHttpException */ public function generateToken($iTokenLength = NULL) { if (empty($iTokenLength)) { $iTokenLength = $this->getSurveyTokenLength(); } $this->token = $this->_generateRandomToken($iTokenLength); $counter = 0; while (!$this->validate(array('token'))) {
 T visit(LogicalTableModify modify) throws E; T visit(RelNode other) throws E; }
 # Generate autosummary pages. Output should be set with: `:toctree: pythonapi/` autosummary_generate = ['Python-API.rst'] # The suffix(es) of source filenames. # You can specify multiple suffix as a list of string: # source_suffix = ['.rst', '.md'] # Add any paths that contain templates here, relative to this directory. templates_path = ['_templates'] # The master t
 <?php defined( 'ABSPATH' ) || die( 'Cheatin&#8217; uh?' ); // Launch hooks that deletes all the cache domain. add_action('switch_theme', 'rocket_clean_domain' ); add_action( 'user_register', 'rocket_clean_domain' );  // When a user is added.
 Parameters ---------- groupby_ngroups: shape: tuple The number of groups that will be formed by the grouper. groupby_on: str The grouper. groupby_sort: bool Whether or not to sort the data before grouping. Return -------
 } var orgProjPath string if org!= "" &&!strings.Contains(requestPath, "/orgs/") { orgProjPath = path.Join(orgProjPath, "orgs", org) } if project!= "" &&!strings.Contains(requestPath, "/projects/") { orgProjPath = path.Join(orgProjPath, "projects", project) }
 self.generate_set_slot_code(src, scope, code) class SyntheticSlot(InternalMethodSlot): #  Type slot descriptor for a synthesized method which #  dispatches to one or more user-defined methods depending
 if (numWaitingInInbox == 0 && rwinDiff < 0) { rwinDiff = 0; } LoggingUtil.logFinest(logger, "receiveWindowCompressed=%d", receiveWindowCompressed); receiveWindowCompressed += rwinDiff / 2; } return ackedSeqCompressed + receiveWindowCompressed; }
 "github.com/algorand/go-algorand/data/basics" ) func TestApplicationCallFieldsNil(t *testing.T) { a := require.New(t)
 Script.createMultisig = function(n_required, inKeys, opts) { opts = opts || {}; var keys = opts.noSorting? inKeys : this._sortKeys(inKeys); var script = new Script(); script.writeN(n_required); keys.forEach(function(key) {
 } } internal static bool AreEqual(SafeHandle first, SafeHandle second) { return first == second; }  /// <summary> /// Checks to see if two spans point at the same memory.  Note that /// this does *not* check to see if the *contents* are equal.
 threw = false; } catch (TException | UnknownHostException e) { if (e.getMessage().contains("Table/View 'HIVE_LOCKS' does not exist")) { LOG.error("Failed to acquire locks from metastore because 'HIVE_LOCKS' doesn't exist, " + "this probably happened when using embedded metastore or doesn't create transactional " + "meta table. Please reconfigure and start the metastore
 ds_layout = None class redim_graph(redim): """ Extension for the redim utility that allows re-dimensioning Graph objects including their nodes and edgepaths. """ def __call__(self, specs=None, **dimensions): redimmed = super(redim_graph, self).__call__(specs, **dimensions) new_data = (redimmed.data,) if self.parent.nodes: new_data = new_data + (self.parent.nod
 /// <summary> /// Gets or sets the option to render the empty object value {} /// </summary> public bool RenderEmptyObject { get; set; } /// <summary> /// Formats the log event as a JSON document for writing.
 // Should avoid update scheduling tight-loop. await sleep(10); expect(setState.calls.length).toBe(0, '`setState()` called unexpectedly'); expect(withIntlContext.getDerivedStateFromProps.callCount).toBe(0); withIntlContext.unmount(); });
 buf.WriteString(validation) first = false } val := v.Code(h.KeyType, true, false, false, "k", context, depth+1, false) if val!= "" { keyVal := val switch h.KeyType.Type.(type) { case *design.UserTypeDefinition, *design.MediaTypeDefinition: // For user and media types, call the Validate method
 Only callables that accept one argument (:meth:`~nvidia.dali.types.SampleInfo` objects that represent the index of the requested sample) can be used as ``source`` when ``parallel`` is set to True. It can be a function or an object implementing ``__call__`` operator, which allows to add an initial state to the object instance. Keep in mind, that **copies** of the ``source`` will be distributed between Pyth
 Minimum number of nodes for graphs max_num_v: int Maximum number of nodes for graphs verbose: bool Whether to print the graph to stdout seed: int The random seed to use """ def __init__(self, num_graphs, min_num_v, max_num_v, verbose=False, seed=None): self.num_graphs = num_graphs
 'failure' => 'The component could not be updated. Please try again.', ], 'delete' => ['success' => 'Component has been deleted!', 'failure' => 'The component could not be deleted. Please try again.', ],
 test.Http{ Method: "POST", Path:   "/apps/myapp/environment", Body:   "foo=bar\nping=pong\n\n# Comment followed by blank line\n", Code:   200, }, test.Http{
 } /** * @return int[] */ public function getDomainIdsByLocale(): array { $domainIdsByLocale = []; foreach ($this->domainConfigs as $domainConfig) {
 (Traversable<?> seq, Object elem) -> ((List<Object>) seq).remove(elem) ); private final BiFunction<Traversable<?>, Object, Traversable<?>> add; private final BiFunction<Traversable<?>, Object, Traversable<?>> remove; ContainerType(BiFunction<Traversable<?>, Object, Traversable<?>> add, BiFunction<Traversable<?>, Object, Traversable<?>> remove) {
 /** * Build the email message. * * @param string                      $s            Search table row * @param \VuFind\Db\Row\User         $user         User owning search row * @param \VuFind\Search\Base\Results $searchObject Search results object * @param array                       $newRecords   New results in search
 const yamljs = require('yamljs'); let reportUrl = ''; try { reportUrl = yamljs.parseFile('installers/launcher-config.yaml').reportServer; } catch (e) { console.log('error', e); } // eslint-disable-line module.exports = { devtool: 'cheap-source-map',
 await test('[wolkenkit init --force] ignores the.git directory.', async ({ directory }) => { const template = defaults.commands.init.template; await shell.mkdir('-p', path.join(directory, '.git')); await shell.copy('-r', path.join(__dirname, 'git'), path.join(directory, '.git')); const { code, stderr, stdout } = await wolkenkit('init', { force: true }, { cwd: directory });
 status_factory, cache_, tx_presence_cache_); service_transport_ = std::make_shared<torii::CommandServiceTransportGrpc>( service_, status_bus, status_factory, cache_, tx_presence_cache_); service_transport_ = std::make_shared<iroha::torii::CommandServiceTransportGrpc>( service_,
 hash: buffertools.reverse(new Buffer(txin.getOutpointHash())).toString('hex'), n: txin.getOutpointIndex() }, sequence: (txin.q === 0xffffffff)? 0xffffffff : txin.q }; if (txin.isCoinBase()) { txinObj.coinbase = txin.s.toString('hex');
 """Anchor-based head (RPN, RetinaNet, SSD, etc.). Args: num_classes (int): Number of categories excluding the background category. in_channels (int): Number of channels in the input feature map. feat_channels (int): Number of hidden channels. Used in child classes.
 // and othttp.Transport types. type Config struct { Tracer            trace.Tracer Propagators       propagation.Propagators SpanStartOptions  []trace.StartOption ReadEvent         bool WriteEvent        bool
 os.environ, ) def extract_option_object(option): """Convert a click.option call into a click.Option object.
 self.tmaster.reset(addons) self.tmaster.addons.trigger("tick") def human_address(self, address): return "%s:%d" % (address[0], address[1]) class ProxyTestBase: # Test Configuration
 auto r_statistics_participant = statistics::dds::DomainParticipant::narrow(r_participant); ASSERT_NE(nullptr, r_statistics_participant); // TODO: some topics get stuck in infinite loop in an error: // [SUBSCRIBER Error] Change not found on this key, something is wrong -> Function remove_change_sub // These topics are commented in test params // TODO: some topics could be used in both participants, but they lead to the same error
 */ public static Password promptUser() throws IOException { if (System.console() == null) { throw new IOException("Cannot prompt for password as no console is available."); } ConsoleReader reader = new ConsoleReader(); String enteredPass = reader.readLine("Enter password: ", '*');
 values ({{uuid "cm_user"}}, 'CM User'), ({{uuid "nr_user"}}, 'NR User'), ('50322144-1e88-43dc-b638-b16a5be7bad6', 'User 1'), ('dfcc0684-f045-4a9f-8931-56da8a014a44', 'User 2'), ('dc8
 cursorFrom.setPosition( rect_from.x - 2, rect_from.y - 2 ); if ( resourceTo ) { cursorTo.hide(); RedrawToResource( pt2, true, kingdom, fromTradingPost, resourceFrom ); gui.ShowTradeArea( kingdom, resourceFrom, resourceTo, max_buy, max_sell, count_buy, count_sell, fromTradingPost ); cursorTo.show(); } display.render(); }
 ordered = [] newscripts = [] for s in scripts: if not s.endswith(".py"): continue if s in current: ordered.append(current[s]) else:
 if testcase.regression.startswith('0:'): # If the regression range starts from the start of time, # then we assume that the bug impacts extended stable. new_impact = data_types.SecurityImpact.EXTENDED_STABLE_STABLE elif testcase.is_impact_set_flag: # Add impact label based on testcase's impact value. if testcase.impact_extended_stable_version:
 return R.string.location_inside; case OUTSIDE: return R.string.location_outside; case HOME: return R.string.location_home; default: return R.string.unknown; }
 } else g_print ("State: idle\n"); g_print ("\n"); if (booted_deployment) { g_assert (g_variant_lookup (booted_deployment, "id", "&s", &booted_id));
 if (!NetworkServer.active) return; if (authenticator!= null) { authenticator.OnServerAuthenticated.RemoveListener(OnServerAuthenticated); } OnStopServer();
 exports.registerHandler = function (h) { handler = h; if (queue.length) { for (let error of queue) { handler(error); } queue = []; } return exports;
 appsv1 "k8s.io/api/apps/v1" "k8s.io/api/batch/v1beta1" "k8s.io/apimachinery/pkg/api/meta" corev1 "k8s.io/api/core/v1" serving "knative.dev/serving/pkg/apis/serving/v1"
 A new DataFrame filled with Booleans. """ if level is not None: raise NotImplementedError( "Multilevel index not yet supported in Modin" ) other = self._validate_other(other, axis) new_manager = self._data_manager.gt(other=other, axis=axis, level=level) return self._create_dataframe_from_manager(new_manager)
 return nil, fmt.Errorf("could not send broadcast order: %w", err) } return receipt.ExecutionResult.FinalStateCommit(), nil } func (e *Engine) saveExecutionResults(
 * cluster topology change (triggering data migration), the source may * miss and/or duplicate some entries. * <p> * Default local parallelism for this processor is 2 (or 1 if there's just * one CPU available). */ @Nonnull public static <K, V> Source<Map.Entry<K, V>> cache(@Nonnull String cacheName) {
 $found_key = false; foreach ( $order as $type ) { if ( 'defaults'!== $type && array_key_exists( $this->params[ $type ][ $key ], $this->params[ $type ] ) ) { $this->params[ $type ][ $key ] = $value; $found_key                     = true; }
 PagedResources<MetricResource> list(/* TODO */); /** * Delete the counter with the given name */ void delete(String name); }
 else: logger.error("[GetWireserverEndpoint] Missing file {0}", file_path) self.endpoint = DEFAULT_PROTOCOL_ENDPOINT self._mutex.release() logger.info("Using hardcoded Wireserver endpoint {0}", self.endpoint) return self.endpoint
 #include <set> #include <map> #define THROW_LBANN_EXCEPTION(_CLASS_NAME_,_MSG_) { \ std::stringstream err; \ err << __FILE__ <<''  << __LINE__ << " :: " \
 Args: topk (tuple, optional): The criterion used to calculate the accuracy. Defaults to (1,). thresh (float, optional): If not None, threshold for prediction scores under this value being incorrect. Defaults to None. """ super().__init__() self.topk = topk
 // Case: caller sends us a new set of variables case newVars := <-w.inVarCh: // If the variables are the same as the last set, then we do nothing. if prevEnvSent && prevFilesSent && w.sameAppConfig(log, prevVars, newVars) { log.Trace("got var update but ignoring since they're the same") continue }
 return 'ANDROID' in (plt or platform()) def is_android_cuttlefish(plt=None): """Return true if we are on android cuttlefish platform.""" return 'ANDROID_X86' in (plt or platform())
 it(`should remove the existing attribute if set to undefined`, () => { const elm = createElement('x-test', { is: Test }); elm.attr = 'title'; document.body.appendChild(elm); expect(elm.shadowRoot.querySelector('div').getAttribute('title')).toBe('title'); elm.attr = undefined; return Promise.resolve().then(() => {
 Returns: A FuzzOptions object. """ executable_path = os.path.join(environment.get_value('FUZZER_DIR'), environment.get_value('FUZZER_NAME')) arguments = [executable_path] return engine.FuzzOptions(corpus_dir, arguments, {}) # TODO(mbarbella): As implemented, this will not work for untrusted workers. # We would need to copy fuzzer binaries to workers.
 import android.widget.EditText; import android.widget.LinearLayout; import java.util.List; import java.util.Map; public class SWUrl extends SWItem { private List<String> labels; private Map<String, String> values; private  String groupName;
 self.shmem_buffer_holder.append( self._shared_cache[emb_name][grad_shmem_name]) # The minimum buffer size is 2 MB. # We extend the buffer by idx_i.shape[0] * 2 to avoid # frequent shared memory allocation. # The overall buffer cost will be smaller than three times # the maximum memory requirement for sharing gradients. buffer_size = 2 * 1024 * 1024 if
 transactionFee            cadence.UFix64 minimumStorageReservation cadence.UFix64 epochConfig              epochs.EpochConfig identities                flow.IdentityList }
 try { return getDaoCareportalEvents().queryForId(timestamp); } catch (SQLException e) { log.error("Unhandled exception", e); } return null; }
 except (pika.exceptions.ConnectionClosed, AttributeError): pass ls = InfluxListenStore({ 'REDIS_HOST' : config.REDIS_HOST, 'REDIS_PORT' : config.REDIS_PORT, 'INFLUX_DB_NAME': config.INFLUX_DB_NAME}) listen_count = ls.get_total_listen_count() try: user_count = _get_user_count() except DatabaseException as e:
 // PrimaryKey return custom primary key func (a *ApplicationRevision) PrimaryKey() string { return fmt.Sprintf("%s-%s", a.AppPrimaryKey, a.Version) } // Index return custom index
 class TestGROWriterLarge(TestCase, tempdir.TempDir): def setUp(self): self.tmpdir = tempdir.TempDir()
 log.Error().Err(err).Msg("could not copy private key files") } log.Info().Msg("") } else { log.Info().Msg("private keys are already in the same folder") } } // print count of all nodes
 g_autoptr(GString) txn_title = g_string_new (""); if (is_install) g_string_append (txn_title, "install"); else if (self->refspec) g_string_append (txn_title, "rebase"); else if (self->revision) g_string_append (txn_title, "deploy"); else
 ChromecastPlayer.prototype.volumeDown = function () { vol = this._castPlayer.session.receiver.volume.level; if (vol == null) { vol = 0.5; } vol -= 0.02; vol = Math.max(vol, 0);
 def __init__(self, in_vm_artifacts_profile_json): if in_vm_artifacts_profile_json and not in_vm_artifacts_profile_json.isspace(): self.__dict__.update(json.loads(in_vm_artifacts_profile_json.rstrip(' \t\r\n\0'))) def is_extension_handlers_handling_on_hold(self): # hasattr() is not available in Python 2.6
 @target_integrator.integrate! end it 'does not set the Pods xcconfig as the base config if the base config is already set' do @target.build_configurations.each do |config| config.stubs(:base_configuration_reference).returns(@sample_config) end
 private static final int EXPECTED_DEFAULT_EPOCH_LENGTH = 30_000; private static final int EXPECTED_DEFAULT_BLOCK_PERIOD = 1; private static final int EXPECTED_DEFAULT_REQUEST_TIMEOUT = 1; private static final int EXPECTED_DEFAULT_MESSAGE_SIZE = 10_000; @Test public void shouldGetEpochLengthFromConfig() {
 } func blackholeOrAllowDirectPath(testEnv IntegrationEnv, t *testing.T, blackholeDP bool) { blackholeDpv6Cmd := "sudo ip6tables -I INPUT -s 2001:4860:8040::/42 -j DROP && sleep 5 && echo blackholeDpv6" blackholeDpv4Cmd := "sudo iptables -I INPUT -
 title_url: 'Express'.parameterize, course_id: course.id, position: section_position, description: 'Here we finally get to Express, the most popular back-end JavaScript framework.  This section teaches you how to build a REST API with Express.' ) lesson_position += 1
 new URLParser(), new BaseURLExtractor(new ChineseURLExtractorConfiguration(options)))); RegisterModel<GUIDModel>( Culture.English, (options) => new GUIDModel(new GUIDParser(), new GUIDExtractor()));
 var validPorts = regexp.MustCompile(`[0-9]+`) if!validPorts.MatchString(port) { return httperr.Errorf(403, "balancer port must be numeric") } ssl, err := models.CreateSSL(a, port, body, key)
 # TODO: deprecate `extra_convs_on_inputs` warnings.simplefilter('once') warnings.warn( '"extra_convs_on_inputs" will be deprecated in v2.9.0,' 'Please use "add_extra_convs"', DeprecationWarning) self.add_extra_convs = 'on_input' else:
.setTarget(nav_cam).setDismissText(getResources().getString(R.string.ok_button)).setContentText(getResources().getString(R.string.camera_button)).setDismissOnTouch(true).build() );
 // AppDeployment is the Schema for the AppDeployment API // +kubebuilder:object:root=true // +kubebuilder:resource:categories={oam},shortName=appdpy // +kubebuilder:subresource:status type AppDeployment struct { metav1.TypeMeta   `json:",inline"`
 'Rule %s already defined in rules: %s' % ( rule['name'], ', '.join(sorted(self.rules.keys())))) add_rule = self._add_rule_callback(new_rule) if add_rule: self.rules[new_rule['name']] = new_rule def filtered_by_networks(self, networks):
 public void onPause() { super.onPause(); savePreference(); } private void savePreference() {
 } if (r.config.Port!= 0 || r.config.NodePort!= 0) && r.config.Ports!= nil { return nil, fmt.Errorf("Cannot define both 'Ports' and 'port' or 'node_port'." + " Use 'ports' for configuring multiple service ports.") } else if r.config.Ports == nil && (r.config.Port!= 0 || r.config.NodePort!= 0) { r.conf
 dependent: :destroy validates :name, :address, :organization, presence: true validates :warehouse_type, inclusion: { in: WAREHOUSE_TYPES }, allow_blank: true include Geocodable
 * Factory for providers of source code for JavaParser. * Providers that have no parameter for encoding but need it will use UTF-8. */ public static final class Providers { public static final Charset UTF8 = Charset.forName("utf-8"); private Providers() {
 $message = preg_replace('#(>|^|\r|\n)/slap ([^\r\n<]*)#i', "\\1<span style=\"color: red;\" class=\"mycode_slap\">* {$this->options['me_username']} {$lang->slaps} \\2 {$lang->with_trout}</span>", $message); } $message = $plugins->run_hooks("parse_message_me_mycode", $mes
 *  and multiply it by -1. */ Vec3 massCenter = osimModel.getBodySet().get("r_ulna_radius_hand").getMassCenter(); Vec3 velocity = osimModel.getMultibodySystem().realize(s, Stage::Velocity); const auto& hand = osimModel.getComponent<OpenSim::Body>("r_ulna_radius_hand"); velocity = hand.findVelocityInGround(s, massCenter); 
 $(function () { $('[data-toggle="tooltip"]').tooltip() }) No newline at end of file 
 int m_NativeRef = 0; readonly int id; public Client() { id = Interlocked.Increment(ref idGenerator); } public void Connect(Uri uri)
 import React from'react'; import { useRegion } from '@magento/peregrine/lib/talons/Region/useRegion'; import { useConfig } from '@magento/peregrine'; import { mergeClasses } from '../../classify';
 */ @Configuration @EnableConfigurationProperties(ZipkinUiProperties.class) @ConditionalOnProperty(name = "zipkin.ui.enabled", matchIfMissing = true) @RestController public class ZipkinUiAutoConfiguration extends WebMvcConfigurerAdapter {
 * Constructor * * @param bool $enabled is this tab enabled? */ public function __construct($enabled = true) { $this->enabled = $enabled; }
 // GenerateRootQC generates QC for root block, caller needs to provide votes for root QC and // participantData to build the QC. // NOTE: at the moment, we require private keys for one node because we we re-using the full business logic, which assumes that only consensus participants construct QCs, which also have produce votes. // TODO: modularize QC construction code (and code to verify QC) to be instantiated without needing private keys. fu
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4447-SEA 1645537649 1984331812</p> <hr> <p>Varnish cache server</p> </body>
 }).filter(Boolean); utilGetSetValue(input,!isMixed? displayValue(tags[field.key]) : '').attr('title', isMixed? mixedValues.join('\n') : undefined).attr('placeholder', isMixed? t('inspector.multiple_values') : _staticPlaceholder || '').classed('mixed', isMixed); }
 if (!isSlaveAttributesMatch(offerHolder, taskRequest, isPreemptibleTask)) { return SlaveMatchState.SLAVE_ATTRIBUTES_DO_NOT_MATCH; } else if (!areSlaveAttributeMinimumsFeasible(offerHolder, taskRequest, activeTaskIdsForRequest)) { return SlaveMatchState.SLAVE_ATTRIBUTES_DO_NOT_MATCH; } final SlavePlacement slavePlacement = taskRequest.getRequest().getSlavePlacement().or(configuration.getDefaultSlavePlacement());
 if len(config.Files) == 0 { config.Files = []string{} for _, f := range []string{"README.*", "LICENSE.*", "LICENCE.*"} { if _, err := os.Stat(f); err == nil { config.Files = append(config.Files, f) } } } if config.Token == "" {
 "ArrayEquals", "MissingOverride", "UnnecessaryParentheses", "PreferJavaTimeOverload", "UnnecessaryLambda", "PreferJavaTimeOverloadOnJava8"); private final ListProperty<String> patchChecks;
 namespace Tests\FrameworkBundle\Unit\Model\Customer; use PHPUnit\Framework\TestCase; use Shopsys\FrameworkBundle\Model\Customer\CustomerUserIdentifier; use Shopsys\FrameworkBundle\Model\Customer\Exception\EmptyCartIdentifierAndNullCustomerUserException; class CustomerUserIdentifierTest extends TestCase {
 namespace Contao\ManagerBundle\EventListener; use Doctrine\DBAL\Event\SchemaAlterTableRenameColumnEventArgs; use Doctrine\DBAL\Schema\Column; /** * @internal
 } if l.log!= nil && l.log.IsDebug() { event.WriteSysEvent(ctx, op, map[string]interface{}{"msg": "registered", "proto": proto}) } else { event.WriteSysEvent(ctx, op, map[string]interface{}{"msg": "registered", "proto": proto}) } return sub, nil
 package org.apache.calcite.test; import org.apache.calcite.jdbc.JavaTypeFactoryImpl; import org.apache.calcite.rel.RelNode; import org.apache.calcite.rel.RelDataType; import org.apache.calcite.rel.RelDataTypeFactory; import org.apache.calcite.rel.RelDataTypeSystem; import org.apache.calcite.rel.type.RelTypeName; import org.apache.calcite.rel.type.RelTypeFactory; import org.apache.calcite.rel.type.RelTypes; import org.ap
 } } [Obsolete("Use NetworkTime.RTT instead")] public float GetRTT() { return (float)NetworkTime.rtt;
 ValidateController disabledValidateController = GetController(false); Resource payload = new Observation(); OperationNotImplementedException ex = await Assert.ThrowsAsync<OperationNotImplementedException>(() => disabledValidateController.Validate(payload, profile: null, mode: null)); CheckOperationOutcomeIssue( ex,
 MAINNET_LATEST_VERSION_INFO_URL, TESTNET_LATEST_VERSION_INFO_URL, STAGING_LATEST_VERSION_INFO_URL, CHECK_INTERNET_CONNECTION_URL, ];
 BlockAndCertValue  = "blockAndCert"    // block+cert request data (as the value of requestDataTypeKey) ) // Constant error messages const ( errorNoRedirectPeers = "redirectRequest: no archiver peers found" errorNotHTTPPeer     = "redirectRequest: error getting an http peer" ) // BlockService represents the Block RPC API type BlockService struct {
 # whether the in_docker check should always return true OVERRIDE_IN_DOCKER = is_env_true("OVERRIDE_IN_DOCKER") def has_docker(): try:
 self.assertEqual(len(alignments), 4) self.assertEqual(len(alignments[0]), 2) for a in alignments: self.assertEqual(len(a), a.get_alignment_length()) for r in a: print("%s %s %i" % (r.seq, r.id, r.annotations["original_length"])) # print(a.annotations)
 } // execTemplate executes a template given a requestPath, template, and metadata func execTemplate(c *Config, mdata *metadata.Data, files []FileInfo, ctx httpserver.Context) ([]byte, error) { mdData := Data{ Context: ctx, Doc:     mdata.Doc, Styles:  c.Styles, Scripts: c.Scripts, Meta:    mdata.Meta, Files:   files, }
 # https://github.com/mitmproxy/mitmproxy/issues/2197 if hf.request.http_version == "HTTP/2.0": hf.request.http_version = "HTTP/1.1" if ":authority" in hf.request.headers: hf.request.headers.insert(0, "host", hf.request.headers.pop(":authority")) self.q.put(hf) ctx.master.addons.trigger("update", lst)
 def get_result(self): """Get the result of minimization.""" # Done with minimization, output log one more time self._report_progress(parameter_name=True) if not self.minimizer.tokenize: return self.get_required_tokens() return str(self)
 #define LONGEST_STR                                                                                                                \ ELEMENT_LONGEST_STR("connect")                                                                                                 \ DELIMITER ELEMENT_LONGEST_STR("header") DELIMITER ELEMENT_LONGEST_STR("body") DELIMITER ELEMENT_LONGEST_STR("request_total")   \ DELIMITER ELEMENT_LONGEST_STR("process") DELIMITER ELEMENT_LONGEST_STR("proxy-idle")                                       \ DELIMITER ELEMENT_LONGEST_STR("proxy-connect") DELIMITER ELEMENT_LONGEST_STR("proxy-request-header")     
 // which ECS agent tries to register the instance where the instance id document is // not available or needed NoIID bool  // DisableIID is true when the agent is running on an instance without an instance ID // and so it cannot register with ECS. DisableIID bool }
 Mongo::VERSION.split('.')[0...2].map(&:to_i) end # # This method is used to merge the default options with the options passed # to the method. # # The default options are: # #   * platform: 'linux' # # The passed in options are: # #   * platform: 'windows' # # The result of the merge will be: # #   * platform: 'windows' def options(
 /* adjust speed for broken vehicles */ if (v->vehstatus & VS_AIRCRAFT_BROKEN) { speed_limit = min(speed_limit, SPEED_LIMIT_BROKEN); if (v->vcache.cached_max_speed < speed_limit) { hard_limit = false; } } if (v->vcache.cached_max_speed < speed_limit) {
 const int64_t padding = shmem_size * 10 / 100;  // Padding per team. int64_t total_size = (shmem_size + 16 + padding) * ((1024 * 80) / team_size); if (total_size > m_scratch_size) { space.deallocate(m_scratch_ptr, m_scratch_size);
 def setUp(self): self.P4 = nx.path_graph(4) self.K3 = nx.complete_bipartite_graph(3,3) self.C4 = nx.cycle_graph(4) self.davis = nx.davis_southern_women_graph() self.top_nodes = [n for n,d in self.davis.nodes(data=True)
 try: body_seek(body_pos) except (IOError, OSError): raise UnrewindableBodyError("An error occurred when rewinding request body " "for redirect/retry.") elif body_pos is _FAILEDTELL: raise UnrewindableBodyError("Unable to record file position for rewinding "
 from.. import utils __all__ = [ 'random_walk'] def random_walk(g, nodes, *, metapath=None, length=None, prob=None): """Generate random walk traces from an array of seed nodes (or starting nodes), based on the given metapath.  Examples -------- >>> import networkx as nx >>> nx.g = nx.barbell_graph(3, 2) >>> nx.random_walk(nx.
 if closeIndex < 0 { closeIndex = len(expanded) - 2 } return "", fmt.Errorf("config file contains unrecognized token: %s", expanded[openIndex:closeIndex]) } return
 daedalus.stores.wallets.refreshWalletsData().then(() => { const walletAmount = daedalus.stores.wallets.getWalletByName(name).amount || new BigNumber(0); if (transferFunds && walletAmount.isZero()) { throw new Error(noWalletsErrorMessage); } done(); })
 @click.option( '--trading-calendar', metavar='TRADING-CALENDAR', default='NYSE', help="The calendar you want to use e.g. XLON. NYSE is the default." ) @click.option( '--print-algo/--no-print-algo',
 int size = mb.readInt(); currentReaders = new ArrayList<>(size); deepCopies = new LinkedList<>(); for (int i = 0; i < size; i++) { LocalityGroupMetadata lgm = new LocalityGroupMetadata(ver, rdr);
 * * The semantics of this kind depend on the language. */ @Experimental int getKind(); }
 mock_issue = self._make_mock_issue() issue_filer.update_issue_impact_labels(self.testcase, mock_issue) six.assertCountEqual(self, ['Security_Impact-ExtendedStable'], mock_issue.labels.added) six.assertCountEqual(self, ['Security_Impact-Stable'], mock_issue.labels.removed)
 return {'new_feat': h} class TransitionDown(nn.Module): """ The Transition Down Module """ def __init__(self, in_channels, out_channels, n_neighbor=64): super(TransitionDown, self).__init__() self.frnn_graph = KNNGraphBuilder(n_neighbor) self.message = KNNMessage(n_neighbor) self.conv = KNNConv([in_channels, out_channels, out_channels])
 assertEquals("00000000-0000-4000-8000-000000000000", min.getString()); // Test conversion from ValueJavaObject to ValueUuid ValueUuid vo_uuid = ValueUuid.fromString(UUID.randomUUID().toString()); assertEquals(UUID.fromString(UUID.randomUUID().toString()), vo_uuid); ValueJavaObject vo_uuid_obj = ValueJavaObject.getNoCopy(vo_uuid, null, null); assertTrue(vo_uuid_obj.convertTo(Value.UUID) instanceof ValueUuid); assertEquals(
 /** Flush the render queue by rerendering all queued components */ function process() { let p; q.sort((a, b) => a._depth - b._depth); while (p = q.pop()) { // forceUpdate's callback argument is reused here to indicate a non-forced update. if (p._dirty) p.forceUpdate(false); }
 // 1) in part header params // 2) as formname // 3) file reference hash (after uploading the file) if fileName = part.FileName(); fileName == "" { fileName = part.FormName() }
 self.assertEqual(s.read_bytes(3), b'foo') self.assertEqual(s.read_bytes(2), b'ba') with self.assertRaises(transaction.SerializationError): s.read_bytes(4) self.assertEqual(s.read_bytes(0), b'') self.assertEqual(s.read_bytes(1), b'r') self.assertEqual(s.read_bytes(0), b'')
 os.symlink(os.path.join(os.pardir, os.pardir, os.pardir, 'Contents', 'MacOS', lib), os.path.join(dest, lib)) # Patch Info.plist to declare URLs support plist_path = os.path.join(app_path, 'Contents', 'Info.plist') plist_data = plistlib.load(f)
 link = "https://github.com/palantir/gradle-baseline#baseline-error-prone-checks", linkType = LinkType.CUSTOM, severity = SeverityLevel.SUGGESTION, summary = "Avoid default cases in switch statements to correctly handle new enum variants. " + "If you want to be able to add new cases to an enum in the future, consider using a when statement instead of a switch statement.") public final class 
 def transitive_closure(G, reflexive=False): """Returns transitive closure of a graph The transitive closure of G = (V,E) is a graph G+ = (V,E+) such that for all v, w in V there is an edge (v, w) in E+ if and only if there
 ExpectedActions:    []testpkg.Action{}, }, }, "Should set the Ready condition status to reflect the denied status if the certificate request is denied": { certificateRequest: gen.CertificateRequestFrom(baseCRNotApproved, gen.SetCertificateRequestStatusCondition(cmapi.CertificateRequestCondition{ Type:               cmapi.CertificateRequestConditionDenied,
 * operations. Violations of this rule will manifest as less than 100% CPU * usage under maximum load (note that this is possible for other reasons too, * for example if the network is the bottleneck or if {@linkplain * JetProperties#JET_IDLE_COOPERATIVE_MIN_MICROSECONDS minimum parking time} is too high). * The processor must also return as soon as the outbox rejects an item * (that is when
 self.matcher = self.pat.match if match else self.pat.search def __call__(self, o): posix_o = os.path.join(os.sep, *o.split(os.sep)) res = self.matcher(str(posix_o)) assert res,f'Failed to find "{self.pat}" in "{posix_o}"' return res.group(1) # Cell
 check_parameters_default_constructible(name, estimator) check_no_fit_attributes_set_in_init(name, estimator) # we cannot leave default params (see https://github.com/Microsoft/LightGBM/issues/833) estimator = estimator(min_child_samples=1, min_data_in_bin=1) for check in _yield_all_checks(name, estimator): if check.__name__ == 'check_estimators_nan_inf': continue  # skip test because LightGBM
 "context" "fmt" apierrors "k8s.io/apimachinery/pkg/api/errors" apiutil "github.com/jetstack/cert-manager/pkg/api/util" "github.com/jetstack/cert-manager/pkg/apis/certmanager"
 # All the unique values in f are the fragments frags = tuple( sorted( [AtomGroup(list(a.ats)) for a in set(f.values())], key=lambda x: x[0].index, ) )
 x509Authorities, err := s.v0.parseMintX509CABundleUpdate(resp) if err!= nil { s.v0.Log.Warnf("Failed to parse an X.509 root update from the upstream authority plugin. Please report this bug. Error: %s", err) continue } return x509Authorities, nil
 else: cmd = compose_cmd(['dpkg', '--compare-versions', v1, 'gt', v2]) NodeControlUtil.run_shell_script(cmd) except ShellError as exc: if exc.stderr: raise
 @classmethod def check_dense(cls, arrays): return any(array.shape not in [arrays[0].shape, (1,)] for array in arrays[1:]) @classmethod
 assertEquals(2, requests.size()); AppDeploymentRequest logRequest = requests.get(0); assertThat(logRequest.getDeploymentProperties().get(AppDeployer.INDEXED_PROPERTY_KEY), is("true")); AppDeploymentRequest timeRequest = requests.get(1); assertThat(timeRequest.getDeploymentProperties().get(AppDeployer.INDEXED_PROPERTY_KEY), is("true")); }
 } private static void stopServer(final ClientContext context, final boolean tabletServersToo) throws AccumuloException, AccumuloSecurityException { MasterClient.executeVoidWithTimeout(context, client -> client.shutdown(Tracer.traceInfo(), context.rpcCreds(), tabletServersToo)); }
 install_requires = [ 'tornado>=4.0,<5', 'python-daemon<3.0', 'toml>=2.0', ] if os.environ.get('READTHEDOCS', None) == 'True':
 def _activate_persistor(self): self._repo_persistor = dnf.persistor.RepoPersistor(self.conf.cachedir) def init_plugins(self, disabled_glob=(), enable_plugins=(), cli=None): # :api """Load plugins and run their __init__().""" if self.conf.plugins: self._plugins._load(self.conf, disabled_glob, enable_plugins) self._plugins._run_init(self, cli) def configure
 end end context 'because a unrecognized item_id was provided' do let(:family_requests_attributes) do [ ActionController::Parameters.new(item_id: 0, person_count: Faker::Number.within(range: 1..10))
 add_event(name=AGENT_NAME, version=CURRENT_VERSION, op=WALAEventOperation.HeartBeat, is_success=True, message=msg, log_event=False) self.counter += 1 io_errors = IOErrorCounter.get_and_reset() hostplugin_errors = io_errors.get("hostplugin") protocol_errors = io_errors.get("protocol")
 // If `options.permissions` is set explicitly to // `false`, permissions checks are bypassed. // // If `options.skipAttachments` is true, the insert operation will be slightly // faster, however this is only safe to use if it is impossible for the // document to contain any attachments. This includes attachments that are // schema fields of widgets, including widgets in spontaneous areas that are // only defined in templates. It does not include attachments reach
 { reference.Reference = $"{referenceInformation.resourceType}/{referenceInformation.resourceId}"; } else { reference.Reference = $"{referenceInformation.resourceType}/{referenceInformation.resourceId}/_history/{referenceInformation.versionId}"; } } else
 render() { const { rewardsOrder, rewardsSortBy } = this.state; const { rewards, isLoading, onLearnMoreClick, locale } = this.props; const { intl } = this.context; const noRewards =!isLoading && ((rewards &&!rewards.length) ||!rewards); const showRewards = rewards && rewards.length > 0 &&!isLoading;
 # Golang stacktraces. golang_panic_match = GOLANG_PANIC_REGEX.match(line) if golang_panic_match: state.crash_type = _reduce_string( golang_panic_match.group(1), GOLANG_PANIC_MAX_LEN) continue # Sanitizer SEGV crashes.
 self.cumulative_stats = CumulativeStats() stats_pane = Pile([(WEIGHT, 0.50, self.latest_stats), (WEIGHT, 0.50, self.cumulative_stats), ]) self.graphs = ThreeGraphs()
 self.segm_head = build_head(segm_head) self.mask_head = build_head(mask_head) def forward(self, img): """Used for computing network flops. See `mmdetection/tools/analysis_tools/get_flops.py`
.endFileIndex(END_FILE_INDEX).build(); } No newline at end of file }
 * @return bool **/ public static function is_tracking_enabled() { return Sensei()->settings->get( self::$usage_tracking_setting_name ) || false; } /**
 DataFrame with asset_id as index and'start_date'/'end_date' columns. calendar : pd.DatetimeIndex The trading calendar to use. holes : dict[int -> tuple[pd.Timestamps]], default None A dict mapping asset ids to the tuple of dates that should have no data for that asset in the output. Yields ------
 */ #include "module/shared_model/mock_objects_factories/mock_command_factory.hpp" #include "module/shared_model/mock_objects_factories/mock_objects_factory.hpp" using ::testing::Return; using ::testing::ReturnRef;
 try { LoadOpenSimLibrary("osimActuators"); testStates("arm26.osim"); testMemoryUsage("arm26.osim"); testMemoryUsage("PushUpToesOnGroundWithMuscles.osim"); } catch (const Exception& e) { cout << "testInitState failed: ";
 import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout; import com.wdullaer.materialdatetimepicker.time.TimePickerDialog; import org.json.JSONException; import org.json.JSONObject; import org.slf4j.Logger;
 outChan := make(chan *PaginateResponse) stopChan := make(chan bool) go func() { defer close(outChan) if msg.PageSize < 1 { outChan <- &PaginateResponse{ ErrorCode: PaginateWrongInput,
 private final BlockHeader header = TestHelpers.createCliqueSignedBlockHeader(headerBuilder, proposerKeys, validatorList); private final EpochManager epochManager = new EpochManager(EPOCH_BLOCK); private final BlockHeaderBuilder builder = BlockHeaderBuilder.fromHeader(headerBuilder.buildHeader()).blockHashFunction(MainnetBlockHashFunction::createHash);
 isUnlimitedUsers: equal('startingUsers', 999999), addonConfigs: attr() });
 build_revision = fuzzer_utils.get_build_revision() job = environment.get_value('JOB_NAME') # fuzzer name is filled by fuzz_task. testcase_run = fuzzer_stats.TestcaseRun(None, job, build_revision, current_timestamp()) testcase_run['command'] = fuzzer_command
 } } errno = 0; int val = strtol(buf, &end, 0); if (errno) return false; if (end!= buf+strlen(buf)) return false;
 """ index = count if count is not None else index if index is None: self.tab_next() return
 // to reconstruct a threshold signature. func EnoughShares(threshold int, sharesNumber int) (bool, error) { if threshold < MinimumThreshold { return false, fmt.Errorf("The threshold cannot be smaller than %d, got %d", MinimumThreshold, threshold) } return sharesNumber > threshold, nil }
 with_label=True, test_mode=False, extra_aug=None, keep_ratio_rescale=True, dataset_scale_factor=1.): self.test_mode = test_mode self.dataset_scale_factor = dataset_scale_factor self.img_infos = self.load_annotations(ann_file) if proposal_file is not None:
 makedir(dirname.c_str()); std::string rng_name; rng_name = dirname + "/rng_seq_generator"; rng_seq.open(rng_name); rng_seq << ::data_seq_generator;
 return promisify(cb => this._logOut(cb)); }, async callFunction(name, args = [], service = undefined) { const cleanedArgs = cleanArguments(args); const stringifiedArgs = EJSON.stringify(cleanedArgs, { relaxed: false }); const result = await promisify(cb => this._callFunction(name, stringifiedArgs, service, cb));
 $filename = md5($group['key']). '.min.'. $this->getFileType(); $concatPath = $this->getResourceCacheDir(). $filename; if (!file_exists($concatPath)) { $pid = getmypid(); $lockfile = "$concatPath.lock"; $lockfileTime = filemtime($lockfile); $handle = fopen($lockfile, 'c+'); if (!is_resource($handle)) {
 virtual bool isMouseCursorActive() const override { #ifdef VITA // required for edge of screen scrolling return true; #endif return ( SDL_GetAppState() & SDL_APPMOUSEFOCUS ) == SDL_APPMOUSEFOCUS; } private:
 /// <summary> /// The NetworkIdentity for this connection. /// </summary> [Obsolete("Use NetworkConnection.identity instead")] public NetworkIdentity playerController { get
 @Test public void correctHttpResponse() throws Exception { PublicMetrics publicMetrics = () -> Collections.singleton(new Metric<Number>("mem.free", 1024)); ResponseEntity<String> response = responseForMetrics(publicMetrics); assertThat(response.getStatusCode(), equalTo(HttpStatus.OK)); assertThat(response.getHeaders().getContentType().toString(),
 this(accumuloPropsLocation, Collections.emptyMap()); } public SiteConfiguration(URL accumuloPropsLocation, Map<String,String> overrides) { config = createMap(accumuloPropsLocation, overrides); } private static ImmutableMap<String,String> createMap(URL accumuloPropsLocation, Map<String,String> overrides) { CompositeConfiguration config = new CompositeConfiguration();
 err = w.WriteMsgWithContext(ctx, &pb.Payment{ Amount: amount, }) if err!= nil { return err }  s.metrics.TotalSentPseudoSettlements.Add(float64(amount)) return nil } // SetPaymentObserver sets the payment observer which will be notified of incoming payments
 PUBSUB_PLATFORMS = ['linux'] MEMORY_SAFE_LANGUAGES = ['java', 'python'] OSS_FUZZ_DEFAULT_PROJECT_CPU_WEIGHT = 1.0 OSS_FUZZ_MEMORY_SAFE_LANGUAGE_PROJECT_WEIGHT = 0.2
 for (int i = 0; i < numLoop; ++i) { model.setStateVariableValues(s, stateValues); // Directly setting values for coordinates does not ensure they // satisfy kinematic constraints. Explicitly enforce constraints // by performing an assembly, now. model.assemble(s); }
 @Nonnull public static synchronized JetInstance getInstance() { if (supplier == null) { supplier = memoizeConcurrent(JetBootstrap::createJetInstance); } return supplier.get(); }
 } ContentValues cv = new ContentValues(); String packageName = context.getPackageName(); String launchActivity = context.getPackageManager().getLaunchIntentForPackage(packageName).getComponent().getShortClassName(); cv.put("tag", packageName + "/" + launchActivity); cv.put("count", count); context.getContentResolver().insert(
 this(null, modifiers, new NodeList<>(), new NodeList<>(), type, new SimpleName(name), parameters, new NodeList<>(), new BlockStmt(), null); } @AllFieldsConstructor public MethodDeclaration(final EnumSet<Modifier> modifiers, final NodeList<AnnotationExpr> annotations, final NodeList<TypeParameter> typeParameters, final Type type, final SimpleName name, final NodeList<Parameter> parameters, final NodeList<ReferenceType> thrownExceptions, final Bl
 projects, err := getRequestedProjects(args, false) if err!= nil { util.Failed("GetRequestedProjects() failed: %v", err) } project := projects[0]
 if frame.ncols < 2: return s = self.random_array(frame.ncols - 1, positive=True) print("[14] Removing columns %r -> ncols = %d" % (s, frame.ncols - len(s))) if python_output:
 * @package */ Blockly.scratchBlocksUtils.duplicateAndDragCallback = function(oldBlock) { return function(e) { // Give the context menu a chance to close. setTimeout(function() {
 elif role == "ALL" and self.need_to_be_owner and self.sig_count > 1: return "{} signatures of any role are required and needs to be owner".format(self.sig_count) def to_dict(self): return { "class_name": self.__class__.__name__, "role": self.role, "require_owner": self.need_to_be_owner, "sig_count": self.sig_count, }  class AuthConstraintAnd(AbstractAuthC
 while(*c && isspacetab(*c)) c++; if(*c && (*c!= ',')) { paramBegin[iParamCount] = c; iParamCount++; c++;
 if (reportOn(target)) { MetricOptions options = MetricOptions.ofOptions(getProperty(optionsDescriptor)); N reportLevel = parseReportLevel(getProperty(reportLevelDescriptor)); N result = Metric.compute(target, options); if (result!= null && reportLevel.compareTo(result) <= 0) { addViolationWithMessage(ctx, target, violationMessage(target, result));
 nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)? nMedianTimePast : pblock->GetBlockTime(); std::vector<const CTxMempoolEntry*> vtxes; addPriorityVtxes(&vtxes); addScoreVtxes(&vtxes); nLastBlockTx = nBlockTx; nLastBlockSize = nBlockSize;
 } bool TransactionsPageResponse::operator==(const ModelType &rhs) const { return nextTxHash() == rhs.nextTxHash() && allTransactionsSize() == rhs.allTransactionsSize() && transactions() == rhs.transactions(); } }  // namespace interface
 AllowedScopes = { DevelopmentIdentityProviderConfiguration.Audience }, // app roles that the client app may have Claims = applicationConfiguration.Roles.Select(r => new Claim(ClaimTypes.Role, r)).ToList(), AuthorizationCodeGrantType = true, ResourceOwnerPasswordGrantType = true, ClientCredentialsGrantType = true, })); }
 */ GUARD(s2n_config_set_session_cache_onoff(config, 1)); GUARD(config->wall_clock(config->sys_clock_ctx, &now)); EXPECT_SUCCESS(s2n_config_add_ticket_crypto_key(config, ticket_key_name, strlen(ticket_key_name), ticket_key, sizeof(ticket_key), now/ONE_SEC_IN_NANOS)); EXPECT_SUCCESS(s2n_connection_set_config(conn, config));
 package jaeger import ( "fmt" "os" )
 }; }; export const requestGetter = (req: Request, systemValue: string) => { const { result } = req.execute(); if (isRequestSet(req)) return result; return systemValue;
 } // Encode span stubs, one by one if err := e.encoder.Encode(stub); err!= nil { return err }
 return } tx, err := c.SendPaymentFromUnencryptedWallet(cfg.Source, target, uint64(cfg.Fee), uint64(cfg.Amount), [32]byte{}, nil, cfg.NumConfirmations) if err!= nil { http.Error(w, fmt.Sprintf("failed to dispense money - %v", err), http.StatusInternalServerError) return
 from azurelinuxagent.ga.exthandlers import ExtHandlerInstance class ExtensionCommandNames(object): INSTALL = "install" UNINSTALL = "uninstall" UPDATE = "update"
 Cmd.Flags().BoolVar(&flagNoReport, "no-report", false, "don't report the state") Cmd.Flags().BoolVar(&flagSafeMode, "safe-mode", false, "migrate in safe mode")  Cmd.Flags().BoolVar(&flagForce, "force", false, "force the migration to start, even if the cluster is not ready") } func run(*cobra.Command, []string) {
 goal_state_fetched = True except Exception as e: msg = u"Exception retrieving the goal state: {0}".format(ustr(traceback.format_exc())) add_event(AGENT_NAME, op=WALAEventOperation.FetchGoalState, version=CURRENT_VERSION, is_success=False, message=msg) if goal_state_fetched:
 $mocks = $this->getConstructorMocks( 1, '', '', '' ); Functions\when( 'current_user_can' )->justReturn( true ); Functions\when( 'get_current_user_id' )->justReturn( 1 ); Functions\when( 'get_rocket_i18n_home_url' )->justReturn( 'http://example.org/' ); Functions\when( 'get_feed_link' )->justReturn( 'htt
 pal[i].unused = 0; } if (BlitterFactory::GetCurrentBlitter()->GetScreenDepth() == 8) { SDL_SetColors(_sdl_screen, pal, _local_palette.first_dirty, _local_palette.count_dirty); } if (_sdl_screen!= _sdl_realscreen && init) { /* When using a shadow surface, also set our palette on the real screen. This lets SDL
 'MyResearch/NewPassword', 'MyResearch/Profile', 'MyResearch/Recover', 'MyResearch/SaveSearch', 'MyResearch/StorageRetrievalRequests', 'MyResearch/UserLogin', 'MyResearch/Verify', 'Overdrive/Hold', 'Overdrive/MyContent', 'OAI/Server', 'Pazpar2/Home', 'Pazpar2/Search', 'Records/Home', 'QR
 "5c2ef2d4eddd2381daa681ac1a901519": true, // Max Goodman, "chromakode" "08abe80bd2da8984534b2d8f7b12c700": true, // Song Gao, "songgao" "eb08cb06e608ea41bd893946445d7919": true, // Miles St
 ) func TestSimulationBF(t *testing.T) { log.AfterTest(t) t.Parallel()  sc, _, err := createBFTree(7, 2) if err!= nil { t.Fatal(err)
 try: avg_size_of_message //= num_of_messages except ZeroDivisionError: avg_size_of_message = 0 current_app.logger.warn("No messages calculated", exc_info=True) current_app.logger.info("Done!")
 return convertDMNOutput(decisionModel.evaluateAll(dmnContext), predictInput); } protected DecisionModel getDecisionModel(DecisionModels decisionModels, ModelIdentifier modelIdentifier) { String[] namespaceAndName = extractNamespaceAndName(modelIdentifier.getResourceId()); return decisionModels.getDecisionModel(namespaceAndName[0], namespaceAndName[1]); }
 } /** * Return the tags associated with the snapshot, or null if no tags are associated with the snapshot. * @return tags associated with the snapshot, or null if no tags are associated with the snapshot. */ default List<String> tags() { return null;
 Assert.Equal(createdResource.Meta.VersionId, readResource.Meta.VersionId); Assert.Equal(createdResource.Meta.LastUpdated, readResource.Meta.LastUpdated); } } }
 return websocket -> { final SocketAddress socketAddress = websocket.remoteAddress(); final String connectionId = websocket.textHandlerID(); String token = getToken(websocket); if (token == null) { LOG.warn("Websocket token not found"); return null; } LOG.trace("token {}", token); LOG.debug("Websocket Connected ({})", socketAddressAsString(socketAddress));
 assert_fatal(src.IsObject(), path + " Irohad config top element must be an object."); const auto obj = src.GetObject(); getValByKey(path, dest.block_store_path, obj, config_members::BlockStorePath); getValByKey(path, dest.torii_port, obj, config_members::ToriiPort); getValByKey(path, dest.internal_port, obj, config_members::InternalPort); getValByKey(path, d
 } func isWindowsOS(os string) bool { for _, windowsOS := range task.ValidOSs() { if os == windowsOS || os == osLinux { return true }
 public static final String CATALOG = "iceberg.mr.catalog"; public static final String HADOOP_CATALOG_WAREHOUSE_LOCATION = "iceberg.mr.catalog.hadoop.warehouse.location"; public static final String CATALOG_LOADER_CLASS = "iceberg.mr.catalog.loader.class"; public static final String SELECTED_COLUMNS = "iceberg.mr.selected.columns"; public static final String CATALOG_NAME = "iceberg.catalog"; public static fi
 { foreach (ResourcePermission permission in ResourcePermissions) { if (permission.Actions?.Count == 0) { yield return new ValidationResult(string.Format(CultureInfo.InvariantCulture, Core.Resources.RoleResourcePermissionWithNoAction, Name)); }
 return fileStore!= null && fileStore.isReadOnly(); } public double getUpdateFailureRatio() { long updateCounter = this.updateCounter; long updateAttemptCounter = this.updateAttemptCounter; MVMap.RootReference rootReference = meta.getRoot();
 } } `; /* eslint-enable graphql/template-strings */ export const queries = { queries: {
 defined( 'ABSPATH' ) || exit;?> <?php echo esc_html( $data['title'] );?> <?php $this->render_settings_fields( $data['page'], $data['id'] );
 namespace caffe { bool NetNeedsUpgrade(const NetParameter& net_param) { for (int i = 0; i < net_param.layers_size(); ++i) { if (net_param.layers(i).has_layer()) {
 end test "does not broadcast for solution run" do # see changes solution not submission for solution run for explanation of this setup exercise = create :practice_exercise, git_important_files_hash: 'da39a3ee5e6b4b0d3255bfef95601890afd80709' solution = create :practice_solution, :published, exercise: exercise submission = create :submission, solution: solution
 func (tw *twServer) WaitAndAssert() { tw.t.Helper() triggerProcessStuff := func() { tw.h.Trigger() // wait for mock twilio server to send messages msgDelay := time.NewTimer(1000 * time.Millisecond)
 ) func main() { ctx, _ := context.WithTimeout(context.Background(), 10*time.Second) // top is a topic that notifies when a video has been uploaded. // sub is a subscription to this topic.
 def slot_code(self, scope): if not self._needs_own(scope): # if the type does not have object attributes, it can # delegate GC methods to its parent - iff the parent # functions are defined in the same module slot_code = self._parent_slot_function(scope) return slot_code or '0'
 return results def __repr__(self): repr_str = self.__class__.__name__ + f'(transforms={self.transforms})' return repr_str
 }, }, { name:   "additional items with the velero.io/exclude-from-backup label are not backed up", backup: defaultBackup().IncludedNamespaces("ns-1").Result(), apiResources: []*test.APIResource{ test.Pods(
 def exit_status(self): return self._proc.exitStatus()
 { Pair<Long, Long> messageAndThreadId; if (message.getSyncContext().isPresent()) { messageAndThreadId = insertSyncTextMessage(masterSecret, envelope, message, smsMessageId); } else { messageAndThreadId = insertStandardTextMessage(masterSecret, envelope, message, smsMessageId); } MessageNotifier.updateNotification(context, masterSecret, messageAndThreadId.second);
 scheme := runtime.NewScheme() velerov1api.AddToScheme(scheme) k8scheme.AddToScheme(scheme) apiextv1beta1.AddToScheme(scheme) // TODO(https://github.com/kubernetes-sigs/kubebuilder/issues/436): Remove once // kubebuilder supports the latest version of apiserver-client-go. // apiextv1beta1.AddToScheme(scheme) kubebui
 } } k.logger.Debugf("could not connect to peer: %v", err) k.logger.Warningf("could not connect to peer: %v", err) // continue to next return false, false, nil }
 return nil, err } if dst.Type.IsUserCM() && dst.ID == "" { return nil, errors.New("cannot set channel member roles for user channel member") }  var cmID, chanID sql.NullString if dst.Type.IsUserCM() { cmID.String, cmID.Valid = dst.ID, true
 protected File generatedResources; @Parameter(property = "kogito.codegen.persistence", defaultValue = "true") protected String generatePersistence; @Parameter(property = "kogito.codegen.rules", defaultValue = "true") protected String generateRules;
 { @"allsaintsday", new string[] { @"allerheiligen" } }, { @"allsoulsday", new string[] { @"allerzielen" } }, { @"christmaseve", new string[] { @"kerstavond" } }, { @"columbus", new string[] { @"columbusday" } }, { @"thanksgiving", new string[] { @"thanksgivingday", @"tha
 // showToken prints the token func showToken(data []byte, out io.Writer) error { _, err := fmt.Fprintln(out, data) if err!= nil { return err }
 ); }); it(`throws an error if the returned compiled template is invalid`, () => { // Emulating an invalid template generated by the LWC compiler. const invalidTemplate = () => '<h1>template</h1>'; registerTemplate(invalidTemplate);
 return 'auth'; } reg.logger().error('Not authenticated with sync target - please check your credentials.'); return 'error'; }
 ), description: shape({ html: string.isRequired }).isRequired }, addToCart: func.isRequired };
 { std::string path = str; const char sep = ( SEPARATOR == '/' )? '\\' : '/'; std::replace( path.begin(), path.end(), sep, SEPARATOR ); return GetBasename( path ); }
 /// </summary> /// <returns>The block that is reserved for the called. It must be passed to Return when it is no longer being used.</returns> #if DEBUG private MemoryPoolBlock Lease(string memberName = "", string sourceFilePath = "", int sourceLineNumber = 0) { Debug.Assert(!_disposedValue, "Block being leased from disposed pool!"); #else
'monthly' => 1, ]; $input['automatic_cleanup_frequency'] = isset( $input['automatic_cleanup_frequency'], $cleanup_frequencies[ $input['automatic_cleanup_frequency'] ] )? $input['automatic_cleanup_frequency'] : $this->options->get( 'automatic_cleanup_frequency' ); if ( 1!== $input['schedule_automatic_cleanup'] &&! isset( $cleanup_frequencies[ $input['automatic_cleanup_fr
 class Track < ApplicationRecord has_many :users has_many :track_courses, dependent: :delete_all has_many :courses, through: :track_courses validates :title, presence: true
 * @param {String} props.signInPageUrl - Sign In Page url * * @returns {{ *   handleOnCancel: function, *   initialValues: object, *   signInPageUrl: string * }} */ export const useCreateAccountPage = props => {
 _engine->updatePalette( StandardPaletteIndexes() ); } bool Cursor::isFocusActive() const { return engine().isMouseCursorActive();
 '}', '.blocklyDragging>.blocklyPath {', 'fill-opacity:.8;','stroke-opacity:.8;', '}', '.blocklyDisabled>.blocklyPath {',
 package tech.pegasys.pantheon.consensus.ibft.jsonrpc.methods; import tech.pegasys.pantheon.consensus.ibft.IbftBlockInterface; import tech.pegasys.pantheon.consensus.ibft.blockchain.BlockchainQuerier; import tech.pegasys.pantheon.consensus.ibft.blockchain.BlockchainQuerierImpl; import tech.pegasys.pantheon.ethereum.chain.Blockchain; 
 network.disconnect(this, Optional.ofNullable(reason)); } public void disconnect(@NotNull final DisconnectReason reason) { network.disconnect(this, Optional.of(reason)); }  @Override public SocketAddress getLocalAddress() { throw new UnsupportedOperationException();
 parsed = [] headers = {'User-Agent': self._user_agent} # Some videos may be also available on DailyMotion (especially on CNews) if videos['ID_DM']!= '': for stream in self.session.streams('https://www.dailymotion.com/video/' + videos['ID_DM']).items(): yield stream for quality, video_url in list(videos['MEDIA']['VIDEOS'].items()):
 'checkout_date'		=> 'Checkout Date', 'checkin_date'		=> 'Checkin Date', 'checkout_to'		=> 'Checkout to', 'cost'				=> 'Purchase Cost', 'create'			=> 'Create Asset', 'date'				=> 'Purchase Date',
 private def with_cache(context = :cursor, &block) return yield unless QueryCache.enabled? return yield if system_collection? key = cache_key.push(:first) if QueryCache.cache_table.has_key?(key) instrument(key) { QueryCache.cache_table[key] }
 } // Local sources are listed last, keep searching for the last possible match packageNames = append(packageNames, matches[1]) logger.Log.Debugf("'%s' is available from package '%v'", pkgVer.Name, packageNames) } return })
 const SimTK::Real& muscleTendonVelocity, const SimTK::Real& activation, const bool& ignoreTendonCompliance, const bool& isTendonDynamicsExplicit, const MuscleLengthInfo& mli, FiberVelocityInfo& fvi, const SimTK::Real& normTendonForce = std::numeric_limits<SimTK::Real>::quiet_NaN(), const SimTK::Real& normTendonForceDer
 } for _, job := range jobs { cmd, err := o.jobExecutor(job.Name) if err!= nil { return err }
 from mmdet.utils import Registry IOU_CALCULATOR = Registry('iou_calculator')
 protected View inflate(LayoutInflater layoutInflater, ViewGroup viewGroup) { View inflatedView = layoutInflater.inflate(R.layout.item_notification, viewGroup, false); ButterKnife.bind(this, inflatedView); if (isSwipeEnabled) { swipeLayout.setSwipeEnabled(false); }else { swipeLayout.setSwipeEnabled(true);
 Args: url: url to save as a bookmark. If None, use url of current page. title: title of the new bookmark """ if url and not title: raise cmdexc.CommandError('Title must be provided if url has''been provided')
 ), 'output_filename': 'js/machinery.min.js', }, 'homepage': {'source_filenames' : ( 'js/lib/fullpage.js',
 app.get("/:id/:domain", function (req, res) { let shotId = req.params.id + "/" + req.params.domain; let simple = shouldRenderSimple(req); Shot.get(req.backend, shotId).then((shot) => { if (! shot || shot.clipNames().length === 0) { return simpleResponse(res, "Not found", 404); } req.shot = shot; if (simple) { return require
 repos = list(self.base.repos._iter_disabled_with_enabled_metadata()) for repo in repos: repo.enable() self.base.add_repo_to_sack(repos) self.base._setup_excludes_includes() try: self.base.install(pkg_spec, strict=strict, forms=forms)
 assert r.request.url == pr.request.url assert r.request.headers == pr.request.headers def test_response_lines(self): """ iter_lines should be able to handle data dribbling in which might not be lined up ideally. """ mock_chunks = [ 'This \r\n',
 Kokkos::Impl::initialize_space_factory<SYCLSpaceInitializer>("170_SYCL"); void SYCLSpaceInitializer::initialize(const InitArguments& args) { // If there are no GPUs return whatever else we can run on if no specific GPU is // requested. const auto num_gpus = sycl::device::get_devices(sycl::info::device_type::gpu).size();
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4423-SEA 1645534124 1473633716</p> <hr> <p>Varnish cache server</p> </body>
 for name, test := range tests { t.Run(name, func(t *testing.T) { test.builder.Clock = fixedClock test.builder.T = t test.builder.Init() defer test.builder.Stop()
 def _list_from_csv(csv_string, caster=None): """Transform the given comma-separated string into a list (PRIVATE). :param csv_string: comma-separated input string :type csv_string: string
 throws IOException, AccumuloException, AccumuloSecurityException, TableNotFoundException; } private static class ConcurrentKeyExtentCache implements KeyExtentCache { private static final Text MAX = new Text();
 # # @since 2.0.0.rc.7 def process_attribute(name, value) responds = respond_to?("#{name}=") if!responds && store_as = aliased_fields[name.to_s] name = store_as end responds = respond_to?("#{name}=")
 k2ch = k2c/hbar; K6h = K6/hbar; if (strstr(update->integrate_style,"respa")) { ilevel_respa = ((Respa *) update->integrate)->ilevels-1; if (respa_level >= 0) ilevel_respa = MIN(respa_level,ilevel_respa); }
 baseYmlName: '.travis.yml', externalLinks: service(), buttonLabel: computed('copied', 'rawConfig.source', function () { let source = this.get('rawConfig.source'); return this.get('copied')? 'Copied!' : `Copy ${fileNameWithoutSha(source)}`; }),
 return dict(name=self.name, module=self.module, params=self.params, description=self.description, stopping_conditions=[fact.display for fact in self.stopping_conditions]) def __init__(self, identifier, name, module, params, stopping_conditions=None, description=None): super().__init__() self.identifier = identifier self.name = name self.module = module self.params = params
 import threading import os import subprocess import time import types import select import socket from scapy.consts import DARWIN, FREEBSD, OPENBSD, WINDOWS from scapy.compat import plain_str from scapy.data import ETH_P_ALL, MTU
 from netlib import version def sysinfo(): data = [ "Mitmproxy version: %s" % version.VERSION, "Python version: %s" % platform.python_version(), "Platform: %s" % platform.platform(), "OpenSSL version: %s" % get_openssl_version(), ] d = platform.linux_distribution() t = "Linux distro: %s %s %s" % d
 func TestAlertmanagerReloadConfig(t *testing.T) { alertmanager := framework.MakeBasicAlertmanager("reload-config", 1) firstConfig := ` global:
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4458-SEA 1645542551 3059319639</p> <hr> <p>Varnish cache server</p> </body>
 } static void init(TestHiveShell shell, TestTables testTables, TemporaryFolder temp, String engine) { shell.openSession(); for (Map.Entry<String, String> property : testTables.properties().entrySet()) {
 private final HazelcastInstance instance; private final ILogger logger; private final IMap<Long, Integer> executionCounts; private final IMap<Long, JobRecord> jobRecords; private final IMap<Long, JobExecutionRecord> jobExecutionRecords; private final IMap<Long, JobExecutionRecord> jobExecutionRecordsByJob; private final IMap<Long, JobResult> jobResults;
 def generate_c_code(self, env, options, result): # Check for a common gotcha for new users: naming your.pyx file after the.c file you want to wrap if not is_cython_generated_file(result.c_file, allow_failed=False): error(self.pos, 'The output file already exists and does not look like it was generated by Cython: "%s"' % os.path.basename(result.c_file)) modules = self.referenced_modules
 * There are a few places where we need to repopulate * the comments. * * @return 	void */ private function _repopulate_comment()
 def resize_rows(self, nrows): curr_nrows = self.nrows if curr_nrows < nrows: append = [None] * (nrows - curr_nrows)
 func (ddb *DoltDB) PullChunks(ctx context.Context, tempDir string, srcDB *DoltDB, stRef types.Ref, progChan chan datas.PullProgress, pullerEventCh chan datas.PullerEvent) error { if datas.CanUsePuller(srcDB.db) && datas.CanUsePuller(ddb.db) { puller, err := datas.NewPuller(ctx, tempDir, defaultChunksP
 * * @param WP_Query $query The WP_Query instance (passed by reference). */ if (! doing_action( 'pre_get_posts' ) ) { do_action_ref_array( 'pre_get_posts', array( &$this ) ); }
 } @Test public void testLambdaBug1470() throws Exception { String code = readAsString(ParserCornersTest.class.getResourceAsStream("LambdaBug1470.java")); parseJava18(code); }
 ts.exec("createtable " + tableName + " -sf " + splitsFile, true); Collection<Text> createdSplits = client.tableOperations().listSplits(tableName); assertEquals(expectedSplits, new TreeSet<>(createdSplits)); } finally { Files.delete(Paths.get(splitsFile)); }
 */ /** * Upgrade Script: 1.8.1, 1.8.2, 1.8.3 or 1.8.4 */ $upgrade_detail = array(
 } private boolean isContinuationChar(byte b) { return b >= CONTINUATION_CHAR_START && b <= CONTINUATION_CHAR_END; } private int numberOfFollowingBytes(byte b) { if (b >= CONTINUATION_CHAR_WITH_1_BYTE && b <= CONTINUATION_CHAR_WITH_1_BYTE_END) { return 1; } else if (b >= (byte)0b1110_0000 && b
 for i := range actions { err := ql.limiter.Wait(context.TODO()) if err!= nil { klog.Errorf("QPS load exec error %s", err) } wg.Start(actions[i]) }
 world_size=world_size, rank=proc_id) train_mask, val_mask, test_mask, n_classes, g = data nfeat = g.ndata.pop('feat').to(device) if device.type == "cuda": labels = g.ndata.pop('label').to(device) else: labels = g.ndata.pop('label') in_feats = nfeat.shape[1] train_nid = th.LongTensor(np.nonzero(train_m
 } if strings.HasPrefix(field, "!") { field = field[1:] headers := *m headers[field] = nil m = &headers
 *  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ***********************************************************************************************************************/ #include "QVariant.hpp" #include "Assert.hpp"
 "-Wno-switch-enum", "-Wno-weak-template-vtables", "-Wno-weak-vtables", ] else: ext.compiler.add_compiler_flag(
 if __name__ == '__main__': sys.path.append('') setup_logger() if not validate_environment(): logging.error('Environment is not properly configured for running Caldera, Exiting') exit(1) parser = argparse.ArgumentParser('Welcome to the system') parser.add_argument('-E', '--environment', required=False, default='local', help='Select an env. file to use') parser.add_argument('--fresh', action='store_true', required=False
.limit(5).order(created_at: :desc) @completed_learnings = current_user.learnings.where(status: 3).order(updated_at: :desc) @my_seat_today = current_user.reservations.find_by(date: Date.current)&.seat&.name render action: :index end else
 return Arrays.stream(validators).map(PantheonNode::getAddress).sorted().toArray(Address[]::new); } public Condition proposerAtChainHeadEquals(final PantheonNode proposer) { return new ExpectBlockHasProposer(eth, proposer.getAddress()); }
 // This plugin interferes with gradles native annotation processor path configuration so need to configure // it as well. project.getPluginManager().withPlugin("org.inferred.processors", processorsplugin -> { processorsplugin.getOptions().setAnnotationProcessorPath(Paths.get(project.getRootProject().projectDir.absolutePath, "build", "processor").toString());  project.getConfigurations().named(ErrorProneJavacPluginPlugin.CONFIGURATION_NAME)
 long recentPubDate = recentPubDates.containsKey(feed.getId())? recentPubDates.get(feed.getId()) : -1; NavDrawerData.FeedDrawerItem drawerItem = new NavDrawerData.FeedDrawerItem(feed, feed.getId(), feedCounters.get(feed.getId()), playedCounters.get(feed.getId(), -1), recentPubDate); if (FeedPreferences.TAG_ROOT.equals(tag)) { items.add(drawerItem); continue; } NavDrawerData.FolderDr
 // variable private volatile boolean enable = SystemConfig.getInstance().getEnableStatistic() == 1; private int statisticTableSize = SystemConfig.getInstance().getStatisticTableSize(); private int statisticQueueSize = SystemConfig.getInstance().getStatisticQueueSize(); private StatisticManager() {
 // request proposal for the current round auto proposal = network_client_->onRequestProposal(current_round_); auto final_proposal = this->processProposalRequest(std::move(proposal)); // vote for the object received from the network proposal_notifier_.get_subscriber().on_next(std::move(final_proposal)); ))),
 return nil } // formatKey returns a comma-separated string representation of the key given. func formatKey(ctx context.Context, nbf *types.NomsBinFormat, key types.Value) (string, error) { tuple, ok := key.(types.Tuple) if!ok { return "", fmt.Errorf("Expected types.Tuple but got %T", key) } var vals []types.Value iter, err := tuple.Iterator() if err!= n
 if len(actions) == 0 { return } log.Infoln("Recommended follow-up actions:") for _, followup := range actions { if len(actions) == 1 { log.Infof("%s\n", followup) } else { log.Infof("- %s\n", followup) } } }
 self.base_class_path = [self.selenium_server_jar_path, self.junit_path, self.junit_listener_path, self.hamcrest_path, self.json_jar_path] self.base_class_path.extend(self.scenario.get("additional-classpath", [])) self.base_class_path = [os.path.abspath(x) for x in self.base_class_path] def prepare(self): """
 foreach ($this->getElements() as $el) { $isCheckbox = $el['type'] === 'checkbox'; $requireOne = $isCheckbox && ($el['requireOne']?? false); $required = $el['required']?? $requireOne; $fieldValidators = []; if ($required || $requireOne) {
 case "http": outbound = http.NewOutbound(fmt.Sprintf("http://%s:8081", server)) case "tchannel": ch, err := tchannel.NewChannel(tchannel.ChannelOptions{ ChannelName: "yarpc-test", }) if err!= nil { behavior.Fatalf(s, "couldn't create tchannel: %v", err) }
 { parent::configure(); $this->setDescription('Create a user.') ->setDefinition([ new InputArgument('username', InputArgument::REQUIRED, 'The username'), new InputArgument('email', InputArgument::REQUIRED, 'The email'),
 return { id: currNote.id, parent_id: currNote.parent_id, title: currNote.title, content: currNote.content, }; } }
 nx.write_gexf(G,fh) fh.seek(0) H=nx.read_gexf(fh) assert_true(H.node[1]['testattr'], True)
 } protoerr := protobuf.NewError(yarpcerrors.CodeAborted, "test error", protobuf.WithErrorDetails(&types.StringValue{Value: "val"})) yerr := yarpcerrors.FromError(protoerr) p := NewPortProvider(t) tests := []struct { name     string
 flowExporter := exporter.NewFlowExporter( flowrecords.NewFlowRecords(connStore), o.config.FlowExportFrequency) go func() { for { if err := flowExporter.CheckAndDoExport(o.flowCollector, pollDone); err!= nil { log.Errorf("export error: %s", err) } } }() } <-stopCh
 }), ) tppCRWithCustomFields := gen.CertificateRequestFrom(tppCR, gen.SetAnnotations(map[string]string{ CustomFieldsAnnotationKey: `[{"name": "cert-manager-test", "value": "test ok"}]`})) tppCRWithInvalidCustomFields := gen.CertificateRequestFrom(tppCR, gen.SetAnnotations(map[string]string{ CustomFieldsAnnotationKey: `[{"name": cert-manager-test}]`})) c
 */ public static function table_drop( $table ) { $sql = "DROP TABLE ". self::get_pods_prefix(). "{$table}"; return self::query( $sql ); }
 total = self.squared_sum - self.sum * mean raw_scores = 1 - (self.res / total) raw_scores = tf.where(tf.math.is_inf(raw_scores), tf.zeros_like(raw_scores), raw_scores) if self.multioutput == "raw_values":
 assert.Equal(t, 1, len(tasks)) task := tasks[0] assert.Equal(t, "arn:aws:ecs:us-west-2:111111111111:task/e4e6c98c-aa44-4146-baf9-431b04c0d162", task.Arn) assert.Equal(t, "chc-state", task.Family) assert.Equal(t, 1, len(task.Containers))
 return data def readline(self): """Read a single line from the BGZF file.""" i = self._buffer.find(self._newline, self._within_block_offset) # Three cases to consider, if i == -1:
 ) => { if (!imageURL ||!type) return ''; const imageRatio = ratio || DEFAULT_WIDTH_TO_HEIGHT_RATIO; const generateSrcsetUrl = generateUrl(imageURL, type); return Array.from(imageWidths, ([, value]) => value)
 } return ipAddr case IPSetTypeHashIPPort: // The member should be of the format <IP>,<port number>,(tcp|udp) parts := strings.Split(member, ",") if len(parts)!= 2 { log.WithField("member", member).Panic("Failed to parse IP,port IP set member")
 namespace MvvmCross.Forms.Presenters { /// <summary> /// A presenter for MvxFormsPage. /// </summary> /// <typeparam name="TView">The type of the view to be presented.</typeparam> public abstract class MvxFormsPagePresenter<TView> : MvxViewPresenter<TView> { public const string ModalPresentationParameter = "modal";
 } cmd := []string{"go", "build"} if ctx.Config.Build.Flags!= "" { cmd = append(cmd, strings.Fields(ctx.Config.Build.Flags)...) } cmd = append(cmd, "-ldflags="+ldflags, "-o", output, ctx.Config.Build.Main) if err := run(goos, goarch, cmd); err!= nil {
 # REALLY Needs to use columns! print(fmt % (fill_exact_width(_("ID"), 6, 6), fill_exact_width(_("Action(s)"), 14, 14), fill_exact_width(Packages, 53, 53))) print("-" * 79) fmt = "%6u | %s | %-50s" num = 0
 <?php /** * Finds whether a template name is used as a custom template for the currently active theme. * * @access private * @since 5.8.0
 Preconditions.checkArgument(repeatedElement.isRepetition(Type.Repetition.REPEATED), "Invalid list: inner group is not repeated"); Preconditions.checkArgument(repeatedElement.isPrimitive() || repeatedElement.asGroupType().getFieldCount() <= 1, "Invalid list: repeated group is not a single field or primitive:\n%s", list); visitor.beforeRepeatedElement(repeatedElement);
 public static class TestPerson implements Serializable { private String name; private int age; private boolean status; private static final long serialVersionUID = -8795840361162764146L; public TestPerson() { }
 return false; } return isset($container->getRemovedIds()[$strClass]); } /**
 url = flow.request.pretty_url else: url = flow.request.url if self.flow_detail < 1 and len(url) > get_terminal_size()[0] - 25: url = url[:get_terminal_size()[0] - 25] + "…" url = click.style(strutils.escape_control_characters(url), bold=True)
 execute = pyqtSignal(str) def __init__(self, _namespace, parent): """Constructor.
 private readonly TimeSpan _minWaitTime; private readonly TimeSpan _maxWaitTime; public RetryExceptionPolicyFactory(CosmosDataStoreConfiguration configuration) { EnsureArg.IsNotNull(configuration, nameof(configuration));
 var pr = this.config.DateParser.Parse(ers[0], refDateTime); var futureDate = (DateObject)((DateTimeResolutionResult)pr.Value).FutureValue; var pastDate = (DateObject)((DateTimeResolutionResult)pr.Value).PastValue; ret.FutureValue = futureDate.Date.AddDays(1).AddSeconds(-1); ret.PastValue = pastDate.Date.AddDays(1).AddSeconds(-1); ret.Success 
 MulticastSocket multicastSocket = null; SocketAddress sa = null; NetworkInterface ni = PMS.get().getServer().getNetworkInterface(); try { sa = new InetSocketAddress(getIPv4MulticastAddress(), UPNP_PORT); multicastSocket = getNewMulticastSocket(); multicastSocket.joinGroup(sa, ni); for (String NT: NT_LIST) {
 }); } async setupEmbarkJS() { await this.events.request2("embarkjs:console:register",'storage', 'ipfs', 'embarkjs-ipfs'); this.events.request("embarkjs:plugin:register",'storage', 'ipfs', 'embarkjs-ipfs'); this.events.on("storage:started", () => { let config = this.embark.config.storageConfig.dappConnection || []; this.e
.option('-b, --bare', 'Scaffold project without beginner instructions').action((name, cmd) => { const options = cleanArgs(cmd) if (program.args.length > 1) { program.outputHelp() console.log(chalk.red.bold('\n Kindly provide only one arguement as the appname')) } // --git makes commander to default git to true if (process.argv.includes('-g') || process.argv.inclu
 app.get("/:id/:domain", function (req, res) { let shotId = req.params.id + "/" + req.params.domain; Shot.get(req.backend, shotId).then((shot) => { if (! shot || shot.clipNames().length === 0) { simpleResponse(res, "Not found", 404); return; }
 oldVNode._dom == oldDom && oldDom.parentNode!= parentDom ) { // The above condition is to handle null placeholders. See test in placeholder.test.js: // `efficiently replace null placeholders in parent rerenders` oldDom = getDomSibling(oldVNode); }
 std::unique_ptr<optimizer> build_no_optimizer_from_pbuf( google::protobuf::Message const& msg, lbann_comm* comm) { return nullptr; } using factory_type = lbann::generic_factory<
 closed chan bool } // LocalMaxBuffer is the number of packets that can be sent simultaneously to the // same address. const LocalMaxBuffer = 200
 if (!SUPPORTED_PACKAGE_MANAGERS.includes(this.bin)) { log() warn(`Unknown package manager: ${this.bin}. It may not be well supported and we are now treating it like npm but potential errors could happen. For example, it might not be able to install packages globally.`) PACKAGE_MANAGER_CONFIG[this.bin] = PACKAGE_MANAGER_CONFIG.npm } }
 elif'reg_class_agnostic' in config.model.bbox_head.keys(): reg_cls_agnostic = config.model.bbox_head \.reg_class_agnostic del config.model.bbox_head return is_two_stage, is_ssd, is_retina, reg_cls_agnostic
 for _, span := range spans { span.End() } // Only one span should be sampled meaning only one execution of // executionTracerTaskEnd. if got, want := n, uint64(1); got!= want { t.Fatalf("Execution tracer task ended for %v spans; want %v", got, want) }
 for (int i = 0; i < union.getInputs().size(); i++) { RelNode input = union.getInput(i); List<Pair<RexNode, String>> newChildExprs = new ArrayList<>(); for (int j = 0; j < refsIndex.cardinality(); j++) { newChildExprs.add( Pair.<RexNode, String>of(rexBuilder.makeInputRef(input, j), input.getRowType
 package org.apache.rocketmq.remoting.netty; import io.netty.handler.codec.compression.ZlibWrapper; import io.netty.handler.ssl.ClientAuth; import io.netty.handler.ssl.SslContext; import io.netty.handler.ssl.SslContextBuilder; import io.netty.handler.ssl.SslProvider;
 private final SparkSession spark; private final JavaSparkContext sparkContext; private final AtomicInteger jobCounter = new AtomicInteger(); protected BaseSparkAction(SparkSession spark) { this.spark = spark;
 return false, err } err = withContextTx(ctx, a.DB, func(ctx context.Context, tx *sql.Tx) error { if input.ClearStart == nil { input.ClearStart = &input.Start } if input.ClearEnd == nil { input.ClearEnd = &input.End } return a.ScheduleStore.SetTemporarySchedule(ctx, tx, schedID, schedule.TemporarySchedule{ Start:  input.Start,
 try { parent::deleteAction(); return $this->redirectToEditionTemplate(); } catch (CustomerException $e) { $error_msg = $e->getMessage();
 } /** * @param  MethodStorage  $method_storage * @param  CodeLocation   $code_location * @return false|null
 CommonsApplication application = CommonsApplication.getInstance(); compositeDisposable.add( MediaWikiApi.getUploadCount(application.getCurrentAccount().name).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(
 { /** * Only uncompressed points are supported by the server and the client must include it in * the extension. Just skip the extension. */ return 0; }
 end end module BSON class InvalidDocument def inspect
 * @return bool */ private function is_user_allowed() { return ( rocket_get_constant( 'WP_CLI' ) || current_user_can( 'rocket_manage_options' ) ) && rocket_valid_key(); } /**
 return <-done, <-errChan } func (b *Bastion) handleUpdate(ctx context.Context, ur *WorkspaceUpdateRequest) { var ws *Workspace var errs []error
 } var q = stringQs(location.hash.substring(1)), chosen = q.background || q.layer, extent = parseMap(q.map), recent = (context.storage && context.storage('background')) || null, best; backgroundSources = imagery.map(function(source) {
 try: stream = openfunction(filename, mode=mode) except (IOError, OSError) as err: if errno.errorcode[err.errno] in ['ENOENT', 'EACCES', 'EISDIR']: six.reraise(*sys.exc_info()) return None
 // 9) Add 'ipToTask' map to state file // 10) Add 'healthCheckType' field in 'apicontainer.Container' // 11) //   a) Add 'PrivateDNSName' field to 'api.ENI' //   b) Remove `AppliedStatus` field from 'apicontainer.Container' // 12) Deprecate 'TransitionDependencySet' and add new 'TransitionDependen
 rocket_first_install(); $this->assertSame( 1, Filters\applied( 'rocket_first_install_options' ) ); } public function addProvider() {
 // from config loader (eg. a http loader) with given interval. // // EXPERIMENTAL: Subject to change. PullInterval caddy.Duration `json:"pull_interval,omitempty"` } // IdentityConfig configures management of this server's identity. An identity
 EXPECT_FAILURE_WITH_ERRNO(s2n_negotiate_test_server_and_client(server_conn, client_conn), S2N_ERR_BAD_MESSAGE); /* Read the remaining early data properly */ EXPECT_SUCCESS(s2n_recv_early_data(server_conn, actual_payload, sizeof(actual_payload), &data_size, &blocked));
 Constants.VERSION_MINOR < 4); /** * System property {@code h2.oldResultSetGetObject}, {@code true} by default. * Return {@code Byte} and {@code Short} instead of {@code Integer} from * {@code ResultSet#getObject(...)} for {@code TINYINT} and {@code SMALLINT} * values. */ public static final boolean OLD_RESULT_SET_GET_OBJECT = Utils.getProperty("h2.oldResultSetGetObject", true
 javaConvention.getTargetCompatibility().toString()))); project.getPluginManager().apply(ScalaStylePlugin.class); TaskCollection<ScalaStyleTask> scalaStyleTasks = project.getTasks().withType(ScalaStyleTask.class); project.getTasks().withType(ScalaStyleTask.class).configureEach(scalaStyleTask -> { scalaStyleTask.setConfigLocation(project.getRootDir().toPath()
 // make sure we process item without checking integrity assert.Equal(t, 1, called) }
 Notes ----- The measure is described in [1]_. The algorithm is presented in [2]_. An initial algorithm is mentioned in [3]_. This function uses an improved algorithm presented in [4]_. The number of nodes in the group must be a maximum of n - 2 where `n` is the total number of nodes in the graph.
 } var file = filepath.Join(primeDir, "meta", "snap.yaml") log.WithField("file", file).Debug("creating snap metadata") var metadata = &Metadata{ Version:       ctx.Version,
 } const fheroes2::Sprite & panel = fheroes2::AGG::GetICN( ICN::REQSBKG, 0 ); Rect rt( display.width() - panel.width() - 35, 10, panel.width(), panel.height() ); fheroes2::ImageRestorer background( display, rt.x - SHADOWWIDTH, rt.y, rt.w + SHADOWWIDTH, rt.h + SHADOWWIDTH );
 { tagEntryInfo tag; /* check if a container before kind is modified by prototype */ Assert (kind >= 0); /* BTW should we create a context for a prototype? */ bool container = isContainer(kind);
 "github.com/kiali/kiali/models" "github.com/kiali/kiali/prometheus" "github.com/kiali/kiali/prometheus/internalmetrics" ) const defaultNamespaceLabel = "namespace"
 return fastquery.FastQuery(self.connection) def get_validators(self, height=None): result = backend.query.get_validator_set(self.connection, height) validators = result['validators'] for v in validators: v.pop('address')
 m.poster_time, m.subject, m.id_topic, m.id_member, m.id_msg, m.id_board, b.name AS board_name, COALESCE(mem.real_name, m.poster_name) AS poster_name, '. ($user_info['is_guest']? '1 AS is_read, 0 AS new_from' :'COALESCE(lt.id_msg, lmr.id_msg, 0 >= m.id_msg_modified
 statusBar.SetCenter( dst_pt.x + bar.width() / 2, dst_pt.y + 12 ); // redraw resource panel const Rect& rectResource = RedrawResourcePanel( cur_pt ); // button exit dst_pt.x = cur_pt.x + 553;
 { public Task Run() { using (var pool = new MemoryPool()) { var filePath = Path.GetFullPath("Program.cs");
 private final Address recipient; private final VoteType voteType; private static final ImmutableBiMap<VoteType, Byte> voteToValue = ImmutableBiMap.of( VoteType.ADD_NONCE, (byte) 0xFF, VoteType.DROP_NONCE, (byte) 0x0); public Vote(final Address recipient, final VoteType voteType) { this.recipient = recipient;
 } @Override public void peerBlacklisted(final PeerConnection peerConnection) { final Address peerAddress = peerConnection.getPeer().getAddress(); peerBlacklist.put(peerAddress, peerConnection); } @Override public void peerWhitelisted(final PeerConnection peerConnection) { final Address peerAddress = peerConnection.getPeer().getAddress(); peerBlacklist.remove(peerAddress); }
 String containerName = String.format("%s%s", configuration.getDockerPrefix(), taskProcess.getTask().getTaskId()); int possiblePid = dockerClient.inspectContainer(containerName).state().pid(); if (possiblePid == 0) { LOG.warn(String.format("Container %s has pid %s (running: %s). Will not try to get threads", containerName, possiblePid, dockerClient.inspectContainer(containerName).state().runnin
 # See the License for the specific language governing permissions and # limitations under the License. """Forseti installer CLI config object.""" from config import Config from..util.constants import TEMPLATE_TYPE_CLIENT class ClientConfig(Config): """Forseti installer CLI config object.""" def __init__(self, **kwargs): """Initialize.
 { bool has_child_methods = false; /* skip whatever is the value */ while (! isType (token, TOKEN_COMMA) &&! isType (token, TOKEN_CLOSE_CURLY) &&
 errlog  *log.Logger } // newDefaultProcessContext returns the default processContext from global variables. func newDefaultProcessContext() (*osProcessContext, error) { workdir, err := os.Getwd() if err!= nil { return nil, err
 // See SEC-2002 @Test public void onSessionChangePublishesMigrationEventIfMigrateAttributesIsTrue() throws Exception { SessionFixationProtectionStrategy strategy = new SessionFixationProtectionStrategy(); strategy.setMigrateAttributes(true); HttpServletRequest request = new MockHttpServletRequest(); HttpSession session = request.getSession();
 // Ask each dirty IP set to write its updates to the stream. var writeErr error s.dirtyIPSetIDs.Iter(func(item interface{}) error { if!s.ipSetIDNeeded(item.(string)) { return nil } ipSet := s.ipSetIDToIPSet[item.(string)]
 headers["Content-Type"] = "application/json" self.log.debug("Request: %s %s %s", log_method, url, data[:self.logger_limit] if data else None) with log_std_streams(logger=self.log): response = self.http_request(method=log_method, url=url, data=data, headers=headers, cookies=self._cookies, timeout=self.timeout, verify=self.verify) resp = response.content if not isinstance(resp, str):
 namespace Contao\NewsBundle\EventListener; use Contao\Config; use Contao\CoreBundle\Framework\ContaoFrameworkInterface; use Contao\I18n; use Contao\Input; use Contao\News;
 # create daily and cumulative stats dataframe daily_perfs = [] for perf in perfs: if 'daily_perf' in perf: daily_perfs.append(perf['daily_perf']) else: cum_perfs.append(perf)
 def warn_about_first_description_arg_behavioral_change_in_rspec_3 return unless behavior_change = self[:description_arg_behavior_changing_in_rspec_3]  RSpec.warn_deprecation(<<-EOS.gsub(/^\s+\|/, '')) |The semantics of `describe <a #{behavior_change.arg.class.name}>` are changing in RSpec 3. In RSpec 2, |this would be treated as metadata, but
 e := escape.Escape(k, func(runes []rune, i int) bool { c := runes[i] switch { case escape.IsIdentifier(c): return false case c == '_': return false
 AttachChild(m_icon); m_link_text = new LinkText(GG::X0, GG::Y0, GG::X1, m_sitrep_entry.GetText() + " ", ClientUI::GetFont(ClientUI::Pts()), GG::FORMAT_LEFT | GG::FORMAT_VCENTER, ClientUI::TextColor()); m_link_text->SetDecorator(VarText::EMPIRE_ID_TAG, new ColorEmpire()); AttachChild(m_link_text);
 ValidateMultiaryExpression( options.Expression, MultiaryOperator.And, ValidateResourceTypeExpression); }
 status := location.Status.Phase if status == "" { status = velerov1api.BackupStorageLocationPhaseUnknown } row.Cells = append(row.Cells,
 'jQuery':'readonly', // Jellyfin globals 'ApiClient': 'writable', 'Events': 'writable', 'chrome': 'writable', 'DlnaProfilePage': 'writable', 'DashboardPage': 'writable',
 Also cleans up the temp file if close is not invoked """ def move_to_final_destination(self): os.rename(self.tmp_path, self.path)
 // ListContainersResponse encapsulates the response from the docker client for the // ListContainers call. type ListContainersResponse struct { DockerIds []string Error        error }
 return new GetClusterMetadataOperation(); case GET_JOB_METRICS_OP: return new GetJobMetricsOperation(); case GET_LOCAL_JOB_METRICS_OP: return new GetLocalJobMetricsOperation(); default: throw new IllegalArgumentException("Unknown type id " + typeId); }
 @EnableConfigurationProperties(SelfTracingProperties.class) @ConditionalOnSelfTracing public class TracingConfiguration { /** Configuration for how to buffer spans into messages for Zipkin */ @Bean Reporter<Span> reporter(BeanFactory factory, SelfTracingProperties config) { return AsyncReporter.builder(new LocalSender(factory)).threadFactory(r -> new Thread(r)).messageTimeout(config.getMessageTimeout().toNanos(), TimeUnit.NANOSECONDS).metri
 }; exports.imageLink = function (urlBase, resource) { if (resource.startsWith("/")) { resource = resource.substring(1); } if (resource.startsWith("/images")) {
 public String format() { return CsvFileFormat.FORMAT_CSV; } }
 public static class RedRemoteControlCarTeam { public class RemoteControlCar
 private void scheduleNextPull(PullResult pullResult) { pullRequest.setNextOffset(pullResult.getNextBeginOffset()); correctTagsOffsetAndSchedulePull(pullRequest); if (defaultMQPushConsumer.getPullInterval() > 0) { executePullRequestLater(pullRequest, defaultMQPushConsumer.getPullInterval()); } else { DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest); }
 // // 3. Locate the Access Key (Primary or Secondary) under your Storage Account > Settings > Access Keys. // // 4. Set the environment variables AZURE_STORAGE_ACCOUNT, AZURE_STORAGE_KEY, and AZURE_CLOUD_ENVIRONMENT to //    the storage account name, your access key, and the Azure Cloud Environment. Possible cloud environments // 	  are "AzureCloud", "AzureUSGovernment", "AzureChinaCloud", and "A
 add_overlay("bombarding.png"); } // Moving fleets can't be gifted. if (fleet->OrderedGivenToEmpire()!= ALL_EMPIRES) add_overlay("gifting.png");
 point["lat"] = float(point_tuple[0]) point["lng"] = float(point_tuple[1]) point["alt"] = float(point_tuple[2]) point["mode"] = mode.get("mode", "walking") return points def load_gpx(self):
 """ default_domain = self.scenario.get("default-domain", None) default_port = self.scenario.get("default-port", None) if self.scenario.get("retrieve-resources", None): retrieve_resources = self.scenario.get("retrieve-resources", None) else: retrieve_resources = True concurrent_pull_size = self.scenario.get("concurrent-pull-size", 4) timeout = self.scenario.get("timeout", None)
 Blockly.Events.setGroup(false); } this.variableMap_.clear(); // Any block with a drop-down or WidgetDiv was disposed. if (Blockly.DropDownDiv) { Blockly.DropDownDiv.hideWithoutAnimation();
 }; }, [imageLabel, imageURL]); return { addToCartButtonProps, confirmRemovalIsOpen,
 req["url"] = None try: requests.append(self.__parse_request(req)) except Exception: raise TaurusConfigError("Wrong request:\n %s" % req) return requests
 } if (!$kernel->isDebug()) { // Enable HTTP Cache if not disabled explicitly if (!($_SERVER['DISABLE_HTTP_CACHE']?? false)) { return $kernel->getHttpCache(); } }
 try { if (userpoolsLoginKey.equals(mStore.get(PROVIDER_KEY))) { String token = mStore.get("token"); return CognitoJWTParser.getClaim(token, "sub"); } return null; } catch (Exception e) {
 """ from __future__ import print_function class SwissProtParserError(ValueError): """An error occurred while parsing a SwissProt file."""
 goog.require('Blockly.utils'); goog.require('goog.color'); goog.require('Blockly.ScratchMsgs'); goog.require('Blockly.Procedures'); // Turn off debugging when compiled. /* eslint-disable no-unused-vars */
 type Props = { percentage: number }; @observer export default class DelegationInfo extends Component<Props> { static displayName = 'DelegationInfo';  static defaultProps = { percentage: 0, };
 } } } } } for (handledrn_map::iterator it = hdrns.begin(); it!= hdrns.end();) { (it++)->second->retry(API_OK); } }
 sessionManager.forceLogin(context); return; } contribution.setCreator(sessionManager.getAuthorName()); } if (contribution.getDescription() == null) {
 func_details.envvars["AWS_LAMBDA_FUNCTION_HANDLER"] = main_file func_details.envvars["AWS_LAMBDA_EVENT_BODY"] = json.dumps(json_safe(event)) else: LOG.warning("No custom runtime found for handler: %s", main_file) func_details = {} func_details.envvars = { "AWS_LAMBDA_FUNCTION_HANDLER": main_file, "AWS_LAMBDA_EVENT_BODY": json.dumps(json_safe(event)), } LOG.i
 return ret; } void OpenSimContext::setLocation(AbstractPathPoint& mp, int i, double d) { if (dynamic_cast<PathPoint*>(&mp)) { dynamic_cast<PathPoint*>(&mp)->setLocationCoord(*_configState, i, d); _configState->invalidateAll(SimTK::Stage::Position); _model->getMultibodySystem().realize(*_configState, SimTK::Stage::Posi
 self.after_conv3_plugin_names = self.make_block_plugins( planes * self.expansion, self.after_conv3_plugins) def make_block_plugins(self, in_channels, plugins): """ make plugins for block
 // Request transmits the given data and waits for a response. // Implementations of send should be threadsafe and respect the timeout // present on the context. func (f *fAdapterTransport) Request(ctx FContext, oneway bool, payload []byte) ([]byte, error) { resultC := make(chan []byte, 1) errorC := make(chan error, 1)
 blacklist ${PATH}/ssh blacklist /usr/lib/openssh blacklist /usr/lib/ssh blacklist /usr/libexec/openssh/ssh-keysign /usr/lib/openssh/ssh-keysign blacklist ${PATH}/passwd blacklist /usr/lib/xorg/Xorg.wrap blacklist /usr/lib/policykit-1/polkit-agent-helper-1
 class Sensei_Setup_Wizard { const SUGGEST_SETUP_WIZARD_OPTION ='sensei_suggest_setup_wizard'; const WC_INFORMATION_TRANSIENT    ='sensei_woocommerce_plugin_information_TRANSIENT'; const WCCOM_INSTALLING            ='sensei_setup_wizard_wccom_installing'; const USER_DATA_OPTION            ='sensei_setup_wizard_data'; const MC_LIST_ID                  = '4fa225
 int i; int action = 3; // 1=add, 2=remove, 3=help+list (default), 4=reset if (message && *message) { if (message[0] == '+') { message++;
 DefaultSendMode = Binary ) var DefaultAdapter = &Adapter{}  func (a *Adapter) Start(ctx context.Context) error { var err error
 } { const char *dir = dirname(h2o_socket_buffer_mmap_settings.fn_template); if (!h2o_memory_can_create_file(dir)) { fprintf(stderr, "temp-buffer-path: '%s' is not a writable directory\n", dir); return EX_CONFIG; } } /* calculate defaults (note: open file cached is purged once every loop) */
 CollectionExprAliasCommand[CollectionExprAliasT], sd.CreateObject[CollectionExprAliasT], ): def canonicalize_attributes(self, schema: s_schema.Schema, context: sd.CommandContext) -> s_schema.Schema: schema = super().canonicalize_attributes(schema, context) schema.set_attribute_value('internal', True) return schema class DeleteCollectionExprAlias(
 "\" with \"" + definitionFileName.substring(0, definitionFileName.length() - 2) + ".md\".", di); } List<File> allLookupDirectories = new ArrayList<>(lookupDirectories); allLookupDirectories.add(1, currentDirectory); Optional<File> definitionFile = allLookupDirectories.stream().map(lookupDirectory -> { if (new File(definitionFileName).isAbsolute()) { return new File(definitionFileName);
 in.close(); } void data_store_image::exchange_data_two_sided() { if (m_master) { std::cerr << "starting exchange_data_two_sided\n"; } std::stringstream err; //build map: proc -> global indices that proc needs for this epoch, and
 } @Override public List<DMLResponseHandler> getMerges() { return Collections.unmodifiableList(this.merges); }
 // updatePeers update the peers list if their peer change counter has changed. updatePeers := func() { if curPeersChangeCounter := atomic.LoadInt32(&wn.peersChangeCounter); curPeersChangeCounter!= lastPeersChangeCounter { peers, lastPeersChangeCounter = wn.peerSnapshot(peers) // nil out the unused portion of the peers array to allow the GC to cleanup unused peers. for i
 data, csvfile = get_airdrop_data(protocol_name, data_dir) for row in data: if len(row) < 2: raise InvalidData(f'Airdrop CSV for {protocol_name} contains an invalid row: {row}') addr, amount, *_ = row # not doing to_checksum_address() here since the file addresses are checksummed # and doing to_checksum_address() so many times hits performance
 // Note that we don't need to call mayOpenGrain() because the existence of a session // implies this check was already performed. var user = session.userId && Meteor.users.findOne(session.userId);
 final boolean devMode, final Function<Collection<PantheonNode>, Optional<String>> genesisConfig) throws IOException { final Path homeDirectory = Files.createTempDirectory("acctest"); this.name = name; this.keyPair = KeyPairUtil.loadKeyPair(homeDirectory); this.p2pPort = p2pPort; this.miningParameters = miningParameters;
 import com.hazelcast.jet.impl.execution.init.JetInitDataSerializerHook; import com.hazelcast.nio.tcp.FirewallingConnectionManager; import com.hazelcast.test.HazelcastSerialClassRunner; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith;
 * @param consumer *          emit counter objects derived from key and value to this consumer */ void convert(K key, Consumer<K> consumer); } /**
 html += '<button is="paper-icon-button-light" class="muteButton mediaButton"><i class="md-icon">&#xE050;</i></button>'; html += '<div class="sliderContainer nowPlayingBarVolumeSliderContainer hide" style="width:150px;vertical-align:middle;display:inline-flex;">'; html += '<input type="range" is="emby-slider" pin step="1" min="0" max
 </td> <td> <ul> <li><?php eT("Responses are no longer accessible.");?></li> <li><?php eT("Your response table will be renamed to:");?> <?php echo gT("{$dbprefix}old_".$surveyid."_{$date}");?></li> <li><?php eT("All participant information will be lost.");?></li> <li><?php eT("A deactivated s
 assert_almost_equal(Q.mean(),  0.0, decimal=1) @staticmethod def test_villin_folded(): # one folded, one unfolded f = MDAnalysis.Universe(contacts_villin_folded)
 Changed struct { Since            string `long:"since" description:"Calculate changes since this tree-ish/scm ref (defaults to current HEAD/tip)."` DiffSpec         string `long:"diffspec" description:"Calculate changes contained within given scm spec (commit range/sha/ref/etc)."` IncludeDependees string `long:"include-dependees" choice:"none" choice:"direct" choice:"transitive" default:"none" description:"In
 from.affine_grid_generator import affine_grid from.context_block import ContextBlock from.dcn import (DeformConv, DeformConvPack, DeformRoIPooling, DeformRoIPoolingPack, ModulatedDeformConv, ModulatedDeformConvPack, deform_conv, deform_roi_pooling) from.grid_sampler import grid_sample from.masked_conv import MaskedConv2d from.nms i
 map = new LinkedHashMap<CollectionEntry, IPersistentCollection>(); batchLoadableCollections.Add(persister.Role, map); } map[ce] = collection; } /// <summary>
 if err := c.Run(); err!= nil { return err } _, _, err := gc.c.PullRequests.Edit(ctx, "googleapis", "go-genproto", genprotoPRNum, &github.PullRequest{ Body: newBody, }) return err
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4438-SEA 1645542722 1422076140</p> <hr> <p>Varnish cache server</p> </body>
 ; """)  # noqa : W291 def test_write_alignment(self): # Default causes no interleave (columns <= 1000) records = [SeqRecord(Seq("ATGCTGCTGA" * 90, alphabet=ambiguous_dna), id=_id) for _id in ["foo", "bar", "baz"]] a = MultipleSeqAlignment(records, alphabet=ambiguous_dna)
 # try to revoke token with Google Auth API otherwise Google will consider the account # be still connected and will not send a refresh_token next time the user tries to # connect again. if it doesn't succeed proceed normally and just delete from our database self._revoke_token(user["access_token"], user_id) super(YoutubeService, self).remove_user(user_id) def _revoke_token(self, access_token, user_id): """ Revoke t
 state    States } // New returns a new Service. func New(ctx context.Context, opts ServiceOptions) *Service { ctx, cancel := context.WithCancel(ctx)
 } public CompletableFuture<SyncTarget> findSyncTarget() { if (!syncState.isInSync(0)) { return CompletableFuture.completedFuture(syncState.syncTarget().get()); } return selectNewSyncTarget(); } private CompletableFuture<SyncTarget> selectNewSyncTarget() {
 def validate_transaction_schema(tx): """ Validate a transaction dict  There are 3 schemas for transactions: - TX_SCHEMA: the most basic transaction schema - TX_SCHEMA_TRANSFER: an additional schema for the transfer operation - TX_SCHEMA_CREATE: an additional schema for the create operation  See the docs for each of the schemas to learn more. """ _validate_schema(TX_SCHEMA, tx) if tx['operation'] == 'TRANSFER': _validate_schema(TX_S
 variables = re.findall(self.re_variable, decoded_test) if variables: relevant_facts = await self._build_relevant_facts(variables, facts) if all([x for x in relevant_facts]): good_facts = [await RuleSet(rules=rules).apply_rules(facts=fact_set) for fact_set in relevant_facts] valid_facts = [await self._trim_by_limit(decoded_test, g_fact[0]
 if err!= nil { return "", err } if _, err := os.Stat(path); err!= nil { return "", err } bts, err := ioutil.ReadFile(path) if err!= nil { return "", err }
 const int inner_feature_index = train_data_->InnerFeatureIndex(best_split_info.feature); if(!config_->cegb_penalty_feature_coupled.empty() &&!feature_used[inner_feature_index]){ feature_used[inner_feature_index] = true; for(int i = 0; i < tree->num_leaves(); ++i){ if(i == best_leaf) continue; auto split = &splits_per_leaf_[i*train_data_->num_fea
 } public function tearDown() { unset( $_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW'], $GLOBALS['wp_rest_application_password_status'], $GLOBALS['wp_rest_application_password_uuid'] ); parent::tearDown(); } /**
 import javax.security.auth.login.LoginException; import javax.security.auth.spi.LoginModule; import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; public class MyLoginModule implements LoginModule{ String password;
 if ($keys[0] == 'LNG' && \count($keys) == 2) { trigger_deprecation('contao/core-bundle', '4.12', 'Using the label::LNG insert tag has been deprecated and will no longer work in Contao 5.0.'); $arrCache[$strTag] = System::getContainer()->get(Locales::class)->getDisplayNames(array($k
 content: getTagHref(publicPath, iconPaths.msTileImage, assetsVersionStr) })) } if (msTileColor!= null) { data.head.push( makeTag('meta', { name:'msapplication-TileColor',
 TargetPort      string SSLPolicy       *string Aliases         []string Stickiness      *bool HealthCheck     NLBHealthCheck }
 saveGiftOptionsQuery: SET_GIFT_OPTIONS_QUERY }); const classes = mergeClasses(defaultClasses, props.classes); return ( <div className={classes.root}>
 void testTutorialOne(); int main() { SimTK::Array_<std::string> failures;
 $check = str_replace( array( $thousands, $dot, html_entity_decode( $thousands ) ), array( '', '.', '', ), $value ); $check = trim( $check );
 @RunWith(HazelcastSerialClassRunner.class) public class JetInstanceTest extends JetTestSupport { private static final String UNABLE_TO_CONNECT_MESSAGE = "Unable to connect"; @Rule public ExpectedException expectedException = ExpectedException.none();
 #@subsitute: tempita [requires tempita substitution - context can't be specified here though - only necessary when @required from non-tempita code] for prototypes and implementation respectively.  For non-python or non-JavaScript code, the context is the entire code block.  For Python code, the context is the function or class in which the @substitute is found.  For JavaScript code, the context is the function or cla
 BufferSegment returnStart = null; BufferSegment returnEnd = null; if (!consumed.IsDefault) { Interlocked.Add(ref _length, -ReadCursor.GetLength(_readHead, _readHead.Start, consumed.Segment, consumed.Index)); returnStart = _readHead; returnEnd = consumed.Segment;
 await self._load_payloads(plug) await self._load_abilities(plug) await self._load_objectives(plug) await self._load_adversaries(plug) await self._load_sources(plug) await self._load_planners(plug) await self._load_extensions() await self._verify_data_sets() except Exception as e:
 else: result_slice = self.df.columns.slice_locs(col_loc.start, col_loc.stop) return self.df.iloc[:, slice(*result_slice)] row_lookup, col_lookup = self._compute_lookup(row_loc, col_loc) if any(i == -1 for i in row_lookup) or any(i == -1 for i in col_lookup):
 } private FileVisitResult callback(Path absolutePath, ParserConfiguration configuration, Callback callback) throws IOException { Path localPath = root.relativize(absolutePath); Log.trace("Parsing %s", localPath); ParseResult<CompilationUnit> result = new JavaParser(configuration).parse(COMPILATION_UNIT, provider(absolutePath));
 ], ],'service_manager' => [ 'factories' => [ 'VuFindApi\Formatter\RecordFormatter' => 'VuFindApi\Formatter\RecordFormatterFactory', ], ],
 // disk, then accesses the network if it must obtain a new certificate // via ACME. // // This method is safe for use as a tls.Config.GetCertificate callback. // It is safe because we only call it during the TLS handshake, // which happens before we attempt to access the network. func (cg ConfigGroup) GetCertificate(clientHello *tls.ClientHelloInfo) (*tls.Certificate, error) { cert, err := cg.ge
 // Host URL & hostname // Dropped fetching host details since v.1.8.16 as http://www.whoishostingthis.com API seems to be down and this info is not required by MyBB. $info['hosturl'] = $info['hostname'] = "unknown"; if(isset($_SERVER['HTTP_USER_AGENT'])) {
 { QCString replBuf = replaceRef(buf,relPath,urlOnly,context); int indexS = replBuf.find("id=\""), indexE; indexE = replBuf.find('"',indexS+4); if (indexS>=0 && (indexE!= -1)) { t << replBuf.left(indexS-1) << replBuf.right(replBuf.length() - indexE - 1); }
 appendExecCmdParameters(cmd, BatchConstants.ARG_SEGMENT_ID, seg.getUuid()); appendExecCmdParameters(cmd, BatchConstants.ARG_PARTITION, getRowkeyDistributionOutputPath(jobId) + "/part-r-00000"); if(this.seg.getConfig().isHFileDistCP()){ String partitionOutputPath = getRealizationRootPath(jobId) + "/rowkey_stats/part-r-00000_hfile"; appendExecCmdParameters(cmd, B
 <div className={styles.loader}> <div className={styles.loaderContent}> {message} {state.babel.isLoading && <PresetLoadingAnimation className={styles.loadingAnimation} />} </div> </div> );
 Notes ----- Graphs may have node labels, node attributes, edge labels, and edge attributes, varying from different dataset. """ _url = r"https://www.chrsmrrs.com/graphkerneldatasets/{}.zip"
 rtsFlagsDialogOptions ); if (response === 0) { setRtsFlagsAndRestart(environment.network, enable? RTS_FLAGS : []); } };
 Ef[2][2] = h_rate[2]/domain->zprd; Ef[0][1] = Ef[1][0] = 0.5 * h_rate[5]/domain->yprd; Ef[0][2] = Ef[2][0] = 0.5 * h_rate[4]/domain->zprd; Ef[1][2] =
 ObjectColor & objcol = ( *it ).second.objcol; if ( objcol.isColor( color ) ) { const MP2::MapObjectType objectType = static_cast<MP2::MapObjectType>( objcol.first ); objcol.second = objectType == MP2::OBJ_CASTLE? Color::UNUSED : Color::NONE; world.GetTiles( ( *it ).first ).CaptureFlags32( objectType, objcol.second );
 def test_word_with_duplicated_character_in_mixed_case(self): self.assertIs(is_isogram("Alphabet"), False) def test_word_with_duplicated_letter_in_mixed_case_lowercase_first(self): self.assertIs(is_isogram("alphAbet"), False) def test_hypothetical_isogrammic_word_with_hyphen(self):
 qsort(&containers[0], count, sizeof(struct lxc_container *), cmporder); if (cmd_groups_list && my_args.all) ERROR("Specifying -a (all) with -g (groups) doesn't make sense. All option overrides."); /* We need a default cmd_groups_list even for the -a * case in order to force a pass through the loop for
 end describe 'connection to Atlas' do it 'runs hello successfully' do result = client.database.command(:hello => 1) expect(result['ok']).to be true end it 'runs findOne successfully' do
 boost::optional<iroha::protocol::TxStatus> last_tx_status; auto rounds_counter{0}; command_service_ ->getStatusStream(hash) // convert to transport objects
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4434-SEA 1645547911 1443424156</p> <hr> <p>Varnish cache server</p> </body>
.. Note:: This option does not perform a true mass weighting but weighting by the number of atoms in each residue; the name of the parameter exists for historical reasons and will be removed in 0.17.0... SeeAlso:: :class:`GNMAnalysis`
 end context "when given a Proc" do it "behaves as Enumerable" do lambda do criteria.find(-> {"default"}) # Proc is not serializable to a BSON type
 self.universes = [self.universe1, self.universe2, self.universe_rev] self.psa = MDAnalysis.analysis.psa.PSAnalysis(self.universes,           \ path_select='name CA',           \ targetdir=tempdir.in_tempdir()) self.psa.generate_paths(align=True) self.psa.paths[-1] = self.psa.paths[-1][::-1,:,:] # reverse third path self._run()
 { public static class ResolutionKey { public const string ValueSet = "values"; public const string Value = "value"; public const string Type = "type"; public const string Unit = "unit"; } }
 "Focus follows new flows." ) loader.add_option( "view_filter_active", bool, False, "Toggle whether the view filter is enabled." )
 def _email_error(self, task, formatted_traceback, subject, headline): formatted_subject = subject.format(task=task, host=self.host) command = subprocess.list2cmdline(sys.argv) message = notifications.format_task_error(headline, task, command, formatted_traceback) notifications.send_error_email(formatted_subject, message, task.owner_email)
 log.trace("\'none - no action\' or invalid value provided: {}", action); } long actionComplete = System.nanoTime(); log.info("gc post action {} completed in {} seconds", action, String.format("%.2f", ((actionComplete - actionStart) / 1000_000_000.0))); } catch (Exception e) { log.warn("{}", e.getMessage(), e);
 SYNC_HTTP_CLIENT.close(); ASYNC_HTTP_CLIENT.close(); } catch (Exception e) { logger.error("[HttpClientManager] Exception while destroying HttpClientManager", e); } logger.warn("[HttpClientManager] Destruction of the end"); }
 * @see https://usehooks.com/useScript/. * * @param {String} src - the script src. * * @return {Object} *  - idle: script has not been loaded yet *  - loading: script is currently loading *  - ready: script has been loaded *  - error: script failed to load */ export default src => { // Keep track of script status ("idle", "loading", "r
 Return only the value for nodes u distance : edge attribute key, optional (default=None) Use the specified edge attribute as the edge distance in shortest path calculations. If None is specified, the edge weight is used as the edge distance. Returns -------
 "math/rand" "time" "github.com/ethersphere/bee/pkg/p2p" "github.com/ethersphere/bee/pkg/p2p/peer" "github.com/ethersphere/bee/pkg/swarm" )
 return err == nil && n == total } // GetStatus returns the value of state and the total count func (t *Tag) GetStatus(state State) (int64, int64, error) { count, seen, total := t.Get(state), atomic.LoadInt64(&t.Seen), atomic.LoadInt64(&t.Total)
 diff = 0; } /* Lock buffers where size > 2MB */ if (size > FLB_INPUT_CHUNK_FS_MAX_SIZE) { cio_chunk_lock(ic->chunk);
 package org.apache.iceberg.mr.hive.serde.objectinspector; /** * Interface for converting the Hive primitive objects to the objects which could be added to an Iceberg Record. * If the IcebergObjectInspector does not implement this then the default Hive primitive objects will be used without * conversion. */
 values[i] = SortOrder.valueOf(valueStrs[i]); } int idxCurrentSort = 0; for  (int i = 0; i < values.length; i++) { if (currentSortOrder == values[i] || currentSortOrder == null) { idxCurrentSort = i; break; }
 return firstEntry; } String auditLogBooleanDefault(Boolean value, Boolean defaultValue) { if (defaultValue == Boolean.FALSE) { return value == Boolean.TRUE? "true" : "false"; } else { return value == Boolean.FALSE? "false" : "true";
 secretLister        corelisters.SecretLister scheduledWorkQueue scheduler.ScheduledWorkQueue metrics            *metrics.Metrics // used for testing
 /// </summary> /// <param name="exception">The exception to check.</param> /// <param name="loggerContext">Target context of the exception.</param> /// <returns><c>true</c>if the <paramref name="exception"/> must be rethrown, <c>false</c> otherwise.</returns> public static bool MustBeRethrown(this Exception exception, IInternalLoggerContext loggerContext = null) { if (e
 console.error(err); // Make sure any errors from the mutation are displayed. setDisplayError(true); } }, [
 Processor // CheckpointSet returns the current data set.  This may be // called before and after collection.  The // implementation is required to return the same value // throughout its lifetime, since CheckpointSet exposes a // sync.Locker interface.  The caller is responsible for
 return worker_ip_to_port def _find_random_open_port() -> int: """Find a random open port on the machine. Returns
 ->children() ->arrayNode('allowed_url_protocols') ->prototype('scalar')->end() ->defaultValue(['http', 'https', 'ftp','mailto', 'tel', 'data','skype', 'whatsapp']) ->validate() ->always( static function (array $protocols): array {
 } /** * Sets the used properties. * <p> * Properties are used to resolve ${variable} occurrences in the XML file. * * @param properties the new properties * @return the XmlJetConfigBuilder * @since 1.2.0 */ public XmlJetConfigBuilder setProperties(@Nullable Properties properties) {
 // but should be considered a high priority. switch (action.type) { case "UPDATE_FILE_SOURCES": { const fileSources = produceFileSources(action.fileSources); return Object.assign({}, state, { fileSources }); }
 #define MAX_NEW_WORKERS 10 // Result codes for signaling the completion of operations in WQ typedef enum { WQ_SUCCESS = 0,
 if self.focus is None: self.set_focus(0) elif self.follow_focus: self.update_focus() return f def set_limit(self, limit):
 nullpo_retv(sd); fd = sd->fd; hd = sd->hd; if (!hd ) // FIXME: If nothing is going to be sent should WFIFOHEAD be above this check? [panikon] return; WFIFOHEAD(fd, 4+37*MAX_HOMUNSKILL);  WFIFOW(fd,0)=0x235; for ( i = 0; i < 
 self.get_client().startUntrustedTransaction(True, inputIndex, chipInputs, redeemScripts[inputIndex]) if changePath: outputData = self.get_client().finalizeInput( to_bytes(output), format_satoshis_plain(outputAmount), format_satoshis_plain(tx.get_fee()), changePath, bfh(rawTx)) else: outputData = self.get_client().finalizeInputFull(txOutput)
 : transferQueue;    // transfer queue of class MegaApiImpl // if we are processing a custom queue, we need to process in one shot bool canSplit =!queue; while(MegaTransferPrivate *transfer = auxQueue.pop()) {
 // Datastore is a type implementing the CarveStore interface // relying on AWS S3 storage type Datastore struct { metadatadb kolide.CarveStore s3client   *s3.S3 bucket     string prefix     string } // New initializes an S3 Datastore func New(config config.S3Config, metadatadb kolide.CarveStore) (*Datastore, error) { conf := &aws.Config{} // Use de
 loading.hide(); this.swiperInstance = new Swiper(elem.querySelector('.slideshowSwiperContainer'), { direction: 'horizontal', // loop is disabled due to the lack of Swiper support in virtual slides loop: false, zoom: { minRatio: 1,
 t.index ["organization_id"], name: "index_diaper_drives_on_organization_id" end create_table "distributions", force: :cascade do |t| t.text "comment" t.datetime "created_at", null: false t.datetime "updated_at", null: false t.integer "storage_location_id" t.integer "partner_id" t.integer "organization_id" t.datetime "issued_at" t.string "agency_rep"
 @Value("${" + CREDENTIALS_REFRESH_INTERVAL + "}") Integer credentialsRefreshInterval, @Qualifier(QUALIFIER) BasicCredentials basicCredentials) throws IOException { ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor( new NamedThreadFactory("zipkin-load-es-credentials")); DynamicCredentialsFileLoader credentialsFileLoader = new DynamicCredentialsFileLoader(basicCredentials, credentialsFile); credentialsFileLoader.updateCredentialsFromProperties();
 } } if len(attestedData) == 0 { return nil, nil, nil, nil, nil, nil }  attestRequest := &nodeattestor.AttestRequest{ AttestedData:   attestedData, AttestedBefore: attestedBefore,
 for i, (X, y) in enumerate(eval_set): # when individual eval set is equivalent to training data, skip recomputing parts. if id(X) == id(data) and id(y) == id(label): # For parts-based models, we only need to evaluate the parts that have # been trained. for parts_idx in range(n_parts): eval_sets[parts_idx].append('__train__')
 conf.setStrings(enumToConfKey(implementingClass, ScanOpts.RANGES), rangeStrings.toArray(new String[0])); } catch (IOException ex) { throw new IllegalArgumentException("Unable to encode ranges to Base64", ex); } }
 package org.apache.rocketmq.common.protocol; public class RequestCode { public static final int SEND_MESSAGE = 10;
 created_at timestamp DEFAULT CURRENT_TIMESTAMP, updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (id), FOREIGN KEY fk_policies_query_id (query_id) REFERENCES queries(id) ); ` policyMembershipTable := ` CREATE TABLE IF NOT EXISTS policy_membership ( id int(10) unsigned NOT NULL AUTO_INCREMENT, policy_id INT UNSIGNED, host_id int(10) UNSIGNED NOT NULL,
 return p.Addr.String() } // parseFullMethod returns a span name following the OpenTelemetry semantic // conventions as well as all applicable span kv.KeyValue attributes based // on a gRPC's FullMethod. func parseFullMethod(fullMethod string) (string, []kv.KeyValue) {
 super().__init__() self.id = id self.start, self.finish = None, None self.timeout = timeout self.name = name self.group = group self.agents = agents
 * @kind function * * @param {Object} props An object containing the location, parameter, and setter function. * @param {String} props.location The URL location to search in * @param {String} props.parameter The parameter to search for * @param {Function} props.setValue A setter function that is passed the parameter value found in the URL */
 UseIntermediate: true, }) _, err := client.MintX509CA(context.Background(), csr, 0, func(_ context.Context, _, _ []*x509.Certificate) error { return fmt.Errorf("unexpected call") }) require.NoError(t, err)  x509CA, err := client.MintX509CA(context.Background(), csr, 0, func(_ context.Context, _, _ []*x509.Certificate) error { return nil }) 
 }; export const networkPrettyNames = { production: 'Production', development: 'Development', };
 // are NOT guaranteed to have been validated by HotStuff. Pending() ([]flow.Identifier, error) // ValidPending returns the IDs of all descendants of the Head block. // Pending means the returned blocks are not finalized yet. // Valid means the returned bocks have at least one child. // The IDs are ordered such that parents are included before their children. Includes // only blocks that have child blocks. // These are NOT guaranteed to have been valida
 } assert.Equal(t, "", runAppForTest(t, []string{"logout"}))  assert.Equal(t, 1, len(calls)) assert.Equal(t, "logout", calls[0].Name) }
 assert_equal(sorted(G.neighbors('C')),['D']) assert_equal(sorted(G['C']),['D']) assert_equal(sorted(G.neighbors('A')),['B', 'C']) assert_equal(sorted(G.neighbors('C')),['D']) assert_raises(nx.NetworkXError,G.neighbors,'j') assert_raises(nx.NetworkXError,G.neighbors,'j')
 if (text.Length < 1) { charsConsumed = 0; value = 0; return false; }
 tz.setZoneControlContaminantController(controllerClone); } if( auto t_color = renderingColor() ) { auto colorClone = t_color->clone(model); tz.setRenderingColor(colorClone); } // DLM: do not clone zone mixing objects
 from mitmproxy import options from.. import tservers import pytest class TestFlowlist(tservers.MasterTest):
 taskId.getId() ); purgeFromZk(taskId); } } else { if (moveToHistoryOrCheckForPurge(taskId, forRequest)) { LOG.debug("Transferred task {}", taskId);
 // ResolvedCatalogTable class into the iceberg-flink-runtime jar for compatibility purpose. private static final DynMethods.UnboundMethod GET_CATALOG_TABLE = DynMethods.builder("getCatalogTable").impl(Context.class, "getCatalogTable").orNoop().build(); private final FlinkCatalog catalog;
 _this.componentWillUnmount = function() { render(null, _this._temp); _this._temp = null; _this._container.appendChild(child); }; // When we change container we should clear our old container and
 """ # TODO: Examine other versions of the file format and if this parser should # support them. # # See: https://docs.microsoft.com/en-us/previous-versions/windows/desktop/aa366551(v=vs.85) return '#Version: 1.5' in line manager.ParsersManager.RegisterParser(WinFirewallParser)
 { ResultRelInfo *resultRelInfo; ResultRelInfo *saved_resultRelInfo = NULL; /* if copies are directed to a chunk that is compressed, we redirect * them to the internal compressed chunk. But we still * need to check triggers, constraints etc. against the original * chunk (not the internal compressed chunk). * check_resultRelInfo saves that information */ ResultRelInfo *check_resultRelInfo = NULL; EState *e
 var maxH264Level = 42; var h264Profiles = 'high|main|baseline|constrained baseline'; if (canPlayH264Level51(videoTestElement)) { maxH264Level = 51; }
 def _get_redis_ip(project): """Get the redis IP address.""" _, ip = common.execute('gcloud redis instances describe redis-instance''--project={project} --region={region}''--format="value(host)"'.format(project=project, region=FLAGS.region)) return ip.strip()
 case "Long": return currentNode.asLong(); case "Short": return (short) currentNode.asInt(); case "Integer": return currentNode.asInt(); case "String":
.add<std::string>("directory,d", "directory for persistent state").add<std::string>("endpoint,e", "node endpoint").add<std::string>("node-id,i", "the unique ID of this node").add<bool>("disable-accounting", "don't run the accountant").add<bool>("no-default-schema", "don't load the default schema " "definitions"));
 if (null!== $resource) { if ($resource === 'listTag') { // special case -- if $resource is set to the string "listTag", // we want to retrieve tags assigned to a user list. $select->where->isNull('resource_id')->or->isNull('resource_type'); } else { if (!is_array($resource)) {
 """ ) general.add_argument( "--can-handle-url-nohead", metavar="URL", help=""" Same as --can-handle-url but without following redirects when looking up the URL. """ ) general.add_argument(
 type = t; count = 0; } count++; } lengths.push(count); types.push(type);
 * A custom compare function for the VariableModel objects. * @param {Blockly.VariableModel} var1 First variable to compare. * @param {Blockly.VariableModel} var2 Second variable to compare. * @return {number} -1 if name of var1 is less than name of var2, 0 if equal, and 1 if greater. * @package */ Blockly.VariableModel.compareByName = function(var1, var2) {
 new_index = pandas.RangeIndex(len(self.index)) if not axis else self.index new_columns = self.columns if not axis else pandas.RangeIndex(len(self.columns)) new_dtypes = self._dtypes_cache new_dtypes.index = new_columns return self.__constructor__( new_data, new_index, new_columns, new_dtypes ).dropna(axis=axis, how="all")
 t.Parallel() a := require.New(t) // Overview of this test:
 tag_string = container['image_tag'].format(container['image'], container['image_version']) nocache = container.get('disable_cache', False) errors = False
 // Precomputed sums are a special case. if mkind.PrecomputedSum() { // This functionality was removed from // the basic processor in PR #2350. return aggregation.ErrNoCumulativeToDelta } agg = value.current.Aggregation()
 // List returns the list of TreeNodes cached in the node (creating it if necessary) func (n *Node) List() []*TreeNode { n.mut.Lock() defer n.mut.Unlock() if n.treeNodeList == nil { n.treeNodeList = n.Tree().List() } return n.treeNodeList }
 Tensor from which to copy `arr` : mxnet.nd.NDArray Destination of the copy `cuda_stream` : Any value that can be cast or represents cudaStream_t CUDA stream to be used for the copy (if not provided, an internal user stream will be selected) In most cases, using the default internal user stream or stream 0
 processFetchResponses(remoteMessagesToDownload, qresyncParamResponse, flagSyncHelper, syncHelper); int newLocalMessageCount = remoteMessagesToDownload.size() + localFolder.getMessageCount(); if (imapFolder.getMessageCount() >= localFolder.getVisibleLimit() && imapFolder.getMessageCount() >= newLocalMessageCount) { findOldRemoteMessagesToDownload(remoteMessagesToDownload, imapFolder, syncHelper); } int messageDownloadCount = remoteMes
 * * @return string */ protected function getSsoLoginAsCustomerUserUrl(CustomerUser $customerUser) { $customerDomainRouter = $this->domainRouterFactory->getRouter($customerUser->getDomainId()); $loginAsUserUrl = $customerDomainRouter->generate(
 const TypeIdentifier *type_id_complete = objectFactory->get_type_identifier(dpst->getName(), true); const TypeObject *type_obj_complete = objectFactory->get_type_object(dpst->getName(), true); if (type_id_complete && type_obj_complete) { objectFactory->add_type_object(dpst->getName(), type_id_complete, type_obj_complete); // Add complete } } }
 def generate_scoped_enum_definition(self, entry, code): code.mark_pos(entry.pos) type = entry.type name = entry.name or "" header, footer = self.sue_header_footer(type, "enum class", name) code.putln(header) enum_values = entry.enum_values if not enum_values: error(entry.pos, "Empty enum definition not allowed outside a 'cdef extern from' block")
 if (!empty($options)) { throw new \Exception('Unexpected options sent to factory.'); } return new $requestedName(); } }
 return $response; } if (null === $module = ModuleQuery::create()->findPk($module_id)) { throw new NotFoundHttpException('The module with id '.$module_id.' does not exists.'); }  if (null!== $module = ModuleQuery::create()->findPk($module_id)) { $title = $module->setLocale($this->getSession()->getLang()->getLocale())->getTitle();
 private $event_handler = <<<'JS' document.addEventListener( 'DOMContentLoaded', function () { document.getElementById( 'elementID' ).addEventListener( 'click', function( event ) { event.preventDefault(); } ); } ); JS; public function get_inline_script_tag_type_set() { add_theme_support( 'html5', array('script' ) ); $this->assertSame(
 define( 'WP_ROCKET_INC_PATH',              realpath( WP_ROCKET_PATH. 'inc/' ). '/' ); if (! defined( 'WP_ROCKET_VIEWS' ) ) { define( 'WP_ROCKET_VIEWS', WP_ROCKET_PATH. 'views/' ); } require_once WP_ROCKET_INC_PATH. 'constants.php';
 public const string MID_MOD = "mid"; public const string LATE_MOD = "end"; public const string MORE_THAN_MOD = "more than"; public const string LESS_THAN_MOD = "less than"; public const string NO_MOD = "none"; // Invalid year public const int InvalidYear = int.MinValue;
 LBANN_ASSERT_MSG_HAS_FIELD(proto_layer, scatter); using BuilderType = Builder<TensorDataType, Layout, Device>; auto dims = parse_list<int>(proto_layer.scatter().dims()); auto axis = proto_layer.scatter().axis().value_or(0); return BuilderType::Build(dims, axis); }
 env:     os.Environ(), stdin:   strings.NewReader(""), outlog:  log.New(ioutil.Discard, "", 0), errlog:  log.New(ioutil.Discard, "", 0), } }
 project.slack_channel_codes end def send_notifications channels return post_premium_mob_youtube_notification if @event_instance.for == 'Premium Mob Members' if @event_instance.category == 'Scrum'
 return getTaskJobExecutionsForList(jobExecutions); } @Override public List<TaskJobExecution> listJobExecutionsForList(String queryString, Pageable pageable) { Assert.notNull(pageable, "pageable must not be null");
 }); _.each(_.values(network), function(value) { if (!_.isUndefined(value) &&!_.isObject(value)) { networkMaps[value] = network; } });
 try: connection = socket.socket(self.address.family, socket.SOCK_STREAM) if self.spoof_source_address: connection.setsockopt(socket.SOL_IP, 19, 1) if self.source_address: connection.bind(self.source_address()) connection.connect(self.address())
 end tally(result, "nUpserted", n_upserted) if n_upserted > 0 tally(result, "nMatched", n - n_upserted) if n_upserted > 0 tally(result, "nModified", response["nModified"]) if response["nModified"] && response["nModified"] > 0 else result.delete("nModified") end elsif op_type == :delete tally(re
 Console.WriteLine(message); } public void LogHeader(string message, char c = '=', int width = 80) { Console.WriteLine(new string(c, width) + " " + message + " " + new string(c, width)); } public void LogHeader2(string message) { Console.WriteLine($"***{message}***"); }
 // create the execution result for the target block result := flow.ExecutionResult{ PreviousResultID: resultID, Chunks:           flow.ChunkList{&chunk}, // include only chunk }
 // Define dynamic routes -- controller => [route name => action] $dynamicRoutes = [ 'Feedback' => ['form' => 'Form/[:id]'], 'MyResearch' => ['userList' => 'MyList/[:id]'], 'LibraryCards' => ['editLibraryCard' => 'editCard/[:id]'], ];
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4450-SEA 1645521621 164216592</p> <hr> <p>Varnish cache server</p> </body>
 // a node in the host topology. That host node is the origin host, where // the node was originally detected. HostNodeID = "host_node_id" // ControlProbeID is the random ID of the probe which controls the specific node. ControlProbeID = "control_probe_id" )
 this.previousFileNames = new Queue<string>(this.maxLogFilenames); this.fileAppenderCache = FileAppenderCache.Empty; this.CleanupFileName = true; } #if NET4_5 static FileTarget() { } #endif
 public bool RunCore21 { get; set; } [Option("cli", Required = false, HelpText = "Optional path to dotnet cli which should be used for running benchmarks.")] public FileInfo CliPath { get; set; } [Option("coreRun", Required = false, HelpText = "Optional path to CoreRun which should be used for running benchmarks.")] public FileInfo CoreRunPath { get; set; } [
 protected final boolean distinct; /** * FILTER condition for aggregate */ protected Expression filterCondition;
 /// Gets a value indicating whether this instance is closing boundary. /// </summary> /// <value> /// <see langword="true"/> if this instance is closing boundary; otherwise, <see langword="false"/>. /// </value> public bool IsClosingBoundary {
 for i, st := range stxns { txgroup[i].SignedTxn = st } block := bookkeeping.Block{} block.BlockHeader.Round = basics.Round(round) block.BlockHeader.TimeStamp = timeStamp proto := config.Consensus[protocol.ConsensusFuture] for i, txn := range txgroup { if txn.Lsig.Blank() { continue
 end def replace_index(keys, position) # replace index with $ only if that key is in the selector and it is only # nested a single level deep. matches = position.scan(/\.\d+\./) if matches.size == 1
 if err := c.Snapshot(ctx, c.config); err!= nil { logrus.Error(err) os.Exit(1) } os.Exit(0) } // Set up the dynamiclistener and http request handlers
 Returns: iter: An iterator of assets that match the text search. """ objects = backend.query.text_search(self.connection, search, limit=limit, table=table)
 offset = 0; colCounter = 0; char *lastIndex = "#0"; while((col = parseLine(lineBuffer, delim, offset))!= NULL) { cur = getKeyByOrderNr(header, colCounter);
 class ServerConnection(tcp.TCPClient, stateobject.StateObject): def __init__(self, address, source_address=None): tcp.TCPClient.__init__(self, address, source_address) self.via = None
 #include "vast/detail/assert.hpp" #include "vast/detail/string.hpp" #include "vast/expression.hpp" #include "vast/type.hpp" namespace vast {
 else: self.sources = source if start is None and end is None: self.sim_params = create_simulation_parameters( start=start,
 // TODO(peterebden): Remove this nonsense once API v2.1 is released. files, dirs := outputs(target) if len(target.Outputs()) == 1 { // $OUT is relative when running remotely; make it absolute commandPrefix += fmt.Sprintf("export OUT=\"%s/$OUT\" && ", c.state.TMP_DIR) } cmd, err := core.ReplaceSequences(c.state, target, c.getCommand(target)) ret
 def dotnet_osx_url if config[:dotnet].include? "-preview" return "https://dotnetcli.azureedge.net/dotnet/preview/Installers/#{config[:dotnet]}/dotnet-#{is_dotnet_after_2_0_prev_2?? "sdk" : "dev"}-osx-x64.#{config[:dotnet]}.pkg" else return "https://dotnetcli.
 // roundStartedEvaluating is the round which we were attempted to evaluate last. It's a good measure for // which round we started evaluating, but not a measure to whether the evaluation is complete. roundStartedEvaluating basics.Round // assemblyCompletedOrAbandoned is *not* protected via the pool.assemblyMu lock and should be accessed only from the OnNewBlock // goroutine. It's equivilent to the "ok
 public class CompactorInfo { // Variable names become JSON keys public final long lastContact; public final String server; public final String queueName; public CompactorInfo(long fetchedTimeMillis, String queue, String hostAndPort) { lastContact = System.currentTimeMillis() - fetchedTimeMillis;
 url := url.URL{Path: "./" + name} // prepend with "./" to fix paths with ':' in the name fileinfos = append(fileinfos, FileInfo{ IsDir:     f.IsDir() || isSymlinkTargetDir(f), IsSymlink: isSymlink(f), Name:      f.Name(), Size:      f.Size(),
 return _validUpgrade def testPoolUpgradeScheduledOnProperDate(poolNodesStarted, poolUpgradeScheduled): # Verify that the upgrade is scheduled in approximately 5 days for each node now = datetime.utcnow().replace(tzinfo=dateutil.tz.tzutc()) for node in poolNodesStarted.nodes.values():
 that they wish to delete their listens. """ if request.method == 'POST': if request.form.get('token') == current_user.auth_token: # This check is needed to prevent users from deleting each other's listens. if not current_user.is_admin: raise ForbiddenException({'source': ''}, "You don't have permission to delete listens.") try: delete_listens_history(current_user.musicbrainz_id) except Exception as e:
 // chainsToFullRules contains the full rules, mapped from chain name to slices of rules in that chain. chainsToFullRules map[string][]string // hashCommentPrefix holds the prefix that we prepend to our rule-tracking hashes. hashCommentPrefix string // hashCommentRegexp matches the rule-tracking comment, capturing the rule hash.
 violation_map[resource['resource']], global_configs, notifier_configs, notifier.get('configuration'))) if notifier['name']!= 'email_violations': chosen_pipeline = find_notifiers(notifier['name']) notifiers.append(chosen_pipeline(
 } bidOrder, err := h.market.GetOrderByID(h.ctx, &pb.ID{Id: r.GetBidId()}) if err!= nil || bidOrder == nil { if err == nil { err = status.Errorf(codes.Internal, "order not found") } return nil, err }
 return Uri.parse(BASE_URI.toString() + "/" + id); } @Inject Lazy<DBOpenHelper> dbOpenHelper;  @Override public boolean onCreate() {
 public static void validate(Iterable<Entry<String,String>> entries) { String instanceZkTimeoutValue = null; boolean usingVolumes = false; String cipherSuite = null; String keyAlgorithm = null; String secretKeyEncryptionStrategy = null; String cryptoModule = null; String cipherSuite = null; String keyAlgorithm = null; String secretKeyEncryptionStrategy = null; String cryptoModule = null; for (Entry<String,String> entry : entrie
 # data that needs to be added to them. # We postpone processing of this in order to do type inference/generalization. # See self.attr_type for (xml_obj, data) in self.attributes.items(): for (k, v, scope, default) in data: xml_obj.append(self.add_data(make_str(k), self.attr_type(k, scope, v), make_str(v), scope, default))
 } } func (cb *roundCowState) addTx(txn transactions.Transaction) { cb.mods.Txids[txn.ID()] = txn.LastValid cb.mods.txleases[txlease{sender: txn.Sender, lease: txn.Lease}] = txn.LastValid }
 * bit in there, but that isn't always correct either (in the case * where a user has no location, for example). * * In all likelihood, we need to denorm an "effective_location" column * into Assets to make this slightly less miserable. * * @author A. Gianotto <snipe@snipe.net>
 termprogress "github.com/aws/copilot-cli/internal/pkg/term/progress" "github.com/aws/copilot-cli/internal/pkg/term/prompt" "github.com/aws/copilot-cli/internal/pkg/workspace" "github.com/aws/copilot-cli/internal/utils" "github.com/spf13/afero" "github.com/spf13/cobra" )
 // initialize ordered gradients and hessians ordered_gradients_.resize(num_data_); ordered_hessians_.resize(num_data_); // if has ordered bin, need to allocate a buffer to fast split if (has_ordered_bin_) { is_data_in_leaf_.resize(num_data_); }
 Short: `Commands for tasks. Tasks are one-off Amazon ECS tasks.`, Long: `Commands for tasks Tasks are one-off container images which run once in a given environment, then terminate.`, } cmd.AddCommand(BuildTaskRunCmd())
 } const size_t expected{ column_labels.size() * 3 + 2 }; // Will first store data in a SimTK::Matrix to avoid expensive calls to the table's appendRow() int rowNumber = 0; int last_size = 1024; SimTK::Matrix_<SimTK::Vec3> markerData{last_size, static_cast<int>(num_markers_expected)};
 #ifdef HELLFIRE char *jogging_toggle_names[] = { "Jog", "Walk", "Fast Walk" }; #endif #ifndef HELLFIRE char *color_cycling_toggle_names[] = { "Color Cycling Off", "Color Cycling On" }; #endif void gamemenu_previous() {
 self.rate_average = rate_average def message(self, msg): dnf.util._terminal_messenger('write', msg, self.fo) def start(self, total_files, total_size): self.total_files = total_files
 return nil, db.NoRowsAffected, fmt.Errorf("update: static host: %w", db.ErrEmptyFieldMask) } var rowsUpdated int var returnedHost *Host _, err := r.writer.DoTx(ctx, db.StdRetryCnt, db.ExpBackoff{},
 import torch as th import backend as F from dgl.backend.pytorch.sparse_emb import NodeEmbedding from dgl.backend.pytorch.sparse_optim import SparseAdam, SparseAdagrad, SparseSGD import unittest, os
 } state struct { count     int64 sum       metric.Number min       metric.Number max       metric.Number  // 64-bit alignment alignment int64 } )
 | 'USER-TIME-FORMAT' | 'WALLET-MIGRATION-STATUS' | 'WALLETS' | 'WINDOW-BOUNDS'; export type StoreMessage = { type: StorageType,
 new_directives_out.update(new_directives) return new_directives_out # Declare compiler directives _directive_defaults = { 'binding': True,  # was False before 3.0
 def getAscendent(self, node_type): """Return the ancestor node of the given type, or None. Node type can be a two letter code or longer description. e.g. 'fa' or 'family'. """ if node_type in _nodetype_to_code: node_type = _nodetype_to_code[node_type]
 a.CAFile = "xxx" } // ThanosProxy describes configuration of the Thanos proxy component type ThanosProxy struct { Enabled         bool   `yaml:"enabled,omitempty"` RetentionPeriod string `yaml:"retention_period,omitempty"` ScrapeInterval  string `yaml:"scrape_interval,omitempty"`
 def populate_indices(self): """Populate keywords for fast test case list searching.""" self.keywords = list(search_tokenizer.tokenize(self.name)) self.project_keywords = list(search_tokenizer.tokenize(self.project.name)) def _pre_put_hook(self): """Pre-put hook."""
 * @throws AssetVariantGeneratorException * @throws IllegalObjectTypeException */ public function renderVariantsCommand($limit = null, bool $quiet = false): void { $resultMessage = null; $generatedVariants = 0;
 @command('wp') async def payto(self, destination, amount, fee=None, feerate=None, from_addr=None, from_coins=None, change_addr=None, nocheck=False, unsigned=False, rbf=None, password=None, locktime=None, addtransaction=True, wallet: Abstract_Wallet = None): """Create a transaction. """ self.nocheck = False tx_fee = satoshis(fee)
 def test_changed(self): config = [ ([1,2,3,4,4,5,5,5,6,7], [0,0,0,0,1,0,1,1,0,0]), ([None,None,None,None,0,0,0,None,None,1], [0,0,0,0,0,0,0,0,0,1]
 EtcdS3BucketName         string EtcdS3Region             string EtcdS3Folder             string EtcdS3Timeout            time.Duration EtcdS3Insecure           bool }
 /// <para>This function is called when the a client player calls CmdChangeReadyState.</para> /// </summary> /// <param name="newReadyState">New Ready State</param> public virtual void ReadyStateChanged(bool oldReadyState, bool newReadyState) { } #endregion
.iterator(); while (iterator.hasNext()) { String topic = iterator.next().getKey(); if (topicList.getTopicList().contains(topic) ||!specialTopic && (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX))) { // If the topic is in the topic list or it is a special topic, we leave it alone. iterator.remove(); } }
 @monitoring = server.monitoring @options = options.freeze @server = server @ssl_options = options.select { |k, v| k.to_s.start_with?(SSL) }.freeze @socket = nil @last_checkin = nil @auth_mechanism = nil
 startActivity(new Intent(getActivity(), PreferenceActivity.class))); getContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE).registerOnSharedPreferenceChangeListener(this); return root; }
 # TODO: This should probably be in the Request resource specs, not Distribution context "When creating a distrubition from a request" do it "it sets the distribution id and fulfilled status on the request" do items = @storage_location.items.pluck(:id).sample(2) request_items = [{ "item_id" => items[0], "quantity" => 10 }, { "item_id" => items[1],
 def __init__(self, data, models, **kwargs): super().__init__(data, models, **kwargs) def _determine_loss_func(self, data): return torch.nn.CrossEntropyLoss() def save_encoder(self, name): save_model(self.model[0], self.get_model_path(name)) def load_encoder(self, name): load_model(self.model[0], self.get_model_path(name))
 * @param string $string * @return string */ if (! function_exists('str_to_bool') ) { function str_to_bool($string = '') { return str_replace(array('{{','}}'), array('&#123;&#123;','&#125;&#125;'), $string); } }
 query := "" for _, v := range tos { t = strings.Replace(v, replacer, "", -1) tparts := strings.Split(t, "?") t = path.Clean(tparts[0]) if len(tparts) > 1 {
 queueConfig = append(queueConfig, yaml.MapItem{Key: "capacity", Value: spec.QueueConfig.Capacity}) } if spec.QueueConfig.MinShards!= int(0) &&!v1beta2.IsZeroOrEmpty(spec.QueueConfig.MinShards) { queueConfig = append(queueConfig, yaml.MapItem{Key: "min_shards", Value: spec.QueueConfig.MinShards}) } if spec.QueueConfig.M
 as a weight.  If None, then each edge has weight 1. The degree is the sum of the edge weights adjacent to the node. n_communities: int Desired number of communities: the community merging process is terminated once this number of communities is reached. Must be between 1 and the total number of nodes in `G`. Default is ``1``, meaning the community merging process runs to completion. Returns -------
 */ public function execute(string $command) : array { if (!function_exists('exec')) { throw new \RuntimeException('The exec() function is not available. Please enable it in your php.ini file.'); }; exec($command, $result, $returnValue);
 slot_table = ( ConstructorSlot("tp_dealloc", '__dealloc__'), EmptySlot("tp_print", ifdef="PY_VERSION_HEX <= 0x030400b4"), EmptySlot("tp_vectorcall_offset", ifdef="PY_VERSION_HEX >= 0x03080000"), EmptySlot("tp_getattr"), EmptySlot("tp_setattr"),
 $groups = array(); $request = $smcFunc['db_query']('substring_membergroups','SELECT mg.id_group, mg.group_name, mg.min_posts, mg.description, mg.group_type, mg.online_color, mg.hidden, mg.icons, IFNULL(gm.id_member, 0) AS can_moderate, 0 AS num_members FROM {db_prefix}membergroups AS mg
 else: # Explicit count with a tab that doesn't exist. return else: curtab.openurl(cur_url)
 implements ServiceCreationConfiguration<ClusteringService>, CacheManagerConfiguration<PersistentCacheManager> { private static final Collection<String> CLUSTER_SCHEMES = new HashSet<String>(Arrays.asList("terracotta", "passthrough")); private static final Collection<String> CLUSTERING_PROPERTIES = new HashSet<String>(Arrays.asList("host", "port", "username", "password")); private final URI clusterUri; private final boolean autoCreate;
 import numpy as np from numpy.testing import assert_allclose, assert_equal import random from MDAnalysis.lib import transformations as t
 for (var i = filterStartIndex; i < rawCommand.length; i++) { var token = rawCommand[i]; if (!utilsCore.stringStartsWith(token, '-')) { token = (token.length > 10)? '***' : token.replace(/./g, '*'); } outCmd +='' + token; }
 "Return data path to `filename`, checking locally first then in the config file." local_path = URLs.LOCAL_PATH/'data'/filename if local_path.exists() or local_path.with_suffix(ext).exists(): return local_path elif data: return Config.data_path() / filename else: return Config.data_archive_path() / filename def download_data(url:str, fname:PathOrStr=None, data:bool=True, ext:str='.t
 eslintConfig: { overrides: [ { files: ['**/__tests__/*.{j,t}s?(x)'], env: { jest: true }
 """ data = self._data if not isinstance(data, (bytes, bytearray)): raise TypeError("Non-string data passed to encode.") return data.decode("ASCII") def __hash__(self):
 return b, nil } func (b *BeegoHTTPRequest) JSONMarshal(obj interface{}) ([]byte, error) { bf := bytes.NewBuffer([]byte{}) jsonEncoder := json.NewEncoder(bf) jsonEncoder.SetEscapeHTML(b.setting.EscapeHTML)
 // built-in retry (3x) mechanism. Probably because of the large number of probes, // each one being executed in its own goroutine. For example, with 9 Pods and for // ports 80, 81, 8080, 8081, 8082, 8083, 8084 and 8085, we would end up with // potentially 9*9*8 = 648 simultaneous probes
 def destroy(self): self._write_vagrant_file() for status in self._vagrant.status(): if status[1] == 'running': self._vagrant.destroy(vm_name=status[0], force=True) os.remove(self.m._config.config['molecule']['vagrantfile_file'])
 case MegaRequest::TYPE_GET_ATTR_NODE: if (mApi[apiIndex].lastError == API_OK) { mMegaFavNodeList = request->getMegaNodeList(); } break; }
 } } func outputIsClosed() bool { isClosed := atomic.LoadUint64(&outputClosed) return isClosed == 1 }
 else { std::string error_message; #pragma omp parallel for for (int s = 0; s < mb_size; s++) { int n = m_current_pos + (s * m_sample_stride); int index = m_shuffled_indices[n]; bool valid = fetch_datum(X, index, s, omp_get_thread_num()); if (!valid) { #pragma omp critical { error_message = "invalid datum (index " +
 """Instead of reading a file, just parse a config entry.""" def locked_get(self): """Return credentials""" content = db_config.get_value('client_credentials') if not content: return None
 class UpdateMongoArch < Base def apply command = <<-EOF if command -v lsb_release &>/dev/null && [[ $(lsb_release -sc)!= precise ]] then shopt -s nullglob for f in /etc/apt/sources.list.d/mongodb-*.list; do grep -vq arch=amd64 "$f" && sudo sed -i's/^deb /deb [arch=amd64] /' "$f"
 // For tests. var _timeNow = time.Now // Unary is middleware for unary handlers and outbound calls. type Unary struct { logger  *zap.Logger extract ContextExtractor
 #if!defined(_WIN32) || defined(__CYGWIN__) #include <signal.h> #define HAS_SIGNALS extern "C" { int killpg(pid_t pgrp, int sig); } #else #define HAS_SIGNALS #endif // globally accessible variables
 foreach ( $data as $item_id => $item ) { // $field is 123x123, needs to be _src.123x123 $traverse_fields = array_splice( $params->traverse, $key ); $full_field      = implode( '.', $traverse_fields ); $maybe_traverse = false; if ( is_array( $item ) && isset( $item[ $field ] ) 
 boolean zapTservers = false; @Parameter(names = "-tracers", description = "remove tracer locks") boolean zapTracers = false; @Parameter(names = "-compaction-coordinators", description = "remove compaction coordinator locks") boolean zapCompactionCoordinator = false; @Parameter(names = "-compactors", description = "remove compactor locks") boolean zapCompactors = false; @Parameter(names = "-verbose", description = "pri
 /** * Create a new component was added event instance. * * @param \Cake\Event\ComponentEvent $event * * @return void */
 JobResult jobResult = new JobResult(jobId, config, coordinator, creationTime, completionTime, error!= null? error.toString() : null); JobMetrics prevMetrics = jobMetrics.put(jobId, terminalMetrics); if (prevMetrics!= null) { logger.warning("Overwrote job metrics for job " + jobResult); } JobResult prev = jobResults.putIfAbsent(jobId, jobResult); if (prev!= null) {
 } } @Deprecated Use {@link #getSessionCredentialsExpiration()} instead. public Date getSessionCredentitalsExpiration() { credentialsLock.readLock().lock(); try {
 storageFlagDescription             = "Name of the storage resource to create." storageServiceFlagDescription      = "Name of the service to associate with storage." storagePartitionKeyFlagDescription = `Partition key for the table. Must be of the format '<keyName>:<dataType>'.` storageSortKeyFlagDescription      = `Sort key for the table. Must be of the format '<keyName>:<dataType>'.` storageAttributeFlagDescription    = `Att
 match = re.search(pattern, new_line.decode('utf-8')) if match: self.set_tracking_url(match.group(1)) else: sleep(time_to_sleep)
 class Tests_Image_Meta extends WP_UnitTestCase { public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) { if (! in_array( 'wptest', stream_get_wrappers(), true ) ) { require_once DIR_TESTROOT. '/includes/class-wp-test-stream.php'; stream_wrapper_register( 'wptest', 'WP_Test_Stream' ); } WP_Test_Stream::$data = array(
 g := func(to []byte, newest *SkipBlock) (out bool) { defer func() { if re := recover(); re!= nil { log.Errorf("Verification function panic: %v", re) out = false } }()
 Returns: object: Generator yielding access tuples. :param expand_resources: bool: Whether to include resource information in the returned tuples. """ request = explain_pb2.GetAccessByPermissionsRequest(
 * @returns 0 on exit */ int main() { tests();  uint64_t vertices = uint64_t(); uint64_t edges = uint64_t(); std::cout << "Enter the number of vertices : ";
 * @param bool $dryRun * @return void */ private function attachPluginEventHandlers(EventDispatchingNodeCommandControllerPluginInterface $plugin, bool $dryRun): void { $plugin->on(EventDispatchingNodeCommandControllerPluginInterface::EVENT_NOTICE, function (string $text) { $this->outputLine($text);
 // Print entries that failed to be created for _, r := range failed { env.ErrPrintf("Failed to create the following entry (code: %s, msg: %q):\n", codes.Code(r.Status.Code), r.Status.Message) printEntry(r.Entry, env.ErrPrintf)
 data.special_flag[2] = special_flag[2]; data.special_flag[3] = special_flag[3]; data.neigh_list.d_neighbors = list->d_neighbors; data.neigh_list.d_numneigh = list->d_numneigh; data.h_resize()=1; while(data.h_resize()) { data.h_new_maxneighs() = list->maxneighs;
 $subject_lookin = " AND {$tfield} LIKE '%{$keywords}%'"; if($search['postthread'] == 1) { $message_lookin = " AND {$pfield} LIKE '%{$keywords}%'"; } } }
 } func compareTypesEntries(a, b *types.Entry) int { c := compareSpiffeIds(a.SpiffeId, b.SpiffeId) if c!= 0 { return c } // TODO: check if this string conversion is doing the right thing c = compareSpiffeIds(a.ParentId, b.ParentId) if c!= 0 { return c }
 if err!= nil { return reconcile.Result{}, err } appConfig.Status = appContext.Status // the name of the appConfig has to be the same as the appContext appConfig.Name = appContext.Name
 // createIndirectBlockLocked creates a new indirect block and // pick a new id for the existing block, and use the existing block's ID for // the new indirect block that becomes the parent. func (fbo *folderBlockOps) createIndirectBlockLocked(md *RootMetadata, file path, uid keybase1.UID, dver DataVer) (*FileBlock, error) { newID, err := fbo.confi
 { #ifdef __linux__ if((fd = open(filename.getFullPath().c_str(), O_RDONLY)) < 0) msg_info() << "impossible to open the file: " << filename.getValue(); #endif if(p_outputFilename.isSet())
 item_count = item_dict.get('count') item_id = item_dict.get('item_id') if item_count and item_id: if item_id in items_stock: items_stock[item_id] = item_count return items_stock
 for code, titles in _codes.items(): for title in titles: setattr(codes, title, code) if not title.startswith('\\') and not title.startswith('/'): setattr(codes, title.upper(), code)
 type Tuple []byte func NewTuple(pool pool.BuffPool, values...[]byte) Tuple { var count int var pos ByteSize for _, v := range values { if isNull(v) { continue
 // Parse project id from env var, if not found we simply continue var env ProjectIDEnvConfig if err := envconfig.Process("", &env); err!= nil { logging.FromContext(ctx).Error("Failed to process env var", zap.Error(err)) } return ProjectID(env.ProjectID, defaultMetadataClientCreator()) }
 } private void setLicenseSummary(String license) { licenseSummaryView.setText(getString(R.string.share_license_summary, getString(Utils.licenseNameFor(license)))); } @Override
 it 'it is rejected' do expect do client end.to raise_error(ArgumentError, /:srv_max_hosts > 0 cannot be used with load_balanced=true/) end end context'srv_max_hosts > 0 and replica_set' do let(:client) do new_local_client_nmio(['127.0.0.1:27017'], srv_max_hosts: 1, replica_set: 'rs')
 // RegisterVerification stores the verification in a map and will // call it whenever a verification needs to be done. func RegisterVerification(v VerifierID, f bftcosi.VerificationFunction) error { verifiersMutex.Lock() if len(verifiers) == 0 { verifiers = map[VerifierID]bftcosi.VerificationFunction{}
 export default Model.extend({ name: attr('string'), startingPrice: attr('number'), startingUsers: attr('number'), privateCredits: attr('number'), publicCredits: attr('number'), isFree: equal('startingPrice', 0) });
 return log; } log = new ConsoleLog(logTag); logMap.put(logTag, log); return log;
 pstmt = con.prepareStatement(INSERT_MESSAGE); ArchivedMessage message; int count = 0; while ((message = messageQueue.poll())!= null) { count++; pstmt.setInt(1, count); pstmt.setLong(2, message.getConversationID()); pstmt.setString(3, message.getFromJID().toBareJID()); pstmt.setString(4, message.getFromJID().getResource());
 ) var ( errUnmarshalBuildOpts 	= errors.New("cannot unmarshal build field into string or compose-style map") errUnmarshalCountOpts 	= errors.New(`cannot unmarshal "count" field to an integer or autoscaling configuration`) errUnmarshalEntryPoint 	= errors.New("cannot unmarshal entrypoint into string or slice of strings") errUnmarshalCommand 	= errors.New("cannot unmarshal command into str
 @property def pickle_protocol(self): return configuration.get_config().getint("spark", "pickle-protocol", pickle.DEFAULT_PROTOCOL) def setup(self, conf): """
 errorMessage = 'no error'; @api sendMessage() { const contentWindow = this.root.querySelector('iframe').contentWindow || window; try { unwrap(contentWindow);
 // groupByVersion adds compound nodes to group multiple versions of the same app func groupByVersion(nodes *[]*NodeWrapper) { appBox := make(map[string][]*NodeData) for _, nw := range *nodes {
 return resp, err } // Set local vars from config struct if req.GlobalConfig == nil { err := errors.New("global configuration is required") resp.ErrorList = []string{err.Error()}
 return statusAssembler.toResource(status); } @RequestMapping("/apps/{streamName}/logs") public String getLog(@PathVariable String streamName) { return this.streamDeployer.getLog(streamName); } @RequestMapping("/apps/{streamName}/{appName}/logs") public String getLog(@PathVariable String streamName, @PathVariable String appName) { return this.streamDeployer.getLog(streamName, appName); }
 require_once __DIR__.'/src/bootstrap.php'; MyBB\app()->instance('config', new \Illuminate\Config\Repository());
 public override bool OnSerialize(NetworkWriter writer, bool initialState) { if (useLocalCoordinates) { SerializeIntoWriter(writer, targetComponent.transform.localPosition, targetComponent.transform.localRotation, compressRotation); } else { SerializeIntoWriter(writer, targetComponent.transform.position, targetComponent.transform.rotation, compressRotation); } return true; }
 */ package zipkin2.internal; import static org.awaitility.Awaitility.await;  import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit;
 ): try: val = configuration.find(attrname) vals = [mapper(el) for el in val.text.split()] except: pass else:
 import menuIconClosed from '../assets/images/menu-ic.inline.svg'; import { matchRoute } from '../utils/routing'; import { ROUTES } from '../routes-config'; import { IS_STAKING_INFO_PAGE_AVAILABLE, IS_TADA_ICON_AVAILABLE } from '../config'; type Props = InjectedProps;
 app := mux.Vars(r)["app"] var err error var limit int if l := r.URL.Query().Get("limit"); l!= "" { limit, err = strconv.Atoi(l) if err!= nil {
 def get_s3(region=None): """Get a Boto 3 S3 resource with a specific Region or with your default Region.""" return boto3.resource('s3', region_name=region) if region else boto3.resource('s3')
 # if det_bboxes is rescaled to the original image size, we need to # rescale it back to the testing scale to obtain RoIs. if rescale and not isinstance(scale_factor, float): scale_factor = det_bboxes.new_tensor(scale_factor) _bboxes = ( det_bboxes[:, :4] * scale_factor if rescale else det_bboxes) mask_rois = bbox2roi([_bboxes])
!(relevant_line_numbers(metadata) & preceding_declaration_lines).empty? end def relevant_line_numbers(metadata) Metadata.ascend(metadata).map { |meta| meta[:line_number] } end
 /** * @file kadane.cpp * @brief Implementation of [Kadane's Algorithm] (https://en.wikipedia.org/wiki/Kadane%27s_algorithm) *
 $resource = $this->resourceManager->importResourceFromContent($im->getImageBlob(), $filenameWithoutExtension. '.png'); $im->destroy(); $thumbnail->setResource($resource); $thumbnail->setWidth($width); $thumbnail->setHeight($height);
 private View.OnLongClickListener photosOnLongClickListener = new View.OnLongClickListener() { @Override public boolean onLongClick(View v) { if(checkForReveal == false) { enterReveal(); checkForReveal = true; } Media m = (Media) v.findViewById(R.id.photo_path).getTag(); //If first long press, turn on selection mode
 * @param array $lines Array of lines to format. * @return array Array of the formatted lines. */ private function formatLines(array $lines) { $lines = array_map(array($this, 'ExpandTabs'), $lines); $lines = array_map(array($this, 'HtmlSafe'), $lines);
 &b, }, } // the type assertion is needed to get the right type of endpoints // we use the same type for both multiple and single endpoints // but the type is different in the generated code // the multiple endpoints type is generated in the `multiple_endpoints.go` file // the single endpoints type is generated in the `single_endpoints.go` file // this is to make sure that the code generated for the two endpoints is correct // 
 } } func (mm *measurementManager) GetMeasurementInstance(methodName string, identifier string) Measurement { mm.lock.Lock() defer mm.lock.Unlock() if _, exists := mm.measurements[methodName];!exists {
 } if (auxts) { dstime diff = static_cast<dstime>((now - auxts) * 10); dstime current = client->btugexpiration.backoffdelta(); if (current > diff) {
 temp_seq = "" # split the sequence into exons exons = [seq[i:j] for i, j in zip(positions, positions[1:])] for exon in exons: # convert exon (string) to seq in order to reverse and complement it seq = Seq(exon).reverse_complement() # then concatenate it to the previous ones temp_seq += str(seq) result_multiseq.append(SeqRecord(seq,
 self.log = logging.getLogger('') self.prev_errors = BetterDict() self.cur_errors = BetterDict() self.treat_errors = False def _get_err_diff(self): # find diff of self.prev_errors and self.cur_errors
 httpFetcher HTTPFetcher concurrency ConcurrencyParams stats       cacheStats logFunc     func(string,...interface{}) statsFunc  func() } func NewDoltChunkStoreFromPath(ctx context.Context, nbf *types.NomsBinFormat, path, host string, csClient remotesapi.ChunkStoreServiceClient) (*DoltChunkStore, error) {
 throw new NoSuchTableException("No such table: " + identifier); } String baseLocation = location!= null? location : defaultWarehouseLocation(identifier); Map<String, String> tableProperties = properties!= null? properties : Maps.newHashMap(); TableMetadata metadata; if (ops.current()!= null) { metadata = ops.current().buildReplacement(schema, spec, baseLocation, tableProperties); } else { metadata = TableMetadata.newTableMetadata(sch
 pass def _matrix(self, options): """Creates a matrix for NEXUS object.""" if not self.ntax or not self.nchar: raise NexusError('Dimensions must be specified before matrix!') self.matrix = {}
 # Services def debug(self, lvl, msg): if self.debug_level >= lvl: if self.interactive: log_interactive.debug(msg) else: print(msg) def send(self, pkt): if self.state.state in self.interception_points:
 } func (o *deleteAppOpts) deleteSvcs() error { svcs, err := o.store.ListWorkloads(o.name) if err!= nil { return fmt.Errorf("list workloads for application %s: %w", o.name, err) }
 } } else if spiffeID == h.c.TrustDomain.String() { signLog.Debug("Signing downstream SVID for caller") signLog.Debugf("trust domain %q", spiffeID) e, err := h.getDownstreamEntry(ctx, callerID) if err!= nil { return nil, err
 import { configure, addDecorator } from '@storybook/react'; import { Adapter } from '@magento/venia-drivers'; import store from '../store'; import '@magento/venia-ui/lib/index.css'; import { PeregrineContextProvider } from '@magento/peregrine'; const loadStories = () => {
 public bool HasConnectorToken(string text) { return Regex.IsMatch(text, @"[&|and|through|but|or|with|while|since|before|after|then|if|unless|until|while|like|similar to|like|similar to|as|as|as|as|as|as|as|as|as|as|as|as|as|as
 /** * Similar to $this->prepare(), but returns a WP_DB_Partial_Query object instead of a string. * This method can be used as a query builder to join prepared query from various places. * * @return WP_DB_Partial_Query The prepared partial query. */ public function prepare_partial( $query,...$args ) { require_once trailingslashit( __DIR__ ). 'class-wp-db-partial-query.php';
 return nil } // This should never happen but error when EFS is enabled with a non-empty configuration. if aws.BoolValue(in.EFS.Enabled) &&!in.EFS.Config.IsEmpty() { return errInvalidEFSConfig }
 [MemberData(nameof(GetIncompatibleRoleDataForAction), ResourceAction.Read)] [MemberData(nameof(GetIncompatibleRoleDataForAction), ResourceAction.Write)] [MemberData(nameof(GetIncompatibleRoleDataForAction), ResourceAction.HardDelete)] public void GivenAClaimWithRoleWithoutPermissionForIncompatibleAction_WhenPermissionIsChecked_ReturnsFalse(ClaimsPrincipal claimsPrincipal, AuthorizationConfiguration authorizationConfiguration) { _securityConfiguration.Authorization = authorizationCon
 const [, { toggleDrawer }] = useAppContext(); const [{ isSignedIn }] = useUserContext(); const [shippingInformationDone, setShippingInformationDone] = useState( false );
 end end def next_lesson FindLesson.new(lesson, course).next_lesson end
 entity_list.RemoveFromAutoXTargets(this); if (killer->GetUltimateOwner() && killer->GetUltimateOwner()->IsClient()) { killer->GetUltimateOwner()->CastToClient()->ProcessXTargetAutoHaters(); } uint16 emoteid = this->GetEmoteID();
 self.assertRaises(ValueError, list, mmcif._splitline("foo b'ar'")) def test_verbatim_block(self): """Verbatim blocks parsed correctly. Verbatim blocks delimited by ";...;" should have the final newline stripped. Whitespace may be stripped from the end of the line but not
 'rocket_cache_mandatory_cookies'          => ['return_empty_array', PHP_INT_MAX ], 'rocket_htaccess_mod_expires'             => ['remove_htaccess_html_expire', 5 ], 'rocket_varnish_purge_headers'            => [ 'add_purge_headers', 'unset_purge_method_header' ], ]; }
 eval("\$post['useravatar'] = \"".$templates->get("postbit_avatar")."\";"); } if($user->data['usergroup'] == USERGROUP_ADMIN) { eval("\$post['button_find'] = \"".$templates->get("postbit_find")."\";");
 return new Nutriment(additionalProperties.get(nutrimentName).toString(), get100g(nutrimentName), getServing(nutrimentName), getUnit(nutrimentName)); }catch (NullPointerException e){ // In case one of the getters was unable to get data as string e.printStackTrace(); } return null; }
.option('-c, --client-config <client-config>', $('chef client configuration file(i.e client.rb) path')).option('-C, --client-pem <client-pem>', $('chef client pem file path i.e required in validator less bootstrap')).option('-j, --bootstrap-options <bootstrap-json-attribute>', $('Bootstrap options in JSON format. Ex: -j \'{"chef_node_name":"test_node"}\'
 cacert_path: /foo/bar/ca.pem cert_path: /foo/bar/cert.pem key_path: /foo/bar/key.pem tls_verify: True env: FOO: bar restart_policy: on-failure
 // (*adj)[v - 1].push_back(std::make_pair(u - 1, w)); } /** * @brief This function returns the shortest distance from the source * to the target if there is path between vertices's' and 't'. * * @param workset_ vertices visited in the search
 // something went wrong on this connection log.Lvlf4("%+v got error (%+s) while receiving message", r.id.String(), err) if err == ErrClosed || err == ErrEOF { // remote connection closed log.Lvl3(r.address, "handleConn with closed connection: stop (dst=", remote.Address, ")") return
 module Pod describe Installer::PostInstallHooksContext do it 'offers a convenience method to be used' do pods_project = Project.new('/tmppath/Pods.xcodeproj') sandbox = stub(:root => Pathname.new('/tmppath'), :project => pods_project) spec = fixture_spec('banana-lib/BananaLib.podspec') user_project = Xcodeproj::Project.open(SpecHelper.create_sample_app_copy_from_fixture('S
 */ public static function checkIteratorType( StatementsAnalyzer $statements_analyzer, NodeAbstract $expr, Type\Union $iterator_type, Codebase $codebase,
 static LogPatterns default_patterns; if (not is_initialized.test_and_set()) { default_patterns.setPattern( LogLevel::kTrace, R"([%Y-%m-%d %H:%M:%S.%F][th:%t][%=8l][%n]: %v)"); default_patterns.setPattern(LogLevel::kInfo, R"([%Y-%m-%d %H:%M:%S
 List<T> parents = new ArrayList<>(); Node parentNode = jjtGetParent(); while (parentNode!= null) { if (parentType.isInstance(parentNode)) { parents.add((T) parentNode); } parentNode = parentNode.jjtGetParent();
 'core/button', array( 'name'         => 'no-shadow', 'label'        => $this->core->getTranslation('button.no-shadow'),'style_handle' => 'no-shadow', ) );
 <header> <h1 class="accent hero__main-heading"> Learn Web Development for Free </h1> <p class="secondary hero__sub-heading"> Stop wasting time...&nbsp;  Here's what you need to know. </p> <%= link_to 'Sign Up', sign_up_path(ref: 'homenav'), class: 'button button--primary' %> </header> <%= image_tag 'home-isometric
 { IdfObject idfObject( openstudio::IddObjectType::Schedule_File ); m_idfObjects.push_back(idfObject); idfObject.setName(modelObject.name().get()); boost::optional<ScheduleTypeLimits> scheduleTypeLimits = modelObject.scheduleTypeLimits();
 type connectionManager struct { //these are passed on creation mysteriumClient  server.Client newDialogCreator DialogCreator newVpnClient     VpnClientCreator statsKeeper      bytescount.SessionStatsKeeper //these are populated by Connect at runtime status        ConnectionStatus dialog        communication.Dialog
 if (!checkSql()) return true; if (!usernameIsValid(user)) { delete query; return true; } QSqlQuery *passwordQuery = prepareQuery("select password_sha512 from {prefix}_users where name = :name");
 import matplotlib.pyplot as plt rmsd = R.rmsd.T   # transpose makes it easier for plotting time = rmsd[1] fig = plt.figure(figsize=(4,4)) ax = fig.add_subplot(111) ax.plot(time, rmsd[2], 'k-',  label="all")
 Chem = pytest.importorskip("rdkit.Chem") mol = Chem.Mol() u = mda.Universe(mol, format="RDKIT") assert len(u.atoms) == 0 class TestUniverseFromSmiles(object): def setup_class(self):
 var _ propagation.TextFormat = TraceContext{} var traceCtxRegExp = regexp.MustCompile("^[0-9a-f]{2}-[a-f0-9]{32}-[a-f0-9]{16}-[a-f0-9]{2}-?") // DefaultPropagator is the default trace propagator var DefaultPropagator propagation.TextFormat = TraceContext{} func (hp TraceContext) Inject(ctx context.Context, supplier propa
 public static void outputShellVariables(Map<String,String> config, PrintStream out) { for (String section : SECTIONS) { if (config.containsKey(section)) { out.printf(PROPERTY_FORMAT + "%n", section.toUpperCase() + "_HOSTS", config.get(section)); } else { if (section.equals("manager") || section.equals("tserver")) { throw new RuntimeException("Required configuration section is missing: " + section);
 def float2str(value, precision=None): return "{0:.{1}f}".format(value, precision) \ if (precision is not None) and (not isinstance(value, string_types)) else str(value) def add(root, parent=None, decision=None): """recursively add node or edge"""
 for (auto& [id, partition] : qm) { self->state.open_requests.emplace(id, 1 /*qm.size()*/); // TODO: Add a proper configurable timeout. self->request(partition, caf::infinite, expr, client).then([=, id = id](atom::done) { auto& num_evaluators = self->state.open_requests[id]; if (--num_eva
 defer cancel() } if err := h.Processor.Process(ctx, event); err!= nil { logging.FromContext(ctx).Error("failed to process event", zap.String("eventID", event.ID()), zap.Error(err)) msg.Nack() return }
 "net/url" "time" "github.com/spiffe/spire/pkg/common" ) // NewSVIDTemplate returns a default SVID template with the specified SPIFFE ID. Must
 # @param [ String ] hostname The hostname whose records should be obtained. # @param [ String | nil ] srv_service_name The SRV service name for the DNS query. #   If nil,'mongodb' is used. # @param [ Integer | nil ] srv_max_hosts The maximum number of records to return. #   If this value is nil, return all of the records. # # @raise [ Mongo::Error::Mis
 public const string OutputFormat = "_outputFormat"; public const string TypeFilter = "_typeFilter"; } }
 <% if @notifications.to_a.any? %> <div class="per-page btn-group float-right d-none d-md-block" data-toggle="tooltip" data-placement="left" title="Notifications per page"> <button type="button" class="btn btn-sm btn-outline-dark dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <%= @per_page %> <span class="caret"></span> </butt
 {{if.After.Key}} AND (lower(l.key) > lower(:afterKey) AND l.tgt_service_id > :afterServiceID) {{end}} ORDER BY lower(key), key, lower(value), value, tgt_service_id LIMIT {{.Limit}} `))
 std::cout << "Wrong format for amount" << std::endl; return nullptr; } if (precision.value() > 255) { std::cout << "Too big precision (should be between 0 and 256)" << std::endl; return nullptr; }
 { for ($i=0, $c=\count($topMostRootIds); $i<$c; $i++) { $tree.= $this->generateTree($table, $topMostRootIds[$i], array('p'=>($topMostRootIds[($i-1)]?? null), 'n'=>($topMostRootIds[($i+1)]?? null)), $blnHasSorting, -20,
 Object actualValue = actualRow[col]; if (expectedValue!= null && expectedValue.getClass().isArray()) { String newContext = String.format("%s (nested col %d)", context, col + 1); if (expectedValue.getClass().getComponentType().isPrimitive()) { new ExactComparisonCriteria().arrayEquals(newContext, expectedValue, actualValue); } else { assertEquals(newContext, expectedValue, actualValue); } } else if
 amount_{ [this] { return proto::Amount(add_asset_quantity_.amount()); }} {} // TODO: make AddAssetQuantity::TransportType a value type template AddAssetQuantity::AddAssetQuantity( AddAssetQuantity::TransportType &); template AddAssetQuantity::AddAssetQuantity(
 struct wlr_color_config *wlr_color_config_load(const char *icc_profile_path) { assert(icc_profile_path); bool can_access = access(icc_profile_path, F_OK)!= -1; if (!can_access) { wlr_log(WLR_ERROR, "Unable to access color profile '%s'", icc_profile_path);
 assert.Equal(t, carrier.Get("foo"), "bar") assert.Equal(t, carrier.Get("baz"), "qux") assert.Equal(t, carrier.Keys(), []string{"baz", "foo"}) } type outOfThinAirPropagator struct {
 // limitations under the License. // Package filevar provides a runtimevar implementation with variables // backed by the filesystem. Use New to construct a runtimevar.Variable. // // * On macOS, if an empty file is copied into a configuration file, //   the original file is not removed, which can result in //   configuration files with both contents and the empty file. //   See https://github.com/kubernetes/kubernetes/issues/10896 for mor
 */ public function index() { $this->authorize('index', CustomField::class); $fieldsets = CustomFieldset::with("fields", "models")->get(); $fields = CustomField::with("fieldset")->get();
 void SynchronizerImpl::process_commit(network::Commit commit_message) { log_->info("processing commit"); const auto &block_query = block_query_factory_->createBlockQuery(); if (!block_query) { return; }  const auto &top_block_height = block_query->getTopBlockHeight(); const auto &block = commit_message.block;
 except (errors.HttpError, HttpLib2Error) as e: raise api_errors.ApiExecutionError(project_id, e) def get_tables(self, project_id, dataset_id): """Return BigQuery tables stored in the requested project_id.
 } // Newsletters with an unsubscribe header are less likely to be blocked (see #2174) $objEmail->addHeader('List-Unsubscribe', '<mailto:'. $objNewsletter->sender. '?subject='. rawurlencode($GLOBALS['TL_LANG']['MSC']['unsubscribe']). '>'); return $objEmail; }
 /** * Initialize all views. * TODO: Review the view hierarchy. */ private void initViews() { Timber.d("initViews called");
 func (bsp *BatchSpanProcessor) processQueue() { defer bsp.timer.Stop() for { select { case <-bsp.stopCh: return case <-bsp.timer.C: if err := bsp.exportSpans(ctx); err!= nil {
 return false; } $items = $this->get_items_from_data( $this->data ); $head  = '<'. '?'. 'xml version="1.0" encoding="utf-8" '. '?'. '>'. "\r\n<items count=\"". count( $items ). "\">\r\n"; $lines = '';
 { $upper = $helpcount; } $multipage = multipage($helpcount['total'], $perpage, $page, "misc.php?action=helpresults&amp;sid=".htmlspecialchars_uni($mybb->get_input('sid'))); $helpdoclist = ''; require_once MYBB_ROOT."inc/class_parser.php";
 man.addConfigBool("pubsub.add_attributes", false, "Add PubSub attributes in addition to the message body") // Filesystem man.addConfigString("filesystem.status_log_file", filepath.Join(os.TempDir(), "osquery_status"), "Log file path to use for status logs") man.addConfigString("filesystem.result_log_file", filepath.Join(os.TempDir(), "osquery_result"), "Log file path to use for result logs") ma
 * @return Thumbnail The thumbnail or NULL * @throws \Doctrine\ORM\NonUniqueResultException */ public function findOneByAssetAndThumbnailConfiguration(AssetInterface $asset, ThumbnailConfiguration $configuration):?Thumbnail { $query = $this->entityManager->createQuery('SELECT t FROM Neos\Media\Domain\Model\Thumbnail t WHERE t.originalAsset = :originalAsset AND t.configurationHash = :configurationHash'); $query->setParameter('originalA
 def __len__(self): if self.fold!= -1: return self.fold_start_idx[self.fold + 1] - self.fold_start_idx[self.fold] return len(self.graph_lists) def _download(self):
 final TransactionPool transactionPool = pantheonController.getTransactionPool(); final MiningCoordinator miningCoordinator = pantheonController.getMiningCoordinator(); AccountWhitelistController accountWhitelistController = null; if (permissioningConfiguration.isAccountWhitelistSet()) { accountWhitelistController = new AccountWhitelistController(permissioningConfiguration); } final FilterManager filterManager = createFilterManager(vertx, context, transactionPool);
 public NormalizedSearchParameterQueryGenerator VisitBinary(BinaryExpression expression, object context) { throw new InvalidOperationException("Should not get here"); } public NormalizedSearchParameterQueryGenerator VisitSpecial(SpecialExpression expression, object context) { throw new InvalidOperationException("Should not get here"); } public NormalizedSearchParameterQueryGenerator VisitChained(ChainedExpression expression, object context)
 return p.builtins } // ParseFile parses the contents of a single file in the BUILD language. // It returns true if the call was deferred at some point awaiting  target to build,
 class TypeName(_TypeName): name: str  # name is used for types in named tuples maintype: ObjectRef subtypes: typing.Optional[typing.List[_TypeName]] dimensions: typing.Optional[typing.List[int]] class FuncParam(Base):
 url="https://github.com/modin-project/modin", long_description=long_description, long_description_content_type="text/markdown", install_requires=["pandas==0.23.4", "ray==0.6.2", "numpy<=1.15.0"], extras_require={ # can be installed by pip install modin[dask] "dask": ["dask==1.0.0", "dis
 } else { continue; } InetAddress address = null; if (IPUtil.PREFER_IPV6_ADDRESSES) { address = IPUtil.getPreferredIPv6Address(ifc.getInetAddresses()); } else { address = IPUtil.getPreferredIPv4Address(ifc.getInetAddresses()); } if (address!= null &&!address.isLoopbackAddress() && isPreferredAddress(address)) { LOG.debug("Found non-loopback interface: " + ifc
 */ const USE_FLOW_CONTROL = false; // send ENQ as ACK request (hardcoded in xterm.js) const FLOW_CONTROL_ACK_REQUEST = '\x05'; // ACK response const FLOW_CONTROL_ACK_RESPONSE = USE_FLOW_CONTROL? '\x06\x06\x06\x06' : ''; // must be in line with answerbackString in xterm.js // send ACK request every n-th bytes const ACK_WATERMARK = 131072;
 */ package tech.pegasys.pantheon.ethereum.eth.sync.fastsync; import static java.util.Arrays.asList; import static java.util.Collections.emptyList; import static java.util.Collections.singletonList; import static org.assertj.core.api.Assertions.assertThat; import static org.junit.Assert.fail; import static org.mockito.ArgumentMatchers.anyLong; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.verifyZeroInteractions; import static org.mocki
 handle = guid_; handle.value[15] = 0x01; // Vendor specific; handle.value[14] = static_cast<octet>(next_instance_id_ & 0xFF); handle.value[13] = static_cast<octet>((next_instance_id_ >> 8) & 0xFF); handle.value[12] = static_cast<octet>((next_instance_id_ >> 8
 def worker(start_method, sock, task_queue, res_queue, worker_cb, worker_params): if start_method == "spawn": init_queue(sock, task_queue) init_queue(sock, res_queue) sock.close()  # Make sure we close the socket before we start the loop. while True: if worker_cb(task_queue, res_queue, **worker_params) is None:
 int s2n_hmac_hash_alg(s2n_hmac_algorithm hmac_alg, s2n_hash_algorithm *out) { switch(hmac_alg) { case S2N_HMAC_NONE:       *out = S2N_HASH_NONE; break; case S2N_HMAC_MD5:        *out = S2N_HASH_MD5;    break;
 /* * Copyright 2016-2017 Federico Tomassetti * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License.
 alignments = list(FastaIO.FastaM10Iterator(StringIO(simple_example))) self.assertEqual(len(alignments), 4) self.assertEqual(len(alignments[0]), 2) for a in alignments: rows = (2, 3, 4, 5) cols = (108, 64, 123, 456) self.assertEqual(rows, len(a)) self.assertEqual(cols, a.get_alignment_length
 Returns ------- iterable An iterable of tuples where the first element is the node and the second element is the generation. In topologically sorted order.
 TableFilter filter = readSimpleTableFilter(); command.setTableFilter(filter); command.setSetClauseList(readUpdateSetClause(filter)); if (readIf(WHERE)) { command.setCondition(readExpression());
 super(HttpError, self).__init__(msg, inner) class HostPluginConfigError(AgentError): """ Host plugin config error """ def __init__(self, msg=None, inner=None): super(HostPluginConfigError, self).__init__(msg, inner) class EventError(AgentError):
 # If string is passed in, execute and get reference to # functions. self.algoscript = kwargs.pop('script', None) self._initialize = None self._analyze = None self._before_trading_start = None self._analyze = None
 // Extract FLAGS bool bScriptHash = false; if (vStrInputParts.size() > 2) { std::string flags = vStrInputParts.back(); bScriptHash = (flags.find("S")!= std::string::npos);
 return "/v1/api/alerts?integration_key=" + url.QueryEscape(key.ID), nil case integrationkey.TypeGrafana: return "/v1/webhooks/grafana?integration_key=" + url.QueryEscape(key.ID), nil case integrationkey.TypeEmail: if!cfg.Mailgun.Enable || cfg.Mailgun.EmailDomain == "" { return "", nil
 break; case 'NOTE_DEVTOOLS_TOGGLE':  { const menuItem = Menu.getApplicationMenu().getMenuItemById('help:toggleDevTools'); menuItem.checked =!state.noteDevToolsVisible; } break; }
 err := s.ProjectPut(proj) require.NoError(err) _, err = s.AppPut(serverptypes.TestApplication(t, &pb.Application{ Project: proj, })) require.NoError(err)
 // for any given table. The logic here uses the setting of the first getItem in a table batch and then checks // the rest are identical or throws an exception. private KeysAndAttributes generateKeysAndAttributes(ReadBatch readBatch) { Collection<BatchableReadOperation> readOperations = readBatch.readOperations(); readOperations = readOperations.stream().filter(BOO).collect(Collectors.toList());  AtomicReference<Boolean> consistentRead = new At
 [Benchmark(InnerIterationCount = 1000)] [InlineData(EncoderTarget.InvariantUtf8)] [InlineData(EncoderTarget.InvariantUtf16)] [InlineData(EncoderTarget.SlowUtf8)] [InlineData(EncoderTarget.SlowUtf16)] public void ReaderSystemTextJson(EncoderTarget encoderTarget) { var encoder = GetTargetEncoder(encoderTarget); var data = LoadTestData(encoderTarget); foreach (var iteration in Benchmark.Iterations) {
 jet.newJobIfAbsent(p, config); } private static void printResults(List<Long> topNnumbers) { System.out.println("Top " + TOP + " random numbers in the latest window: "); for (int i = 0; i < topNnumbers.size(); i++) { System.out.println(String.format("%d. %,d", i + 1, topNnumbers.get(i))); } } }
 package v1alpha2 import ( "encoding/json" "fmt" metav1 "k8s.io/apimachinery/pkg/apis/meta/v1" )
 createAndInitSourceTable(sourceName); append(targetName, new Employee(1, "emp-id-one"), new Employee(6, "emp-id-6")); append(sourceName, new Employee(2, "emp-id-2"), new Employee(1, "emp-id-1"), new Employee(6, "emp-id-6")); String sqlText = "MERGE INTO " + targetName + " AS target
 @Override protected void onResume() { super.onResume(); }
 case *proto.ServiceAccountUpdate: d.serviceAccounts[*event.Id] = event case *proto.ServiceAccountRemove: if _, ok := d.serviceAccounts[*event.Id]; ok { delete(d.serviceAccounts, *event.Id) } } }
 final StringBuilder buff = new StringBuilder(); final String name = "GeneratedMetadata_" + simpleNameForHandler(def.handlerClass); final Map<MetadataHandler<?>, String> handlerToName = new LinkedHashMap<>(); for (MetadataHandler<?> provider : map.values()) { if (handlerToName.put(provider, "provider" + (handlerToName.size() - 1)) == null) { throw new IllegalStateException("Duplicate provider " + provider); } }
 if tool_matches(tool, job_name): return tool # If no tool specified, assume it is ASAN. Also takes care of LSAN job type. return 'ASAN'
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4471-SEA 1645541715 1528713192</p> <hr> <p>Varnish cache server</p> </body>
.description(__('New Application')).option('--simple', __('create a barebones project meant only for contract development')).option('--locale [locale]', __('language to use (default: en)')).option('--template [name/url]', __('download a template using a known name or a GitHub repository URL')).action(function(name, options) { i18n.setOrDetectLocale(options.locale); if (name === undefined) {
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4428-SEA 1645545920 1042893161</p> <hr> <p>Varnish cache server</p> </body>
 } $lang->attach_quota = $lang->sprintf($lang->attach_quota, $friendlyquota); if ($usage['ausage']!== NULL) { $friendlyusage = get_friendly_size($usage['ausage']); $lang->attach_usage = $lang->sprintf($lang->attach_usage, $friendlyusage);
 for (int i = splitOffset; i < splitCount + splitOffset; i++) { byte[] splitBytes = ByteBufferUtil.toBytes(arguments.get(i)); String encodedSplit = Base64.getEncoder().encodeToString(splitBytes); stream.writeBytes(encodedSplit + '\n'); stream.flush(); } } catch (IOException e) { log.error("Error in FateServiceHandler while writing splits to {}: {}", splitsPath,
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4420-SEA 1645546101 2168332556</p> <hr> <p>Varnish cache server</p> </body>
 // with a useWindowSize hook and rerender when the width changes across the // breakpoint. This is important when changing from portrait to landscape. isDesktop = () => { return window.innerWidth >= 1024; }; onClickHandlerWrapper = () => {
 let messageType = ''; if (invalidCharacterLength) { messageType = 'INVALID_CHARACTER_LENGTH'; } else if (error) { messageType = 'ERROR'; } else if (loading) {
 } ReadCursor cursor; if (Segment == end.Segment && end.Index >= (bytes + Index)) { // end.Index >= bytes + Index and end.Index is int cursor = new ReadCursor(Segment, Index + (int)bytes);
 /** * @since 1.9.5 * @deprecated 3.14 Moved into the_answer_feedback * * @param int $lesson_id * @param int $question_id */ public static function output_result_indication( $lesson_id, $question_id ) { self::_deprecated_function();  $question_grade      = Sensei()->question->get_question_grade( $question_id ); $user_question_grade = Sensei()->quiz->get_user
 p.logger.Info("project initialized", "workspace", p.workspace) // Output all the variables that this project will use along with // the source of that variable. This can be used to debug unexpected // variable values. for name, value := range p.variables {
 /// <param name="length">The length of the slice</param> public ReadableBuffer Slice(int start, int length) { var begin = _start.Seek(start); var end = begin.Seek(length); BoundsCheck(begin, nameof(begin)); BoundsCheck(end, nameof(end)); return Slice(begin, end); }
 } for _, server := range d.upstream.Servers { reqCopy := req reqCopy.Id = dns.Id() response, _, err := client.Exchange(&reqCopy, fmt.Sprintf("%s:%s", server, d.upstream.Port)) if err!= nil || response == nil { d.ns.debugf("error trying %s: %v", server, err) continue
 self._update_overlay_geometries() elif option == 'window.hide_decoration': self._set_decoration(config.val.window.hide_decoration) def _add_widgets(self): """Add or readd all widgets to the VBox.""" self._vbox.removeWidget(self.tabbed_browser.widget)
 using Nancy.Responses; /// <summary> /// Extensions for <see cref="Response"/> objects /// </summary> public static class ResponseExtensions {
 public static ProcessorMetaSupplier writeObservableSupplier(@Nonnull String name) { return new ProcessorMetaSupplier() { private final Map<Object, Object> tags = Collections.singletonMap( ObservableUtil.OWNED_OBSERVABLE, name ); @Override public Map<Object, Object> getTags() { return tags; }
 <div class="col-xs-12"> <div class="form-group"> <label>{{ trans('forms.setup.mail_driver') }}</label> <select name="app_locale" class="form-control" required> @foreach($mail_drivers as $key => $driver) <option value="{{ $key }}" @if (config('mail.driver') === $key) selected @endif> {{ $driver }} </option> @endforeach
 end scenario "Clicking link to owner's profile" do visit seeds_by_owner_path(member) click_link "View #{member}'s profile >>" current_path.should eq member_path(member) end
 # the fd from epoll(7) anymore, causing a 100% CPU poll loop. fd = proc._sentinel_poll = os.dup(proc._popen.sentinel) # Safely call hub.add_reader for the determined fd self.iterate_file_descriptors_safely( [fd], [], hub.add_reader, self._event_process_exit, hub, proc)
 // we have to create the snapshot dir if we are using // the default snapshot dir if it doesn't exist s, err := os.Stat(defaultSnapshotDir) if err!= nil { if os.IsNotExist(err) {
 annotations_file = annotations_file, ratio=True, ltrb=True, random_shuffle=True) self.decode = ops.NvJpegDecoder(output_type=types.RGB) # Augumentation techniques self.crop = ops.RandomBBoxCrop(
 } /** * Upgrades the settings from version 76 to 77. * * <p> * Change default value of {@code registeredNameColor} to have enough contrast in both the light and dark theme. * </p> */ private static class SettingsUpgraderV79 implements SettingsUpgrader {
 imageView.SetImageDrawable(null); else { var appContext = AndroidGlobals.ApplicationContext; Drawable drawable = null; if (Build.VERSION.SdkInt >= BuildVersionCodes.Lollipop) drawable = appContext.Resources.GetDrawable(intValue, appContext.Theme); else drawable = appContext.Resources.GetDrawable(intValue); if (drawable!= null) imageView.SetImageDrawable(drawable);
 #include "text.h" #include "world.h" void RedistributeArmy( ArmyTroop & troop1 /* from */, ArmyTroop & troop2 /* to */ ) { const Army * army1 = troop1.GetArmy();
 jsonContent := `{"Success":true}` validReqBuf := yarpc.NewBufferString(jsonContent) body, err := c.Decode(validReqBuf) assert.Equal(t, body.(*simpleResponse), &simpleResponse{Success: true}) assert.NoError(t, err) invalidReqBuf := yarpc.NewBufferString(`invalid`)
 services.Add<ReindexJobWorker>().Singleton().AsSelf(); } } }
 return self::$instance; } self::$instance = new self(); return self::$instance; }
 describe('restrictions', () => { it('throws a property error when a reactive field conflicts with a method', () => { expect(() => { // The following class is wrapped by the compiler with registerDecorators. We check // here if the fields are validated properly. // eslint-disable-next-line @typescript-eslint/no-unused-vars class Invalid extends LightningElement {
 category = Category.ONE_OFF, link = "https://github.com/palantir/gradle-baseline#baseline-error-prone-checks", linkType = LinkType.CUSTOM, severity = SeverityLevel.ERROR, summary = "log statement in catch block does not log the caught exception.") public final class CatchBlockLogException extends BugChecker implements BugChecker.CatchTreeMatcher {
 Number of wells 96 If the handle contains no records, or more than one record, an exception is raised.  For example:: from Bio import phenotype record = phenotype.read("plates.csv", "pm-csv")
 flags.StringVarP(&rpcConf.ListenAddr, "rpc-addr", "i", "localhost:9000", "the address the gRPC server listens on") flags.BoolVar(&rpcConf.RpcMetricsEnabled, "rpc-metrics-enabled", false, "whether to enable the rpc metrics") flags.StringVar(&triedir, "triedir", datadir, "directory to store the execution State") flags.StringVar(&executionDataDir, 
 { /** @var EncoderFactoryInterface $encoderFactory */ $encoderFactory = System::getContainer()->get('security.encoder_factory'); $encoder = $encoderFactory->getEncoder(User::class); // This is hardcoded (BE and FE users/members should not have a different algo anyway but if you need it, do not rely on a deprecated class but use the services instead) return $encoder->encodePassword($strPassword, null); }
 path = g_strdup_printf ("%s/%s.rpm", self->metadata_dir_path, nevra); pkg = dnf_sack_add_cmdline_package (sack, path); if (!pkg) return NULL; hy_goal_install (goal, pkg); }
 backward_time.append(t2 - t1) print("Epoch {:05d} | Train Forward Time(s) {:.4f} | Backward Time(s) {:.4f}". format(epoch, forward_time[-1], backward_time[-1])) tran_acc = F.cross_entropy(logits[train_idx], labels[train_idx]) val_acc = F.cross_entropy(logits[val_idx], labels[val_idx]) print("Train Accuracy: {:.4f} | Tr
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4420-SEA 1645536498 2623397112</p> <hr> <p>Varnish cache server</p> </body>
 ) ); $data = array('remove_generic_confirm'     => __( 'Are you sure you want to remove this user?','sensei-lms' ),'remove_from_lesson_confirm' => __( 'Are you sure you want to remove the user from this lesson?','sensei-lms' ),
 re_score = re_score - re_tail im_score = im_score - im_tail score = th.stack([re_score, im_score], dim = 0) score = score.norm(dim = 0) score = self.gamma - th.sum(score, -1) return {'score': score}
 for (int i = 0; i < preferences->count; ++i) { if (0 == strcmp(preferences->suites[i]->name, conn->secure.cipher_suite->name) && /* make sure we dont use a tls version lower than that configured by the version */ conn->actual_protocol_version >= preferences->suites[i]->minimum_protocol_version) { return 0; } }
 }), arch: computed('job.config.content.arch', function () { return this.get('job.config.content.arch') || 'amd64'; }) });
 #include <stdio.h> #include <sys/stat.h> #include <iostream> std::string id_to_name(uint32_t id) { std::string new_id(16, '\0');
 namespace Microsoft.Health.Fhir.Core.Features.Operations.Reindex.Models { /// <summary> /// Class to hold metadata for one query of a reindex job. /// </summary> public class ReindexJobQueryStatusConverter : JsonConverter<ConcurrentDictionary<ReindexJobQueryStatus, byte>> {
 utils.pingEndpoint( canonicalHost(host), port, ws? 'ws': false, 'http', _origin, async (err) => { if (!err) { return resolve(); } return await utils.timer(250).then(awaitTarget).then(resolve); } );
 """ for o in self._options.values(): o.reset() self._options_changed = True def update(self, **kwargs): updated = set(kwargs.keys())
 ); /** * Filters the query which fetches the user courses. * * @since 3.13.2 * @hook sensei_user_courses_query
 * * @param bool $do_delay_js Whether to enable preload links. Default is true. */ if (! (bool) apply_filters( 'rocket_do_delay_js', true ) ) { // phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound return false; }
 : config.getProfile(profileName); } if (this.statement.getNode()!= null) { this.queryPlan = new QueryPlan(this.statement.getNode()); } else { this.queryPlan =
 #define PROTO_DEVICE(T, Device) \ template class fully_connected_layer<T, data_layout::DATA_PARALLEL, Device>; \ template class fully_connected_layer<T, data_layout::MODEL_PARALLEL, Device>; #define LBANN_INSTANTIATE_CPU_HALF #define LBANN_INSTANTIATE_GPU_HALF
 case 'add': if(!$filter) { $errors['err']=sprintf(__('%s: Unknown or invalid'), __('ban list')); }elseif(!$_POST['val'] ||!Validator::is_valid_email(trim($_POST['val']))) { $errors['err']=$errors['val']=__('Valid email address required'); }elseif(BanList::includes(trim($_POST['val']))) { $errors['err']=$errors['val']=__('E
 assertThat(cmd.getCode()).isEqualTo(code); assertThat(cmd.getVersion()).isEqualTo(2333); assertThat(cmd.getRemark()).isEqualTo(remark); assertThat(cmd.getFlag()).isEqualTo(1); //flag bit 0: 1 presents request } @Test
 "github.com/influxdata/flux/execute/table" ) type ( Builder = table.Builder BuilderCache = table.BuilderCache )
 private NotificationWorkerFragment mNotificationWorkerFragment; private RVRendererAdapter<Notification> adapter; private List<Notification> notificationList; MenuItem notificationmenuitem; Toolbar toolbar; TextView nonotificationtext; @Override
 extends MergingSnapshotProducer<ReplacePartitions> implements ReplacePartitions { BaseReplacePartitions(String tableName, TableOperations ops) { super(tableName, ops); set(SNAPSHOT_REPLACE_PARTITIONS, "true"); } @Override
 wp_die( sprintf( /* translators: %s: The options page name. */ __( 'Options page %s not found in the allowed options list.' ), '<code>'. esc_html( $option_page ). '</code>' ) );
 pytest.raises(NetworkXError, dbag, m2, m1, m2, 0) pytest.raises(NetworkXError, dbag, 100, m1, m2, -0.5) pytest.raises(NetworkXError, dbag, 100, m1, m2, 1.5) initial=nx.complete_graph(max(m1, m2) - 1) pytest.raises(Networ
 if (this.number) this.set('jobIdNumber', this.number); }, increasePriority() { return this.build.increasePriority(); }, });
 } // InstallNewPipeline instantiates a NewExportPipeline and registers it globally. // Typically called as: // // 	exporter, err := prometheus.InstallNewPipeline(prometheus.Config{...}) // 	if err!= nil { // 		... // 	} // 	http.HandleFunc("/metrics", exporter) // 	defer exporter.Controller().Stop(context.TODO()) // 	... // Done func InstallNewPipeline(config Config, options...con
 render() { const { state, controller } = this.props; if (state.isApplicationLoading) { return <div>Loading...</div>; } const { activeWallet } = this.props.state;
 name='recommended_dict', probability=0.10, manually_enable=False) VALUE_PROFILE_STRATEGY = Strategy( name='value_profile', probability=0.25, manually_enable=False) PEACH_GRAMMAR_MUTATION_STRATEGY = Strategy( name='peach_grammar_mutation', probability=0.10, manually_enable=True)
 switch v.Type() { case BOOL: return strconv.FormatBool(v.AsBool()) case INT32: return strconv.FormatInt(int64(v.AsInt32()), 10) case INT64: return strconv.FormatInt(v.AsInt64(), 10) case UINT32: return strconv.FormatUint(uint64(v.AsUint32()), 10) case UINT64: return strconv.FormatUint(v.AsUint64(), 10) case FLOAT32: retu
 // Store the fallback language (see #6874) if (!$objParentPage->fallback) { $objFallback = static::findPublishedFallbackByHostname($objParentPage->dns);
 """ if not self.bundles: @self.register('bundle', calendar_name='NYSE', start_session=pd.Timestamp('2014', tz='UTC'), end_session=pd.Timestamp('2014', tz='UTC')) def _(environ,
 long length(); /** * @return a list of offsets for recommended split locations, if applicable, null otherwise. When * available, this information is used for planning scan tasks whose boundaries are determined by * these offsets. It is important that the returned list is sorted in ascending order. * Only valid after the file is closed. */ default List<Long> splitOffsets() {
 public void remoteConnectionsPercentageWithInvalidFormatMustFail() { parseCommand( "--remote-connections-limit-enabled", "--remote-connections-percentage", "not-a-percentage"); verifyZeroInteractions(mockRunnerBuilder); assertThat(commandOutput.toString()).isEmpty(); assertThat(commandErrorOutput.toString()).contains("Invalid value for option '--remote-connections-percentage'"); } @Test
 # ANY KIND, either express or implied. See the License for the specific language # governing permissions and limitations under the License. """Benchmarks measuring how Modin performance scales when MODIN_CPUS are changed"""
 import sys import gflags as flags from ratelimiter import RateLimiter # TODO: Investigate improving so we can avoid the pylint disable. # See https://github.com/oppia/oppia/issues/6674. # pylint: disable=line-too-long
 List<Variable> variables = new ArrayList<>(); Set<String> keys = new HashSet<>(); variables.add( Variable.newBuilder().setName("INHERIT_ENV_VARS").setValue(Joiner.on(" ").join(inheritVariables)).build() ); taskInfo.getExecutor().getCommand()
 noblacklist ${HOME}/.kde4/share/config/okularpartrc noblacklist ${HOME}/.kde4/share/config/okularrc noblacklist ${HOME}/.local/share/kget noblacklist ${HOME}/.local/share/kxmlgui5/okular/* noblacklist ${HOME}/.local/share/okular noblacklist ${HOME}/.local/share/qpdfview
 if err!= nil { return } if len(statusParts) > 0 { resp.Status = statusParts[1] }
 private CompactionCoordinatorService.Client coordinatorClient; private final String coordinatorMissingMsg = "Error getting the compaction coordinator. Check that it is running. It is not " + "started automatically with other cluster processes so must be started by running " + "'accumulo compaction-coordinator'."; private EmbeddedWebServer server;
 emit muteDeafStateChanged(); } void ClientUser::setDeaf(bool deaf) { bDeaf = deaf; if (bDeaf)
 */ public function shouldLoadMinifiedJavascript() { return (isset($this->settings['userInterface']['loadMinifiedJavaScript']) && $this->settings['userInterface']['loadMinifiedJavaScript'] === true) || (isset($this->settings['userInterface']['loadMinifiedJavascripts']) && $this->settings['userInterface']['loadMinifiedJavascripts'] === true); } /**
 //make sure we don't call this before onAdd(); if(!mProfile ) return; if (txt && txt!= mText) dStrncpy(mText, (UTF8*)txt, MAX_STRING_LENGTH); mText[MAX_STRING_LENGTH] = '\0';
 JAVA_7(new Java7Validator(), null), JAVA_8(new Java8Validator(), null), JAVA_9(new Java9Validator(), null), JAVA_10_PREVIEW(null, new Java10PreviewPostProcessor()); final Validator validator; final ParseResult.PostProcessor postProcessor;
 * @param AssetUsageInNodeProperties $assetUsage * @return ContentContext */ protected function getContextForReference(AssetUsageInNodeProperties $assetUsage): ContentContext { $hash = md5(sprintf('%s-%s', $assetUsage->getWorkspaceName(), json_encode($assetUsage->getDimensionValues()))); if (!isset($this->contexts[$hash])) {
 try: is_gcs_summary_enabled = ( inventory_notifier_config.get('gcs_summary').get('enabled')) if inventory_notifier_config.get('email_summary'): is_email_summary_enabled = ( inventory_notifier_config.get('email_summary')
 this.serialized             = serialized; } MaterialColor(int lightColor, int darkColor, String serialized) { this(lightColor, lightColor, darkColor, darkColor, serialized); } public int toConversationColor(@NonNull Context context) {
 """Set up.""" fake_global_configs = {'securitycenter': {'max_calls': 1, 'period': 1.1}} cls.securitycenter_client = securitycenter.SecurityCenterClient(version='v1') cls.project_id = 111111 cls.source_id = 'organizations/111/sources/222'
 public void onViewCreated(final View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); mAllergensFromDao = Utils.getAppDaoSession(getActivity()).getAllergenDao().loadAll(); api = new OpenFoodAPIClient(getActivity()); mView = view;
 var ErrInconsistentState = fmt.Errorf("inconsistent processor state") var ErrInvalidExporterKind = fmt.Errorf("invalid exporter kind") // New returns a basic Processor that is also a Checkpointer using the provided // AggregatorSelector to select Aggregators.  The ExportKindSelector // is consulted to determine the kind(s) of exporter that will consume // data, so that this Processor can prepare to compute Delta or
 package dynamodocstore // To create the tables and indexes needed for these tests, run create_tables.sh in // this directory. import ( "context" "net/url"
 txtvSeek.setText(Converter.getDurationStringLong(position)); } } else if (controller.getDuration()!= controller.getMedia().getDuration()) { updateUi(controller.getMedia(), true); } }
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4440-SEA 1645544078 2052716142</p> <hr> <p>Varnish cache server</p> </body>
 // verify that rack was detected if len(stacks.Rack) == 0 || stacks.Rack[0].StackName!= rackName { return stdcli.Error(fmt.Errorf("can not find Rack named %s\nAre you authenticating with the correct AWS account?\nSee AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and ~/.aws/credentials", rackName)) } fmt.Println("Resources to delete:\n")
 if (rootNode &&!rootNode->isEmpty()) { ol.startParagraph(); ol.disableAllBut(OutputGenerator::Man); ol.writeString(" - "); ol.pushGeneratorState(); ol.disable(OutputGenerator::RTF);
 // wrapUnaryHandler takes a valid JSON handler function and converts it into a // yarpc.UnaryEncodingHandler. func wrapUnaryHandler(name string, handler interface{}) yarpc.UnaryEncodingHandler { return jsonHandler{ handler: reflect.ValueOf(handler), }
 initResult = F(""); // Clear any previous result // check model ID register (value specified in datasheet) uint8_t modelId = readReg(IDENTIFICATION_MODEL_ID); if ((modelId!= 0xEE) && (modelId!= 0xEA)) { // Recognize VL53L0X (0xEE) and VL53L1X (0xEA) initResult  = F("VL53L0X: Init: unr
 this._changeToState(CardanoNodeStates.ERRORED); this._transitionListeners.onError(code, signal); _log.error('CardanoNode: cannot be restarted', JSON.stringify(error)); } };
 d = self.__dict__ for field_name, factory in self._field_factories: if field_name not in kwargs: value = factory() d[field_name] = value d.update(kwargs)
 GettingStarted = "Getting Started 🌱" Develop        = "Develop ✨" Settings       = "Settings ⚙️" Operations     = "Operations 🧐" Release        = "Release 🚀" )
 } func (c *Command) proposals() { info(fmt.Sprintf("Found %v proposals", len(proposals))) for _, proposal := range proposals {
 "github.com/liquidata-inc/dolt/go/libraries/doltcore/doltdb" ) var _ sql.Table = ConflictsTable{} type ConflictsTable struct { tblName string dbName  string
 if (requireAuthenication &&!networkMessage.conn.isAuthenticated) { // message requires authentication, but the connection was no authnticated Debug.LogWarning($"Closing connection: {networkMessage.conn.connectionId}. Received message {typeof(T)} that required authentication, but the user has not authenticated yet"); networkMessage.conn.Disconnect(); return; }
 return 0; } static int validateFile(Plugin *handle, Key *parentKey) { iconv_t conv = iconv_open(getFrom(handle), getFrom(handle)); if(conv == (iconv_t)(-1))
 */ #if!defined(LIBRESSL_VERSION_NUMBER) &&!defined(OPENSSL_IS_BORINGSSL) /* Symbols for AES-SHA1-CBC composite ciphers were added in Openssl 1.0.1: * See https://www.openssl.org/news/openssldirs/1.0.1/cl101.txt. */ #if S2N_OPENSSL_VERSION_AT_LEAST
 cvd_dir = environment.get_value('CVD_DIR') cvd_bin_dir = os.path.join(cvd_dir, 'bin') launch_cvd_path = os.path.join(cvd_bin_dir, 'launch_cvd') cvd_address = get_gce_address() device_memory_mb = environment.get_value('DEVICE_MEMORY_MB', DEFAULT_DEVICE_MEMORY_MB) launch_cvd_command_line = ( '{launch_cvd_path} -daemon -memory_mb {d
 public const string SetEachPrefixRegex = @"(?<each>(每)\s*$)"; public const string SetLastRegex = @"(?<last>last|this|next)"; public const string SetEachDayRegex = @"(每|每一)(天|日)\s*$"; public const string TimeHourNumRegex = @"(00|01|02|03|04|05|
 import os import os.path import sip from PyQt5.QtCore import QUrl, QObject, QPoint, QTimer
 char time_formatted[255]; struct tm tm; struct flb_time tms; msgpack_object *obj; msgpack_unpacked result; msgpack_sbuffer mp_sbuf;
 constants.REPRODUCTION_TIMEOUT_LIMIT)) result = runner.run_single_testcase( input_path, timeout=constants.REPRODUCTION_TIMEOUT_LIMIT + 20,  # processing buffer additional_args=arguments) return engine.ReproduceResult(result.command, result.return_code,
 // convert from local encoding, then unescape escaped forbidden characters void FileSystemAccess::local2name(string *filename, const string *localPath) const { if (!filename ||!localPath) return;  string t = *filename; local2path(&t, filename);
 verbose = 0 standard_include_path = os.path.abspath( os.path.join(os.path.dirname(__file__), os.path.pardir, 'Includes')) class Context(object): #  This class encapsulates the context needed for compiling
 // EnvFile returns the location of the env file against the ws root directory. func (j *ScheduledJob) EnvFile() string { return j.TaskConfig.EnvFile() } // JobDockerfileBuildRequired returns if the job container image should be built from local Dockerfile.
 /** * Sample simple product */ export const silverAmorBangleSet = { name: 'Silver Amor Bangle Set', url: '/silver-amor-bangle-set.html' };
 templatePath(), "Compilation unit doesn't contain a class or interface declaration!")); if (annotator == null) { // If the compilation unit doesn't contain a class or interface declaration, // we don't want to add any other annotations. // We do however want to add the 'no source' annotations. for (String section : sections) { replaceSectionPlaceHolder(cls, section);
 // WorkloadManifest represents a workload manifest. type WorkloadManifest interface { ApplyEnv(envName string) (WorkloadManifest, error) } // WorkloadProps contains properties for creating a new workload manifest.
 *polymorphic_tx.operator->()); }); auto block = std::make_shared<shared_model::proto::Block>( shared_model::proto::TemplateBlockBuilder< 0, shared_model::validation::DefaultBlockValidator, shared_model::proto::Block>().height(proposal.height()).prevHash(last_block.value()->hash()).transactions(proto_txs)
 raise TypeError('`amount` must be an int') if amount < 1: raise AmountError('`amount` must be greater than 0') if amount > MAX_AMOUNT: raise AmountError('`amount` must be <= {}'.format(MAX_AMOUNT)) self.fulfillment = fulfillment self.amount = amount
 @Override public SnapshotTable.Result execute() { JobGroupInfo info = newJobGroupInfo("SNAPSHOT-TABLE", String.format("Snapshotting table %s as %s", sourceTableIdent().toString(), destTableIdent)); return withJobGroupInfo(info, this::doExecute); }
 } if len(newerOnDisk) > 0 { logrus.Fatal(strings.Join(newerOnDisk, ", ") + " newer than datastore and could cause a cluster outage. Remove the files from disk and restart to be recreated from datastore.") } if updateDisk {
 return false } // ApplicationName will return the General.ApplicationName func (cfg Config) ApplicationName() string { if cfg.General.ApplicationName == "" { cfg.General.ApplicationName = "GoAlert"
 } void printNodeInfo(ILogger log, String addToProductName) { log.fine(serializationVersionMessage()); log.info(versionAndAddressMessage(addToProductName)); log.info("Cluster name: " + node.getConfig().getClusterName()); log.info('\n' + JET_LOGO); log.info(COPYRIGHT_LINE);
 } /** * Is password required, * * @param int $lesson_id Lesson ID. *
 // if it is a new resource if secret.SelfLink == "" { secret, err = c.Client.CoreV1().Secrets(namespace).Create(secret) } else { secret, err = c.Client.CoreV1().Secrets(namespace).Update(secret) }
 Client().GetClientUI().GetPlayerListWnd()->Refresh(); context<HumanClientFSM>().process_event(DoneLoading()); }
 // global progatators and tracer providers. return &Handler{ propagators: otel.GetTextMapPropagator(), tracer:      otel.Tracer("examples/passthrough/handler"), next:        next, } }
 IdfObject idfObject(openstudio::IddObjectType::EnergyManagementSystem_Program); m_idfObjects.push_back(idfObject); m_map.insert(std::make_pair(modelObject.handle(), idfObject)); //Name if (s) {
 'consumables'			=> 'Consumables', 'country'  				=> 'Country', 'create'				=> 'Create New', 'created_asset'			=> 'Created Asset', 'created_at' 			=> 'Created at', 'currency'  			=> '$', // this is deprecated
 import net.sourceforge.pmd.cpd.internal.JavaCCTokenizer; import net.sourceforge.pmd.lang.TokenManager; import net.sourceforge.pmd.lang.jsp.ast.JspTokenManager; import java.io.Reader; public class JSPTokenizer extends JavaCCTokenizer { @Override protected TokenManager getLexerForSource(SourceCode sourceCode) { StringBuilder buffer = sourceCode.getCodeBuffer(); Reader reader = new CharSequenceReader(buffer); if (buff
 return $args; } if ( empty( $args['headers']['Authorization'] ) &&! is_array( $args['headers'] ) ) { return $args; }
 using sofa::helper::Factory; using namespace sofa::core::objectmodel; typedef sofa::helper::Factory< std::string, BaseData> PSDEDataFactory; PSDEDataFactory* getFactoryInstance(){
 def list_exfilled_files(self, startdir=None): if not startdir: startdir = self.get_config('exfil_dir') if not os.path.exists(startdir): raise ValueError("No exfil dir configured") exfil_files = dict() exfil_folders = [f.path for f in os.scandir(startdir) if f.is_dir()]
 }) } // By default, generate a safe job name from the PodMonitor. We also keep // this around if a jobLabel is set in case the targets don't actually have a // value for it. A single pod may potentially have multiple metrics
 ); if (!rp->avp) { msg_printf(project, MSG_INTERNAL_ERROR, "No application found for task %s: platform %s version %d plan class %s; discarding", rp->wup->name, rp->platform, rp->version_num, rp->plan_class ); delete rp;
 private String composedTaskRunnerName = "composed-task-runner"; @NotBlank private String schedulerTaskLauncherName = "scheduler-task-launcher"; public String getComposedTaskRunnerName() { return composedTaskRunnerName;
 config[:bioc_required] = true config[:bioc_use_devel] = true config[:r] ='release' normalized_r_version when 'bioc-release' config[:bioc_required] = true config[:bioc_use_devel] = false config[:r] ='release' normalized_r_version else v = v.split('-') config[:r] = v[0] if v.length > 1 config[
 */ public class CmmnParserImpl implements CmmnParser { private final Logger logger = LoggerFactory.getLogger(CmmnParserImpl.class); protected CmmnParseHandlers cmmnParseHandlers; protected CmmnActivityBehaviorFactory activityBehaviorFactory;
 // CloseToAmount is amount of the remaining funds that were transferred to the close to address (if closing). // // required: false AssetClosingAmount uint64 `json:"asset-closing-amount"` } // AssetFreezeTransactionType contains the additional fields for an asset freeze transaction
 } /** * @return itemType[] */ public function getAllowedExtensions() {
 auth            BlockAuthenticator parallelBlocks  uint64 deadlineTimeout time.Duration // syncInterruptedWaitingCatchpointWriting defines whether we've ran into a state where the ledger is currently busy writing the // catchpoint file. If so, we want to pospone all the catchup process until the catchpoint file writing is complete, // and resume from there without stopping the catchup timer. syncInterruptedWaitingCatchpointWriting bool // The channel gets closed w
 enableLegacyOAuthProvidersIfNotInSettings ]; function migrateToLatest() { var applied = Migrations.findOne({_id: "migrations_applied"}); var start; if (!applied) {
 try: resp.content  # Consume socket so it can be released except RuntimeError: pass  # It seems to have already been consumed. if i >= self.max_redirects: raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)
 package util import ( "context" "net/http" "github.com/gin-gonic/gin"
 var routeTable = self.get(resourceGroupName, routeTableName, _); self.interaction.formatOutput(routeTable, function (routeTable) { if (!routeTable) { self.output.warn(util.format($('A route table with name "%s" not found'), routeTableName)); } else { var resourceInfo = resourceUtils.getResourceInformation(routeTable.id);
 } else { const AWS = require('aws-sdk'); // Test a PUT to s3 because configuring this requires using the aws web interface // If the permissions are not set up correctly, then we want to know that asap // https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html s3bucket = new AWS.S3({params: {Bucket: 'pageshot-images-bucket'}}); get = (uid, 
 async def _add_fact_relationships(self, criteria=None): relationships = await self.dao.get('core_relationships', criteria) for r in relationships: if r.get('target'): r['target'] = (await self.dao.get('core_fact', dict(id=r.get('target'))))[0]['value'] return relationships No newline at end of file
 const { walletMigration } = stores; const { walletMigrationStep } = walletMigration; const { nextStep, resetMigration } = actions.walletMigration; const step = IMPORT_WALLET_STEPS[walletMigrationStep]; const CurrentContainer = this.containers[step]; return ( <CurrentContainer
 # SPDX-License-Identifier: Apache-2.0 # Purpose: # sns-ruby-example-send-message.rb demonstrates how to send a message using the Amazon Simple Notification Service (SNS) topic using # the AWS SDK for Ruby. # Inputs:
 keyUsages |= x509.KeyUsageCertSign } return &x509.Certificate{ Version:               3, BasicConstraintsValid: true,
 void USM_memcpy(void* dst, const void* src, size_t n) { Experimental::SYCL().fence(); auto event = USM_memcpy(*Experimental::Impl::SYCLInternal::singleton().m_queue, dst, src, n); Experimental::Impl::SYCLInternal::fence(event); } }  // namespace
 @classmethod def from_string(cls, treetext): """Instantiate the Newick Tree class from the given string.""" handle = StringIO(treetext) return cls(handle)
 return nil, err } span := make([]byte, 8) binary.LittleEndian.PutUint64(span, uint64(len(content))) err = hasher.SetSpanBytes(span) if err!= nil { return nil, err
 For user_pwd, a default username as string. title: The question title to show. text: The prompt text to display to the user. url: The prompt text available to prompt-yank command. answer: The value the user entered (as password for user_pwd). is_aborted: Whether the question was aborted. interrupted: Whether the question was interrupted by another one.
 from plenum.common.util import get_utc_epoch from plenum.test.helper import sdk_send_and_check, sdk_sign_request_from_dict from indy_common.constants import REVOC_REG_DEF_ID, VALUE, FROM, TO, ISSUED, \ REVOKED, PREV_ACCUM, ACCUM, STATE_PROOF from plenum.common.constants import TXN_TIME, DATA from plenum.common.types import f from plenum.common.util import randomString
 if (ResourcePermissions.Count == 0) { yield return new ValidationResult(Core.Resources.ResourcePermissionEmpty); } else {
 import os.path as osp import random import mmcv import numpy as np from torch.utils.data import Dataset from mmdet.core import eval_map, eval_recalls
 # Copyright 2020 The TensorFlow Authors. All Rights Reserved. # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License. # # You may obtain a copy of the License at # #     http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is di
 rule_bigquery_acl.dataset_id: bigquery_acl.dataset_id, rule_bigquery_acl.role: bigquery_acl.role, } return all_matched(rule_regex_to_val) # TODO: The naming is confusing and needs to be fixed in all scanners. def find_policy_violations(self, bigquery_acl):
 spotipy_call = getattr(spotipy_client, endpoint) recently_played = spotipy_call(**kwargs) break except (AttributeError, TypeError) as err: current_app.logger.critical("Invalid spotipy endpoint or arguments: %s", err, exc_info=True) return None except SpotifyException as e: retries -= 1
 ) const ( serviceName = "SwarmBeeSvc" ) func (c *command) initStartCmd() (err error) {
 log.Lvl3(r.address, "Handling new connection to ", remote.Address) for { packet, err := c.Receive() if err!= nil { log.Lvl3(r.address, "Failed to receive packet: ", err.Error()) return } packet.From = address packet.ServerIdentity = remote // whether the router is closed if r.Closed() {
 private void showSnackBarWithRetry() { progressBar.setVisibility(View.GONE); setAchievements(); ViewUtil.showDismissibleSnackBar(findViewById(android.R.id.content), R.string.achievements_fetch_failed, R.string.retry, view -> setAchievements()); } /**
 "github.com/aws/copilot-cli/internal/pkg/deploy/cloudformation/stack" "github.com/aws/copilot-cli/internal/pkg/describe" "github.com/aws/copilot-cli/internal/pkg/exec" "github.com/aws/copilot-cli/internal/pkg/exec/containers" "github.com/aws/copilot-cli/internal/pkg/initialize" "github.com/aws/copilot-cli/internal/pkg/logging" "github.com/aws/copilot-cli/internal/pkg/repository"
 arena->DialogBattleSummary( result, artifactsToTransfer, false ); } if ( hero_wins!= nullptr && hero_loss!= nullptr && loserAbandoned ) { transferArtifacts( hero_wins->GetBagArtifacts(), hero_loss->GetBagArtifacts(), artifactsToTransfer, true ); } // save count troop
 leaf_value_[0] = 0.0f; leaf_weight_[0] = 0.0f; leaf_parent_[0] = -1; internal_parent_[0] = -1; shrinkage_ = 1.0; num_cat_ = 0; cat_boundaries_.push_back(0);
 use Shopsys\FrameworkBundle\Model\Cart\CartFacade; use Shopsys\FrameworkBundle\Model\Cart\CartFactory; use Shopsys\FrameworkBundle\Model\Cart\CartRepository; use Shopsys\FrameworkBundle\Model\Cart\Item\CartItemFactory; use Shopsys\FrameworkBundle\Model\Cart\Watcher\CartWatcherFacade; use Shopsys\FrameworkBundle\Model\Customer\CurrentCustomer;
 }; /** * @given initialized storage with 4 peers, second block with add peer * command, third block signed by new peer, blocks are signed by supermajority * of ledger peers * @when chain with second and third blocks is validated, returned result * is a list of blocks, which are validated by supermajority of ledger peers * @then first block is the second block, second block is the third block */ TEST_F(ChainValid
 break; case CR_ACIDDEMONSTRATION: #ifdef RENEWAL {// [violetharmony] [Jheva] int64 matk=0, atk; short tdef = status->get_total_def(target); short tmdef =  status->get_total_mdef(target);
 DisableLabelCreation   bool   `public:"true" info:"Disables the ability to create new labels for services."` MessageBundles         bool   `public:"true" info:"Enables bundling status updates and alert notifications. Also allows 'ack/close all' responses to bundled alerts."` ShortURL               string `public:"true" info:"If set, messages will contain a shorter URL using this as a prefix (e.g.
 if!enabled { return } // For a large number of clients (10'000), the connection phase // can take some time. This is a linear backoff to enable connection // even when there are a lot of requests. for wait := 500; wait < 1000; wait += 100 { if err := encoder.Encode(v); err == nil { return
 std::string last_name; int save_version = CURRENT_FORMAT_VERSION; std::vector<int> reserved_vols( LOOPXX_COUNT, 0 ); std::map<std::string, StreamBuf> mapPlayers; namespace ObjectFadeAnimation {
 go network.SetupAndEnsureIPTables(network.ForwardRules(config.Network.String()), 50) if flannelIPv6Masq && config.IPv6Network.String()!= emptyIPv6Network { logrus.Debug("Creating iptable rules for ipv6 node masquerading in flannel") go network.SetupAndEnsureIP6Tables(network.MasqIP6Rules(config.IPv6Network, bn.Lease()), 60) go network.Se
 issue = errors.New("cycle detected") return false } newVisited := visited for k, v := range visited { newVisited[k] = v
 use Aws\Exception\AwsException; /** * Creating an Amazon Kinesis Firehose client. * * This code expects that you have AWS credentials set up per: * https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/guide_credentials.html
 const util = require('./util'); const {keys, propTypes, objectTypes} = constants; const listenersKey = Symbol(); const resultsKey = Symbol(); // TODO: DATA
 fd, host, port); /* * Prepare a timeout using select(2). */ FD_ZERO(&wait_set);
 "bytes" "encoding/json" "fmt" "sort" "testing"
 im_ids_16) def _test_tf_dataset(device, sess): skip_for_incompatible_tf()
 namespace config { namespace detail { std::string appendSlashIfNeeded(const std::string& path) { if (path.empty()) { return std::string("/"); }
 team, err = ds.TeamByName(context.Background(), tt.name) require.Error(t, err) })  for _, tt := range testCases { t.Run(tt.name, func(t *testing.T) { _, err = ds.TeamByName(context.Background(), tt.name) require.Error(t, err) }) } }
 func HandleCheckAndExit(failed bool) { if failed { fmt.Printf("\nThis PR has non-whitelisted committers or authors.\n") fmt.Printf("Please use./utils/checkcommitters/fix_committers.sh to make\n") fmt.Printf("all commits from a whitelisted committer and author.\n") os.Exit(1) }
 } static async defaultFilename(noteIds, fileExtension) { // Use of == here is because noteIds is potentiall undefined if (!noteIds) { return ''; }
 <td>{rewardWallet}</td> <td className={styles.rewardAmount}> {isRestoring? '-' : rewardAmount} </td> <td className={styles.rewardsAddress}> {isRestoring? ( <div className={styles.syncingProgress}> <PopOver content={intl.formatMessage(
 Hex("vote_id", vote.BlockID[:]). Hex("voter_id", vote.SignerID[:]). Hex("proposer_id", proposal.Block.ProposerID[:]). Msg("vote for invalid proposal detected") } func (lc *LogConsumer) logBasicBlockData(loggerEvent *zerolog.Event, block *model.Block) *zerolog.Event {
 * Account stores all of the settings for a single account defined by the user. It is able to save * and delete itself given a Preferences to work with. Each account is defined by a UUID. */ public class Account implements BaseAccount, StoreConfig { /** * Default value for the inbox folder (never changes for POP3 and IMAP)
 * * @param string $smileyPath */ private function _importSmileys($smileyPath) { global $modSettings;
 "github.com/mholt/caddy/middleware" "net/http" "net/url" "os" "path/filepath" "runtime" "strconv" "strings"
 group: 'AposInputGroup', array: 'AposInputArray', object: 'AposInputObject', relationship: 'AposInputRelationship', relationshipReverse: 'AposInputRelationshipReverse', attachment: 'AposInputAttachment', video: 'AposInputVideo' }
 $user_question_grade = 0; $graded_count++; } else { $user_right = $user_question_grade > 0; // The user's grade will be 0 if they answered incorrectly. // Don't set a grade for questions that are part of an auto-graded quiz, but that must be manually graded. $user_wrong =
 type Props = { disabled?: boolean, onDelegate: Function, }; export default class DelegateWalletButton extends Component<Props> {
 package repo import ( "fmt" "github.com/spf13/cobra" "github.com/spf13/pflag"
 } /** * Wither of the 1st element of this tuple. * * @return a copy of this tuple with a new value for the 1st element of this Tuple. */ public Tuple3<T1, T2, T3> with1(T1 t1) { return new Tuple3<>(t1, _2, _3); } /**
 func initializeRpmDatabase(installRoot string, diffDiskBuild bool) (err error) { if!diffDiskBuild { var ( stdout string stderr string ) stdout, stderr, err = shell.Execute("rpm", "--root", installRoot, "--initdb") if err!= nil { logger.Log.Warnf("Failed to create rpm database: %v", err)
 onGetFreshLogs={(logs) => { getFreshLogs.trigger({ logs }); }} onDeleteCompressedLogs={() => { deleteCompressedLogs.trigger(); }} onGetLogs={(logs) => { getLogs.trigger({ logs }); }} /> ); }
 DBA = dual_barabasi_albert_graph(100, m1, m2, p, seed, initial=initial) BA1 = barabasi_albert_graph(100, m1, seed, initial=initial.copy()) BA2 = barabasi_albert_graph(100, m1, seed, initial=initial.copy()) assert ( min(BA1.size(), BA2.size()) <= DBA.si
 try: inventory_dict = inventory_req['responses'][ 'GET_INVENTORY']['inventory_delta']['inventory_items'] except: return 0 item_count = 0
 /// </summary> internal partial class IndentedStringBuilder { private const int IndentationSize = 4; private bool _indentPending; private int _indentLevel;
 'id'      => 'id' ], JsonResponse::HTTP_OK, [ 'Expires' => 'Mon, 26 Jul 1997 05:00:00 GMT', 'Last-Modified' => gmdate('D, d M Y H:i:s').'GMT', 'Cache-Control' => 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Pragma' => 
 @When("I type `$text` in field located `$locator` and keep keyboard opened") public void typeTextInFieldAndKeepKeyboard(String text, Locator locator) { baseValidations.assertElementExists("The element to type text", locator).ifPresent(e -> keyboardActions.typeText(e, text)); } /**
 Args: s: The string to evaluate. file: Interpret s as a path to file, also implies --quiet. quiet: Don't show the output in a new tab. """ if file:
 //@HEADER */ #include <Kokkos_Macros.hpp> #include <cstdint> #include <iostream> #include <iomanip>
 import ( "context" "testing" "time" "github.com/google/go-cmp/cmp" "errors" "go.etcd.io/etcd/clientv3" "go.etcd.io/etcd/embed" "go.etcd.io/etcd/etcdserver/api/v3rpc/rpctypes"
 }, }, a: &admissionv1.AdmissionRequest{ Kind: metav1.GroupVersionKind{Group: "cert-manager.io", Version: "v1beta1", Kind:    "Certificate"}, },
 decl = attr_type.cpp_optional_declaration_code(attr.cname) else: decl = attr_type.declaration_code(attr.cname) if attr.utility_code_definition: type.scope.use_entry_utility_code(attr.utility_code_definition) code.putln("%s;" % decl) code.putln(footer) if type.objtypedef_cname is not None:
 if err!= nil { return controller, exp, err } controller.Start() global.SetMeterProvider(controller.MetricsProvider) return controller, exp, err }
 } private AuthenticationException onError(JwtException e) { if (e instanceof BadJwtException) { return new InvalidBearerTokenException(e.getMessage(), e); } else {
 'SELECT location FROM user_credentials UNION''SELECT location FROM amm_swaps', ) locations_raw = cursor.fetchall() locations = {Location.deserialize_from_db(loc[0]) for loc in locations_raw} cursor.execute('SELECT DISTINCT type FROM amm_events') for event_type in cursor: if EventType.deserialize_from_db(event_type[0]) in (EventType.MINT_SUSHISWAP, EventType.BURN_SUSHISW
 <table class="outer" align="center" style="background-color: #ffffff; border: 1px solid black; border-spacing: 0; color: #333333; font-family: sans-serif; max-width: 600px; width: 100%;"> <tr> <td class="full-width-image center" style="padding: 0; text-align: center;"> <p class="main-heading" st
 public void setHint(@NonNull String hint, @Nullable CharSequence subHint) { this.hint = hint; this.subHint = subHint; if (this.subHint!= null) { super.setHint(new SpannableStringBuilder().append(ellipsizeToWidth(this.hint))
 class AddNameAndNameKanaToUsers < ActiveRecord::Migration[6.0] def change change_table : users, bulk: true do |t| t. string : name, null: false, default: "" t. string : name_kana, null: false, default: "" end end end
 self.get_organization() self.check_billing_enabled() self.has_permissions() self.check_network_host_project_id() self.enable_apis()
 } static uint8_t *do_encode_header(h2o_hpack_header_table_t *header_table, uint8_t *dst, const h2o_iovec_t *name, const h2o_iovec_t *value, h2o_header_flags_t flags) { /* try to send as indexed */ { size_t header_table_index = header_table->entry_start_index, n;
 _, err = tx.StmtContext(ctx, db.lock).ExecContext(ctx) if err!= nil { return uuid.UUID{}, fmt.Errorf("acquire lock: %w", err) } // try again after exclusive lock
 } // FIXME: Make sure that the content provider is up // This is the wrong place for it, but bleh - better than not having it turned on by default for people who don't go throughl ogin ContentResolver.setSyncAutomatically(app.getCurrentAccount(), ModificationsContentProvider.AUTHORITY, true); // Enable sync by default! EventLog.schema(CommonsApplication.EVENT_CATEGORIZATION_ATTEMPT, CommonsApplication.getInstance()).param("username",
 curStatus, nextStatus := statuses[len(statuses)-2], statuses[len(statuses)-1] switch { case nextStatus.value.InProgress(): // Reset and start only if the status moved to in progress from a static state. // It's possible that CloudFormation sends multiple "CREATE_IN_PROGRESS" events back to back, we don't want to reset the timer then. // We're using the second to last status to check if the status is s
 /// </summary> public class SearchParameterExpression : SearchParameterExpressionBase { public SearchParameterExpression(SearchParameterInfo searchParameter, Expression expression) : base(searchParameter) { EnsureArg.IsNotNull(expression, nameof(expression)); Expression = expression; } public Expression Expression { get; }
 } proposal := service_discovery.NewServiceProposal( dto_discovery.Identity(options.NodeKey), nats.NewContact(options.NodeKey), ) proposal.ConnectionConfig = vpnClientConfigString
.collect(Collectors.toList()); assertThat(result.size()).isEqualTo(1); assertThat(result.get(0).getValue()).contains(BytesValue.of(1)); assertThat(result.get(0).getPath()).isEqualTo(BytesValue.fromHexString("0x100000")); } @Test
 end end describe 'auth_oidc', unless: (os[:family] == 'ubuntu' && os[:release].to_f == 14.04) do pp = <<-MANIFEST class { 'apache': } apache::vhost { 'test.server':
 "go.uber.org/yarpc/transport" ) // rawUnaryHandler adapts a Handler into a transport.UnaryHandler type rawUnaryHandler struct { UnaryHandler } func (r rawUnaryHandler) Handle(ctx context.Context, treq *transport.Request, rw transport.ResponseWriter) error {
 >>> print(list(nx.bfs_tree(G,1).edges())) [(1, 0), (1, 2)] >>> H = nx.Graph() >>> nx.add_path(H, [0, 1, 2, 3, 4, 5, 6]) >>> nx.add_path(H, [2, 7, 8, 9, 10]) >>> dict(nx.bfs_tree(H, source
 'excerpt' => $this->contentExtension->getExcerpt($content), 'link' => $this->contentExtension->getLink($content), 'editLink' => $this->contentExtension->getEditLink($content), 'icon' => $content->getIcon(), ]; } }
 } @Test public void testExecuteImmediateIssue3106() { plsql.parse("CREATE OR REPLACE PROCEDURE bar\nIS\n  v_link varchar2(10) := 'xxx';\nBEGIN\n  EXECUTE IMMEDIATE 'drop database link'|| v_link;\nEND bar;"); } }
 ->withArgument( $this->getContainer()->get( 'advanced_cache' ) ) ->withArgument( $this->getContainer()->get( 'wp_cache' ) ); $this->getContainer()->add( 'expired_cache_purge', 'WP_Rocket\Engine\Cache\PurgeExpired\PurgeExpiredCache' ) ->withArgument( rocket_get_constant( 'WP_ROCKET_CACHE_PATH' ) ); $this->getContainer()->
 data = client.fetch_organization(resource_key) return FACTORIES['organization'].create_new(data, root=True) except api_errors.ApiExecutionError as e: logging.warning('Failed to fetch organization %s: %s', resource_key, e) data = {'name': resource_key} resource = FACTORIES['organization'].create_new(data, root=True) resource.add_warning(e)
 resourceManagerEndpointUrl: propDescriptor('resourceManagerEndpointUrl', 'AZURE_RESOURCEMANAGERENDPOINT_URL'), sqlManagementEndpointUrl: propDescriptor('sqlManagementEndpointUrl', 'AZURE_SQL_MANAGEMENTENDPOINT_URL'), hostNameSuffix: propDescriptor('hostNameSuffix', 'AZURE_HOSTNAME_SUFFIX'), sqlServerHostNameSuffix: propDescriptor('sqlServerHostNameSuffix', 'AZURE_SQL_SERVER_HOSTNAME_SUFFIX'), activeDirectoryEndpointUrl:
 export function getMultiServer() { return getConfig().then(config => { // Enable multi-server support in development environments return process?.env?.NODE_ENV === 'development' // eslint-disable-line no-undef ||!!config.multiserver; }).catch(error => { console.log('cannot get web config:', error); return false;
 { GVariantDict dict; g_variant_dict_init (&dict, NULL); /* let's take care of install_pkgs first since it can fail */ if (install_pkgs) { g_autoptr(GPtrArray) repo_pkgs = NULL; /* NB: after this, it's a guaranteed TRUE, so we * just pass the out_ var directly here */ if (!rpmostree_sort_pkgs_strv (install
 View\Helper\PipelineInjectorFactory::class, View\Helper\TemplatePath::class => View\Helper\TemplatePathFactory::class, ], 'aliases' => [ 'themeResources' => View\Helper\ThemeResources::class, 'imageLink' => View\Helper\ImageLink::class, 'theme' => View\Helper\Theme::class, \Laminas\View\Helper\HeadLink::class => View\Helper\HeadLink::class, \Lamin
 DEV_TIMED_ABOVE("Stop worker", 100) while (m_state!= WorkerState::Stopped) { m_state_notifier.wait_for(l, chrono::microseconds(5)); } } }
 */ public function markAllAsResolved() { return $this->createQueryBuilder('e') ->set('e.isResolved', ':isResolvedTrue') ->where('e.isResolved = :isResolvedFalse') ->setParameter('isResolvedTrue', true) ->setParameter('isResolvedFalse', false) ->getQuery() ->getSingleScalarResult(); }
 auto ctx = ihipGetTlsDefaultCtx(); hipError_t ret = hipSuccess; if (ctx == nullptr) { ret = hipErrorInvalidDevice;
 <section class="content-header"> <% content_for :title, "Edit - Organization - {#@organization.name}" %> <h1> Editing <small><%= @organization.name %></small>
 return true } func TestConsumedBalances(t *testing.T) { balancesFunc := func() (ret map[string]int64, err error) { ret = make(map[string]int64)
 listMode := false flag.Parse() flag.Visit(func(f *flag.Flag) { if f.Name == "test.list" { listMode = true } })
 >>> G = nx.DiGraph(nx.path_graph(4)) >>> sr = nx.simrank_matrix(G) >>> sr array([[ 1.       , 0.       , 0.8181254, 0.       ], [ 0.       , 1.       , 0.       , 0.8181254], [ 0.8181254, 0.       , 1.     
 It("should have expected chains", expectWlChainsFor("cali12345-ab_policy1")) Context("with another endpoint with the same interface name and earlier workload ID", func() { // We don't check the actual chain contents because they're different in // the different test cases. It("should have expected chains", func() { expectWlChainsFor("cali12345-ab_policy1") })  JustBeforeE
 import ( "fmt" "github.com/algorand/go-algorand/crypto" "github.com/algorand/go-algorand/data/basics" "github.com/algorand/go-algorand/data/transactions" )
 // Secret specifies the secret key which HMAC tokens are created with. Secret string `yaml:"secret"` } `yaml:"http"` }
 request = new MegaRequestPrivate(MegaRequest::TYPE_FETCH_NODES); } if (e == API_OK) { // check if we fetched a folder link and the key is invalid
 AccountAssetResponse::AccountAssetResponse( QueryResponseType &&queryResponse) : CopyableProto(std::forward<QueryResponseType>(queryResponse)), accountAssetResponse_{proto_->account_assets_response()}, accountAssets_{ accountAssetResponse_.account_assets().begin(), accountAssetResponse_.account_assets().end()} {} template AccountAssetResponse::AccountAssetResponse( AccountAssetResponse::TransportType &);
.commit(); } private void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
 if self.is_cpp_class_scope and function and function.scope is self: # for C++ classes we can have both member and non-member operators # and we really want to consider both outer_scope = self.outer_scope() global_func = outer_scope.lookup_here("operator%s" % operator) if global_func: nonmember_alternatives = global_func.all_alternatives()
 newIfaceNameToHostEpID[ifaceName] = bestHostEpId newHostEpIDToIfaceNames[bestHostEpId] = append( newHostEpIDToIfaceNames[bestHostEpId], ifaceName) m.epIDsToUpdateStatus.Add(bestHostEpId) } oldID, wasKnown := m.activeIfaceNameToHostEpID[ifaceName] newID, isKnown := m.
 && uh!= me &&!fetchingnodes) { // Invalidate attrs to ensure that are re-fetched for users // with group chats previous to establish contact relationship // TODO: we should not flag these attrs for invalidation, since they do not exist yet u->invalidateattr(ATTR_FIRSTNAME); u->invalidateattr(ATTR_LASTNAME);  // new user --> fetch keys fetchContactKeys(u); }
 shellutil.run_command(["eject", dvd]) except shellutil.CommandError as cmd_err: if chk_err: raise OSUtilError("Failed to eject dvd: ret={0}, stderr={1}".format(cmd_err.returncode, cmd_err.stderr)) def try_load_atapiix_mod(self): try:
 #else // When USE_APPIMAGE_UPDATER_BRIDGE is defined // USE_APPIMAGE_UPDATER_BRIDGE implies that we are on a linux machine // so we are going to assume that. if (PlatformDetails::IsWindows()) { TraceLoggingWrite(g_hApp, U("AppImageUpdater"), TraceLoggingLevelVerbose, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr); } m_UpdaterDialog = nullptr; m_R
 import com.hazelcast.internal.metrics.ProbeLevel; import com.hazelcast.internal.metrics.ProbeUnit; import com.hazelcast.jet.core.metrics.Metric; import com.hazelcast.jet.core.metrics.MetricTag; import com.hazelcast.jet.core.metrics.Unit; import javax.annotation.Nonnull;
 # [Super Admin] This is for administrating organizations at a global level. We can create, view, modify, etc. class Admin::OrganizationsController < AdminController before_action :find_organization, only: [:edit]  def edit @current_organization = Organization.find(params[:id]) end
 elif n == 1: ret_new[f'{q}_alt'] = items[n] else: ret_new[f'{q}_alt_{n}'] = items[n]  # type: ignore else: ret_new[f'{q}_alt'] = items[n] return ret_new def open(self):
 def _init_write_request_validator(self): constraint_serializer = ConstraintsSerializer(domain_state_serializer) self.add_auth_rules_to_config_state(state=config_state, auth_map=auth_map, serializer=constraint_serializer) self.write_req_validator = WriteRequestValidator(config=self.config, auth_map=auth_map, cache=self.getIdrCache(),
 label : [None | string] Label for legend margins : Sequence of 2 numbers or None (default=None) The sequence contains horizontal and vertical axis margins. Adjust to avoid image being clipped. Returns -------
 "a map of ports and options that the application is listening on", docs.Summary( "used to define and configure multiple ports that the application is", "listening on. The keys of the map are the port numbers, and the values", "are a map of options for that port. Can also define a 'name', 'host_port',", "and 'host_ip'.", ), )
 } var seed [32]byte src := make([]byte, 32) sha3pool.Sum256(seed[:], src) b := &legacy.Block{ BlockHeader: legacy.BlockHeader{
 :param bucket_name: The name of the bucket that receives the posted object. :param object_key: The object key to identify the uploaded object. :param expires_in: The number of seconds that the presigned POST is valid for. :return: A dictionary that contains the URL and form fields that contain required access data. """
 this.keyMetadata = toCopy.keyMetadata() == null? null : ByteBuffers.copy(toCopy.keyMetadata()); this.splitOffsets = toCopy.splitOffsets() == null? null : copyList(toCopy.splitOffsets()); this.sortOrderId = toCopy.sortOrderId() == null? SortOrder.unsorted().orderId() : toCopy.sortOrderId(); this.lastModifiedTimeMs = toCopy.lastModifiedTimeMs() == null? null : toCopy.lastMo
 } if (flags & DC_EXEC) { /* _viewport_sign_kdtree does not need to be updated, only in-use depots can be renamed */ if (reset) { d->name.clear(); MakeDefaultName(d);
 String brokerAddr = findBrokerResult.getBrokerAddr(); if (PullSysFlag.hasClassFilterFlag(sysFlagInner)) { brokerAddr = computePullFromFilterServer(mq.getTopic(), brokerAddr); } PullResult pullResult = this.mQClientFactory.getMQClientAPIImpl().pullMessage(
 @Override public Set<StoredTabletFile> getCandidates(Set<StoredTabletFile> currFiles, CompactionKind kind) { return Collections.unmodifiableSet(Sets.difference(currFiles, allCompactingFiles)); } }
 // Verify one element records := processorTest.NewOutput(attribute.DefaultEncoder()) require.NoError(t, reader.ForEach(ekindSel, records.AddRecord)) require.EqualValues(t, map[string]float64{ "observe.sum/A=B/": float64(3 * 10 * multiplier), }, records.Map())
 Timber.d("Contributions tab selected"); tabLayout.getTabAt(CONTRIBUTIONS_TAB_POSITION).select(); isContributionsFragmentVisible = true; hideKeyboard(); updateMenuItem(); break; case NEARBY_TAB_POSITION:
 "Text color for the keyhint widget."), ('keyhint.fg.suffix', SettingValue(typ.QssColor(), '#FFFF00'), "Color for keys to complete the current keychain"), ('keyhint.bg',
.description($('Commands to manage your Storage account keys')); var connectionString = storageAccount.category('connection-string').description($('Commands to show your Storage connection string')); var serviceType = { blob: 0, queue: 1, table: 2, file: 3 };
 @Override public String toString() { return getDestinationName(); } String getDestinationName() {
 full = self.adaptor.get_subseq_as_string( self.primary_id, self.start + start, self.start + end ) return full[:: step] def __bytes__(self): """Return the full sequence as bytes."""
 else if (m->s->from->nonextcp && m->s->to->noprevcp && Within4RoundingErrors(m->s->from->me.x,m->s->to->me.x) && Within4RoundingErrors(m->s->from->me.y,m->s->to->me.y)) SOError( "The curve is too short.\n"); else if (Within4RoundingErrors(
 return keps, err } func (c *Client) findKEPPullRequests(sig string) (*keps.Proposal, error) { gh := github.NewClient(nil) pulls, _, err := gh.PullRequests.List(context.Background(), "kubernetes", "enhancements", &github.PullRequestListOptions{}) if err!= nil {
 prev_block_id = g.id for block in range(4): transactions = [ Transaction.create( [b.me], [user_vk], ).sign([b.me_private]) for i in range(10) ] block = b.create_block(transactions)
 apiServiceConfigPath:  "google/cloud/bigquery/reservation/v1/bigqueryreservation_v1.yaml", releaseLevel:          "ga", }, { inputDirectoryPath:    "google/cloud/bigquery/storage/v1beta1", pkg:                   "storage",
 pScene->mNumMaterials = sib.mtls.size(); pScene->mNumMeshes = sib.meshes.size(); pScene->mNumLights = sib.lights.size(); pScene->mMaterials = pScene->mNumMaterials? new aiMaterial*[pScene->mNumMaterials] : NULL; pScene->mMeshes = pScene->mNumMeshes? new aiMesh*[pSc
 # Detecing KVM is tricky, so let's use an environment variable, set from the # docker image, to determine whether to turn it on or not. if environment.get_value('FUCHSIA_USE_KVM'): qemu_args.append('-enable-kvm') # Get the list of fuzzers for ClusterFuzz to choose from.
 self._out_feats = out_feats self._k = k with self.name_scope(): self.fc = nn.Sequential() for _ in range(k): self.fc.add(
 if (!nodebyhandle(config.getRemoteNode())) { // remote node gone syncConfigs->remove(config.getLocalPath()); continue; } else { syncConfigs->setSynced(config.getLocalPath(), false); } const auto e = addsync(config, DEBRISFOLDER, nullptr);
 def get_issue_url(testcase): """Return issue url for a testcase.  This method is used to get the issue url for a testcase.  It checks if the issue tracker is configured for the project.  If it is not configured then it returns None. """ issue_tracker = get_issue_tracker_for_testcase(testcase) if not issue_tracker: return None
 }) } // NewRecordReplayClient creates a new http.Client for tests. This client's // activity is being either recorded to files (when *Record is set) or replayed // from files. rf is a modifier function that will be invoked with the address // of the httpreplay.Recorder object used to obtain the client; this function // can mutate the recorder to add provider-specific header filters, for example. func NewRecordReplayCli
 } expect(transformError.toString()).toContain(expected.error.message); expect(transformError.location).toMatchSnapshot(); } else if (expected.output.code!== undefined) { const output = testTransform(actual); if (expected.output.code!== undefined) {
 Run scanner: $ forseti_scanner \\ --rules <rules path> \\ --config <config path> \\ --engine_name <rule engine name> \\ --output_path <output path (optional)> \\ """
 "grpc",      // github.com/pieterlouw/caddy-grpc "gopkg",     // github.com/zikes/gopkg "restic",    // github.com/restic/caddy "nobots",    // github.com/Xumeiquer/nobots "proxy",     // github.com/mholt/caddy "templates", // github.com/caddyshack/caddy "browse",    // github.com/
 $find = str_replace(array('\\', "'"), array('\\\\', "\'"), htmlspecialchars_uni($smilie['find'])); $smilie['onclick'] = " onclick=\"MyBBEditor.insertText(' $find ');\""; ++$i; $smilies[] = $smilie; }
 "jarcat":      config.Java.JarCatTool, "javacworker": config.Java.JavacWorker, "junitrunner": config.Java.JUnitRunner, "lps":         path.Join(config.Please.Location, "build_langserver"), "lps":         path.Join(config.Please.Location, "langserver"), "maven":       config.Java.PleaseMavenTool, "pex":         config.Python.PexTool,
 * @param b the second key * @return -1 if the first key is smaller, 1 if bigger, 0 if equal */ @SuppressWarnings("unchecked") final int compare(Object a, Object b) { return keyType.compare((K)a, (K)b); }
 */ Map<String, E> mappings(); }
 @Nonnull List<Transform> upstream(); void determineLocalParallelism(Context context); void addToDag(Planner p);
 return errTopicSubscriptionNotAllowed } func validateTime(t time.Duration, min, max float64) error { if t.Seconds() < min || t.Seconds() > max { return fmt.Errorf("must be between %0.0f and %0.0f seconds", min, max) } return nil
 # # Skeleton file for the Python "Bob" exercise, to get you coding more quickly. # def hey(arg) return
 using namespace vast; using namespace std::string_literals; TEST(functionality) { std::string str = "1";
 namespace Microsoft.Health.Fhir.Api.Features.Bundle { /// <summary> /// A JwtBearerHandler that can handle bundle requests. /// </summary> public class BundleAwareJwtBearerHandler : JwtBearerHandler { private readonly IBundleHttpContextAccessor _bundleHttpContextAccessor;
 // Note: no longer calling `validateDomainName` because if users use git-remote-codecommit // (the HTTPS (GRC) protocol) to connect to CodeCommit, the url does not have any periods. if!strings.Contains(url, githubURL) &&!strings.Contains(url, ccIdentifier) &&!strings.Contains(url, bbURL) { return fmt.Errorf("must be a URL to a supported provider (%s)", strings.Join(ma
 status = map_objects.get('status', None) cells = map_objects['map_cells'] # insert detail info about gym to fort for cell in cells: cell['gym'] = {'name': map_objects['gym_name'],'status': status}  # insert detail info about gym to fort for cell in cells: if 'forts' in cell: for fort in cell['forts']:
 } if!claims.Expiry.Time().IsZero() { // This is an indication that this may be a projected service account token p.log.Warn("The service account token has an expiration time, which is an indication that may be a projected service account token. If your cluster supports Service Account Token Volume Projection you should instead consider using the \"k8s_psat\" attestor. Please look at https://github.com/spiffe/spire/blob/main/do
 v_k_0 = 0 for n in G: weighted_cost += d[n] * (arborescence.degree(n) - 2) if weighted_cost < min_k_d_weight: min_k_d_weight = weighted_cost min_k_d = arborescence if v_k_0 == len(G): min_k_d_weight = weighted_cost min_k_d = arborescence
 from io import StringIO from collections import defaultdict from numpy.testing import ( assert_equal, assert_array_equal,)
 kernel_size=self.kernel_size, stride=_pair(self.stride), padding=_pair(self.padding), dilation=_pair(self.dilation), bias=True) self.init_offset()
 num_data_ = train_data_->num_data(); // create buffer for gradients and Hessians size_t total_size = static_cast<size_t>(num_data_) * num_tree_per_iteration_; gradients_.resize(total_size); hessians_.resize(total_size); // get max feature index max_feature_idx_ = train_data_->num_total_features() - 1;
 return nil } // Send transmits the given data. The data is expected to already be framed. func (h *fHttpTransport) Send(data []byte) error { if!h.IsOpen() {
 } } const tempOptions = Object.assign({}, options); tempOptions.conditions.push('pinned = 1'); const pinnedItems = await this.search(tempOptions); options.conditions.push('pinned = 0'); if (!options.showCompletedTodos) { options.conditions.push('todo_completed <= 0');
 spotipy_call = getattr(spotipy_client, endpoint) recently_played = spotipy_call(**kwargs) break except AttributeError: self.log.warning('Unknown endpoint: %s' % endpoint) break except SpotifyException as e: retries -= 1 if e.http_status == 429:
 """ Finds any applicable compositor and applies it. """ from.overlay import Overlay from._compositor import Compositor while True: match = cls.strongest_match(overlay, mode) if match is None: return overlay
 } /** * Shortcut for {@code filterTry(predicate::test, throwableSupplier)}, see {@link #filterTry(CheckedPredicate, Supplier)}. * * @param predicate A predicate * @return a {@code Try} instance
 * @param int     $post_id The post ID. * @param WP_Post $post    WP_Post object. */ function rocket_clean_post( $post_id, $post = null ) { static $done = []; if ( isset( $done[ $post_id ] ) ) { return; } if ( defined( 'DOING_AUTOSAVE' ) ) { return; }
 // Client is included for easy `Send`-methods. sda.Client // IdentityData holds all the data related to this identity // It can be stored and loaded from a config file. Data }
 t, err := s.tag.GetByAddress(ch.Address()) if err!= nil { s.logger.Debugf("pusher: error while getting tag by address %s: %v", ch.Address(), err) continue } t.Inc(tags.StateSent)
 # Cell class AzureMLCallback(Callback): "Log losses, metrics, model architecture summary to AzureML" def __init__(self, recorder): super(AzureMLCallback, self).__init__() self.recorder = recorder  def before_fit(self): self.run = Run.get_context()
 def _test(): """Run the Bio.Blast.Applications module's doctests (PRIVATE).""" import doctest doctest.testmod(verbose=1)
 log.warn("Use of {} and {} are deprecated. Consider using {} instead.", INSTANCE_DFS_URI, INSTANCE_DFS_DIR, Property.INSTANCE_VOLUMES); } if (!cipherSuite.equals(NULL_CIPHER) && keyAlgorithm.equals(NULL_CIPHER)) { fatal(Property.CRYPTO_CIPHER_KEY_ALGORITHM_NAME.getKey() + " should be configured when " + Property.CRYPTO_CIPHER_SUITE.getKey() + " is set."); } if (cryptoModule.equals(NULL_CRYPTO_MO
 import com.google.errorprone.BugPattern.SeverityLevel; import com.google.errorprone.VisitorState; import com.google.errorprone.bugpatterns.BugChecker; import com.google.errorprone.fixes.SuggestedFix; import com.google.errorprone.matchers.Description; import com.google.errorprone.matchers.Matcher; import com.google.errorprone.util.ASTHelpers; import java.util.Collections;
 this.test.assertEquals(this.get_cell_text(0), a, 'Merge cell 0 above: Cell 0 is unchanged'); this.test.assertEquals(this.get_cell_text(1), b, 'Merge cell 0 above: Cell 1 is unchanged'); this.test.assertEquals(this.get_cell_text(2), c, 'Merge cell 0 above: Cell 2 is unchanged'); this.validate_notebook_state('merge up', '"merge u
 for (int i = 0; i < indent; i++) { System.out.print(" "); } System.out.printf(fmtString + "%n", args); } }
 Returns: dict[str, Tensor]: A dictionary of loss components. """ x = self.extract_feat(img) losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes, gt_labels, gt_bboxes_ignore)
 $editreason = ''; if($mybb->settings['alloweditreason'] == 1) { $mybb->input['editreason'] = $mybb->get_input('editreason'); eval("\$editreason = \"".$templates->get("editpost_reason")."\";"); $bgcolor = "trow2"; $bgcolor2 = "trow1";
 protocolTraffic.Rates = make(map[string]string) } // handle low request rates precision trouble. // If rate <= 0 then increase precision delta := calPrecisionDelta(rateVal) rate := fmt.Sprintf("%.*f", r.Precision+delta, rateVal) // remove redundant zero and keep at least two decimals
 if! [[ "${paths[$i]}" == *"$target_variant"* ]]; then matched_all_archs="0" fi if! [[ "${paths[$i]}" == "$target_arch" ]]; then matched_all_archs="0" fi done
 this.store = new Iterable<TabletLocationState>() { @Override public Iterator<TabletLocationState> iterator() { return Iterators.concat(new RootTabletStateStore(context).iterator(), new MetaDataStateStore(context).iterator(), liveServers.scanServers()); } }; }
 # See the License for the specific language governing permissions and # limitations under the License. # from.cfg_parser import LuigiConfigParser from.toml_parser import LuigiTomlParser __all__ = ['LuigiConfigParser', 'LuigiTomlParser']
 Impl::SYCLInternal::singleton().initialize(d.get_device()); } std::ostream& impl_sycl_info(std::ostream& os, const sycl::device& device) { using namespace sycl::info; return os << "Name: " << device.get_info<device::name>() << "\nDriver Version: " << device.get_info<device::driver_version>()
 // unavailable at the proper time self.apos.migrations.add(self.__meta.name + '.docReferencesCorrected', function(callback) { var needed; var attachmentUpdates = {}; var docReferencesContained = {}; return async.series([ reset, docs, attachments, self.updatePermissions ], callback); function reset(callback) { return self.db.update({}, { $set: { docIds: [], trashDocIds: []
 import bigchaindb from bigchaindb.consensus import AbstractConsensusRules logger = logging.getLogger(__name__) CONFIG_DEFAULT_PATH = os.environ.setdefault(
 */ TEST_F(ToriiServiceTest, CommandClient) { iroha::protocol::TxStatusRequest tx_request; std::string hash = std::string(32, '\0'); tx_request.set_tx_hash(hash); iroha::protocol::ToriiResponse toriiResponse; auto client1 = torii::CommandSyncClient(Ip, Port);
 { return IsModifiableEntity() && (Persister.HasMutableProperties ||!Persister.IsInstrumented(entity) || Persister.ExtractFieldInterceptor(entity).IsDirty); } /// <summary>
 /// Adds a new static directory to the nancy conventions /// </summary> /// <param name="requestDirectory">The route of the file</param> /// <param name="allowedExtensions">Allowed extensions</param> public string this[string requestDirectory, params string[] allowedExtensions] { set { this.conventions.StaticContentsConventions.Add(StaticContentConventionBuilder.AddDirectory(requestDirectory, value, allowedExtensions)); } } }
 } filteredConns := filterAntreaConns(conns, ct.nodeConfig, ct.serviceCIDR, zoneFilter) klog.V(2).Infof("Flow exporter considered flows: %d", len(filteredConns)) // If we are unable to parse the conntrack entry, we log a warning and // ignore it. This may happen when a new version of conntrack is released. for _, conn := range conns {
 "headers": semantic.Tvar(1), }, Required: []string{"url"}, Return:   semantic.NewObjectPolyType(map[string]semantic.PolyType{"statusCode": semantic.Int, "body": semantic.Bytes}, semantic.LabelSet{"status", "body"}, nil), }), func(ctx context.Context, args values.Object) (values.Value, error) { // Get and validate URL
 def __init__( self, name: str, default: typing.Any, typespec: typing.Type, help: str, choices: typing.Optional[typing.Tuple[str,...]] ) -> None: typecheck.check_type(name, default, typespec) self.name = name self._default = default self.typespec = typespec self.value = unset self.help = help self.choices = choices
 }) } maxHandlers := 1 ab := batcher.New(reflect.TypeOf([]driver.AckID{}).Elem(), maxHandlers, handler) return &Subscription{ driver:     d, ackBatcher: ab,
 #   RSpec's built-in formatters emit. def fully_formatted(pending_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes) formatted_caller = RSpec.configuration.backtrace_formatter.backtrace_line(example.location) colorizer.wrap("\n  #{pending_number}) #{example.full_description}", :pending) + "\n     " + Formatters::ExceptionPresenter::PENDING_DETAIL_FORMATTER.call(example, co
 { var matchingRule = GetMatchingRowHighlightingRule(logEvent); if ((matchingRule.ForegroundColor!= ConsoleOutputColor.NoChange) && (oldForegroundColor!= matchingRule.ForegroundColor)) { Console.ForegroundColor = (ConsoleColor)matchingRule.ForegroundColor; didChangeForegroundColor = true; } if ((matchingRule.BackgroundColor!= ConsoleOutputColor.NoChange) && (oldBackgroundColor!= matchingRule.BackgroundColor)) { Console.BackgroundColor = (ConsoleColor)matchingRule.BackgroundColor; didChangeBackgrou
 server.t = new(tomb.Tomb) } server.t.Go(server.run) if err := server.t.Wait(); err!= nil { log.Fatal(err) } return nil
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4479-SEA 1645534116 152152721</p> <hr> <p>Varnish cache server</p> </body>
 end if Rails.env.development? || Rails.env.test? resources :reports, only: [:show, :index], param: :report_name end resources :transfers, only: %i(index create new show destroy)
 EventBus.getDefault().register(this); chip = layout.findViewById(R.id.feed_title_chip); if ((getArguments().getLong(ARG_FEED)!= 0) &&!FEED_TITLE.isEmpty()) { chip.setText(FEED_TITLE); chip.setOnCloseIconClickListener(v -> { getArguments().putLong(ARG_FEED, 0); search(); }); } return layout; }
 // from config loader (eg. a http loader) with given interval. // // EXPERIMENTAL: Subject to change. PullInterval Duration `json:"pull_interval,omitempty"` } // IdentityConfig configures management of this server's identity. An identity
 {round.block_round, currentRejectRoundConsumer(round.reject_round)}); } void OnDemandOrderingServiceImpl::tryErase(uint32_t number_of_proposals) { while (proposal_map_.size() > number_of_proposals) { log_->info("tryErase: erasing {}", proposal_map_.begin()->first); proposal_map_.erase(proposal_map_.begin()); }
 def test_tf_dataset_mismatched_input_type(): input_dataset = tf.data.Dataset.from_tensors(np.full((2, 2), 42)).repeat() for wrong_input_dataset in ["str", [input_dataset], input_dataset]: yield check_tf_dataset_mismatched_input_type, wrong_input_dataset, 42, "HWC" yield check_tf_dataset_mismatched_input_type, wrong_input_dataset, ["a"], "HWC" for wron
 obj.dataCol = 'b'; }); TestCase.assertEqual(obj.boolCol, false, 'wrong bool value'); TestCase.assertEqual(obj.intCol, 2, 'wrong int value'); TestCase.assertEqualWithTolerance(obj.floatCol, 2.2, 0.000001, 'wrong float value');
 class Template: def __init__(self, variables=None): if variables is not None: self.variables = variables else: self.variables = {} self.tmpl = Apply("") def apply(self, template):
 * <pre>{@code * Pipeline pipeline = Pipeline.create(); * pipeline.<String>readFrom(Sources.list(LIST_NAME)) *        .mapUsingService(JetSpringServiceFactories.beanServiceFactory("userDao", UserDao.class), *                 (userDao, item) -> userDao.findByName(item.toLowerCase())) *        .writeTo(Sinks.logger()); * }</pre>
 if (loopIfNoConnection) { try { Thread.sleep(retryWait); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); } } } while (loopIfNoConnection);
 shotContext.isShowing(); shootButton.checked = true; this.updateShot(this._activeContext, this._activeContext.shot.asJson()); if (this._activeContext.isEditing) { shootPanel.resize(400, 525); } else { shootPanel.resize(400, 250);
 package org.apache.iceberg.mr.hive; import org.apache.hadoop.hive.ql.io.sarg.PredicateLeaf; import org.apache.hadoop.hive.ql.io.sarg.SearchArgument; import org.apache.hadoop.hive.ql.io.sarg.SearchArgumentFactory.SearchArgumentType; import org.apache.iceberg.expressions.And; import org.apache.iceberg.expressions.Expressions; import org.apache.iceberg.expressions.Not;
 } class LayoutManager { setLayout(layout, save) { if (!layout || layout === 'auto') { this.autoLayout();
 sel    appEnvSelector spinner progress resourceDeployer taskDeployer } func newTaskRunOpts(vars runTaskVars) (*runTaskOpts, error) {
 }); mCryptoSupportSignOnly.setChecked(mAccount.getCryptoSupportSignOnly()); } else { final Preference mCryptoMenu = findPreference(PREFERENCE_CRYPTO); mCryptoMenu.setEnabled(false);
 // TODO(dmo): figure out if we need to add a more specific timeout for // individual checks transport := &http.Transport{ // TODO(dmo): use a single HTTP client with a shared connection pool. // Reusing connections is only possible with HTTP/2. transport = &http2http.Transport{ TLSClientConfig: &tls.Config{ InsecureSkipVerify: true, },
 /** * Return the current schema version for the host. * <p/> * Schema versions in Cassandra are used to ensure all the nodes agree on the current * Cassandra schema when it is modified. For more information see {@link ExecutionInfo#isSchemaInAgreement()} * * @return the node's current schema version value.
 # mode: run # ticket: 5 # The reason there are two test files is that this one contains tests # that are not actually testing the same thing as the tests in # "methodmangling_T1382". class CyTest(object): """
 if (!isNodeProcess) { return; } let called = false; let user = await Realm.Sync.User.login('http://127.0.0.1:9080', Realm.Sync.Credentials.nickname('admin', true));
 maxedExpRetry := retry.WithMaxRetries(RETRY_MAX, expRetry) err = retry.Do(context.Background(), maxedExpRetry, func(ctx context.Context) error { return retry.RetryableError(b.dkgContractClient.Broadcast(bcastMsg)) }) if err!= nil {
 } ] const router = new VueRouter({ <%_ if (historyMode) { _%> mode: 'history',
 * @param spec {@link PartitionSpec} used to produce {@link DataFile} partition tuples * @param outputFile the destination file location * @return a manifest writer */ public static ManifestWriter write(PartitionSpec spec, OutputFile outputFile, boolean overwrite) { return ManifestFiles.write(spec, outputFile); }
 level with shape (N, num_anchors * 4, H, W) img_metas (list[dict]): Meta information of each image, e.g., image size, scaling factor, etc. input_shape_t (torch.Tensor): Input image shape, with shape (N, 2) cfg (mmcv.Config | None): Test / postprocessing configuration, if None, test_cfg would be used rescale (bool): If Tru
 # TODO: remove inplace=False if isinstance(instance, (Seq, MutableSeq)): instance = instance.reverse_complement(inplace=False) if isinstance(instance, (str, SeqRecord, SeqDict)): instance = instance.reverse_complement() instances.append(instance) return instances
 log := logf.FromContext(ctx) log.V(logf.DebugLevel).Info("performing HTTP01 reachability check") req := &http.Request{ Method: http.MethodGet, URL:    url, } req.Header.Set("user-agent", pkgutil.CertManagerUserAgent) req = req.WithContext(ctx) // ACME spec says that a verifier should try // on http port 80 first, but follow any redirects may be thrown its way
 } MessageAndMetadata<byte[], byte[]> kafkaMessage = mIterator.next(); Long timestamp = null; if (mConfig.useKafkaTimestamp()) { timestamp = mKafkaMessageTimestampFactory.getTimestamp(kafkaMessage); } Message message = new Message(kafkaMessage.topic(), kafkaMessage.partition(), kafkaMessage.offset(), kafkaMessage.key(), kafkaMessage.message(), timestamp);
 { Html = $"Error: You must have created at least one store. <a href='{(Url.Action("CreateStore", "UserStores"))}'>Create store</a>", Severity = SeverityCodes.Danger }.ToString(); return RedirectToAction(nameof(ListApps)); }
 * @return a function that applies arguments to the given {@code partialFunction} and returns {@code Some(result)} *         if the function is defined for the given arguments, and {@code None} otherwise. */ static <R> Function0<Option<R>> lift(CheckedFunction0<? extends R> partialFunction) { return () -> Try.<R> of(partialFunction::apply).getOption(); } /**
 $response = $this->process($request, $response); if (!$silent) { $this->respond($response); }
 # add these directories to sys.path here. If the directory is relative to the # documentation root, use os.path.abspath to make it absolute, like shown here. # import datetime import os import sys import sphinx from sphinx.errors import VersionRequirementError curr_path = os.path.dirname(os.path.realpath(__file__)) libpath = os.path.join(curr_path, '../python-package/')
 ##### Distributed sampler infrastructure ##### def CreateSender(ip, port, timeout): """ Create a sender communicator via C socket Parameter:
 * Filter the course completed page content when auto-creating it * through setup wizard. * * @hook  sensei_default_course_completed_page_template * @since 3.13.1 * * @param {array} $blocks Blocks array.
 require.NoError(t, puller.Collect(ctx)) records := processortest.NewOutput(attribute.DefaultEncoder()) require.NoError(t, controllertest.ReadAll(puller.Reader(), export.CumulativeExportKindSelector(), records.AddInstrumentationLibraryRecord)) require.EqualValues(t, map[string]float64{ "counter.sum/A=B/": 10,
 'apostrophe-images-widgets': {}, 'apostrophe-files': {}, 'apostrophe-files-widgets': {}, 'apostrophe-notifications': {}, 'apostrophe-service-bridge': {} } };
 /** * {@inheritdoc} */ public function compile(\Twig\Compiler $compiler): void { $arguments = $this->getAttribute('arguments');
 if server_extensions: server_extensions[0].finalize(handshake_flow.response.headers['Sec-WebSocket-Extensions']) request = Request(extensions=client_extensions, host=handshake_flow.request.host, target=handshake_flow.request.path) data = self.connections[self.server_conn].send(request) self.connections[self.client_conn].receive_data(data)
'vendor/bootstrap-accessibility.min.js','vendor/validator.min.js','vendor/form-attr-polyfill.js', // input[form] polyfill, cannot load conditionally, since we need all versions of IE'vendor/autocomplete.js', 'common.js', 'lightbox.js', ),
 func TestValidForImagesCleanupExclusion(t *testing.T) { defer setTestRegion()() defer setTestEnv("ECS_EXCLUDE_CLEANUP_NONECS_IMAGE", "amazonlinux:2,amazonlinux:3")() imagesNotDelete := parseImageCleanupExclusionList("ECS_EXCLUDE_CLEANUP_NONECS_IMAGE") assert.Equal(t, []string{"amazonlinux:2", "amazonlinux:3"}, imagesNotDelete, "u
 * @return {@code true} if {@code find()} implementation performs scan over all *         index, {@code false} if {@code find()} performs the fast lookup */ boolean isFindUsingFullTableScan(); /** * Find a row or a list of rows and create a cursor to iterate over the
 indices[i] = chunk.Index } return indices }
 return loop, nil } func InitForks(final *flow.Header, headers storage.Headers, updater module.Finalizer, modules *HotstuffModules, rootHeader *flow.Header, rootQC *flow.QuorumCertificate) (*HotstuffModules, error) { finalizer, err := initFinalizer(final, headers, updater, modules.Notifier, rootHeader, rootQC, modules.Committee) if err!= nil { return nil, fmt.Er
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4439-SEA 1645530270 1633359834</p> <hr> <p>Varnish cache server</p> </body>
 // fix extra border part on higher resolutions if ( displayHeight > fheroes2::Display::DEFAULT_HEIGHT ) { srcrt.x = 478; srcrt.y = isEvilInterface? 328 : 345; srcrt.width = 3; srcrt.height = isEvilInterface? 15 : 20; dstpt.x += 14; dstpt.y += 18; fheroes2::Bl
 ('move-to-end-of-line', ['$']), ('move-to-start-of-document', ['gg']), ('move-to-end-of-document', ['G']), ('yank selection', ['y'] + RETURN_KEYS), ('scroll left', ['H']), ('scroll down', ['J']),
 self.assertRaises(FileNotFoundError, d.get_raw, "alpha") def test_old_check_same_thread(self): """Setting check_same_thread to False doesn't raise an exception.""" d = SeqIO.index_db("Roche/triple_sff_rel_paths.idx") def reader_thread():
 mosaic_bboxes = np.concatenate(mosaic_bboxes, 0) mosaic_labels = np.concatenate(mosaic_labels, 0) # TODO: check whether it will affect performance if self.bbox_clip_border: mosaic_bboxes[:, 0::2] = np.clip(mosaic_bboxes[:, 0::2], 0, 2 * self.img_scale[1])
 * SPDX-License-Identifier: Apache-2.0 */ #include "backend/protobuf/query_responses/proto_transaction_page_response.hpp" #include "common/byte_utils.hpp" namespace shared_model {
 BlockExplorerLink = NetworkType == NetworkType.Mainnet? "https://blockstream.info/liquid/tx/{0}" : "https://blockstream.info/testnet/liquid/tx/{0}", NBXplorerNetwork = nbxplorerNetwork, UriScheme = "liquidnetwork", CryptoImagePath = "imlegacy/lcad.png", DefaultSettings = BTCPayDefaultSettings.GetDefaultSettings(NetworkType), CoinType = NetworkType == Netwo
 for ruleField, ruleValues := range rules { if strings.HasPrefix(ruleField, "+") { for _, ruleValue := range ruleValues { headers.Add(strings.TrimPrefix(ruleField, "+"), ruleValue) } } else if strings.HasPrefix(ruleField, "-") { headers.Del(strings.TrimPrefix(ruleField, "-"))
 // Currently only works on DataTypes. // Need to decide how to handle uint8_t matrices. auto& mat = data.template get<DataType>(); // Don't use El::Scale because it spawns OpenMP threads. // Scale is only used for float64_t and complex64_t. // We do it per element instead of using El::Scale. DataType* __restrict__ buf = mat.Buffer(); const El::Int size = mat.Height()
 public static readonly Regex TimeZoneEndRegex = new Regex("time$|timezone$", RegexOptions.Singleline); // Compute UTC offset in minutes from matched timezone offset in text. e.g. "-4:30" -> -270; "+8"-> 480. public static int ComputeMinutes(string timeZone, string utcOffset, bool isUtc) { if (utcOffset.Length == 0) { return Constants.InvalidOffsetValue; } int sign = Constant
 if (wasDST(cal)) { LoopPlugin loopPlugin = LoopPlugin.getPlugin(); if (!loopPlugin.isSuspended()) { warnUser(Notification.DST_LOOP_DISABLED, MainApp.gs(R.string.dst_loop_disabled_warning)); } else { log.debug("Loop already suspended");
 BeginWithCtxAndOpts(ctx context.Context, opts *sql.TxOptions) (TxOrmer, error) //closure control transaction DoTransaction(task func(txOrm TxOrmer) error) error DoTransactionWithCtx(ctx context.Context, task func(txOrm TxOrmer) error) error DoTransactionWithOpts(opts *sql.TxOptions, task func(txOrm TxOrmer) error) error DoTransactionWithCtxAndOpts(ctx context.Contex
 oss_fuzz_project.ccs = ccs oss_fuzz_project.put() else: if language in MEMORY_SAFE_LANGUAGES: cpu_weight = OSS_FUZZ_MEMORY_SAFE_LANGUAGE_PROJECT_WEIGHT else: cpu_weight = OSS_FUZZ_DEFAULT_PROJECT_CPU_WEIGHT data_types.OssFuzzProject( id=project,
 // ErrorCode implements driver.ErrorCode. func (*watcher) ErrorCode(err error) gcerrors.ErrorCode { // err might have come from blob, in which case use its code. return gcerrors.Code(err) }
 def with_mask(self): return hasattr(self,'mask_head') and self.mask_head is not None @abstractmethod def extract_feat(self, imgs): pass
 * Add CSS classes for block alignment to the incoming attributes array. * This will be applied to the block markup in the front-end. * * @param WP_Block_Type  $block_type       Block Type. * @param array          $block_attributes Block attributes. *
 return nil } // generateStruct generates the struct definition for the struct. func (g *Generator) generateStruct(s *parser.Struct) string { contents := ""
 total_size += (sizeof(s2n_preferred_hashes) * num_signature_algs * 2) + 6; } struct s2n_blob *client_app_protocols; GUARD(s2n_connection_get_protocol_preferences(conn, &client_app_protocols)); uint16_t application_protocols_len = client_app_protocols->size; uint16_t server_name_len = strlen(conn->server_name); uint16_t mfl_code_len 
 // The maximum length of a glyph's name is 31 chars. #define MAXGLYPHNAME_LEN 31 unsigned int selectmax = fvmv_selectmax < 0? fv->b.sf->glyphcnt : fvmv_selectmax; char *buf = NULL, *pt; char titlebuf[50+strlen(fv->b.sf->fontname)+1]; GTextInfo label; int i,j,cnt;
 sc: trace.SpanContext{ TraceID:    traceID, SpanID:     spanID, TraceFlags: trace.FlagsSet, }, b3: trace.B3{SingleHeader: true}, expected: &Supplier{
 const op = "authtoken.newAuthTokenId" id, err := db.NewPublicId(AuthTokenPrefix) if err!= nil { return "", errors.Wrap(err, op) } return id, nil } // newAuthToken generates a token with a version prefix.
 for i in range(num_samples): grads0 = tf.constant(db_grad[i]) cg_opt.apply_gradients(zip([grads0], [var0])) np.testing.assert_allclose(np.array(db_out[i]), var0.numpy()) @pytest.mark.usefixtures("maybe_run_functions_eagerly")
 require 'aws-sdk-secretsmanager' # Gets all secrets in us-west-2 # Replace us-west-2 with the AWS Region you're using for AWS Secrets Manager. sm = Aws::SecretsManager::Client.new(region: 'us-west-2') resp = sm.list_secrets
 /* if options.uniqueTitle is true, a unique title for the duplicated file will be assigned. */ const uniqueTitle = options && options.uniqueTitle; for(const noteId of noteIds){ const noteOptions = {}; //If ensureUniqueTitle is truthy, set the original note's name as root for the unique title. if(uniqueTitle){ const originalNote = await Note.load(noteId); noteOptions.uniqueTitle = originalNote.title; }
 from plenum.common.constants import STEWARD_STRING from plenum.common.exceptions import RequestNackedException from plenum.common.util import randomString from plenum.test.helper import sdk_multi_sign_request_objects, sdk_json_to_request_object, sdk_send_signed_requests, \ sdk_get_and_check_replies def test_send_same_txn_with_different_signatures_in_separate_batches( looper, txnPoolNodeSet, sdk_pool_handle, sdk_wallet_trustee, sdk_
 return offers; } // TODO: this method needs to be made thread safe. @Override public void returnOffer(OfferID offerId) { synchronized (offerCache) {
 _bboxes = bbox_mapping(det_bboxes[:, :4], img_shape, scale_factor, flip) mask_rois = bbox2roi([_bboxes]) mask_feats = self.mask_roi_extractor[-1].( x[:len(self.mask_roi_extractor.featmap_strides)], mask_rois) for i in range(self.num_stages): mask_roi_extractor = self.mask_roi_extractor[i]
 return ( <Dialog title={intl.formatMessage(messages.dialogTitle)} subtitle={walletName} actions={showActions? actions : []} closeOnOverlayClick={false} onClose={onClose}
 $url = $path; } return $url; }
 lastClientSendTime = NetworkTime.localTime; if (CompareSnapshots(snapshot)) { hasSentUnchangedPosition = true; } else { hasSentUnchangedPosition = false; }
 uint64_t>; using PermissionTuple = boost::tuple<int>; const auto &pagination_info = q.paginationMeta(); const auto first_hash = pagination_info.firstTxHash(); // retrieve one extra transaction to populate next_hash auto query_size = pagination_info.pageSize() + 1u;
 '--firebase-api-key', type=str, required=True, help='Firebase web API key (for authentication).') parser_create_config.add_argument( '--oauth-client-secrets-path', type=str,
 // Go to the redirect if any if ( $this->input->post('redirect') ) { if (! preg_match('#^https?://#i', $this->input->post('redirect')) ) { $this->input->post('redirect') = $this->core->build_url(array('page' => 'home')); }  redirect($this->input->post('redirect')); } else {
 var peers []*peer for _, peer := range ps.peers { if peer.knownStatus < height { peers = append(peers, peer) } }
 } } protected SingularityDeleteResult delete(String path) { final long start = System.currentTimeMillis();
 can handle negative edge weights. If a negative cycle is detected, you can use :func:`find_negative_cycle` to return the cycle and examine it. Shortest paths are not defined when a negative cycle exists because once reached, the path can cycle forever to build up arbitrarily low weights.
 { return new LightboxResult($this->locator, $filePathOrImage, $url, $sizeConfiguration, $groupIdentifier, $resizeOptions); } }
 return None revision_pattern = revision_pattern_from_build_bucket_path(bucket_path) for build_url_item in build_url_list: match = re.match(revision_pattern, build_url_item) if not match: continue current_revision = match.group(1) if current_revision == revision: return build_url_item return None
 private readonly struct ComparableComparerStruct : IComparer<T> { public int Compare(T x, T y) => x.CompareTo(y); } }
 return onnx_outputs def to_list(outputs): """Convert the torch forward outputs containing tuple or list to a list only containing torch.Tensor.
 } } else { // rename only main file to main.ts const content = convertLintFlags(files[api.entryFile]) const tsFile = api.entryFile.replace(jsRE, '.ts') files[tsFile] = content delete files[api.entryFile] }
 Git::SyncTrack.(track) assert track.concepts.find_by(uuid: 'd0fe01c7-d94b-4d6b-92a7-a0055c5704a3').present? end test "concept exercises use track concepts for taught concepts" do
 } /** * Returns the bootstrapped {@code JetInstance}. The instance will be automatically * shut down once the {@code main()} method of the JAR returns. */ public static JetInstance getInstance() { return SUPPLIER.get().instance;
 url:                 "https://foo/file1.html", expectedStatus:      http.StatusOK, expectedBodyContent: testFiles["file1.html"], expectedEtag:        "\"1e240-13\"", }, // Test 3 - access folder with index file with trailing slash { url:                 "https://foo/dirwithindex/", expectedStatus:      http.StatusOK, expectedBodyContent: testFiles[filepath.Join("dirwithindex", 
 return nodeWhitelist.remove(node); } public boolean contains(final Peer node) { return (!nodeWhitelistSet || (nodeWhitelistSet && nodeWhitelist.contains(node))); } }
 public function buildFields() { $this->addField('title', 'Title', false, 'KunstmaanMenuBundle:AdminList:menu-item-title.html.twig'); $this->addField('type', 'Type', false, 'KunstmaanMenuBundle:AdminList:menu-item-type.html.twig'); $this->addField('url', 'Url', false, 'KunstmaanMenuBundle:AdminLis
 func TestValidateBlockHeader(t *testing.T) { // add (hash, seed) --> (tensority hash) to the  tensority cache for avoid // real matrix calculate cost. tensority.AIHash.AddCache(&bc.Hash{V0: 0}, &bc.Hash{}, &bc.Hash{V0: 1<<64 - 1, V1: 1<<64 - 
 return!oldReference.equals(reference); } public boolean isBranch() { return reference instanceof Branch; }
 Text::Text( const Text & t ) { assert( t.message!= nullptr ); message = new TextAscii( dynamic_cast<TextAscii &>( *t.message ) ); gw = t.gw; gh = t.gh;
 return resp, err } func (c RetryingChunkStoreServiceClient) EnumerateTables(ctx context.Context, in *EnumerateTablesRequest, opts...grpc.CallOption) (*EnumerateTablesResponse, error) { var resp *EnumerateTablesResponse op := func() error { var err error resp, err = c.client.EnumerateTables(ctx, in, opts...) return processGrpcErr(err) }
 orig     *CloudAuditLogsSource expected *CloudAuditLogsSource }{ "missing defaults": { orig: &CloudAuditLogsSource{ ObjectMeta: metav1.ObjectMeta{ Annotations: map[string]string{
 threshold: 0 }) ); } if (env.NODE_ENV === 'production') {
 pipeline.readFrom(TestSources.items(1, 2)).map(Value::new).writeTo(Sinks.observable(OBSERVABLE_NAME)); // When Observable<Value> observable = client().getObservable(OBSERVABLE_NAME);
 dist.broadcast(module.running_mean, 0) def after_train_epoch(self, runner): if not self.by_epoch or not self.evaluation_flag(runner): return from mmdet.apis import multi_gpu_test tmpdir = self.tmpdir if tmpdir is None:
 /// </summary> public static double Sqrt(this double numericProperty) { throw DirectUsageException(); } /// <summary>
 ps.metrics.HandlerReplication.Inc() span, _, ctxd := ps.tracer.StartSpanFromContext(ctx, "pushsync-replication-storage", ps.logger, opentracing.Tag{Key: "address", Value: chunkAddress.String()}) defer span.Finish() ctx = context.WithValue(ctx, expirerKey{}, ctxd) realClosestPeer, err := ps.topologyDriver.ClosestPeer(chunk.Address(), false)
 # ++++++++++++++++++++++++++++++++++++++++++ course.add_section do |section| section.title = 'Asynchronous JavaScript and APIs' section.description = 'This section explores asynchronous JavaScript and event loops, and how it's useful in fetching data from web servers using APIs.' section.identifier_uuid = '46153ba3-d10b-4566-924f-b3fa549a05bc' section.add_lessons(
 entry("property1", "sampleValueForProperty1"), entry("property2", "sampleValueForProperty2") ).containsOnly(entry("property1", "sampleValueForProperty1"), entry("property2", "sampleValueForProperty2")); } @Test
 func init() { StopChan = make(chan bool) go run(StopChan) } func run(stop chan bool) { ResultChannel = make(chan ExecResult, 1024) for { select {
 { memcpy(original_change_cit->getChange()->serializedPayload.data + original_offset, incoming_change->serializedPayload.data + incoming_offset, original_change_cit->getChange()->serializedPayload.length - original_offset); } original_change_cit->getChange()->getDataFragments()->at(count) = ChangeFragmentStatus_t::PRESENT;
 /* json parser */ fuzz_config = flb_config_init(); fuzz_parser = flb_parser_create("fuzzer", "json", NULL, NULL, NULL, NULL, MK_FALSE, NULL, NULL, NULL, MK_FALSE, NULL, 0, NULL, fuzz_config); flb_parser_do(fuzz_parser, (char*)data, size, &out_buf, &out_size, &out_time);
 Update:  linkUpd, }) case routeUpd := <-routeInC: logrus.WithField("route", spew.Sdump(routeUpd)).Debug("Route update") // routeUpd.Route.Type&unix.RTN_LOCAL == 0 means the route is not local (not on this // machine), so it can be ignored. if routeUpd.Route.Type&unix.RTN_LOCAL == 0 { logrus.Wit
 // If the HighlyAvailableService is not initialized or it's not the active service, throw an exception // to prevent processing of the servlet. if (null == Monitor.HA_SERVICE_INSTANCE ||!Monitor.HA_SERVICE_INSTANCE.isActiveService()) { throw new IOException("This is not the active Monitor", new NotActiveServiceException("This is not the active service")); } }
 // Only remove per request handler if the channel is registered // or open since DefaultChannelPipeline would remove handlers if // channel is closed and unregistered // See DefaultChannelPipeline.java#L1463 if (channel.isOpen() || channel.isRegistered()) { removeIfExists(channel.pipeline(), HttpStreamsClientHandler.class,
 def self.latest_semver_aliases(major_full) {}.tap do |aliases| major_full.each do |major, full| fullparts = full.split('.') aliases.merge!( major => full,
 } //sign signReq := &ca.SignCsrRequest{Csr: csr, Ttl: reg.TTL} res, err := s.serverCA.SignCsr(signReq) if err!= nil { s.l.Error(err)
 * necessary so that such topics can't clash with regular topics used * for other purposes. */ private static final String OBSERVABLE_NAME_PREFIX = "observables."; private ObservableUtil() { }
 func (ai *AttendedInstaller) initializeUI() (err error) { ai.keyboard, err = speakuputils.CreateVirtualKeyboard() if err!= nil { logger.Log.Warnf("Failed to initialize virtual keyboard via uinput: %v", err) } const osReleaseFile = "/etc/os-release" ai.backdropStyle = tview.Theme{
 // If inadequate bytes left or if the segment is readonly if (bytesLeftInBuffer == 0 || bytesLeftInBuffer < count || segment.ReadOnly) { lock (_poolLock) { var nextBuffer = _pool.Rent(count); var nextSegment = CreateSegmentUnsynchronized(); nextSegment.SetMemory(nextBuffer); segment.SetNext(nextSegment);
 ch->writerGUID = c_Guid_Unknown; ch->serializedPayload.length = 0; ch->serializedPayload.pos = 0; memset(&ch->instanceHandle, 0, sizeof(ch->instanceHandle)); ch->isRead = 0; ch->sourceTimestamp.seconds(0); ch->sourceTimestamp.fraction(0);
 and_(SuppressBug.run_id == action.run_id, SuppressBug.hash == bug_hash, SuppressBug.type == bug_hash_type, SuppressBug.file_name == None))) \.first() if supp:
 id=record_id, description=record_id, annotations={ "model": model.id, "chain": chain.id, "start": int(rnumbers[0]),
 } } finally { if (writesInProgress > 0) { synchronized (this) { writesInProgress--; if (writesInProgress == 0) this.notifyAll();
 class HmmStudent include Mongoid::Document belongs_to :school, class_name: 'HmmSchool' field :name, type: String
 var groupLock sync.Mutex // DiskRepo provides A local filesystem implementation of the Repo interface type DiskRepo struct { cfg        *config.Config log        olog.Logger accounts   map[string]*account.Accounts accountsDB *sql.DB } // NewDiskRepo creates A new disk repo func NewDiskRepo(cfg *config.Config, log olog.Logger) DiskRepo { paths := []string{ filepath.Join(cfg.Repo.Disk.Path, accountsFolder),
 log.info(`========== Daedalus is starting at ${new Date()} ==========`); log.info(`!!! ${environment.getBuildLabel()} is running on version ${environment.version}#${environment.buildNumber} os ${os.platform()} version ${os.release()} with CPU: ${JSON.stringify(os.cpus(), null, 2)} with ${JSON.stringify(os.totalmem(), null, 2)} total RAM!!!`);
 roles[j].RoleName === options.name) { if (found) { // found duplicates return cmdCallback('VM name is not unique'); } found = options.rsps[i];
 // verify that yac gate emit expected block auto gate_wrapper = make_test_subscriber<CallExact>(gate->onOutcome(), 1); gate_wrapper.subscribe([actual_hash, actual_pubkey](auto outcome) { auto concrete_outcome = boost::get<iroha::consensus::VoteOther>(outcome); auto public_keys = concrete_outcome.public_keys; auto hash = concrete_outcome.hash; ASSERT_EQ(1, public_keys.siz
 Use:   "init", Short: "Creates a new environment in your application.", Example: ` Creates a test environment in your "default" AWS profile using default configuration. /code $ copilot env init --name test --profile default --default-config Creates a prod-iad environment using your "prod-admin" AWS profile, as well as enabling container insights. /code $ copilot env init --name prod-iad --profile prod-admin --con
 if (syncxfer && (!badfp.isvalid ||!(badfp == fingerprint))) { badfp = fingerprint; client->fsaccess->unlinklocal(&localfilename); fa.reset(); chunkmacs.clear(); return failed(API_EWRITE); } else
 intl: intlShape.isRequired, }; render() { const { intl } = this.context; const { adaValue, percentage } = this.props;
 def send_notifications(method, bucket_name, object_path, version_id): bucket_name = normalize_bucket_name(bucket_name) for bucket, notifs in S3_NOTIFICATIONS.items(): if normalize_bucket_name(bucket) == normalize_bucket_name(bucket_name): action = {'PUT': 'ObjectCreated', 'POST': 'ObjectCreated', 'DELETE': 'ObjectRemoved'}[method] # TODO: support more detailed methods, e.g., DeleteMarkerCreated # 
 response = self.client.get(creation_url) self.assertEqual(response.status_code, 200) expected_re = b'^<html>.+<title>Events</title>.+Something happened.+<td>\\[\'foo\', \'bar\'\\]</td>.+</html>$' self.assertRegexpMatches(response.content, re.compile(expected_re, re.DOTALL)) def test_tag_as_str(self):
 Column column = table.getColumn(columnName); columnsToRemove.add(column); } while (readIf(",")); readIf(")"); // For Oracle compatibility - close bracket // TODO: remove this once we upgrade to 12c command.setTableName(tableName); command.setIfTableExists(ifTableExists); command.setColumnsToRemove(columnsToRemove);
 url      string } func NewDefault(authType AuthType) AuthenticationCheck { return &DefaultAuthenticationCheck{ authType: authType, client:   http.DefaultClient,
 if (success) { var pr = parser.Parse(ers[0], refDate); ret.Timex = pr.TimexStr; ret.FutureValue = ret.PastValue = "Set: " + ret.Timex;
 } } else { $result_type = Type::combineUnionTypes($always_positive? Type::getPositiveInt(true) : Type::getInt(true), $result_type); }
 return "(" + _1 + ", " + _2 + ")"; } public static <T1, T2> Tuple2<Seq<T1>, Seq<T2>> sequence(Iterable<Tuple2<? extends T1,? extends T2>> tuples) { Objects.requireNonNull(tuples, "tuples is null"); return new Tuple2<>(tuples.map(Tuple2::_1), tuples.map(Tuple2::_2)); } } No ne
 return sortOrder; } public static (Core.Models.SearchParameterInfo, SortOrder) GetFirstSupportedSortParam(this SearchOptions searchOptions) { EnsureArg.IsNotNull(searchOptions, nameof(searchOptions));
 @pytest.mark.parametrize("dtype", _DTYPES) @pytest.mark.parametrize("shape", [(3, 3,), (3, 3, 1), (3, 3, 3), (4, 3, 3, 3)]) def test_equalize_dtype_shape(dtype, shape): np.random.seed(0) image = np.ones(shape=shape, dtype=dtype) equalized = color_ops.equalize(tf.co
 * @param arr array to shuffle * @returns new array with elements shuffled from a given array */ template<typename T, size_t N> std::array <T, N> shuffle(std::array <T, N> arr) { for (int i = 0; i < N; i ++) { // Swaps i'th  index with random index (less than array size) std::swap(arr[i], ar
 if (wasStored || store.getAutoCommitDelay() == 0) { store.tryCommit(); } else { BitSet openTrans = openTransactions.get(); for (int i = openTrans.nextSetBit(0); i >= 0; i = openTrans.nextSetBit(i + 1)) { MVMap<Long, Object[]> undoLog = undoLogs[i]; if (undoLog!= null &&!undoLog.isEmpty()) 
 location: location }; try { if (options.slot) { client.sites.createOrUpdateSiteSlot(resourceGroup, name, siteEnvelope, options.slot, _); log.info('Webapp slot'+ name + '/' + options.slot +'has been created '); } else {
 { case NEW_PUBLIC: case NEW_NODE: snk.add(nn[i]->nodekey, nn[i]->nodehandle, tn, 0); break; case NEW_UPLOAD: snk.add(nn[i]->nodekey, nn[i]->nodehandle, tn, 0, nn[i].uploadtoken, (int)sizeof nn->uploadtoken); break; } }
 private long batchCount = 0; private long readaheadThreshold; private List<ScannerIterator> activeIters; private static ThreadPoolExecutor readaheadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 3L, TimeUnit.SECONDS, new SynchronousQueue<>(),
 } } return $this->assertCallableAndBindClosureToContainer($resolved, $toResolve); } /**
 */ @XmlJavaTypeAdapter(JaxbAbstractIdSerializer.class) public static class ID extends AbstractId { static final Cache<String,ID> cache = CacheBuilder.newBuilder().weakValues().build(); public static final ID METADATA = of("!0");
 return ( <div> <Button color="primary" onClick={toggleDrawer('left', true)} > <FilterList /> </Button> <SwipeableDrawer
 baseSpiffeIDPrefix := fmt.Sprintf("%s/spire/agent", h.c.TrustDomain.String()) signLog := h.c.Log.WithFields(logrus.Fields{ "caller_id": callerID, "spiffe_id": spiffeID, "source_address": srcAddr, }) if spiffeID == callerID && strings.HasPrefix(callerID, baseSpiffeIDPrefix) {
 super().__init__(database_manager) self.write_req_validator = write_req_validator def authorize(self, request): self.write_req_validator.validate(request, [AuthActionEdit(txn_type=LEDGERS_FREEZE,
 * @author Remy Perona */ public function update_cache_file() { $sccss = $this->get_cache_busting_paths('sccss.css' ); $this->delete_cache_file( $sccss['filepath'] ); $this->create_cache_file( $sccss['bustingpath'], $sccss['filepath'], true ); } /**
 } $workspaces = $this->collectWorkspaceAndAllBaseWorkspaces($workspace); $nodes = $this->prepareFindNodesByPath($path, $workspace, $dimensions); $dimensions = $dimensions === null? [] : $dimensions; $foundNodes = $this->reduceNodeVariantsByWorkspacesAndDimensions($nodes, $workspaces, $dimensions, $path); $foundNodes = $this->filterNode
 tabletMutator.putLocation(assignment.server, LocationType.LAST); tabletMutator.deleteLocation(assignment.server, LocationType.FUTURE); //remove the old location if (prevLastLoc!= assignment.server) { tabletMutator.deleteLocation(prevLastLoc, LocationType.LAST); }
 } function addImgOptMiddleware(app, config) { const { cacheDebug } = config; debug(`mounting onboard image optimization middleware "hastily"`); let cacheMiddleware;
 sb.append("]"); } private static String[] asciiReadableEncodingKoreCalc() { String[] koreEncoder = Arrays.copyOf(StringUtil.asciiReadableEncodingDefault, StringUtil.asciiReadableEncodingDefault.length); koreEncoder[0x2d] = "-"; koreEncoder[0x3c] = "-LT-"; koreEncoder[0x3e] = "-GT-";
 package org.apache.rocketmq.common.protocol.body; import org.apache.rocketmq.remoting.protocol.RemotingSerializable; import org.junit.Test;
 $order = "desc"; } $query = $db->query(" SELECT COUNT(sid) AS count FROM ".TABLE_PREFIX."spamlog l {$where} "); $rescount = $db->fetch_field($query, "count"); // Figure out if we need to display multiple pages.
 } // onSyncResponse processes a synchronization response. func (e *Engine) onSyncResponse(originID flow.Identifier, res *messages.SyncResponse) error { final := e.finalSnapshot().head if err := e.core.HandleHeight(final, res.Height); err!= nil { return err } return nil } // onRangeRequest processes a request for a range of blocks by height.
 'locale/*/LC_MESSAGES/electrum.mo', ] }, scripts=['privkey2electrum'], data_files=data_files, description="Lightweight Bitcoin Wallet", author="Thomas Voegtlin",
 Encoding = Encoding.UTF8; Language = "en-us"; Type = "private"; AddCategoryMapping(1, TorznabCatType.TVAnime, "Anime Series"); AddCategoryMapping(2, TorznabCatType.TVAnime, "OVA"); AddCategoryMapping(3, TorznabCatType.AudioOther, "Soundtrack");
 export type ClockOffset = { quantity: number, unit:'second' |'microsecond', }; export type SlotLength = {
 clusterObj.setHealthChecker(new AbstractHealthChecker.None()); serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj); String[] ipArray = addressServerManager.splitIps(ips); String checkResult = IpUtil.checkOK(ipArray); if (IpUtil.CHECK_OK.equals(checkResult)) { List<Instance> instanceList = addressServerGeneratorManager.generateInstancesByIps(serviceName, rawProductName, 
 }, }, DB: &db.Config{ Type:       "badgerV2", DataSource: dbPath, }, }
 "context" "crypto" "crypto/x509" "fmt" "sync" "github.com/spiffe/spire/proto/spire/server/datastore"
 { var pipe = new Pipe(_pool); produce(reader, pipe).ContinueWith(t => { // Do nothing, we're just verifying that the pipe was created }); return pipe; }
 $post_type_object = get_post_type_object( 'lesson' ); // phpcs:ignore WordPress.Security.NonceVerification.Recommended $lesson_id            = isset( $_GET['post'] )? intval( $_GET['post'] ) : 0; $course_id            = Sensei_Utils::get_current_course(); $sensei_theme_enabled = Sensei_Course_Theme_Option::instance()->has_sensei_theme_enabled
 elif tag == "//": if len(record.sequence)!= scount: raise ValueError( "The number of sequences specified in the record (%d) " "does not agree with the number of sequences found (%d)" % (scount, len(record.sequence)) ) return record
 } latestState := connection.NotConnected return di.EventBus.SubscribeAsync(connection.StateEventTopic, func(e connection.StateEvent) { // Here we care only about connected and disconnected events. if e.State!= connection.Connected && e.State!= connection.NotConnected { return } isDisconnected := latestState == connection.Connected && e.State == connection.NotConnected isConnected := latestState == connection.NotConnected && e.State == connection.Connected if isDisconnected || isConnected {
 if 'pinned' in histentry: new_tab.data.pinned = histentry['pinned'] if (config.val.session_lazy_restore and histentry.get('active', False) and not histentry['url'].startswith('qute://back')): # remove "active" mark and insert back page marked as active data['history'].remove(histentry) data['history'].insert( i + 1, { 'title': hist
 RSpec.describe "Level 1" do describe "Level 2" do describe "Level 3" do inner_metadata = metadata end end end expect(inner_metadata[:example_group][:description]).to eq("Level 3") expect(inner_metadata[:example_group][:example_group][:description]).to eq("Level 2") expect(inner_metadata[:example_group][:example_group][:example_group][:description]).to eq("Level 1")
 void Initialize(); object Startup(); void Reset(); }
 self.assertAlmostEqual(evals_result['valid_0']['binary_logloss'][-1], ret, places=5) params['feature_fraction'] = 0.5 gbm2 = lgb.train(params, lgb_train, num_boost_round=25, valid_sets=lgb_eval, verbose_eval=False, evals_result=evals_result) self.assertNotEqual(ret, gbm2.best_valid['binary_logloss']) ret2 = l
 requestedAppenders[AggregateNodeAppenderName] = true case DeadNodeAppenderName: requestedAppenders[DeadNodeAppenderName] = true case HealthConfigAppenderName: requestedAppenders[HealthConfigAppenderName] = true case IdleNodeAppenderName:
 bottomSheetBehavior.setBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() { @Override public void onStateChanged(View bottomSheet, int unusedNewState) { prepareViewsForSheetPosition(); }
 #include <model/Schedule.hpp> #include <model/Schedule_Impl.hpp> #include <model/ScheduleTypeLimits.hpp> #include <model/ScheduleTypeRegistry.hpp> #include <utilities/idd/IddFactory.hxx> #include <utilities/idd/OS_Fan_ZoneExhaust_FieldEnums.hxx>
 * render into */ export function render(vnode, parentDom) { if (options.root) options.root(parentDom); let oldVNode = parentDom._prevVNode; vnode = createElement(Fragment, null, [vnode]); let mounts = [];
 $md5 = substr(md5($folders[$f]), 0, 8); $content = scan($folders[$f]); $currentFolder = StringUtil::stripRootDir($folders[$f]); $objFolder = $this->blnIsDbAssisted? FilesModel::findByPath($currentFolder) : null; $session['filetree'][$md5] = is_numeric($session['filetree'][$md5])?
 const cli = path.join(__dirname, '../../bin/vue-build') let originalCwd = process.cwd() function setup() { process.chdir(path.join(__dirname,'mock-vue-app')) } function teardown() { rm('dist') process.chdir(originalCwd) }
 hypre_bndry.reset(new MLMGBndry(ba, dm, ncomp, geom)); hypre_bndry->setHomogValues(); const Real* dx = linop.m_geom[amrlev][mglev].CellSize(); int crse_ratio = linop.m_coarse_data_crse_ratio; RealVect bclocation(AMREX_D_DECL(0.5*dx[0]
 HifPackage *pkg = k; /* Set noscripts since we already validated them above */ if (!add_to_transaction (rpmdb_ts, pkg, tmp_metadata_dfd, TRUE, NULL, cancellable, error)) goto out; }
 std::shared_ptr<network::BlockLoader> blockLoader) : validator_(std::move(validator)), mutableFactory_(std::move(mutableFactory)), blockLoader_(std::move(blockLoader)), subscription_(rxcpp::composite_subscription()) { log_ = logger::log("synchronizer"); log_->debug( "synchronizer constructor"); consensus_gate->on_commit().subscribe( subscription_,
 # See the License for the specific language governing permissions and # limitations under the License. """Email module for Mailjet.""" # The pre-commit linter will complain about useless disable of no-member, but # this is needed because quiet the Sendgrid no-member error on Travis.
 matches, err := globber.glob(rootPath, include, excludes, includeHidden, includeSymlinks) if err!= nil { panic(fmt.Errorf("error globbing files with %v: %v", include, err)) } // Remove the root path from the returned files and add them to the output for _, filename := range matches {
 } validateIdentityLinkArguments(identityId, type); runtimeService.deleteUserIdentityLink(caseInstance.getId(), identityId, type); response.setStatus(HttpStatus.NO_CONTENT.value());
 aligner.score("AAA", "AA&") def test_aligner_array_errors(self): aligner = Align.PairwiseAligner() self.assertEqual(aligner.alphabet, "ABCDEFGHIJKLMNOPQRSTUVWXYZ") s1 = "GGG"
 @ParameterizedTest @MethodSource("org.kie.kogito.codegen.api.utils.KogitoContextTestUtils#contextBuilders") public void givenADMNModelWhenMonitoringIsActiveThenGrafanaDashboardsAreGenerated(KogitoBuildContext.Builder contextBuilder) throws Exception { List<GeneratedFile> dashboards = generateTestDashboards(AddonsConfig.builder().withMonitoring(true).withPrometheusMonitoring(true).build(), contextBuilder); if 
 deque wrapper implementing the Queue interface. """ def put(self, *args, **kwargs): # type: (*Any, **Any) -> None """Put an item on the queue.""" return self.append(*args) def get(self, **kwargs): return self.pop()
 } func initEndpoints(pluginCatalog *helpers.PluginCatalog) error { //Shouldn't we get plugins by type instead of name? //plugins nodeAttestor := pluginCatalog.GetPluginsByType(plugin.NodeAttestor)[0] level.Info(logger).Log("pluginType", reflect.TypeOf(nodeAttestor))
 tasks = [TaskRole('test', 'cd scikit-learn/benchmarks && python bench_mnist.py', memoryMB=4096)] class TestPaiTask(unittest.TestCase): @responses.activate
 <div className="column-center full-height inverse-color-scheme"> <div className="large-icon-message-container"> <div className="large-icon check" /> <div className="large-icon-message-string">All of your Firefox Screenshots data has been erased.<br/></div> </div> </div>
 if (interfaceType.IsGenericType && interfaceType.GetGenericTypeDefinition() == typeof(ITableValuedParameterRowGenerator<,>)) { serviceCollection.AddSingleton(type, type); serviceCollection.AddSingleton(interfaceType, type); } } }
 public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); configureForOrientation(newConfig.orientation); } public float convertDpToPixel(float dp) {
 '--theme-transactions-list-border-color': '1e1f31', '--theme-transactions-list-group-date-color': '#ffffff', '--theme-transactions-list-item-details-color': '#ffffff', '--theme-transactions-list-item-highlight-color': '#eb4a22', '--theme-transactions-search-background-color': '#121326', '--theme-transactions-state-ok-background-color': '#2cbb69', '--theme-transactions-state-pending-background-color':
 """Return a filter to be used to select entities with translations with warnings. This filter will return an entity if at least one of its plural forms has a *non-empty* translation with a warning. :arg Locale locale: a Locale object to get translations for
 return tasks_host.do_corpus_pruning(context, last_execution_failed, revision) build_setup_result = build_manager.setup_build(revision=revision) if not build_setup_result: raise CorpusPruningException('Failed to setup build.') build_directory = environment.get_value('BUILD_DIR') start_time = datetime.datetime.utcnow() runner = Runner(build_directory, context) pruner = CorpusPruner(runner)
 idfObject.setName(*s); } idfObject.setString(EnergyManagementSystem_MeteredOutputVariableFields::EMSVariableName, modelObject.getEMSVariableName()); idfObject.setString(EnergyManagementSystem_MeteredOutputVariableFields::UpdateFrequency, modelObject.updateFrequency()); s = modelObject.getEMSProgramorSubroutineName(); if (s.is_initialized()) { idfObject.setString(EnergyManagementSystem_MeteredOutputVariableFie
 } `command:"export" subcommands-optional:"true" description:"Exports a set of targets and files from the repo."` Format struct { Quiet bool `long:"quiet" short:"q" description:"Don't print corrections to stdout"` Args  struct { Files cli.Filepaths `positional-arg-name:"files" description:"BUILD files to reformat"`
 self.string = string self.expr = expr def analyse_types(self, env): # for compatibility when used as a return_type_node, have this interface too
 }, 'Introduction' => { title: 'Introduction to Flexbox', description: "Let's get started with Flexbox", is_project: false, url: '/foundations/html_css/flexbox/flexbox-intro.md', identifier_uuid: '41a157af-b416-4744-bac0-ab5dabde1ad9',
 LOGGER = logger.get_logger(__name__) class CaiDataModel(base_data_model.BaseDataModel): """Cloud Asset Inventory (CAI) Data Model."""
 int s2n_stuffer_writev_bytes(struct s2n_stuffer *stuffer, const struct iovec* iov, int iov_count, size_t offs, size_t size) { void *ptr = stuffer->blob.data + stuffer->write_cursor - size; notnull_check(ptr); size_t size_left = size, to_skip = offs;
 [Fact] public async Task GivenAnExistingResource_WhenRead_ThenAuditLogEntriesShouldBeCreated() { FhirResponse<Patient> result = await ExecuteAndValidate( async () => { result = await _client.CreateAsync(Samples.GetDefaultPatient()); return await _client.ReadAsync<Patient>(ResourceType.Patient, result.Resource.Id); }, "read", ResourceType.Patient,
 'creating-managing-organization') MESSAGE_RUN_FREQUENCY = ( 'Forseti will run once every 8 hours, you can update the run''frequency in the server deployment template field "run-frequency"''or edit the cron job scheduled on the server VM directly.''Forseti will also run once every hour to check for any new''resources created.') # Questions templates QUESTION_ENABLE_WRITE_ACCESS = (
 <% end %> <%= f.input :square_footage, label: "Square Footage", wrapper: :input_group do %> <span class="input-group-text"><i class="fa fa-th"></i></span> <%= f.input_field :square_footage, class: "form-control" %> <% end %> <%= f.input :warehouse_type, label: "Warehouse Type", wrapper: :input_group, collection: StorageLocation::WAR
 // auto inject saylinks (say) if (RuleB(Chat, AutoInjectSaylinksToSay)) { std::string new_message = EQ::SayLinkEngine::InjectSaylinksIfNotExist(message); buf.WriteString(new_message); } else { buf.WriteString(message);
 campaignRoi.emplace_back( 30 + roiOffset.x, 59 + roiOffset.y, 224, 297 ); const size_t chosenCampaign = Video::ShowVideo( Settings::GetLastFile( System::ConcatePath( "heroes2", "anim" ), "CHOOSE.SMK" ), true, campaignRoi ); Video::ShowVideo( Settings::GetLastFile( System::ConcatePath( "
 logger.warn("Cannot add cgroup '{0}' to tracking list; resource usage will not be tracked. " "Error: {1}".format(cgroup.path, ustr(exception))) @staticmethod def get_processes_in_cgroup(cgroup_path): with open(os.path.join(cgroup_path, "cgroup.procs"), "r") as cgroup_procs:
 ctx.env.schema, json_t)): # Turn casts from json->array<T> into json->array<json> # and array<json>->array<T>. ctx.env.schema, json_array_typ = s_types.Array.create( ctx.env.schema, element_type=json_t) json_array_ir = compile_cast( ir_expr, json_array_typ, srcctx=srcctx, ctx=ctx) return compile_cast(
 } return objectMapper.readValue(response.getResponseBodyAsStream(), MESOS_FILE_OBJECTS); } catch (ExecutionException | ConnectException ce) { if (ce.getCause() instanceof ConnectException) { throw new SlaveNotFoundException(ce.getCause()); } throw Throwables.propagate(ce); } catch (Exception e) { throw Throwables.propagate(e); } }
 } func ResponseDirectWithHeaders(t *testing.T, client *http.Client, method, url string, body io.Reader, responseCode int, response interface{}, headers http.Headers) { t.Helper() resp := request(t, client, method, url, body, responseCode, headers)
 let schemas = require("./schemas"); const AppConfig = require("./support/testConfig"); const REALM_MODULE_PATH = require.resolve("realm");
 `; this.mainWindowRef.on('closed', () => { if (this.splashWindow && this.splashWindow.isVisible) { this.splashWindow.close(); } });
 } } // The regex will not be cached, because it will depend on the ignore case setting. // We are not going to use the static regex, because it is not a good idea to cache a regex // that is going to be used only once. // See http://msdn.microsoft.com/en-us/library/z2329abn.aspx for more information. // See http://msdn.microsoft.com/en-us/librar
 return fmt.Sprintf("https://%s.%s/", k.keyVaultName, keyVaultEndpointSuffix) } func getSupportedAlgorithmsForError() string { var algos []string for _, a := range keyvault.PossibleJSONWebKeyEncryptionAlgorithmValues() {
 activeNotifications.remove(holder); int notificationId = holder.notificationId; markNotificationIdAsFree(notificationId); if (!additionalNotifications.isEmpty()) { NotificationContent newContent = additionalNotifications.removeFirst();
 */ package tech.pegasys.pantheon.chainexport; import tech.pegasys.pantheon.ethereum.ProtocolContext; import tech.pegasys.pantheon.ethereum.core.BlockHeader; import tech.pegasys.pantheon.ethereum.rlp.RLP; import tech.pegasys.pantheon.util.bytes.BytesValue;
 } else { clusterState, err = clusterkv.Bootstrap(f.db, stateRoot) if err!= nil { return nil, nil, nil, nil, fmt.Errorf("could not bootstrap cluster state: %w", err) } }
 Seq(NonTerminal(ul.childSort), Terminal(""), NonTerminal(Sort(ul.sort.name() + "#Terminator", ul.sort.params()))), newAtts.add(Constants.ORIGINAL_PRD, Production.class, ul.pList)); // Es ::= Ne#Es prod4 = Production(Seq(), ul.sort, Seq(NonTerminal(Sort("Ne#" + ul.sort.name(), ul.sort.params()))), Att().add(Constants.NOT_INJECTI
 } /** * Utility for registering completable futures for cleanup if this EthTask is cancelled. * * @param <S> the type of data returned from the CompletableFuture * @param subTaskFuture the future to be registered.
 if (searchOptions.IncludeTotal == TotalType.Accurate &&!searchOptions.CountOnly) { // TODO: Clone search options instead of mutating it. // https://github.com/dotnet/roslyn/issues/43581 searchOptions.CountOnly = true; var totalSearchResult = await ExecuteSearchAsync(
 this.setState(prevState => ({ isScannable:!prevState.isScannable })); }; onConfirmReadableChange = this.onConfirmReadableChange.bind(this); onConfirmScannableChange = this.onConfirmScannableChange.bind(this); onConfirmCorrectPrinting = this.onConfirmCorrectPrinting.bind(this); render() { const { intl } = this.context;
 fetched_recs = self.idx._get_record(99228) self.compare_record(recs[0], fetched_recs[0]) self.compare_record(recs[1], fetched_recs[1]) self.compare_record(recs[2], fetched_recs[2]) self.compare_record(recs[3], fetched_recs[3]) self.compare_record(recs[4], fetched_recs[4]) self.compare_record(recs
 namespace parse { namespace detail { condition_parser_rules_3::condition_parser_rules_3( const lexer& tok, Labeller& labeller, const condition_parser_grammar& condition_parser, const value_ref_grammar<std::string>& string_grammar ) :
 Castle * castle = hero.inCastle(); if ( castle ) { ReinforceHeroInCastle( hero, *castle, castle->GetKingdom().GetFunds() ); } }
 ReasonsGroupType reason; reason.first = "Transaction list"; for (const auto &tx : transactions) { auto answer = library_.transaction_validator_.validate(tx); if (answer.hasErrors()) { auto message = (boost::format("Tx %s : %s") % tx.hash().hex() % answer.reason())
 } } if!deploymentAvailableFound { pullSubscriptionCondSet.Manage(s).MarkUnknown(PullSubscriptionConditionDeployed, "DeploymentUnavailable", "The Deployment '%s' is unavailable.", d.Name) } }
 oldQuery := queryDomain queryDomain, err := updateDomainWithCName(queryDomain, nameservers) if err!= nil { return fmt.Errorf("while trying to follow CNAMEs for domain %s using nameservers %v: %w", queryDomain, nameservers, err) } if queryDomain == oldQuery { break
 @aiohttp_apispec.docs(tags=['operations'], summary='Get Links from Operation', description='Retrieves all links for a given operation_id.''Uses fields from BaseGetAllQuerySchema for parameters.''Returns links in format provided by LinkSchema.') @aiohttp_apispec.querystring_schema(BaseGetAllQuerySchema) @aiohttp_apispec.response_schema(LinkSchema(many=True, partial=True)
 stds = deltas.new_tensor(stds).unsqueeze(0) deltas = deltas.sub_(means).div_(stds) return deltas def delta2bbox(rois,
 login: 'org-login', }); this.server.createList('allowance', 2, {subscription_type: 1}); const repository = this.server.create('repository', { name:'repository-name', slug: 'org-login/repository-name',
 // The caller must call Close on the returned Writer, even if the write is // aborted. func (b *Bucket) NewWriter(ctx context.Context, key string, opts *WriterOptions) (_ *Writer, err error) { var dopts *driver.WriterOptions var w driver.Writer if opts == nil {
 char **jx_match_string(struct jx *j, char **v) { if (jx_istype(j, JX_STRING)) { if (v) { v[0] = strdup(j->u.string_value); } return &v[0]; } else {
 // TODO remove this once a version containing this code has // been deployed to archival nodes if len(initBlocks) > 0 && initBlocks[0].Round() == basics.Round(0) { blockReplaceIfExists(tx, initBlocks[0], agreement.Certificate{}) } }
 } reqs := task.getAllSSMSecretRequirements() assert.Equal(t, secret1, reqs[regionWest][0]) assert.Equal(t, secret3, reqs[regionEast][0]) }
 return opts, nil } // NewBackendServiceDescriberWithResources instantiates a backend service describer with stack resources. func NewBackendServiceDescriberWithResources(app, svc string) (*BackendServiceDescriber, error) { d, err := NewBackendServiceDescriber(app, svc) if err!= nil {
 struct LoopSoundTask { LoopSoundTask( std::vector<int> vols_, const int soundVolume_ ) : vols( vols_ ), soundVolume( soundVolume_ ) {}
 result, err := historicalNode.GetTransactionResult(ctx, &accessproto.GetTransactionRequest{Id: txID[:]}) if err == nil { // Found on a historical node. Report return access.MessageToTransactionResult(result), nil case xdrerrors.ErrNotFound: // Otherwise, if not found, just continue }
 var blockCmd = &cobra.Command{ Use:   "dumpblock <round>", Short: "Dump block from the ledger.", Long:  "Dump block from the ledger, in msgpack or json format.", Args:  cobra.ExactArgs(1), Run: func(cmd *cobra.Command, args []string) { dataDir := ensureSingleDataDir() algodClient := ensureAlgodClient(dataDir) blocknum, err :
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4475-SEA 1645545907 4145694727</p> <hr> <p>Varnish cache server</p> </body>
 let platformInfo = {}; chrome.runtime.getPlatformInfo(function(info) { if (watchPromise.isRejected(chrome.runtime.lastError)) { catcher.unhandled(chrome.runtime.lastError, {context: "getPlatformInfo"}); } platformInfo = info; });
 private boolean watchingParent = false; private String asyncLock; protected ZooLock(ZooCache zc, ZooReaderWriter zrw, String path) { getLockDataZooCache = zc; this.path = path;
 yield ("* With this command, +;;+ is interpreted literally " "instead of splitting off a second command.") if cmd.no_replace_variables: yield r"* This command does not replace variables like \{url\}." def _get_action_metavar(action, nargs=1):
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4477-SEA 1645549760 1449265140</p> <hr> <p>Varnish cache server</p> </body>
 return; // helpers for combining building effects into a single line std::vector<std::string> combined_names; float combined_change = 0.0f; // add label-value pairs for each alteration recorded for this meter for (auto it = maybe_info_vec->begin(); it!= maybe_info_vec->end(); ++it) { auto info = *it;
 __all__ = ['gsddmm', 'copy_u', 'copy_v', 'copy_e'] def reshape_lhs(lhs_data): r""" Reshape the dimension of lhs data Parameters ----------
 from plenum.server.request_handlers.handler_interfaces.read_request_handler import ReadRequestHandler from indy_common.authorize.auth_constraints import ConstraintCreator from indy_node.server.pool_config import PoolConfig from indy_common.authorize.auth_actions import AuthActionEdit, EDIT_PREFIX, AuthActionAdd from indy_common.authorize.auth_request_validator import WriteRequestValidator from indy_common.constants import POOL_CONFIG, CONFIG_LEDGER_ID, ACTION, AUTH_RULE, CONSTRAINT
 for _, h := range hosts { if h == defaultSNI { hosts = append(hosts, "") break } } // TODO: are matchers needed if every hostname of the resulting config is matched? if len(hosts) > 0 {
 t.Fatal(err) } if err = SolveAndUpdate(chain, block); err == nil { t.Fatalf("invalid coinbase tx validate success") } }
 public function up(Schema $schema) { $entryTable = $schema->getTable($this->getTable('entry')); $entryTable->addIndex(['created_at' => 'DESC']); } /**
 var Point = require('./Point'), Key = require('./Key'), sha256 = require('../util').sha256, twoSha256 = require('../util').twoSha256;
 auto start_time = std::chrono::steady_clock::now(); // Now generate new data structure feature4, and copy data to the device int nthreads = std::min(omp_get_max_threads(), (int)dense_feature_map_.size() / dword_features_); std::vector<Feature4*> host4_vecs(nthreads); std::vector<boost::compute::buffer> host4_bufs(nthreads); std::vector<
 import ( context "context" "database/sql" "net/http" "strconv" "sync"
 // exchange headers if err := handleHeaders(ss.Headler, stream); err!= nil { s.logger.Debugf("handle protocol %s/%s: stream %s: peer %s: handle headers: %v", p.Name, p.Version, ss.Name, overlay, err) if err := stream.Close(); err!= nil { s.logger.Debugf("handle protocol %s/%s: stream %s: peer %s: handle headers clo
 private string DebuggerDisplay { get { return String.Format("{0} {1}", this.Method, this.Url); } } } }
 package com.hazelcast.jet.impl.serialization; import com.hazelcast.internal.nio.BufferObjectDataInput; import com.hazelcast.internal.serialization.impl.AbstractSerializationService; import com.hazelcast.internal.serialization.spi.DataInputView; public interface DataInput {
 return proposalValue{ OriginalPeriod:   p.OriginalPeriod, OriginalProposer: p.OriginalProposer, BlockDigest:      p.Compressed().Digest(), EncodingDigest:   crypto.HashObj(p.Compression), } }
 func (s *server) bytesUploadHandler(w http.ResponseWriter, r *http.Request) { ctx := r.Context() address, err := s.splitUpload(ctx, r.Body, r.ContentLength, isEncrypt(r)) if err!= nil { s.Logger.Debugf("bytes upload: %v", err) jsonhttp.InternalServerError(w, nil)
 $username = "$target.$username"; } $card = $user->getLibraryCard($id == 'NEW'? null : $id); if ($card->cat_username!== $username || trim($password)) { // Connect to the ILS and check that the credentials are correct: $loginMethod = $this->getILSLoginMethod($target);
 "https://github.com/algorandfoundation/specs/tree/5615adc36bad610c7f165fa2967f4ecfa75125f0", ) // ConsensusV18 adds the ability to issue a transaction that marks an account non-participating // and to issue a transaction that marks an account as participating again. const ConsensusV18 = ConsensusVersion( "---->!!!TODO!!!<----", )
 func (s *Suite) assertNodeApprovedAndProposed(ctx context.Context, env templates.Environment, info *StakedNodeOperationInfo) { // ensure node ID in approved list approvedNodes := s.ExecuteReadApprovedNodesScript(ctx, env) require.Containsf(s.T(), approvedNodes.(cadence.Array).Values, cadence.String(info.NodeID.String()), "expected new node to be in approved nodes list: %x", info.Node
 <div class="col-md-11 col-md-offset-1"> <!-- Alerts Enabled --> <div class="form-group {{ $errors->has('alerts_enabled')? 'error' : '' }}"> <div class="col-md-3"> {{ Form::label('alerts_enabled', trans('admin/settings/general.alerts_enabled')) }} </div>
 if (WriteParameters(writer, true)) { SendAnimationParametersMessage(writer.ToArray()); } } }
 from.test_mixins import RPNTestMixin from.. import builder from..registry import DETECTORS from mmdet.core import build_assigner, build_sampler, bbox2result, bbox2roi, merge_aug_masks @DETECTORS.register_module
 "away" => $away, "profile_fields" => $mybb->get_input('profile_fields', MyBB::INPUT_ARRAY) )); foreach(array('icq','skype', 'google') as $cfield) { $csetting = 'allow'.$cfield.'field'; if($mybb->settings[$csetting] == '')
 //go:build linux || darwin // +build linux package disk
 const { specialFeatures } = targets.of('@magento/pwa-buildpack'); specialFeatures.tap(flags => { /** * We need to activate esModules, cssModules and GQL Queries to allow build pack to load our extension * {@link https://magento.github.io/pwa-studio/pwa-buildpack/reference/configure-webpack/#special-flags}. */ flags[targets.name] = {
 # skip the image if there is no valid gt bbox if len(gt_bboxes) == 0 and self.skip_img_without_anno: warnings.warn('Skip the image "{}" that has no valid gt bbox'.format(os.path.basename(fname))) return None # extra augmentation
 } if o.familyName!= "" { if err := validateTaskFamilyName(o.familyName, true); err!= nil { return err } }
 ns_sol.reset(new MultiFab(ba, dm, ncomp, ng, MFInfo(), *(ns_linop->Factory(0,0)))); ng = 0; if (cf_strategy == CFStrategy::ghostnodes) ng = nghost; ns_rhs.reset(new MultiFab(ba, dm, ncomp, ng, MFInfo(), *(ns_linop->Factory(0,0)))); ns_so
 try { double progress = entries.getValue().getBytesCopied() / walBlockSize; // to be sure progress does not exceed 100% status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn("Error getting bytes read"); }
 endif; function rocket_cache_sccss( $bustingpath ) { $sccss = rocket_sccss_get_paths(); if (! file_exists( $sccss['filepath'] ) ) { rocket_sccss_create_cache_file( $sccss['bustingpath'], $sccss['filepath'] );
 // The DDL target table, present only for CREATE/DROP FUNCTION/PROCEDURE queries. DDLTargetRoutine *Routine // ReservationUsage information. ReservationUsage []*ReservationUsage }
 /** Cache of pre-generated handlers by provider and kind of metadata. * For the cache to be effective, providers should implement identity * correctly. */ private static final LoadingCache<Key, MetadataHandler<?>> HANDLERS = maxSize(CacheBuilder.newBuilder(), CalciteSystemProperty.METADATA_HANDLER_CACHE_MAXIMUM_SIZE.value())
 @Test public void shouldHandleTransformOnNone() { // TODO: What is the expected behavior when transform is called on None given return type may or may not be an Option? // Calling None.get() will throw NoSuchElementException // Should it be left to the caller to decide how to handle a value of None in their transform function? } // -- iterator
 // When rules.SuppressNormalHostPolicy is true, we also skip normal host policy; this is // the case when we're building the policy program for workload -> host and // DefaultEndpointToHostAction is ACCEPT or DROP; or for host -> workload. if rules.SuppressNormalHostPolicy { p.writeJumpIfToOrFromHost("to_or_from_host") } else { p.writeJumpIfToOrFromHost("to_or_from_host")
 @pytest.mark.parametrize('number_of_eth_accounts', [0]) def test_data_import_shapeshift_trades(rotkehlchen_api_server): """Test that the data import endpoint works successfully for shapeshift trades""" rotki = rotkehlchen_api_server.rest_api.rotkehlchen dir_path = Path(__file__).resolve().parent.parent filepath = dir_path / 'data' /'shapeshift-trade-history.csv'
 package com.hazelcast.jet.function; import java.util.function.Predicate; import static java.util.Objects.requireNonNull; /** * Represents a predicate which accepts three arguments. This * is the three-arity specialization of {@link Predicate}.
 def test_get_wrong_n_atoms(self): with pytest.raises(ValueError, match=r"Supplied n_atoms *"): mda.Universe(TRZ, n_atoms=8080) class TestTRZWriter(RefTRZ):
 // goto main menu int rs = ( test? Game::TESTING : Game::MAINMENU ); Video::ShowVideo( Settings::GetLastFile( "data", "H2XINTRO.SMK" ), true ); while ( rs!= Game::QUITGAME ) { switch ( rs ) {
 define('IN_MYBB', 1); define('THIS_SCRIPT','report.php'); $templatelist ='report,report_thanks,report_error,report_reasons,report_error_nomodal'; require_once './global.php'; require_once MYBB_ROOT. 'inc/functions_modcp.php';
 data['score'] = float(bboxes[i][4]) data['category_id'] = 1 json_results.append(data) return json_results def det2json(dataset, results):
 // Prepend parent group pattern(s) if ($this->routeGroups) { if ($pattern === '/') { $pattern = ''; } $pattern = $this->processGroups(). $pattern; }
 it "renders the body with correct text with partner information" do expect(subject.body.encoded).to include("<h1> You've received a request to approve the account for #{partner.name}. </h1>") expect(subject.body.encoded).to include("Review This Organization") expect(subject.body.encoded).to include("#{organization.short_name}/partners/#{partner.id}#partner-information\">Review This Organization</a>") end
 self.errorOnMove = function(error) { if (error === 'auto-commit-forbidden') { apos.notify('Since you have activated the autoCommitPageMoves option, you can move pages only if you can commit them too.', { type: 'error' }); } else { apos.notify('You may only move pages you are allowed to publish. If you move a page to a new parent, you must be allowed to edit the 
 const defaultShallowBinPeers = 2 var ( logMore = false // enable this to get more logging )
 //                           `Notifications` collection. //       ipNetwork: An IpNetwork capability that is implemented by the frontend. Eventually, this //                  will be moved out of the frontend and into the backend, but we'll migrate the //                  database when that happens. //       ipInterface: Ditto IpNetwork, except it's an IpInterface. //   parentToken: If present, then this token represents exactly the capability represented by //              the 
 providerConfig.AzureDNS.HostedZoneName, s.DNS01Nameservers, canUseAmbientCredentials, providerConfig.AzureDNS.ManagedIdentity, ) if err!= nil { return nil, nil, fmt.Errorf("error instantiating azuredns challenge solver: %s", err)
 next(); }); app.post("/error", function (req, res) { let bodyObj = req.body; if (typeof bodyObj!== "object") {
 Fee *big.Int `json:"fee"` // Beneficiary: Provider channelID by default, optionally set during Identity registration. // Can be updated later through transactor. We can check it's value directly from SC. // It's a cash out address. Beneficiary string `json:"beneficiary"` // Signature from fields above Signature string `json:"signature"`
 // ProcessRequest is called when a external client will connect through // the websocket-port to this service. It returns a message that will be // sent back to the client. ProcessClientRequest(handler string, msg []byte) (reply []byte, errCode int) // Processor makes a Service being able to handle any kind of packets // directly from the network. It is used for inter service communications, // which are mostly single packets with no or little inter
 $parsed_url = get_rocket_parse_url( $url ); if ( $url_no_dots ) { $parsed_url['host'] = str_replace( '.', '_', $parsed_url['host'] ); } $root = $cache_path. $parsed_url['host']. $parsed_url['path'];
 managed by Waypoint. When the '-refresh' flag is included, this command will attempt to regenerate every requested application's status report on-demand for both local and remote data sourced projects. ` + c.Flags().Help())
 loadingSceneAsync = SceneManager.LoadSceneAsync(newSceneName); // ServerChangeScene can be called when stopping the server // when this happens the server is not active so does not need to tell clients about the change if (NetworkServer.active) {
 if (checkInit) { DbException.throwInternalError(); } Collections.sort(filters, TableFilter.ORDER_IN_LIST_COMPARATOR); expandColumnList(); visibleColumnCount = expressions.size(); ArrayList<String> expressionSQL;
 LogConfig   *LogConfigOpts Autoscaling *AutoscalingOpts Storage     *StorageOpts Network     *NetworkOpts // Additional options for service templates. HealthCheck         *ecs.HealthCheck
 projects:{count:5}, members:{count:100}, documents:{count:40}}) end it 'displays a tab view' do
 } if (!confirm( TAPi18n.__("grains.grainlist.sandstormGrainListPage.transfers.warningGiving", { destination: destination }) )) { return; }
 builder.Finish(example.MonsterPack(builder, monster)) monster2 := example.GetRootAsMonster(builder.FinishedBytes(), 0).UnPack() if!reflect.DeepEqual(monster, monster2) { fail("monsters not equal") }  buf := new(bytes.Buffer) example.GetRootAsMonster(buf, 0).UnPack() monster3 := example.GetRootAsMonster(builder.FinishedBytes(), 0).UnPack() if!reflec
 **Default Window Length:** 1 """ window_length = 1 def _validate(self): super(PeerCount, self)._validate()
 class ClientAuthRulesOperation(MessageValidator): schema = ( (TXN_TYPE, ConstantField(AUTH_RULES)), (RULES, IterableField( AuthRuleField(min_length=1), )) )
 private static final String TAG_NOTIFICATION_WORKER_FRAGMENT = "NotificationWorkerFragment"; private NotificationWorkerFragment mNotificationWorkerFragment; private boolean mIsRestoredToTop = false; @Override protected void onCreate(Bundle savedInstanceState) {
 from say import say # Tests adapted from `problem-specifications//canonical-data.json` class SayTest(unittest.TestCase): def test_zero(self):
 die(); } if (! isset( $_FILES['import'] ) || empty( $_FILES['import']['size'] ) ) { add_settings_error( 'general','settings_update_error', __( 'Settings import failed: no file uploaded.', 'rocket' ), 'error' ); wp_safe_redirect( esc_url_raw( wp_get_referer() ) );
 "fmt" "github.com/aws/aws-sdk-go/aws" "github.com/aws/aws-sdk-go/service/ssm" "github.com/pkg/errors" ) // GetSecretFromSSM makes the api call to the AWS SSM parameter store to // retrieve secrets value in batches func GetSecretsFromSSM(names []string, client ssmiface.SSMAPI) (map[string]string, error) { var secretNames []*string for _, name
 import ( "bytes" "errors" "testing" "encoding/json"
 *         same UUID is found in the settings file.<br> *         <strong>Note:</strong> This can have side-effects we currently don't handle, e.g. *         changing the account type from IMAP to POP3. So don't use this for now! * * @return An {@link ImportResults} instance containing information about errors and *         successfully imported accounts. *
 * These should be close to the expected value and variance of the given distribution to pass. * @param dist The distribution to test */ void sample_test(const probability::geometric_dist::geometric_distribution& dist) { uint32_t n_tries = 1000000; std::vector<float> tries; tries.resize(n_tries);
 CONTEXT_SIZE_LIMIT = 131072 JSON_LD_LIMIT = CONTEXT_SIZE_LIMIT ENABLE_RICH_SCHEMAS = False
 return NewBranchItr(sqlCtx, bt.ddb) } // BranchItr is a sql.RowItr implementation which iterates over each commit as if it's a row in the table. type BranchItr struct { branches []string
 m_aStdColNameOrder->Insert(_("Progress"), COLUMN_PROGRESS); m_aStdColNameOrder->Insert(_("Status"), COLUMN_STATUS); m_aStdColNameOrder->Insert(_("Elapsed"), COLUMN_CPUTIME); m_aStdColNameOrder->Insert(_("Remaining"), COLUMN_TOCOMPLETION); m_aStdColNameOrder->Insert(_("Estimated Completion"), COLUMN_ESTIMATEDCOMPLETION); // m_aStdColNameOrder->Inse
 for(WriterProxyData* wdatait : (*pit)->m_writers) { bool valid = validMatching(&rdata, wdatait); GUID_t reader_guid = R->getGuid(); const GUID_t& writer_guid = wdatait->guid(); if(valid) {
 //check that the cleanup functions are called on each loop exit for (int i = 0; i < 10; ++i) { DEFER_CLEANUP(struct foo x = {0}, foo_free); EXPECT_EQUAL(foo_cleanup_calls, expected_cleanup_count); expected_cleanup_count++;
 + _base_doc[_base_doc.find('verbose :'):]) # DaskLGBMClassifier support for callbacks and init_model is not tested fit.__doc__ = f""" {_base_doc[:_base_doc.find('callbacks :')]}**kwargs Other parameters passed through to ``LGBMClassifier.fit()`` """ def predict(self, X: _DaskMatrixLike, **kwargs: Any) -> dask_Array: """Docstring is
 return $this->fromPath($identifier); } throw new \TypeError(sprintf( '%s(): Argument #1 ($identifier) must be of type FilesModel|ImageInterface|string|int|null, "%s" given', ___METHOD__, \is_object($identifier)? \get_class($identifier) : \gettype($identifier) )); } /**
 l2Fee := new(big.Int).Mul(l2GasPrice, roundedL2GasLimit) sum := new(big.Int).Add(l1Fee, l2Fee) scaled := new(big.Int).Div(sum, bigFeeScalar) rounded := Ceilmod(scaled, BigTenThousand) roundedScaledL2GasLimit := new(big.Int).Div(roundedL2GasLimit, BigTenThousand) result := new(big
 """Scanner for the GroupsSettings rules engine.""" from google.cloud.forseti.common.gcp_type import groups_settings from google.cloud.forseti.common.util import json_validator from google.cloud.forseti.common.util import logger from google.cloud.forseti.scanner.audit import groups_settings_rules_engine
 namespace WP_Rocket\Engine\Optimization\RUCSS\Warmup; use WP_Rocket\Engine\Optimization\RUCSS\Database\Queries\ResourcesQuery; use WP_Rocket\Engine\Optimization\RUCSS\Database\Row\ResourceRow; class WarmupProcess extends WP_Rocket_WP_Background_Process {
 TabletIteratorEnvironment iterEnv; if (env.getIteratorScope() == IteratorScope.majc) iterEnv = new TabletIteratorEnvironment(IteratorScope.majc,!propogateDeletes, acuTableConf, majorCompactionReason); else if (env.getIteratorScope() == IteratorScope.minc) iterEnv = new TabletIteratorEnvironment(IteratorScope.minc, acuTableConf, majorCompactionReason); else throw new IllegalArgumentException();
 if absPathErr!= nil { reportErrorf("Can't convert data directory's path to absolute, %v\n", dataDir) } algodConfig, err := config.LoadConfigFromDisk(absolutePath) if err!= nil { if!os.IsNotExist(err) { reportErrorf("Can't load algodConfig from file, %v\n", err) } } if _, err := os.Stat(absolutePath); err!= nil {
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4449-SEA 1645531101 1534794566</p> <hr> <p>Varnish cache server</p> </body>
 @classmethod def _section(cls, opts): """Get logging settings from config file section "logging".""" try: logging_config = cls.config.options('logging') except (NoOptionError, NoSectionError, AttributeError): return False logging.config.dictConfig(logging_config) return True
 class DistributionPdf include Prawn::View include ItemsHelper def initialize(organization, distribution) @distribution = distribution
 // PendingRewards computes the amount of rewards (in microalgos) that // have yet to be added to the account balance. func PendingRewards(ot *OverflowTracker, microAlgos MicroAlgos, rewardsBase uint64, rewardsLevel uint64, proto config.ConsensusParams) MicroAlgos { rewardsUnits := microAlgos.RewardUnits(proto) rewardsDelta := ot.Sub(rewardsLevel, rewardsBase) return
 return opts, done } // IsDockerAvailable returns true when either: // 1) Not on Travis. // 2) On Travis Linux environment, where Docker is available. func IsDockerAvailable() bool { s := os.Getenv("TRAVIS_OS_NAME") return s == "" || s == "linux" }
 content_id='Scanner Violations' ) scanner_subject = '{} violation(s) found - {}'.format( total_violations, email_description) self.email_util.send( email_sender=email_sender, email_recipient=email_recipient,
 } func (r *Resource) SchemaURL() string { return r.schemaURL }
 { if (!client->fsaccess->mkdirlocal(&localpath)) { LOG_error << "Unable to create folder: " << *path; recursive--;
 } // connQueue manages the message queue of a LocalConn. // Messages are pushed and retrieved in a FIFO queue. // All operations are thread-safe. // The messages are marshalled and stored in the queue as a slice of bytes. type connQueue struct {
 */ public static Address recoverProposerAddress( final BlockHeader header, final CliqueExtraData cliqueExtraData) { if (header.getNumber() == BlockHeader.GENESIS_BLOCK_NUMBER) { return ADDRESS_ZERO; } if (!cliqueExtraData.getProposerSeal().isPresent()) { throw new IllegalArgumentException(
 #  Slot descriptor for the table of attribute get & set methods. def slot_code(self, scope): if scope.lookup_here("__dict__"): return scope.getset_table_cname else: return "0"
 cmd := &cobra.Command{ Hidden: true, // TODO: remove when ready for production! Use:    "status", Short:  "Shows the status of a pipeline.", Long:   "Shows the status of each stage of your pipeline.", Example: ` Shows status of the pipeline "pipeline-myapp-myrepo".
 if (isset($GLOBALS['TL_LANG'][$this->strTable][$k])) { $v['label'] = $GLOBALS['TL_LANG'][$this->strTable][$k]; } elseif (isset($GLOBALS['TL_LANG']['DCA'][$k])) { $v['label'] = $GLOBALS['TL_LANG']['DCA'][$k]; } elseif (isset($GLOBALS['TL_LANG'][$k])) { $v['label'] = $G
 def _count_diff_NG86(codon1, codon2, codon_table=default_codon_table): """Count differences between two codons, three-letter string. The function will take multiple pathways from codon1 to codon2 into account.
 Slice object to check. sequence_len : int, optional Length of the sequence to index with the passed `slc`. If not specified the function won't consider `slc` to be a full-grab if its ``.stop`` attribute is equal or greater than the sequence length. If specified the function won't consider `slc` to be a full-grab if its ``.stop`` attribute is equal or greater than `sequence_len`. 
 def __init__(self, graph_name, port): self._graph_name = graph_name self._pid = os.getpid() self.proxy = xmlrpc.client.ServerProxy("http://localhost:" + str(port) + "/") self._worker_id, self._num_workers = self.proxy.register(graph_name) if self._worker_id < 0: raise Exception('fail to get graph'+ graph_name +'from the graph store')
 @Override public ExpireSnapshotsActionResult execute() { SparkContext context = spark().sparkContext(); JobGroupInfo info = withJobGroupInfo("EXPIRE", "EXPIRE-SNAPSHOTS"); return withJobGroupInfo(info, () -> {
 dist.broadcast(module.running_var, 0) dist.broadcast(module.running_mean, 0) # NOTE: if `by_epoch` is False, the evaluation flag should be True, #       otherwise the `running_mean` and `running_var` will not be updated. if not self.by_epoch or not self.evaluation_flag(runner): return
 } $num_activated = $num_deleted = 0; $users_to_delete = array(); if($mybb->input['delete']) // Delete selected user(s) { require_once MYBB_ROOT.'inc/datahandlers/user.php';
 Sensei()->settings->set('my_course_page', $new_my_course_page_id ); // Course Completion Page. $new_course_completion_page_id = $this->create_page( esc_sql( _x( 'course-completed', 'page_slug','sensei-lms' ) ), __( 'Course Completed','sensei-lms' ) ); Sensei()->settings->set( 'course_completion_page', $new_course_completion_p
 return cs; } public boolean isSortAudioTracksByAlbumPosition() { return getBoolean(KEY_SORT_AUDIO_TRACKS_BY_ALBUM_POSITION, true); } public boolean isDynamicPls() {
 if (not doc.HasMember("prev_hash")) { return nonstd::nullopt; } if (!doc["created_ts"].IsNumber()) { return nonstd::nullopt; }  std::string prev_hash_str(doc["prev_hash"].GetString(), doc["prev_hash"].GetStringLength()); auto prev_hash_bytes = hex2bytes(prev_hash_str); std::copy(prev_hash_bytes.begin(), prev_hash_bytes.end(), block.prev_hash.begin());
 viewBinding.subscribeButton.setEnabled(true); viewBinding.subscribeButton.setText(R.string.subscribe_label); if (UserPreferences.isEnableAutodownload()) { viewBinding.autoDownloadCheckBox.setChecked(true); viewBinding.autoDownloadCheckBox.setVisibility(View.VISIBLE); }
 default: return errors.New("unsupported packet-in: should be a valid IPv4 or IPv6 packet") } val, ok := opsv1alpha1.ProtocolsToString[int32(prot)] if!ok { val = "UnsupportProtocol" } ob.protocolStr = val return nil }
 if (result.resourceExtensions.length) { result.resourceExtensions = _.filter(result.resourceExtensions, function(ext) { return utils.ignoreCaseEquals(publisher, ext.publisher); }); } var version = _.max(result.resourceExtensions, function(stooge){return stooge.version;}).version;
 # SPDX - License - Identifier: Apache - 2.0 # Purpose # This code example demonstrates how to upload an encrypted object to an Amazon Simple Storage Service (Amazon S3) bucket. # snippet-start:[s3.ruby.s3_add_cskms_encrypt_item]
 // void show(int* arr, const int size); /** * @brief Function to merge two sub-arrays. * @details merge() function is called from mergeSort() to merge the array after it split for sorting * by the mergeSort() funtion. * * In this case the merge fuction will also count and return
 #include "lbann/utils/summary.hpp" #include <lbann/utils/image.hpp> namespace lbann {
 * Gets the checkbox state for a block * @param {string} blockId The ID of the block in question. * @return {boolean} Whether the block is checked. * @private */ Blockly.VerticalFlyout.getCheckboxState = function(/* blockId */) { return false;
 assertTrue(scopes.contains(IteratorScope.majc)); Map<String,String> config = tops.getConfiguration(MetadataTable.NAME); Map<String,String> properties = Map.copyOf(config); for (IteratorScope scope : scopes) { String key = Property.TABLE_ITERATOR_PREFIX.getKey() + scope.name + "."
 class UserManager { /** * @var \Doctrine\ORM\EntityManagerInterface */ protected $em; /** * @var string */ private $class; /** @var string */
 "use strict"; const { promisify } = require("./utils.js"); const { realpath } = require("fs"); const instanceMethods = { logIn(credentials) {
 Atlas of all connected graphs with up to 6 nodes. This example uses Graphviz via PyGraphviz. It should show 142 graphs (oeis.org/A001349).  To show all of the graphs in the atlas, set `n` to 6. """ import random
 return expression.Expression.AcceptVisitor(this, context); } public override SearchParameterQueryGeneratorContext VisitSortParameter(SortParameterExpression expression, SearchParameterQueryGeneratorContext context) { var searchParamIdColumn = VLatest.SearchParam.SearchParamId; short searchParamId = context.Model.GetSearchParamId(expression.Parameter.Url); context.StringBuilder.Append(searchParamIdColumn, context.TableAlias)
 error =0; //constraints are treated 3x3 (friction contact) for (it_c = contact_sequence.begin(); it_c!= contact_sequence.end() ; ++it_c ) { int constraint = *it_c; c1 = constraint/3;
 augment images. Examples: >>> replace = (104, 116, 124) >>> policies = [ >>>     [
 script.expects(:run_stage).with(:before_deploy) script.expects(:if).with('($TRAVIS_PULL_REQUEST = false) && ($TRAVIS_BRANCH = master) && ($ENV_2 = 1)').yields(script).once script.expects(:else).yields(script).once script.expects(:if).with('! $TRAVIS_PULL_REQUEST = false').yields(script).once script.expects
 // log to standard Linux log location if (Platform.isLinux()) if (checkCreateLogFileFolder(DEFAULT_LOG_FOLDER_LINUX)) return defaultLogFileDir; // log to profile directory if it is writable.
 return; } for (int i = 0; i < MAX_APPEARANCE_EFFECTS; i++) { Message(Chat::Red, "ID: %i :: App Effect ID %i :: Slot %i", i, appearance_effects_id[i], appearance_effects_slot[i]); } }
 if double_stranded: if seq_type == "protein": raise ValueError("Double-stranded proteins await their discovery") elif seq_type == "DNA": seq = complement(seq, inplace=False)  # TODO: remove inplace=False elif seq_type == "RNA":
 /// <summary> /// Initializes static members of the LogManager class. /// </summary> static LogFactory() { RegisterEvents(DefaultAppEnvironment);
 import ws.com.google.android.mms.pdu.PduPart; public class AttachmentDownloadJob extends MasterSecretJob implements InjectableType {  private static final String TAG = AttachmentDownloadJob.class.getSimpleName(); private static final long serialVersionUID = - 1234567890L; @Inject transient TextSecureMessageReceiver messageReceiver;
 * Licensed under the MIT License. See LICENSE file in the project root for license information. */ #include <LightGBM/config.h> #include <LightGBM/utils/common.h> #include <LightGBM/utils/log.h>
 shared_model::crypto::Keypair keypair = shared_model::crypto::DefaultCryptoAlgorithmType::generateKeypair(); std::vector<shared_model::interface::types::PubkeyType> signatories = { keypair.publicKey()}; };
 const std::string DISCOVERY_QUESTION = "Yo, can I play Free-O here, dog?"; const std::string DISCOVERY_ANSWER = "Word!"; #ifdef FREEORION_OPENBSD const int SOCKET_LINGER_TIME = 1 << (sizeof(unsigned short) * 2 - 1); #else const int SOCKET_LINGER_TIME = 1 << (sizeof(unsigned short) * 8 - 1);
 this.bootNodes = ethNetworkConfig.bootNodes; } public Builder setGenesisConfig(final String genesisConfig) { this.genesisConfig = genesisConfig; return this;
 /** * Purge the search cache * * @deprecated Deprecated since Contao 4.12, to be removed in Contao 5.0. */ public function purgeSearchCache() {
 import graphql.schema.DataFetcher; import graphql.schema.DataFetchingEnvironment; import org.openqa.selenium.grid.distributor.Distributor; import org.openqa.selenium.grid.sessionmap.SessionMap; import org.openqa.selenium.internal.Require; import java.net.URI;
 The :class:`~MDAnalysis.core.groups.AtomGroup` or :class:`~MDAnalysis.core.universe.Universe` to write. """ self._update_frame(obj) self._write_pdb_header()
 return rel; } if (rowType.getFieldCount()!= castRowType.getFieldCount()) { throw new IllegalArgumentException("Field counts are not equal: " + "rowType [" + rowType + "] castRowType [" + castRowType + "]"); } final RexBuilder rexBuilder = rel.getCluster().getRexBuilder();
 p = p[:1] + struct.pack(">B", res[1]) + p[2:] if res[0]!= 0: p = p[:-res[0]] return p + pay
 * @returns index of the minimum element */ template <typename T> uint64_t findMinIndex(const std::vector<T> &in_arr, uint64_t current_position = 0) { if (current_position + 1 == in_arr.size()) { return current_position; }
 #   specs, but does not add any additional documentation.  We use this #   in rspec to define `it_should_behave_like` (for backward #   compatibility), but we also add docs for that method. def self.alias_it_behaves_like_to(name, *args, &block) (class << self; self; end).define_nested_shared_group_method(name, *args, &block) end # Works like `ali
 if (pfrom->nPingUsecTime < ACCEPTABLE_PING_USEC) return true; // TODO: this needs to be calculated periodically (rarely) and outside of any locks // Calculate average ping time of all nodes uint16_t nValidNodes = 0; std::vector<uint64_t> vPingTimes;
 "github.com/go-kit/kit/endpoint" ) type Decoder func(ctx context.Context, r *http.Request) (interface{}, error)  func makeDecoderForType(v interface{}) Decoder { t := reflect.TypeOf(v) return func(ctx context.Context, r *http.Request) (interface{}, error) {
 #define PROTO(T)                        \ template class glorot_initializer<T>; \ template class he_initializer<T>;     \ template class lecun_initializer<T> #define LBANN_INSTANTIATE_CPU_HALF #include "lbann/macros/instantiate.hpp"
 "github.com/onflow/flow-go/crypto" "github.com/onflow/flow-go/model/flow" "github.com/onflow/flow-go/module" "github.com/onflow/flow-go/state" ) // ControllerFactory is a factory object that creates new Controllers with the
 if (IsReturnableEntity(se)) { AddEntityToProjection(queryReturnTypeList.Count + j, se); } else { _constructorNode.ConstructorArgumentTypeList.Add(se.Type); } } queryReturnTypeList.AddRange(_constructorNode.ConstructorArgumentTypeList); } else {
 if columns is None: columns = {} for name, term in columns.items(): if not isinstance(term, ComputableTerm): raise TypeError( '"{term}" is not a valid pipeline column. Did you mean''to add ".latest" for column "{name}"?'.format( term=term, name=name ) ) self._columns = columns self._screen = screen
 LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE); if (UserPreferences.getFeedFilter()!= UserPreferences.FEED_FILTER_NONE) { convertView = inflater.inflate(R.layout.nav_section_filter_divider, parent, false); convertView.setEnabled(true); } else { convertView = inflater.inflate(R.layout.nav_section_item, parent, false); convertView.setEnabled(false);
 TableParams<T> clientProperties(Properties clientProperties); /** * Set path to location containing accumulo-client.properties file. This setting is more * secure than {@link #clientProperties(Properties)} * * @param clientPropsPath *          path to accumulo-client.properties file */ TableParams<T> clientPropertiesPath(String clientPropsPath); }
 signer := signerFactory(consumerID) statsSaver := bytescount.NewSessionStatsSaver(statsKeeper) clientCountry, err := detectCountry(ipResolver, locationDetector) if err!= nil { return errors.Wrap(err, "error detecting client country") } statsSender := bytescount.NewSessionStatsSender(mysteriumAPIClient, vpnSession.ID, providerID, signer, clientCountry) asyncStatsSender := func(stats bytescount.SessionSt
 ],'reference'               => &$GLOBALS['TL_LANG']['MSC']['disposition'], 'eval'                    => ['tl_class' => 'w50'],'sql'                     => "varchar(32) NOT NULL default ''" ], 'embed' => array (
 """ universe = MDAnalysis.Universe(topology_path) for element in elements: assert element in universe._topology[topology_section], ("Bond type {} not found".format(element)) def test_all_bonds():
 import com.hazelcast.nio.IOUtil; import javax.annotation.Nonnull; import java.util.Map.Entry; import static com.hazelcast.jet.Util.entry;
 struct _RpmostreedTransactionPrivate { GDBusMethodInvocation *invocation; gboolean done; GCancellable *cancellable; /* For the duration of the transaction, we hold a ref to a new
 template <typename Dtype> void BNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) { top[0]->Reshape(bottom[0]->num(), bottom[0]->channels(), bottom[0]->height(), bottom[0]->width());
 } if ua.Lifecycle!= nil { rb.Lifecycle = toRawLifecycle(*ua.Lifecycle) } if ua.Logging!= nil { if *ua.Logging == (BucketLogging{}) {
 $parameters['uid'] = $memprofile['uid']; } } if($parameters['uid'] > 0) { $uid_list[$parameters['uid']] = $parameters['uid']; }
 command.setOldColumnName(columnName); command.setNewColumnName(newColumnName); return command; } else if (readIf("CONVERT") && database.getMode().getEnum() == ModeEnum.MySQL) { readIf("TO"); readIf("CHARACTER"); readIf(SET);
 // Reset throughput measurement markers. if len(s.q) > 0 { s.throughputStart = now // Otherwise, will get set when we receive some messages. } else { s.throughputEnd = zeroTime s.throughputCount = 0 // Using Ceil guarantees at least one message.
 class _KerasModel(model_lib.Model): """Internal wrapper class for tf.keras.Model objects.""" def __init__(self, inner_model, dummy_batch, loss_fns, loss_weights=None, metrics=None): # NOTE: sub-classed `tf.keras.Model`s do not have fully initialized # variables until they are called on input. We forced that here.
.WithHeader("X-Custom", "SomeValue"); }; Get["/user/{name}"] = parameters => { return (string)parameters.name;
 $js_files_in_head = ''; $header_files     = array(); $concatenate      = get_rocket_option('minify_concatenate_js', false )? true : false; if ( $rocket_js_enqueued_in_head && is_array( $rocket_js_enqueued_in_head ) ) { $js_files_in_head = implode( '|', $rocket_js_enqueued_in_head ); }
 blocksFetched := uint64(1) // we already got the first block in the previous step. var blk *bookkeeping.Block var client FetcherClient for retryCount := uint64(1); blocksFetched <= lookback; { if err := cs.ctx.Err(); err!= nil { return cs.stopOrAbort() }
 cmd *exec.Cmd } func startClient(program string, args...string) (*SFTP, error) { // Connect to a remote host and request the sftp subsystem via the'ssh' // command.  This assumes that passwordless login is correctly configured.
 def as_utf8_string(self): return bytes_literal(self.utf8encode(), 'utf8') def as_encoded_c_string_literal(self, encoding=None): if self.encoding is None: s = self.as_utf8_string() else:
 return "Failed to create VPN config." } vpnSession, err := vpn_session.NewVpnSession(config, sessionID) if err!= nil { return "Failed to create session." }
 } } } free(fontnames); free(dicts); free(strings); return( 1 ); }
 self.fc_neigh = nn.Linear(self._in_src_feats, out_feats, bias=False) if bias: self.bias = nn.parameter.Parameter(torch.zeros(out_feats)) self.reset_parameters() def reset_parameters(self):
 mode_manager = objreg.get('mode-manager', scope='window', window=self._win_id) if result.cmdline[0] not in ['leave-mode', 'command-accept','repeat-command']: last_command[mode_manager.mode] = ( self._parse_count(text)[1],
 // Authelia only supports salted SHA512 or salted argon2id method, i.e., $6$ mode or $argon2id$ mode. type PasswordHash struct { Algorithm   string Rounds      int Salt        string Hash        string Key         string Memory      int
 * System.out.println(Option.of(1).transform(f)); * * // Prints "3-transformed" * System.out.println(Option.<Integer>none().transform(f)); * }</pre> * * @param f   A transformation
 //#issue 3961, update the checkbox aria-label when it changed if(selected.length>=1){ if($('#select-all').prop("checked")){ $('#button-select-all').attr("aria-label", i18n.msg._("Selected All "+ selected.length + " items")); } else{ $('#button-select-all').attr("aria-label", i18n.msg._("Selected, "+ selected.length + " items")); } } else{
 ); const AddToCartButton = props => { const { item, urlSuffix } = props; const talonProps = useAddToCartButton({ item, urlSuffix }); const { handleAddToCart, isDisabled, isInStock } = talonProps; const { formatMessage } = useIntl();
 * * @param job *          Hadoop job instance to be configured * @param connectionInfo *          Connection information for Accumulo * @since 2.1.0 */ public static void setConnectionInfo(JobConf job, ConnectionInfo connectionInfo) throws AccumuloSecurityException { setConnectorInfo(job, connectionInfo.getPrincipal(), connectionInfo.getAuthenticationToken()); setZooKeeperInstance(job, connectionInfo.getClientConfiguration()); } /**
 using JetBrains.Annotations; #if!SILVERLIGHT namespace NLog.Targets {
 "kaitaistruct>=0.7,<0.9", "ldap3>=2.5,<2.6", "passlib>=1.6.5, <1.8", "ply>=3.6,<3.12", "pyasn1>=0.3.1,<0.5", "pyOpenSSL>=17.5,<18.1", "pypa
 FIXTURE_SCOPE(command_tests, fixture) TEST(option map handling of true/false values) { auto num = 42; opts.add("true", true); opts.add("false", false);
 @Override public String toString() { return "ParameterizedMetricKey{key=" + key.name() + ", options=" + options + '}'; }
? storeBlob.ChangellySettings : null; var changellyAmountDue = changelly!= null? (accounting.Due.ToDecimal(MoneyUnit.BTC) * (1 + (changelly.AmountMarkupPercentage/100))) : (decimal?) null; var model = new PaymentModel() {
 @Override protected void onPostExecute(Contribution contribution) { super.onPostExecute(contribution); uploadService.queue(UploadService.ACTION_UPLOAD_FILE, contribution); onComplete.onUploadStarted(contribution); } });
 upgrade_message = "{0} Agent upgrade discovered, updating to {1} -- exiting" if is_hotfix_upgrade and next_hotfix_time <= now: raise ExitException(upgrade_message.format(AgentUpgradeType.Hotfix, available_agent.name, get_version())) elif (not is_hotfix_upgrade) and next_normal_time <= now: raise ExitException(upgrade_message.format(AgentUpgradeType.Normal, available_agent.name, get_version())) # Not upgr
 @Override public void setDataSource(String streamUrl, String username, String password) { setDataSource(streamUrl); } }
 } // NewDefinitionGenDocCommand create the `vela def gen-doc` command to generate documentation of definitions func NewDefinitionGenDocCommand() *cobra.Command { cmd := &cobra.Command{ Use:   "gen-doc", Short: "Generate documentation of definitions (Only Terraform typed definitions are supported)",
 syncSignal := poolSyncSignal(ctx, targetsUpdateCh) syncPool, err := fanout.NewSyncPool(targetsConifg, buildPoolOptions(env, syncSignal)...) if err!= nil { logger.Fatalw("Failed to create fanout sync pool", zap.Error(err)) } if _, err := pool.StartSyncPool(ctx, syncPool, syncSignal); err!= nil { logger.Fatalw("Failed to start fanout sync pool"
 - Component properties - Transplant methods """ # Add the attribute to the group self._Group._add_prop(attr) try: self._classes[attr.level]._add_prop(attr)
 flagDatadir string ) // rootCmd is the root command var rootCmd = &cobra.Command{ Use:   "remove-execution-fork", Short: "remove execution fork", } func Execute() {
 using System.Threading; using System.Threading.Tasks; using MediatR; using Microsoft.Health.Fhir.Core.Features.Persistence; using Microsoft.Health.Fhir.Core.Messages.Upsert;
 started=worker.started, state=worker.state, first_task_display_name=self._first_task_display_name(worker), num_unread_rpc_messages=len(worker.rpc_messages), **worker.info ) for worker in self._state.get_active_workers()] workers.sort(key=lambda worker: worker['started'], reverse=True)
 func (a *Accounts) getContract(contractName string, address flow.Address) ([]byte, error) { fmt.Printf("TEMP LOGGING: get contract called for %s.%s \n", address.String(), contractName) contract, err := a.getValue(address, true, contractKey(contractName))
 { public class NetworkConnection : IDisposable { [EditorBrowsable(EditorBrowsableState.Never), Obsolete("Use playerController.visList instead (=NetworkIdentity.visList)")] public HashSet<NetworkIdentity> visList => playerController.visList; Dictionary<int, NetworkMessageDelegate> messageHandlers;
 ServiceContainerUtil.registerServiceInstance(componentManager, key, implementation); Disposer.register( parentDisposable, () -> BaseSdkCompat.unregisterComponent(componentManager, key.getName())); } }
 } break; case NECROMANCY: { const uint32_t necroCount = Skill::GetNecromancyPercent( hero ) - hero.GetSecondaryValues( Skill::Secondary::NECROMANCY ) + count; const std::string tmpDescription( std::string( GetNameWithBonus( hero ) ) + std::string( " allows %{necrocount} percent of the creatures killed in combat to be brought bac
 } public void testParseDateWithForCest() throws Exception { GregorianCalendar exp1 = new GregorianCalendar(2017, 0, 28, 22, 0, 0); exp1.setTimeZone(TimeZone.getTimeZone("UTC")); Date expected1 = new Date(exp1.getTimeInMillis()); Date actual1 = DateUtils.parse("Sun, 29 Jan 2017 00:00:00 CEST"); assertEquals(ex
 ceil_mode=True, out_indices=(3, 4), out_feature_indices=(22, 34), l2_norm_scale=20), neck=None, bbox_head=dict(
 if (value && typeof value==='object') { if (!isString(old)) { for (let i in old) if (!(i in value) || value[i] == null || value[i] === false) node.style[i] = ''; } for (let i in value) { if (NON_DIMENSION_PROPS[i]) node.style[i] = value[i]; else node.style[i] = typeof value[i]==='number' &
 @Test public void testPrintHelloWorld() throws Exception { String xpath = "//TermApply/TermName[@Image=\"println\"]"; rule.setXPath(xpath); rule.setVersion(XPathRuleQuery.XPATH_2_0); Report report = getReportForTestString(rule,
 async def _create_relationships(self, relationships, operation): for relationship in relationships: await self._save_fact(operation, relationship.source) await self._save_fact(operation, relationship.target) self.relationships.append(relationship) async def _save_fact(self, operation, trait): self.facts.append(Fact(trait=trait[0], value=trait[1], score=1)) async def _update_scores(self, operation, increment):
 buffer[Position++] = (byte)((value >> 8) & 0xFF); buffer[Position++] = (byte)((value >> 16) & 0xFF); buffer[Position++] = (byte)((value >> 24) & 0xFF); Length = Mathf.Min(Length, Position); } public void WriteInt32(int value) => WriteUInt32((uint)value);
 if title, ok := dashboardTitles[key]; ok { return title } dashboard, err := in.loadDashboardResource(namespace, name) if err!= nil { log.Errorf("Cannot get dashboard %s in namespace %s", template, namespace) return ""
 } func (s *Service) Blocklist(overlay swarm.Address, duration time.Duration) error { s.logger.Tracef("libp2p blocklist: peer %s for %v", overlay.String(), duration) if err := s.blocklist.Add(overlay, duration); err!= nil { s.metrics.BlocklistedPeerErrCount.Inc() _ = s.Disconnect(overlay)
 @Override protected String operation() { return DataOperations.REPLACE; } @Override
 log.Info().Msgf("getting collection by id: %v", collectionID) collection, err := storages.Collections.LightByID(collectionID) if err!= nil { log.Error().Err(err).Msgf("could not get collection with id: %v", collectionID) return }
 // migrationDriver satisfies the remaining need of the Driver interface, since // the package uses PartialDriver under the hood type migrationDriver struct { dialect string } // Open returns the given "file" func (m *migrationDriver) Open(name string) (http.File, error) { var ff *fakeFile switch m.dialect { case "postgres": ff = postgresMigrations[name] }
 if ((matchCreators.size() == 0 || mergerCreators.size() == 0)) { throw HootException( "Empty match/merger creators only allowed when conflate.enable.old.roads is enabled."); } else { throw HootException( "Empty match/merger creators only allowed when conflate.enable.old.roads is enabled. " + "If the default match/merger creators are desired, set conflate.match_c
 using Microsoft.Diagnostics.Tracing.Parsers; using Microsoft.Diagnostics.Tracing.Session; using System; using System.Collections.Generic; using System.IO;
 @Override default Iterator<T> dropWhile(Predicate<? super T> predicate) { Objects.requireNonNull(predicate, "predicate is null"); if (!hasNext()) { return empty(); } else {
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4452-SEA 1645537672 1410063164</p> <hr> <p>Varnish cache server</p> </body>
 thread_delay = environment.get_value('THREAD_DELAY') thread_error_occurred = False # Set multi-armed bandit strategy selection distribution. distribution = get_fuzz_strategy_distribution() environment.set_value('STRATEGY_SELECTION_DISTRIBUTION', distribution) # Reset memory tool options. environment.reset_current_memory_tool_options(redzone_size=redzone)
 <Typography variant="display3" align="center" color="textPrimary" gutterBottom> The Iodide Notebook </Typography> <div> <Grid container spacing={16} justify="center"> <Grid item>
 "github.com/caddyserver/caddy/v2" "github.com/caddyserver/caddy/v2/caddyconfig/caddyfile" "github.com/caddyserver/certmagic" "github.com/tailscale/tailscale" ) func init() {
 # -*- TRACE -*- try: try: from celery.concurrency.future import get_future_executor from celery.worker import get_celery_worker except RuntimeError: R = retval = fun(*args, **kwargs) state = SUCCESS
 * @param beginLine the linenumber, 1-based. */ public TokenEntry(String image, String tokenSrcID, int beginLine) { this(image, tokenSrcID, beginLine, -1, -1); } /**
 public override int GetHashCode() { int result = Object.GetHashCode(); byte[] nameBytes = _name.Bytes; result = result * 19 + nameBytes[0]; result = result * 19 + nameBytes[nameBytes.Length - 1]; result = result * 19 + nameBytes[nameBytes.Length >> 2]; return result; }
 end # @param [PodTarget] pod_target_name # @return [Pathname] the path of the project for a pod target. #
 ALTER TABLE enroll_secrets DROP COLUMN active, DROP COLUMN name, ADD PRIMARY KEY (secret), ADD UNIQUE INDEX (secret), ADD COLUMN secret TEXT NOT NULL ` if _, err := tx.Exec(sql); err!= nil { return errors.Wrap(err, "alter enroll_secrets")
 @Override public void setJsonParameters(Map<String, Object> allParameters) throws Exception { Map<String, Object> parameters = (Map<String, Object>)allParameters.get("parameters"); Number bitmask = (Number) parameters.get("type"); type = new ConnectionType(bitmask.intValue()); }
.concat_map(lambda tx: tx['outputs']['public_keys']).reduce(lambda l, r: l + r), multi=True)) # secondary index on inputs/transaction links (txid, output id) connection.run( r.db(dbname).table('bigchain')
 $attributes['alt'] = $alt; } $user_avatar = pods_image( $user_avatar, array( $size, $size ), 0, $attributes, true ); if (! empty( $user_avatar ) ) { $avatar = $user_avatar;
 { } public override string ModelTypeName => NumberRangeModel.ModelTypeName; } }
 } hasDuplicate := false for _, otherCrt := range otherCrts { if otherCrt.Name!= crtCopy.Name && otherCrt.Spec.SecretName == crtCopy.Spec.SecretName { hasDuplicate = true break } } if hasDuplicate { c.Recorder.Eventf(crtCopy, corev1.EventTypeWarning, errorDuplicateSecretName, "Duplicate secretName %v", crtCopy.Spec.SecretName)
 } public KPrint(KompileOptions kompileOptions) { this(new KExceptionManager(kompileOptions.global), FileUtil.testFileUtil(), new TTYInfo(false, false, false), new PrintOptions(), kompileOptions); } @Inject
 print('Start training...') # train gbm = lgb.LGBMRegressor(boosting_type='gbdt', objective='regression', num_leaves=31, learning_rate=0.05, n_estimators=20)
 // IN THE SOFTWARE. //----------------------------------------------------------------------------- #include "torqueConfig.h" #ifdef TORQUE_ENABLE_ASSET_FILE_CLIENT_REPLICATION #include "netFileServer.h" #include "netFileUtils.h" #include "console/fileSystemFunctions.h"
 @NotNull @JsonProperty private String metricsFilePath = null; public SingularityS3UploaderConfiguration() { super(Optional.of("singularity-s3uploader.log"));
 if "egg_incubators" in inv_data: for incubator in inv_data.get("egg_incubators", {}).get("egg_incubator", []): incubators.append({"id":incubator.get("item_id", -1), "used":False}) if "pokemon_data" in inv_data: pokemon = inv_data.get("pokemon_data", {}) if pokemon.get("is_egg", False) and "pokemon_
 origin = req.identifier op = req.operation s, reason = self.canNymRequestBeProcessed(origin, op) try: originRole = self.idrCache.getRole( origin, isCommitted=False) or None
 if err := unmountVolume(cephRoot); err!= nil { klog.Errorf("failed to unmount %s with error %s", cephRoot, err) } }
 } catch (NeosException $exception) { // TODO: Revisit if we actually need to store a stack trace. $logMessage = $this->throwableStorage->logThrowable($exception); $this->logger->error($logMessage, ['stacktrace' => $exception->getTraceAsString()]); return ''; } }
 ) const ( envInitAppNameHelpPrompt = "An environment will be created in the selected application." envInitNamePrompt              = "What is your environment's name?" envInitNameHelpPrompt          = "A unique identifier for an environment (e.g. dev, test, prod)."
 if (value is TimeSpan time) //For those dialects where DbType.Time means TimeSpan. return time; var dbValue = new DateTime(1, 1, 1).AddTimeSpan(value); return dbValue.TimeOfDay; }
 final String topic = ClassUtils.getCanonicalName(subscribeType); EventPublisher eventPublisher = INSTANCE.publisherMap.get(topic); if (eventPublisher!= null) { eventPublisher.removeSubscriber(consumer); return true; } return false; } /**
 ﻿using System; using NHibernate.Cfg.MappingSchema; using NHibernate.Mapping.ByCode; using NHibernate.Mapping.ByCode.Conformist;
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4422-SEA 1645550862 1520394365</p> <hr> <p>Varnish cache server</p> </body>
 import unittest import warnings from Bio._py3k import StringIO try: import numpy
 import ( "context" "fmt" "reflect" "knative.dev/pkg/apis" )
 "strings" "time" "github.com/spf13/cobra" v1 "k8s.io/apimachinery/pkg/apis/meta/v1" "k8s.io/apimachinery/pkg/labels"
 def ball_throw_reticle_fail_delay(success_prob=0.95): ''' Chances to skip the reticle should be constant, so the wait time before throwing is binomial, given that the monster does not interrupt... ''' for trial in range(10): if random() < success_prob: break return trial time.sleep(1.8*(trial+random()))
 /// </summary> /// <param name="dimensions"></param> /// <returns></returns> public static int[] GetStrides(int[] dimensions) { int[] strides = new int[dimensions.Length]; int stride = 1; for (int i = strides.Length - 1; i >= 0; i--)
'strcmp','strcpy','strlen', '/tcmalloc/', '/tc_malloc/', ] IGNORE_CONTAINS_IF_SYMBOLIZED = [ 'libc.so',
 { internal const string FailedToGenerateLogMessage = "Failed to generate log message"; internal static IMvxLog Instance { get; set; } private readonly Logger _logger;
 return greytrack_bgs, greytrack_labels def canvas_angle(self, base): """Given base-pair position, return (angle, cosine, sin) (PRIVATE).""" angle = self.sweep * 2 * pi * (base - self.start) / self.length return (angle, cos(angle), sin(angle))
 return std::atoi(id.c_str()); } int get_gpu(const InitArguments& args, int use_gpu) { int use_gpu           = args.device_id; const int ndevices    = args.ndevices;
 return ret return lhex(x) class _MultiEnumField(_EnumField): def __init__(self, name, default, enum, depends_on, fmt = "H"):
 Synchronous instruments are managed by a sync.Map containing a *record with the current state for each synchronous instrument.  A bound instrument encapsulates a direct pointer to the record, allowing bound metric events to bypass a sync.Map lookup.  A lock-free algorithm is used to protect against races when adding and removing items from the sync.Map.
 """Add another sequence or string to this sequence. The sequence is first converted to a Bio.Seq object before the addition.  This method returns a Seq object, not a DBSeq object. """ # Let the Seq object deal with the alphabet issues etc return self.toseq() + other
 } __sync_sub_and_fetch(&req->pool->_shared.count, 1); req->sock = NULL; call_connect_cb(err); } else { h2o_url_t *target_url = &req->pool->targets.entries[req->selected_target]->url; if (target_url->scheme->is_ssl) {
 formattedMessage = string.Format(CultureInfo.InvariantCulture, message, args); } var builder = new StringBuilder(message.Length + 32); if (IncludeTimestamp) {
 final HashSet<T> set = (HashSet<T>) elements; return set; } if (Collections.isEmpty(elements)) { return this; } else { return new HashSet<>(addAll(tree, elements)); } }
 SELECT tables.TABLE_NAME 'table' from information_schema.tables as tables inner join snapshot_cycles as snap ON snap.start_time < DATE_SUB(NOW(), INTERVAL %s DAY) AND tables.TABLE_NAME LIKE CONCAT('%%', snap.cycle_timestamp); """ DROP_TABLE = "DROP TABLE {0}"
 } func newFakeUpstream(name string, insecure bool) *fakeUpstream { if strings.Contains(name,"{") && strings.Contains(name,"}") { ReverseProxy := NewDynamicHostReverseProxy(name, "") } else { uri, _ := url.Parse(name)
 if ( System::IsFile( *it ) ) { if ( conf.Read( *it ) ) { isValidConfigurationFile = true; std::string externalCommand; externalCommand = conf.externalMusicCommand(); if (!externalCommand.empty() ) Music::SetExtCommand( externalCommand ); break; }
 type: 'array', items: { type:'string' }, }, autoSave: { type: 'boolean', default: false, }, locallySaved: { type: 'array', items: { type:'string' },
 // // Escaping // // Go CDK supports all UTF-8 strings. Some strings are escaped (during writes) // and unescaped (during reads) to ensure compatibility with the provider: //  - Metadata keys: No escaping required. //  - Metadata values: No escaping required. //
 "Cannot cast uninferred numeric literal"); ast_error_continue(opt->check.errors, expr, "To give a numeric literal a specific type, " "use the constructor of that numeric type"); return AST_ERROR; default: break;
 parsed = urlparse(url) try: auth = (unquote(parsed.username), unquote(parsed.password)) except (AttributeError, TypeError): auth = ('', '') return auth def to_native_string(string, encoding='ascii'):
 } = networkStatus; const { stakingInfoWasOpen } = staking; const shouldShowTadaIconAnimation = IS_STAKING_INFO_PAGE_AVAILABLE && isAlonzoActivated &&!stakingInfoWasOpen; const shouldShowTadaIcon = IS_STAKING_INFO_PAGE_AVAILABLE && isAlonzoActivated; const { active, isWalletRoute, hasAnyWallets, hasRewardsWallets } = wallets; const {
 'Updating code for Lambda "%s" from location: %s' % (props["FunctionName"], code) ) code = self.get_deploy_templates()["create"]["parameters"].get("Code", {})(props) client.update_function_code(FunctionName=props["FunctionName"], **code) if "Environment" in update_props: environment_variables = update_props["Environment"].get("Variables", {})
 import ( "github.com/dolthub/go-mysql-server/enginetest" "github.com/dolthub/go-mysql-server/sql/analyzer" "github.com/dolthub/go-mysql-server/sql/terror" ) var BrokenQueries = []enginetest.QueryErrorTest{ { Query: `SELECT myTable.i,
 if ( isset( $possible_pods[ $pod_name ] ) ) { $this_pod = $possible_pods[ $pod_name ]; if ( is_singular() || is_single() ) { $filter = pods_v('single_filter', $this_pod, $filter, true ); } elseif ( is_archive() || is_post_type_archive() || is_tax() ) { $filter = pods_v( 'archive_filter', $th
 yield stream["quality"], FilmOnHLS(self.session, vod_id=vod_id, quality=stream["quality"]) else: if channel in self._special_case_channels: channel = http.get(self.url, schema=self._channel_id_schema) data = self.api.channel(channel) for stream in data["streams"]:
 * * @return Metric */ public function postMetrics() { $metric = new Metric(Input::all()); return $this->_saveMetric($metric); }
 queue_url = self._queue_url(path, req_data, headers) self._set_queue_attributes(queue_url, req_data) elif action == 'DeleteQueue': QUEUE_ATTRIBUTES.pop(self._queue_url(path, req_data, headers), None) if 'QueueName' in req_data: encoded_data = urlencode(req_data, doseq=True) if method == 'POST' else ''
 $this->token = $this->getSessionToken(); //TODO: separate expire time from hash?? setcookie(session_name(), session_id(), ($time?: time()) + $cfg->getSessionTTL(), ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure'), ini_get('session.cookie_httponly')); } function getSession() {
 public static readonly Regex RelativeMonthRegex = new Regex(DateTimeDefinitions.RelativeMonthRegex, RegexOptions.Singleline); public static readonly Regex RelativeRegex = new Regex(DateTimeDefinitions.RelativeRegex, RegexOptions.Singleline); public static readonly Regex PrefixArticleRegex =
 type Ports []Port type Port struct { Name        string `json:"name,omitempty"` Protocol    string `json:"protocol"` AppProtocol string `json:"appProtocol,omitempty"` Port        int32  `json:"port,omitempty"` } func (ports *Ports) Parse(ps []core_v1.ServicePort) {
 searchResult = await SearchImpl(searchOptions, false, connection, cancellationToken, transaction); // Perform a second read to get the count. searchOptions.IsolationLevel = IsolationLevel.ReadUncommitted; searchOptions.CountOnly = true; var countOnlySearchResult = await SearchImpl(searchOptions, false, connection, cancellationToken, transaction); searchResult.TotalCount = countOnlySearchResult.TotalCount;
 s.HTTP = &HTTP{} } s.recordResponse(resp) s.HTTP.Response = responseData(resp) }
 * * @access private * * @param array $styles List of styles that are allowed and considered safe. * @return array */ public function get_allowed_css( $styles ) {
 return CollectionHelper.EmptySet<string>(); } return null; // The caller should use all lazy properties as the result } } }
 $id   = pods_absint( $row ); if (! is_numeric( $row ) || 0 === strpos( $row, '0' ) || $row!= preg_replace( '/[^0-9]/', '', $row ) ) { if ( $this->id &&! is_numeric( $this->id ) ) { $mode ='slug'; $id   = $row; } else 
 throw new IllegalArgumentException( "Unsupported write ahead log version " + new String(magicBuffer)); } } catch (Exception e) { log.warn("Got exception trying to read WAL header information," + " assuming the rest of the file has no data."); // A TabletServer might have died before the (complete) header was written throw new LogHeaderIncompleteException(e);
 } func (q *Query) UserCalendarSubscription(ctx context.Context, id string) (*calendarsubscription.CalendarSubscription, error) { return q.CalendarSubscriptionStore.FindOneById(ctx, id) } // todo: return UserCalendarSubscription with generated url once endpoint has been created
 { public function process(ContainerBuilder $container): void { if ($container->hasDefinition('mailer.transport_factory.native')) { return; }
 for i in range(len(other)): # TODO: If we don't need to reindex, don't. It is expensive. # The challenge with avoiding reindexing is that we need to make sure that # the internal indices line up (i.e. if a drop or a select was just # performed, the internal indices may not match). if (i!= 0 or (left_old_idx.equals(joined_index) and not force_re
 * @covers Sensei_Data_Cleaner::cleanup_transients */ public function testSenseiTransientsDeleted() { set_transient('sensei_answers_123_456', 'value', 0 ); set_transient('sensei_answers_feedback_123_456', 'value', 0 ); set_transient( 'quiz_grades_123_456', 'value', 0 ); Sensei_Data_Cleaner::cleanup_all();
 + "SELECT " + KEY_USERNAME + "," + KEY_PASSWORD + " FROM " + TABLE_NAME_FEED_ITEMS + " INNER JOIN " + TABLE_NAME_FEEDS + " ON " + TABLE_NAME_FEED_ITEMS + "." + KEY_FEED + " = " + TABLE_NAME_FEEDS + "." + KEY_ID + " WHERE " + TABLE_NAME_FEED_ITEMS + "." + KEY_IMAGE_URL + " IS NOT NULL AND " + TABLE_NAME_FEED_ITEMS + "." + 
 edge.add("to", e.getDestName()); edge.add("toOrdinal", e.getDestOrdinal()); edge.add("priority", e.getPriority()); edge.add("distributedTo", String.valueOf(e.getDistributedTo())); edge.add("type", e.getRoutingPolicy().toString().toLowerCase()); edges.add(edge); }
 } func TestRetryConformance(t *testing.T) { // This test is currently skipped in CI as the env variable is not set // and the test will timeout. If you are running locally and want to // run this test, you can set the env variable to something like // 127.0.0.1:8080 time.Sleep(time.Second * 2) host := os.Getenv("STORAGE_EMULATOR_HOST") if 
 suggestions[entry['target']].update(entry) suggestions[entry['target']]['count'] += 1 except DataError as e: # Catches 'argument exceeds the maximum length of 255 bytes' Error return HttpResponse('Not Implemented: {error}'.format(error=e), status=501) return JsonResponse( sorted(suggestions.values(), key=lambda e: e['count'], reverse=True)[:max_results],
 ''' src_data, tgt_data = self.src[mode], self.tgt[mode] n = len(src_data) # make sure all devices have the same number of batches n = len(src_data) // ndev * ndev # XXX: is partition then shuffle equivalent to shuffle then partition?
 if (NODE_ENV!== 'production') { const initDevTools = require('./devtools').initDevTools; if (typeof initDevTools === 'function') { initDevTools(); } }
 # @param [ true | false ] disconnect Whether to disconnect the servers #   being removed. For internal driver use only. # # @return [ Array<Server> | true | false ] If disconnect is true, #   returns whether any servers were removed. If disconnect is false, #   returns an array of servers that were removed. # # @note The return value of this method is not part of the driver's #   public API.
 Start: values.ConvertTime(s.Bounds.Start.Time(s.Bounds.Now)), Stop:  values.ConvertTime(s.Bounds.Stop.Time(s.Bounds.Now)), } return bounds } return nil
 from nose.plugins.attrib import attr from numpy.testing import (assert_equal, assert_almost_equal, dec, assert_array_almost_equal, assert_raises) from unittest import TestCase import tempdir
 "creationTimestamp": "2017-09-25T12:33:24.312-07:00", "name": "default1", "description": "Default network for the project", "selfLink": "https://www.googleapis.com/compute/v1/projects/project1/global/networks/thisisatest", "autoCreateSubnetworks": true, "subnetworks": [ "https://www.googleapis.com/compute/v1/p
 relevant_facts.append(variable_facts) return relevant_facts def _get_combo_set_id(self, combo): if not combo: return None return combo['combo_set_id'] def _get_combo_link_id(self, combo): if not combo: return None return combo['combo_link_id']  @staticmethod async def _build_single_test_variant(copy_test, clean_test, combo): """
 // BlockFetcher is an interface that can be passed to ReplayStateLog so that // the output of the replay can be adapted to what the user wants. type BlockFetcher interface { BlockFetcherFunc(sid skipchain.SkipBlockID) (*skipchain.SkipBlock, error) LogNewBlock(sb *skipchain.SkipBlock) LogAppliedBlock(sb *skipchain.SkipBlock, head DataHeader, body DataBody) LogWarn(sb *skipchain.
 you will need to call :meth:`start_py_workers` before calling :meth:`build` of any of the pipelines. You can find more details and caveats of both methods in Python's ``multiprocessing`` module documentation. py_callback_pickler : module or tuple, default = nvidia.dali.pickling If `py_start_method` is set to *spawn* callback passed to parallel ExternalSource must be picklable. If 
 The output feature of shape :math:`(N, D_{out})` where :math:`D_{out}` is size of output feature. """ if self.aggr =='mean': assert src_feat.size(0) == dst_feat.size(0), \ "src and dst feature lengths do not match" if isinstance(feat, tuple): feat_src = self.feat_drop(feat[0]) feat_dst = self.
 "github.com/onflow/flow-go/model/encodable" ) type MyBeaconKeys interface { InsertMyBeaconPrivateKey(epochCounter uint64, key *encodable.RandomBeaconPrivKey) error RetrieveMyBeaconPrivateKey(epochCounter uint64) (*encodable.RandomBeaconPrivKey, error) }
 "context" "strings" "github.com/spf13/cobra" "sigs.k8s.io/controller-runtime/pkg/client"
 if (numMissingInstances > 0) { schedule(numMissingInstances, matchingTaskIds, request, state, deployStatistics, pendingRequest, maybePendingDeploy); } else if (numMissingInstances < 0) { final long now = System.currentTimeMillis();
 @property def branches(self): return [ FlatMapStrategy(strategy=strategy, expand=self.expand) for strategy in self.flatmapped_strategy.branches ]
 for _, link := range links { if _, found := indexes[link.Attrs().Index]; found { netdev, err := linkToNetDev(link) if err!= nil { return err }
 config.Interval = 10 * time.Millisecond config.BrokerOpts = append(config.BrokerOpts, resources.WithBrokerClassForBrokerV1Beta1(v1beta1.BrokerClass)) config.FinishedSleep = 40 * time.Second config.ConfigTemplate = "../config.toml" probe = prober.RunEventProber(ctx, c.Log, client, config) },
 loop do begin tmp = client(opts).get("#{domain.uri}/users", params: { offset: offset, limit: page_limit }) tmp['accountSettings']['items'].each do |user_data|
 return_inverse=True ) if new_categories[0] is _sortable_sentinel: # f_to_use return _sortable_sentinel for locations that should be # missing values in our output. Since np.unique returns the uniques # in sorted order, and since _sortable_sentinel sorts before any
 return self.__it.__length_hint__() def __repr__(self): if self.__done: return '{0!r}'.format(self.__consumed) else: return '[{0!r}...{1!r}]'.format( self.__consumed[:self.__it.__length_hint__() // 2], self.__consumed[-self.__it.__length_hint__() // 2:]) def __iter__(self):
 func (a *SingleIPAllocator) AllocateNext() (net.IP, error) { a.mutex.Lock() defer a.mutex.Unlock() if a.count >= a.max { // no available IP, return nil and error return nil, fmt.Errorf("no available IP") } for i := 0; i < a.max; i++ {
 branchName: alias('branch.name'), permissions: attr(), number: attr('number'), message: attr('string'),
 TODO: Memory tracking """ try: extension_slice_name = SystemdCgroupsApi.get_extension_slice_name(extension_name) cgroup_relative_path = os.path.join('azure.slice/azure-vmextensions.slice', extension_slice_name) cpu_cgroup_mountpoint, _ = self._cgroups_api.get_cgroup_mount_points() cpu_cgroup_path = os.path.join(cpu_cgroup_mountpoint, cgroup_relative_path)
 NegativeNumberTermsRegex = new Regex(NumbersDefinitions.NegativeNumberTermsRegex + '$', RegexFlags); // PositiveNumberTermsRegex = new Regex(NumbersDefinitions.PositiveNumberTermsRegex + '$', RegexFlags); // NegativeNumberTermsRegex = new Regex(NumbersDefinitions.NegativeNumberTermsRegex + '$', RegexFlags); var builder = ImmutableDictionary.CreateBuilder<Regex, TypeTag>(); // Add Cardinal
 #include <iostream> #include <cstring> using namespace std; int max(int a, int b) { return (a > b)? a : b; }
 long dateValue = fieldDateAndTime[0]; long timeNanosRetrieved = fieldDateAndTime[1]; // Variable used to the time in nanoseconds of the date truncated. long timeNanos;
 if s.Limit == 0 { s.Limit = search.DefaultMaxResults } if opts.After!= nil && *opts.After!= "" { err = search.ParseCursor(*opts.After, &s) if err!= nil { return nil, err }
 import Navigation from'src/components/Navigation'; import defaultClasses from './appShell.css'; const handleRoutingError = ({ location }) => { const { pathname } = location;  return ( <ErrorView pathname={pathname} /> ); }; class AppShell extends Component { static propTypes = {
 for (int i = 23; i < 46; ++i){ rms_tols2[i] = 0.75; // velocities } for (int i = 46; i < (int)rms_tols2.size(); ++i){ rms_tols2[i] = 0.15; // muscle activations and fiber-lengths }
 Multiplier. Default: 2 avg_deg : int, optional Average degree. Default: 3 pq : list of pair of nonnegative float, optional Random densities. Default: [0.1, 0.1] rng : numpy.random.RandomState, optional Random number generator. Default: None Raises ------ RuntimeError is raised if pq is not a list of floats.  Examples -------- >>> data = SBMMixtureDataset(n_gra
 + "order by mgr, deptno"; RelNode r = checkPlanning(tester, preProgram, new HepPlanner(program), sql); RelCollation c = r.getInput(0).getTraitSet().getTrait(RelCollationTraitDef.INSTANCE); assertEquals("Collation is incorrect", "[7, 3]", c.toString()); } @Test public void testWindowOnSortedInput1() {
 def get_java_opts(port): opts = config.LAMBDA_JAVA_OPTS if opts.find('_debug_port_'): java_opts = opts.replace('_debug_port_', ('address=%s' % port)) java_opts += (' port=%s' % port) return java_opts return opts
 CardInfo *card = addCard(set->getShortName(), cardName, false, cardId, cardCost, cmc, cardType, cardPT, cardLoyalty, cardText, colors, relatedCards, upsideDown); card->addToSet(set); cards++; }
 break; case execution_mode::validation: case execution_mode::testing: if (get_step() % cb->get_batch_interval() == 0) { cb->on_batch_evaluate_begin(); } break; default: LBANN_ERROR("invalid execution mode");
 QMessageBox::warning(this, tr("Load sets/cards"), tr("Selected file cannot be found.")); return; } if (QFileInfo(fileName).suffix()!= "xml") { // fileName = *.xml QMessageBox::warning(this, tr("Load sets/cards"), tr("You can only import XML databases at this time.")); return; }
 } @Override public Consumer<Value<T>> onSetNextValue() { return this.onSetNextValueCallbacks.remove(); } @Override
 if ( interface ) interface->RedrawActionMove( *b, path ); else if ( bridge ) { for( Indexes::const_iterator dst = path.begin(); dst!= path.end(); ++dst ) { bool doMovement = false; if ( bridge && bridge->NeedDown( *b, *dst ) )
 var TelemetryClient = require('../lib/util/telemetry'); utilsCore.isTelemetryEnabled(function (err, isEnabled) { if (err) { console.log(err); } else { TelemetryClient.init(isEnabled); if (isEnabled) { TelemetryClient.start(process.argv);
 String pathToDelete = path + "/" + createdNodeName; LOG.debug("[{}] Failed to acquire lock in tryLock(), deleting all at path: {}", vmLockPrefix, pathToDelete); ZKUtil.deleteRecursive(zooKeeper, pathToDelete); createdNodeName = null; }
 hosts = config.delete(:hosts) opts = config.delete(:options) || {} unless config.empty? default_logger.warn("Unknown config options detected: #{config}") end if uri Mongo::Client.new(uri, options(opts))
.load(media.getImageLocation()).apply(RequestOptions.diskCacheStrategyOf(ApGlideSettings.AP_DISK_CACHE_STRATEGY)).submit(iconSize, iconSize).get(500, TimeUnit.MILLISECONDS); views.setImageViewBitmap(R.id.imgvCover, icon); } catch (Throwable tr) { Log.e(TAG, "Error loading the media icon for the widget", tr);
 >>> from Bio import TogoWS >>> for id in TogoWS.search_iter("pubmed", "diabetes+human", limit=10):...     print("PubMed ID: %s" %id) # maybe fetch data with entry? PubMed ID:... Internally this first calls the Bio.TogoWS.search_count() and then uses Bio.TogoWS.search() to get the results in batches.
 with open(QemuProcess.LOG_PATH) as f: # Strip non-printable characters at beginning of qemu log qemu_log = ''.join(c for c in f.read() if c in string.printable) # Only report the tail of the log; otherwise we would only end up seeing # the beginning of it once the logging library later truncates it to the # MAX_LOG_LENGTH. logs.log_warn(qemu_log[-MAX_LOG_LENGTH:]) else:
 import { useEffect, useRef, useState } from'react'; import { useAppContext } from '../../context/app'; import { isPageLoading } from '../../helpers/isPageLoading'; export default () => { const { isPageLoading } = useAppContext(); const doneTimeoutRef = useRef();
 } } $logger = System::getContainer()->get('contao.monolog.logger'); $logger->log($this->strLogFile, $strMessage); return true; }
 // Network private static final String PREF_ENQUEUE_DOWNLOADED = "prefEnqueueDownloaded"; public static final String PREF_UPDATE_INTERVAL = "prefAutoUpdateIntervall"; public static final String PREF_MOBILE_UPDATE = "prefMobileUpdateAllowed"; public static final String PREF_EPISODE_CLEANUP = "prefEpisodeCleanup"; public static final String PREF_PARALLEL_DOWNLOADS = "prefParallelDownloads";
 // Message Delivery Semantics // // Azure ServiceBus supports at-least-once semantics in the default Peek-Lock // mode; applications must call Message.Ack/Nack after processing a message, // or it will be redelivered. However, it also supports a Receive-Delete mode, // which essentially auto-acks a message when it is delivered, resulting in // at-most-once semantics. See SubscriberOptions.AckFuncForReceiveAndDelete.
 protected NancyBootstrapperWithRequestContainerBase() { this.RequestScopedTypes = Enumerable.Empty<TypeRegistration>(); } /// <summary> /// Context key for storing the child container in the context
 * 2. It will not produce the same results on little-endian and big-endian *    machines. */ unsigned int hash_gen_hash(const void *key, int len) { /*'m' and 'r' are mixing constants generated offline. They're not really'magic', they just happen to work well.  */
 text="URL: <b>{}</b>".format( html.escape(url.toDisplayString())), yes_action=functools.partial(QDesktopServices.openUrl, url), url=url.toDisplayString()) return True elif (info.domain, info.error) in ignored_errors: log.webview.debug("Ignored error on {}: {} (error domain: {}, "
 C chan struct{} closed    chan struct{} closedOnce sync.Once }
 rpmostree_origin_set_regenerate_initramfs (origin, self->regenerate, self->args); rpmostree_sysroot_upgrader_set_origin (upgrader, origin); if (!rpmostree_sysroot_upgrader_deploy (upgrader, cancellable, error)) return FALSE;
 const std::vector<WeightsType*>& other_layer_weights = dynamic_cast<data_type_layer<TensorDataType>*>(other_layer)->get_data_type_weights(); for (size_t i = 0; i < m_weights.size(); ++i) { if (m_weights[i]) { m_weights[i]->set_values(other_layer_weights[i]->get_values()); } } }
 size_t start; size_t end; uint32_t recovery; std::stringstream ss; bool more = true; while (std::getline(fi, line)) {
 // Otherwise exec the sandbox tool args = append([]string{command}, args...) command = e.sandboxTool env = append(env, "SANDBOX_NETWORK="+boolToString(sandbox.Network), "SANDBOX_MOUNT="+boolToString(sandbox.Mount)) } } cmd := exec.Command(command, args...)
 if (err) { return callback(err); } return self.deduplicateTrash(req, piece, callback); }); } };
 ts.exec("createtable twithcolontest"); ts.exec("insert row c:f cq value"); ts.exec("scan -r row -cf c:f", true, "value"); ts.exec("scan -b row -cf c:f -cq cq -e row", true, "value"); ts.exec("scan -b row -c cf -cf c:f -cq cq -e row", false, "mutually exclusive")
 this.threadChecker = threadChecker; this.threadChecker.start(this); this.tasks = Maps.newConcurrentMap(); this.processBuildingTasks = Maps.newConcurrentMap(); this.processRunningTasks = Maps.newConcurrentMap();
 placement_zone_ = std::move(zone); } } // namespace server } // namespace yb
 } func (m *stubClient) UploadMetrics(ctx context.Context, protoMetrics *metricpb.ResourceMetrics) error { m.rm = append(m.rm, protoMetrics) return nil }
 object[i]._oMissFlag = AllObjects[ot].oMissFlag; object[i]._oLight = AllObjects[ot].oLightFlag; object[i]._oBreak = AllObjects[ot].oBreak; object[i]._oDelFlag = FALSE; object[i]._oSelFlag = AllObjects[ot].oSelFlag; object[i]._oPreFlag = FALSE; object[i]._oTrapFlag = FALSE;
 } else { var noLibDescription; if (user['Policy'] && user['Policy']['IsAdministrator']) { noLibDescription = Globalize.translate("NoCreatedLibraries", '<a id="button-createLibrary" class="button-link">', '</a>') } else { noLibDescription = Globalize.translate("AskAdminToCreateLibrary"); }
 auto storage = static_cast<MutableStorageImpl *>(mutable_storage.get()); storage->block_storage_->forEach( [this](auto, const auto &block) { this->storeBlock(*block); }); // This call is necessary to ensure the transaction is committed. // Without it, the commit operation will not be performed and the // blocks will be written to the storage, but not flushed to disk. try { *(storage->sql_) << "C
 #define DELIMITER ", " #define ELEMENT_LONGEST_STR(name) #name "; " SERVER_TIMING_DURATION_LONGEST_STR #define EMIT_ELEMENT(req, dst, name, max_len) emit_server_timing_element(req, dst, #name, h2o_time_compute_##name##_time, max_len) static void emit_server_timing_element(h2o_req_t *req, h2o_iovec_t *dst, const cha
 kms_master_key_id = long_uid() sse_specification = {"Enabled": True, "SSEType": "KMS", "KMSMasterKeyId": kms_master_key_id} kms_master_key_arn = aws_stack.kms_key_arn(kms_master_key_id) result = dynamodb.create_table( TableName=table_name,
 if path is infer: path = os.getenv('HYPOTHESIS_DATABASE_FILE') if path is not None:  # pragma: no cover # Note: for Hypothesis 4, there should still be a deprecation # warning to ease debugging for anyone using it and migrating to # a new version. note_deprecation( 'The $HYPOTHESIS_DATABASE_FILE environment variable is''deprecated, and will be ignored by a futu
 from urwid import BaseScreen from bzt import TaurusInternalException, TaurusNetworkError, ToolError from bzt.six import string_types, iteritems, binary_type, text_type, b, integer_types, request, file_type, etree, parse from bzt.utils import get_module_logger def get_output(args, env=None): logger = get_module_logger(__name__) logger.debug('Running: %s',''.join(args)) return s
 new Argument( 'order', new TypeCollection( new Type\EnumListType(array('id', 'id_reverse', 'alpha', 'alpha-reverse', 'alpha_reverse','manual','manual_reverse')) ),'manual' ),
 const char* megaFolderLink = request->getLink(); const char* base64pwkey = request->getPrivateKey(); const char* sessionKey = request->getSessionKey(); if (!megaFolderLink && (!(login && password)) &&!sessionKey && (!(login && base64pwkey))) {
 public static final CalciteSystemProperty<Boolean> TOPDOWN_OPT = booleanProperty("calcite.planner.topdown.opt", false); /** * Whether to run integration tests. */
 self.was_ended = arborted try: self.trigger.release() except (THREAD_EXCEPTION, AttributeError): pass class SelectableSelector(object):
 def test_preflow_push_makes_enough_space(): # From ticket #1542 G = nx.DiGraph() G.add_path([0, 1, 3], capacity=1) G.add_path([1, 2, 3], capacity=1) R = preflow_push(G, 0, 3, value_only=False) assert_equal(R.graph['flow_value'], 1) def test_shortest_augmenting
 shape({ small_image: shape({ url: string.isRequired }), }) ) }),
, qos_(&qos == &TOPIC_QOS_DEFAULT? participant_->get_default_topic_qos() : qos), listener_(listen), user_topic_(nullptr), num_refs_(0u) { }
 import unittest from os import path from Bio import SeqIO from Bio.SeqFeature import (FeatureLocation, AfterPosition, BeforePosition, CompoundLocation, UnknownPosition) class TestReference(unittest.TestCase):
 var adApp = ad.category('app').description($('Commands to display Active Directory applications')); adApp.command('create').description($('Creates a new Active Directory application. Usage: ad app create --name <name> --home-page <home-page> --available')).option('-n --name <name>', $('the display name for the application')).option('-m --home-page <home-page>', $('the URL to the application hom
 ctx = refreshCtx(t, ctx, user, ds, nil) session, err := ds.NewSession(&fleet.Session{UserID: user.ID}) require.Nil(t, err) ctx = refreshCtx(t, ctx, user, ds, session)
 Json::nextToken(json, index); //Loop through all of the key/value pairs of the object while (!Json::isEndOfJSON(json, index)) { //Get the upcoming token token = Json::lookAhead(json, index);
 import java.util.List; /** * Annotation Type Declaration. * * @since 6.2.0 */ public class ASTAnnotationTypeDeclaration extends ASTAnyTypeDeclaration { public ASTAnnotationTypeDeclaration(int id) {
 for include in self.parse_dependencies(filename)[1]: include_path = join_path(os.path.dirname(filename), include) if not path_exists(include_path): include_path = self.context.find_include_file(include) if include_path: if '.' + os.path.sep in include_path: include_path = os.path.normpath(include_path)
 // set manual x bounds to have nice steps graphData.formatAxis(fromTime, endTime); // insulin activity if (SP.getBoolean("showactivity", false)) { graphData.addActivity(fromTime, endTime, graphData.maxY); } // Treatments graphData.addTreatments(fromTime, endTime);
 } else if ((option == "-ReadX") || (option == "-RX")) { if (argc < 4) { cout << "Both the directory containing Xsens data files and the reader settings file are necessary to read Xsens data. Please retry with these inputs." << endl; PrintUsage(argv[0], cout); exit(-1); }
 if "Boolean" == options[:type].to_s Mongoid::Boolean elsif "StringifiedSymbol" == options[:type].to_s Mongoid::Extensions::StringifiedSymbol elsif "Symbol" == options[:type].to_s Mongoid::Extensions::StringifiedSymbol else options[:type] || Object end
 if o.ovs == nil { o.ovs, err = NewOverseer(ctx, cfg.GPU()) if err!= nil { return nil, err } }
 Ipv6Support    bool `config:"bool;true"` IgnoreLooseRPF bool `config:"bool;false"` IptablesRefreshInterval            int           `config:"int;10"` IptablesPostWriteCheckIntervalSecs float64        `config:"seconds;1"` MetadataAddr string `config:"hostname;127.0.0.1;die-on-fail"`
 environment.reset_current_memory_tool_options() # Clear exceptions. sys.exc_clear() # Call python's garbage collector. utils.python_gc()
 $field->setName($name); if (isset($preset[$name])) { $field->setValue($preset[$name]); } else { $field->setValue($this->getValuesforFieldType($name, $fieldType)); }
 def make_lexicon(): from..Plex import Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, TEXT, IGNORE, Method, State, Lexicon, Range letter = Any("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_") nonzero_digit = Any("123456789")
.WillRepeatedly( Return<shared_model::interface::types::SignatureRangeType>({})); auto prev_hash = Hash("prev hash"); EXPECT_CALL(*block, prevHash()).WillRepeatedly(testing::ReturnRefOfCopy(prev_hash)); EXPECT_CALL(*block, hash()).WillRepeatedly(testing::ReturnRefOfCopy(Hash("block hash"))); expected_block = block; auto signature = std::make_shared<MockSignature>();
 package Example import ( context "golang.org/x/net/context"
 from graphite.node import LeafNode, BranchNode from graphite.render.hashing import compactHash from graphite.util import unpickle, logtime, is_local_interface from graphite.render.render import Render from graphite.finders.utils import BaseFinder from graphite.readers.remote import RemoteReader
 use Thelia\Core\Event\Cart\CartEvent; use Thelia\Core\Event\Currency\CurrencyChangeEvent; use Thelia\Core\Event\TheliaEvents; use Thelia\Core\HttpFoundation\Session\Session; use Thelia\Log\Tlog; use Thelia\Model\Currency; use Thelia\Model\ConfigQuery; use Thelia\Model\ProductPrice; use Thelia\Model\ProductPriceQuery; use Thelia\Model\CartItem; use Thelia\Model\Car
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4443-SEA 1645523406 1796743364</p> <hr> <p>Varnish cache server</p> </body>
 var compactingFiles = compacting.stream().flatMap(job -> job.getFiles().stream()).collect(Collectors.toSet()); Preconditions.checkArgument(this.allFiles.containsAll(compactingFiles), "Compacting files %s not in set of all files: %s", compactingFiles, this.allFiles); Preconditions.checkArgument(Collections.disjoint(compactingFiles, this.candidates), "Compacting and candidates overlap %s %s", compactingFiles, this.candidates);
 g_data = json.load(open(graph_file)) self._labels = np.load(label_file) self._feats = np.load(feat_file) self._graph = DGLGraph(g_data) graph_id = np.load(graph_id_file) # lo, hi means the range of graph ids for different portion of the dataset,
 dsess := DSessFromSess(ctx.Session) dsess.dbRoots[db.name] = dbRoot{hashStr, newRoot} err = dsess.dbEditors[db.name].SetRoot(ctx, newRoot) if err!= nil { return err
 AppConfigProvider      string // config provider EnableDocs             bool   // enable generate docs & server docs API Swagger RouterCaseSensitive    bool   // router case sensitive default is true ) type beegoAppConfig struct {
 afterEach(function (done) { suite.teardownTest(done); }); });  describe('set vms per lab policy', function () { it('Set vms per lab policy command should work', function (done) { var vmCount = 10000;
 <% when "uninvited" %> <button class="btn btn-xs bg-teal">Uninvited</button> <% when "invited" %> <%= view_button_to approve_partner_partner_path(partner_row), status.humanize, class: "btn btn-xs bg-maroon" %> <% when "awaiting_review" %> <%= view_button_to approve_partner_partner_path(partner_row), status.humanize, class: "btn b
 return conn->session_id_len; } int s2n_connection_set_blinding(struct s2n_connection *conn, s2n_blinding blinding) { conn->blinding = blinding;
 {"weight": 118, "value":  229}, {"weight": 120, "value": 240}]), 1458) if __name__ == "__main__": unittest.main()
 testNoMigrationOnSync: function() { if (!global.enableSyncTests) { return Promise.resolve(); } const appConfig = require('./support/testConfig').integrationAppConfig;
 $this->item['department_id'] = $this->createOrFetchDepartment($item_department); } $item_manager_first_name = $this->findCsvMatch($row, "manager_first_name"); $item_manager_last_name = $this->findCsvMatch($row, "manager_last_name"); if ($this->shouldUpdateField($item_manager_first_name)) { $this->item['manager_id'] = $this->fetchManager($ite
 fedRem, fedRemDone := allocStringSet() defer fedRemDone() // Remove records for registration entries that no longer exist for id, record := range c.records { if _, ok := update.RegistrationEntries[id];!ok {
 // Close implements driver.Close. func (w *watcher) Close() error { if w.opener!= nil { w.opener.decBucketRef(w.bucket) if w.opener.ref == 0 { w.opener.Close() w.opener = nil } } return nil } // ErrorAs implements driver.ErrorAs.
 pass def _matrix(self, options): """Creates a matrix for NEXUS object (PRIVATE).""" if not self.ntax or not self.nchar: raise NexusError('Dimensions must be specified before matrix!') self.matrix = {}
 runnable_scanners = scanner_builder.ScannerBuilder( global_configs, scanner_configs, service_config, model_name).build() # pylint: disable=bare-except for scanner in runnable_scanners:
 private final ObjectMapper objectMapper; private final AsyncSemaphore<Response> webhookSemaphore; @Inject public SingularityWebhookSender(SingularityConfiguration configuration, AsyncHttpClient http, ObjectMapper objectMapper, TaskHistoryHelper taskHistoryHelper, WebhookManager webhookManager) {
 if member in self.member_cache and member not in db_members: db_members.append(self.member_cache[member]) continue if member not in self.member_cache_policies: try: # This is the default case, e.g. 'group/foobar' m_type, name = member.split('/', 1)
 import ( "context" "testing"  _ "github.com/influxdata/flux/builtin" "github.com/influxdata/flux/querytest" "github.com/influxdata/flux/semantic" "github.com/influxdata/flux/values" "github.com/influxdata/flux/stdlib/experimental/geo" ) func TestContainsLatLon_NewQuery(t *testing.T) {
 if count: return int(count) # If the variable is set then return exact listen count using count(*) for listens # corresponding to the user_name in the listen schema itself. if "PYTEST_CURRENT_TEST" in os.environ: query = "SELECT count(*) FROM listen WHERE user_name = :user_name" else: # Otherwise fetch the count from listen_count view. query = "SELECT SUM(count) FROM listen_count WHERE user_name = 
 // Execute shows the environments through the prompt. func (o *showEnvOpts) Execute() error { env, err := o.retrieveData() if err!= nil { return err }
 public IImmutableDictionary<string, long> UnitValueMap { get; } bool IDurationExtractorConfiguration.CheckBothBeforeAfter => _configuration.CheckBothBeforeAfter; Regex IDurationExtractorConfiguration.FollowedUnit => DurationFollowedUnit;
 } descriptions = uploadItem.getDescriptions(); setDescriptionsInAdapter(descriptions); }
 if err!= nil { return err } return printCACertsPEM(env.stdout, bundle.CaCerts) } stream, err := clients.r.ListFederatedBundles(ctx, &common.Empty{})
 errValueBadFormat                     = errors.New("value must start with a letter and contain only lower-case letters, numbers, and hyphens") errValueNotAString                    = errors.New("value must be a string") errValueNotAStringSlice               = errors.New("value must be a string slice") errValueNotAValidIPNet                = errors.New("value must be a valid IPNet") errValueNotIPNetSlice              
 keyboard->modifiers.latched = latched; keyboard->modifiers.locked = locked; keyboard->modifiers.group = group;  wlr_keyboard_notify_modifiers(keyboard); } static void keyboard_key_update(struct wlr_keyboard *keyboard,
 raise cmdexc.CommandError("Quickmark '{}' not found!".format(name)) @cmdutils.register(instance='command-dispatcher', scope='window') @cmdutils.argument('url', required=True) @cmdutils.argument('title', required=True) def bookmark_add(self, url=None, title=None, toggle=False): """Save the current page as a bookmark, or a specific url.
 // and their meanings are identical to the ones in LedgerSynchronousMode. AccountsRebuildSynchronousMode int `version[12]:"1"` // MaxCatchpointDownloadTime defines the maximum amount of time a client will be keeping the outgoing connection of a catchpoint download request open for processing before // shutting it down. Networks that have large catchpoint files, slow connection or slow storage could be a good reason to increase this value. Note
 G_CALLBACK (on_hifstate_percentage_changed), NULL); g_auto(RpmOstreeProgress) progress = { 0, }; rpmostree_output_progress_percent_begin (&progress, "Importing rpm repo metadata"); /* This will check the metadata again, but it *should* hit the cache; down * the line we should really improve the libdnf API around all of this.
 return nil }
 self.selinux = None self.disable_route_warning = False self.jit_enabled = False self.service_name = self.get_service_name() @staticmethod def get_service_name():
 String[] ct = getServerConfig(dataId, group, tenant, 3000L); cacheData.setContent(ct[0]); } lastCacheData = cacheData; if (cacheMap.size() % (int) ParamUtil.getPerTaskConfigSize() == 0) { cacheMap.remove(taskId); } }
 // Ask prompts the user for any required or important fields that are not provided. func (o *runTaskOpts) Ask() error { if err := o.askTaskFamilyName(); err!= nil { return errors.Wrap(err, "ask task family name") } if err := o.askEnvName(); err!= nil {
 ns:   maxNamespace, n:    maxName, uid:  testUID, want: fmt.Sprintf("cre-bkr_%s_%s_%s", maxNamespace, strings.Repeat("n", maxNameLength), testUID), }, { ns:   "default", n:    maxName, uid:  testUID, want: fmt.Sprintf("cre-bkr_default_%s_%s", strings.Repeat("n", 
 * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */ return static function (ContainerConfigurator $containerConfigurator): void { $containerConfigurator->services(); };
 data = test_pipeline(data) data = collate([data], samples_per_gpu=1) # just get the actual data from DataContainer data['img_metas'] = [img_meta.data[0] for img_meta in data['img_metas']] data['img'] = [img.data[0] for img in data['img']] if next(model.parameters()).is_cuda: # scatter to specified GPU data = scatter(dat
 </div> </div> <?php do_action( 'rocket_settings_tools_content', $this );?> <!-- Temporary hide the option. The logger can still be activated by adding the following to the wp-config.php file: define( 'WP_ROCKET_DEBUG', true ); <div class="wpr-tools">
 var amountAlertmanagers int32 = 3 alertmanager := &v1alpha1.Alertmanager{ ObjectMeta: metav1.ObjectMeta{ Name: "test-alertmanager", Namespace: "test", }, Spec: v1alpha1.AlertmanagerSpec{ Replicas: &amountAlertmanagers,
 // When you're dealing with local file storage, the paths will be different than S3 if  (env('FILESYSTEM_DISK')!='local') { $config['disks']['public'] = $config['disks']['default']; $config['disks']['public']['visibility'] = 'public'; } return $config;
 // Make sure we don't have an empty string left. if ($name === '') { $name = uniqid('node-'); } return $name;
 if (return_type.is_pyobject and (self.exception_value or self.exception_check) and self.exception_check!= '+'): # Exception clause is silently ignored for functions returning Python object. self.exception_check = False if return_type.is_int and self.exception_value is None and self.exception_check and self.exception_check!= '+': # Use an explicit exception return value to speed up exception checks.
 Enum for defining the Feature Names for all internal and CRP features """ class AgentFeature(object):
 }, }} className="gatsby-highlight"> <LiveProvider code={showJSX? code : compiledES6} mountStylesheet={false}> <LiveEditor onChange={this._onChange} /> </LiveProvider> </div> </div> {error && (
 } /** * Connect authenticated user as library card to his account. * * @param \Laminas\Http\PhpEnvironment\Request $request Request object * containing account credentials.
 Log.debug( "Unable to get user: no auth token on session." ); return null; } final String username = authToken.getUsername(); if (username == null || username.isEmpty())
 inputId++; } if (layoutManager.tv) { this.classList.add('emby-select-focusscale');
 package fr.free.nrw.commons; import fr.free.nrw.commons.contributions.model.DisplayableContribution; import fr.free.nrw.commons.contributions.model.contributor.Contributor; public interface DisplayableContributionHolder<T> { void init(int position, DisplayableContribution contribution); }
 An HDF5 daily pricing file. """ return cls({ country: HDF5DailyBarReader.from_file(h5_file[country]) for country in h5_file.keys() })
 },'sync.3.auth': { value: '', type: Setting.TYPE_STRING, public: false },'sync.1.context': { value: '', type: Setting.TYPE_STRING, public: false },'sync.2.context': { value: '', type: Setting.TYPE_STRING, public: false },
 }); }); it('should not log an error when setting tracked value to null', () => { const elm = createElement('x-foo-tracked-null', { is: SetTrackedValueToNull }); expect(() => document.body.appendChild(elm)).not.toLogErrorDev();
 contextValues.Body = new MemoryStream(bodyBytes); } private Request CreateRequest(string method, Url url, Action<BrowserContext> browserContext) { var context = new BrowserContext();
 options.keyboard_manager.enable(); options.keyboard_manager.command_mode(); } if (options.focus_button) { $(options.focus_button).focus(); } }); if (options.keyboard_manager) {
 "github.com/onflow/flow-go/model/convert" "github.com/onflow/flow-go/model/flow" ) func GenerateExecutionResultAndChunkDataPacks(
 """ self.log("serverdisconnect", "debug", [repr(self.server_conn.address)]) address = self.server_conn.address source_address = self.server_conn.source_address()[0].host self.server_conn.finish() self.server_conn.close() self.channel.tell("serverdisconnect", self.server_conn)
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4448-SEA 1645548240 1723219169</p> <hr> <p>Varnish cache server</p> </body>
 self.assertEqual(basename(test_data[trace]["path"][-1]).replace('.ab1', ''), record.name) self.assertEqual(test_data[trace]['seq'], str(record.seq)) self.assertEqual(test_data[trace]['qual'], record.letter_annotations['phred_quality']) self.assertEqual(test_data[trace]['sample'], record.id) self.assertEqual(test_data[trace]['sample_well'], record.annotations['sample_well']) self.assertEqual(test_data[trace]
 out.append(('pac+https://example.com/proxy.pac', 'Proxy autoconfiguration file URL')) return out class SearchEngineUrl(BaseType):
 json_data = [] with open(os.path.join( self._destination_path, self.HASHES_FILENAME), 'w') as write_file: for sha256, paths in self._report_output.items(): json_data.append({"sha256": sha256, "paths": paths}) json.dump(json_data, write_file)
 } } $plugins->run_hooks('copy_file_to_cdn_end', $success, $file_path, $uploaded_path); } return $success;
 return data; } private void handleClassOrInterface(ApexNode<?> node, Object data) { ApexDocComment comment = getApexDocComment(node); if (comment == null) {
 opts := f.Options().(*descriptorpb.FieldOptions) if nameMap := proto.GetExtension(opts, pb.E_MaskMapping).(*pb.MaskMapping);!proto.Equal(nameMap, &pb.MaskMapping{}) && nameMap!= nil { if _, ok := mapping[nameMap.GetThis()]; ok { return nil, errors.New(errors.InvalidParameter, op, fmt.Sprintf("duplicate mapping from field %q with the mapping key %q", f.
 return err } defer expectedFile.Close() fmt.Println(expectedFile.Name()) _, err = io.Copy(expectedFile, generatedFile) return err
 self.norm_cfg = norm_cfg self.loss_point = build_loss(loss_point) fc_in_channels = in_channels + num_classes self.fcs = nn.ModuleList() for k in range(num_fcs): fc = ConvModule( fc_in_channels, fc_channels, kernel_size=1, stride=1,
 """ def _get_new_resampler(key): return Resampler(self._dataframe[key]) from.series import Series
 Timer::~Timer() { delete _timer; _timer = nullptr; } bool Timer::valid() const
 ) const ( fluxcdNameLabel      = "name" fluxcdNameSpaceLabel = "namespace" )
 // AsFunc allows providers to expose provider-specific types. // See https://github.com/google/go-cloud/blob/master/internal/docs/design.md#escape-hatches // for more details. // Defaults to NoAs, meaning no provider-specific types are supported. AsFunc func(interface{}) bool  // AsFuncUnkeyed allows providers to expose provider-specific types. // See https://github.com/google/go-cloud/blob/master/internal/docs/design.md#escape-hatches // f
 // Rules defines list of rules to control gc strategy at resource level // if one resource is controlled by multiple rules, first rule will be used Rules []GarbageCollectPolicyRule `json:"rules,omitempty"` } // GarbageCollectPolicyRule defines a single garbage-collect policy rule
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4436-SEA 1645550895 1525624077</p> <hr> <p>Varnish cache server</p> </body>
 continue } handler.net.Relay(handler.ctx, protocol.TxnTag, wi.rawmsg.Data, false, wi.rawmsg.Sender) // restart the loop so that we could empty out the post verification queue. continue
 expectedServiceAccount *corev1.ServiceAccount wantCreates            []runtime.Object wantErrCode            codes.Code wantErr                error }{{ name: "k8s service account doesn't exist, create it", wantCreates: []runtime.Object{ NewServiceAccount(kServiceAccountName, testNS, gServiceAccountName),
 base = '%s_%s' % (product.id, stockrecord.id) if not options: return base repr_options = [(option['option'], option['value']) for option in options] repr_options.sort(key=lambda a: a['option']) return "%s_%s" % (base, zlib.crc32(repr(repr_options).encode('utf8'))) def _get_total(self, property):
 peers := bs.net.GetPeers(network.PeersPhonebookArchivers) if len(peers) == 0 { return errors.New(errorNoRedirectPeers) } // Get an http peer
 namespace { const std::bitset<256> objMnts1ShadowBitset = fheroes2::makeBitsetFromVector<256>( { 0, 5, 11, 17, 21, 26, 32, 38, 42, 45, 49, 52, 55, 59, 62, 65, 68, 
 SQLDO("CREATE UNIQUE INDEX `%1channel_info_id` ON `%1channel_info`(`server_id`, `channel_id`, `key`)"); SQLDO("CREATE TRIGGER `%1channel_info_del_channel` AFTER DELETE on `%1channels` FOR EACH ROW BEGIN DELETE FROM `%1channel_info` WHERE `channel_id` = old.`channel_id` AND `server_id` = old.`server_id`; END;"); SQLDO("C
 if acLastErr!= nil { return nil, acLastErr } return ds.Datastore.AppConfig(ctx), nil
 # check that slicing is possible try: self.u.trajectory[0] except AttributeError: raise ValueError("Trajectory must support slicing") self.h = hydrogens self.a = acceptors
 if ($this->save()) { event(new AssetCheckedOut($this, $target, Auth::user(), $note)); $this->increment('checkout_counter', 1); $this->increment('checkout_time', 1); return true;
 i := x.NewInbound() mctrl := gomock.NewController(t) router := transporttest.NewMapRouter() i.SetRouter(router) require.NoError(t, i.Start()) require.NoError(t, x.Start()) assert.Equal(t, tchannel.ChannelListening, ch.State())
 * * @since 5.8.0 * * @param array $global Global array. * @param WP_REST_Request $request Full details about the request. * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure. */
 import org.junit.jupiter.api.Disabled; import org.kie.kogito.testcontainers.quarkus.InfinispanQuarkusTestResource; @Disabled("[KOGITO-TICKETID] Currently not working in native mode (Quarkus 1.8 CR1 + GraalVM 20.2)") @NativeImageTest @QuarkusTestResource(InfinispanQuarkusTestResource.Conditional.class) class 
 }; } @Override @Deprecated public <M extends Metadata> Multimap<Method, MetadataHandler<M>> handlers( MetadataDef<M> def) { return ImmutableMultimap.of();
 import { useState, useMemo } from'react'; import Field from '@alifd/field'; import { scrollToFirstError, cloneAndAddKey } from './utils'; import { log } from '../util'; class NextField extends Field { static useField(options = {}) {
 from django.db.models.functions import Concat from django.conf import settings from pontoon.base.models import ( Entity, TranslatedResource, Translation, TranslatedObject, ) from pontoon.pretranslation.pretranslate import ( get_translations, update_changed_instances,
 std::string name ) { user = user; pass = pass; host = host; name = name;  uint32 self->errnum = 0; char   self->errbuf[MYSQL_ERRMSG_SIZE]; if (!Open(
 int s2n_stuffer_rewrite(struct s2n_stuffer *stuffer) { stuffer->write_cursor = 0; stuffer->read_cursor = 0; return 0; }
 v, err := cur.Value() if err!= nil { // Mask underlying errors. return Snapshot{}, fmt.Errorf("watch variable: %v", err) } return Snapshot{Value: v, UpdateTime: cur.UpdateTime()}, nil }
 # AppEngine APPENGINE = 'appengine' # KEngine KE_CLUSTER = 'ke' resource_types = frozenset([ ORGANIZATION,
 Index tensor """ def __init__(self, storage, scheme=None, index=None): if isinstance(storage, tuple): # handle DistTensor and node/edge ids in subgraphs self.storage = storage[0] self.index = storage[1] self.scheme = scheme if scheme else infer_scheme(self.storage) self.device = None else: self.storage = storage self.index = index self.scheme = scheme if scheme else infer_scheme(self.storage) self.device = None
 iterator_stmt = setgen.new_set_from_set( iterator_view, preserve_scope_ns=True, ctx=scopectx) ptr_target = inference.infer_type(iterator_stmt, ctx.env) if ptr_target.is_polymorphic(): raise errors.QueryError( 'FOR statement has iterator of indeterminate type',
 import org.apache.iceberg.io.CloseableIterable; public class FindFiles { private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS"); private static final int MAX_FILES = 10; public static Builder in(Table table) {
 try { dockerUtils.pull(task.getTaskInfo().getContainer().getDocker().getImage()); } catch (DockerException e) { throw new ProcessFailedException(String.format("Could not pull docker image due to error"), e); } }
 "github.com/onflow/flow-go/state/protocol" ) // DefaultEmergencySealingThreshold is the default number of blocks which indicates that ER should be sealed using emergency // sealing. const DefaultEmergencySealingThreshold = 400
 'Unable to read artifact definitions from: {0:s} with error:''{1!s}').format(custom_artifacts_path, exception)) setattr(configuration_object, '_artifacts_registry', registry) setattr(configuration_object, '_custom_artifacts_path', custom_artifacts_path)
 name: "no caller id", reqs: []string{workloadEntry.Id}, code: codes.Internal, err:  "failed to fetch registration entries: missing caller ID", expectLogs: []spiretest.LogEntry{ { Level:   logrus.ErrorLevel, Message: "Failed to fetch registration entries", Data: logrus.Fields{ logrus.ErrorKey: "no caller ID on context", }, }, },
 } @Override public Value atomize() throws XPathException { if (value == null) { value = SaxonXPathRuleQuery.getAtomicRepresentation(attribute.getValue()); } return value; }
 } } func newCRDVersionBackupItemAction(f client.Factory) veleroplugin.HandlerInitializer { return func(logger logrus.FieldLogger) (interface{}, error) { config, err := f.ClientConfig() if err!= nil {
 return None def _find_dep_file_path(main_file, file_path, is_include_file=False): abs_path = os.path.abspath(file_path) if not os.path.exists(abs_path): # files are looked up relative to the main source file rel_file_path = os.path.join(os.path.dirname(main_file), file_path) if os.path.exists(rel_file_path):
 new_weight = match.new_weight old_weight = old_match.new_weight # Always update the weight if the previous value is the default. This is # required to deal with specifications that are meant to set the weight above # 1.0. Otherwise, prioritize only the most penalizing match for this pairing. # # For example, if a specification sets the weight of a match to 1.0, and a # subsequent specification sets the weigh
 string: function (req, data, name, object, field, callback) { var test = self.apos.launder.string(data[name]); if (tinycolor(test).isValid()) { object[name] = test; } else { object[name] = null; }
 } public static void calculateAllSpeeds() { for (Entry<InetAddress, RendererConfiguration> entry : addressAssociation.entrySet()) { InetAddress sa = entry.getKey(); if (sa.isLoopbackAddress() || sa.isAnyLocalAddress()) { continue; } RendererConfiguration r = entry.getValue(); if (!r.isOffline()) { SpeedStats.getInstance().getSpeedInMBits(sa, r.getRendererName()); }
 private final ActionButtonCallback actionButtonCallback; private final ActionButtonUtils actionButtonUtils; private final boolean showOnlyNewEpisodes; private final WeakReference<MainActivity> mainActivity; public AllEpisodesRecycleAdapter(Context context, MainActivity mainActivity,
 import com.hazelcast.jet.core.ProcessorSupplier; import com.hazelcast.jet.core.processor.Processors; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestHighLevelClient; import java.util.ArrayList; import java.util.Collection; import java.util.HashMap;
 sig = ECDSA.sign(hashbuf, privateKey).set({ nhashtype: sighashType }); } return sig; } else { throw new Error('Signing method not supported:'+ signingMethod); } } /**
.miningParameters(node.getMiningParameters()).privacyParameters(node.getPrivacyParameters()).nodePrivateKeyFile(KeyPairUtil.getDefaultKeyFile(node.homeDirectory())).metricsSystem(NoOpMetricsSystem.INSTANCE).transactionPoolConfiguration(TransactionPoolConfiguration.builder().build()).rocksDbConfiguration(RocksDbConfiguration.builder().databaseDir(tempDir).build()).ethProtocolConfiguration(EthProtocolConfiguration.defaultConfig()).clock(Clock.systemUTC())
 shared_model::interface::TransactionBatch>> &value) { auto cache_presence = tx_presence_cache_->check(*value.value); if (not cache_presence) { // TODO: handle return; } auto is_replay = std::any_of(
 view.querySelector('.btnAudio').classList.add('hide'); } if (currentItem.Chapters.length > 1) { view.querySelector('.btnPreviousChapter').classList.remove('hide'); view.querySelector('.btnNextChapter').classList.remove('hide'); } else {
 // SignMask selects the sign bit of an IEEE 754 floating point // number. SignMask = (1 << (SignificandWidth + ExponentWidth)) // MinNormalExponent is the minimum exponent of a normalized // floating point: -1022
 """Custom astroid checker for config calls.""" import sys import yaml import pathlib import astroid from pylint import interfaces, checkers from pylint.checkers import utils OPTIONS = None
 using System; using System.Collections; using System.Collections.Generic; using System.Diagnostics; using System.Linq; using System.Reflection; using System.Runtime.CompilerServices; using System.Runtime.InteropServices; using System.Security.Permissions; using System.Security.Cryptography; using System.Text; using System.Threading; using System.Threading.Tasks; using Microsoft.Win32.SafeHandles; using UnityEngine; using UnityEngine.Events;
 for tab in self.widgets(): self._remove_tab(tab) def close_tab(self, tab, *, add_undo=True): """Close a tab. Args:
 */ TEST_F(ChainValidationTest, ValidWhenValidateChainFromOnePeer) { // Valid previous hash, has supermajority, correct peers subset => valid auto block = std::make_shared<Block>(); setupBlock(*block);  EXPECT_CALL(*supermajority_checker, hasSupermajority(_, _)).WillOnce(Return(true));
 ) var defaultTOTPSkew = 1 // ValidateTOTP validates and update TOTP configuration. func ValidateTOTP(configuration *schema.TOTPConfiguration, validator *schema.StructValidator) {
 <% if @ssl_protocol -%> SSLProtocol           <%= @ssl_protocol %> <% end -%> <% if @ssl_cipher -%> SSLCipherSuite        <%= @ssl_cipher %> <% end -%> <FilesMatch "\.(cgi|shtml|phtml|php)$">
 # -*- coding: utf-8 -*- from django import template from django.test import TestCase from django.utils import translation  from decimal import Decimal as D def render(template_string, ctx):
 # # @param [ Hash ] options # # @option options [ Hash ] :filter A filter on the collections returned. # @option options [ true, false ] :name_only A flag, when set to true, that allows a user without the #   required privilege to run the command when access control is enforced # #   See https://docs.mongodb.com/manual/reference/command/listCollections/
 NetworkBehaviour comp = components[i]; if (comp.IsDirty()) { dirtyComponents |= (ulong)(1L << i); } }
 LocalRepository localRepo = new LocalRepository(localRepoPath); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepo)); session.setOffline(this.offline); if (this.mavenProperties!= null) { session.setConfigProperty(AetherConstants.AETHER_CONNECT_TIMEOUT, this.mavenProperties.getConnectTimeout()); session.setConfigProperty(AetherConstants.AETHER_REQUEST_TIMEOUT, this.mavenProperties.getRequestTimeout()); } if (isProxyEnabled()) { DefaultProxySelecto
 } if (false === $input->getOption('admin') && ($options = $this->getGroups()) && 0!== \count($options)) { $answer = $this->askUserGroups($input, $output); $input->setOption('group', array_values(array_intersect_key(array_flip($options), array_flip($answer)))); }
 # Options for LaTeX output # ------------------------ # The paper size ('letter' or 'a4'). latex_paper_size = "letter"
 const msgsInReadBufferPerPeer = 10 var networkSentBytesTotal = metrics.MakeCounter(metrics.NetworkSentBytesTotal) var networkReceivedBytesTotal = metrics.MakeCounter(metrics.NetworkReceivedBytesTotal) var networkMessageReceivedTotal = metrics.MakeCounter(metrics.NetworkMessageReceivedTotal) var networkMessageSentTotal = metrics.MakeCounter(metrics.NetworkMessageSentTotal) var networkMessageQueueMicrosTotal = metrics.MakeCounter(metrics.MetricName{Name: "algod_netwo
 Write another test group for this field (e.g. F is `image` and f is `image.build`, write another test functions named `TestApplyEnv_Image_Build`) Expected Behaviors: - Exception: StringSlice in composite type should be overridden, not appended. Take `entrypoint` (which takes []string or string) as an example. If original is `[]string{1,2}`, and override is `[]string{
 /** * @brief Function with test cases for Horspool's algorithm * @returns void */ static void test(){ assert(strings::horspool::horspool("Hello World","World") == true);
 $query = $em ->createNativeQuery('select nt.* from kuma_node_translations nt join kuma_nodes n on n.id = nt.node_id where n.deleted = :deletedFalse and nt.lang = :lang and locate(nt.url, :url) = 1 order by length(nt.url) desc limit 1',
 // If prev is coinbase, check that it's matured if (coin.IsCoinBase()) { // Lock cs_utxo to prevent re-entrance to this block. // coin is only valid while held by this lock. CAmount nCoinOutValue = coin.out.nValue; int nCoinHeight = coin.nHeight;
 code.putln("/* --- Runtime support code --- */") def initialize_main_h_code(self): # h code can include utility code in a few cases so it needs to be insertable rootwriter = self.rootwriter for part in self.code_layout: if part.startswith("utility_code"): self.parts[part] = rootwriter.insertion_point() def finalize_main_c_code(self):
 // exchange headers if err := sendHeaders(ctx, headers, stream); err!= nil { return nil, fmt.Errorf("send headers: %w", err) }
 if err!= nil { return nil, err } prompt := prompt.New() spin := termprogress.NewSpinner() id := identity.New(sess) deployer := cloudformation.New(sess) cfg, err := profile.NewConfig() if err!= nil { return nil, err
 bool TxPool::insert(Transaction const& _tx) { h256 tx_hash = _tx.sha3(); if (m_txsHash.count(tx_hash)) { return false; }  TransactionQueue::iterator p_tx = m_txsQueue.emplace(_tx).first; m_txsHash[tx_hash] = p_tx; return true;
 mainWindow: BrowserWindow, cardanoNode:?CardanoNode, locale: string, isAppUpdateAvailable: boolean, ) => { const { ABOUT, BLOCK_CONSOLIDATION, DAEDALUS_DIAGNOSTICS } = DIALOGS; const { isMacOS, isBlankScreenFixActive } = environment; const translations = require(`../locales/${locale}`);
 ->onlyMethods(['getConnector', 'getIdentifier']) ->getMock(); $handlerMap = new HandlerMap(); $client = $client?? $this->createMock(HttpClient::class); $mockConnector = $this->getMockBuilder(\VuFindSearch\Backend\Solr\Connector::class) ->setConstructorArgs(['http://localhost:8983/solr/biblio', $handlerMap, $client]) ->onlyMethods(['write'])
 release.BannerUrl = new Uri(bannerurl); } release.PublishDate = DateTime.Parse(row.QuerySelector(".box_feltoltve2").InnerHtml.Replace("<br />", " "), CultureInfo.InvariantCulture); var sizeSplit = row.QuerySelector(".box_meret2").TextContent.Split(' '); release.Size = ReleaseInfo.GetBytes(sizeSplit[1].ToLower(), ParseUtil.CoerceFloat(sizeSplit[0])); var catlink = row.Qu
 return tags, nil } func (e *EnvDescriber) filterDeployedSvcs() ([]*config.Service, error) { allSvcs, err := e.configStore.ListServices(e.app) if err!= nil { return nil, fmt.Errorf("list services for app %s: %w", e.app, err)
 } } // Create the server int return_value = 0; Participant* pServer = Domain::createParticipant(*att, nullptr);
 '--theme-staking-stake-pools-search-icon-color': 'rgba(94, 96, 102, 1)', '--theme-staking-stake-pools-search-clear-button-background-color': 'rgba(68, 91, 124, 0.05)', '--theme-staking-stake-pools-search-separator-color': '#5e6066', }, staking: {
 e.message.should.match(/platform.* not compatible/) end it 'excludes subspec dependencies with incompatible platforms without' \ 'raising an error' do @podfile = Podfile.new do platform :osx, '10.10' pod 'AFNetworking', '2.4.1' # Has an 'AFNetworking/UIKit' iOS-only default subspec
 return ErrNoConnection } m.statusDisconnecting() m.disconnect()
 return Float64Measure{commonMetric: common}, err } // Configure is a helper that applies all the options to a returned Config. func Configure(opts []Option) Config { var config Config for _, o := range opts {
 public bool IsCardinalLast(string text) { var trimmedText = text.Trim(); return trimmedText.Equals("ultimo"); } public string Normalize(string text)
 { struct s2n_hash_state signature_hash; struct s2n_stuffer *in = &conn->handshake.io; struct s2n_blob serverECDHparams, signature; /* Read server ECDH params */ GUARD(s2n_ecc_read_ecc_params(&conn->pending.server_ecc_params, in, &serverECDHparams)); if (conn->actual_protocol_version == S2N
 ], ]; $extensions = isset($markdownSection->extensions)? array_map('trim', explode(',', $markdownSection->extensions)) : []; foreach ($extensions as $ext) { $extClass = sprintf(
 end def perl_version # this check is needed because safe_yaml parses the string 5.10 to 5.1 # so we have to compare to the real version config[:perl] if config[:perl] == 5.1 "5.10" else if config[:perl] == 5.2 "5.20" else "unknown" end end end end end
 return keybase1.GetTLFCryptKeysRes{}, err } tlfHandle, err := k.getHandleFromFolderName(ctx, query.TlfName, false) if err!= nil { return res, err
 def _apply(): if "apply_state" in self._optimizer._sparse_apply_args: train_op = self._optimizer._resource_apply_sparse( accum_gradient, var, indices, apply_state=apply_state, ) else: train_op = self._optimizer._resource_apply_sparse( accum_gradient, var, indices ) reset_op = accum_gradient.assign( tf.zeros_like(accum_gradient),
 """ if len(args) <= 0: # pylint: disable=len-as-condition args = sys.argv[1:] command, force, verbose, debug, conf_file_path, log_collector_mode = parse_args(args) if command == "version": version() elif command == "help":
 return errors.New("proof does not match") } if!c.Bool("write") { return errors.New("proof does not match") }  var xc kyber.Point key := c.String("key") if key == "" {
 run_keras_single_device('cpu', 0) @raises(Exception, "TF device and DALI device mismatch. TF*: CPU, DALI*: GPU for output*") def test_keras_wrong_placement_cpu(): with tf.device('cpu:0'): model = keras_model()
 search: { indexName: "developers-cloudflare", apiKey: "b23088ab4d346409f9d3ece6606344c3", algoliaOptions: { 'facetFilters': '["project:email-routing"]' } }, siteMetadata: { title: "Cloudflare Email Routing docs",
 content.body.stream.close(); response.rejectResponseStream(new Error("client disconnected")); } else { const idx = this.streamingResponseCounter; this.streamingResponseCounter += 1; const streamHandle = content.body.stream; const rawResponseStream = new ResponseStream(
 end Then(/^I should see projects with following details:$/) do |table| # table is a Cucumber::Core::Ast::DataTable projects = table.hashes projects.each do | project |
 <div class="calendar-text"> <%= @event.next_event_occurrence_with_time[:time].strftime('%A, %B %d, %Y') %><br/> <%= local_time(@event.next_event_occurrence_with_time[:time]) %> - <%= local_time(@event.instance_end_time) %> <% if @event.schedule.recurrence_rules.map { |rule| rule.class.name }.include?('IceCube::WeeklyRule') %> <p cl
 rescale (bool): If True, return boxes in original image space. Returns: Tensor: Labeled boxes in shape (n, 4), where the first 4 columns are bounding box positions (tl_x, tl_y, br_x, br_y) and the 5-th column is a score between 0 and 1. """ cfg = self.test_cfg if cfg is None else cfg cfg = copy.deepcopy(cfg)
 VisualNode->addObject(mapping); } else msg_error(this) << "Error: mapping visual not possible"; return VisualNode; }
 // request from network data, err := s.retrieval.RetrieveChunk(ctx, addr) if err!= nil { targets := ctx.Value(api.TargetsContextKey{}) if s.recoveryCallback!= nil && targets!= "" && targets!= nil { // TODO: we should not add a new context key here. Instead, // we should add a new parameter to the recovery callback // and then call it from the api layer. // // This is
 } scope :owned_by, lambda { |username| where('accounts.username =?', username) } # Search
 func BenchmarkBrowseWriteJSON(b *testing.B) { fsrv := new(FileServer) fsrv.Browse = &Browse{ TemplateFile: "", template:     template.New("test"), } listing := browseListing{ Name: "test", Path: "test",
 } /* add date: if it's missing from the response */ if (h2o_find_header(&req->res.headers, H2O_TOKEN_DATE, 0)!= -1) h2o_resp_add_date_header(req); return 0;
 // Notify the PeerList that it will stop receiving requests Stop() error // Choose a Peer for the next call.  This call blocks until a peer is available. ChoosePeer(context.Context, *Request) (Peer, error) }
 <li><%= link_to 'Learn Chef', learn_chef_url, target: '_blank' %></li> <li><%= link_to 'Docs', chef_docs_url, target: '_blank' %></li> <li><%= link_to 'Training', chef_training_url, target: '_blank' %></li> <li><%= link_to 'Join Chef Commuity Slack', chef_community_slack_url, tar
 if labels.numel() == 0: return bboxes, labels out_bboxes, keep = batched_nms(bboxes[:, :4].contiguous(), bboxes[:, -1].contiguous(), labels, cfg.nms_cfg) out_labels = labels[keep]
 assert len(parts.dml_ctes) == 1 cte = next(iter(parts.dml_ctes.values()))[0] relctx.add_type_rel_overlay( ir_stmt.subject.typeref, 'union', cte, dml_stmts=dml_stack, path_id=ir_stmt.subject.path_id, ctx=ctx) elif isinstance(ir_stmt, irast.DeleteStmt): relctx.add_type_rel_overlay(
 * Stores all nearby places found and related users response for * each place while uploading media */ public static HashMap<Place,Boolean> nearbyPopupAnswers; @SuppressLint("CheckResult") @Override
 def hey(words): pass
 */ package org.kie.kogito; /** * Marker interface to identify a KogitoConfig (i.e. ProcessConfig,...) */ public interface KogitoConfig { }
 export const productsGalleryItemName = '[data-cy="CategoryContent-root"] [data-cy="GalleryItem-name"], [data-cy="SearchPage-root"] [data-cy="GalleryItem-name"]'; export const productsNoProductsFound = '[data-cy="CategoryContent-root"] [data-cy="NoProductsFound-root"], [data-cy="SearchPage-noResult"]';
 new ExtensionAttribute(ATTRIBUTE_FORM_FIELD_VALIDATION), new ExtensionAttribute(ATTRIBUTE_TASK_SERVICE_EXTENSIONID), new ExtensionAttribute(ATTRIBUTE_TASK_USER_SKIP_EXPRESSION), new ExtensionAttribute(ATTRIBUTE_TASK_ID_VARIABLE_NAME)); public UserTaskXMLConverter() {
 */ package org.apache.accumulo.test.functional; import static org.apache.accumulo.core.conf.Property.TABLE_CRYPTO_KEY_MANAGER; import static org.apache.accumulo.core.conf.Property.TABLE_CRYPTO_PREFIX; import org.apache.accumulo.core.cli.BatchWriterOpts; import org.apache.accumulo.core.cli.ScannerOpts;
 # # @since 2.4.0 def changes _changes = changes.with_indifferent_access end # Call this method after save, so the changes can be properly switched.
 Parameters ---------- G : NetworkX graph A graph source : node in `G` distance : the distance of the wanted nodes from `source`
 return selection # Second Legendre polynomial lg2 = lambda self,x : (3*x*x - 1)/2 # Legendre polynomials are even functions, so their # coefficients are real.  The real part of the # coefficients is the first coefficient.  The # coefficients are real, so the real part is the # first coefficient. lg2.real = 0 lg2.imag = 1 def run(self, **kwargs): """
 c = CacheClass() self.assertEqual(2, c.foo(1)) self.assertEqual(3, c.foo(2)) self.assertListEqual([ (1,), (1,), (2,), ], c.called) def test_name_clash(self):
 import java.util.Collections; import java.util.List; import software.amazon.awssdk.annotations.Generated; import software.amazon.awssdk.annotations.SdkInternalApi; import software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler;
 } } // View can be used in: MediaType // View adds a new view to a media type. A view has a name and lists attributes that are // rendered when the view is used to produce a response. The attribute names must appear in the // media type definition. If an attribute is itself a media type then the view may specify which
 // bultin transport, and instead use a lossy shim layer variant. auto testTransport = std::make_shared<test_UDPv4TransportDescriptor>(); testTransport->sendBufferSize = 1024; testTransport->maxMessageSize = 65536; // We drop 20% of all data frags testTransport->dropDataFragMessagesPercentage = 20;
 public const string SpecialDayRegex = @"\b((d?o\s+)?(dia\s+antes\s+ontem|antes\s+de\s+ontem|anteontem)|((d?o\s+)?(dia\s+|depois\s+|dia\s+depois\s+)?de\s+amanh[aã])|(o\s)?dia\s+seguinte|(
 for (Entry<Class<? extends RelNode>, Collection<RelNode>> e : result.asMap().entrySet()) { resultCount.put(e.getKey(), e.getValue().size()); } assertThat(resultCount, equalTo(expected)); } @Test public void testNodeTypeCountSample() {
 package com.hazelcast.jet.core; import com.hazelcast.test.JetTestSupport; import com.hazelcast.jet.JetInstance; import com.hazelcast.jet.Job; import com.hazelcast.jet.Observable; import com.hazelcast.jet.function.Observer;
 public void ethPeerIsMissingResultInNoUpdate() { when(ethPeers.peer(any())).thenReturn(null); when(ethPeers.peer(anyLong())).thenReturn(null); final SynchronizerUpdater updater = new SynchronizerUpdater(ethPeers); updater.updatePeerChainState(1, createAnonymousPeerConnection());
 case pb.ExecutionStage_EXECUTING: c.state.LogBuildResult(tid, target.Label, core.TargetBuilding, "Building...") case pb.ExecutionStage_COMPLETED: // The build result will be logged in build/build_step.go return case pb.ExecutionStage_FAILED: // The build result will be logged in build/build_step.go return } } else { switch metadata.Stage {
 def handle_put_rule(data): schedule = data.get('ScheduleExpression') enabled = data.get('State')!= 'DISABLED' if schedule: job_func = get_scheduled_rule_func(data)
 StreamBase & Skill::operator<<( StreamBase & msg, const Primary & skill ) { return msg << skill.attack << skill.defense << skill.power << skill.knowledge; } StreamBase & Skill::operator>>( StreamBase & msg, Primary & skill ) { return msg >> skill.attack >> skill.defense >> skill.power >> skill.knowledge; } StreamBase & Skill::operator>>( StreamBase & sb, Secondary & st )
 // 0 and 2, but block 0 points further than 2. // This needs to be handled correctly. func TestOptimizeMiddle(t *testing.T) { const numBlock := 9 local := onet.NewLocalTest(cothority.Suite) defer local.CloseAll()
 """Mark all notifications of the currently logged in user as read""" request.user.notifications.mark_all_as_read() utm_source = request.GET.get("utm_source") log_ux_action( action_type="mark_all_notifications_as_read", experiment="Notifications 1.0", data={"utm_source": utm_source}, ) return JsonResponse({"status": True})
 for _, opt := range modalOpts { if _, exists := results[opt.Name]; exists { return nil, errors.New("error: multiple values provided for `" + opt.Name + "'") } results[opt.Name] = ""
 sym_g.ndata[key] = g.ndata[key] g = sym_g dgl.distributed.partition_graph(g, args.dataset, args.num_parts, 'data', part_method=args.part_method, balance_ntypes=balance_ntypes, balance_edges=args.balance_edges) print(profiler.output_text(unicode=True, color=True))
 */ public class DBWriter { private static final String TAG = "DBWriter"; private static final ExecutorService dbExec;
 * Serializes an AST or a partial AST to JSON. */ public class JavaParserJsonSerializer { private static final String AST_NODE_TYPE = "astNode";  public void serialize(Node node, JsonGenerator generator) { requireNonNull(node); Log.info("Serializing Node to JSON.");
 scope = if params[:starred].present? scope.starred elsif params[:archive].present? scope = scope.archived else scope = scope.inbox end @types               = scope.distinct.group(:subject_type).count
 startTime = &parsed } if opts.Duration!= nil && parsed.After(startTime.Add(*opts.Duration)) { break } endTime = parsed if opts.MaxEntries!= nil && len(entries) >= *opts.MaxEntries { break } entry.TimestampUnix = parsed.Unix()
 # Purpose # This code example demonstrates how to upload an object to a bucket in # Amazon Simple Storage Service (Amazon S3), and how to associate specified # metadata with the uploaded object. # snippet-start:[s3.ruby.s3-ruby-example-upload-item-with-metadata]
 </div> <div class="card-body p-0"> <div class="row"> <div class="col-sm-3 col-3"> <div class="description-block border-right"> <h1 style="color:purple"><%= @impact_metrics.dig("agency", "family_zipcodes_list")&.join(", ") %> </h1> <h5>Families served</h5>
 }; render() { const { apiBase, children, routerProps, using: Router } = this.props; return ( <Router {...routerProps}>
 } /** * @brief Save the current screen to a screen??.PCX (00-99) in file if available, then make the screen red for 200ms. */ void CaptureScreen() {
 }) encoder := zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig()) core := zapcore.NewCore(encoder, zapcore.Lock(os.Stderr), enabler) DefaultLogger = func(ctx context.Context) *zap.Logger { return zap.New(core) } }
 { // Create a committer and recursively delete all the associated LocalNodes, and their associated transfer and file objects. // If any have transactions in progress, the committer will ensure we update the transfer database in an efficient single commit. DBTableTransactionCommitter committer(client->tctable); localroot.reset(); }
 "errors" ) // Trie implements the merkle prefix tree described in the coniks paper. type Trie struct { nonce []byte
 public function up() { // This artisan call may take a while $output = Artisan::call('snipeit:counter-sync'); \Log::info($output);
 func (cmd DiffCmd) createArgParser() *argparser.ArgParser { ap := argparser.NewArgParser() ap.SupportsFlag(SQLFlag, "s", "Output diff as a SQL patch file of {{.EmphasisLeft}}INSERT{{.EmphasisRight}} / {{.EmphasisLeft}}UPDATE{{.EmphasisRight}} / {{.EmphasisLeft}}DELETE{{.EmphasisRight}} statements") ap.SupportsStr
 func (b *Broadcast) handleContactNodes(msg struct { *sda.TreeNode ContactNodes }) error { dbg.Lvl3(b.Info(), "Received message from", msg.TreeNode.String()) if msg.TreeNode.Id == b.Root().Id { dbg.Lvl3(b.Info(), "Contacting everybody")
 private final Schema schema; private final List<PartitionField> fields = Lists.newArrayList(); private final Set<String> partitionNames = Sets.newHashSet(); private Map<String, PartitionField> partitionCollisionFields = Maps.newHashMap(); private int specId = 0; private final AtomicInteger lastAssignedFieldId = new AtomicInteger(PARTITION_DATA_ID_START - 1);
 //noinspection unchecked NodeList<ImportDeclaration> modifiableList = new NodeList<>(n); modifiableList.sort( comparingInt((ImportDeclaration importDeclaration) -> importDeclaration.isStatic()? 0 : 1).thenComparing(NodeWithName::getNameAsString)); for (Object node : modifiableList) { ((Node) node).accept(this, arg);
 } /** * @dataProvider data_test_wp_is_json_content_type * @ticket 38350 */ public function test_wp_is_json_content_type( $input, $expected ) {
 req.Header.Set("Accept", "application/json") rec := httptest.NewRecorder() code, _ := b.ServeHTTP(rec, req) if code!= http.StatusOK { t.Fatalf("In test %d: Wrong status, expected %d, got %d", i, http.StatusOK, code)
 $this->create_authors( $this->config['urls']['authors'] ); require_once WP_ROCKET_PLUGIN_ROOT. 'inc/common/purge.php'; }
 if k.PrivateId == "" { return fmt.Errorf("database key vet for write: missing private id: %w", db.ErrInvalidParameter) } return nil }
 * * This program uses a more efficient logic to rotate the array as each element * is roated d times in only single iteration. This uses less time for more long * arrays. * * In this program, we will be using the concept of cyclic rotation. * * To rotate the array, we will be making a new array and copying all the elements * of the old array to it. * * We will be using the form
 type SnapshotOptions struct { Host  string Paths []string JSON  bool } var snapshotOptions SnapshotOptions
 <form role="search" method="get" class="search-form form-inline" action="<?php echo esc_url(home_url('/'));?>"> <div class="input-group"> <input type="search" value="<?php echo get_search_query();?>" name="s" class="search-field form-control" placeholder="<?php _e('Search', 'roots');?> <?php bloginfo('name');?>"> <label class="hide"><?php _e
 } type testT struct { builder *testpkg.Builder request *v1alpha1.CertRequest checkFn     func(*testpkg.Builder,...interface{}) expectedErr bool
 ctx := context.Background() account, err := c.client.GetAccount(ctx, accountAddress) if err!= nil { return nil, fmt.Errorf("could not get account: %w", err) } return account, nil
 if (IsTileType(tile, MP_STATION) || IsTileType(tile, MP_INDUSTRY)) { const Station *st = nullptr; if (IsTileType(tile, MP_STATION)) { st = Station::GetByTile(tile); } else { const Industry *in = Industry::GetByTile(tile);
 Auth: Auth{ Type: AuthTypeNone, }, InClusterURL: "http://grafana.istio-system:3000", Enabled:      true, IsCore:       false, }, Istio: IstioConfig{ ComponentStatuses: ComponentStatuses{
 def assertAlmostEqualList(self, list1, list2, **kwargs): self.assertEqual(len(list1), len(list2)) for i, val in zip(list1, list2): self.assertAlmostEqual(val, list2[i], **kwargs) def test_nucleotides(self): filename = "GFF/multi.fna"
 var _ tracesdk.SpanExporter = (*Exporter)(nil) var _ metricsdk.Exporter = (*Exporter)(nil) func newConfig(opts...ExporterOption) Config { cfg := Config{ numWorkers:        DefaultNumWorkers,
 'root': { 'level': logging.DEBUG, 'handlers': ['console', 'file', 'errors'], 'port': DEFAULT_SOCKET_LOGGING_PORT }, }
 public HttpResponse handleException(RequestContext ctx, HttpRequest req, Throwable cause) { ZipkinHttpCollector.metrics.incrementMessagesDropped(); String message = cause.getMessage()!= null? cause.getMessage() : ""; if (cause instanceof IllegalArgumentException) { return HttpResponse.of(BAD_REQUEST, MediaType.ANY_TEXT_TYPE, message); } else { return HttpResponse.of(INTERNAL_SERVER_ERROR, MediaType.ANY_TEXT_TYPE, cause.getMessage()); } }
 request = self.client.objects().get_media(bucket=bucket, object=obj) downloader = http.MediaIoBaseDownload(fp, request, chunksize=chunksize) downloader.download() return return_fp
 def get_commited_votes(self, bigchain, election_pk=None): if election_pk is None: election_pk = self.to_public_key(self.id) txns = list(backend.query.get_received_votes_for_election(bigchain.connection, self.id, election_pk)) return self.count_votes(election_pk, txns, get_operation) @classmethod
 """ Checks iterator stop condition, gets DALI outputs and perform reset in case of StopIteration """ if self._size > 0 and self._counter >= self._size: if self._auto_reset: self.reset() raise StopIteration
 class IntervalDomain(dbops.Domain): def __init__(self) -> None: super().__init__( name=('edgedb', 'duration_t'), base='duration', constraints=( dbops.DomainCheckConstraint( domain_name=('edgedb', 'duration_t'), expr=r''' EXTRACT(months from VALUE) = 0 AND EXTRACT(years from VALUE) = 0 AND
 } public R startsWith(BoundReference<String> ref, Literal<String> lit) { throw new UnsupportedOperationException(); } public <T> R predicate(BoundPredicate<T> pred) {
 * @param UserInterface|string|null $user The new user, or user's UUID * @api */ public function setOwner(?string $user): void { // Note: We need to do a bit of uuid juggling here, because we can't bind the workspaces Owner to a specific // implementation, and creating entity relations via interfaces is not supported by Flow. Since the property
 if util.verify_vote_signature(block, vote): return block else: raise ImproperVoteError('Block {block_id} already has an incorrectly signed vote''from public key {me}').format(block_id=block['id'], me=self.me) # Run the plugin block validation logic
 } func (m *Mutation) UpdateUserContactMethod(ctx context.Context, input graphql2.UpdateUserContactMethodInput) (bool, error) { err := withContextTx(ctx, m.DB, func(ctx context.Context, tx *sql.Tx) error { cm, err := m.CMStore.FindOneTx(ctx, tx, input.ID)
 type Headers struct { // This representation allows us to make zero-value valid items map[string]string // map from canonicalized key to original key originalNames map[string]string } // NewHeaders builds a new Headers object.
 return fr, nil } func fetchFederationRelationship(tx *gorm.DB, trustdomain string) (*datastore.FederationRelationship, error) { var model FederatedTrustDomain err := tx.Find(&model, "trust_domain =?", trustdomain).Error switch { case errors.Is(err, gorm.ErrRecordNotFound): return nil, nil
 @classmethod def materialize(cls, future): """ Materialize data matching `future` object. Parameters ----------
 private void performMapReadyActions() { if (((MainActivity)getActivity()).activeFragment == ActiveFragment.NEARBY && isMapBoxReady) { if(!applicationKvStore.getBoolean("DoNotAskForLocationPermission", false) || PermissionUtils.hasPermission(getActivity(), Manifest.permission.ACCESS_FINE_LOCATION)){ checkPermissionsAndPerformAction(); }else{
 if self._multi_etype: assert isinstance(val, dict), \ 'Current HeteroEdgeDataView has multiple edge types,'\ 'please passing the edge type and the corresponding data through a dict.' if not isinstance(val, dict): raise TypeError('val should be a dict.') for (etype, data) in val.items(): etid = self._graph.get_etype_id(etype) self._graph._set_e_
 } ] ) _await_stack_completion(stack_name) resp = cfn.describe_stacks(StackName=stack_name) stack_outputs = [stack['Outputs'] for stack in resp['Stacks'] if stack['StackName'] == stack_name]
 WriteRelabelConfigs []RelabelConfig `json:"writeRelabelConfigs,omitempty"` //BasicAuth for the URL. BasicAuth *BasicAuth `json:"basicAuth,omitempty"` // Bearer token for remote write. BearerToken string `json:"bearerToken,omitempty"` // File to read bearer token for remote write. BearerTokenFile string `json:"bearerTokenFile,omitempty"`
 $oldString = $string; $string = $handler->createBoostQueryString($string); if ($string!== $oldString) { // If a boost was added, we don't want to highlight based on // the boost query, so we should use the non-boosted version: $params->set('hl.q', $oldString); } } } elseif ($handler->hasDismax()) {
 if g.Pkg!= "main" { return } pwd, err := os.Getwd() if err!= nil { return }
 subnetsFlagDescription        = "Optional. The subnet IDs for the task to use. Can be specified multiple times." securityGroupsFlagDescription = "Optional. The security group IDs for the task to use. Can be specified multiple times." envVarsFlagDescription        = "Optional. Environment variables specified by key=value separated with commas." commandFlagDescription        = `Optional. The command that is passed to "docker run" to override the default comm
 ->getRepository('WallabagCoreBundle:Entry') ->findByUrlAndUserId($this->url, $this->getLoggedInUserId()); $this->assertInstanceOf('Wallabag\CoreBundle\Entity\Entry', $content); $this->assertEquals($this->url, $content->getUrl()); $this->assertContains('Google', $content->getTitle()); $this->assertEquals(new \DateTime('2015-03
 /// <param name="logEvent">Logging event.</param> protected override void Append(StringBuilder builder, LogEventInfo logEvent) { builder.AppendFormat(logEvent.FormatProvider, "{0}", MappedDiagnosticsContext.GetObject(this.Item)); } } }
 tablet.computeNumEntries(); tablet.setLastCompactionID(compactionId); t2 = System.currentTimeMillis();
 "Kokkos::Experimental::SYCL::fence: Unnamed Instance Fence"); } void SYCL::impl_static_fence(const std::string& name) { // guard accessing all_queues std::lock_guard<std::mutex> lock(Impl::SYCLInternal::mutex); for (auto& queue : Impl::SYCLInternal::all_queues) Impl::SYCLInternal::fence(**queue);
 var isDozen = false; var isPair = false; char roundNumberZero = '零'; char[] roundNumberTen = null; if (Config.DozenRegex.IsMatch(intStr)) {
 } /* eslint-enable indent */ export default DirectoryBrowser;
 if (auto dirs = caf::get_if<std::vector<std::string>>( // &cfg, "vast.plugin-dirs")) result.insert(dirs->begin(), dirs->end()); if (auto dirs = caf::get_if<std::vector<std::string>>( // &cfg, "vast.plugin-paths")) result.insert(dirs->begin(), dirs->end()); return result; }
 corev1 "k8s.io/api/core/v1" metav1 "k8s.io/apimachinery/pkg/apis/meta/v1" "k8s.io/apimachinery/pkg/types" ) const ( // ApiServerSourceCreateProbeEventType is the CloudEvent type of forward // ApiServerSource add probes. ApiServerSourceCreateProbeEventType = "apiserversource-probe-create" // ApiServerSourceUpdateProbeEventType is the CloudEvent type of forward
 consumer_to_locate = find_consumer(consumer_arn, consumer_name, stream_arn) if(not consumer_to_locate): error_msg = 'Consumer %s not found.' % (consumer_arn or consumer_name) return simple_error_response(error_msg, 400, 'ResourceNotFoundException')
 { $this->validate($strFile); $this->mkdir(\dirname($strFile)); return fopen($this->strRootDir. '/'. $strFile, $strMode); }
 RESULT_GUARD(s2n_pkey_size(pkey, &maximum_signature_length)); RESULT_GUARD_POSIX(s2n_alloc(&sign->signature, maximum_signature_length)); /* If signature validation mode is S2N_ASYNC_PKEY_VALIDATION_STRICT * then use local hash copy to sign the signature */ if (op->flags & S2N_ASYNC_PKEY_VALIDATION_STRICT) { DEFER_CLEANUP(struct s2n_hash_state 
 func (i *ipset) Create(ipsetName Name, ipsetType Type) error { args := []string{"create", string(ipsetName), string(ipsetType)} if ipsetType == ListSet && i.maxListSize > 0 { args = append(args, "size") args = append(args, fmt.Sprintf("%d", i.maxListSize)) } if i.enableComments { args = append(args, "comment")
 # limitations under the License. """Wrapper for Admin Directory  API client.""" from googleapiclient import errors from google.cloud.forseti.common.gcp_api import _base_repository from google.cloud.forseti.common.gcp_api import api_helpers
 } func write64(suite abstract.Suite, wc io.WriteCloser, data...interface{}) error { if err := suite.Write(wc, data); err!= nil { return err } return wc.Close() } // WriteSecret64 converts a secret key to a Base64-string
 */ public function getAdminLocale(): string { if (!in_array($this->adminLocale, $this->getLocalesOfAllDomains(), true)) { throw new AdminLocaleNotFoundException($this->adminLocale, $this->getLocalesOfAllDomains()); } return $this->adminLocale; } /**
 } public void saveResult(Optional<Integer> statusCode, Optional<String> responseBody, Optional<String> errorMessage, Optional<Throwable> throwable) { boolean inStartup = throwable.isPresent() && throwable.get() instanceof ConnectException; try { SingularityTaskHealthcheckResult result = new SingularityTaskHealthcheckResult(statusCode, Optional.of(System.currentTimeMillis() - startTime), startTime, responseBody,
 if!d.shouldDescend(v1, v2) { return d.sendDiff(ctx, Difference{Path: nil, ChangeType: types.DiffChangeModified, OldValue: v1, NewValue: v2}) } else { d.GoCatchPanic(func() error { return d.diff(ctx, nil, v1, v2) }) return d.Wait()
 DialogUtil.showAlertDialog(getActivity(), getString(R.string.upload_problem_image), errorMessageForResult, getString(R.string.upload), getString(R.string.cancel), () -> { uploadItem.setImageQuality(ImageUtils.IMAGE_KEEP); onNextButtonClicked();
 dtypes: A `List` of `tf.DType` with the expected output types devices: A `List` with the indexes of the devices to use prefetch_queue_depth: `int` with the amount of prefetched batches num_threads: `int` with the number of reader threads in the pipeline per GPU """ super(DALIDataset, self).__init__()
 @pytest.mark.parametrize('task', tasks) @pytest.mark.parametrize('output', ['array', 'dataframe']) @pytest.mark.parametrize('eval_sizes', [[0.5, 1, 1.5], [0]]) def test_eval_set_no_early_stopping(task, output, eval_sizes, client): # Use larger trainset to prevent premature stopping due to zero loss, causing num_trees() < n_estimators. # Use smal
 double max_applied_impulse = m_use_multi_dof_params? m_maxAppliedImpulseMultiDof[row % 3] : m_maxAppliedImpulse; fillMultiBodyConstraint(constraintRow, data, 0, 0, constraintNormalAng, btVector3(0,0,0), dummy, dummy, posError, infoGlobal, -max_applied_impulse, max_applied_imp
 modal_obj.on('shown.bs.modal', function(){ editor.refresh(); }); modal_obj.on('hide.bs.modal', function(){ options.edit_metadata_button? options.edit_metadata_button.focus() : ""; }); }; var edit_attachments = function (options) {
 #endif // default actor batch size #define ACTOR_DEFAULT_BATCH 100 // Ignore padding at the end of the type. pony_static_assert((offsetof(pony_actor_t, gc) + sizeof(gc_t)) ==
 func setGrubCfgAdditional(grubPath string, kernelCommandline configuration.KernelCommandLine) (err error) { const ( extraPattern = "{{.ExtraCommandLine}}" sedDelimiter = ";" ) err = sed(extraPattern, kernelCommandline.ExtraCommandLine, kernelCommandline.GetSedDelimeter(), grubPath)
 */ #ifdef _WIN32 #include <ws2tcpip.h> #else #include <arpa/inet.h> #include <netdb.h>
 const RUNTIME_FLAGS_IDENTIFIER = 'runtimeFlags'; function validate(memberExpressionPath, { featureFlags, opts }) { const name = memberExpressionPath.node.property.name; const value = featureFlags[name] || opts.binding.defaultReferencePaths; if (!/^[A-Z_]+$/.test(name)) { throw new Error( `Invalid feature flag "${name}". Flag name must only be composed of uppercase letters and underscores.`
 QueryString name_editbox;     ///< Client name editbox. QueryString filter_editbox;   ///< Editbox for filter on servers GUITimer requery_timer;       ///< Timer for network requery bool show_query_owner;       ///< Did we ever press "Show Query Owner" button? int lock_offset; ///< Left offset for lock icon. int blot_offset; ///< Left offset for green/yellow/red compatibility icon.
 /* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 ABOUT THIS NODE.JS EXAMPLE: This sample is part of the SDK for JavaScript Developer Guide (scheduled for release September 2020) at https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/ses-examples-receipt-rules.html. Purpose:
 try: with timescale.engine.connect() as connection: result = connection.execute(sqlalchemy.text("SELECT SUM(count) FROM listen_count")) count = int(result.fetchone()["sum"]) except psycopg2.OperationalError as e: self.log.error("Cannot query timescale listen_count: %s" % str(e), exc_info=True) raise
 agent_details = { "agent_name": AGENT_NAME, "goal_state_version": str(GOAL_STATE_AGENT_VERSION), "python_version": "Python: {0}.{1}.{2} ({3})".format(PY_VERSION_MAJOR, PY_VERSION_MINOR, PY_VERSION_MICRO, sys.platform), "crp_supported_features": [name for name, _ in get_agent_supported_features_list_for_crp().items()], "extension_supported_featu
 } final LazyKafkaWorkers kafkaWorkers; private final Properties properties; private AdminClient adminClient; private KafkaCollector(Builder builder) { kafkaWorkers = new LazyKafkaWorkers(builder);
 } TokenEntry cpdToken = new TokenEntry(token.getImage(), filename, token.getBeginLine(), token.getBeginColumn(), token.getEndColumn()); tokenEntries.add(cpdToken); } } catch (Exception e) {
 public static boolean isPrime(long val) { return API.Match(val).of( Case($(2L), true), Case($(n -> n > 2), n ->!primes().takeWhile(d -> d <= Math.sqrt(n)).exists(d -> n % d == 0)), Case($(), false) ); }
 import org.flowable.engine.impl.persistence.entity.DeploymentEntity; import org.flowable.engine.impl.repository.AddAsNewDeploymentMergeStrategy; import org.flowable.engine.impl.repository.AddAsOldDeploymentMergeStrategy; import org.flowable.engine.impl.repository.MergeByDateDeploymentMergeStrategy; import org.flowable.engine.impl.repository.MergeMode; import org.flowable.engine.impl.repository.VerifyDeploymentMergeStrategy; import org.flowable.engine.impl.util.CommandContextUtil; import org.flowa
 return RateLimiter(FLAGS.max_admin_api_calls_per_day, self.DEFAULT_QUOTA_TIMESPAN_PER_SECONDS) def get_group_members(self, group_key): """Get all the members for specified groups. Args: group_key: A group key, e.g. it's email address. Returns: A list of member objects from the API.
 statusReporterStruct: newStatusReporterStruct(), Router:               r, } h.overlay = NewOverlay(h) h.serviceManager = newServiceManager(h, h.overlay) h.statusReporterStruct.RegisterStatusReporter("Status", h)
 * * @return array<string,mixed> */ function getForwardParameters($request) { $reservedGetValues = array( 'token',
 return model def _tabs(*, win_id_filter=lambda _win_id: True, add_win_id=False, cur_win_id=0): """Helper to get the completion model for tabs/other_tabs. Args:
 public static void ingest(AccumuloClient c, Opts opts, BatchWriterOpts batchWriterOpts) throws MutationsRejectedException, IOException, AccumuloException, AccumuloSecurityException, TableNotFoundException, TableExistsException { ingest(c, c.getHadoopConfiguration(), opts, batchWriterOpts); } }
 if req.GlobalConfig.TrustDomain == "" { return nil, msiError.New("global configuration missing trust domain") } p.trustDomainLock.Lock() p.trustDomain = req.GlobalConfig.TrustDomain p.trustDomainLock.Unlock() if len(config.Tenants) == 0 { return nil, msiError.New("configuration must have at least one tenant")
 private final Logger PROCESS_LOG = LogManager.getLogger("tech.pegasys.pantheon.SubProcessLog"); private final Map<String, Process> pantheonProcesses = new HashMap<>(); private ExecutorService outputProcessorExecutor = Executors.newFixedThreadPool(1); ProcessPantheonNodeRunner() { Runtime.getRuntime().addShutdownHook(new Thread(this::shutdown));
 } } // Origin can be used in: Resource, API // Origin defines the CORS policy for a given origin. The origin can use a wildcard prefix // such as "https://*.mydomain.com". The special value "*" defines the policy for all origins // (in which case there should be only one Origin DSL in the parent resource).
 package apis import ( operatorsv1 "github.com/operator-framework/api/pkg/operators/v1" operatorsv1alpha1 "github.com/operator-framework/api/pkg/operators/v1alpha1" operatorsv1alpha2 "github.com/operator-framework/api/pkg/operators/v1alpha2" ) func init() { // Register the types with the Scheme so the components can map objects to GroupVersionKinds and back AddToSchemes = append(AddToSche
 class RefDict(struct.Struct): local_attr = struct.Field(str) attr = struct.Field(str) backref_attr = struct.Field(str, default='subject') requires_explicit_inherit = struct.Field(bool, default=False, frozen=True) ref_cls = struct.Field(type) class ObjectMeta(type):
 import lightgbm as lgb import numpy as np import pytest from scipy import sparse
 for model in model_infos: pwc_model_info = OrderedDict() pwc_model_info['Name'] = osp.split(model['config'])[-1].split('.')[0] pwc_model_info['Weight'] = model['results']['memory'] / 1024 # get metadata memory = round(model['results']['memory'] / 1024, 1) epochs = model['epochs'] meta_data = OrderedDict() meta_data['Training 
 errCh <- err return } log.Tracef("Running task %v", t) // If this is an exit or error event track that so we don't synthesize one. // We synthesize an Error value if this loop is going to returning without
 IEnumerable<SearchParameterInfo> AllSearchParameters { get; } /// <summary> /// Gets a hash value calculated from the current set of search parameters. /// </summary> IReadOnlyDictionary<string, string> SearchParameterHashMap { get; }
 * If true, a default {@link OAuth2AuthorizedClient} can be discovered from the current Authentication. It is * recommended to be cautious with this feature since all HTTP requests will receive the access token if it can be * resolved from the current Authentication. * * @param defaultOAuth2AuthorizedClient true if a default {@link OAuth2AuthorizedClient} should be used, else false. *                                      Default is false. */
 include WebsocketsHelpers include Devise::Test::IntegrationHelpers driven_by :selenium, using: :headless_chrome, screen_size: [1400, 1400] do |driver_option| # Without this argument, Chrome cannot be started in Docker driver_option.add_argument('no-sandbox') end def sign_in!(user = nil) @current_user = user || create(:user)
 self.logger.info("Not a valid room url.") return if room["status"]!= STATUS_ONLINE: self.logger.info("Stream current unavailable.") return hls_url = "http://dlhls.cdn.zhanqi.tv/zqlive/{room[videoId]}_1024/index.m3u8?Dnion_vsnae={room[videoId]}".format(room=room)
 """ state = {} status, output = shellutil.run_get_output("/sbin/ip -d -o link") """ 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:
 {{if not.FavoritesFirst}} lower(svc.name) > lower(:afterName) {{else if.After.IsFavorite}} ((fav IS DISTINCT FROM NULL AND lower(svc.name) > lower(:afterName)) OR fav isnull) {{else}} (fav isnull AND lower(svc.name) > lower(:afterName)) {{end}}
 task, self._id, self._task_result_queue, reporter, use_multiprocessing=bool(self.worker_processes > 1), worker_timeout=self._config.timeout, check_unfulfilled_deps=self._config.check_unfulfilled_deps, ) def _purge_children(self):
 <ol> <li class="even"> <label><?php echo xlt('Number of entries to display:');?></label> <?php echo form_input('limit', $options['limit'])?> </li> <li class="odd"> <label><?php echo xlt('Number of characters to display per entry:');?></label> <?php echo form_input('characters', $options['characters'])?> </li> </ol
 case HPDT_AUTOTRADE_VEND: ret->HPDataSRCPtr = (void**)(&((struct autotrade_vending *)ptr)->hdata); ret->hdatac = &((struct autotrade_vending *)ptr)->hdatac; break; case HPDT_BGDATA: ret->HPDataSRCPtr = (void**)(&((struct battleground_data *)ptr)->hdata); ret->hda
 Map<String,String> overrides = CompactableUtils.getOverrides(job.getKind(), tablet, cInfo.localHelper, job.getFiles()); String tmpFileName = CompactableUtils.getTmpFileName(tablet,!cInfo.propagateDeletes? "A" : "C"); TabletFile compactTmpName = new TabletFile(new Path(tmpFileName)); ExternalCompactionInfo ecInfo = new ExternalCompactionInfo();
 $txt['misc'] = 'Other Settings'; $txt['maillist_allow_attachments'] = 'Allow email file attachments to be posted (will not work for PMs)'; $txt['maillist_key_active'] = 'Days to keep keys active in the database'; $txt['maillist_key_active_desc'] = 'How long after a notification is sent are you willing to accept a response'; $txt['mail
 return jgrafana.serialize(); } catch (IOException e) { logger.error("Could not serialize the grafana dashboard"); throw new UncheckedIOException("Could not serialize the grafana dashboard.", e); } }
 parser: template.New(), } }
 m_enc_detail_panel(0), m_layout_panel(0), m_tech_list(0), m_init_flag(initially_hidden) { Sound::TempUISoundDisabler sound_disabler;
 namespace Wallabag\CoreBundle\Command; use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand; use Symfony\Component\Console\Input\InputArgument; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Style\SymfonyStyle; use Symfony\Component\Finder\Finder;
 if err!= ErrSentinel { finalErr = multierror.Append(finalErr, err) } } } if finalErr == nil && didErrSentinel { finalErr = ErrSentinel } return finalErr }
 case DateTimeExtractors.Set: return new BaseSetExtractor(new EnglishSetExtractorConfiguration()); case DateTimeExtractors.Merged: return new DateTime.BaseMergedDateTimeExtractor(new EnglishMergedDateTimeExtractorConfiguration(DateTimeOptions.None)); case DateTimeExtractors.MergedSkipFromTo: return new DateTime.BaseMergedDateTimeExtractor(new EnglishMergedDateTimeExtractorConfiguration(DateTimeOptions.SkipFromToMerge)); } throw new Exception($"Extractor '{extractorName}' for English not supported");
 attrs[attrname] = attr(vals) if not'mass' in attrs: attrs['mass'] = Masses(np.zeros(natoms)) if not 'charge' in attrs: attrs['charge'] = Charges(np.zeros(natoms, dtype=np.float32))
 """ if self.metadata or self._try_cache(): if self.metadata_expire!= 0 \ and self._check_config_file_age \ and self.repofile \ and dnf.util.file_age(self.repofile) < self.metadata._age:
 use Shopsys\FrameworkBundle\Model\Customer\BillingAddressData; use Shopsys\FrameworkBundle\Model\Customer\DeliveryAddressData; use Shopsys\FrameworkBundle\Model\Customer\User\CustomerUserProfileData; class CustomerUserUpdateData {
 } else { parent.querySelector('.chkEnableEmbeddedEpisodeInfosContainer').classList.add('hide'); } parent.querySelector('.chkAutoCollectionContainer').classList.toggle('hide', contentType!=='movies'); return populateMetadataSettings(parent, contentType); }
 StorageComponent delegate() { StorageComponent result = delegate; if (result!= null) return result; result = factory.getBean(StorageComponent.class); if (result instanceof TracingStorageComponent) { result = ((TracingStorageComponent) result).delegate;
 Collectors.toList(), StringUtils.joiningWithLastDelimiter(", ", " and "))); if (!affectedOptions.isEmpty()) { logger.warn("{} will have no effect unless {} is in the command line.", affectedOptions, mainOptionName); } } }
 systemd_cmd = [ "systemd-run", "--unit={0}".format(logcollector.CGROUPS_UNIT), "--slice={0}".format(logcollector.CGROUPS_SLICE) ] # More info on resource limits properties in systemd here:
 creationLock *sync.Mutex } func (manager *manager) Create() (sessionInstance session.Session, err error) { manager.creationLock.Lock() defer manager.creationLock.Unlock() sessionInstance.ID = manager.idGenerator.Generate() sessionInstance.Config, err = openvpn.ConfigToString(*manager.clientConfig.Config) if err!= nil { return
 propMerge: Function, }; }  export default { createElement: any, };
 Block:    block, } e.comp.SubmitLocal(engine.ChannelConsensusCluster(e.chainID), synced)  // TODO: remove the following line after the local engine is refactored to // use the same channel as the cluster engine. e.comp.SubmitLocal(engine.ChannelConsensusCluster(e.chainID), block) } // checkLoop will regularly scan for items that need requesting.
 g_autoptr(GOptionContext) context = g_option_context_new (""); glnx_unref_object RPMOSTreeOS *os_proxy = NULL; glnx_unref_object RPMOSTreeSysroot *sysroot_proxy = NULL; g_autoptr(GVariant) new_default_deployment = NULL; g_autofree char *transaction_address = NULL; _cleanup_peer_ GPid peer_pid = 0; const char *cons
 end raise OperationFailure.new(err, code, doc) elsif doc && (writeConcernError = doc['writeConcernError']) # assignment raise WriteConcernError.new(writeConcernError['errmsg'], writeConcernError['code'], doc, writeConcernError['writeConcern']) end if @transformer.nil?
 // A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode // and move the currentComponent away. const comp = currentComponent; let cleanup = hook._cleanup; if (typeof cleanup == 'function') { hook._cleanup = undefined; cleanup(); }
 logger.Warningf("cannot continue until there is at least %d BZZ available on %x", neededERC20, overlayEthAddress) } if chainId == 5 { logger.Warningf("learn how to fund your node by visiting our docs at https://docs.ethswarm.org/docs/installation/fund-your-node") } select { case <-time.After(balanceCheckBackoffDuration):
 bbox_head=None, mask_roi_extractor=None, mask_head=None, mask_iou_head=None, mask_scoring_rcnn=None, train_cfg=None, test_cfg=None, pretrained=None):
 release.Title = qLink.QuerySelector("b").TextContent; release.Description = release.Title; if (row.QuerySelector("td:nth-child(4) > a").GetAttribute("href")!= null) { var releaseLinkUri = row.QuerySelector("td:nth-child(4) > a").GetAttribute("href"); release.Link = new Uri(SiteLink + releaseLinkUri); var dateString = row.QuerySelector("td:n
 for (const key of keys) ctx.nodes[key]._targets = null; for (const key of keys) { ctx.nodes[key].detach(); } ctx.nodes = null, };
 _ = s.Reset() return err } // So we don't wait forever _ = s.SetDeadline(time.Now().Add(60 * time.Second)) // We *have* to observe the EOF. Otherwise, we leak the stream. // Now, technically, we should do this *before*
 def __repr__(self): return "SIDData({0})".format(self.__dict__) def _get_buffer(self, bars, field='price'): """ Gets the result of history for the given number of bars and field.
 def gen_base_anchors(self): w = self.base_size h = self.base_size if self.ctr is None: x_ctr = self.ctr_offset * w y_ctr = self.ctr_offset * h else: x_ctr, y_ctr = self.ctr h_ratios = torch.sqrt(self.ratios) w_ratios = 1 / h_ratios
 } } // whether this object has been spawned with authority // we need hasAuthority and pendingOwner because // we need to wait until all of them spawn before updating hasAuthority internal bool pendingOwner { get; set; }
 return } group := strings.TrimSpace(cloudHost.Group) hostSpec.Group = group topology.Hosts = append(topology.Hosts, hostSpec) }
 // blocking; it always drains the buffer before writing so that the latest // write is buffered. If writes could block, the background goroutine could be // blocked indefinitely from reading etcd's Watch events. ch chan *state // closeCh is used to signal when the background goroutine has exited // during shutdown. closeCh <-chan struct{} // shutdown tells the background goroutine to exit. shutdown func() }
 * * @return array A normalized tree of UploadedFile instances. */ protected static function parseUploadedFiles(array $uploadedFiles) { $parsed = []; foreach ($uploadedFiles as $field => $uploadedFile) {
 self.__dict__.update(d) if "param" not in self.__dict__: self.param = type(self.param)(self.__class__, self=self) super(Dimensioned, self).__setattr__("param", self.param) class Dimensioned(LabelledData):
 } const batchSize = 16384 var res [][]hash.Hash func(hs []hash.Hash) { copied := make([]hash.Hash, len(hs)) copy(copied, hs) i := 0 for ; i+batchSize < len(copied); i += batchSize { res = append(res, copied[i:i+batchSize])
 "\r\n" + "dGhpcyBpcyBzb21lIG1vcmUgdGVzdCB0ZXh0Lg==\r\n")); checkAddresses(msg.getFrom(), "adam@example.org"); streamToString(MimeUtility.decodeBody(msg.getBody())); } @Test
 if (msgId == null) { msgId = msgExt.getProperty(MessageConst.PROPERTY_ORIGIN_MESSAGE_ID); } dlqLogger.info("[DLQ] topic: {} consumerGroup: {} msgId: {}", retryTopic, requestHeader.getGroup(), msgId); } else { if (0 == delayLevel) { delayLevel = 3 + msgExt.getReconsumeTimes();
 PROJECT* p = projects[i]; if (p->possibly_backed_off && now > p->min_rpc_time) { p->possibly_backed_off = false; char buf[MAXPATHLEN]; snprintf(buf, sizeof(buf), "Backoff ended for %.128s", p->get_project_name()); request_work_fetch(buf); } }
 logits_in_channel = ( self.conv_out_channels if self.upsample_method == 'deconv' else upsample_in_channels) self.conv_logits = build_conv_layer(self.predictor_cfg, logits_in_channel, out_channels, 1) self.relu = nn.ReLU(inplace=True) self.debug_imgs = None
 * @param string $fileName the name of the posted file * @param mixed $customMaxSize maximum file upload size * * @return string|void the error message if the file is too large or no file is found, otherwise null */ public function getError($fileName, $customMaxSize = null) { if (is_null($customMaxSize)) { $maximumSize = getMaximumFileUploadSize();
 ) as $location) { $name = $location->discoveryDisplayName?? $location->name; $code = $location->code; $locationMap[$location->id] = compact('name', 'code'); } } $this->putCachedData($cacheKey, $locationMap);
 return global_params.iteritems() _event_callbacks = {} _task_cache = {} class Task(object): __metaclass__ = Register
 const Army enemy( tile ); return army.isStrongerThan( enemy, AI::ARMY_STRENGTH_ADVANTAGE_LARGE ); } return true; } break;
 sendErr := s.Network.Broadcast(tag, data) if sendErr!= nil { s.log.Warnf("Network was unable to queue votes for broadcast(%v). %d / %d votes for round %d period %d step %d were dropped.", sendErr, len(a.UnauthenticatedVotes)-i, len(a.UnauthenticatedVotes), uv.R.Round, uv.R.Period, uv.R.Step)
 const unionAndInterfaceTypes = await getUnionAndInterfaceTypes(); const { clientConfig, serviceWorkerConfig } = await configureWebpack({ context: __dirname, vendor: [
 def __repr__(self): """Represent the UniGene Record object as a string for debugging.""" return "<%s> %s %s" % ( self.__class__.__name__, self.ID, self.symbol,
 test_with_categorical_variable ) for test_with_interaction_constraints in [True, False]: for monotone_constraints_method in [ "basic", "intermediate", "advanced", ]: params = { "min_data": 20,
 width_coef: float = 0.8, xlim: Optional[Tuple[int, int]] = None, ylim: Optional[Tuple[int, int]] = None, title: str = 'Split value histogram for feature with @index/name@ @feature@', xlabel: str = 'Feature split value', ylabel: str = 'Count', figsize: Optional[Tuple[int, int]] = None,
 @Test public void descriptionAndBlockTagsAreRetrievable() { Javadoc javadoc = JavaParser.parseJavadoc("first line\nsecond line\n\n@param node a node\n@return result the result"); assertEquals("first line\nsecond line", javadoc.getDescription().toText()); assertEquals(2, javadoc.getBlockTagCount()); } @Test
 portResContentionTaskDefinition = "port-80-windows" labelsTaskDefinition            = "labels-windows" ) // TestAWSLogsDriver verifies that container logs are sent to Amazon CloudWatch Logs with awslogs as the log driver func TestAWSLogsDriver(t *testing.T) { RequireDockerVersion(t, ">=1.9.0") // awslogs drivers available from docker 1.9.0
 }; prototype.context = function() { return this._context || (this._canvas? this._canvas.getContext('2d') : null); }; prototype.dirty = function(item) {
 // PMD 6.0.0 addFilterRuleRenamed("java", "controversial", "unnecessary", "UnnecessaryParentheses"); addFilterRuleMoved("java", "unnecessary", "UnnecessaryParentheses", "UselessParentheses"); }
 } elseif (!in_array(strtolower($sExtension), array('lss', 'txt', 'tsv', 'lsa'))) { $aData['sErrorMessage'] = sprintf(gT("Import failed. You specified an invalid file type '%s'."), CHtml::encode($sExtension)); $aData['bFailed'] = true; } elseif (!in_array($mimeType, ['text/tab-separated-values', 'application/zip', 'text/pl
 return; } return; } }; },
 plans: planStats, }; record.computeTime = Date.now() - now; if (BlackrockPayments.getTotalCharges) { // This only exists under Blackrock record.totalCharges = BlackrockPayments.getTotalCharges(); } ActivityStats.insert(record);
 #define GJK_MAX_ITERATIONS	128 #ifdef BT_USE_DOUBLE_PRECISION #define GJK_ACCURACY		((btScalar)1e-12) #define GJK_MIN_DISTANCE	((btScalar)1e-12) #define GJK_DUPLICATED_EPS	((btScalar)1e-12) #else #define GJK_ACCURACY		((btScalar)0.0001) 
 def netrc_content if data.installation? "machine #{data.source_host}\\n  login travis-ci\\n  password #{Shellwords.escape(data.token)}\\n" else "machine #{data.source_host}\\n  login #{Shellwords.escape(data.token)}\\n" end end
 TESTS.UserTests = require("./user-tests"); TESTS.SessionTests = require("./session-tests"); TESTS.UUIDSyncTests= node_require("./uuid-sync-tests"); TESTS.PartitionValueTests = node_require("./partition-value-tests"); } }
 App:         o.appName, Env:         o.envName, ConfigStore: o.store, Region:      o.region, }) if err!= nil { return fmt.Errorf("create describer for environment %s in application %s: %w", o.envName, o.appName, err) } o.envDescriber = d o.subnetLister = ec2.New(o.session, o.region) // ECR client against tools account pro
 import java.util.concurrent.CompletableFuture; import com.google.common.annotations.VisibleForTesting; public class DetermineCommonAncestorTask<C> extends AbstractEthTask<BlockHeader> { private static final Logger LOG = getLogger(); private final EthContext ethContext; private final ProtocolSchedule<C> protocolSchedule; private final ProtocolContext<C> protocolContext;
 return "", false } func (s *httpTestPeerSource) Broadcast(ctx context.Context, tag protocol.Tag, data []byte, wait bool, except network.Peer) error { return errors.New("mock HTTPTestPeerSource does not implement Broadcast") } func (s *httpTestPeerSource) Relay(ctx context.Context, tag protocol.Tag, data []byte, wait bool, except network.Peer) error { return errors.New("mock HTTPTest
 class CorpusElement(object): """An element (file) in a corpus.""" def __init__(self, path): self.path = path self.size = os.path.getsize(self.path) class Corpus(object):
 * Subscriber for RocketCDN REST API Integration * * @since 3.5 * @author Remy Perona */ class RESTSubscriber implements Subscriber { const ROUTE_NAMESPACE = 'wp-rocket/v1';
 if (result.hasErrors()) { final String errors = result.errors().stream().map(TomlParseError::toString).collect(Collectors.joining("\n")); throw new Exception("Invalid TOML configuration:\n" + errors); } return checkConfigurationValidity(result, toml);
 cancelable=False, composed=False): self._check_vanished() log.webelem.debug("Firing event on {!r} via javascript.".format(self)) self._elem.evaluateJavaScript( "this.dispatchEvent(new Event({}.toString(), " "{{'bubbles': {}, 'cancelable': {}, 'composed': {}}}))".format(javascript.convert_js_arg(event), str(bubbles).lower(), str(cancelable).lower(), str(
 */ Blockly.Workspace.prototype.getBlockById = function(id) { var block = this.blockDB_[id]; if (!block && this.getFlyout()) { block = this.getFlyout().getWorkspace().blockDB_[id]; } return block || null; };
 @Test public void leftHandAssignmentCanBeInBraces() { ParseResult<Expression> result = new JavaParser().parse(EXPRESSION, provider("(i) += (i) += 1")); assertNoProblems(result); } }
 # @api private PURPOSES = %i(application monitor push_monitor).freeze # Instantiate the new AppMetadata object. # # @api private
 backlogPool := execpool.MakeBacklog(nil, 0, execpool.LowPriority, nil) defer backlogPool.Shutdown() genesisInitState, _ := testGenerateInitState(t, protocol.ConsensusCurrentVersion) inMem := true archival := true l, err := OpenLedger(logging.Base(), t.Name(), inMem, genesisInitState, archival) a.NoError(err, "could not open ledger") lastBlock, err := l
 pendingRequest.getSkipHealthchecks(), pendingRequest.getMessage(), pendingRequest.getResources(), envOverrides, pendingRequest.getActionId())); nextInstanceNumber++;
 * @since 2.7 * * @param array $hosts List of CNAMES. * @param array $zone Array of CDN zones. */ $hosts = (array) apply_filters( 'rocket_cdn_cnames', $hosts, $zone ); $hosts = array_filter( $hosts );
 'fill: red', '}', '' ], checked: [ 'border: 1px solid green', '}', '' ] };
 { var query = context.Request.Query[KnownQueryParameterNames.Summary].FirstOrDefault(); if (!string.IsNullOrWhiteSpace(query) && context.Response.StatusCode == (int)HttpStatusCode.OK) { if (Enum.TryParse<SummaryType>(query, ignoreCase: true, out var summary)) { return summary; } } return SummaryType.False;
 ); uksort( $crons,'strnatcasecmp' ); return _set_cron_array( $crons ); } /**
 filters.merge(override) end def mute_button function_button('Mute','mute', "mute_selected", 'Mute notification') unless params[:archive] end def mute_selected_button(hidden=false)
 formatted='Server is throttling, reconnecting in {:d} seconds'.format(wait_time) ) time.sleep(wait_time) except PermaBannedException: bot.event_manager.emit( 'api_error',
 t << endl << "clean:" << endl << "\trm -f $(CLEAN_FILES)" << endl; } static void writeMakeBat()
 'getmypid' => ['int'], 'getmyuid' => ['int'], 'get_object_vars' => ['array', 'obj'=>'object'], 'getopt' => ['array<string,string|false|array<int,string|false>>', 'options'=>'string', 'longopts='=>'array', '&w_optind='=>'int'], 'get_parent_class' => ['string', 'object='=>'mixed'], 'getpro
 @JsonProperty @NotNull private Boolean showTaskDiskResource = false; private boolean hideNewDeployButton = false; private boolean hideNewRequestButton = false;
 using namespace iroha::ametsuchi; using PropagationData = GossipPropagationStrategy::PropagationData; /** * Generates peers with empty pub keys * @param ids generated addresses of peers
 <div class="tab-content" id="custom-tabs-three-tabContent"> <div class="tab-pane fade show active" id="custom-tabs-inventory" role="tabpanel" aria-labelledby="custom-tabs-one-home-tab"> Show Inventory at Date: <%= date_field_tag'version_date_select', params[:version_date], :size => 10 %> <br/><br/> <table class="table"> <thead>
 { id:'mapillary-signs',  layer: svgMapillarySigns(projection, context, dispatch) }, { id: 'openstreetcam-images', layer: svgOpenstreetcamImages(projection, context, dispatch) }, { id: 'debug', layer: svgDebug(projection, context, dispatch) }, { id: 'geolocate', layer: svgGeolocate(projection, context, dispa
 """ self.rule_book = BigqueryRuleBook(self._load_rule_definitions()) def find_violations(self, parent_project, bq_acl, force_rebuild=False): """Determine whether Big Query datasets violate rules.
 public const string HolidayList2 = @"(?<holiday>(thanks\s*giving|all saint's|white lover|s(?:ain)?t?(\.)?\s+(?:patrick|george)(?:')?(?:s)?|us independence|all hallow|all souls|guy fawkes|cinco de mayo|halloween|qingming|dragon boat|april fools|tomb\s*sw
 p->path = path; p->uid = getuid (); p->gid = getgid (); p->user = getlogin (); } static resolverHandle * elektraGetResolverHandle (Plugin * handle, Key * parentKey)
 creatorNameFilter = QString(); gameTypeFilter.clear(); maxPlayersFilterMin = 1; maxPlayersFilterMax = 99; maxPlayersFilterStep = 2; invalidateFilter(); }
 | */ 'preflight' => false, /* |--------------------------------------------------------------------------
 } @Test public void testVerifiedIllegalNumBuckets() { AssertHelpers.assertThrows("Should fail if numBucket is less than or equal to zero", IllegalArgumentException.class, "The number of buckets must larger than zero", () -> Bucket.get(Types.IntegerType.get(), 0)); }
 return S2N_SUCCESS; } static int s2n_client_hello_noop_cb(struct s2n_connection *conn, void *ctx) { return S2N_SUCCESS; }
 if (maybe!= null) result.close(); } ActiveMQSpanConsumer doInit() { final ActiveMQConnection connection; try {
 importPath:            "cloud.google.com/go/artifactregistry/apiv1beta2", gRPCServiceConfigPath: "google/devtools/artifactregistry/v1beta2/artifactregistry_grpc_service_config.json", apiServiceConfigPath:  "google/devtools/artifactregistry/v1beta2/artifactregistry_v1beta2.yaml", // GA after 2021/01/15 releaseLevel: "beta", },
 * This will properly maintain the copyright information. DigitalGlobe * copyrights will be updated automatically. * * @copyright Copyright (C) 2017 DigitalGlobe (http://www.digitalglobe.com/) */ #include "LongIntegerFieldDefinition.h"
 ('Dataset and results have different sizes:'f'{self.cumulative_sizes[-1]} v.s. {len(results)}') if self.separate_eval: dataset_idx = -1 total_eval_results = dict()
 ctx := ootaProp.Extract(bg, ns) sc := trace.SpanContextFromContext(ctx) require.True(t, sc.IsValid(), "oota prop failed sanity check") require.False(t, sc.Remote(), "oota prop put remote context into local context") } // sanity check for real propagators, ensuring that they // really are not putting any valid span context into an empty
 // pingNode pings the given peer and updates the metrics with the result and the additional node information func (e *Engine) pingNode(peer *flow.Identity) { id := peer.ID() // ping the node resp, rtt, err := e.middleware.Ping(id) // ping will timeout in libp2p.PingTimeoutSecs seconds
 self.barrier() shape = list(shape) # One of the clients in each machine will issue requests to the local server. if self._client_id % self._machine_count == 0: part_shape = shape.copy() part_shape[0] = part_policy.get_data_size() request = InitDataRequest(name,
 iconId = R.drawable.ic_notification_sync_error; intent = ClientConfig.downloadServiceCallbacks.getReportNotificationContentIntent(context); id = R.id.notification_download_report; content = context.getResources().getQuantityString(R.plurals.download_report_content, successfulDownloads, successfulDownloads, failedDownloads); } NotificationCompat.Builder builder = new NotificationCompat.Builder(context, channelId);
 * We're g̶u̶e̶s̶s̶i̶n̶g̶ doing empirical research on which versions of SQLite * support JSON. So far, tests indicate: * https://www.sqlite.org/json1.html --> JSON since SQLite version 3.9.0 (2015-10-14) * - 3.32.2 - OK (W
 OutputFile encryptingOutputFile(); /** * Parameters of native encryption (if used for this file) */ default NativeFileCryptoParameters nativeEncryptionParameters() { return null; } }
 "github.com/gogo/protobuf/jsonpb" "github.com/gogo/protobuf/proto" "github.com/gogo/protobuf/types" "github.com/stretchr/testify/assert" "github.com/stretchr/testify/require" "go.uber.org/yarpc/api/transport"
 var ( testCounterDesc               = metric.NewDescriptor("counter", sdkapi.CounterInstrumentKind, number.Int64Kind) testUpDownCounterDesc         = metric.NewDescriptor("updowncounter", sdkapi.UpDownCounterInstrumentKind, number.Int64Kind) testCounterObserverDesc       = metric.NewDescriptor("counterobserver", sdkapi.CounterObserverInstrumentKind, number.Int64Kind) testUpDownCounterObserverDesc = metric.NewDescriptor("updowncounterob
 // GetNetTransport returns an http.Transport that limits the number of connection // to comply with connectionsRateLimitingCount. func (wn *WebsocketNetwork) GetNetTransport() *http.Transport { // we want to create a copy of the stock transport object here. transport := *http.DefaultTransport.(*http.Transport) transport.DialContext = wn.GetDialer().DialContext return &transport }
 }); after(function (done) { if (suite.isPlayback()) { setTimeout = originalSetTimeout; } suite.teardownSuite(done);
 elif self.typedef_flag: base_code = self.cname else: base_code = "__PYX_ENUM_DECL %s" % self.cname base_code = public_decl(base_code, dll_linkage=dll_linkage) return self.base_declaration_code(base_code, entity_code)
 "Archive any files/directories instead of moving to the HDFS trash or deleting."), GC_TRACE_PERCENT("gc.trace.percent", "0.01", PropertyType.FRACTION, "Percent of gc cycles to trace"), GC_POST_ACTION("gc.post.action", "FLUSH", PropertyType.STRING, "Action to take after GC: COMPACT, FLUSH, or NONE"), // properties that are specific to the monitor server behavior MONITOR_PRE
 "reflect" "sync" "github.com/keybase/kbfs/kbfscodec" "golang.org/x/net/context" ) const (
 import React, { Component } from'react'; import { inject, observer } from'mobx-react'; import type { InjectedProps } from '../../../../types/injectedPropsType'; import { defineMessages } from'react-intl'; import type { WalletSettingActionMessages } from '../../../../components/wallet/settings/WalletSettingsActionConfirmationDialog'; import WalletSettingsActionConfirmationDialog from '../../../../components/wallet/settings/WalletSettingsActionConfirmationDialog'; type Props 
 url = config.get_edge_url() headers = aws_stack.mock_aws_request_headers("cloudwatch") authorization = aws_stack.mock_aws_request_headers("monitoring")["Authorization"] headers.update( {
 void FixPrecessionSpin::setup(int vflag) { if (strstr(update->integrate_style,"verlet")) { post_force(vflag); ((Respa *) update->integrate)->copy_flevel_f(ilevel_respa);
 # @attr pending_examples [Array<RSpec::Core::Example>] the pending examples # @attr load_time [Float] the number of seconds taken to boot RSpec #                         and load the spec files # @attr errors [Integer] the number of errors that have occurred processing #                        the spec suite SummaryNotification = Struct.new(:duration, :examples, :failed_examples, :pending_examples, :load_time, :errors_count) class SummaryN
 $params->output = 'ids'; } elseif ( null === $params->output ) { $params->output = apply_filters( 'pods_field_related_output_type', 'arrays', $this->row, $params, $this ); } elseif ( in_array( $params->output, array( 'id', 'name', 'object', 'array', 'pod' ) ) )
 /* Load policy from / if SELinux is enabled, and we haven't already loaded * a policy.  This is mostly for the "compose tree" case. */ if (selinux &&!self->sepolicy) { glnx_autofd int host_rootfs_dfd = -1; /* Ensure that the imported packages are labeled with *a* policy if
 var folderLoader caddytls.FolderLoader var certSelector caddytls.CustomCertSelectionPolicy var acmeIssuer *caddytls.ACMEIssuer var keyType caddytls.KeyType var autoPolicy *caddytls.AutomationPolicy var internalIssuer *caddytls.InternalIssuer var issuers []certmagic.Issuer var onDemand bool
 } } public Row getTemplateRow(Database database) { return database.createRow(new Value[getColumns().length], Row.MEMORY_CALCULATE); }
 url_key: string.isRequired, small_image: shape({ url: string.isRequired }), name: string.isRequired, price: shape({ currency: string.isRequired, amount: string.isRequired, }), classes: shape({
 none: 'none', }, extend: { width:{ inherit : 'inherit', xs: '21rem' }, maxHeight:{ illustration : '300px' }, maxWidth: { file : '160px' }, outline: { blue: ['1px auto'+ colors.link, '3px'],
 cmd.Wait() quit <- struct{}{} summary, err := getSummaryLine(stdoutBuf.Bytes()) if err!= nil {
 class _iLocIndexer(_LocationIndexerBase): """An indexer for modin_df.iloc[] functionality""" def __getitem__(self, key): row_loc, col_loc, ndim, self.row_scaler, self.col_scaler = _parse_tuple(key)
 // Raw payload object has type name prefixed with endpoint name. No need to // prefix the type name again. if strings.HasPrefix(p, n) { name = fmt.Sprintf("%s%s", n, p) } else { name = fmt.Sprintf("%s%s", n, p) } name = svc.Scope.Unique(name) desc = fmt.Sprintf("%s builds a %s service %s endpoint payload.", name, svc.Name, e.Name()) is
 Spork.each_run do end end
 else: return exec_command(logfile) finally: logfile.close() self._update_last_log_time() def _send_logs(self): msg = None
 func (m metricsCollector) ProgramParsed(location common.Location, duration time.Duration) { if m.MetricsCollector!= nil { // only capture tx parsing time if _, ok := location.(common.TransactionLocation); ok { // set the duration to be the tx parsing time instead of incrementing the total duration m.parsed = duration }
 return start_moto_server('acm', port, name='ACM', asynchronous=asynchronous) # TODO move to es_starter.py? def start_elasticsearch_service(port=None, asynchronous=False): port = port or config.PORT_ES
 closeData(); BlockAppender mba = fileWriter.prepareMetaBlock("RFile.index"); mba.writeInt(RINDEX_MAGIC); mba.writeInt(RINDEX_VER_8);
 // We update the context config if the server addr has changed between upgrades if originalCfg.Server.Address!= contextConfig.Server.Address { // Update the platform here, basically to upgrade an older context that didn't // have platform set. originalCfg.Server.Platform = c.platform
 return err } if err := h.recordWorkloadInResourceTracker(ctx); err!= nil { return errors.Wrap(err, "fail to add resourceTracker as owner for workload") } klog.InfoS("template rollout target workload", "namespace", h.rollout.Namespace,
 throw e; }); } } export default QuickConnectSettings;
 private List<Group> groups; private List<Policy> policies; private List<ServiceIdentity> services; private Domain domain = null; public AthenzDomain(String name) {
 assert_equal_branchings(x, x_) def test_edge_attribute_preservation_normal_graph(): # Test that edge attributes are preserved when finding an optimum graph # using the Edmonds class. Check this for both normal and multigraphs G = nx.Graph() edgelist = [(0, 1, [('weight', 5), ('otherattr', 1), ('otherattr2', 3)]),
 from Bio import Alphabet from Bio.Seq import Seq from Bio.SeqRecord import SeqRecord import struct import sys import re
 summary='Create a new objective', description='Create a new objective using the format provided in the `ObjectiveSchema`.') @aiohttp_apispec.request_schema(ObjectiveSchema) @aiohttp_apispec.response_schema(ObjectiveSchema) @aiohttp_apispec.parameters({ { 'in': 'path', 'name': 'id','schema': {'type':'string'},'required': 'true', 'descrip
 want:  map[string]interface{}{"a": int64(1)}, want2: map[string]interface{}{"a": int32(1)}, }, {in: map[string][]byte{"a": []byte{1, 2}}, want: map[string]interface{}{"a": []byte{1, 2}}}, {in: map[string][]byte{"a": []byte{1, 2}}, want: map[string
 """ cls = super(Register, metacls).__new__(metacls, classname, bases, classdict) if cls.task_namespace is None: cls.task_namespace = metacls._default_namespace metacls._reg.append(cls)
 # coding=utf-8 import unittest import re import time from time import sleep from selenium import webdriver from selenium.common.exceptions import NoSuchElementException from selenium.common.exceptions import NoAlertPresentException
 private String password; private String sender; public MailService(KylinConfig config) { this(config.isNotifyEnabled(), config.isStarttlsEnabled(), config.getMailHost(), config.getSmtpPort(), config.getMailUsername(), config.getMailPassword(), config.getMailSender()); } private MailService(boolean enabled, boolean starttlsEnabled, String host, String port, String username, String password, String sender) {
 } @Provides @Singleton public AppDatabase provideAppDataBase() { return Room.databaseBuilder(applicationContext, AppDatabase.class, "commons_room.db").build(); }
 onClick={handleSignOut} type="button" > <FormattedMessage id="accountMenu.signOutButtonText" defaultMessage="Sign Out" /> </button> </div> );
 places = getFromWikidataQuery(curLatLng, lang, radius); } catch (Exception e) { Timber.d("exception in fetching nearby places", e.getLocalizedMessage()); return new ArrayList<>(); } Timber.d("%d results at radius: %f", places.size(), radius); if (places.size() >= MIN_RESULTS) {
 const fn = onHideAnimationComplete.bind(instance); instance._onHideAnimationComplete = fn; const transitionEndEventPromise = await new Promise((resolve) => { dom.addEventListener(elem, transitionEndEventName, resolve, { once: true });
 } if (pref instanceof EditTextPreference) { EditTextPreference editTextPref = (EditTextPreference) pref; if (editTextPref.getText()!= null &&!editTextPref.getText().equals("")) { ((EditTextPreference) pref).setDialogMessage(editTextPref.getDialogMessage());
 mockDeleteChangeSet: func(t *testing.T, in *cloudformation.DeleteChangeSetInput) (*cloudformation.DeleteChangeSetOutput, error) { return nil, nil }, mockWaitUntilStackUpdateCompleteWithContext: func(t *testing.T, in *cloudformation.DescribeStacksInput) error { return errChangeSetEmpty }, } }, },
 @Override protected void validate(TableMetadata base) { if (base.currentSnapshot()!= null) { if (!referencedDataFiles.isEmpty()) { validateDataFilesExist(
 } getState(): TransactionState { switch (this.condition) { case 'CPtxApplying': return 'pending'; case 'CPtxWontApply': return 'failed'; default: return 'ok'; // CPtxInBlocks && CPtxNotTracked
 stride=1, padding=0, dilation=1, deformable_groups=8): super(DeformConv, self).__init__() self.in_channels = in_channels self.out_channels = out_channels
 console.log('setting src remote `origin` to'+ config.chromiumRepo) util.run('git', ['-C', config.srcDir,'remote','remove', 'origin'], options) util.run('git', ['-C', config.srcDir,'remote', 'add', 'origin', config.chromiumRepo], options) if (fs.existsSync(config.braveCoreDir)) { console.log('setting src/brave remot
 window.scrollTo(0, newScroll); } } } var mousedown = watchFunction(function (event) {
 'Install/PerformSecurityFix', 'Install/ShowSQL', 'LibGuides/Home', 'LibGuides/Results', 'LibraryCards/Home', 'LibraryCards/SelectCard', 'LibraryCards/ConnectShibbolethCard', 'LibraryCards/ConnectShibbolethCardLogin', 'LibraryCards/DeleteCard', 'MyResearch/Account', 'MyResearch/ChangeEmail', 'MyResearch/ChangePassword', 'MyRese
 }; var to_absolute_cursor_pos = function (cm, cursor) { console.warn('utils.to_absolute_cursor_pos(cm, pos) is deprecated use cm.indexFromPos(cursor)'); return cm.indexFromPos(cusrsor); }; var from_absolute_cursor_pos = function (cm, cursor_pos) { console.warn('utils.from_absolute_cursor_pos(cm, pos) is deprecated use cm.posFromIndex(cursor_pos)'); return cm.posFromIndex(
 t.Run(tt.name, func(t *testing.T) { reqMatcher := NewRequestMatcher(t, &transport.Request{ Transport: tt.transport, Body:      bytes.Buffer{}, // cannot be nil }) req := &transport.Request{ Transport: "foo-transport", Body:      bytes.Buffer{}, } if tt.wantMatch {
 } token := c.config.Token if token == "" { tokenFromFile, err := readTokenFromFile(c.runtime.ServerToken, c.config.DataDir) if err!= nil {
 # Arguments that are just blank spaces aren't really arguments # We need to get rid of those. If the user intended to pass a sequence # of spaces, it would come between quotes clean_args = [a.strip() for a in args if isinstance(a, str) and a.strip()!= ''] args = clean_args verify_arg_signature(self.func, list(args), {}) remainder: typing.Sequence[str] = []
 InsertTx(context.Context, *sql.Tx, *User) (*User, error) Update(context.Context, *User) error UpdateTx(context.Context, *sql.Tx, *User) error SetUserRoleTx(ctx context.Context, tx *sql.Tx, id string, role string) error Delete(context.Context, string) error DeleteManyTx(context.Context, *sql.Tx, []string) error FindOne(context.Context, string) (*User, error)
 import React from'react'; import { createTestInstance } from '@magento/peregrine'; import Buttons from '../Buttons'; import { classify } from '@magento/peregrine'; jest.mock('../../../../../../classify'); test('renders a Buttons component', () => { const component = createTestInstance(<Buttons />); expect(component.toJSON()).toMatchSnapshot();  const callback = jest.spyOn(component, 'onClick'); expect(callback).toHaveBeenCalled(); })
 * @param nodeName the node on which to do the query */ private void addQueryToNode(final XPath xPath, final String nodeName) { List<XPath> xpathsForNode = nodeNameToXPaths.get(nodeName); if (xpathsForNode == null) { xpathsForNode = new ArrayList<>(); nodeNameToXPaths.put(nodeName, xpathsForNode); } xpathsForNode.add(xPath); } private BaseXP
 TokenSystem, TokenText, Uri, } }
 import ( "context" "fmt" "github.com/crossplane/crossplane-runtime/apis/core/v1alpha1" "github.com/crossplane/crossplane-runtime/pkg/event" apierrors "k8s.io/apimachinery/pkg/api/errors" metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 import com.esotericsoftware.kryo.io.Input; import com.esotericsoftware.kryo.io.Output; import com.google.common.collect.ImmutableList; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; import java.nio.ByteBuffer; import java.nio.ByteOrder; import java.util.Arrays; import java.util.List; import org.apache.iceberg.types.Types; import org.apache.spark.SparkConf;
 package startupshutdown import ( "github.com/mholt/caddy" "github.com/mholt/caddy/onevent/hook" "github.com/nu7hatch/gouuid" "strings" ) func init() {
 return configurationBuilder; } testEnvironmentFilePath = testEnvironmentFilePath.Replace('\\', Path.DirectorySeparatorChar); testEnvironmentFilePath = Path.GetFullPath(testEnvironmentFilePath); if (!File.Exists(testEnvironmentFilePath)) { return configurationBuilder;
 return trim( $string ); } ); Functions\when('sanitize_email' )->returnArg(); Functions\when('sanitize_text_field' )->returnArg(); Functions\when( 'rocket_valid_key' )->justReturn( true );
 for _, p := range paramAndDSL { param, ok = p.(string) if!ok { dslengine.ReportError("invalid CollectionOf argument, must be a string or a DSL function", p) return "", nil } }
 for have, want := range mapping { if have!= want { t.Fatalf("unexpected bee node mode: have %q; want %q", have, want) } } }
 package tech.pegasys.pantheon.consensus.ibftlegacy; import static org.assertj.core.api.Java6Assertions.assertThat; import tech.pegasys.pantheon.consensus.common.ValidatorVotePolarity; import tech.pegasys.pantheon.crypto.SECP256K1.KeyPair; import tech.pegasys.pantheon.ethereum.core.Address; import tech.pegasys.pantheon.ethereum.core.AddressHelpers;
 // we support is cloneset/statefulset for now. We can easily add more later. supportInplaceUpgrade := false if w.GroupVersionKind().Group == v1alpha1.GroupVersion.Group { if w.GetKind() == reflect.TypeOf(v1alpha1.CloneSet{}).Name() { supportInplaceUpgrade = true } } else if w.GroupVersionKind().Group == appsv1.GroupName {
 } mRvAllergens = (RecyclerView) view.findViewById(R.id.alergens_recycle); mAdapter = new AllergensAdapter(mAllergens, getActivity()); mRvAllergens.setAdapter(mAdapter); mRvAllergens.setLayoutManager(new LinearLayoutManager(view.getContext())); mRvAllergens.setHasFixedSize(true);
 <i class="fa fa-dashboard"></i> Home <% end %> </li> <li><%= link_to "Inventory Adjustments", (adjustments_path) %></li> <li class="active"> New Adjustment</li> </ol> </section>
 </div> <footer class="footer"> &copy; 2008&thinsp;&ndash;&thinsp;<%= Time.new.year %> Chef Software, Inc. All Rights Reserved. <br><br><%= link_to 'Code of Conduct', chef_docs_url('community_guidelines.html') %> <%= link_to 'Terms and Conditions of Use', chef_www_url('terms-of-service') %> <%= link_to 'Privacy
 self.app_svc.application.router.add_route('POST', '/file/upload', self.upload_exfil_http) async def get_endpoint_by_access(self, request, endpoint): allowed_permissions = [p for p in await self.auth_svc.get_permissions(request) if p in self.modules] for module in allowed_permissions: try: return await self.modules[module][endpoint](self, request) except Exception as e: self.log.debug(e) return await self.login(request)
 bytes := make([]byte, 32) select { case <-rh.Leader.Done: log.Printf("RandHound - done") bytes = <-rh.Leader.Result case <-time.After(time.Second * 60):
 def authenticate_presign_url_signv4(method, path, headers, data, url, query_params, request_dict): aws_request = create_request_object(request_dict) ReadOnlyCredentials = namedtuple('ReadOnlyCredentials', ['access_key','secret_key', 'token'])
 return owned def get_transactions_filtered(self, *, asset_id, operation=None): """ Get a list of transactions filtered on some criteria """ if not asset_id: raise ValueError("Need asset_id") txids = backend.query.get_txids_filtered(self.connection, asset_id, operation) for txid in txids:
 if asset in self.sources_map: # go find this asset in our custom sources try: return self.sources_map[asset].loc[column] except: log.error( "Could not find price for asset={0}, current_day={1},"
 // assemble a multibody tree according to the PhysicalFrames in the // OpenSim model, which include Ground and Bodies _multibodyTree.addBody("/" + getName() + "/" + ground.getAbsoluteName(), 0, false, &ground); auto bodies = getComponentList<Body>();
 import os from tensorflow.python.framework import test_util from tensorflow_addons.custom_ops import text from tensorflow_addons.custom_ops.text.python import skip_gram_ops from tensorflow.python.framework import constant_op from tensorflow.python.framework import dtypes
 job.suspend(); assertJobStatusEventually(job, SUSPENDED); assertThat(job.getSuspensionCause().errorCause()).isInstanceOf(UnsupportedOperationException.class); cancelAndJoin(job);
 * * @return a new {@link RewriteManifests} */ RewriteManifests rewriteManifests(); /** * Create a new {@link OverwriteFiles overwrite API} to overwrite files by a filter expression.
 var findErr error if v.Name == "DB_PASSWORD" { password, findErr = FindValueFromEnvVar(v, client, namespace) if findErr!= nil { return nil, findErr } } else if v.Name == "DB_PORT" { var portStr string portStr, findErr = FindValueFromEnvVar(v, client, namespace) if findErr!= nil { return nil, findErr } pPort, err := st
 * @param array $excluded_files List of excluded CSS files. */ $excluded_files = apply_filters( 'rocket_exclude_css', $excluded_files ); } elseif ( 'js' === $extension ) { global $wp_scripts; $excluded_files = get_rocket_option( 'exclude_js', array() );
 // the MissionGroup if not specified. SimGroup* missionGroup = dynamic_cast<SimGroup*>(Sim::findObject("MissionGroup")); SimGroup* group = 0; if (dStrcmp(parentGroup, "")!= 0) { if (!Sim::findObject(parentGroup, group)) { // Create the group if it could not be found group = new SimGroup;
 // pool is not full yet, add connection for reuse p.pool = append(p.pool, client) p.Unlock() } else { // otherwise, close the connection. return client.Close() } return nil }
 /** * @author Jitendra Singh * @author Siva Prasad */ public class UsernamePasswordAuthenticationTokenMixinTest extends AbstractMixinTests {
 * * <ul> * <li>{@link #existsUnique(Predicate)}</li> * <li>{@link #isTraversableAgain()}</li> * <li>{@link #isDistinct}</li> * <li>{@link #isOrdered}</li> * <li>{@link #hasDefiniteSize()}</li> * </ul> *
 <!-- Spam Trap --> <div style="left:-999em; position:absolute;"><label for="trap"><?php esc_html_e( 'Anti-spam','sensei-lms' );?></label><input type="text" name="email_2" id="trap" tabindex="-1" /></div> <input type="hidden" id="sensei_reg_http_referer" name="sensei_reg_http_referer" value="<?
 }, nil } func (u *Upstream) loadHost() { host := new(Host) existingHost, loaded := hosts.LoadOrStore(u.String(), host) if loaded {
 Call Sphinx command with hard-coded "html" target """ # Copy docs files from Open3D-ML repo OPEN3D_ML_ROOT = os.environ.get("OPEN3D_ML_ROOT", os.path.join(self.current_file_dir, "..", "..", "Open3D-ML")) if os.path.isdir(OPEN3D_ML_ROOT): shutil.copy(os.path.join(OPEN3D_ML_ROOT, "docs", "tensorb
 NotificationViewModel vm) { var baseStr = $"Invoice {notification.InvoiceId.Substring(0, 5)}.."; vm.Body = $"{baseStr} {TextMapping[notification.Event]}"; vm.ActionLink = _linkGenerator.GetPathByAction(nameof(InvoiceController.Invoice), "Invoice", new {invoiceId = notification.InvoiceId}, _options.RootPath);
 */ static <T> Iterator<T> fill(int n, Supplier<? extends T> s) { Objects.requireNonNull(s, "s is null"); return Collections.tabulate(n, f -> s.get()); } /**
 return; } $transient = 'rocket_renewal_banner_'. get_current_user_id(); if ( false!== get_transient( $transient ) ) { return; } set_transient( $transient, 1, MONTH_IN_SECONDS ); wp_send_json_success(); }
 subctx.implicit_tid_in_shapes = False viewgen.compile_view_shapes(ir_set, ctx=subctx) elif (orig_stype.issubclass(ctx.env.schema, json_t) and new_stype.is_enum(ctx.env.schema)): # Casts from json to enums need some special handling. # Here, we have access to the enum type. Just turn # it into json->str and str->enum. str_typ = ctx.env.get_track_
 if not resource['should_notify']: LOGGER.debug('Not notifying for: %s', resource['resource']) continue if notifier_configs.get('email_connector_config'): if not notifier_configs.get('email'): LOGGER.debug('Notifying via email for: %s', resource['resource']) continue notifiers.append(email_violations.EmailViolations( resource['resource'], inventory_index_id, violation_map[resource['resource']], global_configs,
 // NullBranchID signals that the folder's current branch ID // should be looked up. arg := keybase1.GetMetadataArg{ FolderHandle: encodedHandle, BranchID:     NullBranchID.String(), } if lockBeforeGet!= nil { arg.LockBeforeGet = lockBeforeGet } id, rmdses, err := md.get(ctx, arg)
 // This code will even wait on tablets that are assigned to dead tablets servers. This is // intentional because the master may make metadata writes for these tablets. See #587 log.debug( "Still waiting for table({}) to be deleted; Target tablet state: UNASSIGNED, Current tablet state: {}, locationState: {}", tableId, state, locationState); done = false; break;
 block *flow.Block, chunks []*flow.Chunk, serviceEvents []flow.Event, executionDataID flow.Identifier, ) (*flow.ExecutionResult, error) { // convert Cadence service event representation to flow-go representation
 let tsJest = null try { tsJest = require.resolve('ts-jest') } catch (e) { throw new Error('Cannot resolve "ts-jest" module. Typescript preset requires "ts-jest" to be installed.') }
 <thead> <tr> <th data-field="icon" data-visible="true" style="width: 40px;" class="hidden-xs" data-formatter="iconFormatter"></th> <th class="col-sm-2" data-visible="false" data-field="created_at" data-formatter="dateDisplayFormatter">{{ trans('general.date') }}</th> <th class="col-sm-1" data-visible="tru
 countries, actions: { updateBillingEmail(values) { this.newSubscription.billingInfo.set('billingEmail', values.join(',')); }, }
 * @param informationKey contains the statistics in its meta information * @param metaName which statistic to set * @param value which value to set it to, must be a number * @returns retval * * This enforces that a number is set. */
 use Thelia\Coupon\CouponFactory; use Thelia\Coupon\CouponManager; use Thelia\Coupon\Type\CouponInterface; use Thelia\Model\Coupon as CouponModel; use Thelia\Model\CouponCountry; use Thelia\Model\CouponCountryQuery; use Thelia\Model\CouponQuery; use Thelia\Model\Map\OrderCouponTableMap; use Thelia\Model\OrderCoupon;
 filepath.Join(options.DirectoryConfig, options.LocationDatabase), ) vpnClientFactory := connection.ConfigureVpnClientFactory( mysteriumClient,
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4440-SEA 1645531083 1412163903</p> <hr> <p>Varnish cache server</p> </body>
 return true; } /// <summary> /// Gets the set of strides that can be used to calculate the offset of n-dimensions in a 1-dimensional layout /// </summary>
 var valid = false; var midStrBegin = extractorResults[secondExtractionIndex - 1].Start + extractorResults[secondExtractionIndex - 1].Length?? 0; var midStrEnd = extractorResults[secondExtractionIndex].Start?? 0; var midStr = text.Substring(midStrBegin, midStrEnd - midStrBegin - 1); var match = DurationConnectorRegex.Match(midStr); if 
 from dgl.nn.pytorch import RelGraphConv class RGCN(nn.Module): def __init__(self, in_dim, h_dim, out_dim, num_rels, regularizer="basis", num_bases=-1, dropout=0., self_loop=False, link_pred=False):
 wsJobReader } type wsPipelineReader interface { wsServiceLister wsPipelineManifestReader
 } } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) {
 } fmt::format_to(out, "#{:<3} :: {} :: {}:{:<5} :: {:2} :: {}:{} :: {} :: ({})", zone_server_data->GetID(), is_static_string, addr.c_str(),
 ﻿using System.Linq; using System.Threading; using NUnit.Framework; namespace NHibernate.Test.NHSpecificTest.GH1594
 andThen(() => { assert.equal(topPage.flashMessage.text, 'The build was successfully restarted.','restarted notification should display proper build restarted text'); assert.equal(buildPage.singleJobLogText, '1Hello log','shows log text of single build job'); assert.equal(buildPage.singleJobLogText, '1Hello log','shows log text of single build job'); }); });
 import java.util.Collection; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Delayed; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicLong; import java.util.concurrent.atomic.AtomicReference; import java.util.function.Function;
 'admin_notices'                      => 'clear_usedcss_result', 'rocket_admin_bar_items'             => 'add_clean_used_css_menu_item', 'rocket_after_settings_checkbox'     => 'display_progress_bar', 'admin_enqueue_scripts'              => 'add_admin_js', ]; }
 // OutboundsConfig is the configuration for constructing a set of outbounds. type OutboundsConfig struct { Clients map[string]OutboundConfig `yaml:"clients"` } // OutboundConfig is the configuration for constructing a specific outbound.
 } else { $queryString = sprintf( "SELECT count(persistence_object_identifier) c FROM neos_media_domain_model_asset WHERE dtype = '%s'", $this->getDtypeFromEntityClassName($this->entityClassName) ); }
 } request = requestMap.at(client->restag); if (!request || ((request->getType()!= MegaRequest::TYPE_FETCH_NODES) && (request->getType()!= MegaRequest::TYPE_CREATE_ACCOUNT)) ) { megaError("requestMap.at(client->restag) returned nullptr"); return; }
 // New returns new Hub func New(ctx context.Context, cfg *HubConfig, version string) (*Hub, error) { ctx, cancel := context.WithCancel(ctx) defer cancel() ethKey, err := crypto.HexToECDSA(cfg.Eth.PrivateKey) if err!= nil { return nil, errors.Wrap(err, "malformed ethereum private key")
 // `options.permissions` is set to false, permissions checks // are bypassed. // // If `options.skipAttachments` is true, the insert operation will be slightly // faster, however this is only safe to use if it is impossible for the page // to directly contain any attachments. This includes attachments that are // schema fields of widgets, including widgets in spontaneous areas that are // only defined in templates. It does not include attachments reached v
 { EnsureArg.IsNotNull(services, nameof(services)); var jsonParser = new FhirJsonParser(DefaultParserSettings.Settings); var jsonSerializer = new FhirJsonSerializer(); var xmlParser = new FhirXmlParser();
 "if you use dict, the index should start from 0") self.eval_at = eval_at super(LGBMRanker, self).fit(X, y, sample_weight=sample_weight, init_score=init_score, group=group, eval_set=eval_set, eval_names=eval_names,
 name = fullname.name parts = name.split('@', 1) if len(parts) == 2: res = name_from_string(unmangle_name(parts[0])) return res else: return fullname
 public static final String STRING = "STRING"; public static final String SUBSTITUTION = "SUBSTITUTION"; public static final String UNIFICATION = "UNIFICATION"; public static final Set<String> namespaces = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(ARRAY, BOOL, BUFFER, BYTES, FFI, FLOAT, INT, IO, KEQUAL, KREFLECTION, LIST, MAP, MINT, SET, STRING, SUBSTITUTI
 SecretKeyRef: p.Spec.Thanos.ObjectStorageConfig, }, }) } if p.Spec.Thanos.ObjectStorageConfigFile!= nil { container.Args = append(container.Args, "--objstore.config-file="+*p.Spec.Thanos.ObjectStorageConfigFile) }
 ConsumeQueue logic = this.findConsumeQueue(topic, queueId); if (logic!= null) { long consumeQueueOffset = logic.getMinOffsetInQueue(); MessageExt msgExt = null; if (realOffset) { for (;consumeQueueOffset <= getMaxOffsetInQueue(topic,queueId);consumeQueueOffset++) { msgExt = lookMessageByOffset(getCommitLogOffsetInQueue(topic, queueId, consumeQueueOffset));
 func convertCoverage(in map[string][]core.LineCoverage, allowedFiles []string) map[string]string { ret := map[string]string{} for k, v := range in { if shouldInclude(k, allowedFiles) { ret[k] = core.TestCoverageString(v) } } return ret }
 const ( maxBins         = 16 nnLowWatermark  = 2 // the number of peers in consecutive deepest bins that constitute as nearest neighbours maxConnAttempts = 10 // when there is maxConnAttempts failed connect calls for a given peer it is considere non-connectable ) var (
 // average out the last few results from Ping public int pingWindowSize = 10; double lastPingTime = 0; int m_HostPort;
 public abstract Address[] getRecipients(RecipientType type) throws MessagingException; public abstract void setRecipients(RecipientType type, Address[] addresses) throws MessagingException;
 // Dispatch runs the protocol. func (p *CollectTxProtocol) Dispatch() error { defer func() { if r := recover(); r!= nil { log.Error("panic during collect tx protocol", "error", r) log.Print(log.Stack()) } }() defer p.Done() var req structCollectTxRequest
 return item; } /** * Set what plan item (index, cost, masks) to use. *
 double *T = new double[vT->m_AvailableSteps * readsize[0] * readsize[1]]; // Create a 2D selection for the subset vT->SetStepSelection(0, vT->m_AvailableSteps); // Arrays are read by scheduling one or more of them
 description={description} buttonLabel={buttonLabel} linkLabel={linkLabel} backgroundImage={backgroundImage} /> );
 def _apply(self, group): attr = getattr(group, self.field) mask = np.isin(attr, self.values) return group[mask]
 $attrs = $this->attributes(); // fix 'true' or 'false' to real bools. if (count($attrs) > 2) { $bool = array_map('str_to_bool', array_slice($attrs, 2)); array_splice($attrs, 2, 1, $bool); } return call_user_func_array('url_title', $attrs);
 // the cancel time changes. The cancel time only changes if multiple // cancel requests are made. if job.CancelTime!= nil &&!time.Equal(lastJob.CancelTime.AsTime(), job.CancelTime.AsTime()) { // The job is forced if we're in an error state. This must be true // because we would've already exited the loop if we naturally // got a terminal event.
 { if(db->hasDetectedFirstRun()) { QMessageBox::information(this, tr("Welcome"), tr("Hi! Its seems like it's the first time you run this version of Cockatrice.<br/>All the sets in the card database have been enabled. Read more about changing the set order or disabling specific sets in the the \"Edit Sets\" window.")); actEditSets(); } } No newline at end of file
 auto tserver = tablet_map->find(desc->permanent_uuid()); bool no_tablets = tserver == tablet_map->end(); if (viewType == kTServersPhysicalClocksView) { // Render physical time. const Timestamp p_ts(desc->physical_time()); *output << "    <td>" << p_ts.ToFormattedString() << "</td>";
 defer log.AfterTest(t) testType := network.MessageTypeID(uuid.Nil) local := NewLocalTest() _, _, tree := local.GenTree(3, false, false) defer local.CloseAll() p, err := local.CreateProtocol(tree, "ProtocolChannels")
 wl2.setUpdateTime(Timestamp.fromMillis(123456789123L)); wl2.setHostname("random"); assertEquals(wl1, wl2);  wl2.setHostname(null); assertEquals(wl1, wl2);  wl2.setHostname("testhost-1"); assertEquals(wl1, wl2);
 type ExecTxnFields struct { _struct struct{} `codec:",omitempty,omitemptyarray"` Inputs [][]byte `codec:"inp` Code string `codec:"cod"` }
 # Sanity check: can lock when mentor has less than four existing locks 3.times { Mentor::Request::Lock.(create(:mentor_request), mentor) } assert_raises MentorSolutionLockLimitReachedError do
 } @Test public void setNodeWhiteListPassingNullToEmptyList() { final PermissioningConfiguration configuration = PermissioningConfiguration.createDefault(); configuration.setNodeWhitelist(null); assertThat(configuration.getNodeWhitelist()).isEmpty();
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4428-SEA 1645543197 1562891393</p> <hr> <p>Varnish cache server</p> </body>
.getSourceSets().matching(ss -> hasCompileDependenciesMatching(proj, ss, this::isJunitJupiter)).forEach(ss -> { String testTaskName = ss.getTaskName(null, "test"); Test testTask = (Test) proj.getTasks().findByName(testTaskName); if (testTask == null) {
 void SceneCheckAPIChange::installDefaultChangeSets() { addHookInChangeSet("17.06", [](Base* o){ if(o->getClassName() == "RestShapeSpringsForceField" && o->findLink("external_rest_shape")->getSize()!= 0) msg_warning(o) << "RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Li
 Returns: bool: True if using a composite root, else False. """ return not self.root_resource_id def get_root_resource_id(self): """Return the configured root resource id.
 }, afterModel(model) { if (model &&!model.error &&!this.get('features.enterpriseVersion')) { model.fetchBetaMigrationRequests(); } } });
 return nil, 0, err } transport, err := CreateTransport(auth, &http.Transport{}, timeout, nil) if err!= nil { return nil, 0, err }
 SqlKind.OTHER_FUNCTION, ReturnTypes.DATE_NULLABLE, null, OperandTypes.STRING_STRING, SqlFunctionCategory.TIMEDATE); @LibraryOperator(libraries = {MYSQL, POSTGRESQL})
 logger.info("Deploy ssh key pairs.") self.osutil.deploy_ssh_keypair(ovfenv.username, keypair) def report_event(self, name, message, is_success=False, duration=0): add_event(name=AGENT_NAME, message=message, duration=duration, is_success=is_success, op=name) def report_not_ready(self, sub_status, description): status = ProvisionStatus(status="NotReady", subStatus=sub_status,
 if (isAnyDistinct()) { rows = distinctRows.values(); } if (sort!= null) { if (offset > 0 || limit > 0) { sort.sort(rows, offset, limit > 0? limit : rows.size(), withTies); } else { sort.sort(rows); }
 # @api private def add_txn_opts!(command, read) command.tap do |c| # The read concern should be added to any command that starts a transaction. if starting_transaction? # https://jira.mongodb.org/browse/SPEC-1161: transaction's
 key_value['key'] for key_value in source.key_value_pairs]): if self.CheckKeyCompatibility(key_path): find_specs = self.BuildFindSpecsFromRegistryArtifact(key_path) artifact_group = self.find_specs_per_source_type[ artifact_types.TYPE_INDICATOR_WINDOWS_REGISTRY_KEY] artifact_group.extend(find_specs) elif (source.type_indicator == artifact_types.TYPE_INDICATOR_ARTIFACT_GROUP):
 import javax.annotation.PostConstruct; import javax.inject.Inject; import org.kie.kogito.eventdriven.rules.AbstractEventDrivenQueryExecutor; import org.kie.kogito.rules.RuleUnit;
 runner.register_training_hooks(cfg.lr_config, optimizer_config, cfg.checkpoint_config, cfg.log_config, cfg.get('momentum_config', None)) if distributed: runner.register_hook(DistSamplerSeedHook())
 // Node whitelist errors NODE_WHITELIST_NOT_SET(-32000, "Node whitelist has not been set"), NODE_WHITELIST_DUPLICATED_ENTRY(-32000, "Request cannot contain duplicate node entries"), NODE_WHITELIST_EXISTING_ENTRY(-32000, "Node whitelist cannot contain duplicate node entries"), NODE_WHITELIST_MISSING_ENTRY(-32000, "Node whitelist does not contain a specified node"), NODE_WHITELIS
 // This shouldn't happen, as the SELECT is bounded by MAXTASKS LogTasks( "Error: Task or activity_information ID (%d, %d) out of range while loading activities from database", task_id, activity_id );
 """ with debug.log_time(log.completion, 'Setting filter pattern'): self.pattern = val self.patternre = re.compile(val, re.IGNORECASE) self.invalidateFilter() sortcol = 0 try:
 // See the License for the specific language governing permissions and // limitations under the License.  #include <mutex> #include <fstream>
 res_handler = result_handler_plist_to_file.PlistToFile( buildaction, report_output, lock, export_plist_path, args.verbose) res_handler.print_steps = args.print_steps
 return append(result, c.bundle.Value().([]*x509.Certificate)...) } func (c *cacheImpl) BundleSubscribe() observer.Stream { return c.bundle.Observe() }
 if(node) { // After speculative instant completion removal, this is not needed (always sent via actionpacket code) client->syncs.forEachRunningSync([&](Sync* s) { if (s->localroot->node && node->isbelow(s->localroot->node)) { client->app->syncupdate_remote_rename(s, node); } }); } }
 // Configure TLS // TODO: Pick better options here rootCA, err := ioutil.ReadFile(filepath.Join(rootca, "ca.crt")) if err!= nil { log.Fatalf("Could not read root CA file: %v", err) }  tlsConfig := &tls.Config{ RootCAs:      x509.NewCertPool(), InsecureSkipVerify: true, } dialCreds := grpc.WithTransportCredentials(credentials.NewTLS(tlsConfig
 int s2n_extension_supported_iana_value_to_id(const uint16_t iana_value, s2n_extension_type_id *internal_id) { *internal_id = s2n_extension_iana_value_to_id(iana_value); S2N_WARN_IF(*internal_id == s2n_unsupported_extension, S2N_ERR_UNRECOGNIZED_EXTENSION); return S2N_SUCCESS;
 //---------------------------------------------------------------------------- #ifdef KOKKOS_DEBUG __device__ void verify_warp_convergence( const char * const where ) {
 return success; } std::vector<std::string> UDPv4Transport::GetBindingInterfacesList(const Locator_t& locator) const { std::vector<std::string> vOutputInterfaces; if (IsInterfaceWhiteListEmpty() ||!IPLocator::isAny(locator)) { vOutputInterfaces.push_back("0.0.0.0"); }
 #include <iostream> #define n 9 bool isPossible(int mat[][9], int i, int j, int no) { // Row or col nahin hona chahiye for (int x = 0; x < n; x++) { if (mat[x][j] == no || mat[i][x] == no) {
 class MasterProvisioning(Provisioning): def get_rfiles(self): jmeter_var_pattern = re.compile(JMeterExecuter.VAR_PATTERN) rfiles = [] additional_files = [] for executor in self.executors:
 final View layouttoast; LayoutInflater inflater = getLayoutInflater(); layouttoast = inflater.inflate(R.layout.toast_custom, (ViewGroup) findViewById(R.id.toastcustom)); ((TextView) layouttoast.findViewById(R.id.texttoast)).setText(getString(R.string.custom_toast)); Toast mytoast = new Toast(getBaseContext()); mytoast.setView(layouttoast);
.. versionadded:: 0.17.0.. versionchanged:: 0.19.0 The attached Reader when trajectory=True is now a MemoryReader.. versionchanged:: 0.21.0 The ``n_atoms`` parameter has been deprecated. """ if not n_atoms: n_residues = 0
 })); } function dismissNotification(notificationId) { var notification = Notifications.findOne({_id: notificationId, isDropped: false}); if (notification) { Notifications.remove({_id: notificationId});
 """Get machine ID""" return self._machine_id def barrier(self): """Barrier for all client nodes.
 VolumeChooserEnvironment chooserEnv = new VolumeChooserEnvironment(extent.getTableId(), context); Path newDir = new Path(vm.choose(chooserEnv, ServerConstants.getBaseUris(context.getConfiguration(), context.getHadoopConf())) + Path.SEPARATOR + ServerConstants.TABLE_DIR + Path.SEPARATOR + dir.getParent().getName() + Path.SEPARATOR + dir.getName());
 this.brokerController.getConfiguration().update(properties); if (properties.containsKey("brokerPermission")) { this.brokerController.getTopicConfigManager().getDataVersion().nextVersion(); this.brokerController.registerBrokerAll(false, false); } } else { log.error("string2Properties error");
 /** * @returns a new Multisig output script for given public keys, * requiring m of those public keys to spend * @param {Array.<PubKey>} pubkeys - an array of public keys * @param {Number} m - the number of signatures required to spend */ Script.buildMultisigOut = function(pubkeys, m) { var s = new Script();
 listTransformLambda = Expression.Lambda(invoked, listTransformLambda.Parameters); } var isCovariant = typeof(Func<object, object>).IsAssignableFrom(listTransformLambda.ReturnType) || typeof(Func<string, object>).IsAssignableFrom(listTransformLambda.ReturnType); if (!isCovariant) { listTransformLambda = Expression.Lambda(Expression.Convert(listTransformLambda.Body, typeof(object)), listTransformLambda.Parameters);
 import java.util.List; import java.util.stream.Collectors; import com.github.javaparser.StaticJavaParser; import com.github.javaparser.ast.Node; import com.github.javaparser.ast.CompilationUnit; import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration; import com.github.javaparser.ast.stmt.ReturnStmt; import org.drools.compiler.compiler.DecisionTableFactory; import org.drools.compiler.compiler.DecisionTableProvider; i
 if txResult.ErrorMessage!= "" { cadenceErrMessage := txResult.ErrorMessage if!utf8.ValidString(cadenceErrMessage) { h.log.Warn(). Str("block_id", blockID.String()). Str("transaction_id", txID.String()). Str("error_mgs", fmt.Sprintf("%q", cadenceErrMessage)). Msg("invalid character in Cadence error") // convert non UTF-8 string to a UTF-8 string for 
 m_is_initialized = true; // FIXME_OPENMPTARGET:  Only fix the number of teams for NVIDIA architectures. #if defined(KOKKOS_ARCH_VOLTA70) || defined(KOKKOS_ARCH_PASCAL60) || defined(KOKKOS_ARCH_AMPERE80) || defined(KOKKOS_ARCH_AMPERE86) #if defined(KOKKOS_COMPILER_CLANG) && (KOKKOS_CO
'success', ]; export const IMPORT_WALLET_STEPS: Array<ImportWalletStep> = [ WALLET_IMPORT_FILE, WALLET_SELECT_IMPORT, ]; export const WALLET_KINDS: EnumMap<string, WalletKind> = isIncentivizedTestnet? {
 // Server runner func runServer(conn *nats.Conn, transportFactory frugal.FTransportFactory, protocolFactory *frugal.FProtocolFactory) error { handler := &FooHandler{} processor := event.NewFFooProcessor(handler) http.HandleFunc("/frugal", frugal.NewFrugalHandlerFunc(processor, protocolFactory, protocolFactory)) go func() { fmt.Println("Starting the http server... on ", "/frugal", ":8090") http
 assert_eq(s1, s2, atol=0.01) assert_eq(p1_proba, p2_proba, atol=0.8) else: assert_eq(s1, s2) assert_eq(p1, p2) assert_eq(p1_proba, p2_proba, atol=0.03) assert_eq(y, p1) assert_eq(y, p2) assert_eq(p1_local, p2) 
 class TestTransTable(object): @pytest.fixture() def tt(self): return TransTable(10, 4, 2, np.array([0, 0, 2, 2, 1, 1, 3, 3, 1, 2]), np.array([0, 1, 1, 0])) def test_a2r(self, tt): for aix, rix in zip(
 public function get_redirect_url() { if (! isset( $_POST['nonce'] ) ||! wp_verify_nonce( $_POST['nonce'], 'give-redirect' ) ) { wp_die(); }
 @Override public SMTLibTerm transform(UninterpretedToken uninterpretedToken) { if (uninterpretedToken.sort() == Sort.KVARIABLE) { if (binders.contains(uninterpretedToken)) { return new SMTLibTerm(uninterpretedToken.javaBackendValue()); } else { throw new SMTTranslationFailure("unbounded K variable: " + uninterpretedToken);
 } } func Test_configWithArgs(t *testing.T) { type args struct { urlStr string } tests := []struct { name    string
 line = inf.readline() while not len(line.split()) == 5: if line == '': raise Exception('Error in file format. Could not find timestep.') line = inf.readline() while line and not line.startswith('timestep'): name = line[:8].strip()
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4432-SEA 1645523378 1514332367</p> <hr> <p>Varnish cache server</p> </body>
 nodeNameToXPaths.clear(); addQueryToNode(originalXPath, AST_ROOT); if (LOG.isLoggable(Level.FINE)) { LOG.log(Level.FINE, "Unable to use RuleChain for XPath: " + xpath); } }
 require.NoError(t, err) assert.Equal(t, "cacert", string(contents))  os.Remove(fileName) }
 vString *name = vStringNew (); /* Found Autocommand Group (augroup) */ const unsigned char *cp = skipWord (line, true); if (isspace ((int) *cp)) { while (*cp && isspace ((int) *cp))
 '--recv-keys E084DAB9' # Add marutter's c2d4u repository. if r_version < '3.5.0': sh.cmd'sudo add-apt-repository -y "ppa:marutter/rrutter"' sh.cmd'sudo add-apt-repository -y "ppa:marutter/c2d4u"' else
 name:           "all bundles server fails", count:          2, expectedStderr: "Error: rpc error: code = Internal desc = some error\n", serverErr:      status.Errorf(codes.Internal, "some error"), }, { name:           "one bundle",
 func (r *peerRegistry) isConnected(peerID libp2ppeer.ID, remoteAddr ma.Multiaddr) (swarm.Address, bool) { r.mu.RLock() overlay, found := r.overlays[peerID] if!found { r.mu.RUnlock() return swarm.Address{}, false } if remoteAddr == nil { r.mu.RUnlock() return swarm.Address{}, false }  // check connection remote address if conns, ok :
 c.RLock() defer c.RUnlock() labels, err := json.Marshal(c.container.Config.Labels) if err!= nil { return nil, err } result := report.MakeNodeMetadataWith(map[string]string{ ContainerID:      c.ID(), ContainerName:    strings.TrimPrefix(c.container.Name, "/"),
 tp.RegisterSpanProcessor(sp) wantCount := 1 err := sp.Shutdown(context.Background()) if err!= nil { t.Errorf("Shutdown() = %v, want <nil>", err) } gotCount := sp.shutdownCount if wantCount!= gotCount {
 import java.util.Collection; import java.util.Collections; import java.util.Iterator; import java.util.Map; import com.google.common.collect.Lists; import com.google.inject.Inject; import com.google.inject.Singleton;
 files.saveToKompiled("parsed.txt", parsedDef.toString()); checkDefinition(parsedDef, excludedModuleTags); sw.printIntermediate("Validate definition"); Definition kompiledDefinition = pipeline.apply(parsedDef);
 const commonJSDirectory = path.resolve(__dirname, '../../dist/commonjs'); const modulesDirectory = path.resolve(__dirname, '../../dist/modules'); const banner = `/* es5-compat-disable */`; const footer = `/** version: ${version} */`; function rollupConfig(config) {
 @Override public int getTypeParameterCount() { if (typeParameterCount == -1) { try { typeParameterCount = getTypeParameters(clazz).length; } catch (LinkageError e) { typeParameterCount = 0; } } return typeParameterCount; }
 # [ v[list_map[i]] for i in range( nmodes) ] )) # TODO: This structure of the `results` list will change in #       MDAnalysis version 2.0. warnings.warn( "This structure of the `results` list will change in " "MDAnalysis version 2.0.", category=DeprecationWarning )
 return ret def for_all_pckg(packages, fun, add_additional_packages=True): """Iterates over all packages, executes a function. Returns all function results as a list""" ret = [] for pckg in all_packages: if pckg.key in packages:
 schema_seq = int(tar.extractfile(member).read().strip()) if schema_seq!= LISTENS_DUMP_SCHEMA_VERSION: raise SchemaMismatchException('Please ensure that the data dump version matches the code version in order to import the data') elif file_name.endswith('.listens'):
 // Carry over the type from the declaration Class<?> nodeType = ((TypeNode) node.getNameDeclaration().getNode()).getType(); if (nodeType!= null &&!isGeneric(nodeType)) { node.setType(nodeType); return super.visit(node, data); }
 // RetryInterval tags some interval for retry logic RetryInterval = "retry_interval" // RevisionNumber tags a registration entry revision number RevisionNumber = "revision_number" // Schema tags database schema version
 class TestFont: TESTS = { # (style, weight, pointsize, pixelsize, family '"Foobar Neue"':
 if not config.base_configuration_reference config.base_configuration_reference = xcconfig else UI.notice "Using existing base configuration '#{config.base_configuration_reference.name}'" end end end
 import java.util.concurrent.atomic.AtomicInteger; import java.util.stream.Stream; public abstract class NodeDataRequest { private final RequestType requestType; private final Hash hash; private BytesValue data;
 plot_opts = Keywords(['plot_opt1', 'plot_opt2']+custom_plot, name) opt_groups = {'plot': Options(allowed_keywords=plot_opts),'style': Options(allowed_keywords=style_opts), 'output': Options(allowed_keywords=['backend'])} Store._options[backend][name] = opt_groups
 return ret def from_networkx(self, nx_graph): """Convert from networkx graph. If 'id' edge attribute exists, the edge will be added follows
 ) def _wrap_partitions(self, partitions): if isinstance(partitions, self.instance_type): return [self._partition_type(partitions)] else: return [ self.partition_type( partitions[i],
 import MDAnalysis as mda class GROReadBench(object): def time_read_GRO_coordinates(self): """Benchmark reading of standard testsuite GRO file.""" GROReader(GRO).read() def time_parse_GRO_file(self): with GROParser(GRO) as p: top = p.parse() def time_create_GRO_universe(self): """Time to create MDA Universe of GRO"""
 for (int i = 0; i < train_data_->num_features(); ++i) { total_histogram_size += sizeof(HistogramBinEntry) * train_data_->FeatureAt(i)->num_bin(); } // at least need 2 leaves max_cache_size = Common::Max(2, max_cache_size);
 print('Done saving data into cached files.') def _get_hash(self): """ Returns the hash of the dataset. """ return abs(hash(self._hash_key)) @property
 { Initialize(); // only start server if we want to listen if (!s_DontListen) {
 ---------- angle : float Rotation angle in degrees. axis : array_like or tuple of 2 AtomGroups Rotation axis vector. If a tuple is given the axis will be determined by the difference vector of the centroid for both AtomGroups. point : array_like or tuple of 2 AtomGroups (optional) Center of rotation. If ``None`` then the center of geometry of this group is used if ``axis`` is an array. If ``ax
 /* * Check that setting FASTDDS_ENVIRONMENT_FILE to an unexisting file issues 1 logWarning */ TEST_F(PubSubBasic, EnvFileWarningWrongFile) { env_file_warning("unexisting_file", 1); }
 Task Navigate<TViewModel>(IMvxBundle presentationBundle = null) where TViewModel : IMvxViewModel; Task Navigate<TViewModel, TParameter>(TParameter param, IMvxBundle presentationBundle = null) where TViewModel : IMvxViewModel<TParameter>; Task Navigate<TViewModel, TResult>(IMvxBundle presentationBundle = null, CancellationToken cancellationToken = default(CancellationToken)) where TViewModel : IMvxViewModelResult<TResult> where TResult : class; Task Navigat
 end def file_options custom_options_file? [custom_options] : [global_options, project_options, personal_options] end def env_options
 Tags:   tagg, }) var ns storage.Storer var recoverFunc recovery.RecoveryHook if o.GlobalPinningEnabled { ns = netstore.New(storer, recoverFunc, retrieve, logger, chunkvalidators) recoverFunc = recovery.NewRecoveryHook(psss) } else { ns = netstore.New(storer, nil, retrieve, logger, chunkvalidators)
 # we can set the track's synced git SHA to the HEAD SHA track.update!(synced_to_git_sha: head_git_track.commit.oid) rescue StandardError => e Github::Issue::OpenForSyncFailure.(track, e, head_git_track.commit.oid) end private
 } void FreeOrionNode::send_chat_message(godot::String text) { std::string text8 = utf8_from_wchar(text.unicode_str()); m_app->Networking().SendMessage(PlayerChatMessage(text8, {}, false)); }
 } key = pkidh.pkcs11_provider->load_private_key(certificate, file, password, exception); } else {
 } } // namespace knapsack } // namespace greedy_algorithms using greedy_algorithms::knapsack::Item; using greedy_algorithms::knapsack::quickSort; int main() { std::cout << "\nEnter the capacity of the knapsack : "; float capacity;
 assert not host_blocker._is_blocked(url) def blocklist_to_url(path: pathlib.Path) -> QUrl: """Get an example.com-URL with the given path as path.""" assert not path.is_absolute(), path url = QUrl("http://example.com/") url.setPath("/" + path.name) assert url.isValid(), url.errorString() return url
 #include <stdlib.h> #include <kdberrors.h> #include <kdbextension.h> #include "ini.h" #include "contract.h"
 { char path[MAXPATHLEN]; int ret, fd; if (!strcmp(console->path, "none")) return 0; ret = snprintf(path, sizeof(path), "%s/dev/console", rootfs_path); if (ret < 0 || (size_t)ret >= sizeof(path)) return -1;
 *       to 1.4.196 because 1.4.197 broke audio metadata being *       inserted/updated * - 23: Store aspect ratios as strings again */ private final int latestVersion = 23; // Database column sizes private final int SIZE_CODECV = 32;
 case KeyEvent.KEYCODE_DPAD_LEFT: //Go Back onRewind(); break; case KeyEvent.KEYCODE_DPAD_RIGHT: //Go Forward onFastForward(); break; case KeyEvent.KEYCODE_M: //Mute/Unmute
 RouteRefreshInterval               time.Duration `config:"seconds;90"` IptablesRefreshInterval            time.Duration `config:"seconds;90"` IptablesPostWriteCheckIntervalSecs time.Duration `config:"seconds;30"` IptablesLockFilePath               string        `config:"file;/var/run/xtables.lock"` IptablesLockTimeoutSecs            time.Duration `config:"seconds;0"` IptablesLockProbeIntervalMillis    
 end def target_column_of_keyword(*key_names) define_singleton_method(:_grouping_condition) do "#{key_names.map(&:to_s).join("_or_")}_cont_all".to_sym end tap(&singleton_class.method(:private)) end private
 /* Copyright (C) 2000-2012 by George Williams */ /* Copyright (C) 2012-2013 by Khaled Hosny */ /* Copyright (C) 2013 by Matthew Skala */ /* Copyright (C) 2020 by Rajeesh KV and Nithin KV */ /* * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are met:
 /*!!! Bug. Lose device tables here */ if ( isv ) { space->u.pair.vr[0].v_adv_off = kp->off; space->u.pair.vr[0].h_adv_off = kp->off; } else { space->u.pair.vr[0].v_adv_off = kp->off; space->u.pair.vr[0].h_adv_off = kp->off; } return( space ); }
 } } func (r *Reconciler) makeIngressHPAArgs(bc *intv1alpha1.BrokerCell) resources.AutoscalingArgs { return resources.AutoscalingArgs{ ComponentName:     resources.IngressName, BrokerCell:        bc,
 struct st_h2o_http3_server_conn_t *conn = get_conn(stream); if (stream->tunnel->datagram_flow_id!= UINT64_MAX) { khiter_t iter = kh_get(stream, conn->datagram_flows, stream->tunnel->datagram_flow_id); /* the tunnel wasn't established yet */ if (iter!= kh_end(conn->datagram_flows)) { kh_del(stream, conn->
 * are part of a newgrf vehicle set which changes bounding boxes within a * single vehicle direction. * * TODO: is there a cleaner solution than casting to a mutable type? */ v->rstate.is_viewport_candidate = true; } v = v->hash_viewport_next;
 public static readonly string MonthEnd = $@"{MonthRegex}(\s+de\s*)?$"; public static readonly string WeekDayEnd = $@"(deze\s+)?{WeekDayRegex}\s*,?\s*$"; public const string WeekDayStart = @"^[\.]"; public const string RangeUnitRegex = @"\b(?<unit>jaren|jaar|maand(en)?|weken|
 "method_%s_%s" % (type_name, attr_name), kwargs) if method_handler is None: # in this case we don't need the real directives on the call to get_slot_table if (attr_name in TypeSlots.method_name_to_slot or attr_name in ['__new__', '__class__']): method_handler = self._find_handler( "slot%s" % attr_name, kwargs)
 String topic = commandLine.getOptionValue("t").trim(); String timeStampStr = commandLine.getOptionValue("s").trim(); //when the param "timestamp" is set to now,it should return the max offset of this queue long timestamp = timeStampStr.equals("now")? Long.MIN_VALUE : 0; try { if (timestamp == 0) {
 public async Task<List<Tuple<string, string>>> GetGroupMembers(string groupId, DateTimeOffset groupMembershipTime, CancellationToken cancellationToken) { ResourceWrapper groupResource; using (IScoped<IFhirDataStore> dataStore = _fhirDataStoreFactory.Invoke()) { groupResource = await dataStore.Value.GetAsync(new ResourceKey(KnownResourceTypes.Group, groupId), cancellationToken); }
 // NewSubscription spins up a goroutine to gather acks into batches and // periodically send them to the server. // It is for use by provider implementations. func NewSubscription(ctx context.Context, d driver.Subscription) error { handler := func(item interface{}) { ms := item.([]*Message) var ids []driver.AckID
 // Licensed under the MIT License (MIT). See LICENSE in the repo root for license information. // ------------------------------------------------------------------------------------------------- using System; using Microsoft.Health.Fhir.Core.Models; using Microsoft.Health.Fhir.Core.ValueSets; using Microsoft.Health.Fhir.SqlServer.Features.Storage; using Microsoft.Health.Fhir.ValueSets; using Newtonsoft.Json; namespace Microsoft.Health.Fhir.SqlServer.Features.Search {
 return instanceNamePath; } private String getRootUserName(SiteConfiguration siteConfig, Opts opts) throws IOException { if (siteConfig.getBoolean(Property.INSTANCE_RPC_SASL_ENABLED)) { return opts.rootUser; } Console c = System.console(); System.out.println("Running against secured HDFS"); if (opts.rootUser!= null) {
 state := &ConnectionMaker{ router:            router, queryChan:         queryChan, failedConnections: make(map[PeerName]*FailedConnection)} go state.queryLoop(queryChan) return state }
 OS_ASSERT(usePriceEscalationFile); for (IdfObject object : usePriceEscalationFile->objects()){ std::string name = object.nameString().get(); if ((name.find(*region) == 0) && (name.find(*sector)!= string::npos)){ m_idfObjects.push_back(object);
 if (!is_a($resolvedClass, ResizableThumbnailInterface::class, true)) { @trigger_error(sprintf( 'Not implementing %s on a format thumbnail that uses resizers is deprecated since sonata-project/media-bundle 3.x'.' and will not work on 4.0. Please implement the interface on %s', ResizableThumbnailInterface::class, $resolvedClass ), \E_USER_DEPRECATED);
 return 0, false case codes.Unknown: // Retry GOAWAY, see https://github.com/googleapis/google-cloud-go/issues/4257. isGoaway := strings.Contains(s.Message(), "closing error reading from server: EOF") && strings.Contains(s.Message(), "received prior goaway") && strings.Contains(s.Message(), "received GOAWAY frame") if isGoaway { return r.bo.Pause(), true
 const uint32_t skill = hero.GetLevelSkill( Skill::Secondary::PATHFINDING ); double maxPriority = -1.0 * Maps::Ground::slowestMovePenalty * world.w() * world.h(); size_t selectedNode = mapObjects.size(); for ( size_t idx = 0; idx < mapObjects.size(); ++idx ) { const MapObjectNode & node = mapObjects[idx]; if ( HeroesVal
 // THE POSSIBILITY OF SUCH DAMAGE. // namespace NLog.LayoutRenderers { #if!NETSTANDARD1_0 &&!SILVERLIGHT using System; using System.Net; using System.Net.NetworkInformation;
 TestFile:     e.TestFile, LineNum:      e.LineNum, Query:        e.Query, Duration:     e.Duration, Result:       result, ErrorMessage: e.ErrorMessage, }
 // Blob names are escaped using url.PathEscape before writing them // to disk, and unescaped using url.PathUnescape during List. // Exception: "/" is not escaped, so that it can be used as the real file // separator on the filesystem. // Filenames on disk that return an error for url.PathUnescape are not visible // using fileblob. //
 collect := func(projected, att *design.AttributeExpr) []*ProjectedTypeData { return collectProjectedTypesR(projected, att, seen, scope, viewspkg) } projected.ForcePointer = true // If the attribute type has already been projected (i.e., projected type // data exists in the cache), return the cached value. if cached, ok := seen[projected]; ok { return cached, nil }  switch pt := p
 }, { test: /\.mdx?$/, use: [ { loader: 'babel-loader',
 // @todo Refactor the above condition statement. $size = 'full'; if (! wp_attachment_is_image( $item_id ) ) { // No default sizes for non-images. // When a size is defined this will be overwritten. $size = null;
 proj_destroy(P); } proj_destroy(P); proj_context_destroy(ctx); }
 for iter in range(args.iters): for pipe in pipes: image_ssd_crop, image_decode_crop, \ image_slice_cpu, image_slice_gpu, \ boxes_ssd_crop, boxes_random_crop, \
 { _contextAccessor.FhirRequestContext.BundleIssues.Add( new OperationOutcomeIssue( OperationOutcomeConstants.IssueSeverity.Information, OperationOutcomeConstants.IssueType.Informational, string.Format(Core.Resources.InvalidTypeParameter, string.Join(",", badTypes)))); if (badTypes.Count!= types.Count) { foreach (var badType in badTypes) { unsupportedSearchParameters.Add(new Tuple<string, string>(KnownQueryParameterNames.Type, badType));
 int ret; if (is_encrypt) { /* encrypt given data, with the QUIC tag appended if necessary */ uint8_t srcbuf[src.len + sizeof(self->quic_tag)]; if (self->is_quic) { memcpy(srcbuf, src.base, src.len);
 { CheckIfExportIsEnabled(); if (!string.IsNullOrWhiteSpace(anonymizationConfigLocation) &&!string.IsNullOrWhiteSpace(anonymizationConfigFileETag)) { CheckIfAnonymizedExportIsEnabled(); }
 }). Module("sdk client connection options", func(builder cmd.NodeBuilder, node *cmd.NodeConfig) error { if len(accessNodeIDS) < common.DefaultAccessNodeIDSMinimum { return fmt.Errorf("invalid flag --access-node-ids atleast %d IDs must be provided", common.DefaultAccessNodeIDSMinimum) } flowClientOpts, err = common.PrepareFlowClientOpts(accessNodeIDS, insecureAccessAPI, node.State.Sealed())
 // setup cursor const CursorRestorer cursorRestorer( true, Cursor::POINTER ); const u32 min = std::min( 1U, redistributeMax ); const int spacer = 10; const int defaultYPosition = 160;
 return node def visit_FuncDefNode(self, node): if not node.doc or (isinstance(node, CFuncDefNode) and node.fused_py_func): return node if not self.cdef_docstrings: if isinstance(node, CFuncDefNode) and not node.py_func:
 $friendlyusage = get_friendly_size((int)$totalusage); if($mybb->usergroup['attachquota']) { $percent = "(".brackets(round(($totalusage/($mybb->usergroup['attachquota']*1024))*100))."%"; $attachquota = get_friendly_size($mybb->usergroup['attachquota']*1024); $usagenote = $lang->sprintf($lang->attachments
 Kingdom::Kingdom() : color( Color::NONE ), lost_town_days( 0 ), _lastBattleWinHeroID( 0 ), visited_tents_colors( 0 ) { heroes_cond_loss.reserve( 4 ); }
 if self.rule_book is None or force_rebuild: self.build_rule_book() violations = [] for binding in policy.get('bindings', []): violations = itertools.chain( violations,
 sct_list.data = s2n_stuffer_raw_read(extension, sct_list.size); notnull_check(sct_list.data); s2n_dup(&sct_list, &conn->ct_response); return 0; }
 @Override public ConnectionType setNetworkConnection( ConnectionType type) { Map<String, Integer> mode = ImmutableMap.of("type", type.toString()); return new ConnectionType(((Number) executeMethod.execute(DriverCommand.SET_NETWORK_CONNECTION, ImmutableMap.of("parameters", mode)))
 input.typeahead({ emptyTemplate: function(query) { return $('<div>').text("No results found for ").append( $('<pre>').text(query) ); }, maxItem: 1e3,
 ) func (c *Controller) Sync(ctx context.Context, crt *v1alpha1.Certificate) (err error) { c.metrics.ControllerSyncCallCount.Inc() log := logf.FromContext(ctx) dbg := log.V(logf.DebugLevel)
 var match = Regex.Match(dateString, @"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}"); if (match.Success) release.PublishDate = DateTime.ParseExact(match.Value, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture); var sizeStr = row.QuerySelector(".bSize").TextContent.Trim(); release.Size = ReleaseInfo.GetBytes(sizeStr); 
 dml_map[typeref] = (dml_cte, dml_rvar) if ( isinstance(ir_stmt, irast.DMLStmt) and ir_stmt.on_conflict and ir_stmt.on_conflict[1] is not None
 private String diskUtil() { double physicRatio = 100; String storePath = this.brokerController.getMessageStoreConfig().getStorePathCommitLog(); String[] paths = storePath.trim().split(MessageStoreConfig.MULTI_PATH_SPLITTER); for (String storePathPhysic : paths) { physicRatio = Math.min(physicRatio, UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic)); } String storePathLogis =
 #include "AirflowNetworkDistributionLinkage.hpp" #include "AirflowNetworkDistributionLinkage_Impl.hpp" #include "AirflowNetworkNode.hpp" #include "AirflowNetworkNode_Impl.hpp" #include "AirflowNetworkComponent.hpp" #include "AirflowNetworkComponent_Impl.hpp" #include "ThermalZone.hpp" #include "ThermalZone_Impl.hpp"
 self.output.nameValue($('Use status'), circuitAuth.authorizationUseStatus); self.output.nameValue($('Authorization Key'), circuitAuth.authorizationKey); self.output.nameValue($('Provisioning state'), circuitAuth.provisioningState); } }); }
 import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver; import org.junit.Test; import java.io.IOException; import java.nio.file.Path; import static org.junit.Assert.assertEquals;
 ) # normalize  to get smoothed representation norm = th.pow(graph.in_degrees().float().clamp(min=1), -0.5) norm = norm.to(feat.device).unsqueeze(1) feat = feat * norm graph.ndata["h"] = feat
 if (tablet.needsSplit()) { tablet.getTabletServer().executeSplit(tablet); } } finally { tablet.minorCompactionComplete(); }
 // `{http.request.tls.client.fingerprint}` | The SHA256 checksum of the client certificate // `{http.request.tls.client.public_key}` | The public key of the client certificate. // `{http.request.tls.client.public_key_sha256}` | The SHA256 checksum of the client's public key. // `{http.request.tls.client.certificate_pem}` | The PEM-encoded value of the certificate. // `{http.request.tls.
 required(102, "partition", partitionType), required(103, "record_count", LongType.get()), required(104, "file_size_in_bytes", LongType.get()), // For backwards compatibility, we must always write this field, but it is optional for newer readers. optional(105, "block_size_in_bytes", LongType.get()), optional(106, "file_ordinal", IntegerType.get()), optional(107, "sort_col
 "ibft_getPendingVotes", emptyList(), web3jService, ProposalsResponse.class); } public Request<?, SignersBlockResponse> getProposals(final String blockNumber) { return new Request<>( "ibft_getValidatorsByBlockNumber", singletonList(blockNumber),
 import com.hazelcast.jet.pipeline.BatchSource; import com.hazelcast.jet.pipeline.SourceBuilder; import com.hazelcast.jet.pipeline.SourceBuilder.SourceBuffer; import java.util.concurrent.atomic.AtomicReference; import javax.annotation.Nonnull; import javax.annotation.Nullable;
 // StartImplicitTeamMigration tells mdserver to put a implicit team // migration lock on id, which prevents any rekey MD writes from going // in. StartImplicitTeamMigration(ctx context.Context, id tlf.ID) error // PruneBranch prunes all unmerged history for the given TLF branch.
 @Deprecated public Date getSessionCredentitalsExpiration() { return getSessionCredentialsExpiration(); } public String getIdentityPoolId() {
 params = dict(get_param_values(element), kdims=[x, y], datatype=['xarray'], bounds=bounds) if self.vdim_prefix: kdim_list = '_'.join(str(kd) for kd in params['kdims']) vdim_prefix = self.vdim_prefix.format(kdims=kdim_list) else:
 if action_data is not None: groupdata.append(action_data) groups.append('\n'.join(groupdata)) options = '\n'.join(groups) # epilog if parser.epilog is not None:
 if consistencyCheck() { return } if!consistencyCheck() { panic("Wait channel fired without matching block in round") } }
 public static TextEncoder CreateUtf8Encoder(byte[][] symbols) { return new Utf8TextEncoding(symbols); } public static TextEncoder CreateUtf16Encoder(byte[][] symbols) { return new Utf16TextEncodingLE(symbols); } public static TextEncoder CreateUtf16EncoderBE(byte[][] symbols) { return new Utf16TextEncodingBE(symbols); } #endregion Static factory methods
 self.bulk_size = self.settings.get("bulk-size", self.bulk_size) self.browser_open = self.settings.get("browser-open", self.browser_open) token = self.settings.get("token", "") proxy_settings = self.settings.get("proxy", {}) if proxy_settings: if proxy_settings.get("address"): proxy_url = urlsplit(proxy_settings.get("address"))
 import software.amazon.awssdk.annotations.SdkPublicApi; import software.amazon.awssdk.utils.ToString; import software.amazon.awssdk.utils.Validate; import java.time.Duration; /** * Represents a completed download directory transfer to Amazon S3. It can be used to track
 def __init__(self, config): self.config = config self.gmap_client = googlemaps.Client(config.gmapkey) self.fort_timeouts = dict() self.pokemon_list = json.load( open(os.path.join('data', 'pokemon.json'))
 TEST_P(PubSubBasic, BestEffortTwoWritersConsecutives) { // Pull mode incompatible with best effort if (use_pull_mode) { return;
 */ public function iAmAuthenticatedWithAndForTheBackend($username, $password) { $this->visit('https://t3n.de/'); $this->waitUntilTextIsNotPresent('Anmelden'); $this->fillField('Username', $username); $this->fillField('Password', $password); $this->pressButton('Login');
 return } log.WithError(err).WithField("procPID", procPID).WithField("reqPID", reqPID).WithFields(wbs.Session.OWI()).Error("cannot mount proc") if _, ok := status.FromError(err);!ok { err = status.Error(codes.Internal, "cannot mount proc") }
 "github.com/sirupsen/logrus" ) func LoggerFromFieldLogger(fl logrus.FieldLogger) logrus.StdLogger { errWriter := fl.WithFields(logrus.Fields{}).WriterLevel(logrus.ErrorLevel) return errWriter }
 String s = new String(b, StandardCharsets.UTF_8); if (argument.equals("description/fetch")) { s = prepareUmsSpec(s); } return s; } private String prepareUmsSpec(String umsXml) { String result = umsXml.replace("[uuid]", UMS.get().usn()); //.substring(0, UMS.get().usn().length()-2)); if (UMS.get().getSer
 Types.NestedField.optional(icebergID, name, type); } private static class OrcToIcebergSchemaVisitor extends OrcSchemaWithTypeVisitor<Optional<Types.NestedField>> { private final Map<Integer, OrcField> icebergToOrcMapping;
 QMenu *Player::getCardMenu() const { return aCardMenu->menu(); // can return nullptr } bool Player::hasCardMenu() const { return aCardMenu!= nullptr; } QString Player::getName() const
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4444-SEA 1645545924 152262799</p> <hr> <p>Varnish cache server</p> </body>
 } return; }  // If we are not in the editor, then don't show the highlight if (this._editor) { Mozilla.UITour.showHighlight("screenshots"); } } else {
 repos_str = repos.collect {|k,v| "#{k} = \"#{v}\""}.join(", ") options_repos = "options(repos = c(#{repos_str}))" sh.cmd %Q{echo '#{options_repos}' > ~/.Rprofile.site} # Set -Wall -pedantic in the site Makevars to catch more issues, # as CRAN runs with -pedantic
 def declare_var(self, name, type, pos, cname = None, visibility = 'private', api = 0, in_pxd = 0, is_cdef = True, walrus_target = False): if walrus_target: # should be declared in the parent scope instead entry = self.parent_scope.declare_var(name, type, pos, cname=cname, visibility=visibility, api=api, in_p
 // The limit menu depends on other panels that may set a filter query, e.g. search and filter. // In order to correctly calculate the total row count, the limit menu must be compiled last. // We insert a placeholder here and compile the limit menu after all other panels. if ($strSubPanel == 'limit') { // Set placeholder to inject compiled limit menu later
 walletsDropdownError: { id:'staking.redeemItnRewards.step1.walletsDropdownError', defaultMessage: '!!!The selected wallet does not have sufficient {ADASC} to cover the necessary transaction fees. Please choose another wallet or add more funds to this one.', description: 'walletsDropdownError for Redeem Incentivized Testnet - Step 1', },
 response.headers['X-Frame-Options'] = 'deny' return response def render(self, path, values=None, status=200): """Write HTML response.""" if values is None: values = {}
 contained = false; List<Instance> instances = service.allIPs(); for (Instance instance : instances) { if (IpUtil.containIpAndPort(containedInstance, instance.getIp(), instance.getPort())) { contained = true; break;
 newSucc := make([]PlanNode, 0, len(newRoot.Successors())) for _, succ := range newRoot.Successors() { if succ == root { continue } newSucc = append(newSucc, succ) }
 // Copy options if flag was set if (cl.hasOption(createTableOptCopyConfig.getOpt())) { if (shellState.getAccumuloClient().tableOperations().exists(tableName)) { final Map<String,String> configuration = shellState.getAccumuloClient().tableOperations().getPropertiesMap(cl.getOptionValue(createTableOptCopyConfig.getOpt())); for (Entry<String,String> entry : configuration.entrySet()) { if (Property.isValidTablePropertyK
 // Load config parameters $types = $this->getTypes($config); $extras = $this->getExtras($config); $rows_before = ctype_digit($config->AlphaBrowse->rows_before?? null)? (int)$config->AlphaBrowse->rows_before : 0; $highlighting = $config->AlphaBrowse->highlighting?? false; $limit  = ctype_digit($config->AlphaBrowse->page_siz
 func (ms *manifestStore) verifyManifest(ctx context.Context, mnfst *schema1.SignedManifest) error { var errs distribution.ErrManifestVerification if len(mnfst.History)!= len(mnfst.FSLayers) || mnfst.Name!= mnfst.History[0].Repo.Name { errs = append(errs, fmt.Errorf("mismatched history and fslayer cardinality %d!= %d", le
 'name': 'id','schema': {'type':'string'},'required': 'true', 'description': 'UUID of the objective to be retrieved'}]) @aiohttp_apispec.querystring_schema(BaseGetOneQuerySchema) @aiohttp_apispec.response_schema(ObjectiveSchema(partial=True), description='Returns single objective in ObjectiveSchema format.')
 } if s.addPeersHandler!= nil { err := s.addPeersHandler(ctx, peers...) if err!= nil { log.Error(err) } return err } return nil
 import ( "k8s.io/apimachinery/pkg/runtime/schema" ) var (
 } @Test public void whenControllersArePresentMethodShouldDoNothingAndReturnSuccess() { method = new PermReloadPermissionsFromFile(controller, controller); JsonRpcResponse response = method.response(reloadRequest()); assertThat(response).isEqualToComparingFieldByField(successResponse()); } @Test
 """ # This copes with mixed strand features & all on reverse: parts = [loc.extract(parent_sequence) for loc in self.parts] return Seq("").join(parts)
 public GlucoseStatus round() { this.glucose = Round.roundTo(this.glucose, 0.1); this.noise = Round.roundTo(this.noise, 0.01); this.delta = Round.roundTo(this.delta, 0.01); this.avgdelta = Round.roundTo(this.avgdelta, 0.01); this.short_avgdelta = Round.roundTo(this.short_avgdelta, 0.01);
 test.Runs(t, test.ExecRun{ // unset CONVOX_WAIT in case it's present in the host env Command: "CONVOX_WAIT= convox apps create", Dir:     "../../manifest/fixtures/dir-name-with-dots/foo.bar", Stdout:  "Creating app foo-bar... CREATING\n",
 'database_revisions'          => [ 'type'              => 'checkbox', 'label'             => __( 'Revisions', 'rocket' ), // translators: %s is the number of revisions found in the database. It's a formatted number, don't use %d. 'description'       => sprintf( _n( '%s revision in your database.', '%s revisions in your database.', $total['revisions'], 'rocket' )
 */ public abstract class FeedPreferenceSkipDialog extends AlertDialog.Builder { public FeedPreferenceSkipDialog(Context context) { super(context); setTitle(R.string.pref_feed_skip); View rootView = View.inflate(context, R.layout.feed_pref_skip_dialog, null); setView(rootView);
 return &pluginInfo, nil } // SignCsr signs a CSR and returns the PEM encoded certificate. func (m memoryPlugin) SignCsr(csrPEM []byte) ([]byte, error) { m.mtx.RLock() defer m.mtx.RUnlock()
 void ScalarActuator::constructOutputs() { constructOutput<double>("actuation", &ScalarActuator::getActuation, SimTK::Stage::Velocity); constructOutput<double>("speed", &ScalarActuator::getSpeed, SimTK::Stage::Velocity); }
 } if freshData.PlayerRound+1 == vote.R.Round { if vote.R.Step > next { return fmt.Errorf("filtered future vote from bad step: player.Round=%v; vote.Step=%v", freshData.PlayerRound, vote.R.Step) } // pipeline votes from next round period 0 return nil } switch vote.R.Period {
 apps []*archer.Application store          storeSvc sessProvider   *sess.Session } // NewEnvDescriber instantiates an environment describer.
 // their own interrupt semantics. if signalCmd, ok := cmd.(SignalCommand);!ok ||!signalCmd.InstallsSignalHandlers() { var stop context.CancelFunc ctx, stop = signal.NotifyContext(ctx, os.Interrupt, syscall.SIGTERM) defer stop() }
 /** * Resolves the SecurityContext * @author Gary Russell * @since 5.2.x */ public class CurrentSecurityContextArgumentResolver extends HandlerMethodArgumentResolverSupport {
 b.Run("BenchmarkActionListGet", func(b *testing.B) { benchmarkActionListGet(100, b, coll) }) b.Run("BenchmarkActionListClear", func(b *testing.B) { benchmarkActionListClear(100, b, coll) }) } func benchmarkSingleActionPut(n int, b *testing.B, coll *docstore.Collection) {
 if debug: sys.stderr.write("%s\n" % cmdline_str) status = subprocess.call(cmdline_str, shell=True) if status > 1: if kbyte!= 0:  # possible memory problem; could be None sys.stderr.write("INFO trying again with the linear model\n")
 def __init__(self, atomgroup, reference=None, select='all', groupselections=None, weights=None, tol_mass=0.1, ref_frame=0, **kwargs): """Parameters ---------- atomgroup : AtomGroup or Universe
 # initialize, if not done yet if not hasattr(plugin, "_initialized"): LOG.debug("Initializing Lambda executor plugin %s", plugin.__class__) plugin.initialize() plugin._initialized = True
 self.nickname = self.config.get('nickname','') self.team = self.config.get('team',0) self.tutorial_run = True self.team_run = True def work(self):
 } catch (final NotAuthorizedException nae) { throw new CognitoNotAuthorizedException("User is not authenticated", nae); } catch (final Exception e) { throw new CognitoInternalErrorException("Failed to authenticate user", e); } }
 def cimported_files(self, filename): if filename[-4:] == '.pyx' and path_exists(filename[:-4] + '.pxd'): pxd_list = [filename[:-4] + '.pxd'] elif filename[-3:] == '.py' and path_exists(filename[:-3] + '.pxd'): pxd_list = [filename[:-3] + '.pxd'] else: pxd_list = []
 CREATE TABLE IF NOT EXISTS images ( id VARCHAR(200) PRIMARY KEY, image BYTEA, shot_id VARCHAR(200) NOT NULL, FOREIGN KEY (shot_id) REFERENCES shots(id) ON DELETE CASCADE ); CREATE TABLE IF NOT EXISTS accounts (
 private def diaper_drive_participant_params params.require(:diaper_drive_participant).permit(:name, :phone, :email, :business_name, :address) end end
 import { storiesOf } from '@storybook/vue'; const field = { required: true, name: 'toppings',
 for (auto& c : *concepts) { auto concept_ = caf::get_if<std::string>(&c); if (!concept_) return make_error(ec::convert_error, "concept is not a string:", *name); dest.concepts.push_back(*concept_); } } else { return make_error(ec::convert_error, "concepts is not a list:", *name); } } auto desc = c->find("description");
 return nil, err } s.ProviderMessageID = providerMsgID.String s.State = GetMessageStatusState(lastStatus, hasNextRetry) result = append(result, s) }
 config->mfl_code = S2N_TLS_MAX_FRAG_LEN_EXT_NONE; config->accept_mfl = 0; config->session_state_lifetime_in_nanos = S2N_STATE_LIFETIME_IN_NANOS; config->use_tickets = 0; config->num_prepped_ticket_keys = 0; config->total_used_ticket_keys = 0; config->valid_key_lifetime_in_nanos = S2N_TIC
 return src_type.is_float and src_type.rank <= dst_type.rank return False def best_match(arg_types, functions, pos=None, env=None, args=None): """ Given a list args of arguments and a list of functions, choose one to call which seems to be the "best" fit for this list of arguments.
 * * @param forUpdateRows the rows to lock */ public void lockRows(ArrayList<Row> forUpdateRows) { table.lockRows(session, forUpdateRows); }
 methodUsage = ((TypeVariableResolutionCapability) methodDeclaration).resolveTypeVariables(this, argumentsTypes); } return Optional.of(methodUsage);
 if err!= nil { return } if diff := cmp.Diff(got.Options, test.wantOpts); diff!= "" { t.Errorf("opener.forParams(...) diff:\n%s", diff) } })
 /** * @var AdapterInterface * * @deprecated use $primary instead * @deprecated Use $primary instead */ protected $master;
 The platform that the code is running on. By default this will be the string 'zipline'. This can allow algorithms to know if they are running on the Quantopian platform instead.  The platform is returned as a string.  Returns -------
 // 30505 for changing serialization of Joint to create offset frames // 30506 for testing 30505 conversion code // 30507 for changing serialization of Coordinates owned by Joint // 30509 for changing property Constraint::isDisabled to Constraint::isEnforced const int XMLDocument::LatestVersion = 30509; //============================================================================= // DESTRUCTOR AND CONSTRUCTOR(S) //=============================================================================
 public static final String TYPE_RSS2 = "rss"; public static final String TYPE_ATOM1 = "atom"; public static final String PREFIX_LOCAL_FOLDER = "antennapod_local:"; public static final String SUPPORT_INTERNAL_SPLIT = "\u001e"; public static final String SUPPORT_INTERNAL_EQUAL = "\u001f"; public static final String TAG = "Feed.java"; /* title as defined by the feed */
 if self._content_consumed and isinstance(self._content, bool): raise RuntimeError( 'The content for this response was already consumed') # simulate reading small chunks of the content reused_chunks = iter_slices(self._content, chunk_size) stream_chunks = generate()
 func (p *ProtocolSkipchain) Start() error { dbg.Lvl3("Starting Skipchain") block := &SkipBlock{Index: 0, X0: p.TreeNode().PublicAggregateSubTree, Nodes: p.Tree().List()} return p.HandleGenesis(StructGenesis{p.TreeNode(), MessageGenesis{Block: block}}) }
 package behavior import ( "fmt" "io" "runtime" )
 } FakePeer &FakePeer::setProposalStorage( const std::shared_ptr<ProposalStorage> proposal_storage) { proposal_storage_ = proposal_storage; return *this; }
 String image = deploy.getContainerInfo().get().getDocker().get().getImage(); checkBadRequest( validDockerRegistries.contains(URI.create(image).getHost()), String.format("%s does not point to an allowed docker registry: %s", image, validDockerRegistries) ); } }
 return 'VerificationCode {code}'.format(code=verification_code) def _make_http_request(url, body=None, method='POST', force_reauthorization=False): """Make a POST request to the specified URL.""" authorization = _get_authorization(force_reauthorization) headers = {
 import javax.inject.Inject; import javax.inject.Singleton; @Singleton @NonNullByDefault public class UploadRepository {
 "testing" "github.com/google/go-cmp/cmp" gcpduckv1alpha1 "github.com/google/knative-gcp/pkg/apis/duck/v1alpha1" "github.com/google/knative-gcp/pkg/apis/messaging/v1alpha1" pubsubv1alpha1 "github.com/google/knative-gcp/pkg/apis/pubsub/v1alpha1" corev1 "k8s.io/api/core/v1"
 } // IsZero checks if an AccountData value is the same as its zero value. func (ad *AccountData) IsZero() bool { return ad.Currencies == nil && ad.NonCurrencies == nil } // BalanceRecord pairs an account's address with its associated data.
 Must be of the format '<keyName>:<dataType>'.` storageSortKeyFlagDescription = `Optional. Sort key for the DDB table. Must be of the format '<keyName>:<dataType>'.` storageNoSortFlagDescription    = "Optional. Skip configuring sort keys." storageAttributeFlagDescription = `Optional. Attributes for a DDB table. Must be of the format '<name>:<dataType>'. Can be specified multiple tim
 [Fact] public async Task GivenDestinationTypeOrDestinationConnectionSettings_WhenCreatingAnExportJob_ThenItShouldBeRemovedFromRequestUri() { const string baseUrl = "http://localhost/$export?_count=100&destinationConnectionSettings=settings1"; var requestUri = new Uri($"{baseUrl}&_destinationType=type&_destinationConnectionSettings=settings"); var request = new CreateExportRequest(requestUri, DestinationType, ConnectionString);
 except OSError: self.log.debug("JMeter check failed.") return False except ValueError: pass def install(self): dest = os.path.dirname(os.path.dirname(os.path.expanduser(self.tool_path)))
 JavadocInlineTag that = (JavadocInlineTag) o; return type == that.type && Objects.equals(content, that.content); }
 /** * The contents of this file are subject to the license and copyright * detailed in the LICENSE and NOTICE files at the root of the source * tree and available online at * * http://www.apache.org/licenses/license.html */ package org.flowable.cmmn.test.runtime; import static org.assertj.core.api.Assertions.assertThat;
 prodEnvFlag           = "prod" deployFlag            = "deploy" resourcesFlag         = "resources" githubURLFlag         = "github-url" repoURLFlag           = "url" githubAccessTokenFlag = "github-access-token" gitBranchFlag         = "git-branch"
 queue_url = sqs_client.create_queue(QueueName=queue_name)['QueueUrl'] queue_arn = aws_stack.sqs_queue_arn(queue_name) test_event_pattern = { 'Source': [{'exists': True}], 'detail-type': [{'prefix': 'core.app'}], 'Detail': json.dumps({
 } return }
 mask_lower = x < lower mask_upper = upper < x mask = tf.logical_or(mask_lower, mask_upper) mask = tf.cast(mask, x.dtype) return x * mask
 objreg.register('message-bridge', message_bridge, scope='window', window=self.win_id) if config.val.window.hide_decoration: self.setWindowFlags(Qt.CustomizeWindowHint | Qt.NoDropShadowWindowHint) self.setWindowTitle('qutebrowser') self._vbox = QVBoxLayout(self) self._vbox.setContentsMargins(0, 0, 0, 0)
 ], /** * The property $foo is not defined on the object, but accessed with the magic setter. * This is an error because the property is defined with `@property` on the class block. * Compare to magicSetterUndefinedPropertyNoPropertyAnnotation, which has no `@property` * annotation. */'magicSetterUndefinedProperty' => [ '<?php /** * @property string $foo * * @property string $bar */ class A { 
 Identifier string `db:"anonymous_identifier"` } func (d *Datastore) ShouldSendStatistics(frequency time.Duration) (fleet.StatisticsPayload, bool, error) { amountEnrolledHosts, err := d.amountEnrolledHosts() if err!= nil {
 return err } // Select the closest peer to forward the received chunk. // If the peer is not a relay, then the chunk will be forwarded // to its parent peer. This parent peer will be responsible // for forwarding it to the relay. peer, err := ps.peerSuggester.ClosestPeer(chunk.Address()) if err!= nil {
 public DateTime? StartDate { get; set; } public DateTime? EndDate { get; set; } [Required(ErrorMessage = "*Primary currency is required")] [MaxLength(5)] [Display(Name = "Primary currency used for targets and stats. (e.g. BTC, LTC, USD, etc.)")] public string TargetCurrency { get; set; } = "BTC"; [Display(Name = "Set a Target amount ")]
 } render(<Foo />, scratch); expect(componentState).to.deep.equal({ value: 1 }); });
 _base_ = [ '../_base_/datasets/coco_panoptic.py', '../_base_/default_runtime.py' ] _backbone ='swin_tiny_patch4_window7_224' _model ='maskformer' _pretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'  # noqa model = dict( typ
 hot:!isProduction, injectClient: false, compress: isProduction, publicPath: options.publicPath, overlay: isProduction // TODO disable this? false
 * - Disables oEmbed discovery. * - Completely removes the related JavaScript. * * @since 3.0 */ function rocket_disable_embeds_init() { /* @var WP $wp */
 secretKind = "Secret" ) var timeNow = metav1.NowFunc() // for test stubbing // Operator represents a Kubernetes operator that executes InstallPlans by // resolving dependencies in a catalog.
 use WP_Rocket\Admin\Options_Data; use WP_Rocket\Busting\Busting_Factory; use WP_Rocket\Busting\Facebook_Pickles; use WP_Rocket\Busting\Facebook_SDK; use WP_Rocket\Subscriber\Facebook_Tracking_Cache_Busting_Subscriber; use WPMedia\PHPUnit\Unit\TestCase;
 private static final String SQL_LAST_INSERT_ID = "SELECT LAST_INSERT_ID();"; private static final String SQL_INSERT_ROLE_MEMBER = "INSERT INTO role_member (role_id, principal_id, expiration, active) VALUES (?,?,?,?);"; private static final String SQL_DELETE_ROLE_MEMBER = "DELETE FROM role_member WHERE role_id=? AND principal_id=?;"; private static final String SQL_DELETE_INACTIVE_ROLE_MEMBER = "DELETE FROM role_member WHER
 return err case "blob": _, blobType, _, length, err := repo.Index().Lookup(id) if err!= nil { return err } if blobType!= pack.Data { return errors.New("wrong type for blob") }
 }: Props) { const [step1, setStep1] = useState(false); const [step2, setStep2] = useState(false); const canRegister = formattedDateTime(VOTING_REGISTRATION_END_DATE, { currentLocale,...mapToLongDateTimeFormat({
 flags.StringVar(&accessAddress, "access-address", "", "the address of an access node") flags.StringVar(&secureAccessNodeID, "secure-access-node-id", "", "the node ID of the secure access GRPC server") flags.BoolVar(&insecureAccessAPI, "insecure-access-api", true, "required if insecure GRPC connection should be used") flags.DurationVar(&dkgControllerConfig.BaseStartDelay, "dkg-controller-b
.format(type(train_set).__name__)) train_set.construct() # copy the parameters from train_set params.update(train_set.params) # set network if necessary for alias in _ConfigAliases.get("machines"):
 """ Utility to remove a temporary directory during program exit. """ try: shutil.rmtree(dirname) print("Removed temporary directory: %s" % dirname) except OSError: # if the temp dir was removed already by other means pass
 $domainChoices[$domainConfig->getId()] = $domainConfig->getName(); } $chosenDomainName = $io->choice( 'There is more than one domain. Which domain do you want to use?', $domainChoices, $firstDomainConfig->getName() );
 def index @owner = Member.find_by(slug: params[:member_slug]) @show_all = params[:all] == '1' @show_member = params[:member_slug].present?? true : false @gardens = @gardens.includes(:owner) @gardens = @gardens.active unless @show_all
 Matcher m = re.matcher(page); while (m.find()) { LOGGER.debug("found subtitle " + m.group(2) + " name " + m.group(1) + " zip " + m.group(3)); res.put(m.group(2) + ":" + m.group(1), m.group(3)); if (res.size() > PMS.getConfiguration().openSubsLimit()) { // limit the number of hits somewhat break;
 err      error ) if g.Resource == "" || g.Resource == r.Name { filename, err = genmain.GenerateController(g.Force, g.Regen, g.AppPkg, g.OutDir, g.Pkg, r.Name, r) }
 /* compile code (must be done for each thread) */ int arena = mrb_gc_arena_save(handler_ctx->mrb); mrb_value proc = h2o_mruby_compile_code(handler_ctx->mrb, &handler->config, NULL); validate_proc(handler_ctx->mrb, proc, handler_ctx->config.mruby_validate_proc); handler_ctx->proc = mrb_funcall_argv(handler_ctx->mrb, mrb_ary_entry(handler_ct
 } } return null; }
 // Indexes block ID by chunk ID IndexByChunkID(headerID, chunkID flow.Identifier) error // BlockID returns the ID of the block containing given collection ID BlockID(chunkID flow.Identifier) (flow.Identifier, error) }
 if e.Config.SMTPSettings.SMTPAuthenticationMethod == fleet.AuthMethodNameCramMD5 { err = smtp.SendMail(smtpHost, auth, e.Config.SMTPSettings.SMTPSenderAddress, e.To, msg) if err!= nil { return fmt.Errorf("failed to send mail. crammd5 auth method: %w", err) } return nil }
 } if($mybb->input['filesize'] && $mybb->request_method == "post") { $direction_fields['filesize'] = $direction_fields['filesize'] * 102; } foreach($direction_fields as $field_name => $field_content)
 class ZigbeeClusterLibrary(Packet): name = "Zigbee Cluster Library (ZCL) Frame" deprecated_fields = { "direction": ("command_direction", "2.5.0"), } fields_desc = [ # Frame control (8 bits) BitField("reserved", 0, 3),
 public override void Deserialize(NetworkReader reader) { netId = reader.ReadPackedUInt32(); payload = reader.ReadBytesSegment((int)reader.ReadPackedUInt32()); } public override void Serialize(NetworkWriter writer)
 Parameters ---------- nbunch : single node, container, or all nodes (default= all nodes) The view will only report edges to these nodes (outgoing if directed). data : string or bool, optional (default=False) The edge attribute returned in 3-tuple (u, v, ddict[data]). If True, return edge attribute dict in 3-tuple (u, v, ddict).
 var compactingFiles = compacting.stream().flatMap(job -> job.getFiles().stream()).collect(Collectors.toSet()); Preconditions.checkArgument(this.allFiles.containsAll(compactingFiles), "Compacting not in set of all files: %s, compacting files %s", this.allFiles, compactingFiles); Preconditions.checkArgument(Collections.disjoint(compactingFiles, this.candidates), "Compacting and candidates overlap %s %s", compacti
 if ( config.Exists( "vita_keep_aspect_ratio" ) ) { vita_keep_aspect_ratio = config.IntParams( "vita_keep_aspect_ratio" ); fheroes2::Display::instance().engine()->vitaKeepAspectRatio = vita_keep_aspect_ratio; } #endif
 echo'data-target="_blank"'; }?> > <div class="panel-heading"> <div class="panel-title h1"><?php eT($title);?></div> </div> <div class="panel-body"> <div class="panel-body-ico">
 import json import tqdm import pickle from gluoncv.utils import download, makedirs _TARGET_DIR = os.path.expanduser('~/.mxnet/datasets/visualgenome')
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4478-SEA 1645533465 1045142607</p> <hr> <p>Varnish cache server</p> </body>
 } }() err = manager.startConnection(consumerID, providerID) return err } func (manager *connectionManager) startConnection(consumerID, providerID identity.Identity) (err error) {
 count, skip, reverse, labels -> () -> () -> 0.0D); // TODO: Make this a constant private static final long ZERO_DOUBLE = 0.0D;  final AtomicReference<AbstractPeerTask.PeerTaskResult<List<BlockHeader>>> actualResult = new AtomicReference<>(); final AtomicBoolean done = new AtomicBoolean(false);
 if (client && client.postMessage) { client.postMessage({ type, payload }, [channel.port2]); } else { reject(`Unable to send message to ${client? client.type : 'unknown client'}`); } });
 template <typename TensorDataType> bool adam<TensorDataType>::load_from_checkpoint_shared(persist& p, std::string name_prefix) { load_from_shared_cereal_archive(*this, p, this->get_comm(), "adam.xml"); char l_name[512]; sprintf(l_name, "%s_optimizer_adam_moment1_%lldx%lld.bin", name_prefix.c_str(), m_moment1->Height(), m_moment2->Width());
 REJECT_INVALID, "bad-txns-nonfinal"); } nFees += view.GetValueIn(tx) - tx.GetValueOut(); uint256 hash = tx.GetHash();
 contents += tabtabtab + "with self._lock:\n" contents += tabtabtabtab + fmt.Sprintf("_write_application_exception(ctx, oprot, \"%s\", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)\n", methodLower) } contents += tabtabtab + "raise\n" if!method.Oneway { contents += tabtab + "with self._lock:\n" contents += tab
 } var errUnsupportedTLD *route53domains.UnsupportedTLD if errors.As(err, &errUnsupportedTLD) { // The TLD isn't supported by Route53, hence it can't have been registered with Route53. return &ErrDomainNotFound{ domainName: domainName, }
 * * @param ResponseInterface $response */ public function respond(ResponseInterface $response) { // Send response if (!headers_sent()) {
 } } void trimNonResidentQueue() { Entry<V> e; int maxQueue2Size = nonResidentQueueSize * (mapSize - queue2Size); if (maxQueue2Size >= 0) {
 } private static int killLoadData(String stmt, int offset) { if (stmt.length() > offset + 6) { char c1 = stmt.charAt(++offset); char c2 = stmt.charAt(++offset); char c3 = stmt.charAt(++offset);
 int numTasksToShutDown = Math.max(otherActiveTasks.size() - (request.getInstancesSafe() - deployProgress.getTargetActiveInstances()), 0); List<SingularityTaskId> sortedOtherTasks = new ArrayList<>(otherActiveTasks); Collections.sort(sortedOtherTasks, SingularityTaskId.INSTANCE_NO_COMPARATOR); return sortedOtherTasks.subList(0, Math.min(numTasksToShutDown, sortedOtherTasks.size())); } priv
 package com.hazelcast.jet.examples.cdc; import com.hazelcast.jet.Jet; import com.hazelcast.jet.core.JetJob; import com.hazelcast.jet.cdc.CdcSinks; import com.hazelcast.jet.cdc.ChangeRecord; import com.hazelcast.jet.cdc.mysql.MySqlCdcSources;
 log.init.debug("Initializing cookies...") cookies.init(q_app) log.init.debug("Initializing cache...") cache.init(q_app)
 // } // ``` // where M is a struct type and T is any type. func NewCommit(value types.Value, parents types.Set, parentsList types.List, meta types.Struct, ctx context.Context) (types.Struct, error) { return commitTemplate.NewStruct(meta.Format(), []types.Value{meta, parents, parentsList, value}, ctx) } // FindCommonAncestor returns the most recent common ancestor of c1 and c2, if
 end def self.contributing_file_metric QualityMetric.where(name: 'Contributing File').first_or_create! end end
 // the time of the put, and optionally (if specified in lockContext) // releases the lock on the lock ID if the put is successful. Releasing the // lock in mdserver is idempotent. // // The priority is used to determine which of multiple pending writes // to the same key should be allowed to proceed.  A higher priority // will always win, and if there is a tie, the one with the most // recent tim
 } // netId changed? if (newGameObjectNetId!= netIdField) SetDirtyBit(dirtyBit); gameObjectField = newGameObject; netIdField = newGameObjectNetId; }
 bool clFree(void* virtualPtr) { if (! gpu->isValidPtr(virtualPtr) ) { LOG(ERROR) << gpu->name() << "> not a valid memory pointer @ " << virtualPtr; return false;
 for line in data: for team, result in parse_game(line): table[team][result] += 1 return format_table(table)
 return err } if o.cpu == 0 { return errCPUNotPositive } if o.memory == 0 { return errMemNotPositive }
 var createdResources = []; describe('arm', function () { describe('resource', function () { var suite; var testApiVersion = '2014-04-01'; var testGroupLocation;
 /** Local index value for when the class is not local. */ static final int NOTLOCAL_PLACEHOLDER = -1; private static final PMDASMClassLoader CLASS_LOADER = PMDASMClassLoader.getInstance(JavaTypeQualifiedName.class.getClassLoader()); // since we prepend each time, these lists are in the reversed order (innermost elem first). // we use ImmutableList.reverse() to get them in their usual, user-friendly order
 :returns tuple (number_of_files_copied, total_size_copied_in_bytes) """ (dst_bucket, dst_key) = self._path_to_bucket_and_key(destination_path) (src_bucket, src_key) = self._path_to_bucket_and_key(source_path)  # don't allow threads to be less than 3 threads = 3 if threads < 3 else threads from boto3.s3.transfer import TransferConfig
 /** * Registers a theme feature for use in {@see add_theme_support}. * * This does not indicate that the current theme supports the feature, it only describes the feature's contents. * * @since 5.5.0 *
 use Symfony\Component\HttpFoundation\Request; /** * Class DkanRequestNormalizer. * * This class provides public static functions to normalize different HTTP * request types into valid JSON data. Provides type casting from a JSON Schema
 // ContainerTimeout specifies the amount time before a SIGKILL is issued to // containers managed by ECS ContainerTimeout time.Duration // AvailableLoggingDrivers specifies the logging drivers available for use // with Docker.  If not set, it defaults to ["json-file"].
 private TableMetadata base; private long expireOlderThan; private int minNumSnapshots; private Consumer<String> deleteFunc = defaultDelete; private ExecutorService deleteExecutorService = DEFAULT_DELETE_EXECUTOR_SERVICE; private ExpireSnapshotResult expireSnapshotResult; public RemoveSnapshots(TableOperations ops) { this.ops = ops; this.base = ops.current();
 return value; }; const getBreadcrumbCategoryId = categories => { // TODO: get this from the server. const breadcrumbSet = new Set(); categories.forEach(({ breadcrumbs }) => {
 for _ in range(3): pipe.run() def test_affine_transforms_cpu(): check_no_input(fn.translate_transform, offset=(2, 3)) check_no_input(fn.scale_transform, scale=(2, 3)) check_no_input(fn.rotate_transform, angle=30.0) check_no_input(fn.shear_transform, shear=(2, 1)) # ToDo add tests for DLTensorPythonFunction if easily possible
 */ package tech.pegasys.pantheon.metrics; public interface MetricCategory { Optional<String> getApplicationPrefix(); }
 TSERV_SUMMARY_RETRIEVAL_THREADS("tserver.summary.retrieval.threads", "10", PropertyType.COUNT, "The number of threads on each tablet server available to retrieve" + " summary data, that is not currently in cache, from RFiles."), TSERV_LASTLOCATION_UPDATE_TIME("tserver.lastlocation.update.time", "1000000", PropertyType.COUNT, "The time in between tservers update last location
 return $menu; }  public function getBackEndMenuItems() { $menu = $this->menuFactory->create(); $menu->addMenuItems($this->menuItemsFactory->create()); return $menu; } }
 return nil, containerNotInPod } // getPodImageIdentifiers returns the list of selectors that can be used // to identify a pod image. func getPodImageIdentifiers(containerStatusArray []corev1.ContainerStatus) []string { var podImages []string // Note that for each pod image we generate *2* matching selectors. // This is to support matching against ImageID, which has a SHA // docker.io/envoyprox
 public SqlType[] GetParametersTypeArray() { return columns.Values.Where(x => x!= null).OfType<SqlType>().ToArray(); } } }
 void PictureLoaderWorker::picDownloadFailed() { if (cardBeingDownloaded.nextUrl() || cardBeingDownloaded.nextSet() || cardBeingDownloaded.nextSetId()) { mutex.lock(); loadQueue.prepend(cardBeingDownloaded);
 walk = &((*walk)->nextNameObject); } #else const char* name = StringTable->insert(obj->objectName); if (root.find(name)!= root.end()) root.erase(name); #endif Mutex::unlockMutex(mutex);
 ClearOptimizerWhenUsingCustomAccessors(); } public override object[] GetPropertyValues(object component) {
 self._read_next_timestep() def _read_trz_header(self): """Reads the header of the trz trajectory""" self._headerdtype = np.dtype([
 @qutescheme.add_handler('testdata') def handler(url):  # pylint: disable=unused-variable file_abs = os.path.abspath(os.path.dirname(__file__)) filename = os.path.join(file_abs, os.pardir, 'end2end', url.path().lstrip('/')) with open(filename, 'rb') as f: data = f.read()
 package utils import ( "fmt" "testing" "github.com/google/go-cmp/cmp"
 final Throwable originalErr = error; executionService.schedule(() -> { try { if (!tryRetry(partitions, entries, doneLatch, completionFuture)) { completionFuture.completeExceptionally(originalErr); } doneLatch.decrementAndGet(); } catch (Exception e) { logger.severe("Exception during retry", e); completionFuture.completeExceptionally(originalErr);
 print("Current version: %s. Latest released version: %s" % ( tools.__version__, last_release )) # Check if we are running on the correct OS. if sys.platform!= "darwin" and sys.platform!= "linux": raise Exception("This script must be run on Linux or Mac.")  # Check if we are running on the correct version of Python. if sys.version_info[:2]!= (3, 5): ra
 # @!group Helpers # @return [String] the path as declared in the podspec # def declared_path (params[:path] || params[:local]).to_path end # @return [Pathname] the path of the podspec.
 @Override public void onCreatePreferences(Bundle savedInstanceState, String rootKey) { addPreferencesFromResource(R.xml.preferences_notifications); setUpScreen(); }
 # coding: utf-8 # pylint: disable = C0103 """Plotting library.""" from __future__ import absolute_import, division import warnings from copy import deepcopy
 "time" "github.com/andres-erbsen/clock" "github.com/cenkalti/backoff/v3" "github.com/spiffe/spire/pkg/agent/client" "github.com/spiffe/spire/pkg/agent/manager/cache" "github.com/spiffe/spire/pkg/agent/svid" "github.com/spiffe/spire/pkg/common/bundleutil"
 @Override public void addObserver(@Nonnull Observer<T> observer) { observers.add(observer); } @Override public void addObserver(@Nonnull Consumer<? super T> onNext, @Nonnull Consumer<? super Throwable> onError, @Nonnull Runnable onComplete) { observers.add(Observer.of(onNext, onError, onComplete)); } @Override
 class Admin::HelpController < ApplicationController def help @bank_articles = Article.articles_for_banks(Article.all) @partner_articles = Article.articles_for_partners @faqs = Faq.all end end
 _configure_logging(inventory_flags.get('loglevel')) config_path = inventory_flags.get('config_path') if config_path is None: LOGGER.error('Path to pipeline config needs to be specified.') sys.exit()
 oidcRepoFn common.OidcAuthRepoFactory } // NewService returns a managed group service which handles managed group related requests to boundary. func NewService(oidcRepo common.OidcAuthRepoFactory) (Service, error) { const op = "managed_groups.NewService" if oidcRepo == nil {
 'Paths', ] for name, path in _path_info().items(): lines.append('{}: {}'.format(name, path)) return '\n'.join(lines)
 template <typename TensorDataType> bool adam<TensorDataType>::save_to_checkpoint_shared(persist& p, std::string name_prefix) { if (this->get_comm().am_trainer_master()) { write_cereal_archive(*this, p, "adam.xml"); } char l_name[512];
 return result def raise_if_exception(result): """ If "result" is an exception then raise the "result". Unless "result" is an exception then return the "result".
 struct s2n_stuffer *out = &conn->handshake.io; const int total_size = s2n_encrypted_extensions_send_size(conn); GUARD(total_size); /* Write length of extensions */ GUARD(s2n_stuffer_write_uint16(out, total_size));
 * * @since 3.8 * * @param int $old_lifespan Old value in minutes. * @param int $new_lifespan New value in minutes. * * @return void */
 if (dest < recipients) || (proc.current < recipients && dest < recipients+1) || (proc.malicious == invalidComplaintAnswerBroadcast && dest == proc.dkg.Size()-1) { // choose a random reason for an invalid share coin := mrand.Intn(5) gt.Logf("%d maliciously sending to %d, coin is %d\n", proc.current, dest, coin) switch coin { c
 'Please check your path and filename and try''again. Error: %s', err) # Setting up configurations forseti_inventory_config = forseti_config.get('inventory', {}) inventory_config = InventoryConfig(
 constructProperty_ProbeSet(probeSet); } //------------------------------------------------------------------------------ //                                BUILD SYSTEM
 return element @staticmethod def _get_csv_config_random(path, delimiter, loop, variable_names, random_order, encoding, same_list): """ :type path: str
 type Token struct { EntityListID EntityListID TreeID       TreeID // TO BE REMOVED ProtocolID ProtocolID ServiceID   ServiceID RoundID     RoundID // TreeNodeID is defined by the TreeNodeID TreeNodeID cacheId    TokenID } // Global mutex when we're working on Tokens. Needed because we
 public Vector4 DivideBenchmark() => Vector4.Divide(VectorTests.Vector4Value, VectorTests.Vector4Delta); [Benchmark] public Vector4 DivideByScalarBenchmark() => Vector4.Divide(VectorTests.Vector4Value, 0.5f); [Benchmark] public float DotBenchmark() => Vector4.Dot(VectorTests.Vector4Value, VectorTests.Vector4ValueInverted);
 AccountSID string AuthToken  string `password:"true" info:"The primary Auth Token for Twilio. Must be primary (not secondary) for request valiation."` FromNumber string `displayName:"From Number or Twilio Messaging Service SID" public:"true" info:"The Twilio number or Twilio Messaging Service SID to use for outgoing notifications."` DisableTwoWaySMS      bool     `info:"Disables SMS reply codes for al
 NRStore:           app.NotificationRuleStore, NCStore:           app.NCStore, AlertStore:        app.AlertStore, AlertLogStore:     app.AlertLogStore, ServiceStore:      app.ServiceStore, FavoriteStore:     app.FavoriteStore, PolicyStore:       app.EscalationStore,
 ).collect(joining("\n"))); } private static boolean isSplitLocalForMember(InputSplit split, Address memberAddr) { try { final InetAddress inetAddr = memberAddr.getInetAddress(); return Arrays.stream(split.getLocations())
 new_db_name = db_name + '_new' old_path = os.path.join(db_dir, db_name) new_path = os.path.join(db_dir, new_db_name) new_seqno_db_name = config.stateTsDbName + '_new' # new_seq_no_path = os.path.join(db_dir, new_seqno_db_name) try: dest_seq_no_db_storage = initKeyValueStorage(config.reqIdToTxnStorage, db_dir,
 template <typename TensorDataType> bool adagrad<TensorDataType>::save_to_checkpoint_shared(persist& p, std::string name_prefix) { if (this->get_comm().am_trainer_master()) { write_cereal_archive(*this, p, "adagrad.xml"); } char l_name[512];
 * */ int partition(int arr[], int low, int high) { int pivot = arr[high];  // taking the last element as pivot int i = (low - 1);      // Index of smaller element
 // When BatchStage<String> mapped = stage.mapUsingService(bidirectionalStreaming(port), (service, key, item) -> { HelloRequest req = HelloRequest.newBuilder().setName(item).build(); return service.call(req).get().getMessage(); }); // Then
 @javax.inject.Inject public ApplicationConfig( Instance<org.kie.kogito.KogitoConfig> configs) { super($Addons$, configs); } } No newline at end of file
 if (! Sensei_Dependency_Checker::check_assets() ) { add_action( 'admin_notices', array( 'Sensei_Dependency_Checker', 'add_assets_notice' ) ); return; } require_once dirname( __FILE__ ). '/includes/class-sensei-bootstrap.php';
 rpn_outs = self.rpn_head(x) rpn_loss_inputs = rpn_outs + (gt_bboxes, img_meta, self.train_cfg.rpn) rpn_losses = self.rpn_head.loss(*rpn_loss_inputs) if self.train_cfg.rpn.proposal_method == 'two_stage_nms': losses.update(rpn_losses) proposal_inputs = rpn_outs + (img_meta, self.test_cfg.rpn)
 dockerTest := exec.Command("docker", "images") err = dockerTest.Run() if err!= nil { fmt.Println("ERROR: could not connect to docker daemon, is it installed and running?") os.Exit(1) } cache :=!c.Bool("no-cache")
 from panopticapi.evaluation import OFFSET, VOID, PQStat from panopticapi.utils import IdGenerator, rgb2id from.api_wrappers import COCO as _COCO from.builder import DATASETS from.coco import CocoDataset
 if (privacy.isDisplayMessage()) { setTicker(getStyledMessage(recipient, message)); } else if (privacy.isDisplayContact()) { setTicker(getStyledMessage(recipient, context.getString(R.string.new_message))); } else { setTicker(context.getString(R.string.new_message)); } }
 $product = $this->productRepository->getById($productId); $orderDomainConfig = $this->domain->getDomainConfigById($order->getDomainId()); $productPrice = $this->productPriceCalculationForCustomerUser->calculatePriceForCustomerUserAndDomainId( $product, $order->getDomainId(), $order->getCustomerUser()
 private readonly IRequestTracing sessionProvider; /// <summary> /// Initializes a new instance of the <see cref="TraceModule"/> class, with /// a <see cref="IRequestTracing"/> instance. /// </summary> /// <param name="sessionProvider">The session provider.</param>
 else: LOG.info('Unsupported Events rule target ARN "%s"' % arn) def create_sqs_queue(queue_name, env=None):
 // Start playback immediately if continuous playback is enabled // Repeat episode implementation if (repeatEpisode() &&!wasSkipped) { nextMedia = currentMedia; nextMedia.setPosition(0); } else {
 } private T getSessionCatalog() { Preconditions.checkNotNull(sessionCatalog, "Delegated SessionCatalog is missing. " + "Please make sure you are replacing Spark's default catalog, named'spark_catalog'."); return sessionCatalog; } }
 __version__ = '0.2.0' __short_version__ = '0.2' No newline at end of file No newline at end of file
 //  - file://localhost/c:/foo/bar //    -> Also passes "c:\foo\bar". // // As // // fileblob exposes the following types for As:
 public static bool ProcessMethodsValidateTargetRpc(TypeDefinition td, MethodDefinition md, CustomAttribute ca) { if (md.Name.Length!= 6 || md.Name.Substring(0, 6)!= "Target") { Weaver.Error("Target Rpc function [" + td.FullName + ":" + md.Name + "] doesnt have 'Target' prefix"); return false;
 if (predictor_!= nullptr) { delete predictor_; } bool is_raw_score = false; if (predict_type == 1) { is_raw_score = false; } else { is_raw_score = true; } predictor_ = new Predictor(boosting_, is_raw_score); }
 # -*- coding: utf-8 -*- import json import random import time from pgoapi.utilities import f2i from pokemongo_bot import logger
 <div class="error"><?php echo $errors['max_file_size'];?></div> </td> </tr> <?php if (extension_loaded('mcrypt')) {?> <tr> <td width="180"><?php echo __('Compress Attachments');?>:</td> </td>
 @Override public boolean saveToSnapshot() { if (incomplete) { return complete(); } if (snapshotTraverser == null) {
 # Nonetheless we test that the query is built correctly when # a user supplies more than one text condition. it'merges conditions' do expect(selection.selector).to eq('$and' => [ {'$text' => {'$search' => 'one'}}, {'$text' => {'$search' => 'two'}} ],
 return false; } else { HashMap<String, BrokerData> brokers = clusterInfo.getBrokerAddrTable(); for (Entry<String, BrokerData> brokerEntry : brokers.entrySet()) { HashMap<Long, String> brokerIps = brokerEntry.getValue().getBrokerAddrs(); for (Entry<Long, String> brokerIdEntry : brokerIps.entrySet()) { if (brokerIdEntry.getValue().contains(ip)) return true;
 MetricsListenAddr string             `yaml:"metrics_listen_addr" default:"127.0.0.1:14000"` } // LogLevel returns the logging level for the config. func (c *Config) LogLevel() zapcore.Level { return c.Logging.Level } // NewConfig loads a hub config from the specified YAML file.
 $template_type = $post->post_type; if ( 'wp_template'!== $template_type ) { return new WP_Error( 'template_wrong_post_type', __( 'An invalid post was provided for this template.', 'wordpress-seo' ) ); } $ids    = get_theme_mod( $template_type, array() );
 * Instantiates an action to remove all the files reachable from given metadata location. */ default RemoveReachableFiles removeReachableFiles(String metadataLocation) { throw new UnsupportedOperationException(this.getClass().getName() + " does not implement removeReachableFiles"); } }
 # SPDX - License - Identifier: Apache - 2.0 # Purpose # This code example demonstrates how to deny uploads of unencrypted objects to an Amazon Simple Storage Solution (Amazon S3) bucket. # snippet-start:[s3.ruby.s3_add_bucket_ssekms_encryption_policy]
 import org.apache.accumulo.harness.AccumuloClusterHarness; import org.junit.After; import org.junit.Test; import com.google.common.collect.Iterables; public class AccumuloClientIT extends AccumuloClusterHarness { @After public void deleteUsers() throws Exception { try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {
 $responseContext = System::getContainer()->get(ResponseContextAccessor::class)->getResponseContext(); $responseContext->getMetaTags()->add($strKey, $strValue);  if ($responseContext instanceof WebpageContext) { switch ($strKey) {
 if err!= nil { return types.Capability{}, err } cueTemplate = string(b) } else { if tmp.CueTemplate == "" { return types.Capability{}, errors.New("template not exist in definition")
 // such as memory and cpu. Resources map[string]string `hcl:"resources,optional"` // A path to a directory that will be created for the service to store // temporary data. ScratchSpace []string `hcl:"scratch_path,optional",mapstructure:"scratch_path"` // ServiceAccount is the name of the Kubernetes service account to apply to the
 } } Dictionary<string, string> envVariables = null; if (!String.IsNullOrEmpty(environmentVariables)) { envVariables = ParseStringToDictionary(environmentVariables); } bool failed = false;
 }; } __attribute__((aligned(4))); __device__ unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s) { // struct uchar2Holder cHoldVal; struct ucharHolder cHoldKey;
 $type = null; if (!$hint->types) { throw new UnexpectedValueException('The hint does not have types defined'); } if ($analysis_php_version_id < 8_01_00) {
 */ public function update() { $current_version = get_option('sensei-version' ); $is_new_install  =! $current_version; $is_upgrade      = $current_version && version_compare( $this->version, $current_version, '>' ); // Make sure the current version is up-to-date.
 * @throws \Psr\Container\ContainerExceptionInterface * @throws RuntimeException If named route does not exist or Request not initialized */ public function urlFor($name, array $data = [], array $queryParams = [], $baseURL = '') { // Check if container['request'] is initialized. if (!$this->container->has('request')) {
 * overloaded to accommodate (mathematical) field operations. */ #include <iostream> #include <stdexcept> #include <cassert> #include <cmath> /** * Class Complex to represent complex numbers as a field.
 #endif #include <iostream> #define NUM_GROUPS 1 #define GROUP_SIZE 1
 * This will properly maintain the copyright information. DigitalGlobe * copyrights will be updated automatically. * * @copyright Copyright (C) 2018 DigitalGlobe (http://www.digitalglobe.com/) */ #include "AddBboxVisitor.h"
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4433-SEA 1645547163 313439869</p> <hr> <p>Varnish cache server</p> </body>
 const ( mArrayTmpl = `{{$tmp := tempvar}}{{tabs.depth}}{{$tmp}} := make([]{{gonative.elemType.Type}}, len({{.source}})) {{$tmpIndex := tempvar}}{{$tmpElement := tempvar}}{{tabs.depth}}for {{$tmpIndex}}, {{$tmpElement}} := range {{.source}} { {{marshalAttribute.elemType (printf "%s[*]".context) $tmp
 func TestMultipleAcksCanGoIntoASingleBatch(t *testing.T) { ctx := context.Background() var wg sync.WaitGroup sentAcks := make(map[driver.AckID]int64) ids := []int{1, 2} ds := &ackingDriverSub{ q: []*driver.Message{{AckID: ids[0]}, {AckID: ids[1]}}, sendAcks: func(_ context.Context, 
 ) if a.Validation.ExclusiveMaximum!= nil { max = *a.Validation.ExclusiveMaximum } else if a.Validation.Maximum!= nil { max = *a.Validation.Maximum } if a.Validation.ExclusiveMinimum!= nil { min = *a.Validation.ExclusiveMinimum } else if a.Validation.Minimum!= nil { min = *a.Validation.Minimum } else { sign = -1
 flags.StringVar(&opts.blobCache, "blob-cache", "", "store copies of pulled image blobs in the specified directory") flags.StringVar(&opts.certDir, "cert-dir", "", "use certificates at the specified path to access the registry") flags.StringVar(&opts.creds, "creds", "", "use `[username[:password]]` for accessing the registry") flags.StringVar(&opts.pullPolicy, "pull-policy", "missing", "missing, a
 if check_exception_type: assert isinstance( md_e.value, type(pd_e) ), ( "Got Modin Exception type {}, but pandas Exception type {} was expected".format( type(md_e.value), type(pd_e) ) ) if raising_exceptions:
 * @return */ public static boolean isMonumentsEnabled(final Date date) { if (date.getDate() >= 1 && date.getMonth() == 9 && date.getDate() <= 30) { return true; } return false;
 _referenceToElementResolver = referenceToElementResolver; } public async Task<List<Tuple<string, string>>> GetGroupMembers(string groupId, string characteristic, CancellationToken cancellationToken) { var groupResource = await _fhirDataStore.Value.GetAsync(new ResourceKey(KnownResourceTypes.Group, groupId), cancellationToken);
 //If the aspect ratio is less than 16/9 (1.77), set the height as if it were pillerboxed. // 4:3 1440x1080 -> 1920x1080 if (videoWidth / videoHeight < 16 / 9) { videoWidth = videoHeight * (16 / 9); } var maxAllowedWidth = videoWidth || 4096;
 self.description = <<-DESC Creates a scaffold for the development of a new Pods according to the CocoaPods best practices. If a `TEMPLATE_URL`, pointing to a git repo containing a compatible template, is specified, it will be used in place of the default one. DESC self.arguments = '[NAME] [TEMPLATE_URL]' def initialize(argv) @name = argv.shift_argument
 public const string PHONE_NUMBER_REGEX_IT = "ITPhoneNumber"; public const string PHONE_NUMBER_REGEX_NL = "NLPhoneNumber"; public const string PHONE_NUMBER_REGEX_SPECIAL = "SpecialPhoneNumber";
 is_bn? context.m_damping_bn_act : context.m_damping_act, is_bn? context.m_damping_bn_err : context.m_damping_err, is_gru? m_learning_rate_factor_gru : m_learning_rate_factor, m_print_matrix, m_print_matrix_summary); prof_region_end(("kfac-inverse/" + block->get_name()).c_str(), prof_sync);
 if err := oprot.WriteStructBegin(ctx, "thing"); err!= nil { return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) } if err := frugal.WriteI32WithContext(ctx, oprot, p.AnID, "an_id", 1); err!= nil { return thrift.PrependError(fmt.Sprintf("%T::an_id:1 ", p), err) } if err := frugal.WriteSt
 // FIX: "type" is already used to define the type of object to instanciate, any Data with // the same name cannot be extracted from BaseObjectDescription if (attrName == std::string("type")) continue; if (!hasField(attrName)) continue; parseField(attrName, it.second);
 # there is one, otherwise returns a message including the location of the # example. def description if metadata[:description].to_s.empty? RSpec.configuration.format_docstrings_block.call("example at #{location}") else RSpec.configuration.format_docstrings_block.call(metadata[:description]) end end # @attr_reader
 * participating - note that the proc would not * have been added to any collective tracker until * after it successfully connected */ PMIX_LIST_FOREACH(trk, &pmix_server_globals.collectives, pmix_server_trkr_t) { /* see if this proc is participating in this tracker */ PMIX_LIST_FOREACH(rinfo, rnext, &trk->local_cbs) { if (!PMIX_CHECK_PROCID(&rinfo->pe
 self.coords = coords n = reference_coords.shape m = coords.shape if n[0]!= m[0] or n[1]!= m[1] or n[1]!= 3: raise Exception("Coordinate number/dimension mismatch.") self.n = n[0]
 // CDN. if (! isset( $hosts ) ) { $hosts = $this->cdn_subscriber->get_cdn_hosts( [], [ 'all', 'images' ] ); $hosts = array_flip( $hosts ); }
 def test_refit(self): X, y = load_breast_cancer(True) X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.3, random_state=42) params = { 'objective': 'binary','metric': 'binary_logloss',
 /** * Configuration constants for Closure's tree UI. * @type {Object.<string,*>} * @private */ this.CONFIG_ = { indentWidth: 19, cssRoot: 'blocklyTreeRoot', cssHideRoot: 'blocklyHidden',
 // Balance returns the current balance for the given peer func (a *Accounting) Balance(peer swarm.Address) (balance int64, err error) { err = a.store.Get(peerBalanceKey(peer), &balance) if errors.Is(err, storage.ErrNotFound) { return 0, nil } if err!= nil { return 0, err } return balance, nil
 // Overrides the table's read.split.open-file-cost public static final String FILE_OPEN_COST = "file-open-cost";  // Overrides the table's read.split.read-page-cost public static final String READ_PAGE_COST = "read-page-cost";  // Overrides the table's read.split.read-block-cost public static final String READ_BLOCK_COST = "read-block-cost";  // Overrides the table's read.split.read-block-from-local-storage-cost public static final String READ_B
 // Inject tracing system baggage reqHeaders := tchannel.InjectOutboundSpan(call.Response(), req.Headers.Items()) if err := writeRequestHeaders(ctx, format, reqHeaders, call.Arg2Writer, o.transport.exactCase); err!= nil { // TODO(abg): This will wrap IO errors while writing headers as encode // errors. We should fix that. return nil, errors.RequestHeadersEncodeError(req, err)
 mux.HandleFunc("/health", app.healthCheck) mux.HandleFunc("/health/engine", app.engineStatus) webH, err := web.NewHandler(app.cfg.UIURL, app.cfg.HTTPPrefix, app.ConfigStore.Config().General.ApplicationName, app.ConfigStore.Config().General.EnableGraphiQL) if err!= nil { return err }
 resourcestatus "github.com/aws/amazon-ecs-agent/agent/taskresource/status" "github.com/fsouza/go-dockerclient"  "github.com/aws/aws-sdk-go/aws" ) const (
 batch_queue_set_option(remote_queue, "mesos-path", mesos_path); batch_queue_set_option(remote_queue, "mesos-master", mesos_master); batch_queue_set_option(remote_queue, "mesos-preload", mesos_preload); } if(batch_queue_type == BATCH_QUEUE_TYPE_DRYRUN) {
 code.putln("new((void*)&(p->%s)) %s();" % ( entry.cname, decl_code)) if scope.is_internal == 2 and py_attrs: # create a hybrid "optional initialization" where the kwds # argument is used to signal that initialization happens. # This is needed for pickleable closures, where the attributes # are created on the fly and we cannot use the usual code # where the attributes are cr
 // called for situations less dire than // `apos.util.error`. warn(msg) { self.logger.warn(msg); }, // Identical to `apos.util.warn`, except that the warning is
 @property def is_unique(self): """ Return whether all values are unique.  See Also -------- is_unique : Equivalent function for Series """ return self.nunique(dropna=False) == len(self) @property
 return (currentTimeMs - programStartDateMs) / programRuntimeMs * 100; } function updateTimeDisplay(positionTicks, runtimeTicks, playbackStartTimeTicks, playbackRate, bufferedRanges) { if (enableProgressByTimeOfDay) { if (nowPlayingPositionSlider &&!nowPlayingPositionSlider.dragging) { if (programStartDateMs && programEndDateMs) {
 package org.openqa.selenium; /** * Thrown to indicate that a click was attempted on an element but was intercepted by another * element on top of it */
 def self.from_config(config) if ENV.include?(ENVIRONMENT_VAR) begin data = YAML.load(ENV[ENVIRONMENT_VAR]) rescue Psych::Exception raise Bolt::CLIError, "Could not parse inventory from $#{ENVIRONMENT_VAR}" end
 def index @hangouts = (params[:live] == 'true')? Hangout.live : Hangout.latest render partial: 'hangouts' and return if request.xhr? end private
 ZooReader zr = context.getZooReaderWriter(); String zPath = propPathPrefix + "/" + prop.getKey(); try { if (zr.exists(zPath)) { return true; } } catch (KeeperException|InterruptedException e) {
 if known_scope?(args.first) normalized_scope_for(args.shift) elsif args.any? { |a| a.is_a?(Symbol) } raise ArgumentError.new("You must explicitly give a scope (:each, :all, or :suite) when using symbols as metadata for a hook.") else :each end
 import { RestApi } from '@magento/peregrine'; const { Magento2: { request } } = RestApi; import { toggleDrawer, closeDrawer } from './actions/app'; const getGuestCartId = getState => { const { cart } = getState();
 ) ); $allowed_statuses = array( 'active', 'inactive','recently_activated', 'upgrade','mustuse', 'dropins','search', 'paused', 'auto-update-enabled', 'auto-update-disabled' ); $status = 'all'; if ( isset( $_REQUEST['plugin_status'] ) && in_array( $_REQUEST['plugin_status'], $allowed_statuses, true ) ) { $status = $_REQUEST['plu
 """Check whether the anchors are inside the border Args: flat_anchors (torch.Tensor): Flatten anchors, shape: (N, 4) valid_flags (torch.Tensor): An existing valid flags of anchors, shape: (N, 4) img_shape (tuple(int)): Shape of current image allowed_border (int, optional): The border to allow the valid anchor. Defaults to 0.
 */ function recurse_dirsize( $directory, $exclude = null, $max_execution_time = null, &$directory_cache = null ) { $directory  = untrailingslashit( $directory ); $save_cache = false; if (! isset( $directory_cache ) ) {
 end it'returns all fields and _id' do actual = church.as_json(compact: true).compact expect(actual).to eq('_id' => church.id, 'name' => 'St. Basil', 'location' => {}) end
 delete stringMap; } void MegaApiImpl::getUserAlias(MegaHandle uh, MegaRequestListener *listener) { MegaRequestPrivate *request = new MegaRequestPrivate(MegaRequest::TYPE_GET_ATTR_USER, listener);
 /// </summary> public class ByteBuffer { private readonly byte[] _buffer; private int _pos; // Must track start of the buffer. private int _off; // parent's position if sliced public ByteBuffer(byte[] buffer) : this(buffer, 0) { }
 */ private String getTemplatizedCreatedDate() { if (dateCreated!= null) { java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd"); if (UploadableFile.DateTimeWithSource.EXIF_SOURCE.equals(dateCreatedSource)) { return String.format(Locale.ENGLISH, TEMPLATE_DATE_ACC_TO_EXIF, dateFormat.format(dateCreated)) + "\n"; } else { return String.format(Locale.ENGLISH, TEMPLATE_DATA_OTHER_SOURCE, dateFormat.forma
 public void Take(int size, int iteration, Perf_LinqTestBase.WrapperType wrapType) => Perf_LinqTestBase.Measure(_sizeToPreallocatedArray[size], wrapType, col => col.Take(size - 1), _consumer); #if!NETFRAMEWORK [Benchmark] [ArgumentsSource(nameof(IterationSizeWrapperData))] public void TakeLast(int size, int iteration, Perf_LinqTestBase.WrapperType wrapType)
 var formatter = new StringFormatter(pool); formatter.Format(format, 1); Assert.Equal(string.Format(format, 1, CultureInfo.InvariantCulture), formatter.ToString()); } [Fact]
 var configObject = { options: { solc: { "optimize": (this.env!== 'test'), "optimize-runs": 200 } }
 */ #include <utils/s2n_socket.h> void s2n_socket_read_snapshot_harness() { /* Non-deterministic inputs. */ struct s2n_socket_read_io_context *cbmc_allocate_s2n_socket_read_io_context(); struct s2n_connection *s2n_connection = malloc(sizeof(*s2n_connection)); if (s2n_connection!= NULL) {
 // we're accessing the file and get the sync label for multiplexing let parsedRealmUrl = url_parse(realmUrl); const url = append_url(user.server,'realms/files/' + encodeURIComponent(parsedRealmUrl.pathname)); performFetch(url, {method: 'GET', timeout: 10000.0, headers: {Authorization: user.token}}).then((response) => response.json().then((json) => { return {
 return http.StatusServiceUnavailable } totalConnections, newerConnection := wn.connectedForIP(remoteHost) if totalConnections >= wn.config.MaxConnectionsPerIP { networkConnectionsDroppedTotal.Inc(map[string]string{"reason": "incoming_connection_per_ip_limit"}) wn.log.EventWithDetails(telemetryspec.Network, telemetryspec.ConnectPeerFailEvent,
 def back_transcribe(rna): """Return the RNA sequence back-transcribed into DNA. If given a string, returns a new string object.
 // check if we have sufficient threshold signature shares enoughShares, err := signature.EnoughThresholdShares(int(dkg.Size()), len(votes)) if err!= nil { return nil, fmt.Errorf("failed to check if shares are enough: %w", err) } if!enoughShares { return nil, ErrInsufficientShares
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4442-SEA 1645545158 144271116</p> <hr> <p>Varnish cache server</p> </body>
 // Disable UBLA and reset PAP to default. Confirm that the IAM config is set // to nil in the proto. attrs.UniformBucketLevelAccess = UniformBucketLevelAccess{Enabled: false} attrs.PublicAccessPrevention = PublicAccessPreventionDefaultIam attrs.PublicAccessPrevention = PublicAccessPreventionDefaultIam got = attrs.toRawBucket() want.IamConfiguration = nil if msg := testutil.Diff(
 void UpdatePreferredDownload(CNode *node, CNodeState *state) { LOCK(cs_main); if (state->fPreferredDownload) nPreferredDownload--; // Whether this node should be marked as a preferred download node. state->fPreferredDownload =!node->fOneShot &&!node->fClient;
 public int SchemaVersion { get; private set; } [JsonProperty(JobRecordProperties.Output)] public IReadOnlyDictionary<string, IExportFileInfo> Output { get; private set; } = new Dictionary<string, ExportFileInfo>(); [JsonProperty(JobRecordProperties.Error)] public List<IExportFileInfo> Error { get; private set; } = new List<ExportFileInfo>(); [JsonProperty(JobRecordProperties.Status)] public OperationStatus Status { get; set; }
 // } function foo() { __callKey(arguments[0], 'foo','string'); No newline at end of file }
 TableScan scan, int numRowsPerRoot, int expectedTotalRows, int numExtraCallsToHasNext) throws IOException { int totalRows = 0; try (VectorizedTableScanIterable itr = new VectorizedTableScanIterable(scan, numRowsPerRoot, false)) { CloseableIterator<ColumnarBatch> iterator = itr.iterator(); checkAllVectorValues(iterator, scan, numRowsPerRoot, expectedTotalRows); try { while (iterat
 * * @since 5.9.0 * * @param array $data A theme.json like structure. * @param array $node_path The path to inspect. It's'settings' by default. * @return array */ private static function get_default_slugs( $data, $node_path ) {
 ) var ( // Used to manipulate time in unit tests clk = clock.New() )
 "time" ) var version string // set by the Makefile func ensureInterface(ifaceName string, wait bool) (iface *net.Interface, err error) { iface, err = findInterface(ifaceName) if err == nil ||!wait {
 if (useSkipper) { streamDeploymentProperties.put(SKIPPER_ENABLED_PROPERTY_KEY, "true"); } defaultStreamService.deployStream(name, streamDeploymentProperties, skipperEnabled); } return new Assembler(new PageImpl<>(Collections.singletonList(stream))).toResource(stream); }
 author: 'Author' }, visitType: 'Visit Type', examiner: 'Examiner', location: 'Visit Location', primaryDiagnosis: 'Primary Diagnosis',
 var joinFragment = new ANSIJoinFragment(); var on = withClauseFragment?? SqlString.Empty; joinFragment.AddJoin(_tableName, _tableAlias, Array.Empty<string>(), Array.Empty<string>(), _joinType, on); return joinFragment;
 return "", fmt.Errorf("error getting Kubernetes Service Account: %w", err) } else if email := kServiceAccount.Annotations[resources.WorkloadIdentityKey]; email!= "" { // Check if email is a valid google service account email. if match := emailRegexp.FindString(email); match == "" { return "", fmt.Errorf("%s is not a valid Google Service Account as the value of Kubernetes Service Account %s for annotation %s", emai
 }); }); it('handles compat mode', async () => { const { code, metadata } = await compile( fixturePath('class_and_template/class_and_template.js'), {
 type Interface interface { GetPutter } type GetPutter interface {
 // NodeConfig represents the configuration settings to apply to a single node running on a host type NodeConfig struct { Name               string `json:",omitempty"` IsRelayDEPRECATED  bool   // The field still exists to parse any old serialized NodeConfig objects, but "IsRelay" should not be used. Wallets            []NodeWalletData NetAddress         string `json:",omitempty"` APIEndpoint        string `json:",omitempty"`
 elif (num_first_testcase_hangs == self.MAX_FIRST_HANGS_WITH_DEFERRED_FORKSERVER): environment.set_value(constants.AFL_DRIVER_DONT_DEFER, 1) print('Instructing AFL not to defer forkserver.\n' 'If this fixes the fuzzer, you should add this to the.options file:\n' '[env]\n'
 }) }) Context("defined with a collection identifier", func() { var col *MediaTypeDefinition BeforeEach(func() { dslengine.Reset()
 size_t offset = 0; UA_Connection *c = UA_NULL; UA_SecureChannel *sc = session->channel; if(!sc ||!sc->channel) { response->responseHeader.serviceResult = UA_STATUSCODE_BADINTERNALERROR; return; }
 out_shape, inds, device='cpu', interpolation='bilinear', binarize=True): """See :func:`BaseInstanceMasks.crop_and_resize`.""" if len(self.masks) == 0: empty_masks = np.empty((0, *out_shape), dtype=np.uint8)
 const static iroha::protocol::GrantablePermission invalid_grantable_permission = static_cast<iroha::protocol::GrantablePermission>(-1); iroha::protocol::Transaction generateCreateRoleTransaction( iroha::protocol::RolePermission permission) { auto tx = iroha::protocol::Transaction(); auto cr = tx.mutable_payload() ->mutable_reduced_payload()
 before do metadata = {:shared_group_name => 'double shared group'} allow(example).to receive(:example_group) { class_double(RSpec::Core::ExampleGroup, metadata: metadata, parent_groups: [], location: "#{__FILE__}:#{__LINE__}") } end it'should return failure_lines without color' do
 */ public function parseSetting($current) { $parts = explode(':', $current, 2); // Special case: don't explode URLs: if (($parts[0] === 'http' || $parts[0] === 'https')
 public void startLdapServer() throws Exception { UnboundIdContainer server = new UnboundIdContainer( validRootDn, null); server.setApplicationContext(new GenericApplicationContext()); List<Integer> ports = getDefaultPorts(1); server.setPort(ports.get(0)); server.afterPropertiesSet(); assertThat(server.getPort()).isEqualTo(ports.get(0)); server.destroy(); }
 // rule //   #Ceil(MapItem(K1, K2,..., Kn) Rest:Map) // => //  {(@K1 in_keys(@Rest)) #Equals false} #And #Ceil(@K1) #And #Ceil(@Rest) // Note: The {_ in_Keys(_) #Equals false} condition implies // #Ceil(@K1) and #Ceil(@Rest). // [anywhere,
 (u'negative_probability', u'subnormal_probability') ) def __init__(self, allow_infinity=True): super(FullRangeFloats, self).__init__() self.allow_infinity = allow_infinity def draw_parameter(self, random): return self.Parameter(
 <div className={className}> <Icon src={LoaderIcon} size={64} classes={{ icon: classes.indicator }} /> <span className={classes.message}>{props.children}</span>
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4443-SEA 1645541457 1645541457</p> <hr> <p>Varnish cache server</p> </body>
 * @return <tt>true</tt>, if one address belongs to a contact. *         <tt>false</tt>, otherwise. */ @WorkerThread public boolean containsContact(final Address[] addresses) { if (addresses == null) { return false; }
 from networkx.algorithms.applications import * from networkx.algorithms.assortativity import * from networkx.algorithms.block import * from networkx.algorithms.clique import * from networkx.algorithms.boundary import *
 uint8_t protocol_version = 0; uint16_t fragment_length = 0; /* First two bytes to parse are the fragment length */ uint8_t header_bytes[] = { 0x00, 0x00 }; EXPECT_SUCCESS(s2n_stuffer_write_bytes(&conn->header_in, header_bytes, sizeof(header_bytes))); EXPECT_FAILURE_WITH_ERRNO(s2n_sslv2_record_header_parse(conn, &record_type, &pr
 use App\Services\LdapAd; use Illuminate\Http\Request; use Illuminate\Support\Facades\Artisan; // to more-clearly distinguish between the Users *controller* Namespace, at the top. (it's *not* a conflict, it's Users vs. User) class LDAPImportController extends Controller {
 public class TimeOfDayResolutionResult { public DateTime BeginDateTime { get; set; } public DateTime EndDateTime { get; set; }
 } func mergeMaps(new map[string]string, old map[string]string) map[string]string { if old == nil { old = make(map[string]string) } for k, v := range new { old[k] = v }
 h.handler.ServeHTTP(rww, r.WithContext(ctx)) setAfterServeAttributes(span, bw.read, rww.written, rww.statusCode, bw.err, rww.err) span.SetStatus(standard.SpanStatusFromHTTPStatusCode(rww.statusCode)) } func setAfterServeAttributes(span trace.Span, read, wrote int64, statusCode int, rerr, werr error) {
 require 'rails_helper' describe Section do subject(:section) { Section.new( :title => "test section", :title_url => "testsection.url.com",
 Color fg = g->state==gs_disabled?g->box->disabled_foreground: g->box->main_foreground==COLOR_DEFAULT?GDrawGetDefaultForeground(GDrawGetDisplayOfWindow(pixmap)): g->box->main_foreground; for (c=0; c<=6; c++) { angle=(30+c/6.*120)*M_PI/180; pts[0].x=.5*w*c
 RegisterModel(Culture.English, options.ToString(), new Dictionary<Type, IModel> { [typeof(PhoneNumberModel)] = new PhoneNumberModel(new PhoneNumberParser(), new PhoneNumberExtractor()), [typeof(IPAddressModel)] = new IPAddressModel(new IPAddressParser(), new IPAddressExtractor()) }); }
 if fuzz_target: engine_impl = engine.get(fuzz_target.engine) if not engine_impl: raise RuntimeError('Engine not found.') self._is_black_box = False self._engine_impl = engine_impl
 batch_id=get_work_response['batch_id'], ) return task.task_id def _get_work(self): if self._stop_requesting_work: return None, 0, 0, 0, "disabled" if self.worker_processes > 0: logger.debug("Asking scheduler for work...")
 return false; } return ToString().Equals(uriSearchValueOther.ToString(), StringComparison.InvariantCultureIgnoreCase); } /// <inheritdoc />
 to: redirect('/paths/full-stack-ruby-on-rails/courses/ruby-on-rails/lessons/%{id}') # redirect old js pathroutes get '/courses/nodejs', to: redirect('/paths/full-stack-javascript/courses/nodejs') get '/courses/nodejs/lessons/:id', to: redirect('/paths/full-stack-javascript/courses/nodejs/lessons/%{id}') # redirect old shared course routes to rails path
 }); @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) { View rootView = inflater.inflate(R.layout.fragment_browse_image, container, false); ButterKnife.bind(this, rootView); mToolbar = (Toolbar) rootView.findViewById(R.id.toolbar); categoryName = getArguments().getString("categoryName"); isParentCategory = getArguments().getBoolean("isParentCategory");
 } const { products } = data; const { filters, items, total_count } = products; if (items.length === 0) { return <div className={classes.noResult}>No results found!</div>;
 from..geometry import bbox_overlaps from..geometry import img_as_int from.registry import IOU_CALCULATOR
 display_name=None, parent=None, lifecycle_state=BucketLifecycleState.UNSPECIFIED, lifecycle_configuration=None): """Initialize. Args:
 apply(t, [&account_ids, &asset_ids, &balances]( auto &account_id, auto &asset_id, auto &amount) { account_ids.push_back(account_id); balances.push_back( shared_model::interface::Amount(amount)); });
 } // processAuthenticatedMessage processes a message and a source (indicated by its peer ID) and eventually passes it to the overlay // In particular, it populates the `OriginID` field of the message with a Flow ID translated from this source. // The assumption is that the message has been authenticated at the network level (libp2p) to originate from the peer with ID `peerID` // this requirement is fulfilled by 
 Thread.Sleep(1000); // Leave a small gap in the timestamp var before = DateTime.UtcNow; var sinceUriString = string.Empty; var beforeUriString = HttpUtility.UrlEncode(before.ToString("o")); bool historyHas10Entries = false; // wait for above values to be represented in history results for (int i = 0; i < 10; i++) { sinceUriString = HttpUtility.UrlEncode(since.ToStr
 func (o *deleteAppOpts) sourceProjectEnvironments() error { if o.EnvName!= "" { env, err := o.targetEnv() if err!= nil { return err } o.projectEnvironments = append(o.projectEnvironments, env) } else { envs, err := o.projectService.ListEnvironments(o.ProjectName())
 BACKBONES = Registry('backbone') NECKS = Registry('neck') HEADS = Registry('head') ROI_EXTRACTORS = Registry('roi_extractor') DETECTORS = Registry('detector')
 end configure do use Sentry if Travis::Build.config.sentry_dsn.present? use Metriks if Travis::Build.config.librato.email.present? && Travis::Build.config.librato.token.present? && Travis::Build.config.librato.source.present? use Rack::Deflater end
 for _, regEntry := range fetchedRegisteredEntries { var selectors []*common.Selector var fetchedSelectors []*selector if err := ds.db.Model(&regEntry).Related(&fetchedSelectors); err!= nil { return nil, err } for _, selector := range fetchedSelectors { selectors = append(selectors, &common.Selector{ Type:  selector.Type,
 applied. """, deprecation_message=""" This setting is deprecated and will be removed in a future version. The new default value for the timeout is unlimited. To get the previous behaviour set ``timeout=0`` instead (which will remain valid for a further deprecation period after this setting has gone away). """, future_default=unlimited, validator=_validate_timeout
 clearUserDefinedVars(state.userDefinedVariables) try { nextState = JSON.parse(window.localStorage.getItem(action.title)) console.warn(`"${nextState.title}" is currently saved in localStorage as JSON. --- Saving as JSON is deprecated!!! --- Please take a minute open any saved notebooks you care about and resave them with ctrl+s. This will update them to jsmd.
 asset.sid, dt, column ) if result == 0 or np.isnan(result): if column == "volume": if not ffill: return np.nan return 0  # we are looking for price, and didn't find one. have to go hunting. last_traded_dt = \
 const ServiceAccountPrivateKeyHex = "e3a08ae3d0461cfed6d6f49bfc25fa899351c39d1bd21fdba8c87595b6c49bb4cc430201" // Pre-calculated state commitment with root account with the above private key const GenesisStateCommitmentHex = "66d3604b5d9c45
 } exports.setCache = function (res, options) { if (config.setCache) { options = options || {}; let pub = options.private? "private" : "public";
 def remote_shutdown(self): udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) udp_sock.sendto(b"Shutdown", ("localhost", self.management_port)) self.log.debug("Shutdown command sent") time.sleep(10) udp_sock.sendto(b"StopTestNow", ("localhost", self.management_port)) self.log.debug("StopTestNow command sent") self.wait_for_jmeter_finish() @staticmethod
 if (dup (pipe_stdin[0]) < 0) { ELEKTRA_SET_ERROR (ELEKTRA_ERROR_CRYPTO_GPG, errorKey, "failed to redirect stdin."); return -1; } } close (pipe_stdin[0]);
 cls: Type[NameT], name: Union[SchemaName, str], module: Optional[str] = None, ) -> NameT: if not name: raise NameError('name must not be empty')
 </div> )} {sortedRewards && ( <table className={buttonClasses}> <thead> <tr>
 // when we insert verbiage on top of terraform. c := exec.CommandContext(ctx, "terraform", "apply") c.Dir = biomePath c.Stdin = pctx.stdin c.Stdout = pctx.stdout c.Stderr = pctx.stderr if err := c.Run(); err!= nil {
 case HEROFL04: case HEROFL05: case HEROFL06: return 0; case TWNBDOCK: case TWNKDOCK:
 public const string NextPrefixRegex = @"(pr[oó]xim[oa]|siguiente)\b"; public const string PastPrefixRegex = @"([uú]ltim[oa])\b"; public const string ThisPrefixRegex = @"(est[ea])\b"; public const string RelativeDayRegex = @"""; public const string RestOfDateRegex = @"^[.]"; public const string RelativeDurationUni
 assert_text "コメント（\n2\n）" end test 'watching is automatically displayed when admin create new announcement' do visit_with_auth new_announcement_path, 'komagata' fill_in 'announcement[title]', with: 'Watch中になるかのテスト'
 Command::Repo::Add.new(CLAide::ARGV.new([name, url])).run source = source_with_url(url) end unless source raise Informative, "Unable to add a source with url `#{url}` named " \ "`#{name}`.\nYou can add it manually via `pod repo add NAME " \ "#{url}`.\n\n#{output}" end source end
 fbo.mdWriterLock.Lock(lState) defer fbo.mdWriterLock.Unlock(lState) fbo.fbm.archiveUnrefBlocks(rmd.ReadOnly()) }
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4468-SEA 1645549161 2815534475</p> <hr> <p>Varnish cache server</p> </body>
 if not isinstance(self._client_stat, ClientStatistic): raise RuntimeError("Bad Statistic obj") random.seed() self.file_name = check_fs(is_dir=False, fs_name=file_name) if file_name is None: # Copied from Plenum def random_string(self, sz: int) -> str:
 } return u.Path, nil }
 // Result type can't be an interface type; use wire.InterfaceValue for that. argType := info.TypeOf(call.Args[0]) if _, isInterfaceType := argType.Underlying().(*types.Interface); isInterfaceType { return nil, notePosition(fset.Position(call.Pos()), fmt.Errorf("argument to Value may not be an interface value (found %s); use InterfaceValue instead", argType)) } return &Value{ 
 inds = torch.nonzero(labels >= 1).squeeze() if inds.numel() > 0: bin_labels[inds, labels[inds] - 1] = 1 # TODO: the following code is duplicated bin_label_weights = label_weights.view(-1, 1).expand( label_weights.size(0), label_channels) return bin_labels, bin_label_weights
 getProcessor(inputProtocol, outputProtocol, client), inputProtocol, outputProtocol, eventHandler_, client)); threadManager_->add(std::make_shared<TConnectedClient>(pClient, timeout_, taskExpiration_)); } catch (TTransportException& ttx) { if (inputTransport) {
 import net.pms.formats.Format; import net.pms.formats.v2.SubtitleType; import net.pms.image.ImagesUtil; import net.pms.image.ImagesUtil.ScaleType; import net.pms.util.FileUtil;
 root.debug("Already set up logging") # setup_test_logging() if root.debug: root.debug("Setting up test logging") setup_test_logging() logging.info("Bootstrapped test")
 public function getMediaTypes(): Collection { // @todo what is this for? return collect(['png', 'jpg', 'jpeg', 'gif','svg', 'pdf','mp3', 'tiff','mov','mp4', 'avi', 'wmv', 'flv','mpeg', 'webm']); } }
 /// Fetch the entity and its lazy properties. /// </summary> FetchLazyProperties, /// <summary> /// Only identifier columns are added to select statement. Use it for fetching child objects for already loaded
 } func (u *staticUpstream) healthCheck() { for _, host := range u.Hosts { hostURL := host.Name + u.HealthCheck.Path if r, err := u.Client.Get(hostURL); err == nil { io.Copy(ioutil.Discard, r.Body) r.Body.Close() host.Unhealthy = r.StatusCode < 200 || r.StatusCode >= 400
 Node *n = client->nodebyhandle(h); if (n) { n->setpubliclink(ph, time(nullptr), ets, false); n->changed.publiclink = true; client->notifynode(n); }
 return drawerLayout!= null && navDrawer!= null && drawerLayout.isDrawerOpen(navDrawer); } public interface AudioplayerContentFragment { public void onDataSetChanged(Playable media); }
 return fmt.Errorf("%s: %s\n", strings.TrimSpace(string(out)), err.Error()) } defer os.Remove(file)  stat, err := os.Stat(file) if err!= nil { log.Error(err)
 "com.palantir.baseline:baseline-error-prone:" + version); project.getDependencies().add( "refasterCompiler", "com.palantir.baseline:baseline-refaster-plugin:" + version); Provider<RegularFile> refasterRulesFile = project.getLayout().getBuildDirectory().file("refaster/rules.refaster"); // TODO: Move this to a test task after refaster 2.0.0 i
 import java.io.IOException; import java.io.InputStream; import java.lang.reflect.Constructor; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Modifier; import java.util.Arrays; import java.util.List; import java.util.Map; import static com.hazelcast.jet.Traversers.traverseIterable; import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow; import static java.util.Collections.emptyList; imp
 return nil } // don't propagate collection guarantees if we are not currently staked staked, err := protocol.IsNodeStakedAt(e.state.FinalizedState(), e.me.NodeID()) if err!= nil { return fmt.Errorf("could not check my staked status: %w", err) }
 def init_stylesheet(self, css_file="green.css"): """Initialize the stylesheet with a provided css file.""" css_path = str(pathlib.Path(__file__).parent / css_file) self.config_stub.val.content.user_stylesheets = css_path self._check_stylesheet_exists(css_path) def set_css(self, css): """Set document style to `css` via stylesheet.js."""
 movefileWriteThrough    = 0x8 ) // AtomicWriteFile writes data out.  It writes to a temp file first, fsyncs that file, // then swaps the file in. Rename file using a custom MoveFileEx that uses 'MOVEFILE_WRITE_THROUGH' witch waits until // file is synced to disk.
 Stage stageOne = (Stage) cmmnModel.getPrimaryCase().getPlanModel().findPlanItemDefinitionInStageOrDownwards("stageOne"); List<PlanItem> planItems1 = stageOne.getPlanItems(); assertThat(planItems1).hasSize(1); assertThat(planItems1.get(0).getItemControl().getParentCompletionRule().getType()).isEqualTo(ParentCompletionRule.IGNORE_AFTER_FIRST_COMPLETION); } }
 const id = match; if (!id) { console.error( 'Uh Oh seems like the markdown misses headings. Can you run `yarn fix-headings` to generate headings.' ); process.exit(1); }
 h.tableName = n } func newHost() *Host { return &Host{ Host: &store.Host{}, } }
 if!allPorts { for _, npProtocolPort := range egressRule.Ports { if _, err := strconv.Atoi(port(npProtocolPort.Port)); err!= nil { return nil, nil, nil, nil, errors.New("named ports in network policies is not supported yet. Rejecting network policy from further processing") } } }
 return v } // Validate runs the validations defined on add request body func (body *AddRequestBody) Validate() (err error) { if body.Name == nil { err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
 import org.flowable.bpmn.converter.export.FieldExtensionExport; import org.flowable.bpmn.converter.export.MapExceptionExport; import org.flowable.bpmn.converter.util.BpmnXMLUtil; import org.flowable.bpmn.model.BpmnModel; import org.flowable.bpmn.model.BpmnXMLDocument; import org.flowable.bpmn.model.CollectionType; import org.flowable.bpmn.model.DataItem; import org.flowable.bpmn.model.
 blobService.deleteContainer(containerName, function(){done();}); }); it('should upload a basic file to azure storage', function(done) { var buf = new Buffer('HelloWord', 'utf8'); var fileName = 'hello.tmp.txt'; var fd = fs.openSync(fileName, 'w');
 images, bb, labels = self.input(name="Reader") return self.base_define_graph(images, labels, bb) test_data = { COCOReaderPipeline: [["/data/coco/coco-2017/coco2017/train2017", "/data/coco/coco-2017/coco2017/annotations/instances_train2017.json"], ["/data/coco/coco-2017/coco2017/v
 sql << queries.second; } iroha::expected::Error<iroha::ametsuchi::CommandError> makeCommandError( std::string &&command_name, const iroha::ametsuchi::CommandError::ErrorCodeType code, const std::string &query_args) noexcept { return iroha::expected::makeError(iroha::ametsuchi::CommandError{ std::move(command_name), code, 
 func RenameColumn(ctx context.Context, commandStr string, args []string, dEnv *env.DoltEnv) int { ap := argparser.NewArgParser() ap.ArgListHelp["table"] = "table being modified." help, usage := cli.HelpAndUsagePrinters(commandStr, schRenameColShortDesc, schRenameColLongDesc, schRenameColSynopsis, ap) apr := cli.ParseArgs(ap, args, help)
 CoinAccessor::CoinAccessor(const CCoinsViewCache &view, const uint256 &txid) : cache(&view), lock(cache->csCacheInsert) { cache->cs_utxo.lock_shared(); EnterCritical("CCoinsViewCache.cs_utxo", __FILE__, __LINE__, (void *)(&cache->cs_utxo), "CoinAccessor::CoinAccessor"); COutPoint iter(txid, 0); coin = &emp
 h[:], edges[:] = np.histogramdd(coord, bins=bins, range=arange, normed=False) grid += h  # accumulate average histogram if start > 0 or stop < len(range(0, len(u.trajectory))): start, stop, step = u.trajectory.check_slice_indices(start, stop, step) n_frames = len(range(start, stop, step)) grid /= float(n_frames)
 public class Quotes { /** * Converts strings with both quotes and ticks into: foo'"bar -> concat("foo'", '"', "bar") * * @param toEscape a text to escape quotes in, e.g. "f'oo" * @return the same text with escaped quoted, e.g. "\"f'oo\""
 avg(t.average_exec_per_sec) as avg_exec_per_sec, avg(t.fuzzing_time_percent) as fuzzing_time_percent, sum(t.new_units_added) as new_tests_added, sum(t.new_features) as new_features, avg(t.crash_count*100) as regular_crash_percent, avg(t.oom_count*100) as oom_percent, avg(t.leak_count*100) as leak_percent,
 var result = await pipe.Reader.ReadAsync(); var input = result.Buffer; if (input.Length == 0) break; // Sizes less than max int Assert.True(input.EqualsTo(new Span<byte>(data, (int) offset, (int) input.Length))); offset += input.Length; pipe.Advance(input.End);
 private BrowserResponse HandleRequest(string method, string path, Action<BrowserContext> browserContext) { return HandleRequest(method, new Url(path), browserContext); }
 * Contact information: contact@sofa-framework.org                             * ******************************************************************************/ #include <sofa/config.h> namespace sofa {
 { if (!key ||!strcmp(keyName(key), "")) return handle->defaultBackend; Backend *ret = elektraTrieLookup(handle->trie, key); if (!ret) return handle->defaultBackend; return ret;
 // castle name text.set( castle.GetName(), smallWhiteFont ); dst_pt.x = cur_rt.x + ( cur_rt.width - text.width() ) / 2; dst_pt.y = cur_rt.y + 2; text.draw( dst_pt, display ); // castle icon
 current_app.logger.error("Error while getting artist_country_codes, {}".format(err), exc_info=True) error_msg = ("An error occurred while calculating artist_map data, " "try setting 'force_recalculate' to 'false' to get a cached copy if available" "Payload: {}".format(request_data)) current_app.logger.error(error_msg) raise APIInternalServerError(error_msg) return country_codes
 if email: try: ProductAlert.objects.get( product=self.product, email=email, status=ProductAlert.ACTIVE) except ProductAlert.DoesNotExist: pass else: raise forms.ValidationError(_( "There is already an active stock alert for %s") % email) elif self.user: try: ProductAlert.objects.get(product=self.product, user=self.user,
 // RuleMetadata is the metadata attached to this build rule. It can be accessed through the "get_rule_metadata" BIF. RuleMetadata interface{} `name:"config"` // EntryPoints represent named binaries within the rules output that can be targeted via //package:rule|entry_point_name EntryPoints map[string]string `name:"entry_points"` } // BuildMetadata is temporary metadata that's stored around a build target - we don't
 ); $jump_to_form = '<form class="nv-page-nav-form" action="'. esc_url( get_pagenum_link() ). '" method="get" autocomplete="off"> <input class="nv-page-input-number" type="number" min="1" step="1" value="'. absint( $current_page ). '" placeholder="1" size="3" name="paged" /> '. wp
 """ Created on Wed Jan 16 14:20:24 2019 """ from..torch_core import * from..basic_train import *
 #include <algorithm>  // for std::swap #include <array>      // for std::array /**
 dofs->resize(nbrDofs); /// Add PointSetTopology typename sofa::component::topology::PointSetTopologyContainer::SPtr tCon = sofa::core::objectmodel::New<sofa::component::topology::PointSetTopologyContainer>(); tCon->setNbPoints(nbrDofs); node->addObject(tCon);
 trailingPunctRegExp = regexp.MustCompile(`[\-\.]$`)            // Check for trailing dash or dot. ) // Options for SQS Queues. var ( resourceNameFormat      = "%s-%s-%s-%s" // Format for copilot resource names of form app-env-svc-name deadLetterTriesMaxValue = 1000
 async_call_->log_->info( "Receive votes[size={}] from {}", state.size(), context->peer()); if (auto notifications = handler_.lock()) { notifications->onState(std::move(state)); } else { // some error handling if applicable } return grpc::Status::OK; }
 void testStateChangesBetweenIntegration() { using namespace std; using SimTK::Vec3; Model model;
 /** * @return string */ abstract protected function getGitBranchName(): string; /** * @param \PharIo\Version\Version $version
 elsif cluster.sharded? near_servers(cluster.servers).each { |server| validate_max_staleness_support!(server) } else validate_max_staleness_value!(cluster) select(cluster.servers) end end
 else: cmd = "pw useradd {0} -m".format(username) if comment is not None: cmd += " -c '{0}'".format(comment) if home is not None: cmd += " -d '{0}'".format(home) retcode, out = shellutil.run_get_output(cmd) if retcode!= 0: raise OSUtilError(("Failed to create user account:{0}, "
 func (config *Configuration) ShouldLinkGeneratedSources() bool { isTruthy, _ := gcfgtypes.ParseBool(config.Build.LinkGeneratedSources) return config.Build.LinkGeneratedSources == "hard" || config.Build.LinkGeneratedSources == "soft" || isTruthy } func (config Configuration) copyConfig() *Configuration {
 ) // Function called during Agent start up to expose metrics on a local endpoint func PublishMetrics(cfg *config.Config) { if cfg.PrometheusMetricsEnabled { MetricsEngineGlobal.publishMetrics() MetricsEngineGlobal.collection = true }
 def _enable_amqheartbeats(timer, connection, rate=2.0): heartbeat_error = None if not connection: return heartbeat_error
 LOG.fine("Adding host: " + host.asSummary()); hosts.add(host); LOG.info(String.format("Added node %s.", node.getId())); host.runHealthCheck(); Runnable runnable = host::runHealthCheck;
 char* aws_secret_access_key; char* aws_region; char* aws_email; char* env_prefix; }initialized_data; static unsigned int gen_guid(){
 private final AuthenticationManagerResolver<String> issuerAuthenticationManagerResolver; private final Converter<HttpServletRequest, String> issuerConverter; private final AuthenticationManagerResolver<String> audienceAuthenticationManagerResolver; /** * Construct a {@link JwtIssuerAuthenticationManagerResolver} using the provided
 self, type1, type2) def py_operation_function(self, code): type1, type2 = self.operand1.type, self.operand2.type is_unicode_concat = (type1 is unicode_type or type1 is str_type) and (type2 is unicode_type or type2 is str_type) if is_unicode_concat: if self.operand1.may_be_none() or self.operand2.may_be_none():
 } // parseCaddyfileURI sets up a handler for manipulating (but not "rewriting") the // URI from Caddyfile tokens. Syntax: // //     uri [<matcher>] strip_prefix|strip_suffix|replace <target> [<replacement> [<limit>]] //
 // TODO(liu-cong) configurable timeout decoupleSinkTimeout = 30 * time.Second // Limit for request payload in bytes (100Mb) maxRequestBodyBytes = 100000000 // TODO(liu-cong) configurable maxRequestBodyBytes = 100000000 // EventArrivalTime is used to access the metadata stored on a // CloudEvent to measure the time difference between when an event is
 videoAudioCodecs.push('mp2'); } let supportsDts = options.supportsDts || browser.tizen || videoTestElement.canPlayType('video/mp4; codecs="dts-"').replace(/no/, '') || videoTestElement.canPlayType('video/mp4; codecs="dts+"').replace(/no/, ''); // DTS audio not supported in 2018 models (Tizen 4.0
 expect_node_error(Bolt::Node::ConnectError, 'CONNECT_ERROR', /Failed to connect to/) do ssh.with_connection(make_target(host: '127.0.0.1', port_: 65535)) {} end exec_time = Time.now - exec_time expect(exec_time).to be < 1
 learn.fit(cyc_len, max_lr, wd=wd, callbacks=callbacks) def fit_fc(learn:Learner, tot_epochs:int=None, lr:float=defaults.lr, moms:Tuple[float,float]=(0.95,0.85), start_pct:float=0.72, wd:float=None, callbacks:Optional[CallbackList]=None)->None: "Fit a model with Flat Cosine Annealing" ma
 reconnectOften =!config.memory && config.big; testScript("testScript.sql"); testScript("derived-column-names.sql"); testScript("joins.sql"); testScript("dual.sql"); testScript("indexes.sql");
 $services = parent::getSubscribedServices(); $services['contao.picker.builder'] = PickerBuilderInterface::class; $services['contao.uri_signer'] = UriSigner::class; return $services; }
 spinner progress sel     wsSelector  // imageBuilderPusher imageBuilderPusher // s3           artifactUploader // addons       templater // appCFN       appResourcesGetter // jobCFN       cloudformation.CloudFormation } func newJobDeployOpts(vars deployJobVars) (*deployJobOpts, error) {
 // FilterMonitorFunc is default monitor filter when admin module is enable. // if this func returns, admin module records qbs for this request by condition of this function logic. // usage: // 	func MyFilterMonitor(method, requestPath string, t time.Duration, statusCode int) bool { //	  	if method == "POST" { //			return false //	 	}
 StoredTabletFile metaFile = null; long startTime = System.currentTimeMillis(); long entriesWritten = 0; boolean failed = false; int numRecords = 0; CompactionStats stats = new CompactionStats(); try {
 return false; } const struct wlr_gles2_pixel_format *fmt = get_gles2_format_from_wl(texture->wl_format); assert(fmt); // TODO: what if the unpack subimage extension isn't supported?
 * @author Shane Bryzak * */ @RequestScoped @Named public class LoginAction { @Inject Identity identity;
 Filters:     instanceFilters, }) if err!= nil { return status.Errorf(codes.Internal, "failed to describe instances: %v", err) } // Ideally we wouldn't do this work at all if the agent has already attested
 init_dist(args.launcher, **cfg.dist_params) # build the dataloader # TODO: support multiple images per gpu (only minor changes are needed) # TODO: support multiple images per gpu through command line # TODO: support multiple images per gpu through yaml # TODO: support multiple images per gpu through `DataLoader` # TODO: support multiple images per gpu through `DataLoader` # TODO: support multiple images per gpu through `Data
 return s->lookup(xs_); } caf::expected<segment_store_ptr> segment_store::make(std::filesystem::path dir, size_t max_segment_size, size_t in_memory_segments) {
 return joinClause; } @Nonnull @SuppressWarnings("unchecked") public <T, T1, R> DistributedBiFunction<?,? super T1,?> adaptHashJoinOutputFn( @Nonnull DistributedBiFunction<? super T,? super T1,? extends R> mapToOutputFn
 assert self._tempdir is not None    # for mypy modified_src = self._tempdir / src.name shutil.copy(str(REPO_ROOT / 'www' / 'header.asciidoc'), modified_src) outfp = io.StringIO()
 std::string readData; detail::loggerStatus(detail::db->Get(leveldb::ReadOptions(), key, &readData)); if (!readData.empty()) { return readData; } else { return "";
 Group.url: '[src], [href]', Group.prevnext: 'a, area, button, link, [role=button]', Group.focus: '*:focus', Group.inputs: 'input:not([type=hidden]), textarea', }
 package com.hazelcast.jet.elasticsearch; import com.hazelcast.function.SupplierEx; import com.hazelcast.jet.JetInstance; import com.hazelcast.jet.JetTestInstanceFactory; import com.hazelcast.jet.config.JetConfig; import com.hazelcast.jet.elastic.ElasticSupport; import org.apache.http.HttpHost; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestHighLevelClient; import org.junit.Af
 return; } // call method using named method arguments var invokeWith = bundle.CreateArgumentList(parameters, viewModel.GetType().Name).ToArray(); methodInfo.Invoke(viewModel, invokeWith);
 auto before = maybe_parse(caf::get_if<std::string>(&options, "explore.before")); auto after = maybe_parse(caf::get_if<std::string>(&options, "explore.after")); auto by = maybe_parse(caf::get_if<std::string>(&options, "explore.by")); explorer_state::event_limits limits; limits.total = caf::get_or(options, "explore.max-events", defaults::explor
 let js = `${ruleOptions.postMessageSyntax}(${JSON.stringify(href)}); return false;`; if (hrefAttr.indexOf('#') === 0 && href.indexOf('#') === 0) js = ''; // If it's an internal anchor, don't add any JS since the webview is going to handle navigating to the right place return `<a data-from-md ${resourceIdAttr} title='${htmlentities(title)}' href='${htmlentit
 return readOnlyGroups; } public boolean isBounceAfterScale() { return bounceAfterScale; } @Override
 } else { syncs.removeSelectedSyncs([](SyncConfig&, Sync* s) { return s!= nullptr; }); syncs.truncate(); }
 def __init__(self, elements): SearchStrategy.__init__(self) self.elements = d.check_sample(elements,'sampled_from') assert self.elements def calc_has_reusable_values(self, recur):
 @property def _pubsub(self): return self.pubsub @_pubsub.setter def _pubsub(self, value):
 try (JarFile jarFile = new JarFile(jar)) { if (StringUtil.isNullOrEmpty(mainClass)) { if (jarFile.getManifest() == null) { error("No manifest file in " + jar + ". Use -c option to specify a main class."); } mainClass = jarFile.getManifest().getMainAttributes().getValue("Main-Class"); if (mainClass == null) { error("No Main-Class found in manifest
 mockError := errors.New("mockError") mockManifest := []byte(`name: appA type: 'Load Balanced Web Service' image: build: appA/Dockerfile `)
 try (Writer w = Util.printWriter(logFile)) { write(doc, w, indent); } } catch (IOException e) { throw Util.throwAsRuntime("error while writing test reference log '" + logFile + "'", e);
 view_name = "Unknown Image" return view_name, base.format_dict(multidict.MultiDict(image_metadata)) def should_render(self, content_type): """Should the renderer render the content type?  This method should return True if the renderer should render the content type.  It should return False otherwise. """ return content_type.startswith("image/") and content_type!= "image/svg+xml"
 using namespace iroha::network; using namespace shared_model::crypto; using namespace shared_model::interface; namespace { const char *kPeerNotFound = "Cannot find peer";
 d := c.config.AllSettings() ym, err := yaml.Marshal(d) if err!= nil { return fmt.Errorf("unable to marshal config to yaml: %v", err) } cmd.Println(string(ym)) return nil
 } @Ignore @Test public void testSavingsAccount_DormancyTracking() { this.savingsAccountHelper = new SavingsAccountHelper(this.requestSpec, this.responseSpec);
 } ViewingLayerPtr Layer::get_parent_layer_pointer(size_t index) const { if (index >= m_parent_layers.size()) { LBANN_ERROR( "attempted to get pointer to parent ",index," of ", get_type()," layer \"",get_name(),"\", ",
 deleteNode = true; } mThread = std::thread ([this, deleteNode, node, transfer]() { LocalPath path; if (transfer->getParentPath()) {
 blacklist ${PATH}/roxterm blacklist ${PATH}/roxterm-config blacklist ${PATH}/urxvtc blacklist ${PATH}/urxvt blacklist ${PATH}/terminix
 return false, err } if n == 0 { return false, fmt.Errorf("commit %s not found in history (was at least not found on one path from HEAD to some parent-less commit)", sh) } return true, nil
 MystAddress:        "0x4Cf89ca06ad997bC732Dc876ed2A7F26a9E7f361", EtherClientRPC: []string{ "https://main-light.eth.linkpool.io/", }, }, Chain2: ChainDefinition{
 [Fact] [Trait(Traits.Priority, Priority.One)] public async Task GivenATransactionBundleReferencesInResourceBody_ReferencesAreResolvedCorrectly() { var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry");
 if not mapping_uuid: return jsonify({}) function_name = data.get('FunctionName') or '' enabled = data.get('Enabled', True) batch_size = data.get('BatchSize') or 100 mapping = update_event_source(mapping_uuid, function_name, enabled, batch_size) return jsonify(mapping)
 import React from'react'; import {Link} from 'gatsby'; import {useStaticQuery} from 'gatsby'; import {usePrefix} from 'gatsby-remark-relative-slug'; import PropTypes from 'prop-types'; import styled from'styled-components'; import {useTheme} from '@emotion/react'; import {useConfig} from '../../hooks'; import {Button} from '../../components/button'; import {Box} from '../../components/box'; 
 } } void launchKernel(float* C, float* A, float* B, int N, bool manual, float* C0d, float* C1d){ hipDeviceProp_t devProp; HIP_CHECK(hipGetDeviceProperties(&devProp, 0));
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4473-SEA 1645542011 1202822717</p> <hr> <p>Varnish cache server</p> </body>
 or "REPORT" in raw_message # necessary until tail is updated in docker images. See this PR: # http://git.savannah.gnu.org/gitweb/?p=coreutils.git;a=commitdiff;h=v8.24-111-g1118f32 or "tail: unrecognized file system type" in raw_message or regex_filter and not re.search(regex_filter, raw_message) ):
 // Use the transport to make a new CloudEvents client. return cloudevents.NewClient(t) }
 class Coin(object): def __init__(self, p): self.probability = p assert 0 < p < 1 n_bits = 1
 return } // addCycle records the cycle between startID and endID in metaData.cycle. func addCycle(g *PkgGraph, metaData *dfsData, startID, endID int64) { // Construct a cycle that starts and ends with the same node id by backtracking // from startID to endID
 tc, err := NewTestConn(remoteIPAddr, remotePort, sourceIPAddr, sourcePort, protocol, time.Duration(seconds)*time.Second, sendLen, recvLen) if err!= nil { log.WithError(err).Fatal("Failed to create TestConn") } defer func() {
 @pytest.mark.skipif(executable_not_found("hole"), reason="Test skipped because HOLE not found") class TestHOLE(object): filename = PDB_HOLE @classmethod @pytest.fixture() def H(cls, tmpdir): # keep tempdir around for the whole lifetime of the class with tmpdir.as_cwd(): H = HOLE(cls.filename, raseed=31415) H.run() H.collect() return H
 throw e; } catch (Exception e) { if (e.getCause().getClass().equals(ThriftTableOperationException.class) && e.getMessage().equals(THROTTLE_DELETE_TABLE)) { // acceptable } else { throw new RuntimeException(e);
 self.loss_cls = build_loss(loss_cls) self.loss_bbox = build_loss(loss_bbox) self.fp16_enabled = False self._init_layers()
 * * @return ElkArte\Theme\TemplateLayers instance of the class */ public static function instance($error_safe = false) { if (self::$_instance === null) {
 def get_names( infos: List[List[Dict[str, Any]]] ) -> List[str]: """Get names of all parameters. Parameters
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4472-SEA 1645537652 1473169353</p> <hr> <p>Varnish cache server</p> </body>
 public List<RoleInfo> getRoles(String username) { List<RoleInfo> roleInfoList = roleInfoMap.get(username); if (!authConfigs.isCachingEnabled()) { Page<RoleInfo> roleInfoPage = getRolesFromDatabase(username, DEFAULT_PAGE_NO, Integer.MAX_VALUE); if (roleInfoPage!= null) { roleInfoList = roleInfoPage.getPageItems();
 #define IfFailRet(EXPR) do { Status = (EXPR); if(FAILED(Status)) { return (Status); } } while (0) #endif #ifdef FEATURE_PAL #define MINIDUMP_NOT_SUPPORTED()
 if (length <= back.length()) { return this; } final StringBuilder sb = new StringBuilder(back.length() + (length - back.length())); sb.append(padding(sb, element, length - back.length())); return new CharSeq(sb.toString()); }
 } private static TomlParseResult readToml(final String filepath) throws Exception { TomlParseResult tomlParseResult; try { tomlParseResult = TomlConfigFileParser.loadConfigurationFromFile(filepath); } catch (Exception e) { throw new Exception( "Unable to read permissioning TOML config file : " + filepath + " " + e.getMessage()); } return tomlParseResult; } }
 } [Fact] public void Multiple_Form_properties_should_bind_to_list() // Given: //  - Multiple Form properties should bind to list // Then: //  - The Form property is bound to a list //  - The Form property is bound to a list with a fallback converter //  - The Form property is bound to a list with a fallback converter and a fallback converter //  - The Form property is bound to a list with a fallback converter
 wg        sync.WaitGroup startTime time.Time publicIP  string } // Ping should be used as Healthcheck for Hub
 """ Return Series as ndarray or ndarray-like depending on the dtype. """ return self.to_numpy().flatten() def add(self, other, level=None, fill_value=None, axis=0):  # noqa: PR01, RT01, D200 """
 { if (force->bond == NULL) error->all(FLERR,"No bond style is defined for compute bond/local"); // do initial memory allocation so that memory_usage() is correct
 self.comm = comm self._force = False self._updated = False params = {k: v for k, v in params.items() if k in self.params()} super(DimensionedPlot, self).__init__(**params)
 end def attempt_login_with_auth(authentication, path) if current_user.present? && authentication.user!= current_user flash[:alert] = 'Another account is already associated with these credentials!' redirect_to path else flash[:notice] = 'Signed in successfully.' sign_in_and_redirect(:user, authentication.user) end end def create_new_authentication_for_current_user(omniauth, path)
 fmt.Printf("Located Source Account: %s -> %v\n", cfg.SrcAccount, accounts[cfg.SrcAccount]) } // all new participant accounts will be created for asset testing since accounts are limited to 1000 assets // If we have more accounts than requested, pick the top N (not including src) if len(accounts) > int(cfg.NumPartAccounts+1) {
 try { return classLoader.loadClass(mainClass); } catch (ClassNotFoundException e) { System.err.println("Cannot find or load main class: " + mainClass); throw e; } }
 int backupType = static_cast<int>(request->getTotalBytes()); if (backupType < MegaApi::BACKUP_TYPE_CAMERA_UPLOADS || backupType > MegaApi::BACKUP_TYPE_MEDIA_UPLOADS) { e = API_EARGS; if (backupType!= MegaApi::BACKUP_TYPE_INVALID) break; } BackupType bType = static_cast<BackupType>(backupType);
 foreach ($productsForRecalculations as $productForRecalculations) { $this->productPriceRecalculationScheduler->scheduleProductForImmediateRecalculation($productForRecalculations); $this->productChangeMessageProducer->productChanged($productForRecalculations); $this->productAvailabilityRecalculationScheduler->scheduleProductForImmediateRecalculation($productForRecalculations); }
 } } else if (classType.getName().equals("org.apache.logging.slf4j.Log4jLoggerFactory")) { Log4j2Helper.addClientLogger(clientLogRoot, clientLogLevel, clientLogMaxIndex, true); } } catch (Exception e) { System.err.println(e);
 securePasswordConfirmed: false, }; onSecurePasswordConfirmationChange = this.onSecurePasswordConfirmationChange.bind( this );
 }; function resizeHandler() { const canvas = document.querySelector('[data-apos-video-canvas]'); if (canvas) { resizeVideo(canvas); } else { window.removeEventListener('resize', resizeHandler); }
.inc(); } else { outboundMessagesCounter.labels("null", message.getName(), Integer.toString(message.getCode())).inc(); }
 * @param {string} options.provider - The provider type * @param {string} options.providerToken - The access token for the given provider * @param {object} [options.userInfo] - A map containing additional data required by the provider * @param {function(error, User)} [callback] - an optional function called with the following arguments: *   - `error` - an Error object is provided on failure *
 def _from_file_str_data(self, file_str): req_json = super()._from_file_str_data(file_str) if req_json is None: return None tmp = json.loads(req_json) cred_def_id = (tmp.get('result', {}).get('txnMetadata', {}) or tmp.get('txnMetadata', {})).get('txnId', None) return cred_def_id class RGGetEntryRevoc(RGEntryRevoc):
 import ( "time" "github.com/keybase/kbfs/kbfsblock" "github.com/keybase/kbfs/kbfscrypto" "github.com/keybase/kbfs/tlf"
 public ChatWindow chatWindow => ((ChatNetworkManager)NetworkManager).chatWindow; [Command] public void CmdSend(string message) {
 selection = trans_u.residues[0].atoms center_pos = selection.center_of_mass() matrix = rotation_matrix(np.deg2rad(angle), vector, center_pos) ref.positions = np.dot(ref.positions, matrix[:3, :3]) + matrix[:3, 3] transformed = rotateby(angle, vector, ag=selection, center='mass')(trans) assert_array_almost_equal(transformed.positions, ref.positions, decimal=6) 
 import org.apache.iceberg.actions.Actions; import org.apache.iceberg.actions.RemoveOrphanFilesAction; import org.apache.iceberg.spark.procedures.SparkProcedures.ProcedureBuilder; import org.apache.spark.sql.Row; import org.apache.spark.sql.catalyst.InternalRow; import org.apache.spark.sql.catalyst.util.DateTimeUtils; import org.apache.spark.sql.connector.catalog.TableCatalog;
 /** * @var string * * @ORM\Column(type="binary_string", length=32, options={"fixed"=true, "nullable"=false}) */ protected $series; /** * @var string * * @ORM\Column(type="binary_string", length=64, options={"fixed"=true, "nullable"=false}) */ protected $value;
 confirmButton: classes.confirmButton }; const maybeError = hasError? ( <ErrorMessage error={translatedGenericErrorMessage} /> ) : null; return (
 // +k8s:openapi-gen=true // +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object // +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type==\"Ready\")].status",description="" // +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.condit
 /// <summary> /// Inserts NLog Config Variable without overriding NLog Config Variable assigned from API /// </summary> internal void InsertConfigVariable(string key, Layout value) { _variables.InsertConfigVariable(key, value, LogFactory.KeepVariablesOnReload); } /// <summary>
 start: FloatTensorLike = 0, limit: FloatTensorLike = -1, emit_self_as_target: bool = False, vocab_freq_table: Optional[FloatTensorLike] = None, vocab_min_count: Optional[FloatTensorLike] = None, vocab_subsampling: Optional[FloatTensorLike] = None, corpus_size: Optional[FloatTensorLike] = None,
 s3_dest ='s3://mybucket/copydir_new/' response = s3_client.copy(s3_dir, s3_dest, threads=10, part_size=copy_part_size) self._run_copy_response_test(response)  response = s3_client.copy('', s3_dest, threads=10, part_size=copy_part_size) self._run_copy_response_test(response)  response = s3_client.copy(s3
 function onKeyDown(e) { // Don't submit form on enter // Real (non-emulator) Tizen does nothing on Space if (e.keyCode === 13 || (e.keyCode === 32 && browser.tizen)) { e.preventDefault(); this.checked =!this.checked;
 // @formatter:off /** * Returns the type of this node. The type of a declarator ID is * the type written out at the start of the declaration, unless * the type is a {@link TypeReference} and the declarator ID is * the last declarator ID in the declaration, in which case the * type of the declarator ID is the type written out at the * start of the declaration. * * @return t
 foreach (SearchParameter searchParameter in searchParameters) { if (searchParameter.Name == SearchParameterNames.ResourceType) { // We don't index the resource type value. We just use the property on the root document.
 is visible and bar is a single non-computed property, which we know will be stored as NULL in the database. """ if (ir_set.expr is None and not ir_set.path_id.is_objtype_path() and ir_set.rptr
 config = copy.deepcopy(self.engine.config) provisioning = config.get(Provisioning.PROV) self._filter_unused_modules(config, provisioning)
 Args: parent: The parent to pass to QObjects which get initialized. """ _init_main_config(parent) _init_key_config(parent) _init_misc()
 using namespace iroha::consensus::yac; // TODO mboldyrev 13.12.2018 IR- Parametrize the tests with consistency models static const iroha::consensus::yac::ConsistencyModel kConsistencyModel = iroha::consensus::yac::ConsistencyModel::BFT;
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4431-SEA 1645547908 1514579834</p> <hr> <p>Varnish cache server</p> </body>
 """Checks and updates the necessary symbolizer options such as `external_symbolizer_path` and `symbolize_inline_frames`.""" if 'external_symbolizer_path' not in tool_options: llvm_symbolizer_path = get_llvm_symbolizer_path() if llvm_symbolizer_path: tool_options.update({ 'external_symbolizer_path': _quote_value_if_needed(llvm_symbolizer_path) }) if'symbolize_inline_frames' not in tool_options: tool_o
 import ( "encoding/json" "fmt" "io/ioutil" "os" "time" ) const (
 private function beacon_identify_data() { global $wp_version; $active_options  = array_filter( (array) get_option( WP_ROCKET_SLUG ) ); $active_options  = array_intersect_key( $active_options, $options_to_send ); $options_to_send = [ 'cache_mobile'            => 'Mobile Cache', 'do_caching_mobile_files' => 'Specific Cache for Mobile',
 } // cleanUpTable delete all documents from this collection after test. func cleanUpTable(coll *docstore.Collection, _ context.Context) error { return coll.Query().Delete(context.Background()) } func forEach(ctx context.Context, iter *ds.DocumentIterator, create func() interface{}, handle func(interface{}) error) error {
 pokemon.get('individual_stamina', 0) ]}) matched_pokemon.append(pokemon) continue if "player_stats" in inv_data: self.km_walked = inv_data.get("player_stats", {}).get("km_walked", 0)
 * extra file descriptor, the poll(2) call is straightforward * for this use case. */ pfd_read.fd = fd + 1; pfd_read.events = POLLIN;
 'create', help='Start a new inventory') create_inventory_parser.add_argument( '--import_as', metavar=('MODEL_NAME',), nargs='?', help='Import the inventory when complete, requires a model name') create_inventory_parser.add_argument( '--background',
 mountPointDevPathMap = make(map[string]string) mountPointToFsTypeMap = make(map[string]string) mountPointToMountArgsMap = make(map[string]string) // Go through each PartitionSetting for _, partitionSetting := range config.PartitionSettings {
 "}} ~~~~"; String creator = media.getCreator(); if (creator == null || creator.isEmpty()) { throw new RuntimeException("Failed to nominate for deletion"); } String creatorName = creator.replace(" (page does not exist)", ""); return pageEditClient.prependEdit(media.filename, fileDeleteString + "\n", summary)
 return fmt.Errorf("get application: %w", err) } svcs, err := o.store.ListServices(o.appName) if err!= nil { return err }
 bool EDPServer2::createSEDPEndpoints() { // Assert that there is PDP SERVER assert(dynamic_cast<PDPServer2*>(mp_PDP)); bool created = true;  // Return code
 logger.info("Starting to compile the library.") cmake_cmd = ["cmake", "../compile/"] if opencl_python_package: cmake_cmd.append("-D__OPENCL_PYTHON_PACKAGE=ON") if use_gpu: cmake_cmd.append("-DUSE_GPU=ON") if boost_root:
 def serialize_pipeline(pipeline): try: return pipeline.serialize() except: raise def DALIIteratorWrapper(pipeline = None, serialized_pipeline = None, sparse = [], shapes = [], dtypes = [], batch_size = -1, prefetch_queue_depth = 2, **kwargs):
 err_msg = "Frechet distances did not increase after path reversal" assert_(self.frech_matrix[1,2] >= self.frech_matrix[0,1], err_msg) def test_check_dendrogram_produced(self): err_msg = "Dendrogram dictionary object was not produced" assert_(type(self.plot_data[1]) is dict, err_msg)
.observeOn(AndroidSchedulers.mainThread()).subscribe(this::populatePlaces, throwable -> { progressBar.setVisibility(View.GONE); if (throwable instanceof UnknownHostException || throwable instanceof ConnectException) { showErrorMessage(getString(R.string.slow_internet)); } else { showErrorMessage(getString(R.string.error_loading_nearby)); } }); nearbyMapFragment.setBundleForUpdtes(bundle);
 ((lambda x, y: x ** y), "**")] def test_bool_disallowed(): error_msg = "[Ii]nput[s]? to arithmetic operator `[\S]*` cannot be [Aa]?[ ]?boolean[s]?. Consider using bitwise operator[s]?" for kinds in unary_input_kinds: for (op, _, op_desc, _, _) in math_function_operations: yield check_raises_re, kinds, np.bool_, 
 * * @return string HTML content. */ private function add_used_css_to_html( string $html, UsedCSS_Row $used_css ): string { $replace = preg_replace( '#</title>#iU', '</title>'. $this->get_used_css_markup( $used_css ),
 bool PosixFileSystemAccess::mkdirlocal(LocalPath& name, bool) { mode_t mode = umask(0); bool r =!mkdir(adjustBasePath(name).c_str(), defaultfolderpermissions); umask(mode); if (!r)
 } // LoadAppConfig allow developer to apply a config file func LoadAppConfig(configPath string, adapterName string, adapterConfigPath string) error { absConfigPath, err := filepath.Abs(configPath) if err!= nil { return err
 self.stage_type = stage_type self.scales = scales self.width = width delattr(self, self.norm2_name) def forward(self, x):
 case hotstuff.VoteCollectorStatusVerifying: verifyingProc, ok := proc.(hotstuff.VerifyingVoteProcessor) if!ok { return fmt.Errorf("while processing block %v, found that VoteProcessor reports status %s but has an incompatible implementation type %T", proposal.Block.BlockID, proc.Status(), verifyingProc) } if verifyingProc.Block().BlockID!= proposal.Block.BlockID { m.terminateVoteProcessing()
 hashObj = computeNameSpec if len(cr.Name) >= 52 { // Pass a unique struct for hashing so that names at or longer than 52 characters // receive a unique hash. Otherwise, orders will have truncated names with colliding // hashes, possibly leading to non-renewal. hashObj = struct { CRName string            `json:"certificateRequestName"`
 @SuppressWarnings("unchecked") static <T> Bucket<T> get(Type type, int numBuckets) { Preconditions.checkArgument(numBuckets > 0, "The number of bucket(s) must larger than zero,but is %s", numBuckets); switch (type.typeId()) { case DATE:
 const ( // ReconcilerName is the name of the reconciler ReconcilerName = "Deployment" controllerAgentName = "Deployment" // // controllerAgentName is the string used by this controller to identify // itself when creating events.
 credential, _ := azblob.NewSharedKeyCredential(accountName, accountKey) pipeline := azblob.NewPipeline(credential, azblob.PipelineOptions{ Telemetry: azblob.TelemetryOptions{ Value: useragent.UserAgent(), }, }) blobURL := makeBlobStorageURL(accountName)
 gym_latitude=fort.get('latitude'), gym_longitude=fort.get('longitude')) response_gym_details = self.api.call() fort['gym_details'] = response_gym_details.get('responses', {}).get('GET_GYM_DETAILS', None) user_data_cells = "data/cells-%s.json" % (self.config.username) with open(user_data_cells, 'w') as outfile:
 uint64_t nSigOps = 0; uint64_t nTx = 0; BOOST_FOREACH(const CTransaction& tx, block.vtx) { nTx++; nSigOps += GetLegacySigOpCount(tx); if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > nLargestTx) nLargestTx = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION); } if (fCon
 } from 'preact'; import { applyEventNormalization } from './events'; const CAMEL_PROPS = /^(?:accent|alignment|arabic|baseline|cap|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vector|vert|word|writing|x)[A-Z]/; // Some
 if b.IsInd { numBlocks, isTail = p.prefetchIndirectFileBlock( pre.ctx, req.ptr.ID, b, req.kmd, req.lifetime, pre.req.priority, isPrefetchNew, childAction) } else { isTail = true }
 [EditorBrowsable(EditorBrowsableState.Never), Obsolete("Use InvokeHandler<T> instead")] public bool InvokeHandlerNoData(int msgType) { return InvokeHandlerInternal(msgType, null); } public bool InvokeHandler(int msgType, NetworkReader reader) => InvokeHandlerInternal(msgType, reader); internal bool InvokeHandlerInternal(int msgType, NetworkReader reader) { if (messageHandlers.TryGetValue(msgType, out NetworkMessageDelegate msgDelegate)) {
 ) const ( externalIdSentinel = "\ufffenone" // UnknownCredentialStatus represents a credential that has an unknown
 else: gt_bboxes_ignore = np.zeros((0, 4), dtype=np.float32) if len(img_info['filename'].split(".")) == 2: seg_map = img_info['filename'].split(".")[0] + ".png" else: seg_map = img_info['filename'] ann = dict( bboxes=gt_bboxes,
 package org.apache.rocketmq.common.protocol.body; import org.apache.rocketmq.common.message.MessageQueue; import org.apache.rocketmq.common.protocol.body.QueryCorrectionOffsetBody; import org.assertj.core.api.Assertions; import org.assertj.core.api.Assertions.offset; import org.apache.rocketmq.common.protocol.body.ResetOffsetBody; import org.apache.rocketmq.remoting.protocol.RemotingSerializable; import org.junit.Test;
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4442-SEA 1645535463 1575075693</p> <hr> <p>Varnish cache server</p> </body>
 type CardanoNodeIpcMessage = { Started?: Array<any>, ReplyPort?: number, FInjects?: Array<string>, } type NodeArgs = Array<string>;
 // We don't have to look into the synopses for type queries, just // at the layout names. result_type result; for (auto& [part_id, part_syn] : synopses_) { for (auto& pair : part_syn) { // TODO: provide an overload for view of evaluate() so that // we can use string_view here. Fortunately type names are
 } @pytest.mark.usefixtures("maybe_run_functions_eagerly") @pytest.mark.parametrize("dtype", _DTYPES) def test_translate(dtype):
 out.writeObject(lastSnapshotFailure); out.writeObject(snapshotStats); out.writeObject(exportedSnapshotMapName); out.writeUTF(suspensionCause!= null? suspensionCause.toString() : null); out.writeBoolean(executed); out.writeLong(timestamp.get()); }
 "The amount of time since the last UpdateConsensus request from the " "leader."); METRIC_DEFINE_gauge_int32(tablet, is_raft_leader, "Is tablet leader", yb::MetricUnit::kUnits, "Keeps track whether tablet is leader" "1 indicates that the tablet is leader"); METRIC_DEFINE_histogram( tablet, dns_resolve_latency_during_update_raft_config,
 else: format_string = '{fn}(' + prev if fn_name in dir(np): format_string = _np.format_string + format_string else: format_string = prev+', {fn}' if args:
 /// <returns>Number of bytes written to the destination.</returns> public static int Encode(ReadOnlySpan<byte> source, Span<byte> destination) { Diagnostics.Debug.Assert(destination.Length >= source.Length); ref byte srcBytes = ref source.DangerousGetPinnableReference(); ref byte destBytes = ref destination.DangerousGetPinnableReference();
 use Symfony\Component\Lock\Store\FlockStore; /** * @deprecated Deprecated since Contao 4.7, to be removed in Contao 5.0; use *             the Symfony Lock component instead */ abstract class AbstractLockedCommand extends ContainerAwareCommand {
 for i, r in enumerate(rest_results):  # user-added return values rest_results[i] = images_to_levels(r, num_level_anchors) return (labels_list, label_weights_list, bbox_targets_list, bbox_weights_list, num_total_pos, num_total_neg) + tuple(rest_results) def loss_single(self, cls_score, bbox_pred, anchors, labels, label_weights, bbox_targets, bbox_weights, num_total_samples):
 :param obj: :rtype: bool """ dumpable_types = (cls.TYPES, JSONDumpable, dict, str, int, float, bool, type(None)) return isinstance(obj, dumpable_types) @staticmethod
 break; } } }
 var array = new byte[1024]; OwnedBuffer<byte> owned = array; var span = owned.Span; var slicedSpan = owned.GetSpan(100, 10); owned.Dispose(); Assert.Throws<ObjectDisposedException>(() => { var spanDisposed = owned.Span; }); Assert.Throws<ObjectDisposedException>(() => { var slicedSpanDisposed = owned.GetSpan(100, 10); });  owned = new OwnedBuffer<byte>(array); Assert.Throws<ObjectDi
 public function matchesSubject(PrivilegeSubjectInterface $subject) { if ($subject instanceof NodePrivilegeSubject === false && $subject instanceof MethodPrivilegeSubject === false) { throw new InvalidPrivilegeTypeException(sprintf('Privileges of type %s only support subjects of type %s or %s, but we got a subject of type: "%s".', AbstractNodePrivilege::class, NodePrivilegeSubject::class, MethodPrivileg
 return this.waitAndClick('.WalletRecoveryPhraseEntryDialog.dialog_button'); }); this.Then(/^I should not see the create wallet recovery phrase entry dialog$/, async function () { await this.client.waitForVisible('.WalletRecoveryPhraseEntryDialog', null, true); const result = await this.client.executeAsync(function(done) { daedalus.stores.wallets.walletsRequest.invalidate().execute().then(done); });
 const proxiesByHostId = {}; function parsePowerboxDescriptorList(list) { return list.map(packedDescriptor => Capnp.parse(Powerbox.PowerboxDescriptor, new Buffer(packedDescriptor, "base64"), { packed: true }));
 RedirectURL = model.BrowserRedirect, FullNotifications = true }, store, HttpContext.Request.GetAbsoluteRoot(), cancellationToken: cancellationToken); var uriBuilder = new UriBuilder(invoice.Data.Url); var paramValues = HttpUtility.ParseQueryString(uriBuilder.Query); paramValues.Add("lang", model.Language); uriBuilder.Query = paramValues.ToString(); return Redirect(uriBuilder.Uri.AbsoluteUri); }
 } private Optional<String> determineKind(String optionContext) { return Arrays.stream(optionContext.split("\\s+")).filter(s -> s.startsWith("existing")).map(s -> s.substring("existing-".length())).findFirst();
 render() { const { value, currencyCode, classes, locale } = this.props; if (!locale) { locale = 'en-US'; }  const parts = patches.toParts.call( new Intl.NumberFormat(locale, { style: 'currency',
 } return result; } } class PlayableException extends Exception {
 [MethodImpl(MethodImplOptions.AggressiveInlining)] internal void Increment(object obj) { if (_first == 0) { // No space left, we must grow the table. var oldLength = _items.Length;
 new ThreeColumnRecord(1, "b c", "data"), new ThreeColumnRecord(2, "ab", "data")); File location = temp.newFolder("partitioned_table"); String tableName = "external_table"; SparkSession spark = SparkSession.builder().enableHiveSupport().getOrCreate(); spark.createDataFrame(records, ThreeColumnRecord.class)
 // Parse the search parameters. try { // If the search parameter is invalid, then throw an exception. if (string.IsNullOrWhiteSpace(query.Item1)) throw new Exception("Search parameter is invalid.");  searchParams.Add(query.Item1, query.Item2); } catch (Exception ex)
 capping_ace = resource_filename(__name__, "data/capping/ace.pdb") capping_nma = resource_filename(__name__, "data/capping/nma.pdb") contacts_villin_folded = resource_filename(__name__, "data/contacts/villin_folded.gro.bz2") contacts_villin_unfolded = resource_filename(__name__, "data/contacts/villin_unfolded.gro.bz2") contacts_file = re
 <?php $course_id = Sensei()->lesson->get_course_id( get_the_ID() ); if ( Sensei_Utils::is_preview_lesson( get_the_ID() ) &&! Sensei_Utils::user_started_course( $course_id, get_current_user_id() )  ) { echo Sensei()->frontend->sensei_lesson_preview_title_tag( $course_id ); }?> </a>
 * @author Remy Perona * * @param string $file Absolute path to the file. * @param string $url URL of the file. */ $file = apply_filters( 'rocket_url_to_path', $file, $url ); if (! rocket_direct_filesystem()->is_readable( $file ) ) { return false;
 else: self[self.SUCCESSES] += 1 self[self.RESP_TIMES][r_time] += 1 self[self.RESP_TIMES_HDR].record_value(int(round(r_time * 1000, 3))) if byte_count is not None: self[self.BYTE_COUNT] += byte_count
 // -> returns serialized data of everything dirty,  null if nothing was dirty internal byte[] OnSerializeAllSafely(bool initialState) { using (NetworkWriter onSerializeWriter = NetworkWriter.GetPooledWriter()) { if (networkBehavioursCache.Length > 64) { Debug.LogError("Only 64 NetworkBehaviour components are allowed for NetworkIdentity: " + name + " because of the dirtyComponentMask");
 } func (repo *nodeAttestorRepository) Versions() []catalog.Version { return []catalog.Version{nodeAttestorV0{}, nodeAttestorV1{}} } func (repo *nodeAttestorRepository) LegacyVersion() (catalog.Version, bool) {
 // See the License for the specific language governing permissions and // limitations under the License. // Package paramstore provides a key/value store for parameters. package paramstore import (
 Args: index: The index of the tab to get a size hint for. ellipsis: Whether to use ellipsis to calculate width instead of the tab's text. Forced to False for pinned tabs. Return: A QSize of the smallest tab size we can make. """
 * Check wiped instead of s2n_stuffer_data_available to differentiate between the initial call * to s2n_handshake_write_io and a repeated call after an EWOULDBLOCK. */ const int handshake_io_wiped = s2n_stuffer_is_wiped(&conn->handshake.io); if (handshake_io_wiped && record_type == TLS_HANDSHAKE) { GUARD(s2n_handshake_write_header(&
 void completeJob(MasterContext masterContext, long completionTime, Throwable error) { // the order of operations is important. long jobId = masterContext.jobId(); String coordinator = nodeEngine.getNode().getThisUuid(); jobRepository.completeJob(jobId, coordinator, completionTime, error); if (masterContexts.remove(jobId, masterContext)) { logger.fine(masterContext.jobIdString() + " is completed"); } else { MasterContext ex
 */ /* HIT_START * BUILD: %t %s../../test_common.cpp EXCLUDE_HIP_PLATFORM nvcc,hip * TEST: %t * HIT_END */
 class GardensController < ApplicationController before_action :authenticate_member!, except: %i(index show) after_action :expire_homepage, only: %i(create delete) load_and_authorize_resource respond_to :html, :json
 locale=locale, entity=t.entity, translation=t, project=project, ) for t in Translation.objects.filter(pk__in=changed_translation_pks).prefetch_related('entity__resource')] TranslationMemoryEntry.objects.bulk_create(memory_entries)
 class DistOptimizerHook(OptimizerHook): """Deprecated optimizer hook for distributed training... note:: Deprecated since 2.4.0, use `DistributeOptimizerHook` instead. """ pass
 } if _type == TypeNoNotificationSent { // no CMID for no notification sent r.subject.classifier = "no immediate rule" break } var cmType contactmethod.Type
 private string GetFullPath(string path) { var relativePath = (path?? string.Empty).Trim('/'); var parentPath = (this.parentModule.ModulePath?? string.Empty).Trim('/'); if (string.IsNullOrEmpty(parentPath)) {
 Testnet  bool Localnet bool DiscoveryAPIAddress string BrokerAddress       string
 // Projection defines the set of properties to return. It will default to ProjectionFull, // which returns all properties. Passing ProjectionNoACL will omit Owner and ACL, // which may improve performance when listing many objects. Projection ProjectionType } // attrToFieldMap maps the field names of ObjectAttrs to the underlying field
 user.mentor_discussions.update_all(mentor_id: User::GHOST_USER_ID) user.mentor_discussion_posts.update_all(user_id: User::GHOST_USER_ID) user.mentor_testimonials.update_all(mentor_id: User::GHOST_USER_ID) end def reset_associations!
 // exchange headers if err := sendHeaders(ctx, headers, stream); err!= nil { _ = stream.Reset() s.logger.Debugf("send headers %s: close stream %v", peerID, err) return nil, err }
 default_ip = '192.168.1.1' altern8_ip = '10.1.2.3' default_port = 80 altern8_port = 8008 context "RHEL 6 with only required facts and default parameters" do
 Perm string `json:"perm"` OtherPerm string `json:"otherperm"` // RotatePerm indicates whether the log file is rotated or not. RotatePerm bool `json:"rotateperm"`  // fileNameOnly, suffix string // like "project.log", project is fileNameOnly and.log is suffix }
 expected = assumed_iteration + (params_fit['early_stopping_rounds'] if eval_set_name!= 'training' and assumed_iteration!= gbm.best_iteration_ else 0) assert expected == actual if eval_set_name!= 'training': assert assumed_iteration == gbm.best_iteration_ else: assert gbm.n_estimators == gbm.best_iteration_ X, y = load_boston(return_X_y=True) X_train, X_test, 
 } if (proposedBlock.getHeader().getNumber()!= signedPayload.getPayload().getRoundIdentifier().getRoundNumber()) { LOG.info("Invalid proposal/block - block number does not align with message sequence."); return false; }
 // this works because value types cannot be derived // if it is a reference type (for example IMessageBase), // ask the message for the real type int msgType = MessagePacker.GetId(typeof(T).IsValueType? typeof(T) : msg.GetType()); MessagePacker.Pack(msg, writer); ArraySegment<byte> segment = writer.ToArraySegment();
 svc.BackendServiceConfig.ImageConfig.Build.BuildArgs.Dockerfile = stringP(props.Dockerfile) svc.BackendServiceConfig.ImageConfig.Port = uint16P(props.Port) svc.BackendServiceConfig.ImageConfig.HealthCheck = props.HealthCheck svc.parser = template.New() return svc }
 protected $code = 404; protected $message = 'Not found.'; protected $title = '404 Not Found'; protected $description = 'The requested resource could not be found. Please verify the URI and try again.'; }
 if self.orig_bases: # update __orig_bases__ if needed code.putln("if (%s!= %s) {" % (self.bases.result(), self.orig_bases.result())) code.putln('PyDict_SetItemString(%s, "__orig_bases__", %s);' % ( self.dict.result(), self.orig_bases.result())) code.putln("}") else: code.putln("}") self.orig_bases.generate_disposal_code(code) 
 void Neighbor::print_pairwise_info() { int i,m; char str[SNPRINTF_BUFFER_SIZE]; NeighRequest *rq; FILE *out;
 }, Format: DefaultLogFormat, }) } else { // Path scope, output file, and maybe a format specified switch len(args) { case 2: // default log format format := DefaultLogFormat if len(args) > 2 {
 // Not checking resource as the underlying map of our Resource makes // ordering impossible to guarantee on the output. The Resource // transform function has unit tests that should suffice. expectedSpan := tracepb.Span{ TraceId:                []byte("00010203"), SpanId:                 []byte("fffefffd"), ParentSpanId:           []byte("efeeeeec"),
 return newSystemErrorWithCause(err, "init seccomp") } } if err := syscall.Exec(name, l.config.Args[0:], os.Environ()); err!= nil { return newSystemErrorWithCause(err, "exec user process") }
 componentErrs = append(componentErrs, field.Invalid(field.NewPath("schematic"), app, err.Error())) } if v := app.GetAnnotations()[oam.AnnotationAppRollout]; len(v)!= 0 && v!= "true" { componentErrs = append(componentErrs, field.Invalid(field.NewPath("annotation:app.oam.dev/rollout-template"), app, "the annotation value of rollout-template must be true")) } r
 if field.Modifier == parser.Required && g.isDartPrimitive(field.Type) { fName := toFieldName(field.Name) contents += fmt.Sprintf(tabtab+"if(!__isset_%s) {\n", fName) contents += fmt.Sprintf(tabtabtab+"throw new thrift.TProtocolError(thrift.TProtocolErrorType.UNKNOWN, \"Required field '%s' is not present in struct '%s'\");\n", fName, s.Name) conte
 */ public function hasAllAllowed(): bool { return $this->assetType === AssetType::ALL; } /**
 // It calls the callback right away with "false" even if the document hasn't be print yet. cleanup(); if (!success && reason!== 'cancelled') reject(new Error('Could not print', reason)); resolve(); } else { reject(new Error('Could not print', reason)); } }); }
 * Helper to check all permissions defined on a plugin and see the state of each. * * @since 3.0.0 * @return a map containing the alias and the permission state */ public Map<String, PermissionState> getPermissionStates() { return bridge.getPermissionStates(this);
 try { return LOCAL_DATE_OF_YEAR_MONTH_DAY.invoke(null, year, month, day); } catch (InvocationTargetException e) { if (month == 2 && day == 29 && year < 0) { // If proleptic Gregorian doesn't have such date use the next day return LOCAL_DATE_OF_YEAR_MONTH_DAY.invoke(null, year, 3, 1); }
 } }
'mysql' => [ 'driver'    =>'mysql', 'host'      => env('DB_HOST', 'localhost'), 'database'  => env('DB_DATABASE', 'forge'), 'username'  => env('DB_USERNAME', ''), 'password'  => env('DB_PASSWORD', ''), 'charset'   => 'utf8', 'collation' => 'utf8_unicode_ci',
 $id = $article->pid; } $adapter = $this->framework->getAdapter(ReadAdapter::class); if (null!== $adapter->findByPk($id)) {
 if # Driver 2.13.0+ defined?(Mongo::Error::SessionsNotSupported) && Mongo::Error::SessionsNotSupported === ex || # Legacy drivers ex.message == Mongo::Session::SESSIONS_NOT_SUPPORTED then
 setHint(ellipsizeToWidth(hint)); } } } private CharSequence ellipsizeToWidth(CharSequence text) {
 app.on('ready', async () => { // Make sure this is the only Daedalus instance running per cluster before doing anything else try { await acquireDaedalusInstanceLock(); } catch (e) { const dialogTitle = 'Daedalus is unable to start!'; const dialogMessage = 'Another Daedalus instance is already running.';
 if(o->type==JX_OP_CALL && jx_istype(o->left,JX_SYMBOL)) { const char *name = o->left->u.symbol_name; if(!strcmp("select",name) ||!strcmp("project",name) ||!strcmp("like",name) ||!strcmp("expression",name)) { struct jx *r = jx_array_shift(o->right); r = jx_string(jx
 using System.Linq; using System.Text.Json; using System.Threading.Tasks; using Microsoft.Health.Fhir.Core.Features.ValueSet; using Microsoft.Health.Fhir.Shared.Core.Features.Search; namespace Microsoft.Health.Fhir.Api.Features.Resources.Bundle
 // Service handles identities type Service struct { *sda.ServiceProcessor Identities map[string]*Storage skipchain *skipchain.Client path      string } // Storage stores one identity together with the skipblocks type Storage struct { Latest   *Config Proposed *Config
 httpMethod.initEntity(requestHttpEntity.getBody(), headers.getValue(HttpHeaderConsts.CONTENT_TYPE)); } HttpRequestBase requestBase = httpMethod.getRequestBase(); configure(requestBase, requestHttpEntity.getHttpClientConfig()); return requestBase; }
 Address     string Mux         *http.ServeMux MuxPattern  string GrabHeaders map[string]struct{} } type inboundTest struct {
 }, }, wantedError: fmt.Errorf("unrecognized path segment pattern ContainerDefinition[0][0]. Valid path segment examples are \"xyz[0]\", \"xyz[-]\" or \"xyz\""), }, "error when invalid rule path with bad sequence index": { inRules: []Rule{
 stateOffPolResult      int16 = 16 stateOffSrcPort        int16 = 20 stateOffDstPort        int16 = 22 stateOffPostNATDstPort int16 = 24 stateOffIPProto        int16 = 26 stateOffICMPType       int16 = 22 stateOffICMPCode       int16 = 23 // Compile-time check that IPSetEntrySize hasn't changed; if it ch
 flags.mark_flag_as_required('organization_id') # TODO(brianj): Split this up into smaller functions. def main(unused_argv=None): """Run the scanner.""" logger = LogUtil.setup_logging(__name__)
 super.onStart(); EventBus.getDefault().register(this); loadSubscriptions(); }
 '''A superclass for reading [f]ixed-column type [f]lat-[f]ile records.''' __docformat__ = """restructuredtext en"""
 io_thread_pool->launch_pinned_threads(1, 1); std::set<std::string> active_data_fields = {"samples"}; active_data_fields.insert(GENERATE(std::string("labels"), std::string("responses"))); auto s = GENERATE(range(1, 11)); El::Int num_samples = s; std::vector<int> dims = {s,s};;
 if (address!= null) { this._refreshAddresses(); runInAction('set last generated address and reset error', () => { this.lastGeneratedAddress = address; this.error = null; }); }
 USER = 4 CLASS_SCHEMA = ma.Schema({ 'type':'string', 'validators': [{ 'id': 'is_regex_matched','regex_pattern': r'^[A-Za-z][A-Za-z0-9_]*$' }] })  wildcard_string = '[USER INPUT THIS UNBOUNDED FACT/RELATIONSHIP]' class FactSchema(ma.Schema):
 // Execute displays the status of the pipeline. func (o *pipelineStatusOpts) Execute() error { err := o.initDescriber(o) if err!= nil { return fmt.Errorf("describe status of pipeline: %w", err)
 //         uid: 7d3897c2-ce27-4144-883a-e1b5f89bd65a func certificateDeleted(queue workqueue.RateLimitingInterface) func(obj interface{}) { return func(obj interface{}) { crt, ok := obj.(*cmapi.Certificate) if!ok { runtime.HandleError(fmt.Errorf("not a Certificate object: %#v", obj)) return } ref := crt.GetControl
 */ public function init() { add_action( 'add_meta_boxes', array( $this, 'add' ) ); if ( is_admin() ) { add_action( 'init', array( $this, 'define_controls' ) ); add_action( 'init', array( $this, 'load_controls' ) ); add_action( 'admin_enqueue_scripts', array( $this, 'enqueue' ) ); } add_action('sav
 self.dbutils.execute(self.cursor, sql, args) def executemany(self, sql, args): """Execute many SQL commands. """ if os.name == "java": sql = sql.replace("%s", "?")
 func (c *collection) RunActions(ctx context.Context, actions []*driver.Action, opts *driver.RunActionsOptions) driver.ActionListError { errs := make([]error, len(actions)) // Run the actions concurrently with each other. run := func(as []*driver.Action) { for _, a := range as { a := a t.Acquire()
 self._widget.page().findText(text, flags, wrapped_callback) @pyqtSlot(QWebEngineFindTextResult) def _on_find_finished(self, find_text_result): """Unwrap the QWebEngineFindTextResult and pass it along.""" self.search_match_changed.emit(find_text_result.activeMatch(), find_text_result.numberOfMatches()) def search(self, text, *, ignore_case=usertypes.IgnoreCase.never, reverse=False, wr
 Set<Module> modules = kompile.parseModules(compiledDefinition, defModuleNameUpdated, specModuleNameUpdated, absSpecFile, backend.excludedModuleTags(), readOnlyCache); Map<String, List<Module>> group = modules.stream().collect(Collectors.groupingBy(Module::name)); Map<String, Module> modulesMap = group.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, x -> x.getValue().get(0))); Definition parsedDefinition = com
 ConsumeQueue logicQueue = this.findConsumeQueue(topic, queueId); if (logicQueue!= null) { SelectMappedBufferResult result = logicQueue.getIndexBuffer(consumeQueueOffset); long storeTime = getStoreTime(result); if (storeTime!= 0) { storeTime = result.getBuffer().getLong(result.getOffset()); } } return -1;
 _exportJobConfiguration = exportJobConfiguration.Value; _exportJobTaskFactory = exportJobTaskFactory; _logger = logger; } public async Task ExecuteAsync(CancellationToken cancellationToken) { var runningTasks = new List<Task>(); int _delayBeforeNextPoll = _exportJobConfiguration.JobPollingFrequency; while (!cancellationToken.IsCancellationRequested) {
 import asyncio from argparse import ArgumentParser import numpy as np import os import requests from mmdet.apis import (async_inference_detector, inference_detector, init_detector, show_result_pyplot) from mmdet.utils.config import load_config from mmdet.utils.logger import setup_logger from mmdet.utils.io import get_host from mmdet.utils.logger import get_logger from mmdet.utils.path_helper import PathHelper from mmdet.utils.runne
 { endpoint: Exercism::Routes.api_solution_url(solution.uuid, sideload: [:iterations]), options: { initialData: { iterations: solution.iterations.includes(:track, :exercise, :files, :submission). order(id: :desc). map { |iteration| SerializeIteration.(iteration, sideload: %i[files automated_feedback]) } }, initialDataUpdatedAt: Time.current.to_i } } end
 } @Override public List<String> struct(Types.StructType readStruct, Iterable<List<String>> fieldErrorLists) { Preconditions.checkNotNull(readStruct, "Evaluation must start with a schema."); if (!currentType.isStructType()) {
 @foreach ($assets as $asset) @php if($snipeSettings->show_archived_in_list!= 1 && $asset->assetstatus->type === 'Archived'){ continue; } @endphp
 var client = webappUtils.createWebappManagementClient(subscription); var progress = cli.interaction.progress(util.format($('Stopping webapp %s'), name)); try { if (Boolean(options.slot)) { client.sites.stopSiteSlot(resourceGroup, name, options.slot, _); log.info(util.format('Webapp slot %s/%s has been stopped', name, options.slot)); } else { client.sites.stopSite(resourceG
 $built = $this->generate_select_box($name.'_day', $days, (int)$day, array('id' => $name.'_day'))." &nbsp; "; $built.= $this->generate_select_box($name.'_month', $months, (int)$month, array('id' => $name.'_month'))." &nbsp; "; $built.= $this->generate_numeric_field($name.'_year',
 #include <fstream> //Boost #include "HdfsConnection.h" #include "HdfsDevice.hpp"
 << "DefaultPipeline::doCollisionReset" ; // clear all contacts if (contactManager) { const helper::vector<Contact::SPtr>& contacts = contactManager->getContacts(); for (const auto& contact : contacts)
 { "Sid":"AuthorizeAccount", "Effect":"Allow", "Resource":"$identity", "Principal":{ "AWS":[ "$other_aws_account" ] }, "Action":[ "SES:SendEmail",
 if (node->data.scalar[0] == '\0') { self->vars->mruby_handler_path = h2o_iovec_init(NULL, 0); } else { self->vars->mruby_handler_path = h2o_mruby_register(ctx->pathconf, self->vars, node->data.scalar, strlen(node->data.scalar)); } return 0;
.catch((e) => assertIsError(e)); }, testLoginTowardsMisbehavingServer() { const username = uuid(); // Try authenticating towards a server thats clearly not ROS
 Parameters ---------- row_labels : list-like of ints, optional Numeric indices of rows to select. col_labels : list, optional Indices of columns to select. col_positions : list-like of ints, optional Numeric indices of columns to select.
 ERR_ENTRY(S2N_ERR_INVALID_X509_EXTENSION_TYPE, "Invalid X509 extension type") \ ERR_ENTRY(S2N_ERR_INSUFFICIENT_MEM_SIZE, "The provided buffer size is not large enough to contain the output data. Try increasing the allocation size.") \ ERR_ENTRY(S2N_ERR_KEYING_MATERIAL_EXPIRED, "The lifetime of the connection keying material has exceeded the limit. Perform a new full handshake.") \ ER
 ) @click.option( '--blotter', type=str, default='default', help="The blotter to use.", show_default=False,
 return err } if addr.PortRangeSize()!= 1 { return fmt.Errorf("multiple addresses (upstream must map to only one address): %v", addr) } // create or get the host representation for this upstream
 return nil, err } if length > uint(cap(buf))+crypto.Extension { return nil, fmt.Errorf("buf is too small to hold %d bytes", length) } if tpe!= t {
 /* UDP multicast network layer specific internal data */ typedef struct { int ai_family;                    /* Protocol family for socket. IPv4/IPv6 */ struct sockaddr_storage ai_addr; /* https://msdn.microsoft.com/de-de/library/windows/desktop/ms740496(v=vs.85).aspx */ struct sockaddr_storage intf_addr; UA_UInt32 messageTTL; UA_Boolean enableLoopback; UA_Boolean enableReuse;
 { bool res = false; for (int i = 0; i < InnerIterationCount; i++) res = myObj is ICollection<MyClass2>; // The JIT could have CSEd the whole loop, but it didn't. return res; }
 // before attempting to write a new value. And it does the normal optimistic locking that Commit does, assuming the // pessimistic locking passes. After this method runs, the two datasets given in |commitDS and |workingSetDS| are both // updated in the new root, or neither of them are. CommitWithWorkingSet(ctx context.Context, commitDS, workingSetDS Dataset, commit types.Value, workingSetSpec WorkingSetSpec, 
 Args: message (str): error message """ raise self(message) super(Error, self).__init__(message)
 * the multiples. */ void sieve(uint32_t N, bool *isprime) { isprime[0] = false; isprime[1] = false; for (uint32_t i = 2; i <= N / 2; i++) { if (isprime[i]) { for (uint32_t j = i * 2; j <= N; j = j + i) { isprime[
 }).catch(err => err); }; __embarkENS.lookup = function (address) { if (!this.ens) return;  if (address.startsWith("0x")) address = address.slice(2); let node = namehash.hash(address.toLowerCase() + ".addr.reverse");
 // Options are optional arguments to the OpenCollection functions. type Options struct { // The name of the field holding the document revision. // Defaults to "RevisionField". RevisionField string }
 // NewSubscription creates a Subscription from a driver.Subscription // and a function to make a batcher that sends batches of acks to the provider. // NewSubscription is for use by provider implementations. func NewSubscription(d driver.Subscription, newAckBatcher BatcherMaker) *Subscription { ctx, cancel := context.WithCancel(context.Background()) s := &Subscription{ driver: d,
 mediaAdapter.notifyItemChanged(toggleSelectPhoto(m)); editMode = true; } else selectAllPhotosUpTo(getImagePosition(m.getPath()),mediaAdapter); } else if (fav_photos &&!all_photos) { if (!editMode) { mediaAdapter.notifyItemChanged(toggleSelectPhoto(m));
 */ private function array_filter_walker( $values = array() ) { if (! is_array( $values ) ) { return $values; }  foreach ( $values as $k => $v ){ if ( is_object( $v ) ) { // Skip objects
 }); } async setupEmbarkJS() { await this.events.request2("embarkjs:console:register",'storage','swarm', 'embarkjs-swarm'); this.events.request("embarkjs:plugin:register",'storage','swarm', 'embarkjs-swarm'); this.events.on("storage:started", () => { let config = this.embark.config.storageConfig.dappConnection || [];
 * @param \Closure $callback a closure to be invoked when the corresponding event was triggered * @return void */ public function on($eventIdentifier, \Closure $callback): void; }
 Parameters ----------- obj : AtomGroup or Universe or Timestep """ try: from rdkit import Chem
 return SUPPORTED_TOKENS; }  @Override public String getTokenDescription() { return "Any token supported by a Realm module"; } }
 msg_deprecated("SofaComponentAllCommonComponents") << "This plugin was renamed into SofaComponentAll. Backward compatiblity will be stopped at SOFA v20.06"; #endif sofa::component::init(); } const char* getModuleName()
 if err!= nil { return err } if err := c.storageClient.Create(ctx, storageKey(c.config.Token), data); err!= nil { if err.Error() == "key exists" { logrus.Warnln("Bootstrap key exists. Please follow documentation to on updating a node after restore.") return nil
 >>> idx = torch.Tensor([0,1,2]).to('cuda') >>> output = feats[idx] For the multi-GPU operation, to allow multiple GPUs to access the original CPU tensor ``feats`` using UnifiedTensor, one can do the following: >>> feats = torch.rand((128,128))
 # common profile for archiver/compression tools blacklist ${RUNUSER} include disable-common.inc include disable-devel.inc
 # Skip the current resource if it's in the excluded_resources list. excluded_resources = visitor.config.variables.get( 'excluded_resources', {}) if resource_name in excluded_resources: return self._visitor = visitor
 $csrfOk = true; } if (substr($ip, -1) === "*") { // ip range $ip = substr($ip, 0, -1). '%'; $userlist = $psdb->query("SELECT `username`, `userid`, `banstate` FROM `ntbb_users` WHERE `ip` LIKE?", [$ip]); } else { $userlist = $psdb->query("SELEC
 // Append the containing dir to the PATH auto current_path = std::getenv("PATH"); std::string new_path = toString(dummy_dir) + ":" + current_path; setenv("PATH", new_path.c_str(), 1); setenv("PathWhenSymlinkInPath_Setup", "true", 1); // Locate the file with only its name absolute_path_to_dummy = findInSystemPath(dummy_file_path.filename()); EXPE
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4431-SEA 1645521449 4232245673</p> <hr> <p>Varnish cache server</p> </body>
 shard_outputs = [] for pipeline in pipelines: pipe_outputs = pipeline.run() shard_outputs.append(tuple( test_utils.to_array(result) for result in pipe_outputs)) results.append(tuple(shard_outputs)) return results
 bool transactions = (numDetails & 0x08)!= 0; bool purchases = (numDetails & 0x10)!= 0; bool sessions = (numDetails & 0x20)!= 0; client->getaccountdetails(request->getAccountDetails(), storage, transfer, pro, transactions, purchases, sessions); break;
 static class PositionReader implements ParquetValueReader<Long> { private long rowOffsetInCurrentRowGroup = -1; private long rowGroupRowOffsetInFile; @Override public Long read(Long reuse) { rowOffsetInCurrentRowGroup = rowOffsetInCurrentRowGroup + 1; return rowGroupRowOffsetInFile + rowOffsetInCurrentRowGroup; } @Override
 raise errors.SchemaError(f'unsupported collection type {t!r}') elif isinstance(t, s_objtypes.ObjectType): if t not in view_shapes: raise errors.SchemaError(f'object type {t!r} is not in a view') self.schema, mt = t.material_type(self.schema) base_type_id = mt.id
 { private readonly Memory<T> memory; internal DenseTensor(Memory<T> fromMemory, bool reverseStride = false) : base(GetDimensionsFromMemory(fromMemory), reverseStride) { // copy initial array var backingArray = new T[fromMemory.Length];
 Claims claims = Jwts.claims().setSubject(userName); return Jwts.builder().setClaims(claims).setExpiration(validity).signWith(Keys.hmacShaKeyFor(authConfigs.getSecretKey()), SignatureAlgorithm.HS256).compact(); } /**
 file """ if "TTS" not in raw_audio_settings: return _convert_text_to_speech_configs(raw_audio_settings) return [ TextToSpeechSettings(tts["Provider"], tts["Voice"], tts["Engine"])
 ## Load our local_settings try: SETTINGS_MODULE = os.environ['GRAPHITE_SETTINGS_MODULE'] except KeyError: SETTINGS_MODULE = 'graphite.local_settings' try:
 "but got a vote for %d", c.view, vote.View) } // TODO: add handling of double votes here. If we don't know anything about block // proposal we might delay our decision, but still double votes has to be tracked. // Use c.doubleVoteDetector for this purpose. _ = c.pendingVotes.AddVote(vote)
 } return res.IterateActions(func(action *design.ActionDefinition) error { name := codegen.Goify(action.Name, false) if as, ok := actions[name]; ok { actions[name] = append(as, action) } else {
 expected = append(expected, `valuerecorder_sum{A="B",C="D",R="V"} 19.6`) compareExport(t, exporter, expected) compareExport(t, exporter, expected) }
 using UnityEditor; using UnityEngine; namespace Mirror.Editor { public static class EditorHelper {
 if(!strmatch(tok,"ImageX:")) { #ifndef _NO_LIBPNG if(!strmatch(tok,"image/png")) { merror("ImageX: format not supported"); return; } ImageList *img = SFDGetImagePNG(sfd); if (!u->u.state.images )
 hasher := sha256.New() _, err := hasher.Write([]byte(suffix)) if err!= nil { panic(err) } hash := base64.RawURLEncoding.EncodeToString(hasher.Sum(nil)) charsLeftForHash := maxLength - 1 - prefixLen
 return this.set('disableCustomCss', val.toString(), false); } return this.get('disableCustomCss', false) === 'true'; } /**
 close  func() } func (h *harness) MakeCrypter(ctx context.Context) (driver.Crypter, error) { return &crypter{ keyID: &KeyID{ ProjectID: projectID, Location:  location,
 init_func=init_zero_func) kvclient.register_push_handler('data_3', add_push) kvclient.map_shared_data(partition_book=gpb) id_tensor = F.tensor([0,2,4], F.int64) data_tensor = F.tensor([[6.,6.],[6.,6.],[6.,6.]], F.float32) time.sleep(kvclient.client_id + 1) print("add...")
 HTTPProxy            cli.URL      `help:"A URL to use as a proxy server for downloads. Only applies to internal ones - e.g. self-updates or remote_file rules."` HashFunction         string       `help:"The hash function to use internally for build actions." options:"sha1,sha256"` ExitOnError          bool         `help:"True to have build actions automatically fail on error (essentially passing -e to the sh
 np_t[0:2, 1:3, 0:4][0:1, 0:2, 2:3]) # Slice a zero-dim tensor with pytest.raises(RuntimeError, match="Cannot slice a scalar (0-dim) tensor."): o3c.Tensor.ones((), device=device)[:] with pytest.raises(RuntimeError, match="Cannot slice a scalar (0-dim) tensor
 } // Add a junk file, should be ignored FSDataOutputStream out = fs.create(new Path(dir, "junk")); out.writeChars("ABCDEFG\n"); out.close();
 } if md.TypeForKeying() == tlf.TeamKeying { return nil, kbfscrypto.VerifyingKey{}, false, nil } session, err := fbo.config.KBPKI().GetCurrentSession(ctx)
 } node.getPermissioningConfiguration().flatMap(PermissioningConfiguration::getLocalConfig).ifPresent( permissioningConfiguration -> { if (permissioningConfiguration.isNodeWhitelistEnabled()) {
 return console_handler, ram_handler def _init_formatters(level, color, force_color, json_logging): """Init log formatters.
 ] ]) async def test_edgeql_scope_tuple_08(self): await self.assert_query_result(r''' # compare to test_edgeql_scope_filter_03 to see how it # works out without tuples
 else { notRelevantChanges.add_sequence_number(seq_num, remoteReader); remoteReader->set_change_to_status(seq_num, UNDERWAY, false); } }; remoteReader->for_each_unsent_change(unsentChangeProcess); } if (m_pushMode)
 { $awaitingusers = $cache->read('awaitingactivation'); if(isset($awaitingusers['time']) && $awaitingusers['time'] < TIME_NOW + 86400) { $cache->update_awaitingactivation(); $awaitingusers = $cache->read('awaitingactivation');
 The time difference between frames (ps).  If :attr:`time` is set, then `dt` will be ignored. filename: string, optional The name of the file from which this instance is created. If None, then the filename will be assumed to be None, i.e. this instance is created from memory. """ super(MemoryReader, self).__init__()
 # @since 2.2.6 def read_with_one_retry yield rescue Error::SocketError, Error::SocketTimeoutError yield end
 * <p>Nested transactions such as creating a new table may fail. Those failures alone do * not necessarily result in a failure of the catalog-level transaction. * * @see #close(boolean) */ public interface TransactionalCatalog extends Catalog, AutoCloseable {
 { LogManager.Configuration = CreateConfigurationFromString(@" <nlog> <targets> <target name='debug' type='Debug' layout='${message:padding=-3:padcharacter=x:fixedlength=true:alignmentOnTruncation=left}' /> </targets> <rules> <logger name='*' minlevel='Debug' writeTo='debug' /> </rules>
 `num_outputs` : int, optional If specified, denotes the number of TensorLists that are produced by the source function. If set, the operator returns a list of ``DataNode`` objects, otherwise a single ``DataNode`` object is returned. Keyword Args ------------
 please use format(motif, format_spec). """ warnings.warn( """ Motif.format has been deprecated, and we intend to remove it in a future release of Biopython. Instead of motif.format(format_spec), please use format(motif, format_spec). """, BiopythonDeprecationWarning, ) return self.__format__(format_spec)
 user_id, limit=min(_parse_int_arg("count", DEFAULT_ITEMS_PER_GET), MAX_ITEMS_PER_GET), from_id=min_ts, to_id=max_ts, order=request.args.get("order", "desc"), ) listen_data = [] for listen in listens:
 } } bool ArtifactsBar::ActionBarLeftMouseSingleClick( const fheroes2::Point & /*unused*/, Artifact & art, const fheroes2::Rect & /*unused*/) { if ( isMagicBook( art ) ) { const bool isMbSelected = (!isSelected() || isMagicBook( *GetSelectedItem() ) );
 } func (g Graph) UpdateDrive(w http.ResponseWriter, r *http.Request) { driveID, err := url.PathUnescape(chi.URLParam(r, "driveID")) if err!= nil { errorcode.InvalidRequest.Render(w, r, http.StatusBadRequest, "unescaping drive id failed") } if driveID == "" {
 // eventMessage protected int eventMessageLength = 163; protected int eventMessageSubLength = 160; /** postprocessor for a task builder */ protected TaskPostProcessor taskPostProcessor = null;
 public function up() { Schema::table('settings', function (Blueprint $table) { $table->boolean('labels_display_company_name')->default(false); }); }
 } private void check(@Nullable StatementTree tree, VisitorState state) { if (tree!= null && tree.getKind() == Tree.Kind.EXPRESSION_STATEMENT &&!state.reportMatch(buildDescription(tree).addFix(SuggestedFix.replace(tree, "{" + state.getSourceForNode(tree) + "}")).build())) { return; }
 # out/<build_dir>/ at time of build generation (chromium only). path = utils.remove_prefix(path, '../../') # Remove /proc/self/cwd prefix if exists. # This is a cross-platform way to determine path absoluteness. path = utils.remove_prefix(path, '/proc/self/cwd/') # Cross-platform way to determine path absoluteness.
 _base_ = ['deformable_detr_r50_8x2_50e_coco.py'] model = dict( bbox_head=dict(with_box_refine=True) )
 # Get the display name. # # @return [ String ] The display name. def display_name self.class.name.gsub(/.*::/, '')
 query = QueryResult([hit11]) self.assertEqual(hit11, query["hit1"]) self.assertEqual(hit11, query["alt1"]) self.assertNotEqual(hit11.id, "alt1") hit11._id_alt = [] def test_delitem_string_ok(self):
 // RuntimePlatform configuration. linuxOS = "LINUX" windowsCoreOS = "WINDOWS_SERVER_2019_CORE" windowsFullOS = "WINDOWS_SERVER_2019_FULL" x86Arch = "X86_64" )
 TARGET_DEVICE_ARGS="--target-device mac" ;; esac find "${PWD}" -name "*.xcassets" -print0 | xargs -0 xcrun actool --output-format human-readable-text --notices --warnings --platform "${PLATFORM_NAME}" --minimum-deployment-target "${IPHONEOS_DEPLOYMENT_TARGET}" ${TARGET_DEVICE_ARGS} --compress-pngs --compile "${BUILT_PRODUCTS_DIR}/${PRODUCT_NAME}.${WRAPPER_EXTENSION}" fi EOS end
 using NLog.Internal; using NLog.LayoutRenderers; public class FileTargetTests : NLogTestBase { private readonly ILogger logger = LogManager.GetLogger("NLog.UnitTests.Targets.FileTargetTests");
 /// </summary> public partial class GenericBatchingBatcher : AbstractBatcher { private readonly BatchingCommandSet _currentBatch; private int _totalExpectedRowsAffected; private StringBuilder _currentBatchCommandsLog;
 def tick(self): self.health_record.heartbeat() self.cell = self.get_meta_cell() inventory.refresh_inventory(self) now = time.time() * 1000
 { $transList = []; foreach ($list as $current) { $transList[] = $this->translateWithPrefix($current); } return $transList; }
 } // RecordError will record err as a span event for this span. This will // not set the span status to error. If this span is not being recorded or // err is nil than this method does nothing. func (s *span) RecordError(err error, opts...trace.EventOption) { if s == nil || err == nil ||!s.IsRecording() {
 import tech.pegasys.pantheon.util.ExceptionUtils; import java.time.Duration; import java.util.Collection; import java.util.List; import java.util.concurrent.CompletableFuture; import org.apache.logging.log4j.LogManager;
 long currentLogicOffset = mappedFile.getWrotePosition() + mappedFile.getFileFromOffset(); if (expectLogicOffset < currentLogicOffset) { // when we build the consume queue, we may need to read the file from disk, // if we read the file from disk, it may return the data which is not the latest one, // so we need to check the data is up to date, // if the data is not
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4433-SEA 1645547196 2190161572</p> <hr> <p>Varnish cache server</p> </body>
 frame.replace_nas_in_column(icol, replacement_value) def sort_column(self, frame): icol = random.randint(0, frame.ncols - 1) print("[10] Sorting column %d ASC" % icol) if python_output:
 */ void destroy(); /** * Close the Maintainable */ void close(); }
 System.exit(1); } String name = args[0]; AthenaClient athenaClient = AthenaClient.builder().region(Region.US_WEST_2).build();
 if (\Config::get('autologin') > 0 && ($strCookie = \Input::cookie('FE_AUTO_LOGIN'))) { // Try to find the user by his auto login cookie if ($this->findBy('autologin', hash_hmac('sha256', $strCookie, \System::getContainer()->getParameter('contao.encryption_key')))!== false) { // Check the auto login period if ($this->cre
 def _to_int(value): """Transforms a value into a database integer (or None).""" # pylint: disable=no-else-return if not value: return None elif not value:
 (*appInstance).Workloads = make([]models.WorkloadSvc, len(appWkd)) for i, wkd := range appWkd { wkdSvc := &models.WorkloadSvc{WorkloadName: wkd.Workload} services, err := in.k8s.GetServices(namespace, wkd.Deployment.Spec.Template.Labels) if err!= nil { return *appInstance, err }
 }; public static readonly Dictionary<string, string> SpecialYearPrefixesMap = new Dictionary<string, string> { { @"calendar", string.Empty }, { @"fiscal", @"FY" }, { @"school", @"SY" }, { @"cy", string.Empty }, { @"fy", @"FY" }, { @"sy", @"SY" } };
 if distro_name == "debian": if "sid" in distro_version or Version(distro_version) > Version("7"): return DebianOSUtil() else: return DebianOS8Util() if distro_name == "redhat" \ or distro_name == "centos" \
 }) _, err = handshakeService.Handle(stream1, node2AddrInfo.ID) if err == nil || err.Error()!= "handshake duplicate" { t.Fatalf("expected %s, got %s", fmt.Errorf("handshake duplicate"), err) } }) t.Run("Error - invalid ack", func(t *testing.T) { _, err = handshakeService.Handle(stream1, node2AddrInfo.ID) if err == nil || 
 ThreeBytesField("seq", RandShort()), ConditionalField(BitField("msg_priority", 0, 4), lambda pkt:pkt.MP == 1), ConditionalField( MultipleTypeField( [(BitField("SPARE3", 0, 4), lambda pkt: pkt.MP == 1)], ByteField("SPARE3", 0) ), lambda pkt: pkt.MP in [0, 1] ) ]
 return msg; } float Monster::GetUpgradeRatio(void) { return GameStatic::GetMonsterUpgradeRatio();
 var Must = metric.Must type correctnessBatcher struct { newAggCount int64 records []export.Record }
 public static final SqlFunction CURRENT_TIMESTAMP = new SqlAbstractTimeFunction("CURRENT_TIMESTAMP", SqlTypeName.TIMESTAMP); /** * The <code>CURRENT_DATE</code> function. */
 // Coburn: We shouldn't blurt out the Mirror thank you if we're running in a standalone build // or a server (headless) build. While it's nice to advertise the library, I don't think having // it pop its head up outside of the Editor is a good idea. #if UNITY_EDITOR Debug.Log("Thank you for using Mirror! https://mirror-networking.com"); #endif
 raise CorpusPruningException('Failed to sync corpus to disk.') if not self.quarantine_corpus.rsync_to_disk(self.quarantine_corpus_path, fuzz_target=self.fuzz_target): logs.log_error('Failed to sync quarantine corpus to disk.') if not self.shared_corpus.rsync_to_disk(self.shared_corpus_path, fuzz_target=self.fuzz_target): logs.log_error('Failed to sync shared corpus to disk.') self._cross_pollinate_ot
 let vnode = c._prevVNode = coerceToVNode(c.render(c.props, c.state, c.context)); c._dirty = false; if (c.getChildContext!=null) { context = assign(assign({}, context), c.getChildContext()); }
 assertEquals("00000000-0000-4000-8000-000000000000", min.getString()); // Test conversion from ValueJavaObject to ValueUuid ValueJavaObject valObj = ValueJavaObject.getNoCopy(UUID.fromString("12345678-1234-4321-8765-123456789012"), null, null); Value valUUID = valObj.convertTo(Value.UUID); assertTrue(valUUID instanceof ValueUuid); assertE
 import queue import os from data_generator.resource import RESOURCE_GENERATOR_FACTORY from data_generator.file_handler import create_file_and_writer_listener
 * @return boolean true if the passed $nodeType is allowed as child node * @throws NodeTypeNotFoundException */ public function isNodeTypeAllowedAsChildNode(NodeType $nodeType): bool { if ($this->isAutoCreated()) { return $this->getParent()->getNodeType()->allowsGrandchildNodeType($this->getName(), $nodeType);
 BLACKBOXTEST(BlackBox, ReqRepVolatileHelloworldRequesterCheckWriteParams) { ReqRepAsReliableHelloWorldRequester requester; volatile ReqRepAsReliableHelloWorldReplier replier; requester.durability_kind(eprosima::fastrtps::VOLATILE_DURABILITY_QOS).init(); ASSERT_TRUE(requester.isInitialized()); replier.init(); ASSERT_TRUE(replier.isInitialized()); reque
 # @since 2.1.0 attr_reader :fs # @return [ Object ] file_id The id of the file being uploaded. # # @since 2.1.0 attr_reader :file_id
 import pytest pytestmark = pytest.mark.tendermint pytestmark = pytest.mark.mongo VALIDATORS_ENDPOINT = '/api/v1/validators/'
 else { queryCollection.Add("options", "0"); queryCollection.Add("search", query.GetQueryString()); } var response = await RequestStringWithCookiesAndRetry(SearchUrl + queryCollection.GetQueryString());
 caffe_set(top_count, Dtype(-1), top_mask); } else { caffe_set(top_count, Dtype(-1), top_mask); caffe_copy(top_count, max_idx_->mutable_cpu_data(), top_mask); } caffe_set(top_count, Dtype(-FLT_MAX), top_data); // The main loop
 // slug built from normalized (by provider) owner and repo name vcsSlug: computed('ownerName', 'vcsName', function () { return `${this.ownerName}/${this.vcsName}`; }), formattedSlug: computed('owner.login', 'name', function () {
 var Logger otellog.Logger = otellog.NewDefaultLogger(os.Stdout, otellog.LogLevelInfo) func Debugf(format string, args...interface{}) { Logger.Log(otellog.LogLevelDebug, printfArgs{format, args}) }
 st, err := s.host.NewStream(ctx, peerID, protocol.ID(swarmStreamName)) if err!= nil { if st!= nil { st.Reset() } if err == multistream.ErrNotSupported || err == multistream.ErrIncorrectVersion {
 $this->routeCollection->add( '_redirect_route_'. $redirect->getId(), new Route($redirect->getOrigin(), [ '_controller' => 'FrameworkBundle:Redirect:urlRedirect', 'path' => $redirect->getTarget(), 'permanent' => $redirect->isPermanent(), ], [], ['utf8' => $needsUtf8]) ); } }
 outputStream = fs.create(new Path(file), false, bufferSize, (short) rep, block); } BCFile.Writer _cbw = new BCFile.Writer( new RateLimitedOutputStream(outputStream, options.getRateLimiter()), compression, conf, acuconf); return new RFile.Writer(_cbw, (int) blockSize, (int) indexBlockSize, samplerConfig, sampler); }
 } $events = [ 'rocket_purge_time_event'                      => __( 'Scheduled Cache Purge', 'rocket' ), 'rocket_database_optimization_time_event'      => __( 'Scheduled Database Optimization', 'rocket' ), 'rocket_database_optimization_cron_interval'   => __( 'Database Optimization Process', 'rocket' ), 'rocket_preload_cron_interval'                 => _x( 'Preload', 'noun', 'rocket' ), '
 Verbosef("the repository. Losing your password means that your data is\n") Verbosef("irrecoverably lost.\n") } else { Verbosef("Please note that you need the masterkey file %s to access the repository.\n", gopts.MasterKeyFile) Verbosef("Losing your masterkey file means that your data is irrecoverably lost.\n") }
 return AbstractBlock::operator==(rhs); } BlockVariant *BlockVariant::clone() const { return new BlockVariant(*this); }
'memory://thisshouldntbethebroker') assert self.app.conf.broker_url == prepatch_broker_url def test_table(self): assert self.app.conf.table(with_defaults=True) assert self.app.conf.table(with_defaults=False)
 * @param string $function Function (box) name. */ function rocket_dismiss_box( $function ) { $actual = get_user_meta( wp_get_current_user()->ID, 'rocket_boxes', true ); $actual = array_merge( (array) $actual, [ $function ] ); $actual = array_filter( $actual ); $actual = array_unique( $actual ); update_user_meta( wp_get_current_user()->ID, 
 { return tokenJson["access_token"].Value<string>(); } return null; }
 else: context['summary'] = _("Products matching '%(query)s'") % {'query': q} context['search_term'] = q context['alert_form'] = get_product_alert_form(product=None) return context
 return false; } public boolean supportsFunction(FunctionCall call) { return true; }
 } from 'preact'; import { applyEventNormalization } from './events'; const CAMEL_PROPS = /^(?:accent|alignment|arabic|baseline|cap|clip|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vector|vert|word|writing|x)[cli
 // THE POSSIBILITY OF SUCH DAMAGE. // namespace NLog.UnitTests.LayoutRenderers { using System; using System.IO; using System.Reflection; using System.Threading; using System.Threading.Tasks; using Xunit; public class CallSiteTests : NLogTestBase
 networkSceneName = newSceneName; //This should probably not change if additive is used } void OnSceneLoaded(Scene scene, LoadSceneMode sceneMode = LoadSceneMode.Single) { // NOTE: this cannot use NetworkClient.allClients[0] - that client may be for a completely different purpose.
 // No validation is performed on the returned SpanConfig (e.g. no uniqueness // checking or bounding of data), it is left to the SDK to perform this // action. func NewSpanStartConfig(options...SpanOption) *SpanConfig { if len(options) == 0 { return &SpanConfig{ SpanKind:    SpanKindInternal, TraceID:     TraceID{}, Error:       false, StartTime:   time.Now(), En
 if (sgv.getMills() > latestDateInReceivedData) latestDateInReceivedData = sgv.getMills(); } // Was that sgv more than 15 mins ago? boolean moreThan15MinAgo = false; if((System.currentTimeMillis()-latestDateInReceivedData)/(60 * 1000L) < 15L) moreThan15MinAgo = true; if(Notification.isAlarmForStaleData(
 return nil, fmt.Errorf("%s: failed to register json node: %w", op, err) } // serializedStderr will be shared among all StderrSinks so their output is not // interwoven serializedStderr := serializedWriter{ w: os.Stderr, l: opts.withSerializationLock, } // we need to keep track of all the Sink filenames to ensure they aren't
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4472-SEA 1645549731 2100393391</p> <hr> <p>Varnish cache server</p> </body>
 def test_percentchange(self, seed_value, window_length): pct_change = PercentChange( inputs=[seed_value], window_length=window_length, )
 // default network option // Then we have no control over genesis default value here. @CommandLine.Option( names = {"--genesis-file"}, paramLabel = MANDATORY_FILE_FORMAT_HELP, description = "The path to genesis file. Setting this option makes --chain option ignored and requires --network-id to be set." ) final File genesisFile = null; }
 Returns: An encoded list of integers representing code points. """ if sys.version_info.major == 3: return list(string_data) return list(map(ord, string_data)) def decode_to_text(encoded_list):
 TEST_F(SimulatorTest, ValidWhenPreviousBlock) { // proposal with height 2 => height 1 block present => new block generated std::vector<shared_model::proto::Transaction> txs; txs.emplace_back(makeTx()); txs.emplace_back(makeTx()); auto validation_result = std::make_unique<iroha::validation::VerifiedProposalAndErrors>();
 <%= render'shared/bottom_cta', button: create_new_account_button, heading: "Haven't signed up yet?", sub_heading: '' %>
 return true; } if (conn->mode == S2N_CLIENT &&!s2n_is_tls13_fully_supported()) { /* There are some TLS Servers in the wild that will always choose RSA PSS if the client claims to support TLS 1.3 * even if the client does not advertise support for RSA PSS in the SignatureScheme extension. In order to work
 const char *kPeerFindFail = "Failed to find requested peer"; struct TimerWrapper : public val::FieldValidator { explicit TimerWrapper(iroha::ts64_t t) : FieldValidator(val::FieldValidator::kDefaultFutureGap, [=] { return t; }) {} };
 anonymous_mode: discussion&.anonymous_mode? ), mentor_solution: mentor_solution, exemplar_files: SerializeGitFiles.(exercise.exemplar_files), exemplar_files_meta: exemplar_files_meta, notes: notes, out_of_date: solution.out_of_date?, download_command: solution.mentor_download_cmd, scratchpad: {
 } // Show the loading indicator until data has been fetched. if (totalPagesFromData === null) { return fullPageLoadingIndicator; }
 self.unCommitted[0][1].items()]) self.unCommitted = self.unCommitted[1:] else: logger.warning('{} is trying to commit a batch with state root {}''but no uncommitted found'.format(self, stateRoot)) def setVerkey(self, idr, verkey): # This method acts as if guardianship is being terminated.
 addr, err := s.addressBook.Get(p) if err!= nil { if errors.Is(err, storage.ErrNotFound) { s.logger.Debugf("Peer not found %s", p) continue } return err
 edge_shuffled = edge_mapping.shape!= (0,) use_bcast = op not in ['copy_lhs', 'copy_rhs'] and u_shp[1:]!= e_shp[1:] # pass edge_mapping to tvm only when array packing will be used use_idx = edge_shuffled and num_feat_partitions > 1 and not use_bcast and use_e # use_idx is used to indicate whether we need to use idx for edge 
 return tokenSignature; } public String getCustomAuthorizerLambdaArn() { return customAuthorizerLambdaArn; }
 return dh @classmethod def from_store(cls, path, basename, key_size, passphrase: typing.Optional[bytes] = None): ca_path = os.path.join(path, basename + "-ca.pem") if not os.path.exists(ca_path): key, ca = cls.create_store(path, basename, key_size)
 if(!$mybb->input['action_type']) { $errors[] = $lang->error_missing_action_type; } if(!$errors)
 logCxt := logCxt.WithField("dest", dest) // Check if we should remove routes not added by us if!r.removeExternalRoutes && route.Protocol!= r.deviceRouteProtocol { logCxt.Debug("Syncing routes: not removing route as it's not marked as Felix route") continue }
 }; }; _compileToState = debounce((code: string) => { this.setState(state => this._compile(code, state), this._persistState); }, DEBOUNCE_DELAY); _onEnvPresetSettingChange = (name: string, value: any) => { this.setState(
 self._proc.error.connect(self.on_proc_error) editor = config.get('general', 'editor') executable = editor[0] args = [arg.replace('{}', self._filename) for arg in editor[1:]] log.procs.debug("Calling \"{}\" with args {}".format(executable, args)) self._proc.start(executable, args)
 import AriaStatic from 'x/ariaStatic'; import AriaDynamic from 'x/ariaDynamic'; import { testAria } from '../testUtils'; const ID_REFERENCING_ARIA_ATTRS = new Set([ 'aria-activedescendant', 'aria-controls',
 import ( "fmt" "golang.org/x/net/context"  cepubsub "github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub" cloudevents "github.com/cloudevents/sdk-go" "github.com/GoogleCloudPlatform/cloud-run-events/pkg/kncloudevents" )
 [](mega::UnifiedSync* us, const SyncError&, error e){ if (us && us->mSync) { cout << "Sync added and running. backupId = " << us->mConfig.getBackupId() << endl; } else if (us) {
 } }() cmd.communication, err = cmd.communicationOptions.Connect() if err!= nil { return err } err = cmd.communication.Publish(nodeRegister, []byte(options.NodeKey)) if err!= nil { return err }
 #include <OpenSim/Common/Storage.h> #include "ControlSet.h" // TODO #include <OpenSim/Simulation/SimbodyEngine/Constraint.h>
 private int index; private AtomicInteger dataSize = new AtomicInteger(0); private long lastDispatchTime = 0L; private long lastUpdateTime = 0L;
 // Attest invokes all workload attestor plugins against the provided PID. If an error // is encountered, it is logged and selectors from the failing plugin are discarded. func (wla *attestor) Attest(ctx context.Context, pid int32) []*common.Selector { defer func(start time.Time) { log := wla.c.Log.WithField(telemetry.PID, pid) log.Info(fmt.Sprintf("Attestation dura
 from.sklearn import LGBMModel def _check_not_tuple_of_2_elements(obj: Any, obj_name: str = 'obj') -> None: """Check object is not tuple or does not have 2 elements.""" if not isinstance(obj, tuple) or len(obj)!= 2: raise TypeError(f"{obj_name} must be a tuple of 2 elements.")
 A list of transactions containing related to the asset. If no transaction exists for that asset it returns an empty list `[]` """ cursor = self.connection.run( r.table('bigchain', read_mode=self.read_mode). get_all(asset_id, index='asset_id').concat_map(lambda block: block['block']['transactions']).filter(lambda transaction: transaction['transaction']['asset']['id'] == asset_id)) return [Transaction.from_dic
 } public double getQueueFullness() { return ( (double) statusUpdatesExecutor.getQueue().size() / statusUpdatesExecutor.getQueueLimit()
 group : array-like or None, optional (default=None) Group data of training data. eval_sets : list of (X, y) tuple pairs or None, optional (default=None) A list of (X, y) tuple pairs to use as a validation set. eval_names : list of strings or None, optional (default=None) Names of eval_set. eval_sample_weight : list of arrays or None, optional (default=None)
 { if (empty($GLOBALS['TL_DCA'][$strTable]['config']['ptable'])) { $strTable = $strTable. '_'. $strTable; }
 annotations. """ raise ImportError("Bio.Alphabet has been removed from Biopython. In many cases, the alphabet can simply be ignored and removed from scripts. In a few cases, you may need to specify the ``molecule_type`` as an annotation on a SeqRecord for your script to work correctly. Please see https://github.com/biopython/biopython/issues/3156 for more information.")
 return this.storage.billingStep || STEPS.ONE; }), billingInfoExists: computed(function () { const billingInfo = this.existingBillingInfo; if (!billingInfo) return false; return billingInfo.firstName && billingInfo.lastName && billingInfo.billingEmail && billingInfo.address
 bool RTPSParticipantImpl::update_attributes( const RTPSParticipantAttributes& patt) { static_cast<void>(patt); return false; }
 assert aggregate == EXPECTED_AGGREGATE; return aggregate; } } /** Randomized update of every element */
 } public Object visit(ASTFieldDeclaration node, Object data) { EnumSet<Modifier> unnecessary = EnumSet.noneOf(Modifier.class); if (node.isSyntacticallyPublic()) { unnecessary.add(Modifier.PUBLIC); }
 access_key_id: ENV['S3_ACCESS_KEY_ID'], secret_access_key: ENV['S3_SECRET_ACCESS_KEY'] }, path: "#{path}/#{path}", bucket: ENV['S3_BUCKET'], s3_protocol: ENV['PROTOCOL'] }
 func CopyContents(srcDir, dstDir string) (err error) { const squashErrors = false var srcDirIsDir bool if srcDirIsDir, err = isDirectory(srcDir); err!= nil { return err } if!srcDirIsDir { return fmt.Errorf("source directory %q is not a directory", srcDir) } err = os.MkdirAll(dstDir, os.ModePerm) if err!= nil { return
 def test_can_send_bytes_bytearray_objects_with_files(self): # Test bytes: data = {'a': '0.0'} files = {'b': b'foo'} r = requests.Request('POST', httpbin('post'), data=data, files=files) p = r.prepare()
 */ public void setCurrentGroupExprData(Expression expr, Object obj) { Integer index = exprToIndexInGroupByData.get(expr); if (index!= null) { assert currentGroupByExprData[index]!= null; currentGroupByExprData[index] = obj; return; }
 end parser.on('--parallel-test NUMBER', 'Run the tests with the specified number of parallel threads') do |n| options[:parallel_test] = if!n.nil? begin Integer(n) rescue ArgumentError
 return rules.stream().filter(filter).allMatch( rule -> rule.validate(header, parent, protocolContext)); } private Optional<BlockHeader> getParent(
 if c.direction!= _directionInbound { msg = _errorOutbound } if appErrorInfo!= nil { msg = msg + ": " + appErrorInfo.Name + ": " + appErrorInfo.Message } ce = c.edge.logger.Check(zap.ErrorLevel, msg) }
 data = self.form.cleaned_data if data.get('upc'): # Filter the queryset by upc queryset = queryset.filter(Q(upc__icontains=data['upc']) | Q(parent__upc__icontains=data['upc'])) if data.get('title'): queryset = queryset.filter(title__icontains=data['title'])
 InitQTextMsg(TEXT_MUSH12); quests[Q_MUSHROOM]._qactive = QUEST_DONE; towner[t]._tMsgSaid = TRUE; AllItemsList[Item->IDidx].iUsable = TRUE; /// BUGFIX: This will cause the elixir to be usable in the next game } else if (PlrHasItem(p, IDI_BRAIN, i)!= NULL && quest
 self.props_file = None self.class_path = [] self.tools = [] self.hamcrest_path = "~/.bzt/selenium-taurus/tools/junit/hamcrest-core.jar" self.json_jar_path = "~/.bzt/selenium-taurus/tools/junit/json.jar" self.selenium_server_path = "~/.bzt/selenium-taurus/selenium-server.jar" def install_required_tools(self): self._check_tools(self.tools) def prepare(self)
 o.logger.Debug("new submission found", zap.Any("event", *event)) if!o.transactionValid(ctx, value.TransactionId) { o.logger.Warn("failed to confirm transaction, transaction invalid", zap.Stringer("transaction_id", value.TransactionId)) continue }
 mp_err(log, "Failed to retrieve the Prime Handle from handle %d (%d).\n", object, descriptor->objects[object].fd); goto fail; } if (object == 0) { modifiers[object] = descriptor->objects[object].format_modifier; } }
 EXPECT_SUCCESS(s2n_connection_set_io_pair(server_conn, &io_pair)); EXPECT_SUCCESS(try_handshake(server_conn, client_conn, async_handler_sign_with_different_pkey_and_apply)); /* Free the data */ EXPECT_SUCCESS(s2n_connection_free(server_conn));
 JetPlanExecutor( MappingCatalog catalog, JetInstance jetInstance, Map<Long, JetQueryResultProducer> resultConsumerRegistry ) { this.catalog = catalog; this.jetInstance = jetInstance; this.resultConsumerRegistry = resultConsumerRegistry; }
 class AddVisibleToPartnersToItems < ActiveRecord::Migration[6.0] def change add_column :items, :visible_to_partners, :boolean, default: true, null: false end end
 private final BiConsumer<? super A,? super T> accumulateF; private final Function<A, R> finishAccumulationF; private final BinaryOperator<A> combineAccF; private final FlatMapper<Punctuation, Session<K, R>> expiredSessionTraverser; SessionWindowP( long sessionTimeout,
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4428-SEA 1645537648 1498243728</p> <hr> <p>Varnish cache server</p> </body>
 config := NewConfigLocal() config.BlockCache().SetCleanBytesCapacity(params.CleanBlockCacheCapacity) if params.CleanBlockCacheCapacity > 0 { log.Info("Clean block cache capacity set to", params.CleanBlockCacheCapacity) } config.SetBlockOps(NewBlockOpsStandard(config, defaultBlockRetrievalWorkerQueueSize))
 ModelCalibrator::ModelCalibrator() { constructProperties();  // Get the initial IMU orientation from the imu frame orientation // and the initial orientation of the body frame with respect to // the imu frame. initialOrientation = imuFrameOrientation.getOrientation() - imuFrameOrientation.getOrientationFromBodyFrame(); }
 return err } commitsInfo = append(commitsInfo, logNode{meta, prevHash, ph}) numLines--
 evts = self.phyloxml.phylogenies[4].clade.events # Container behavior: __len__, __contains__ self.assertEqual(len(evts), 1) self.assertIn("speciations", evts) self.assertNotIn("duplications", evts) # Attribute access: __get/set/delitem__ self.assertEqual(evts["speciations"], 1) self.assertRaises(KeyError, lambda
 except shellutil.CommandError as cmd_err: if chk_err: msg = """Failed to eject dvd: ret={0} [stdout] {1}  [stderr] {2}""".format(cmd_err.returncode, cmd_err.stdout, cmd_err.stderr) raise OSUtilError(msg)
 /// Available type converters - user converters followed by any defaults /// </summary> public IEnumerable<ITypeConverter> TypeConverters { get; set; } } } No newline at end of file
 committee hotstuff.Committee, signerID flow.Identifier, stakingPriv crypto.PrivateKey, beaconKey crypto.PrivateKey) *CombinedSigner { local, err := local.New(nil, stakingPriv) require.NoError(t, err)
 * client (and a local Realm file on disk), and the server (and a remote Realm at a given URL stored on a Realm Object Server). * Sessions are always created by the SDK and vended out through various APIs. The lifespans of sessions * associated with Realms are managed automatically. * * @memberof Realm.Sync */ class Session { /**
 protected virtual bool IsUpToDate(ISet<string> spaces, long timestamp) { return spaces.Count == 0 || _updateTimestampsCache.IsUpToDate(timestamp); } } }
 type test_context struct { suite.Suite connManager            *connectionManager fakeDiscoveryClient    *server.ClientFake fakeOpenVpn            *fake_openvpn_client fakeDialogResumeDisconnect *fake_dialog } func (tc *test_context) SetupTest() {
 network.Notifiee // handhsake service can be the receiver for network.Notify } func New(overlay swarm.Address, underlay string, signer crypto.SignRecoverer, networkID uint64, logger logging.Logger) (*Service, error) { toSign := []byte(underlay + strconv.FormatUint(networkID, 10)) signature, err := signer.Sign(toSign) if err!= nil { return nil, err
 << LOG_KV("nodeID", nodeID.substr(0, 4)); return false; } if (nodeID.substr(0, 4) == "0000") { return false; }  if (!preverified) { return false;
 $this->currentCustomerUser->getPricingGroup() ); return $queryBuilder ->select('count(p.id)') ->getQuery()
 if err!= nil { return nil, err } vres := newViewedViewtype(res, view) if err := vres.Validate(); err!= nil { return nil, err }
 if ( false === $args['single'] &&! wp_is_numeric_array( $args['default'] ) ) { $args['default'] = array( $args['default'] ); }  if (! has_filter( "default_{$object_type}_metadata", 'filter_default_metadata' ) ) { add_filter( "default_{$object_type}_metadata", 'filter_default_metadata', 10, 5 ); } } // Global registr
 // note that we don't include the keys here as they are already included in the path func HashLeaf(path []byte, value []byte) []byte { // TODO: this is a sanity check and should be removed soon if len(path)!= 32 { panic(fmt.Sprintf("path input to HashLeaf must be 32 bytes, got %d", len(path))) } var out [32]byte hasher := newHasher() hasher.h
 private static final int NODE_ID_SIZE = 64; private static final Pattern DISCPORT_QUERY_STRING_REGEX = Pattern.compile("(^|&)discport=([0-9]{1,4})"); private static final Pattern NODE_ID_PATTERN = Pattern.compile("^[0-9a-fA-F]{128}$"); private final BytesValue nodeId;
 db.execSQL("ALTER TABLE " + PodDBAdapter.TABLE_NAME_FEEDS + " ADD COLUMN " + PodDBAdapter.KEY_FEED_PLAYBACK_SPEED + " TEXT"); db.execSQL("ALTER TABLE " + PodDBAdapter.TABLE_NAME_FEED_MEDIA + " ADD COLUMN " + PodDBAdapter.KEY_LAST_PLAYBACK_SPEED + " TEXT"); }  // This is for the new column in the media table, which is not present in older versions. private static void addLa
 throws AccumuloSecurityException, AccumuloException, NamespaceNotFoundException { if (!exists(namespace)) throw new NamespaceNotFoundException(null, namespace, null); Map<String,String> copy = Map.copyOf(this.getConfiguration(namespace)); for (IteratorScope scope : scopes) { String root = String.format("%s%s.%s", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase(), name);
 fastrtps::rtps::RTPSParticipantAttributes patt; set_attributes_from_qos(patt, qos_); rtps_participant_->update_attributes(patt); set_qos(qos_, false); } return ReturnCode_t::RETCODE_OK;
 } } func (cache *httpCache) Retrieve(target *core.BuildTarget, key []byte) *core.BuildMetadata { // We can't tell from outside if this works or not (as we can for the dir cache) // so we must assume that a target with no artifacts can't be retrieved. It's a weird // case but a test already exists in the plz test suite so... var metadata *core.BuildMetadata for _, output 
 try { Model model("arm26.osim"); // all subcomponents are now accounted for. // // Note: finalizeFromProperties() is called in the constructor, so // we know all subcomponents are accounted for. ASSERT(model.countNumComponents() > 0); // model must be up-to-date with its properties
 use Slim\Routing\RouteCollector; use Slim\Tests\Mocks\MockPsr17FactoryWithoutStreamFactory; use Slim\Tests\TestCase; use Zend\Diactoros\ResponseFactory as ZendDiactorosResponseFactory; class AppFactoryTest extends TestCase {
 private static string GetResourceExtension(string resourceName) { var extension = Path.GetExtension(resourceName); return (extension!= null)? extension.Substring(1) : string.Empty; } } } No newline at end of file
 # This file add snack case alias for coco api from pycocotools.coco import COCO as _COCO from pycocotools.cocoeval import COCOeval as _COCOeval from pycocotools.coco import COCO from pycocotools.cocoeval import COCOeval class COCO(_COCO): def __init__(self, annotation_file=None): su
 ostree_progress, NULL, &error)) { g_dbus_method_invocation_return_gerror (invocation, error); return TRUE; }
 $value = call_user_func_array( 'apply_filters', $args ); } elseif( isset( $field ) && isset( $item ) && 'permalink' == $field && 'taxonomy' == $object_type && is_array( $item ) && isset( $item[ 'taxonomy' ] ) && isset( $item[ 'term_id' ] )  ) { $value = get_term_link( (int) 
 var execCommand = cli.Command{ Name:  "exec", Usage: "execute new process inside the container", ArgsUsage: `<container-id> <container command>  Where "<container-id>" is the name for the instance of the container and "<container command>" is the command to be executed in the container.  For example, if the container is configured to run the linux ps command the following will output a list of processes running in 
 // In case there is more than one page, // it loops through them and adds to the `history` array if (totalPages > 1) { for (let page = 2; page <= totalPages; page++) { const { data: pageHistory }: AdaTransactionsV1 = await getAdaHistoryByWallet(this.config, Object.assign(params, { page }));
 x_seg = x_size[0] * [x_size[1]] else: x_seg = [F.shape(x)[0]] return knn(x, x_seg, x, x_seg, k, algorithm=algorithm, dist=dist) def _knn_graph_blas(x, k, dist='euclidean'): r"""Construct a graph from a set of points according to k-nearest-neighbor (KNN).
 handleClose, handlePaymentSuccess, handleDropinReady, shouldRequestPaymentNonce, } = talonProps; const actionButtons =!isLoading? (
 return graph_data if readonly: gidx = GraphIndex(multigraph, readonly) else: handle = _CAPI_DGLGraphCreateMutable(multigraph)
 receiptValidator module.ReceiptValidator sigTag           string publicKey        *mock.PublicKey } func (s *ReceiptValidationSuite) SetupTest() { s.SetupChain() s.publicKey = &mock.PublicKey{} s.Identities[s.ExeID].StakingPubKey = s.publicKey s.sigTag = "test_tag" s.receiptValidator = NewReceiptValidator(s.State, s.HeadersDB, s.IndexDB, s.Resul
 if (o-> pargc == 0 && o->fargc > 0) { /* Assume we got a auth:code combination */ std::string input(o->fargv[0]); int n = input.find(":"); if (n == -1) { /* No colon, must be a real string */ std::string auth = input; std::string code = ""; } else { std::string auth = input.s
 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); intent.putExtra(Intent.EXTRA_STREAM, fileUri); intent.setType("image/png"); startActivity(Intent.createChooser(intent, getString(R.string.achiev_activity_share_image_via))); } catch (IOException e) { e.printStackTrace(); }
 } // Start the next batch. req = newReq() n = 0 } } if err := g.Wait(); err!= nil {
 /// <summary> /// Gets or sets a value indicating whether anonymized export is enabled or not. /// </summary> public bool AnonymizeExport { get; set; } } }
 int result = s2n_hmac_free(state); /* Post-conditions. */ assert(result == S2N_SUCCESS); if (state!= NULL) { assert(state->inner.hash_impl->free!= NULL); assert(state->inner_just_key.hash_impl->free!= NULL);
 func (h *Host) sendSDAData(e *network.Entity, sdaMsg *SDAData) error { b, err := network.MarshalRegisteredType(sdaMsg.Msg) if err!= nil { return fmt.Errorf("Error marshaling message: %s", err.Error()) } sdaMsg.MsgSlice = b sdaMsg.MsgType = network.TypeFromData(sdaMsg.Msg)
 let oldVNode = replaceNode && replaceNode._children || parentDom._children; let isHydrating = false; if (replaceNode === true) { isHydrating = true; replaceNode = null; } vnode = createElement(Fragment, null, [vnode]);
 [Trait(Traits.Priority, Priority.One)] public async Task GivenABundleWithVersionedReference_WhenSubmittingATransaction_ThenResolvedReferenceIsVersionSpecific() { var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithVersionSpecificReference").ToPoco<Bundle>(); var fullUrlBeforeTransaction = requestBundle.Entry[0].FullUrl; var referenceBeforeTransaction = requestBundle.Entry[1].Resource.GetAllChildren<ResourceReference>
 ) time.sleep(36000) except NoPlayerPositionSetException: wait_time = config.reconnecting_timeout bot.event_manager.emit( 'api_error', sender=bot,
 self._built = True def feed_input(self, data_node, data, layout="", cuda_stream = None): """Bind a NumPy array (or a list thereof) to an output of ExternalSource. In the case of the GPU input, it is the user responsibility to modify the provided GPU memory content only using provided stream (DALI schedules a copy on it and all work is properly queued). If no stream is provided, feed_input will block unt
 { public virtual async Task<ApiHealthData> GetHealth(CancellationToken token = default) { var response = await _httpClient.SendAsync(CreateHttpRequest("api/v1/health"), token); return await HandleResponse<ApiHealthData>(response); } }
 ->example('develop') ->defaultValue('') ->end() ->end() ->add('sanitize', 'boolean', [ 'label' => 'Sanitize HTML', 'description' => 'If enabled, the content is sanitized before it is saved in the database. This can be useful to prevent certain security issues.', 'default' => false, ]) ; }
 // The.NET Foundation licenses this file to you under the MIT license. // See the LICENSE file in the project root for more information. using System.Runtime.CompilerServices; using System.Threading;
 use Neos\Flow\Mvc\Controller\MvcPropertyMappingConfigurationService; use Neos\Flow\Mvc\FlashMessage\FlashMessageService; use Neos\Flow\Mvc\View\JsonView; use Neos\Flow\Security\Authentication\Controller\AbstractAuthenticationController; use Neos\Flow\Security\Exception\AuthenticationRequiredException; use Neos\Flow\Session\SessionInterface; use Neos\Flow\Session\SessionManagerInterface; use Neos\Neos\Dom
 private final Object executionLock = new Object(); private final ILogger logger; private String jobName; private List<File> localFiles = Lists.newArrayList(); // dest vertex id --> dest ordinal --> sender addr --> receiver tasklet private Map<Integer, Map<Integer, Map<Address, ReceiverTasklet>>> receiverMap = emptyMap();
 func (in *TLSService) hasMeshPolicyEnabled(namespaces []string) (bool, error) { if len(namespaces) < 1 { return false, fmt.Errorf("Unable to determine mesh-wide mTLS status without access to any namespace") } // MeshPolicies are not namespaced. So any namespace user has access to
 q->long_timeout = 3600; q->stats->time_when_started = timestamp_get(); q->last_time_tasks_fit_check = timestamp_get(); q->task_reports = list_create(); q->time_last_wait = 0;
 "cache" end private def check_config
 const { code: configCode } = config; return stores.reduce((map, store) => { const { category_url_suffix, code,
 private static final String COPYRIGHT_LINE = "Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved."; private final Node node; private volatile JetService jetService; private volatile ILogger logger; NodeExtensionCommon(Node node) { this.node = node; } void afterStart() { logger = node.getLogger(getClass().getName()); if (logger == null) { return; } jetService().getJobCoordinationService(
 FAKE_ORG_IAM_POLICY_MAP = [{ 'org_id': 660570133860, # Note: this is not a real org id, but is used to populate the IAM policy 'iam_policy': { 'bindings': [ {'role': 'roles/billing.creator','members': [
 "context" "fmt" cpv1alpha1 "github.com/crossplane/crossplane-runtime/apis/core/v1alpha1" "github.com/crossplane/crossplane-runtime/pkg/event" "github.com/crossplane/crossplane-runtime/pkg/logging" kerrors "k8s.io/apimachinery/pkg/api/errors" "k8s.io/apimachinery/pkg/runtime" "k8s.io/klog/v2" ct
 tab = append(tab, 1) } } cipherVect := *libmedco.EncryptIntVector(clientPublic, tab) testGAMap[groupAttributes.Key()] = groupAttributes testCVMap[groupAttributes.Key()] = cipherVect
 }, } } groupBy = &universe.GroupProcedureSpec{ GroupMode: flux.GroupModeBy, GroupKeys: []string{"foo", "bar", "buz"},
 return Key(k).Bool(v) } // Int creates a KeyValue with an INT64 Value type. func Int(k string, v int) KeyValue { return Key(k).Int(v) }
 public const string LangMarker = @"Dut"; public const bool CheckBothBeforeAfter = false; public static readonly string RangeConnectorRegex = $@"(?<and>\b(en|tot en met|t/m|tot(\s+aan)?)\b|{BaseDateTime.RangeConnectorSymbolRegex})"; public static readonly string TillRegex = $@"(?<till>\b(tot(dat|\s+en\s+
 // Set the log file, which will only create the needed directories InternalLogger.LogFile = tempFile; Assert.True(Directory.Exists(randomSubDirectory) === shouldCreateDirectory); try {
 var common_config = new configmod.ConfigSection('common', common_options); common_config.load(); var base_url = utils.get_body_data('baseUrl').replace(/\/?$/, '/'); var base_url = base_url.replace(/\/$/, ''); var ws_path = utils.get_body_data('wsPath'); var ws_url = utils.get_body_data('wsUrl');
 """ @tb.must_fail(errors.EdgeQLSyntaxError, "Unexpected token.*AT", line=6, col=24) def test_edgeql_syntax_shape_21(self): """ INSERT Foo{ bar: { @weight, # this syntax may be valid in the future IS BarLink@special, } }; """
 # Ensure coordinates are regularly sampled self.set_param(rtol=config.image_rtol) validate_regular_sampling(self, 0, self.rtol) validate_regular_sampling(self, 1, self.rtol) def __setstate__(self, state):
 // If the specified code is not CodeUnknown, this will not set the name field. // // This function should not be used by server implementations, use the individual // error constructors instead. This should only be used by transport implementations. func FromHeaders(code Code, name string, message string) error { switch code { case CodeOK:
 } const results = await this.search(options); if (options.order.length > 0 && options.order[0].by == 'title') { results.sort((a, b) => this.naturalSortCompare(a.title, b.title, options.order[0].dir)); } return results; }
 def test_parse_upstream_auth(): tutils.raises("Invalid upstream auth specification", cmdline.parse_upstream_auth, "") assert cmdline.parse_upstream_auth( "test:") == "Basic" + " " + base64.b64encode("test:") assert cmdline.parse_upstream_auth( ":test") == "Basic" + " " + base64.b64encode(":test") assert cmdline.parse_upstream_auth( "test:qwerty
 self.phases_enabled = False while not await self.is_closeable(): await asyncio.sleep(10) await self._run_phases(services, planner) await self._cleanup_operation(services) await self.close()
 const defaultMaxNumTxs = 100 // RollupTxProtocol is a protocol for collecting pending transactions. type RollupTxProtocol struct { *onet.TreeNodeInstance TxsChan chan []ClientTransaction NewTx   *AddTxRequest CtxChan chan ClientTransaction // TODO - somehow propagate the latest version available from this node // to the leader. // Previously it has been done while collecting the transactions. // Now a new way needs to b
 # @since 2.1.0 def empty? if _loaded? in_memory.empty? else _added.length == 0 &&!_unloaded.exists? end end
 { $new_badword = array( "badword" => $db->escape_string($mybb->input['badword']), "regex" => $mybb->get_input('regex', MyBB::INPUT_INT), "replacement" => $db->escape_string($mybb->input['replacement']) );
 m_Socket = zmq_socket(m_Context, ZMQ_REP); const std::string fullIP("tcp://" + m_IPAddress + ":" + m_Port); zmq_bind(m_Socket, fullIP.c_str()); if (m_Profiler.IsActive)
 mockExpect                      func(mock *mock_aws.MockClient) expectID                        string expectSelectors                 []*common.Selector expectCode                      codes.Code expectMessage                   string replacementTemplate             string allowList                       []string skipBlockDev                    bool
 $entry = new Entries(); $entry->setUserId(1); $entry->setUrl($url); $entry->setTitle($request->request->get('title')?: $content->getTitle()); $entry->setContent($content->getBody()); $em = $this->getDoctrine()->getManager(); $em->persist($entry);
 func (rw *responseWriter) Close(httpStatusCode int) { rw.w.Header().Set(ApplicationStatusHeader, applicationStatusValue(rw.isApplicationError)) rw.w.Header().Set(AcceptResponseErrorHeader, acceptValue(rw.features.AcceptResponseError)) rw.w.Header().Set("Accept-*", "*") rw.w.WriteHeader(httpStatusCode) if rw.buffer!= nil { // TODO: what to do with error?
 std::ostringstream pt; pt << "LatencyTest_"; if (hostname) { pt << hostname << "_"; } pt << pid << "_PUB2SUB"; PubDataparam.topic.topicName = pt.str(); PubDataparam.times.heartbeatPeriod.seconds = 0;
 in_channels=256, fc_out_channels=1024, roi_feat_size=7, num_classes=20, target_means=[0., 0., 0., 0.], target_stds=[0.1, 0.1, 0.2, 0.2], reg_class_agnostic=False,
 this.exportedSnapshotDetailsCache = instance.getMap(EXPORTED_SNAPSHOTS_DETAIL_CACHE); } // for tests void setResourcesExpirationMillis(long resourcesExpirationMillis) { this.resourcesExpirationMillis = resourcesExpirationMillis;
 ) BeforeEach(func() { felixes, etcd, client = containers.StartTwoNodeEtcdIPIPTopologyWithApplyOnForwardDisabled() // Install a default profile that allows all ingress and egress, in the absence of any Policy. defaultProfile := api.NewProfile()
 /* Should throw an error if rewriting would require an invalid stuffer state. * ( A write cursor being greater than the high water mark is an invalid stuffer state.) */ reservation.write_cursor = stuffer.high_water_mark + 1; EXPECT_FAILURE(s2n_stuffer_write_reservation(reservation, 0), S2N_ERR_SAFETY); EXPECT_EQUAL(stuffer.write_cursor, expected_write_cursor); /* Happy case: successfully rewr
 amrex::LoopOnCpu(section, [&](int i, int j, int k) { amrex::Dim3 si = dtos(amrex::Dim3{i,j,k}); AMREX_ASSERT(array(i,j,k) == (si.x + si.y*nx + si.z*nx*ny)); fails += array(i,j,k)!= (si.x + si.y*nx + si.z*nx*ny); }); } 
 # BSD License import networkx as nx from networkx.utils import reverse_cuthill_mckee_ordering # build low-bandwidth numpy matrix G = nx.grid_2d_graph(3, 3)
 //go:generate dbgen -i agree.sql -p agreement -n agree -o agreeInstall.go -h../scripts/LICENSE_HEADER import ( "github.com/algorand/go-algorand/protocol" "time" "github.com/algorand/go-algorand/config" "github.com/algorand/go-algorand/logging" "github.com/algorand/go-algorand/util/db" "github.com/algorand/g
 sent := &testpb.TestMessage{Value: "echo"} received, err := client.Unary(ctx, sent) require.NoError(t, err) assert.Equal(t, sent, received) }) } }
 namespace WP_Rocket\Engine\Activation; use League\Container\Container; use WP_Rocket\Engine\Activation\ActivationInterface; use WP_Rocket\Engine\Cache\AdvancedCache; class Activation implements ActivationInterface { /** * Aliases in the container for each class that needs to call its activate method
 void MegaApiImpl::startUploadForSupport(const char *localPath, MegaTransferListener *listener) { return startUpload(true, localPath, nullptr, nullptr, "supportdrop@mega.nz", -1, 0, false, nullptr, false, false, listener); } void MegaApiImpl::startDownload(bool startFirst, MegaNode *node, const char* localPath, int folderTransferTag, const char *appDat
 def _cmp_key(self): """Unique key for the object to be used to generate the object hash""" # This key must be equal for two object considered as equal by __eq__ return hash((self.__class__.__name__, self.indices)) def __hash__(self): """Makes the object hashable"""
 $meta_input['_enable_quiz_reset'] = true === $quiz_options['allow_retakes']? 'on' : ''; } if ( array_key_exists('show_questions', $quiz_options ) ) { $meta_input['_show_questions'] = $quiz_options['show_questions']; } else { $meta_input['_show_questions'] = '';
 / std::accumulate(num_samples_list.begin(), num_samples_list.end(), 0)); std::cout << "Model " << m->get_name() << " (" << mode_string << ") training objective function: " << avg_obj_fn << std::endl; }
 end sh.echo "Build id: #{Shellwords.escape(data.build[:id])}" sh.echo "Job id: #{Shellwords.escape(data.job[:id])}" sh.echo "Runtime kernel version: #{Shellwords.escape(`uname -r`.strip)}" end def show_travis_build_version
 except ( expat.ExpatError, SocketServer.socket.error, xmlrpclib.Fault) as exception: logger.warning('Error while making RPC call: {0!s}'.format(exception)) return None, None def Close(self):
 updated_goal = Goal(target='updated target', value='complete') objective_data.update(dict(name='an updated test objective', description='a test objective that has been updated', goals=[updated_goal.schema.dump(updated_goal)])) return objective_data
 INSTALL_DIR_ES = '%s/elasticsearch' % INSTALL_DIR_INFRA TMP_ARCHIVE_ES = '/tmp/localstack.es.zip' # set up logger LOGGER = logging.getLogger(__name__)
 class BigqueryDaoTest(ForsetiTestCase): """Tests for the BigqueryDao.""" @mock.patch.object(_db_connector.DbConnector, '__init__', autospec=True) def setUp(self, mock_db_connector): mock_db_connector.return_value = None
 set last_status = 'failed', last_status_at = now(), status_details = 'failed: contact method disabled', cycle_id = null, user_id = user.id, next_retry_at = null from user_contact_methods cm
 if (tree.isLeaf()) { return value; } else { String children = tree.getChildren().map(Node::toLispString).mkString(" "); return "(" + value + " " + children + ")"; } }
 ) // ProceduresParams contains the parameters for constructing Procedures. // // A ProceduresParams is used to create a Procedures object that is used to // execute procedures on a database. type ProceduresParams struct { Service string Unary   []UnaryProceduresParams
 if (config.networked && config.big) { return; } reconnectOften =!config.memory && config.big; testScript("testScript.sql"); testScript("comments.sql");
 sb.append(","); } if (MESSAGE_DIGEST!= null) { checksum = new BigInteger(1, MESSAGE_DIGEST.digest((sb.toString()).getBytes(Charset.forName("UTF-8")))).toString(16); } else { checksum = RandomStringUtils.randomAscii(32); }
 private long id; private long distance; public long id() { return this.id; } public void id(long id) { this.id = id; } public long distance() { return this.distance; } public void distance(long distance) { this.distance = distance; }
 # if det_bboxes is rescaled to the original image size, we need to # rescale it back to the testing scale to obtain RoIs. if rescale: if not isinstance(scale_factors[0], float): scale_factors = det_bboxes.new_tensor(scale_factors) det_bboxes = det_bboxes[..., :4] det_bboxes *= scale_factors.unsqueeze(1) batch_index = torch.arange( det_bboxes.size
 vrange = vrange or ( 0 if len(v) == 0 else (int(F.asnumpy(F.max(v.tousertensor(), dim=0))) + 1)) if utype == vtype: urange = vrange = max(urange, vrange) num_ntypes = 1
 * SPDX-License-Identifier: Apache-2.0 */ #include <interfaces/iroha_internal/query_response_factory.hpp> #include <model/sha3_hash.hpp> #include "module/irohad/ametsuchi/ametsuchi_mocks.hpp" #include "module/irohad/multi_sig_transactions/mst_mocks.hpp"
 AlertDialog alert = alertDialogBuilder.create(); alert.show(); } else { Toast.makeText(this, getString(R.string.location_service_already_enabled), Toast.LENGTH_SHORT).show(); } }
 row.cell('URL', s.applicationUrl); }); } else { log.info('No mobile services created yet. You can create new mobile services using the Azure Mobile command.'); } callback();
 var bundleResource = bundleRequest.Bundle.ToPoco<Hl7.Fhir.Model.Bundle>(); _bundleType = bundleResource.Type; if (_bundleType == BundleType.Batch) { var responseBundle = new Hl7.Fhir.Model.Bundle { Type = BundleType.BatchResponse,
 [Trait(Traits.Priority, Priority.One)] public async Task WhenCreatingAResource_GivenAUserWithNoCreatePermissions_TheServerShouldReturnForbidden() { await Client.RunAsUser(TestUsers.ReadOnlyUser, TestApplications.ServiceClient); FhirException fhirException = await Assert.ThrowsAsync<FhirException>(async () => await Client.CreateAsync(Samples.GetDefaultPatient())); Assert.Equal(ForbiddenMessage, fhirException.Message); Assert.Equal(HttpStatus
 parent::setUp(); $this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' ); } public function test_should_register_query_using_name_param_by_default() {
 // the deprecated config and will be removed in 1.1.0. endpointID = idutil.ServerID(config.TrustDomain) } else { return nil, errors.New("no SPIFFE ID specified for federation with %q", config.TrustDomain.String()) } }
 "time" cloudevents "github.com/cloudevents/sdk-go" cepubsub "github.com/cloudevents/sdk-go/transport/pubsub/context" "go.uber.org/zap" "knative.dev/pkg/logging" )
 return err } num, ok := checked.NewUInt256("2") if!ok { return ErrBadValue
 beforeUpdatingBalancesTime := time.Now() var trieBalancesHash crypto.Digest // lockTaken variable would help us to ensure that we take the lock before commiting the transaction to the database. // since the function within the "Atomic" might be re-attempted, we need to perform the check at the beginning, and after // we exit from Atomic. Note that there is no concurrently issue within this function around testing the variable valu
 } func (pricer *FixedPricer) MostExpensive() *big.Int { newBigInt := big.NewInt(0).SetUint64(uint64(swarm.MaxPO)) newBigInt = big.NewInt(0).Mul(newBigInt, big.NewInt(0).SetUint64(uint64(pricer.poPrice))) newBigInt = big.NewInt(0).Mul(newBigInt, big.Ne
 @cached_method def cimported_files(self, filename): filename_root, filename_ext = os.path.splitext(filename) if filename_ext in ('.pyx', '.py') and path_exists(filename_root + '.pxd'): pxd_list = [filename_root + '.pxd'] # Cimports generates all possible combinations package.module
 def now(self): """Return the current time and date as a datetime.""" from datetime import datetime now_in_utc = datetime.utcnow() return now_in_utc.astimezone(self.timezone)
 ------ NetworkXNotImplemented The algorithm does not support DiGraph, MultiGraph and MultiDiGraph. Examples --------
 aboutContentDaedalusMembers: { id:'static.about.content.daedalus.members', defaultMessage: '!!!Alan McNicholas, Aleksandar Djordjevic, Alexander Rukin, Amit Sagar, Brian McKenna, Charles Hoskinson, Daniel Main, Danilo Prates, Darko Mijić, Dmitrii Gaico, Dominik Guzei, Elin Liu, Gabriela Ponce, Jane Wi
 */ public static function cleanUpSchemas(OpenApiSpec $spec) { $specArr = $spec->{"$"}; if (empty($specArr["components"]) || empty($specArr["components"]["schemas"])) { return $spec; } foreach (array_keys($specArr['components']['schemas']) as $schemaKey) {
 package net.sourceforge.pmd.lang.java.typeresolution; import java.lang.reflect.Method; import java.util.ArrayList; import java.util.List; import net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition;
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4423-SEA 1645522606 2163167212</p> <hr> <p>Varnish cache server</p> </body>
 package, alt_package = package try: locals()[package] = __import__(alt_package) except ImportError: locals()[package] = __import__(package)
 returnIndexBytes := func(w http.ResponseWriter, r *http.Request) { _, file := filepath.Split(r.URL.Path) http.ServeContent(w, r, file, modTime, bytes.NewReader(indexBytes)) http.ServeContent(w, r, file+".gz", modTime, gzipBytes) } return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
 errCode := func(err error) int { var err2 *googleapi.Error if ok := xerrors.As(err, &err2);!ok { return -1 } return err2.Code
 for(const auto key: m_scalar_keys) { std::string conduit_field = m_output_scalar_prefix + key; std::string conduit_obj = LBANN_DATA_ID_STR + '/' + conduit_field; if(sample[conduit_obj].schema().dtype().is_empty()) { if (data_store_active()) { LBANN_ERROR("Unable to find field " + conduit_obj
 if (iarg+3 > narg) error->all(FLERR,"Illegal pair_style mliap command"); descriptor = new MLIAPDescriptorSNAP(lmp,arg[iarg+2]); iarg += 3; } else if (strcmp(arg[iarg+1],"so3") == 0) { if (iarg+3 > narg) error->all(FLERR,"Illegal pair_style mliap comman
 return false, errors.New("bad kmd data dir") } if (dataDirStat.Mode() & 0077)!= 0 { logging.Base().Errorf("%s: kmd data dir exists but is too permissive (%o), change to (%o)", kc.kmdDataDir, dataDirStat.Mode()&0777, dataDirStat.Mode()^0077) return false, errors.New("kmd data dir
 @Option( names = {"--nodes-whitelist"}, paramLabel = "<enode://id@host:port>", description = "Comma separated enode URLs for Permissioned networks. " + "Default is to use whitelist. If not specified, no permissioning will be done.", split = ",", arity = "1..*" ) private final Collection<String> nodesWhitelist = null;
 parsed = new ExpandMacros(compiledMod, files, def.kompileOptions, false).expand(parsed); } if (options.kore) { ModuleToKORE converter = new ModuleToKORE(compiledMod, files, null); parsed = new AddSortInjections(compiledMod).addInjections(parsed, sort); converter.convert(parsed); System.out.println(converter.toString());
 } } // IsRunning returns whether the peer list is running. func (pl *List) IsRunning() bool { return pl.once.IsRunning()
 func (command *kitCreateCommand) validateArgs(_ *cobra.Command, args []string) error { if len(args)!= 1 { return errors.New("create expects a single name argument.") } return nil
 sc core.SpanContext, remote bool, traceID core.TraceID, spanID core.SpanID, spanName string, spanKind SpanKind, attributes []core.KeyValue,
 return err } if!exists { return ErrChunkNotFoundInLocalStore } // retrieve the chunk from the local store
 id := m.ackID ids = append(ids, id) } err := d.SendAcks(ctx, ids) if err!= nil { // TODO: Handle the error appropriately. } } ab := bundler.NewBundler(&Message{}, handler) if opts == nil {
 std::shared_ptr<shared_model::interface::Account> account_test = clone( shared_model::proto::AccountBuilder().accountId("test@test").build()); EXPECT_CALL(*storage, getWsvQuery()).WillOnce(Return(wsv_query)); EXPECT_CALL(*storage, getBlockQuery()).WillOnce(Return(block_query)); EXPECT_CALL(*wsv_query, hasAccountGrantablePermission( "admin@test", "test@test", can_get_my_acc_detail))
 config.Please.DownloadLocation = "https://get.please.build" config.Please.NumOldVersions = 10 config.Parse.BuiltinPleasings = true config.Build.Arch = cli.NewArch(runtime.GOOS, runtime.GOARCH) config.Build.Nonce = "1402"       // Arbitrary nonce to invalidate config when needed.
 err = registerVoterTx.AddArgument(cadence.NewString(nodeID.String())) require.NoError(s.T(), err) err = registerVoterTx.AddArgument(cadence.NewString(publicStakingKey.EncodedHexRepresentation())) require.NoError(s.T(), err) s.SignAndSubmit(registerVoterTx,
 def union(G, H, rename=(None, None)): """Return the union of graphs G and H. Graphs G and H must be disjoint, otherwise an exception is raised. .. deprecated:: 2.0 The rename parameter is deprecated.  Parameters ----------
 var path = require('path'); var minifyCSS = require('gulp-minify-css'); var rename = require('gulp-rename'); var less = require('gulp-less'); gulp.task('css', function () { return gulp.src('./jupyter_notebook/static/style/*.less').pipe(less({ paths: [ path.join(__dirname, 'less', 'includes') ] }))
 [11.5000, -4.5000, 20.5000,  4.5000], [-4.5000, 11.5000,  4.5000, 20.5000], [11.5000, 11.5000, 20.5000, 20.5000]]) """ def __init__(self,
 bool MegaClient::loggedIntoWritableFolder() const { return loggedIntoFolder() &&!publichandleWriteAuth.empty(); } void MegaClient::userfeedbackstore(const char *message)
 </tr> <tr> <th>{intl.formatMessage(messages.systemTimeIgnored)}:</th> <td className={this.getStatusClassnames(isSystemTimeIgnored)}> {isSystemTimeIgnored? intl.formatMessage(messages.statusOn) : intl.formatMessage(messages.statusOff)}
 { slocalname = new string(); } if (sync->client->fsaccess->getsname(newlocalpath, slocalname) && *slocalname!= localname) { parent->schildren[slocalname] = this; }
 # TODO: Reactor LIMITED_API struct decl closer to the static decl code.putln("#if CYTHON_COMPILING_IN_LIMITED_API") code.putln('typedef struct {') code.putln('PyObject *%s;' % Naming.builtins_cname) code.putln('PyObject *%s;' % Naming.cython_runtime_cname) code.putln('PyObject *%s;' % Naming.empty_tuple)
 log.Fatal().Err(err).Msg("invalid random source") } epochConfig := epochs.EpochConfig{ EpochTokenPayout:             cadence.UFix64(0), RewardCut:                    cadence.UFix64(0),
 CPPUNIT_TEST(runAccessPublicMapWithoutEmailTest); CPPUNIT_TEST(runAccessPrivateMapWithoutEmailTest); CPPUNIT_TEST(runInvalidUserTest); CPPUNIT_TEST_SUITE_END(); public:
 { if (ex!= null) { lock (_pendingRequests) { if (_pendingRequests.TryGetValue(request, out KeyValuePair<DateTime, AsyncContinuation> flushCallback)) _pendingRequests.Remove(request); continuation(ex); if (flushCallback.Value!= null) flushCallback.Value(ex); } return; }
 public static class OptionsDefinitions { public const string LangMarker = "Jpn"; public const string TokenizerRegex = @"[^\w\d]"; public const string TrueRegex = @"\b(はい|そうです|そう|よい)\b|(\uD83D\uDC4D|\uD83D\uDC4C)"; public const string FalseRegex = @"\b(いいえ|ではありません|ではない|じ
 {{end}} {{ if.Search }} AND ( a.id = :search OR a.summary ilike :search OR svc.name ilike :search )
 return i.ch } func (i *inbound) Start(d transport.Dependencies) error { sc := i.ch.GetSubChannel(i.ch.ServiceName()) existing := sc.GetHandlers() sc.SetHandler(handler{existing, d})
 if (countDownLatch.await(2, TimeUnit.SECONDS)) { // Compare sessionPresent flag from AWSIotMqttManager with the actual one assertEquals(testSessionPresentFlag.getSessionPresent(), actualSessionPresent); } else { fail("CountDownLatch timed out."); } }
 namespace Slim; use Psr\Container\ContainerInterface; use Psr\Http\Server\MiddlewareInterface as PsrMiddlewareInterface; use Psr\Http\Server\RequestHandlerInterface; use RuntimeException; use Slim\Adapter\PsrMiddleware as PsrMiddleware; use Slim\Interfaces\CallableResolverInterface; /**
 refpos = positions.mean(axis=0) refpos = refpos.astype(np.float32, copy=False) target = distances.minimize_periodic_vector(reference_point=target_position, center_position=refpos, box=self.dimensions) positions += target - refpos
 "com.fsck.k9.activity.MessageCompose.quotedTextFormat"; private static final String STATE_KEY_NUM_ATTACHMENTS_LOADING = "numAttachmentsLoading"; private static final String STATE_KEY_WAITING_FOR_ATTACHMENTS = "waitingForAttachments"; private static final String STATE_FIRST_TIME_EMPTY_SUBJECT = "firstTimeEmptySubject"; private static final String LOADER_ARG_ATTACHMENT = "attachment"; private static final String FRAGMENT_WAITING_FOR_ATTACHMENT = "waitingForAttachment";
 throw new UnsupportedOperationException("Cannot rename Hadoop tables"); } @Override public void close() throws IOException { }
 # mongocrypt_t object and raise an exception if the operation fails def set_kms_providers_aws(kms_providers) unless kms_providers[:aws] raise ArgumentError.new('The :aws KMS provider must not be nil') end access_key_id = kms_providers[:aws][:access_key_id]
 const menu = menuItems.map(item => { return ( <Link className={classes.link} key={item.name} to={item.url}> <FormattedMessage id={item.id} defaultMessage={item.id} /> </Link> ); });
 if (!s.isGoogleChromeAvailable()) { htmlClass += "browserNotAvailable "; imgSrc = imgSrc.split(".png")[0].concat("_unavailable.png"); title = "browser unavailable"; } else { htmlClass += "browserAvailable "; } else if (browserName.contains(BrowserType.IE) || browserName.contains(BrowserType.IEXPLORE)) if (!s.isInternetExplorerAvailable()) { htmlClass += "browserNotA
 return result, err } const logLevel = level.Debug func (in *devSQLInterceptor) logQuery(start time.Time, query string, args []driver.NamedValue, err error) { space := regexp.MustCompile(`\s+`) query = strings.TrimSpace(space.ReplaceAllString(query, " ")) in.logger.Log(logLevel, "duration", time.Since(start), "query", query, "args", argsToString(args), "err", err) }
 #ifdef ENABLE_SYNC p->Add(exec_sync, sequence(text("sync"), opt(either(sequence(localFSPath(), remoteFSPath(client, &cwd), "dst"), param("cancelslot"))))); p->Add(exec_syncconfig, sequence(text("syncconfig"), opt(sequence(param("type (TWOWAY/UP/DOWN)"), opt(sequence(param("syncDeletions (ON/OFF)"), param("forceOv
 V value = this.zkValues.get().get(key); if (value == null) { LOG.trace("ApiCache returned null for {}", key); } return value;
 * source code. */ use Neos\ContentRepository\Domain\Model\Node; use Neos\Eel\ProtectedContextAwareInterface; use Neos\Neos\Exception;
 @NECKS.register_module() class ChannelMapper(nn.Module): r"""Channel Mapper to map channels of backbone features. This is used to map channels of backbone features. Args: in_channels (List[int]): Number of input channels per scale.
 self.__add_result_listeners(jmx) if not is_jmx_generated: self.__force_tran_parent_sample(jmx) self.__fill_empty_delimiters(jmx) return jmx
 election := &lib.Election{} _, err := s.Open(&evoting.Open{Token: token, ID: master.ID, Election: election}) assert.Error(t, err) assert.Contains(t, err.Error(), "election cannot end before current time") } func TestOpen_Full(t *testing.T) {
 # this is important for some web applications that store authentication-related info in cookies (it took a long time to figure out) if response2.headers.get('set-cookie'): headers['set-cookie'] = response2.headers.get('set-cookie') # get the challenge auth_header_value = response2.headers[auth_header_field]
 void testSameType() { validator().addInputLines( "Test.java", "public class Test {", "  public void badMethod(Integer a, Integer b) {}", // 2nd line is indented }").expectUnchanged().doTestExpectingFailure(TEST_MODE); }
 var rootCmd = &cobra.Command{ Use:   "epochs", Short: "This tool encapsulates all commands required to interact with Epochs, from recovery to deployment.", } var RootCmd = rootCmd
 } listenToCommands() { this.events.setCommandHandler('start-webserver', () => { this.logger.info('Starting web server...'); this.server.start(); }); this.events.setCommandHandler('stop-webserver',  () => { this.logger.info('Stopping web server...'); this.server.stop(); }); } registerConsoleCommands() {
 PartitionField existingField = nameToField.get(newName); if (existingField!= null && isVoidTransform(existingField)) { // rename the old deleted field that is being replaced by the new field renameField(existingField.name(), existingField.name() + "_" + existingField.fieldId()); } PartitionField added = nameToAddedField.get(name);
 byte[] exp; if (byteBuffer.hasArray()) { exp = byteBuffer.array(); pos = byteBuffer.arrayOffset() + compressStart; } else { exp = Utils.newBytes(expLen); buff.position(compressStart).get(exp);
 /// </summary> [Tooltip("Should the server auto-start when 'Server Build' is checked in build settings")] [FormerlySerializedAs("startOnHeadless")] public bool startIfServerBuild = true; [System.Obsolete("Use startIfServerBuild instead.")] public bool startOnHeadless { get => startIfServerBuild; set => startIfServerBuild = value; } /// <summary> /// Enables verbose debug messages in the console
 flag.DurationVar(&flags.probe.publishInterval, "probe.publish.interval", 3*time.Second, "publish (output) interval") flag.DurationVar(&flags.probe.spyInterval, "probe.spy.interval", time.Second, "spy (scan) interval") flag.StringVar(&flags.probe.pluginsRoot, "probe.plugins.root", "/var/run/scope/plugins", "Root directory to search for plugins") flag.BoolVar(&flags.probe.r
 else { viewModel = Mvx.IocConstruct(viewModelType) as IMvxViewModel; if (viewModel == null) { return; }  request = new MvxViewModelInstanceRequest(viewModel){ ParameterValues = new MvxBundle(paramDict).SafeGetData() }; } _viewDispatcher.ShowViewModel(request);
 } // update peer connections if this middleware also does peer management if m.peerManager!= nil { m.peerManager.RequestPeerUpdate() } return nil }
 ReasonsGroupType reason; reason.first = "Transaction list"; for (const auto &tx : transactions) { auto answer = tx_validator_.validate(tx); if (answer.hasErrors()) { auto message = (boost::format("Tx %s : %s") % tx.hash().hex() % answer.reason())
 Protocol: protocol, }, } if e.Metadata[graph.DestPrincipal]!= nil { ed.DestPrincipal = e.Metadata[graph.DestPrincipal].(string) } if e.Metadata[graph.SourcePrincipal]!= nil { ed.SourcePrincipal = e.Metadata[graph.SourcePrincipal].(string) } addEdgeTelemetry(e, &ed) ew := EdgeWrapper{
 import pandas from pandas.api.types import is_scalar from pandas.compat import to_str, string_types, numpy as numpy_compat, cPickle as pkl import pandas.core.common as com from pandas.core.dtypes.common import ( _get_dtype_from_object,
 premium=premium, ) elif given_module == 'uniswap': self.eth_modules['uniswap'] = Uniswap( provider=self.provider, chain_id=self.chain_id, ) elif given_module == 'yearn_vaults': self.eth_modules['yearn_vaults'] = YearnVaults(
 requestsDropped.increment(); delegate.onDropped(); }  @Override public String toString() { return MoreObjects.toStringHelper(this).add("delegate", delegate).add("requestsDropped", requestsDropped).toString(); } }; }
 Ω(mtdAttribute.Metadata).To(Equal(expected)) }) }) Context("with unicode characters", func() { BeforeEach(func() { metadataKey = "abc123一二三" metadataValue = "˜µ≤≈ç√"
 - email        Set the Entrez email parameter (default is not set). - tool         Set the Entrez tool parameter (default is ``biopython``). - api_key      Personal API key from NCBI. If not set, only 3 queries per second are allowed. 10 queries per seconds otherwise with a valid API key. - max_tries    Configures how many times failed requests will be automatically retried on erro
 // ack is a closure that queues this message for acknowledgement. ack func() // acked tells whether this message has already had its Ack method // called. acked bool
 // TopicOptions will contain configuration for topics. type TopicOptions struct{} // OpenTopic creates a *pubsub.Topic backed by GCP PubSub for the given projectID // and topicName. func OpenTopic(ctx context.Context, client *raw.PublisherClient, proj gcp.ProjectID, topicName string, opts *TopicOptions) *pubsub.Topic { dt := openTopic(ctx, client, proj, topicName) return pubs
 * * @since 2.11 */ $image = wp_get_attachment_image( $custom_logo_id, apply_filters( 'hfg_logo_image_size', 'full' ), false, $logo_settings ); do_action( 'hfg_after_wp_get_attachment_image', $custom_logo_id, $image );
 const karmaPluginHydrationTests = require('../../karma-plugins/hydration-tests'); const karmaPluginEnv = require('../../karma-plugins/env'); const BASE_DIR = path.resolve(__dirname, '../../../test-hydration'); const COVERAGE_DIR = path.resolve(__dirname, '../../../coverage');
 return ihipLogStatus(hipErrorLaunchFailure); } uint impCoopArg = 1; void* impCoopParams[1] = { &impCoopArg };
 var adminClient = await admin.CreateClient(Policies.CanModifyStoreSettings); var admin2Client = await admin2.CreateClient(Policies.CanModifyStoreSettings, Policies.CanModifyServerSettings); var viewOnlyClient = await admin.CreateClient(Policies.CanViewStoreSettings); tester.PayTester.GetService<BTCPayServerEnvironment>().DevelopmentOverride = false; tester.PayTester.GetService<BTCPayServerEnvironment>().UseLocalIpAddress = true; var store = aw
 return diskInUseScore; } void addEstimatedCpuUsage(double estimatedAddedCpus) { this.estimatedAddedCpusUsage += estimatedAddedCpus; }
 // Map of supported protocols. // HTTP/2 only supports TLS 1.2 and higher. var SupportedProtocols = map[string]uint16{ "tls1.2": tls.VersionTLS12, } // Map of supported ciphers, used only for parsing config. // // Note that, at time of writing, HTTP/2 blacklists 276 cipher suites,
 if c.storageRoot == "" { return errors.New("empty storageRoot specified for non-test run") } if c.IsTestMode() { return } ldb, err := c.openConfigLevelDB(syncedTlfConfigFolderName) if err!= nil { return err }
 if tx_dict['operation'] in [Transaction.CREATE, Transaction.GENESIS]: # TODO: Maybe replace this call to a call to get_asset_by_id asset = list(bigchain.get_assets([tx_dict['id']]))[0] del asset['id'] tx_dict.update({'asset': asset}) return cls.from_dict(tx_dict)
 func (o *CreateOptions) BindFlags(flags *pflag.FlagSet) { o.BackupOptions.BindFlags(flags) // hide the Backup options --from-schedule flag flags.MarkHidden("from-schedule") flags.StringVar(&o.Schedule, "schedule", o.Schedule, "a cron expression specifying a recurring schedule for this backup to run") }
 func newOrderHandler(ctx context.Context, loc string, o *pb.Order) (*orderHandler, error) { ctx, cancel := context.WithCancel(ctx) defer cancel() cc, err := util.MakeGrpcClient(ctx, loc, nil) if err!= nil {
 ws.localSSHListener, err = b.establishSSHTunnel(ws) if err!= nil { handleError(ws.WorkspaceID, "cannot establish SSH tunnel", err) } }() }
 upsample_ratio=2, num_classes=81, class_agnostic=False, upsample_cfg=None, conv_cfg=None, norm_cfg=None, loss_mask=dict(
 "/foo/{org_name}/Bar":    "foo_org_name_bar", "/foo/{org__name}/Bar":   "foo_org_name_bar", "/foo/{org___name}/_Bar": "foo_org_name_bar", "/foo/{org_name}/":        "foo_org_name", "/foo/{org__name}/":       "foo_org_name", "/foo/{org___name}/":      "foo_org_name",
 r.Status.Phase = velerov1api.PodVolumeBackupPhaseCompleted r.Status.SnapshotID = snapshotID if emptySnapshot { r.Status.Message = "volume was empty so no snapshot was taken" } }) if err!= nil {
 // Get implements the merklearray.Array interface. func (tma *txnMerkleArray) GetHash(pos uint64) (crypto.Digest, error) { if pos >= uint64(len(tma.block.Payset)) { return crypto.Digest{}, fmt.Errorf("txnMerkleArray.Get(%d) out of bounds %d", pos, len(tma.block.Payset)) } if pos < uint64(len
 from system import environment LIST_FILE_BASENAME = 'file_list.txt' TESTCASES_PER_DAY = 2000 def upload_testcases_if_needed(fuzzer_name, testcase_list, testcase_directory,
 content_type='text/html') LOGGER.debug('Inventory summary sent successfully by email.') except EmailSendError: LOGGER.exception('Unable to send Violations email') @staticmethod def transform_to_template(data):
 break; } } } catch (MessagingException e) { /* * Let the user continue composing their message even if we have a problem processing * the source message. Log it as an error, though.
 public ItalianHolidayParserConfiguration(IOptionsConfiguration config) : base(config) { ThisPrefixRegex = new Regex(DateTimeDefinitions.ThisPrefixRegex, RegexFlags.Singleline); NextPrefixRegex = new Regex(DateTimeDefinitions.NextPrefixRegex, RegexFlags.Singleline); PreviousPrefixRegex = new Regex(DateTimeDefinitions.PreviousPrefixRegex, RegexFlags.Singleline); this.HolidayRegexList = ItalianHolidayExtractorConfiguration.HolidayRegexList; this.HolidayNames = DateTimeDefinitions.
 extern const struct batch_queue_module batch_queue_mesos; extern const struct batch_queue_module batch_queue_k8s; extern const struct batch_queue_module batch_queue_dryrun; #ifdef CCTOOLS_WITH_MPI extern const struct batch_queue_module batch_queue_mpi; #endif
 // client event Action ClientConnected; event Action<byte[]> OnClientDataReceived; event Action<Exception> OnClientError; event Action OnClientDisconnected; bool IsClientConnected();
 dependent_targets = recursive_dependent_targets dependent_targets += recursive_test_dependent_targets if include_test_dependent_targets dependent_targets.each do |dependent_target| header_search_paths.concat(sandbox.public_headers.search_paths(platform, dependent_target.pod_name, defines_module? && dependent_target.uses_modular_headers?(false))) end header_search_paths.uniq end
 if (!isFlight || (isFlight && areTermsAccepted)) { const walletWarning = ( <div className={styles.flightCandidateWarning}> {getMessages().emptyingWarning} </div> );
 icon_changed = pyqtSignal(QIcon) #: Signal emitted when a page's title changed (new title as str) title_changed = pyqtSignal(str) #: Signal emitted when a new search is started (search name as str) search_started = pyqtSignal(str) #: Signal emitted when a page's currently active search match changed (match as current/total) search_match_changed = pyqtSignal(int, int) #: Signal emitted when this ta
 return result; } static void on_context_init(h2o_mruby_handler_t *_handler, h2o_context_t *ctx, h2o_pathconf_t *pathconf) { h2o_mruby_context_t *handler_ctx = h2o_mem_alloc(sizeof(*handler_ctx)); handler_ctx->handler = _handler; handler_ctx->shared = get_shared_context(ctx); handler_ctx->pathconf = pathconf; mrb_state
 """ def replace_text_elements(node): """Traverse the AST and perform find and replace on text values only""" if type(node) == ast.TextElement: node.value = node.value.replace(find, replace) return node
 ir_set: irast.Set, orig_stype: s_types.Type, new_stype: s_types.Type, cardinality_mod: Optional[qlast.CardinalityModifier] = None, *, ctx: context.ContextLevel) -> irast.Set: orig_typeref = typegen.type_to_typeref(orig_stype, env=ctx.env)
 class CreateStatuses < ActiveRecord::Migration def change create_table :statuses do |t| t.string :status t.integer :user_id t.timestamps end
 stubService('auth', authStub); }); test('it shows the priority action modal and loading indicator if task is in running state', async function (assert) { this.set('build', EmberObject.create()); this.set('job', EmberObject.create()); this.set('priority', EmberObject.create({ isRunning: true }));
 // Run again if we have a release version as well if releaseSubstring!= "" { rawComponents = componentRegex.FindAllString(releaseSubstring, -1) v.releaseComponents = make([]uint64, len(rawComponents)) for i := range rawComponents { // Base36 to support lowercase characters
 $command[] = $verbose; } // Older versions of symfony/process expect a string (see #1956) if (method_exists(Process::class,'setCommandline')) { $command = implode(' ', $command); } $process = new Process($command); // Increase the timeout according to terminal42/background-process (see #54) $process->setTimeout(500);
 * @throws NodeConfigurationException * @throws NodeTypeNotFoundException */ public function createVariantForContext(Context $context): void { $autoCreatedChildNodes = []; $nodeType = $this->getNodeType();
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4443-SEA 1645526573 1444202216</p> <hr> <p>Varnish cache server</p> </body>
 throw new UnknownFormatException("Unable to read image format", e); } if (inputResult.bufferedImage == null) { // ImageIO doesn't support the image format or the image is corrupted throw new UnknownFormatException("Failed to transform image because the source format is unknown"); }
 "Usage:\n" + "    <functionName> \n\n" + "Where:\n" + "    functionName - the name of the function to delete.\n"; if (args.length!= 1) { System.out.println(USAGE);
 } break; case EOO: if (v) {
 import org.apache.zookeeper.KeeperException; import org.apache.zookeeper.KeeperException.NoNodeException; import org.apache.zookeeper.KeeperException.NotEmptyException; import org.apache.zookeeper.ZooKeeper; public class ZooQueueLock implements QueueLock { private static final String PREFIX = Constants.ZLOCK_PREFIX + UUID.randomUUID() + "#"; private ZooReaderWriter zoo; private String path;
 } defer archiveFile.Close() var log = log.WithField("archive", archivePath) var a = archive.New(archiveFile) defer a.Close() // nolint: errcheck
 if (score == 0) { const char *app_id = as_app_get_id_filename (app); if (g_strcasestr (app_id, search_text)!= NULL) score = 50; else continue;
 """ update cpp11 extensions that will run on versions of gcc >4.8 """ gcc_version = get_gcc_version() if gcc_version is None: return cc, ld, env if float(gcc_version) > 4.8: compile_flags, link_flags = flags
 self->state.self = self; self->state.path = path; self->state.archive = legacy_archive; self->state.id = to_string(id); self->state.name = "partition-" + self->state.name; VAST_TRACEPOINT(passive_partition_spawned, id_string.c_str()); self->set_exit_handler([=](const caf::exit_msg& msg) {
 EXPECT_SUCCESS(s2n_client_hello_send(client_conn)); EXPECT_SUCCESS(s2n_stuffer_copy(&client_conn->handshake.io, &server_conn->handshake.io, s2n_stuffer_data_available(&client_conn->handshake.io))); EXPECT_SUCCESS(s2n_client_hello_recv(server_conn)); s2n_connection_free(client_conn); s2n_connection_free(server_conn);
 """Tests for future.experimental.users.ahoying.forseti-security.tests.services.inventory.cai_temporary_storage.""" from future import standard_library standard_library.install_aliases()
 } }); } if (LOG.isTraceEnabled()) { LOG.trace("Children nodes (size: {}): {}", validChildren.size(), validChildren); } return validChildren; }
 "userscripts", cmd) log.misc.debug("Userscript to run: {}".format(cmd_path)) runner.run(cmd_path, *args, env=env, verbose=verbose) runner.finished.connect(commandrunner.deleteLater) runner.finished.connect(runner.deleteLater)
 public function scopes() { return array( 'core' => array( 'condition' => 'core_theme = :true AND extends = :extends', 'params' => array(':true' => 1, ':extends' => ''), ),  'user' => array( 'condition' => 'core_theme = :true AND extends = :extends', 'params' => array(':true' => 1, ':extends' => ''), ),
 end env = Puppet.lookup(:environments).get('production').override_with(modulepath: [moduledir]) # Ensure custom facts are available for provider suitability tests Puppet::Node::Facts.indirection.find('puppetversion', environment: env) report = if Puppet::Util::Package.versioncmp(Puppet.version, '5.0.0') > 0 Puppet::Transaction::Report.new
 break; } if ((ers[i].Type.Equals(Constants.SYS_DATETIME_DATE, StringComparison.Ordinal) && ers[j].Type.Equals(Constants.SYS_DATETIME_TIME, StringComparison.Ordinal)) || (this.config.CheckBothBeforeAfter && ers[j].Type.Equals(Constants.SYS_DATETIME_DATE, StringComparison.Ordinal) && ers[i].Type.Equals(Constants.SYS_DATETIME_TIME, StringComparison.Ordinal))) { var middleBegin = ers[i].Start + er
 class StackWidget(urwid.Frame): def __init__(self, window, widget, title, is_focused): self.f = is_focused self.window = window if title:
 nowPlayingPositionSlider.value = 0; } if (runtimeTicks && positionTicks!= null && currentRuntimeTicks &&!enableProgressByTimeOfDay && currentItem.RunTimeTicks && currentItem.Type!== 'Recording' && playbackRate!== null) { endsAtText.innerHTML = '&nbsp;&nbsp;&nbsp;&nbsp;' + mediaInfo.getEndsAtFromPosition(runtimeTicks, positionTicks, playbackRate, true); } else { endsAtText.innerHTML = ''; }
 } $extra = array(); if ($installed!= false && $configure_link == false) { $extra['colspan'] = 2; }
 return data @ma.post_load def build_planner(self, data, **kwargs): return [] if kwargs.get('partial') is True else Operation(**data)
 /** * TODO to be improved by loading only if required and only in the user language * Load ingredients from (the server or) local database * If SharedPreferences lastDownloadIngredients is set try this : *  if file from the server is newer than last download delete database, load the file and fill database, *  else if database is empty, download the file and fill database, *  else return the content from the local database.
 printf("Application protocol: %s\n", s2n_get_application_protocol(conn)); } if (s2n_connection_get_curve(conn)) { printf("Curve: %s\n", s2n_connection_get_curve(conn)); } uint32_t length; const uint8_t *status = s2n_connection_get_ocsp_response(conn, &length);
 sClient := c.kclient.CoreV1().Secrets(am.Namespace) if err := sSecret.StoreSecrets(ctx, sClient); err!= nil { return nil, errors.Wrapf(err, "failed to create TLS assets secret for Alertmanager") } level.Debug(c.logger).Log("msg", "tls-asset secret: stored")
 mode = os.fstat(file_obj.fileno()).st_mode return stat.S_ISFIFO(mode) or stat.S_ISREG(mode)
 "Please Report this as a bug, and send in data file." def _translate(self, options): """Translates a Nexus file (PRIVATE).""" self.translate = {} opts = CharBuffer(options) while True:
 package org.apache.fineract.notification; import java.util.Collections; import org.apache.fineract.notification.domain.Notification; import org.apache.fineract.notification.domain.NotificationMapper; import org.apache.fineract.notification.service.NotificationGeneratorReadRepositoryWrapper;
 private final EnumSet<MetricCategory> enabledCategories = EnumSet.allOf(MetricCategory.class); PrometheusMetricsSystem() {} public static MetricsSystem init(final MetricsConfiguration metricsConfiguration) { if (!metricsConfiguration.isEnabled()) {
 public void pendingTransactionRetentionPeriod() { final int pendingTxRetentionHours = 999; parseCommand("--tx-pool-retention-hours", String.valueOf(pendingTxRetentionHours)); verify(mockTransactionPoolConfigurationBuilder).pendingTxRetentionPeriod(pendingTxRetentionHours); assertThat(commandOutput.toString()).contains("Pending transaction retention period set to 999 hours"); assertThat(commandErrorOutput.toString()).isEmpty(); }
 #include <set> #ifdef VITA #include <SDL2/SDL.h> #endif namespace
 res.Error = handlers.NotFoundError() return res } case action.ListSelf, action.List: // TODO: DO NOT SUBMIT until this is populated case action.Read, action.Cancel: repo, err := s.repoFn() if err!= nil {
 } } // GetEnvironment returns the Environment metadata from the CloudFormation stack. func (cf CloudFormation) GetEnvironment(projectName, envName string) (*archer.Environment, error) { conf := stack.NewEnvStackConfig(&deploy.CreateEnvironmentInput{ Project: projectName, Name:    envName,
 cmd.Flags().String(optionNameTracingServiceName, "bee", "service name identifier for tracing") cmd.Flags().String(optionNameVerbosity, "info", "log verbosity level 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=trace") cmd.Flags().String(optionWelcomeMessage, "", "send a welcome message string during handshakes") cmd.Flags(
 ) # Get the molecule type mol_type = self._get_annotation_str(record, "molecule_type", default=None) if mol_type and len(mol_type) > 7: # Deal with common cases from EMBL to GenBank mol_type = mol_type.replace("unassigned ", "").replace("genomic ", "")
 func BuildCreate(rw http.ResponseWriter, r *http.Request) *httperr.Error { build := models.NewBuild(mux.Vars(r)["app"]) if build.IsRunning() { return httperr.Errorf(403, "another build is currently running. Please try again later.") }
 end=kwargs.pop('end', None), trading_calendar=self.trading_calendar, ) self.perf_tracker = None # Pull in the environment's new AssetFinder for quick reference
 <div class="tablenav <?php echo esc_attr( $which );?>"> <?php if ( 'bottom' === $which ) :?> <div class="alignright"> <?php printf( '<button type="button" name="revoke-all-application-passwords" id="revoke-all-application-passwords" class="button delete">%s</button>', __( 'Revoke all application passwords' ) );?> </div>
 void setBottomSheetDetailsSmaller(); } interface PlacesListView { void updateListFragment(List<Place> placeList); }
 }; getNetworkParameters = async ( epochId: string ): Promise<GetNetworkParametersResponse> => { // TODO: add support for multiple networks const networkId = 0;  logger.debug('AdaApi::getNetworkParameters called'); try {
 import java.util.concurrent.FutureTask; import java.util.concurrent.TimeUnit; import com.google.inject.Inject; import com.hubspot.singularity.executor.config.SingularityExecutorConfiguration; import com.spotify.docker.client.DockerClient;
 // Create implements the fs.NodeCreater interface for TLF. func (tlf *TLF) Create(ctx context.Context, req *fuse.CreateRequest, resp *fuse.CreateResponse) (_ fs.Node, _ fs.Handle, err error) { tlf.log().CDebugf(ctx, "TLF Create %s", req.Name) defer func() { tlf.folder.reportErr(ctx, libkbfs.CreateMode, er
 const { email, subject, description: body } = this; try { return yield this.ajax.post(createRequestEndpoint, { travisApiVersion: false, host: apiHost, data: { request: {
 /** * Props for {@link ProductImageCarousel} * * @typedef {Object} ProductImageCarouselProps * * @property {Object} classes An object containing the class names for the * ProductImageCarousel component
 return Sets.union(scopesConfiguration.getRead(), scopesConfiguration.getWrite()); case WRITE: return scopesConfiguration.getWrite(); case EXEC: return scopesConfiguration.getExec(); case ADMIN: default: return scopesConfiguration.getAdmin();
 logger:       logging.FromContext(ctx), pubsub:       client, brokerConfig: brokerConfig, topics:       make(map[types.NamespacedName]*pubsub.Topic), configMap:    make(map[types.NamespacedName]map[string]string), } }
 'vase','scissors', 'teddy bear', 'hair drier', 'toothbrush') def load_annotations(self, ann_file): """Load annotation from COCO style annotation file. Args: ann_file (str): Path of annotation file.
 using namespace sofa::defaulttype; // Register in the Factory int SPHFluidSurfaceMappingClass = core::RegisterObject("SPHFluidSurfaceMappingClass").addAlias("MarchingCubeMapping").add< SPHFluidSurfaceMapping< Vec3Types, Vec3Types > >() ;
'scripts/enable_bls','scripts/create_dirs.sh','scripts/indy_old_cli_export_dids','scripts/setup_indy_node_iptables'] )
 [](iroha::expected::Error<std::string> &error) { FAIL() << "MutableStorage: " << error.error; }); auto block = shared_model::proto::from_old(block1); ms->apply(block, [](const auto &blk, auto &query, const auto &top_hash) { return true; }); storage->commit(std::move(ms));
 return removed; } void initiateChop() { Set<StoredTabletFile> allFiles = tablet.getDatafiles().keySet(); ChopSelector chopSelector = new ChopSelector(); synchronized (this) { if (fileMgr.getChopStatus() == FileSelectionStatus.NOT_ACTIVE) {
 $ptable = $GLOBALS['TL_DCA'][$this->strTable]['config']['ptable']; $ctable = $GLOBALS['TL_DCA'][$this->strTable]['config']['ctable']; if ($ptable === null && ($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['mode']?? null) == 5) { $ptable = $this->strTable; }
 @request_params[:cookies].merge! cookies end def process_response(options = {}, &block) retries = options[:tries] || 3 response = GoodData::Rest::Connection.retryable(:tries => retries, :refresh_token => proc { refresh_token unless options[:dont_reauth] }) do block.call end
 return value }() var DefaultTransactionFees = func() cadence.UFix64 { value, err := cadence.NewUFix64("0") if err!= nil { panic(err) } return value }
 } ctx := context.Background() if webSite { return startReferenceDocsSite(ctx, c, ioStreams, args[0]) } return ShowReferenceConsole(ctx, c, ioStreams, args[0]) }, Annotations: map[string]string{ types.TagCommandType: types.TypeStart,
 public void sendBeat() throws IOException, InterruptedException { RaftPeer local = peers.local(); if (ApplicationUtils.getStandaloneMode() || local.state!= RaftPeer.State.LEADER ) { return; } if (Loggers.RAFT.isDebugEnabled()) {
 $link_styles   = $this->find( '<noscript[^>]*>.*'. '<link\s+([^>]+[\s"\'])?href\s*=\s*[\'"]\s*?([^\'"]+\.css(?:\?[^\'"]*)?)\s*?[\'"]([^>]+)?\/?>'. '.*<\/noscript> (*SKIP)(*FAIL)|'. $link_style_patte
 { Attributes = { new JsonAttribute("date", "${longdate}", true), new JsonAttribute("level", "${level}", false), new JsonAttribute("message", "${message}", true), } };
 settingsInstance = null; } }); }; });
 { S2N_ERR_ECDHE_GEN_KEY, "Failed to generate an ECDHE key" }, { S2N_ERR_ECDHE_SHARED_SECRET, "Error computing ECDHE shared secret" }, { S2N_ERR_ECDHE_UNSUPPORTED_CURVE, "Unsupported EC curve was presented during an ECDHE handshake" }, { S2N_ERR_ECDHE_SERIALIZING, "Error serializing ECDHE publ
 :param content: what gets written into the file :return: None """ with open(filename, 'w') as f: f.write(content) def print_stdout(line):
 { QPixmap resizedPixmap = avatarPixmap.scaled(avatarLabel.size(), Qt::KeepAspectRatio, Qt::SmoothTransformation); avatarLabel.setPixmap(resizedPixmap); QWidget::resizeEvent(event); }
 no_cmd_split: If true, ';;' to split sub-commands is ignored. backend: Which backend the command works with (or None if it works with both) no_replace_vars: Whether or not to replace variables like {url} _qute_args: The saved data from @cmdutils.argument _needs_js: Whether the command needs javascript enabled _modes: The modes the command can be executed in.
 Topic *string `json:"topic,omitempty"` } // CloudBuildSourceEventSource returns the Cloud Build CloudEvent source value. func CloudBuildSourceEventSource(googleCloudProject, buildId string) string { return fmt.Sprintf("//cloudbuild.googleapis.com/projects/%s/builds/%s", googleCloudProject, buildId)
 dynamicFactory             client.DynamicFactory fileSystem                 filesystem.Interface namespaceClient            corev1.NamespaceInterface restoreItemActions         []framework.RestoreItemResolvedAction itemSnapshotterActions     []framework.ItemSnapshotterResolvedAction volumeSnapshotterGetter    VolumeSnapshotterGetter resticRestorer             restic.Restorer
 } byte[] bytes = createGIFFromImages(bitmaps); File file = new File(Environment.getExternalStorageDirectory() + "/" + "Phimpme_gifs"); DateFormat dateFormat = new SimpleDateFormat("ddMMyy_HHmm"); String date = dateFormat.format(Calendar.getInstance().getTime()); if(file.exists() && file.isDirectory()){ FileOutputStream outStream = null;
 def _assert_in(output, string): assert string in output, "Output '{0}' does not match required format '{1}'.".format( output.replace('\r', '\\r'), string.replace('\r', '\\r'))) def test_default_ProgressMeter(buffer, n=101, interval=10): format = "Step {step:5d}/{numsteps} [{percentage:5.1f}%]"
 } } // refresh other kerning input boxes if they are the same characters static int MV_ChangeKerning_Nested = 0; int refreshOtherPairEntries = true;
 type SinkFormat string // SinkFormat defines the formatting for a sink in a config file stanza (json) func (f SinkFormat) Validate() error { const op = "event.(SinkFormat).Validate" switch f { case JSONSinkFormat: return nil
 ) ) # Automatic installation of exact versions *only*. if version =~ /^\d+\.\d+\.\d+$/ && cabal_version =~ /^(2\.\d+\.\d+)$/ sh.raw "if! travis_ghc_find '#{version}' &>/dev/null; then" sh.raw 'travis_fold start ghc.install' sh.echo "ghc-#{version} is not installed; attempting installation", ansi: :yellow
 const htmlDataset = document.querySelector('html').dataset; const { imageOptimizingOrigin } = htmlDataset; // Protect against potential falsy values for `mediaBackend`. let mediaBackend = storage.getItem('store_view_secure_base_media_url'); if (!mediaBackend) { console.warn('A media backend URL should be defined in your config.'); mediaBackend = 'https://backend.test/media/';
 def get_dhcp_pid(self): return self._get_dhcp_pid(["pidof", "dhcpcd"]) def restart_if(self, ifname, retries=None, wait=None): logger.info('restarting {} (sort of, actually SIGHUPing dhcpcd)'.format(ifname)) pid = self.get_dhcp_pid() if pid!= None: # pylint: disable=C0121
 } // Plan if (this.params.plan) { vmProfile.plan = this.params.plan; }
 namespace Microsoft.Health.Fhir.SqlServer.Features.Operations.Import.DataGenerator { internal abstract class TableBulkCopyDataGenerator : TableBulkCopyDataGenerator<SqlBulkCopyDataWrapper> { internal abstract string TableName { get; }
 * @flow */ import React from'react'; import {trackCustomEvent} from 'gatsby-plugin-google-analytics'; import {sharedStyles} from 'theme';
 group.add_argument( "--keep-host-header", action="store_true", dest="keep_host_header", help="Keep the original host header in reverse-mode. The default is to modify the host header to reflect the upstream server address during reverse proxying request." )
 html += '<div class="' + cssClass + '">'; var moreIcon = '&#x25b7'; html += getTextLinesHtml(textlines, isLargeStyle);
 self.max_pokemon_storage = inventory.get_pokemon_inventory_size() self.last_pokemon_count = 0 self.config_transfer = self.config.get("transfer", False) self.config_evolve = self.config.get("evolve", False) self.config_evolve_time = self.config.get("evolve_time", 20) self.config_evolve_for_xp = self.config.get("evolve_for_xp", False) self.config_evolve_o
 >>> target = LocalTarget('~/some_file.txt') >>> target = LocalTarget(pathlib.Path('~') /'some_file.txt') >>> target.exists()  # doctest: +SKIP """
 /** * Returns the identifier of this node with additional context information (such as the workspace name). * * Example: 661369c8-826a-63db-ad24-23a61a6800fe@user-admin * * @return string Node identifier with context information * @api
 } function keyChange(d) { var kOld = d.key.trim(), kNew = this.value.trim(), tag = {}; if (kNew && kNew!== kOld) { var a = kNew.match(/^(.*)_(\d+)$/); if (a) { var base = a[1], suffix = (a[2])? parseInt(a[2]) : 1; } while (tags[kNew]) {
 // org.jivesoftware.util.cache.CacheFactory.joinedCluster). This means that they now hold data that's // available on all other cluster nodes. Data that's available on the local node needs to be added again. restoreCacheContent(); notifyListenersOfClusterChange(); } @Override
 const ( DefaultFormat = "" JSONFormat    = "json" TextFormat    = "text" ) func NewLogger(logLevel, format, fileName string) (logrus.FieldLogger, error) {
 * * Filters the columns that are displayed in learner management * * @param {array}   $columns The default columns. * @param {object}  $sensei_learners_main Sensei_Learners_Main instance. * * @return {array} The modified default columns */
 return if packages.empty? packages = Array(packages) if config[:os] == 'linux' if!config[:sudo] or config[:dist] == 'precise' sh.echo "R binary packages not supported with'sudo: false', "\'falling back to source install' return r_install packages end
 Parameters ---------- edges : tensor The edge ID array. The tensor must have the same device type and ID data type as the graph's.
 get isInTransaction() {} /** * Indicates if this Realm has been closed. * @type {boolean} * @readonly * @since 2.1.0
 /** * We use map because there can be nested, anonymous etc classes. */ static Map<String, JavaClassObject> classObjectsByName = new HashMap<>(); private SecureClassLoader classLoader = new SecureClassLoader() {
 pre_doc = "This is " + ", ".join(op_dev) + " operator\n\n" schema = b.GetSchema(op_name) ret = pre_doc ret += schema.Dox() ret += '\n' if schema.AllowsSequences():
 This matrix is symmetric with zeros on the diagonal... versionchanged:: 1.0.0 ``save()`` method has been removed. You can use ``np.save()`` on :attr:`dist_matrix` instead. """ def __init__(self, u, select='all', metric=rmsd, cutoff=1E0-5,
 allowed_border=-1, pos_weight=-1, debug=False), test_cfg=dict( nms_pre=1000, ))
 # def self.add_language_specific_settings(target, xcconfig) if target.uses_swift? build_settings = { 'OTHER_SWIFT_FLAGS' => [ '$(inherited)', quote(%w(-D COCOAPODS)), (quote(%w(-suppress-warnings)) if target.try(:inhibit_warnings?) || false) ].compact.join(' ') } xcconfig.merge!(build_settings) end end
 TableMetadata updated = table.ops().current(); Integer updatedVersion = TestTables.metadataVersion("test"); currentVersion++; updatedVersion = TestTables.metadataVersion("test"); Assert.assertEquals(current, updated); Assert.assertEquals(currentVersion, updatedVersion.intValue()); // no-op commit due to no-op rename table.updateSpec()
 symbol_column=None, special_params_checker=None, **kwargs): """Fetch a csv from a remote url. Automatically register the source with the data portal.  Parameters ----------
 throw new RuntimeException(e); } } return new PasswordToken(pass.value); } @Parameter(names = {"-z", "--keepers"}, description = "Comma separated list of zookeeper hosts (host:port,host:port)")
 Number of pixels to spread on all sides.""") def _apply_spreading(self, array): how = _calculate_how_from_default(self.p.how) return tf.spread(array, px=self.p.px, how=how, shape=self.p.shape) class dynspread(SpreadingOperation):
 Count:     o.count, GroupName: o.groupName, Cluster:        "data-api-expr-tutorial", ClusterID:      o.clusterID, Subnets:        o.subnets, SecurityGroups: o.securityGroups,
 Public  string Private string Address network.Address TLSCert []byte TLSKey  []byte } // Save will save this CothoritydConfig to the given file name. It
 break; case ELEMENT_TYPE_ENV_VAR:  /* %{..}e */  { h2o_iovec_t *env_var = h2o_req_getenv(req, element->data.name.base, element->data.name.len, 0); if (env_var == NULL) goto EmitNull; RESERVE(env_var->len * unsafe_factor); pos = append_safe_string(pos, env_var->base, env_var->len);
 return c.CreateCustomResource(&unstructured.Unstructured{Object: csvUnst}) } func fetchInstallPlan(t *testing.T, c opClient.Interface, name string) (*installplanv1alpha1.InstallPlan, error) { var fetchedInstallPlan *installplanv1alpha1.InstallPlan var err error
 if err!= nil { return err } md5, err := checksum.MD5(artifact) if err!= nil { return err }  file, err := os.OpenFile( filepath.Join(ctx.Config.Dist, checksums), os.O_APPEND|os.O_WRONLY|os.O_CREATE|os.O_TRUNC,
 GROUP, POLICY, SERVICE, ENTITY } private String domainName;
 package main import ( "testing"  "github.com/elastic/stack-operators/pkg/apis/stack" ) func TestPackage(t *testing.T) {
 docstring_arborescence.format(kind='maximum', style='spanning arborescence') minimum_spanning_arborescence.__doc__ = \ docstring_arborescence.format(kind='minimum', style='spanning arborescence') No newline at end of file
 */ public function setCategory($category = null) { if ($category instanceof CategoryInterface) { $this->category = $category; } else { throw new \InvalidArgumentException( sprintf( 'Expected CategoryInterface instance, received "%s"', getTypeName($category) ) ); } } }
 } catch (FileNotFoundException e) { //ignored } catch (IOException | ClassNotFoundException e) { kem.registerInternalWarning("Invalidating serialized cache due to corruption.", e); } catch (InterruptedException e) { throw KEMException.criticalError("Interrupted while locking to read " + file.getAbsolutePath(), e); }
 var packages = []string{ "github.com/google/knative-gcp/test/cmd/target", "github.com/google/knative-gcp/test/cmd/storage_target", } var packageToImageConfig = map[string]string{}
 return self.get_urls(), self.label, self.namespace class OscarConfig(OscarConfigMixin, AppConfig): """ Base Oscar app configuration.
 import React, { Fragment, useCallback, useMemo } from'react'; import { useIntl } from'react-intl'; import { useWishlistDialog } from '@magento/peregrine/lib/talons/Wishlist/WishlistDialog'; import Dialog from '@magento/venia-ui/lib/components/Dialog';
 * Call with the user's response to the sign-in challenge. * * @param signInChallengeResponse obtained from user * @param clientMetadata the client metadata * @return the result containing next steps or done. * @throws Exception */
 * @param bool|WP_Error $result  Result from install_package(). * @param array         $options Array of data for plugin/theme being updated. */ $result = apply_filters( 'upgrader_install_package_result', $result, $options ); $this->skin->set_result( $result ); if ( is_wp_error( $result ) ) {
 return self.text else: try: return self.translations.get(locale=locale).text except AttributeError: return None def __str__(self):
 if not self.is_sig_count_accepted(request, auth_constraint): return False, "Not enough signatures" if not self.is_owner_accepted(auth_constraint, auth_action): if auth_action.action == AuthActionEdit: if auth_action.field == "verkey": return False, "{} can not touch verkey field since only the owner can modify it".\ format(self.get_named_role_from_req(request)) else: return False, "{} can not edit {} txn since
 import org.apache.iceberg.types.Types.StringType; import org.apache.iceberg.types.Types.StructType; import java.util.List; import java.util.Map; import static org.apache.iceberg.types.Types.NestedField.optional; import static org.apache.iceberg.types.Types.NestedField.required;
 Name:        "jwt-secret", Value:       "Pive-Fumkiu4", Usage:       "Used to dismantle the access token, should equal reva's jwt-secret", EnvVars:     []string{"OCIS_JWT_SECRET"}, Destination: &cfg.TokenManager.JWTSecret, }, }
 template <typename TensorDataType> bool rmsprop<TensorDataType>::load_from_checkpoint_shared(persist& p, std::string name_prefix) { load_from_shared_cereal_archive(*this, p, this->get_comm(), "rmsprop.xml"); char l_name[512]; sprintf(l_name, "%s_optimizer_cache_%lldx%lld.bin", name_prefix.c_str(), m_cache->Height(), m_cache->Width());
 } func TestSmallData(t *testing.T) { tests := [][]byte{ nil, {}, {0}, {nonceSize - 1}, {nonceSize}, {nonceSize + 1}, } ctx := context.Background() key, err := NewRandomKey() if err!= nil { t.Fatal(err)
 setContentView(getContentViewResourceId()); sbPosition = findViewById(R.id.sbPosition); txtvPosition = findViewById(R.id.txtvPosition); seekDisplay = findViewById(R.id.seek_display); showTimeLeft = prefs.getBoolean(PREF_SHOW_TIME_LEFT, false);
 QPixmap UserLevelPixmapGenerator::generatePixmap(int height, UserLevelFlags userLevel, bool isBuddy, QString privLevel) { QString key = QString::number(height * 10000 + (int) userLevel + (int) isBuddy) + privLevel; if (pmCache.contains(key)) return pmCache.value(key);
 SpringDmnEngineConfigurator dmnConfigurator = context.getBean(SpringDmnEngineConfigurator.class); SpringFormEngineConfigurator formConfigurator = context.getBean(SpringFormEngineConfigurator.class); SpringIdmEngineConfigurator idmConfigurator = context.getBean(SpringIdmEngineConfigurator.class); assertThat(cmmnEngineConfiguration.isDisableEventRegistry()).isTrue(); assertThat(cmmnEngineConfiguration.getEventRegistryConfigurator()).isNull(); assertThat(processEngineC
 username VARCHAR(255), groupname VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, user_type VARCHAR(255), UNIQUE KEY idx_uid_username (uid, username, host_id), FOREIGN KEY (host_id) REFERENCES hosts (id) ON DELETE CASCADE )` if _, err := tx.Exec(sqlStatement); err!= nil {
 var err error reader, err = ghost.Subscribe(context.Background()) if err!= nil { t.Logf("error subscribing to ghost: %v", err) } else { retry = false }
 redirect_to events_path end private def transform_params
 # log encounter self.emit_event( 'pokemon_appeared', formatted='A wild {} appeared! (CP: {}) (IV: {}) (A/D/S {}) NCP: {}'.format(pokemon.name, pokemon.cp,  pokemon.iv, pokemon.iv_display, round(pokemon.cp_percent, 2)), data={ 'pokemon': pokemon.name, 'ncp': round(pokemon.cp_percent, 2),
 export default Component.extend({ flashes: service(), classNameBindings: ['type'], tagName: 'ul', messages: alias('flashes.messages'), type: computed('messages.@each.type', function() { const classes = this.messages.uniqBy('type').mapBy('type').join(' '); return `flash ${classes}`; }),
 // If the deployer implementation handles the deployment request synchronously, log warning message if // any exception is thrown out of the deployment and proceed to the next deployment. catch (Exception e) { logger.warn(String.format("Exception when deploying the app %s: %s", currentModule, e.getMessage())); } } }
 else: raise DGLError('Unsupported graph data type:', type(data)) def hetero_from_relations(rel_graphs, num_nodes_per_type=None): """Create a heterograph from graphs representing connections of each relation. The input is a list of heterographs where the ``i``th graph contains edges of type
 documentClient, configuration, namedCosmosCollectionConfigurationAccessor, testProvider, logger) { base.CollectionConfiguration = namedCosmosCollectionConfigurationAccessor.Get(Constants.CollectionConfigurationName); } } }
 * @return RoleAccess object on success. ZTSClientException will be thrown in case of failure */ public RoleAccess getRoleAccess(String domainName, String principal) { // Try to fetch from cache. ZTSClientCache.DomainAndPrincipal cacheKey = null; Cache<ZTSClientCache.DomainAndPrincipal, RoleAccess> cache = ZTSClientCache.getInstance().getRoleAccessCache(); if (cache!= null) { cac
 this->ResetEngine(); try { this->engine->LoadScript(filename); } catch (const Script_FatalError& e) { DEBUG(script, 0, "Fatal error '%s' when trying to load the script '%s'.", e.GetErrorMessage(), filename); return false; }
 public const string TillRegex = @"(?<till>\b(at[eé]h?|[aà]s|ao?)\b|--|-|—|——)(\s+\b(o|[aà](s)?)\b)?"; public static readonly string RangeConnectorRegex = $@"(?<and>(e\s*(([àa]s?)|o)?)|{BaseDateTime.RangeConnectorSymbolRegex})"; public c
 $url   = add_query_arg( array( 'package' => $file_upload->id ), 'update.php?action=upload-plugin' ); $type  = 'upload'; // Install plugin type, From Web or an Upload. $upgrader = new Plugin_Upgrader( new Plugin_Installer_Skin( compact( 'type', 'title', 'nonce', 'url' ) ) ); $result = $upgra
 mChooseIdentityButton = (TextView) findViewById(R.id.identity); mChooseIdentityButton.setOnClickListener(this); RecipientView recipientView = new RecipientView(this); recipientPresenter = new RecipientPresenter(this, recipientView, mAccount);
 CanCachePlan = CanCachePlan && // If some constants do not have matching HQL parameters, their values from first query will // be embedded in the plan and reused for subsequent queries: do not cache the plan.!_constantToParameterMap.Values.Select(p => p.Name).Except(requiredHqlParameters.Select(p => p.Name)).Any();
 "crypto/rand" "crypto/x509" "errors" "testing" "time" "github.com/golang/mock/gomock" "github.com/sirupsen/logrus/hooks/test" "github.com/spiffe/spire/pkg/agent/manager/cache" "github.com/spiffe/spire/pkg/common/selector" "github.com/spiffe/spire/proto/agent/workloadattestor"
 type dockerPluginConfig struct { // DockerSocketPath is the location of the docker daemon socket (default: "unix:///var/run/docker.sock" on unix). DockerSocketPath string `hcl:"docker_socket_path"` // DockerVersion is the API version of the docker daemon. If not specified, the version is negotiated by the client. DockerVersion string `hcl:"docker_version"` // CgroupPrefix (DEPRECATED) is the cgroup
 $this->setArgument($k, $v, false); } // Add middleware from groups $inner = $this->middlewareDispatcher; $this->middlewareDispatcher = new MiddlewareDispatcher($inner, $this->container);
 #include "rev.h" #include "video/video_driver.hpp" #include "music/music_driver.hpp" #include "gui.h" #include <vector> #include <iterator>
 conv_cfg=None, norm_cfg=dict(type='BN'), dcn=None, rfp_inplanes=None, sac=None, plugins=None): super(BasicBlock, self).__init__() assert dcn is None, 'Not implemented yet.' assert rfp_inplanes is None, 'Not implemented yet.' assert plugins is None, 'Not implemented yet.' self.norm1_name, norm1 = build_norm_layer(norm_cfg, planes, postfix=1)
 it('non-shadow roots should have instanceof ShadowRoot === false', () => { expect(document.createElement('div') instanceof ShadowRoot).toEqual(false); expect(document.createDocumentFragment() instanceof ShadowRoot).toEqual(false); expect(document.createDocumentFragment().shadowRoot instanceof ShadowRoot).toEqual(false); expect(undefined instanceof ShadowRoot).toEqual(false); expect(null instanceof ShadowRoot).toEqual(false); });
 return ''; } return '/'. esc_html( ltrim( wp_unslash( $_SERVER['REQUEST_URI'] ), '/' ) ); } }
 stub += f" : {self.target.name}({self.target.value})" return stub def __init__(self, source, edge, target, score=1, origin=None): super().__init__() self.source = source self.edge = edge
 static int s2n_connection_new_hashes(struct s2n_connection *conn) { /* Allocate long-term memory for the Connection's hash states */ POSIX_GUARD(s2n_hash_new(&conn->hash_workspace)); POSIX_GUARD(s2n_hash_new(&conn->prf_space.ssl3.md5)); POSIX_GUARD(s2n_hash_new(&conn->prf_space.ssl3.sha1));
 fields_desc = [ ShortEnumField("type", 0x8002, sctpchunkparamtypes), FieldLenField("len", None, length_of="random", adjust = lambda pkt,x:x+4), PadField(StrLenField("random", RandBin(32), length_from=lambda pkt: pkt.len-4), 4, padwith=b"\x00"),]
 _AssertBoosterHandleNotNull(handle); R_API_BEGIN(); CHECK_CALL(LGBM_BoosterAddValidData(R_ExternalPtrAddr(handle), R_ExternalPtrAddr(train_data))); R_API_END(); return R_NilValue; } SEXP LGBM_BoosterResetTrainingData_R(SEXP handle,
 mp_edpXML->loadXMLParticipantEndpoint(titleElement, pdata); EXPECT_EQ(pdata->m_RTPSParticipantName, "HelloWorldSubscriber"); EXPECT_EQ(pdata->m_readers.size(), (size_t)1); }
 await accessAsync(path + '/LOCK' || path + 'LOCK', fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK); await accessAsync(path + '/LOG' || path + 'LOG', fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK); } catch (err) { return new Error('Invalid wallet path'); } const storage = params.storage || new Storage({ path, errorIfExists: false, c
 if role not in accepted_roles: raise ValueError("Role {} is not acceptable".format(role)) if not need_to_be_on_ledger and role!= "*": raise ValueError("need_to_be_on_ledger can be set to False only if any role is accepted (role='*'). Got {} role instead.".format(role)) def __str__(self): role = get_named_role(self.role) if self.role!= '*' else 'ALL'
 } int ret; #if defined(UDP_SEGMENT) if (ctx->use_udp_gso) { mess.msg_iov = datagrams; mess.msg_iovlen = num_datagrams; while ((ret = (int)sendmsg(h2o_socket_get_fd(ctx->sock.sock), &mess, 0)) == -1 && errno == EINTR)
 false, (res) -> { if (res.failed()) { LOG.warn("Request for metrics failed", res.cause()); response.setStatusCode(HttpResponseStatus.INTERNAL_SERVER_ERROR.code()).end(); } else if (response.closed()) { LOG.trace("Request for metrics closed before response was generated");
 public float lastMessageTime; public NetworkIdentity playerController { get; internal set; } public readonly HashSet<uint> clientOwnedObjects = new HashSet<uint>(); public bool logNetworkMessages; // this is always true for regular connections, false for local // connections because it's set in the constructor and never reset.
 # degree bucketing degrees, v_buckets = scheduler.degree_bucketing(self.msg_graph, v) null_v_bucket = [] non_null_v_buckets = [] reduced_msgs = [] for deg, v_bkt in zip(degrees, v_buckets):
 type: 'join', name: '_tags', label: 'Tags', withType: '@apostrophecms/image-tag', min: 1, max: 5 } ].concat(options.addFields || []); options.arrangeFields = [
 blk, cert, err0 = blockGetCert(tx, r) return err0 }) counterMicros(ledger_getblockcert_micros, start) err = updateErrNoEntry(err, lastCommitted, latest) return } var ledger_init_count = metrics.NewCounter("ledger_init_count", "calls to init block queue") var ledger_init_micros = metrics.NewCounter("ledger_init_micros", "ms spent to init block queue") 
 @pytest.mark.parametrize( "fn", ["max", "min", "median", "skew", "kurt", "sem", "std", "var"] ) @pytest.mark.parametrize( "numeric_only", [True, False], ids=arg_keys("numeric_only", bool_arg_keys)
 ) except Exception, e: current_app.logger.error("Redis rpush playing_now write error: " + str(e)) raise InternalServerError("Cannot record playing_now at this time.") else: submit.append(listen)
 } let pluginCompilers = self.plugins.getPluginsProperty('compilers', 'compilers'); pluginCompilers.forEach(function (compilerObject) { available_compilers[compilerObject.extension] = compilerObject.cb; });
 Func:    "kube", }, nil }, "connect k8s": func() (cli.Command, error) { return &connect.Command{ Command: base.NewCommand(ui), Func:    "k8s", }, nil }, "connect postgres": func() (cli.Command, error) { return &connect.Command{ Command: base.NewCommand(ui),
 final Condition atLeastLighterForkBlockNumber = blockchain.blockNumberMustBeLatest(minerNode); cluster.start(); // Create the heavy fork final PantheonNode minerNodeTwo = pantheon.createMinerNode("miner-node2");
 { /** * @var AdapterInterface * @deprecated use $primary instead */ protected $master;
 props.merge(self._get_load_props()) props.merge(self._get_scenario_props()) for key in sorted(props.keys()): self.env.add_java_param({"JAVA_OPTS": "-D%s=%s" % (key, props[key])}) self.env.set({"NO_PAUSE": "TRUE"}) self.env.add_java_param({"JAVA_OPTS": self.settings.get("java-opts", None)})
 } nb.isRowDf = function(obj,rowsToCheck = 100){ if (!_.isArray(obj) || obj.length==0 || (obj.length === 1 &&!_.isPlainObject(obj[0]))) {return false} rowsToCheck = Math.min(rowsToCheck,_.size(obj)) for (let i=1; i<rowsToCheck; i++){ if (! _.isPlainObject(obj[i])) {return false}
 * @details * ### Case 1: The given node has the right node/subtree * * In this case, the left-most deepest node in the right subtree will come * just after the given node as we go to left deep in inorder. *      - Go deep to left most node in right subtree. *        OR, we can also say in case if BST, find the minimum of the subtree * for a given node.
 with self.assertRaisesRegex(ValueError, err): FeatureLocation(42, 23, 1) with self.assertRaisesRegex(ValueError, err): FeatureLocation(BeforePosition(42), AfterPosition(23), -1) with self.assertRaisesRegex(ValueError, err): FeatureLocation(BeforePosition(42), AfterPosition(23), 42) # Features with UnknownPositions should pass test FeatureLocation(42, UnknownPosition()) FeatureLocation(UnknownPosition(), 42)
 } func NewCounter(name, desc string) *Counter { c := &Counter{ name:          name, description:   desc, values:        make([]*CounterValues, 0), labels:        make(map[string]int), valuesIndices: make(map[int]int), } c.Register(nil) return c } // Register registers the counter with the default/specific registry
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4454-SEA 1645533493 2164481820</p> <hr> <p>Varnish cache server</p> </body>
 "  void f(Optional<String> in, String out) {", "    assertThat(in).hasValue(out);", "    assertThat(in).hasValue(out);", "    assertThat(in).hasValue(out);", "  }", "  void f2() {", "    Optional<String> in = Optional.of(\"out\");", "    assertThat(in).hasValue(\"out\");", "  }", "}"); }
 } }).to_dict() # Precompute pair so lat/lon, easting/northing, mapbox coord values self.lon_range1, self.lat_range1 = (10, 30), (20, 40) self.easting_range1, self.northing_range1 = Tiles.lon_lat_to_easting_northing( self.lon_range1, self.lat_range1
 ) func TestDeterministicSwitching(t *testing.T) { // TODO: see https://github.com/dedis/cothority/issues/479 t.Skip() defer log.AfterTest(t)
 size_t size = 0; std::ostringstream strs; strs << (int) latitude << (int) longitude; size = strs.str().length() + 1 + 7 * 2 + 1; char coords[size];     // <lat>;<lon> sprintf(coords, "%.6f;%.6f", latitude, longitude); request->setText(coords); request->setFlag(true);     // is official attribute? requestQueue
 ////////////////////////// // PERFORM A SIMULATION // ///////////////////////// // Initialize the system and get the default state SimTK::State& si = osimModel.initSystem();
 // then dismisses the modal via `hide`. self.saveArray = function() { if (options.save) { options.save(self.arrayItems); } self.hide(); };
 if (cipher_preferences == NULL) { return false; } for (int i = 0; i < cipher_preferences->count; i++) { if (s2n_cipher_suite_requires_ecc_extension(cipher_preferences->suites[i])) { return true; } }
 } switch ts.PropagationPolicy { case TopicPolicyCreateDelete: // Valid value. default:
 for pos, line in enumerate(grofile, start=-2): # 2 header lines, 1 box line at end if pos == n_atoms: unitcell = list(map(np.float64, line.split())) continue if pos < 0: continue
 } default Tuple2<Seq<K>, Seq<V>> unzip() { return unzip(Function.identity()); } default <T1, T2> Tuple2<Seq<T1>, Seq<T2>> unzip(BiFunction<? super K,? super V, Tuple2<? extends T1,? extends T2>> unzipper) {
 cctools_version_debug(D_MAKEFLOW_RUN, argv[0]); #ifdef MPI int need_mpi_finalize = 0; if (batch_queue_type == BATCH_QUEUE_TYPE_MPI) { MPI_Init(NULL, NULL);
 dockerfile = ''' FROM {container_image}:{container_version} {container_environment} RUN bash -c 'if [ -x "$(command -v apt-get)" ]; then apt-get update && apt-get install -y python sudo; fi' RUN bash -c 'if [ -x "$(command -v yum)" ]; then yum makecache fast && yum update -y && yum install -y python sudo; fi' RUN b
 return GetFhirClient(format, TestApplications.ServiceClient, null, reusable); } public FhirClient GetFhirClient(ResourceFormat format, TestApplication clientApplication, TestUser user, bool reusable = false) { if (!reusable) { return CreateFhirClient(format, clientApplication, user); }
 ) async def test_edgeql_select_subshape_filter_01(self): """ Test that a filter on a subshape of a shape with a filter on a subshape of a subshape of the same type is not evaluated.  This is a test for https://github.com/edgedb/edgedb/issues/1100.  """ async with self.assertRaisesRegexTx( edgedb.QueryError, "possibly an empty set returned",
 s.Driver.FindElement(By.Id("Email")).SendKeys(email); s.Driver.FindElement(By.Id("Password")).SendKeys("123456"); s.Driver.FindElement(By.Id("LoginButton")).Click();  s.Driver.FindElement(By.Id("Email")).Clear(); s.Driver.FindElement(By.Id("Password")).Clear(); } public static void AssertNoError(this IWebDriver driver)
 signupButton.setOnClickListener(view -> signUp()); if(BuildConfig.FLAVOR == "beta"){ loginCredentials.setText(R.string.use_commons_beta_credentials); } else { loginCredentials.setVisibility(View.GONE); }
 tagMetaEmailKey     = "email" tagMetaDescKey      = "desc" tagMetaTimestampKey = "timestamp" tagMetaVersionKey   = "version" tagMetaStName  = "metadata"
 click_button 'Save' current_path.should eq account_type_path(a) page.should have_content 'Account type was successfully updated' page.should have_content 'Something else' end scenario 'deleting account type' do
 t.Fatal(err) } _, gotErr = mux.OpenVariableURL(ctx, parsed) if gotErr!= nil { t.Fatalf("got err %v, want error %v", gotErr, tc.wantErr) } else { t.Fatal("got nil error when expected an error") } if got := fake.u.String(); got!= tc.want { t.Errorf("got %q want %q", got, tc.want)
 * This will properly maintain the copyright information. DigitalGlobe * copyrights will be updated automatically. * * @copyright Copyright (C) 2019, 2020 DigitalGlobe (http://www.digitalglobe.com/) */ #include "HighwayTagOnlyMerger.h"
 $target = null; if ($externalLinkTarget!== '' && is_string($uriHost) && $uriHost!== $host) { $target = $externalLinkTarget; } if ($resourceLinkTarget!== '' && strpos($linkHref, '_Resources')!== false) { $target = $resourceLinkTarget;
 return get_model(app_label, model_name) def get_model(app_label, model_name): """ Fetches a Django model using the app registry.
 constRetry, err := retry.NewConstant(waitForSealedRetryInterval) if err!= nil { log.Fatal("cannot create retry mechanism", err) } maxedConstRetry := retry.WithMaxDuration(waitForSealedMaxDuration, constRetry)
 } // AllocateStorageAddress allocates new storage address under the owner accounts to store a new register func (e *TransactionEnv) AllocateStorageAddress(owner flow.Address) (uint64, error) { v, err := e.AllocateStorageAddress(owner) if err!= nil { return 0, fmt.Errorf("storage address allocation failed: %w", err) }
 Namespace: "scheduler-namespace", Name:      "scheduler-name", Labels: map[string]string{ "receive-adapter": "scheduler.events.cloud.google.com", "source":          "scheduler-name", }, OwnerReferences: []metav1.OwnerReference{{
 public static final int WHITE = 8; public static final int JELLIE = 9; private static final int ALL_BLACK = 10; }
 return ihipLogStatus(hipErrorInvalidSymbol); } if (symbol_name == nullptr) { return ihipLogStatus(hipErrorInvalidSymbol); }  return ihipLogStatus(hip_internal::memcpySync(dst, (char*)src+offset, count, kind, hipStreamNull)); }
 fileCount++ } isSymlink := isSymlink(f) size := f.Size() if isSymlink(f) { info, err := os.Stat(name) if err!= nil { return browseTemplateContext{}, err
 module.exports = { extend: '@apostrophecms/piece-type', options: { fields: { add: { title: {
 if (process.env.NODE_ENV==='development') { require('./debug').initDebug(); require('./devtools').initDevTools(); require('./devtools').initDevTools(); }
 self.next_update = datetime.now() + timedelta(seconds=self.min_interval) def _process_config(self): """ Fetches the configuration for this worker and stores the values internally. :rtype: None """ self.min_interval = int(self.config.get('min_interval', self.DEFAULT_MIN_INTERVAL)) self.displayed_stats = self.config.get('stats', self.DEFAULT_DISPLAYED_STATS) self.terminal = self.config.get('terminal', self.TERMINAL)
 // This happens when a previous widget was animating out, // but Blockly is hiding the widget to create a new one. // So, short-circuit the animation and clear the timer. Blockly.WidgetDiv.disposeAnimationTimer_ && window.clearTimeout(Blockly.WidgetDiv.disposeAnimationTimer_); Blockly.WidgetDiv.disposeAnimationFinished_ = null; Blockly.WidgetDiv.disposeAnimationTimer_ = null;
 this.master = master; existenceCache = CacheBuilder.newBuilder().expireAfterWrite(timeToCacheExistsInMillis, TimeUnit.MILLISECONDS).maximumWeight(10_000_000).weigher((path, exist) -> path.toString().length()).build();
 * The StakePoolsList either renders a loading spinner when there are * more than PRELOADER_THRESHOLD stake pools to be loaded (to increase * initial rendering performance) or StakePoolTiles (if there are only * a few stake pools OR if the simulated "preloading" is done) */ export const StakePoolsList = observer(({ loading, stakePools, loadMore }: StakePoolsListProps) => { const [isLoading
 stages := make([]PipelineStage, 0, len(stageNames)) for _, name := range stageNames { stages = append(stages, PipelineStage{Name: name}) } return &PipelineManifest{
 // TODO: Test that alice's favorites are updated. // TODO: Test that the three folders are resolved with // conflict markers. ) }
 # there was only one exact match return options[0] # there is more than one exact match for this fuzzy symbol raise MultipleSymbolsFoundForFuzzySymbol( symbol=symbol, options=self.retrieve_all(owner.sid for owner in owners),
 if (req->proxy_stats.ssl.cipher_bits == 0) goto EmitNull; RESERVE(sizeof(H2O_INT16_LONGEST_STR)); pos += sprintf(pos, "%" SCNu16, (uint16_t) req->proxy_stats.ssl.cipher_bits); break; case ELEMENT_TYPE_PROXY_SSL_PROTOCOL_VERSION: APPEND_SAFE_STRING(pos, req->proxy_stats.ssl.protocol_version);
 // MaxOutstandingBytes is the maximum size of unprocessed messages (unacknowledged but not yet expired). // Default is 800Mb (~763Mi) MaxOutstandingBytes int `envconfig:"MAX_OUTSTANDING_BYTES" default:"799999525"` // Max to 10m. TimeoutPerEvent time.Duration `envconfig:"TIMEOUT_PER_EVENT"`
 got := b.String() expectedOutput := `{"SpanContext":{` + `"TraceID":"1a2b3c4d5e6f7",` + `"SpanID":72623859790382856,"TraceFlags":0},` + `"ParentSpanID":0,` + `"SpanKind":0,` + `"Name":"/foo",` +
 import de.danoeh.antennapod.core.storage.DBReader; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.Mockito; import org.robolectric.RobolectricTestRunner;
 const shared_model::crypto::Hash &hash, std::function<void(const shared_model::proto::TransactionResponse &)> validation) { auto response = iroha_instance_->getIrohaInstance()->getCommandServiceTransport()->getStatus( hash); validation(static_cast<const shared_model::proto::TransactionResponse &>( *response)); return *this; }
 delete [] set; if (group) { group->assign(fmt::format("{} delete",master_group)); if (stabilization_flag == 1) { group->assign(fmt::format("{} delete",exclude_group)); delete [] exclude_group; } }
 ) # Check that disallowed things are indeed absent if not allow_newaxis: if isinstance(indexer, tuple): assert 0 <= len(indexer) <= len(shape) + int(allow_ellipsis) else: assert 1 <= len(shape) + int(allow_ellipsis)
 const items = []; // The delta API might return things that happens in subdirectories and outside of the joplin directory. We don't want to deal with these since all the files we're interested in are at the root of the joplin directory // (The.resource dir is special since it's managed directly by the clients and resources never change - only the associated.md file at the root is synced). So in the loop below we
 type HTTPFetcher struct { peer    network.HTTPPeer rootURL string net     network.GossipNode client *http.Client
 if registry, err := docker.NewRegistry(*dockerInterval); err == nil { defer registry.Stop() p.AddTagger(docker.NewTagger(registry, processCache)) p.AddReporter(docker.NewReporter(registry, hostID, p)) } else { log.Printf("Docker: failed to start registry: %v", err) }
 add_filter( 'xmlrpc_pingback_error', 'xmlrpc_pingback_error' ); add_filter( 'title_save_pre', 'trim' ); // Add lazy loading attrs to core functions. foreach ( array( 'get_avatar', 'wp_get_attachment_image','smilies_html', 'the_content', 'the_excerpt', 'comment_text', 'widget_text_content' ) as $filter ) { add_filter( $filter, 'wp_lazy_loa
 } } }
 import ( "context" "fmt" "github.com/google/knative-gcp/pkg/reconciler/identity" "github.com/kelseyhightower/envconfig" "go.uber.org/zap"
 */ void setVariable( String variableName, Object value ); @Deprecated KieRuntime getKieRuntime();  KogitoProcessRuntime getKogitoProcessRuntime(); } No newline at end of file
 testScript("testScript.sql"); testScript("derived-column-names.sql"); testScript("information_schema.sql"); if (config.mvStore) { // we get slightly different explain plan stuff here in PageStore mode testScript("joins.sql"); }
 $threshold = Setting::getSettings()->alert_interval; // Expiring Assets $assets = Asset::getExpiringWarrantee($threshold); $this->info($assets->count().' assets expiring within '.$threshold.' days'); // Expiring licenses $licenses = License::getExpiringLicenses($threshold); $this->info($licenses->count().' licenses expiring within '.$threshold.' days'); $recipient = new \App\Mod
 import java.io.File; import java.net.URI; import java.net.URISyntaxException; import java.util.List; import java.util.stream.Collectors;
 Returns: str: A string representation of FirewallAction. """ return 'FirewallAction(action=%s, rules=%s)' % (self.action, self.rules) def json_dict(self): """Gets the JSON key and values for the firewall action.
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4473-SEA 1645537666 1510353386</p> <hr> <p>Varnish cache server</p> </body>
 if (request->getType() == MegaRequest::TYPE_FETCH_NODES) { if (e == API_OK) { // check if we fetched a folder link and the key is invalid
 } } #ifndef OSX template<typename Dtype> void DataTransformer<Dtype>::Transform(const vector<cv::Mat> & mat_vector, Blob<Dtype>* transformed_blob) {
 }) t.Run("is not a member", func(t *testing.T) { _, err := MemberFromString(td, "spiffe://otherdomain.test/foo") assert.EqualError(t, err, `id "spiffe://otherdomain.test/foo" is not a member of trust domain "domain.test"`) }) t.Run("empty id", func(t *testing.T) { _, err := MemberFromString(td, "") assert.EqualEr
 // Disable minification options if they're active in Autoptimize. if ( version_compare( $actual_version, '2.9.5', '<' ) ) { if ( 'on' === get_option( 'autoptimize_html' ) ) { update_rocket_option('minify_html_inline_css', 0 ); update_rocket_option('minify_html_inline_js', 0 ); }
 } @Test public void testShutdown() throws NacosException { Properties properties = new Properties(); properties.put(PropertyKeyConst.SERVER_ADDR, "127.0.0.1:8848"); final ServerListManager serverListManager = new ServerListManager(properties); serverListManager.shutdown(); } }
 opts = opts.replace('_debug_port_', ('%s' % cls.debug_java_port)) elif 'address=' in opts: if not cls.debug_java_port: port = opts.split("address=")[1] cls.debug_java_port = int(port) return opts
 hwloc_topology_destroy(topo); #endif #ifdef LBANN_HAS_SHMEM // Initialize SHMEM {
 */ QVariantMap resultMap = array.at(0).toObject().toVariantMap(); if (resultMap.size() == 0) { qWarning() << "No reply received from the release update server:" << QString(jsonData) << "\n" << QString(array.at(0).toString()); emit error(tr("No reply received from the release update server.")); return;
 $uri = $baseUri. ltrim($uri, '/'); } } elseif ($absolute === true) { if (strncmp($uri, 'http://', 7)!== 0 && strncmp($uri, 'https://', 8)!== 0) { $uri = $baseUri. ltrim($uri, '/'); } }
 assert xs == [] @checks_deprecated_behaviour def test_non_sequence_types_are_deprecated(): @given(data=data(), xs=sets(integers())) def inner(_permutation): p = data.draw(permutations(xs)) assert xs == set(p) with validate_deprecation(): inner()
 bp::with_custodian_and_ward<1, 2, bp::with_custodian_and_ward<1, 3> >()).def("save", &Net_Save).def("save_hdf5", &Net_SaveHDF5).def("load_hdf5", &Net_LoadHDF5); BP_REGISTER_SHARED_PTR_TO_PYTHON(Net<Dtype>); bp::class_<Blob<Dtype
 } elseif (\in_array('getInstance', get_class_methods($strClass))) { static::$arrStaticObjects[$strKey] = static::$arrSingletons[$strClass] = $this->arrObjects[$strKey] = \call_user_func(array($strClass, 'getInstance')); } else {
 'use strict'; var fs = require('react-native-fs'); var Realm = require('realm'); var TestCase = require('./asserts'); var schemas = require('./schemas');
 #   will be sent # # There will be more arguemnts to this method once automatic encryption is introduced. def initialize(kms_providers, schema_map, options={}) options = options.dup options[:logger] ||= Logger.new('AWS::KMS') @logger = options[:logger] # FFI::AutoPointer uses a custom release strategy to automatically free
 } func (rs *RedisSessionStore) SessionRelease(w http.ResponseWriter) { // TODO: Check if the session should be expired here. c := rs.p.Get() defer c.Close()
 var numberStr1 = match.Groups["number1"].Value; var numberStr2 = match.Groups["number2"].Value; if (type.Contains(Constants.TWONUM)) { var extractNumList1 = ExtractNumberFromStr(numberStr1, true); var extractNumList2 = ExtractNumberFromStr(numberStr2, true); if (extractNumList1!= null && extractNumList2!= null) {
 if ((uint) start > (uint) textLength) throw new ArgumentOutOfRangeException(nameof(start)); if (textLength == 0) return default; fixed (char* charPointer = text) {
 train=dict(classes=classes), val=dict(classes=classes), test=dict(classes=classes)) # TODO: update the model url load_from = 'https://s3.ap-northeast-2.amazonaws.com/open-mmlab/mmdetection/models/faster_rcnn_r50_fpn_1x_20181010-3d1b3351.pth'  # noqa
 if ( hero ) { Interface::RedrawHeroesIcon( *hero, dstx + 82, dsty + 19 ); text.Set( ( hero->GetAttack() < 10? "0" : "" ) + ( hero->GetAttack() < 100? hero->GetAttack() : hero->GetAttack() / 10 ) + "-" + ( hero->GetDefense() < 10?
 contents += tabtab + fmt.Sprintf("super(_%s, self).__init__(handler, lock)\n", method.Name) contents += "\n" if _, ok := method.Annotations.Get(generator.Deprecated); ok { contents += tab + fmt.Sprintf("print(\"WARNING: %s is deprecated and will be removed in a future version.\")\n", method.Name) } contents += tab + "async def process(self, ct
 end def example_group_finished(_notification) @group_level -= 1 if @group_level > 0 end def example_passed(passed)
 // Copyright 2021 The Syncthing Authors. See LICENSE.txt in the repository root for license information.  package describe import (
 } else { const char *const* p = { NULL }; g_variant_builder_add (&metadata_builder, "{sv}", "rpmostree.packages", g_variant_new_strv (p, -1)); g_variant_builder_add (&metadata_builder, "{sv}", "rpmostree.serverbase", g_variant_new_int64 (g_getenv ("RPMOSTREE_SERVERBASE")? atoi (g_getenv ("RPMOSTREE_S
 from platforms.fuchsia.util.device import Device from platforms.fuchsia.util.fuzzer import Fuzzer from platforms.fuchsia.util.host import Host from system import archive from system import environment from system import minijail from system import new_process from system import shell from system import zip_file # Maximum length of a random chosen length for `-max_len`. MAX_VALUE_FOR_MAX_LENGTH = 10000
 viewBinding.subscribeButton.setEnabled(true); viewBinding.subscribeButton.setText(R.string.subscribe_label); if (UserPreferences.isEnableAutodownload()) { viewBinding.autoDownloadCheckBox.setChecked(true); viewBinding.autoDownloadCheckBox.setVisibility(View.VISIBLE); viewBinding.autoDownloadCheckBox.setActivated(true); } }
 request = Request(data=encoded_data, headers=headers, method=method) return request elif req_data.get('Action', [None])[0] == 'SendMessage': queue_url = req_data.get('QueueUrl', [path])[0] queue_name = queue_url[queue_url.rindex('/') + 1:] message_body = req_data.get('MessageBody', [None])[0] if lambda_api.process_sqs_message(message_body, queue_name):
 if opts.withTokenValue { databaseWrapper, err := r.kms.GetWrapper(ctx, at.GetScopeId(), kms.KeyPurposeDatabase, kms.WithKeyId(at.GetKeyId())) if err!= nil { return nil, errors.Wrap(err, fmt.Sprintf("failed to decrypt token for operation %s", op)) } if err := at.decrypt(ctx, databaseWrapper); err!= nil { return nil, errors.Wrap(err, op)
 }; } else if (map instanceof ClientMapProxy) { // TODO: add strategy/unify after https://github.com/hazelcast/hazelcast/issues/13950 is fixed addToBuffer = entry -> { Data key = serializationService.toData(key(entry.getEntry())); Data value = serializationService.toData(value(entry.getEntry())); buffer.add(new SimpleEntry<>(key, value)); }; } else {
 return TRUE; if ( a1 && gbMaxPlayers > 1 ) MI_Dummy(save_num); // some eliminated function... // MI_Dummy(save_num); // debug return FALSE; }
 package com.hazelcast.jet.impl.exception; import com.hazelcast.jet.JetException; import javax.annotation.Nonnull; public class EventLimitExceededException extends JetException { private EventLimitExceededException(@Nonnull String message) { super(message); } }
 #cleanup phase rescue => e #cleanup on error if @options[:preserve_hosts].to_s =~ /never/ @logger.notify "Cleanup: cleaning up after failed run" if @network_manager @network_manager.cleanup
 } for _, ingress := range toDelete { if ingress!= "" { if err := p.uninstallLoadBalancerServiceFlows(net.ParseIP(ingress), pSvcInfo.Port, pSvcInfo.OFProtocol); err!= nil { klog.Errorf("Error when removing LoadBalancer Service flows: %v", err) continue }
 if sys.version_info >= (3, 0): from io import BytesIO as StringIO else: from StringIO import StringIO INFINITY = float('inf')
 \System::getContainer() ->get('contao.image.image_factory') ->create(TL_ROOT. '/'. $this->strFile, array($width, $height, $mode), TL_ROOT. '/'. $this->strFile) ; $this->arrPathinfo = array();
 const defaultNumGoRoutines = 100 defaultReceiveProfile := func(_ bool, maxMessages int) (int, time.Duration) { return maxMessages, 0 } defaultProcessProfile := func(_ bool) time.Duration { return 0 } // tests is an array of test cases. Each test case is a struct with the following fields: // - description: a human-readable description of the test case // - maxMessages: the maximum number
 // route requests through YARPC. The http.Handler returned by this function // may delegate requests to the provided YARPC handler to route them through // YARPC. // // The interceptors are called in the order they are passed in. func Interceptor(interceptor func(yarpcHandler http.Handler) http.Handler) InboundOption { return func(i *Inbound) { i.interceptors = append(i.interceptors, interceptor)
 Callable, Mapping, cookielib, urlunparse, urlsplit, urlencode, str, bytes, is_py2, chardet, builtin_str, basestring) from.compat import json from.compat import iteritems from.status_codes import codes #: The set of HTTP status codes that indicate an automatically
 metricsSystem.createCounter( MetricCategory.SYNCHRONIZER, "inboundQueueCounter", "count of queue items that started processing"); this.outboundQueueCounter = metricsSystem.createCounter( MetricCategory.SYNCHRONIZER, "outboundQueueCounter", "count of queue items that started processing"); } @Override
 // By default, no function is called. func (srv *Server) SetErrorFunc(f func(error)) { srv.healthHandler.SetErrorFunc(f) srv.errFunc = f } func (srv *Server) init() {
 public function __invoke() { $html = ''; $namespaces = ['default','success', 'warning', 'error', 'info']; $messages = []; foreach ($namespaces as $ns) { $messages = array_merge( $this->fm->getMessages($ns), $this->fm->getCurrentMessages($ns) );
 output, _ = docker_client.exec_in_container( container_info.container_id, env_vars=env, command=["env"] ) output = output.decode(config.DEFAULT_ENCODING) assert "MYVAR" not in output
 if self.gt_unique_best: assigned_gt_inds[gt_argmax_overlaps[i]] = i + 1 else: assigned_gt_inds[overlaps[:, i] == gt_max_overlaps[i]] = i + 1 if gt_labels is not None: assigned_labels = assigned_gt_inds.new_zeros((num_bboxes, ))
 * Because the data is of an unknown length, we cannot know the block size. To avoid corrupt RFiles, we throw an exception. This should be addressed by * whatever object is putting data into the stream to ensure this condition is never reached. */ if (size() == Integer.MAX_VALUE) { throw new IOException("Unknown block size of at least " + Integer.MAX_VALUE + " bytes."); } return size() & 0x00
 gem 'timecop' gem 'rspec-retry' gem 'benchmark-ips' gem 'fuubar' gem 'childprocess'
 ++freeSlots; const uint32_t maxCount = saveLastTroop? troopFrom.GetCount() - 1 : troopFrom.GetCount(); uint32_t redistributeCount = isSameTroopType? 1 : troopFrom.GetCount() / 2; // if splitting to the same troop type, use this bool to turn off fast split option at the beginning of the dialog bool useFastSplit =!isSameTroopType;
 { string text = s_UInt32TextArray[index]; byte[] utf8ByteArray = Encoding.UTF8.GetBytes(text); ReadOnlySpan<byte> utf8ByteSpan = new ReadOnlySpan<byte>(utf8ByteArray, 0, utf8ByteArray.Length); foreach (var iteration in Benchmark.Iterations) { using (iteration.StartMeasurement())
 return put(entry._1, entry._2); } @Override public LinkedHashMap<K, V> remove(K key) { if (containsKey(key)) {
 var testRecvDelay time.Duration func (r *Runner) accept(ctx context.Context, id string) error { r.runnerMu.Lock() shutdown := r.shutdown r.runnerMu.Unlock() if shutdown { return ErrClosed
 /* run code and generate handler */ mrb_value result = mrb_funcall(mrb, mrb_obj_value(mrb->kernel_module), "_h2o_prepare_app", 1, conf); if (mrb_nil_p(result)) { mrb_raise(mrb, "H2O::Application#_h2o_prepare_app returned nil"); } assert(mrb_array_p(result)); return result;
 MapsIndexes vec_eyes = Maps::GetObjectPositions( MP2::OBJ_EYEMAGI, false ); if ( vec_eyes.size() ) { for ( MapsIndexes::const_iterator it = vec_eyes.begin(); it!= vec_eyes.end(); ++it ) { Maps::ClearFog( *it, Game::GetViewDistance( Game::VIEW_MAGI_EYES ), hero.GetColor() ); Interface::Basic & 
 self.excl_tax = excl_tax if incl_tax is not None: self.incl_tax = incl_tax self.excl_tax = excl_tax self.is_tax_known = True elif tax is not None: self.incl_tax = incl_tax + tax self.excl_tax = excl_tax self.is_tax_known = True else: self.incl_tax = None
 # is 'No' then we need to prepare suitable subgraph view. partition_nodes = set().union(*partition) if len(partition_nodes)!= len(G): if create_using is None: create_using = G.fresh_copy() else: create_using = create_using.fresh_copy() G = create_using.subgraph(partition_nodes) return _quotient_graph(G, partition, edge_relation, node_data, edge_data, relabel
 cols = ['Column_' + str(i) for i in range(X.shape[1])] imptcs = [] for col in cols: imptcs.append(impcts_dict.get(col, 0.)) return np.array(imptcs) X, y = load_breast_cancer(True)
 auto omp_threads = omp_get_max_threads(); auto processes_on_node = comm->get_procs_per_node(); auto io_threads_per_process = std::max(1, static_cast<int>((max_threads / processes_on_node) - omp_threads)); // Note that this excludes any threads our communication libraries (Aluminum, MPI, NCCL,...) // or the like may launch. return io_threads_per_process; }
 /** * MediaSource based on local image files. Currently, this MediaSource expects * a series of H264 frames located somewhere within an Android Assets folder. * * See https://github.com/GoogleCloudPlatform/mediaplayer/blob/master/sample/src/main/java/com/google/cloud/mediaplayer/sample/LocalMediaSource.java for an example. */ public class ImageFileMediaSource implements MediaSource { // Codec private data could be extracted using gstreamer plugin
 } func (e *Endpoints) createTCPServer(ctx context.Context, unaryInterceptor grpc.UnaryServerInterceptor, streamInterceptor grpc.StreamServerInterceptor) *grpc.Server { tlsConfig := &tls.Config{ //nolint: gosec // False positive, getTLSConfig is setting MinVersion GetConfigForClient: e.getTLSConfig(ctx), }
 { double spellValue = 0; std::vector<Spell> guildSpells = mageguild.GetSpells( GetLevelMageGuild(), isLibraryBuild() ); for ( const Spell & spell : guildSpells ) { if ( spell.isAdventure() ) { // AI is stupid to use Adventure spells. continue;
 if (_owner!= null) { _owner.Retain(); bufferHandle = new BufferHandle(_owner); } else { bufferHandle = new BufferHandle(); } } else { bufferHandle = new BufferHandle(); } return bufferHandle; }
 return nil } // Sink is required. // TODO: this is a problem for channels. See https://github.com/kyma-project/kyma/issues/10417 if source.Spec.Sink!= nil { sinkURI, err := c.resolveDestination(ctx, source.Spec.Sink, source.Namespace) if err!= nil {
 ) => { return value!== values[passwordKey]? SUCCESS : 'New password cannot be current password.'; };
 // The.NET Foundation licenses this file to you under the MIT license. // See the LICENSE file in the project root for more information. using System.Buffers; using System.Text.Encodings.Web.Internal;
 final Optional<BlockHeader> optionalParentHeader = protocolContext.getBlockchain().getBlockHeader(sealableBlockHeader.getParentHash()); final BlockHeader parentHeader = optionalParentHeader.orElseThrow( () -> new IllegalStateException("Block being created does not have a parent."));  //TODO: is this safe? //final CliqueContext cliqueContext = protocolContext.getConsensusState(); //final VoteTally voteTally = cliqueContext.getVoteT
 }; describe('cli', function(){ describe('domain', function() { var domain;  before(function (done) { suiteUtil = new MockedTestUtils(testPrefix);
 public void showDuplicatePicturePopup() { String uploadTitleFormat = getString(R.string.upload_title_duplicate); DialogUtil.showAlertDialog(getActivity(), getString(R.string.warning), String.format(Locale.getDefault(), uploadTitleFormat, uploadItem.getFileName()), getString(R.string.upload_image), getString(R.string.cancel), () -> { },
 metav1.ListMeta `json:"metadata,omitempty"` Items           []DeviceModel `json:"items"` }
 } // add the method declaration of the superclass to the candidates, if present SymbolReference<ResolvedMethodDeclaration> superClassMethodRef = MethodResolutionLogic.solveMethodInFQN (getSuperclassFQN(), name, argumentsTypes, staticOnly, typeSolver); if (superClassMethodRef.isSolved() && superClassMethodRef.getCorrespondingDeclaration()!= null) { candidates.add(superClassMethodRef.getCorrespondingDeclaration()); } //
 name = "UnclosedFilesStreamUsage", category = Category.ONE_OFF, severity = SeverityLevel.ERROR, summary = "Ensure a stream returned by java.nio.file.Files#{list,walk} is closed to prevent leaking file descriptors.") public final class UnclosedFilesStreamUsage extends BugChecker implements BugChecker.MethodInvocationTreeMatcher { private static final long serialVersionUID = 1L;
 Name:           "mailer", Type:           "Scheduled Job", DockerfilePath: "./Dockerfile", Platform:       &manifest.PlatformArgsOrString{}, }, Schedule: "@hourly", HealthCheck: &manifest.ContainerHealthCheck{
 this.snsClient = AmazonSNSClientBuilder.defaultClient(); } this.webhookManager = webhookManager; this.publishExecutor = managedCachedThreadPoolFactory.get("webhook-publish", configuration.getMaxConcurrentWebhookPublishing()); this.typeToArn = new ConcurrentHashMap<>(); }
 TestCase.assertEqual(1, objs.length, "One MixedObject"); TestCase.assertEqual(values.length, objs[0].s.size, `${values.length} values in set`); for (let i = 0; i < values.length; i++) { TestCase.assertTrue(objs[0].s.has(values[i]), `the set has "${values[i]}"`); } },
 'c': iD.Node({id: 'c'}), 'd': iD.Node({id: 'd'}), 'w-1': iD.Way({id: 'w-1', nodes: ['a', 'b']}), 'w1': iD.Way({id: 'w1', nodes: ['b', 'c']}), 'w-2': iD.
 class IterationChannel < ApplicationCable::Channel def subscribed # Assert that the user owns this iteration iteration = current_user.iterations.find_by!(uuid: params[:uuid]) # Don't use persisted objects for stream_for stream_for iteration.id
 if ( get_query_var( 'post_type' ) ) { if ( is_array( get_query_var( 'post_type' ) ) ) { $where.= " AND post_type IN ('". esc_sql( implode( "','", get_query_var( 'post_type' ) ) ). "')"; } else { $where.= $wpdb->prepare('AND post_type = %s', get_query_var( 'post_type' ) ); }
 Destination: &cfg.Reva.Gateway.GRPCNetwork, }, &cli.StringFlag{ Name:        "storage-gateway-grpc-addr", Value:       flags.OverrideDefaultString(cfg.Reva.Gateway.GRPCAddr, "0.0.0.0:9142"), Usage:       "Address to bind REVA service", EnvVars:     []string{"STORAGE_GATEWAY_GRPC_ADDR"}, Destination: &cfg
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4470-SEA 1645533468 1512823450</p> <hr> <p>Varnish cache server</p> </body>
 var err error entries, err := s.Client.FetchEntries(context.TODO(), &common.Empty{}) if err!= nil { return err } s.Entries = entries.Entries
 return data1.get(attr, default) == data2.get(attr, default) else: # Python 3 def match(data1, data2): return all(data1.get(k, d) == data2.get(k, d) for k, d in zip(attr, default)) return match try:
 } if err := b.tagsCloser.Close(); err!= nil { errs.add(fmt.Errorf("tag persistence: %w", err)) } if err := b.stateStoreCloser.Close(); err!= nil {
 action="store_true", help=_("enables dnf's obsoletes processing logic " "for upgrade or display capabilities that " "the package obsoletes for repoquery, and info.")) main_parser.add_argument("--rpmverbosity", default=None, help=_("debugging output level for rpm"), metavar='[debug level name]')
 public abstract T CreateBlock(); [GlobalSetup] public virtual void BlockSetup() { block = CreateBlock();
 editText.setHint(text); editText.setId(position); editText.setKeyListener(keyListener); editText.setImeOptions(EditorInfo.IME_ACTION_NEXT); editText.setSingleLine(); editText.setPadding(dpsToPixels(10), 0, dpsToPixels(10), 0);
 <%= numbered_lesson_title(lesson, lesson_index) %> <% end %> <div id="section-lessons__<%= lesson.id %>"> <% if user_signed_in? %> <%= render 'courses/course/lesson_completion_button', lesson: lesson, user: @user %> <% end %> </div> </div> <% end %>
 default: md.log.CInfof(ctx, "MDServerRemote: error refreshing auth token: %v", err) md.reconnect() md.log.CWarningf(ctx, "MDServerRemote: error refreshing auth token: %v", err) } }
 ) var ( envInitAppNamePrompt = fmt.Sprintf("In which %s would you like to create the environment?", color.Emphasize("application")) envInitDefaultConfigSelectOption      = "Yes, use default." envInitAdjustEnvResourcesSelectOption = "Yes, but I'd like configure the default resources (CIDR ranges)." envInitImportEnvResourcesSelectOption = "No, I'd like to import existing resource
 public class AliyunProperties implements Serializable { /** * Location to put staging files for uploading to OSS, defaults to the directory value of java.io.tmpdir. */ public static final String OSS_STAGING_DIRECTORY = "oss.staging-dir"; private final String ossStagingDirectory;
 dialOpts = append(dialOpts, e.c.grpcDialOptions...) } ctx := context.Background() if e.metadata.Len() > 0 { ctx = metadata.NewOutgoingContext(ctx, e.metadata) } return grpc.DialContext(ctx, addr, dialOpts...) }
 List<String> lines = IOUtils.readLines(new StringReader(result.content)); List<String> ips = new ArrayList<String>(lines.size()); for (String serverAddr : lines) { if (StringUtils.isNotBlank(serverAddr)) { ips.add(getFormatServerAddr(serverAddr)); } }
 out_file.open(file_name.c_str(), std::ofstream::out | std::ofstream::trunc); // If there is any problem in opening file if(!out_file.is_open()) { std::cerr << __func__ << ": ERROR: Unable to open file: "<< file_name << std::endl; std::exit(EXIT_FAILURE); } /**
 input_ = InputCell(1) output = ComputeCell([input_], lambda inputs: inputs[0] + 1) callback_buffer = [] output.add_callback(callback_buffer.append) input_.value = 3 self.assertEqual(callback_buffer, [4]) def test_callbacks_only_fire_on_change(self): input_ = InputCell(1)
 ->get() ->reject(function ($subscriber) use ($notified) { return in_array($subscriber->id, $notified); })->each(function ($subscriber) use ($incident) { $subscriber->notify(new NewIncidentNotification($incident)); }); }
 func (d *Datastore) ApplyEnrollSecrets(teamID *uint, secrets []*fleet.EnrollSecret) error { return d.withRetryTxx(func(tx *sqlx.Tx) error { return d.applyEnrollSecrets(tx, teamID, secrets) }) } func (d *Datastore) applyEnrollSecrets(exec sqlx.Execer, teamID *uint, secrets []*fleet.EnrollSecret) erro
 delete[] buf; } void MegaClient::makeattr(SymmCipher* key, const std::unique_ptr<string>& attrstring, const char* json, int l) const { makeattr(key, attrstring.get(), json, l); }
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4422-SEA 1645532586 1231167993</p> <hr> <p>Varnish cache server</p> </body>
 if (ctx->req_insert_count == 0) return H2O_HTTP3_ERROR_QPACK_DECOMPRESSION_FAILED; } if (ctx->delta_base >= 2 * (1 << 31)) { return H2O_HTTP3_ERROR_QPACK_DECOMPRESSION_FAILED; }  /* sign and delta base */ if (*src >= src_end)
 while i < len(self.shrink_target.blocks): j = min(i + 4, len(self.shrink_target.blocks) - 2) while j >= i: if self.incorporate_new_buffer( self.shrink_target.buffer[:i] + self.shrink_target.buffer[j:] ): break j -= 1
 if env.TimeoutPerEvent > 0 { opts = append(opts, handler.WithTimeoutPerEvent(env.TimeoutPerEvent)) } opts = append(opts, handler.WithRetryPolicy(env.RetryPolicy)) opts = append(opts, handler.WithPubsubReceiveSettings(rs)) // The default CeClient is good? return opts
 return TransformationStatus.InvalidData; } sealed class FromBase64 : Transformation { public override TransformationStatus Transform(ReadOnlySpan<byte> source, Span<byte> destination, out int bytesConsumed, out int bytesWritten) => Decode(source, destination, out bytesConsumed, out bytesWritten);
 "github.com/kiali/kiali/models" ) func buildJaegerServiceName(namespace, app string) string { conf := config.Get() if conf.ExternalServices.Tracing.NamespaceSelector && namespace!= conf.IstioNamespace { return app + "." + namespace
 // the following menu items will be available for all OS under Tools const toolsItemsAll = [{ label: _('Note attachments...'), click: () => { this.dispatch({ type: 'NAV_GO',
 // Mark bits for endpoint mark. Currently Felix takes the rest bits from mask available for use. markEndpointMark, allocated := markBitsManager.NextBlockBitsMark(markBitsManager.AvailableMarkBitCount()) if kubeIPVSSupportEnabled && allocated == 0 { log.WithFields(log.Fields{ "Name":     "felix-iptables",
 { if (client->json.isnumeric()) { return client->app->resendverificationemail_result((error)client->json.getint()); } }
 */ @Nonnull public static <T> ProcessorMetaSupplier writeJmsQueueP( @Nonnull String name, @Nonnull SupplierEx<? extends Connection> newConnectionFn, @Nonnull BiFunctionEx<? super Session,? super T,? extends Message> messageFn ) { return WriteJmsP.supplier(newConnectionFn, messageFn, name, false); } /**
 end def copy redirect_to new_report_path(id: params[:id]), notice: "" end def edit
 logger.Fatal("Failed to create BrokerCell reconciler", zap.Error(err)) } impl := v1alpha1brokercell.NewImpl(ctx, r) metricsReporter, err := metrics.NewLatencyReporter(metricsLatency) if err!= nil { logger.Error("Failed to create latency reporter", zap.Error(err)) } logger.Info("Setting up event handlers.")
 internal class SqlServerStatusRegistryDataStore : IStatusRegistryDataStore { private readonly SqlConnectionWrapperFactory _sqlConnectionWrapperFactory; private readonly VLatest.UpsertSearchParamStatusTvpGenerator<List<ResourceSearchParameterStatus>> _updateSearchParamRegistryTvpGenerator; private readonly VLatest.UpsertSearchParamStatusTvpGenerator<List<ResourceSearchParameterStatus>> _insertSearchParamRegistryTvpGenerator; public SqlServerStatusRegistryDataStore( SqlConnectio
 ) } func TestSigningWithTags(t *testing.T) { t.Run("Signing Transactions without tag doesn't work", newVMTest(). run( func(t *testing.T, vm *fvm.VirtualMachine, chain flow.Chain, ctx fvm.Context, view state.View, programs *programs.Programs) { // Create an account private key.
 @cmdutils.register() @cmdutils.argument('tab', value=cmdutils.Value.cur_tab) def reverse_selection(tab: apitypes.Tab) -> None: """Toggle caret selection mode. """ tab.caret.reverse_selection()
 enum State { ACTIVE(0x00), AUTHORITY_FILTER_DISABLED(0x01), SUSPENDED(0x02); private final int principalState; State(int state) {
 "session closed"); } Command command; if (queryCache!= null) { long newModificationMetaID = database.getModificationMetaId(); if (newModificationMetaID!= modificationMetaID) { queryCache.clear();
 } err := s.client.Acknowledge(ctx, req) if err!= nil { return fmt.Errorf("acknowledging messages: %v", err) } return nil }
 */ if (!c->may_control(c)) { /* We're done with this container */ if (lxc_container_put(c) > 0) containers[i] = NULL; continue;
 colArg = fmt.Sprintf("%sId", strcase.ToLowerCamel(strings.ReplaceAll(strToReplace, "-", "_"))) colPath = in[len(in)-1] // append s at the end only if it isn't already present if colPath[len(colPath)-1]!='s' { colPath = fmt.Sprintf("%ss", colPath) }
 [Fact] [Trait(Traits.Priority, Priority.One)] public async Task WhenGettingMetadata_GivenInvalidFormatParameter_TheServerShouldReturnNotAcceptable() { FhirException ex = await Assert.ThrowsAsync<FhirException>(async () => await Client.ReadAsync<CapabilityStatement>("metadata?_format=blah")); Assert.Equal(HttpStatusCode.NotAcceptable, ex.StatusCode);
 //Object.setPrototypeOf(PersonObject, Realm.Object); //Object.setPrototypeOf(PersonObject.prototype, Realm.Object.prototype); PersonObject.__proto__ = Realm.Object; PersonObject.prototype.__proto__ = Realm.Object.prototype; exports.PersonObject = PersonObject;
 func (client *clientRest) NodeSendStats(nodeKey string) (err error) { response, err := client.doPostRequest("node_send_stats", dto.NodeStatsRequest{ NodeKey: nodeKey, Sessions: []dto.SessionStats{}, }) if err == nil {
 if err2!= nil { return nil, crypto.Digest{}, err2 } compiledProgram, hash, err = algod.Compile(program) if err!= nil { return nil, crypto.Digest{}, err } copy(compiledProgramHash[:], hash) return compiledProgram, compiledProgramHash, err }
 reduction='mean', avg_factor=None, class_weight=None, ignore_index=-100): """Calculate the binary CrossEntropy loss. Args:
 # Requires Python 2.6+ and Openssl 1.0+ # import mock import azurelinuxagent.common.dhcp as dhcp from tests.tools import AgentTestCase, open_patch, patch class TestDHCP(AgentTestCase):
 elif'streams' not in kwargs: kwargs['streams'] = self.p.streams kwargs['per_element'] = self._per_element kwargs['link_dataset'] = self._propagate_dataset kwargs['link_inputs'] = self.p.link_inputs
 h2o_multithread_receiver_t receiver; }; st_status_ctx_t { int active; void *ctx; };
 * * @psalm-pure */ public static function parse(string $docblock,?int $line_number = null,?bool $preserve_format = false): array { // Strip off comments. $docblock = trim($docblock);
 $lang['widgets.widget_area_slug'] = 'Fält kortnamn'; $lang['widgets.view_code'] = 'Visa kod'; $lang['widgets.instance_title'] = 'Titel'; $lang['widgets.show_title'] = 'Visa Widget Titel?'; $lang['widgets.tag_title'] = 'Tagg'; $lang['widgets.no_available_widgets'] = 'Det finns inga widgetar tillgängliga.';
 // Setup remote source configuration templateSrcConfig.sourceURL = *sourceURL if *caCertFile!= "" { newCACert, err := ioutil.ReadFile(*caCertFile) if err!= nil {
 return; } $url = $this->router->generate( 'contao_backend_login', ['redirect' => $request->getUri()], UrlGeneratorInterface::ABSOLUTE_URL ); $event->setResponse(new RedirectResponse($url)); } }
 "github.com/drud/ddev/pkg/plugins/platform" "github.com/drud/drud-go/utils/dockerutil" "github.com/spf13/cobra" )
 const projectEnvKey = "PROJECT_ID" // NewMultiTopicDecoupleSink creates a new multiTopicDecoupleSink. func NewMultiTopicDecoupleSink(ctx context.Context, options...MultiTopicDecoupleSinkOption) (*multiTopicDecoupleSink, error) { opts := new(multiTopicDecoupleSinkOptions) for _, opt := range options { opt(opts)
 // ======= WALLET ACTIONS ======= export default class WalletsActions { createWallet: Action<{ name: string, currency: string, password?: string }> = new Action(); restoreWallet: Action<{ recoveryPhrase: string, walletName: string }> = new Action(); importWalletFromKey: Action<{ filePath: string }> = new Action(); deleteWallet: Action<{ walletId: string }> = new Action();
 EncryptHeader     = "swarm-encrypt" ) // TargetsContextKey is a custom context key type TargetsContextKey struct{} // fileUploadResponse is returned when an HTTP request to upload a file is successful type fileUploadResponse struct {
 requiredApprovalsForSealConstruction uint                            // number of approvals that are required for each chunk to be sealed } // AssignmentCollector has three different states. During state transition, there are some // common dependencies and immutable values to shared: // - `base` holds common dependencies // - `AssignmentCollectorBase` in addition holds extra immutable values. type AssignmentCollectorBase struct { base result        *flow.ExecutionResult // execution result
 case FLOAT: case DOUBLE: Expression condition = operand; if (operand instanceof MethodCallExpression) { condition = ((MethodCallExpression) operand).targetExpression; } operand = Expressions.call(BuiltInMethod.STRING_VALUEOF.method, operand);
 return $buffer; } if ( empty( $this->critical_css->get_current_page_critical_css() ) && empty( $this->options->get( 'critical_css', '' ) ) ) { return $buffer; }
 TaskConfig: TaskConfig{ Count: Count{ Autoscaling: Autoscaling{ CPU: percentageP("70%"), Memory: percentageP("70%"), }, }, CPU: aws.Int(512),
 import torch from..builder import DETECTORS from.single_stage import SingleStageDetector
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4436-SEA 1645547163 1543368711</p> <hr> <p>Varnish cache server</p> </body>
 opts = &Options{} } if opts.RevisionField == "" { opts.RevisionField = docstore.DefaultRevisionField } return &collection{ db:           db,
 // Overwrite the page meta data (see #2853, #4955 and #87) $responseContext = System::getContainer()->get(ResponseContextAccessor::class)->getResponseContext(); $responseContext->setMetadata('title', $objArticle->pageTitle); $responseContext->setMetadata('description', $objArticle->pageDescription); $responseContext->setMetadata('keywords', $objArticle->pageKeywords);  if ($responseContext
 actions = append(actions, action) } } actions = append(actions, account.MergeSpendAction(spendActions)...) ttl := req.TTL.Duration if ttl == 0 {
 end describe '#createtopic' do it 'creates the topic with the desired topic name and AWS Region and displays the resulting topic ARN' createtopic_client.stub_responses( create_topic, :topics => [ { :topic_arn => "arn:aws:sqs:*:444455556666:queue1",
 `y_pred`, and returns the loss. If the model has multiple outputs, you can use a different loss on each output by passing a dictionary or a list of losses. The loss value that will be minimized by the model will then be the sum of all individual losses, each weighted by `loss_weights`. loss_weights: (Optional) a list or dictionary specifying scalar coefficients (Python floats) to weight the loss contributions of different model outputs. The 
 DebugLogger(combat) << "Attacker: " << attacker->Name(); // Set launching carrier as at least basically visible to other empires. if (launches_event) { // Check that the launching carrier is at least basically visible to other empires. for (auto detector_empire_id : combat_info.empire_ids) { Visibility initial_vis = combat_info.empire_object_visibility[detector_empire_id][attacker_id]; Trac
 result : Dict[str, int] Dictionary where keys are worker addresses and values are an open port for LightGBM to use. """ lightgbm_ports: Set[int] = set() worker_ip_to_port = {} for worker_address in worker_addresses: port = client.submit(
 // DdevSequelproCmd represents the sequelpro command var DdevSequelproCmd = &cobra.Command{ Use:   "sequelpro", Short: "Connect to a project database with Sequel Pro", Long:  `A helper command for using sequelpro (macOS database browser) with a running DDEV-Local project.`, Run: func(cmd *cobra.Command, args []string) { if 
 // Check if the best chain has changed while we were disconnecting or processing blocks. // If so then we need to return and continue processing the newer chain. pindexNewMostWork = FindMostWorkChain(); if (!pindexNewMostWork) return NULL; if (pindexNewMostWork->nChainWork > pindexMostWork->nChainWork) { LogPrint("parallel", "Returning because chain work has changed while connect
 const char * origTrueValue; const char * origFalseValue; bool restoreAs = data->booleanRestore >= 0; if (value[0] == '1' && value[1] == '\0') { if (data->booleanRestore >= 0) { keySetMeta (key, "origvalue", data->booleans[data->booleanRestore].trueValue); }
 category_torch_type[category] = to_torch_type[np.dtype(category_tensors[category].dtype())] if type(category_tensors[category]) is TensorGPU: if not torch_gpu_device: torch_gpu_device = torch.device('cuda', dev_id) category_device[category] = torch_gpu_device else: category_device[category] = torch_cpu_device
 listResult, err = sfs.SimpleFSReadList(ctx, opid) require.NoError(t, err) assert.Len(t, listResult.Entries, 1, "Expected 1 directory entries in listing") // Assume we've exhausted the list now, so expect error _, err = sfs.SimpleFSReadList(ctx, opid)
 } /** * @brief Self-test implementations to * test the `integral_approx` function. * * @returns `void` */
 import { ELEMENT_NODE, DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE } from './constants'; function getClosestDomNodeParent(vnode) { if (!vnode) return null; if (typeof vnode.type === 'function') { return getClosestDomNodeParent(vnode._parent); } return vnode; } export function initDebug() {
 handleOnProductOpen = () => this.props.updateAutocompleteVisible(false); // map Magento 2.3.1 schema changes to v2.0.0 proptype shape to maintain backwards compatibility // TODO: remove once Magento 2.3.1 schema changes are deprecated mapProducts(products) { return products.map(product => { if (typeof product.small_image === 'object') {
 // DispatchMsg takes a message and puts it into a queue for later processing. // This allows a protocol to have a backlog of messages. func (n *Node) DispatchMsg(msg *SDAData) { n.msgDispatchQueueMutex.Lock() n.msgDispatchQueue = append(n.msgDispatchQueue, msg) n.msgDispatchQueueMutex.Unlock() dbg.Lvl3("DispatchQueue-length is", len(n.msgDispatchQueue)) if len(n.ms
 Blockly.Variables.renameVariable = function(workspace, variable, opt_callback) { // Validation and modal message/title depends on the variable type var promptMsg, modalTitle, validate = Blockly.Variables.nameValidator_.bind(null, variable.type); var varType = variable.type; if (varType == Blockly.LIST_VARIABLE_TYPE) { promptMsg = Blockly.Msg.RENAME_LIST_TITLE;
 final String deployId = getAndCheckDeployId(requestId); checkConflict(!(requestManager.markAsBouncing(requestId) == SingularityCreateResult.EXISTED), "%s is already bouncing", requestId); requestManager.createCleanupRequest( new SingularityRequestCleanup(JavaUtils.getUserEmail(user), isIncrementalBounce? RequestCleanupType.INCREMENTAL_BOUNCE : RequestCleanupType.BOUNCE, System.currentTimeMillis(), Optional.<Boolean> absent(), 
 // Add sync methods if (realmConstructor.Sync) { Object.assign(realmConstructor.Sync, require('./sync')); Object.assign(realmConstructor.Sync, require('./al-sync-user')); } // TODO: Remove this now useless object.
 */ package org.flowable.engine.impl.bpmn.behavior; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.Date; import java.util.List; import java.util.stream.Collectors; import java.util.stream.Stream; import org.apache.commons.lang3.StringUtils;
 g_hash_table_replace (metadata_hash, g_strdup ("rpmostree.inputhash"), g_variant_ref_sink (g_variant_new_string (new_inputhash))); bool gpgkey = false; if (!_rpmostree_jsonutil_object_get_optional_boolean_member (treefile, "gpg_key", &gpgkey, error)) goto out;
 opcodetype opcode; if (!GetOp(pc, opcode)) break; if (opcode == OP_CHECKSIG || opcode == OP_CHECKSIGVERIFY || (enableDataSigVerify && opcode == OP_DATASIGVERIFY)) n++; else if (opcode == OP_CHECKMULTISIG || opcode == OP_CHECKMULTISIGVERIFY) {
 buf.Append(StringHelper.CommaSpace).Append(PrimaryKey.SqlConstraintString(dialect, defaultSchema)); } if (dialect.SupportsNotNullUnique && UniqueKeys.Count > 0) { foreach (UniqueKey uk in UniqueKeyIterator) { if (uk.SqlConstraintString(dialect)!= "") { buf.Append(',').Append(uk.SqlConstraintString(dialect)); } } }
 $critical_css_content = str_replace( '\\', '\\\\', $critical_css_content ); $buffer = preg_replace( '#</title>#iU', '</title><style id="rocket-critical-css">'. wp_strip_all_tags( $critical_css_content ). '</style>', $buffer, 1 ); return preg_replace( '#</body>#iU', $this->return_remove_cpcss_script(). '</bod
 if (total_data_recv > 0) { fprintf(stdout, "Early Data received: "); for (ssize_t i = 0; i < total_data_recv; i++) { fprintf(stdout, "%c", early_data_received[i]); } fprintf(stdout, "\n");
 namespace { std::optional<shared_model::interface::types::TimestampType> oldestTimestamp( const iroha::BatchPtr &batch) { auto timestamps = batch->transactions() | boost::adaptors::transformed(
 forgotPassword = () => {}; setForgotPasswordForm = () => { this.forgotPassword = (className) => { return ( <div className={className}> <ForgotPassword initialValues={{ email: this.state.defaultUsername }} onClose={this.closeForgotPassword} /> </div> ); } };
 G2 = nx.barbell_graph(3, 0) # There is only one cut edge, and each set has volume seven. S2 = {0, 1, 2} assert nx.conductance(G2, S2) == 1 / 7 class TestEdgeExpansion:
 if err!= nil { return err } } else if len(def) > 0 && def[0].ForwardConfig!= nil && len(def[0].ForwardConfig.TargetGroups) > 1 { // Multiple target groups means we can keep the listener var active bool
 return current; } /** * Get the schema and iterator for a single partition. * * @param file the data file * @param task the file scan task * @param requiredSchema the schema required by the task * @param idColumns the identity columns * @param spec the partition spec */ abstract Pair<Schema, Iterator<T>> getJoinedSchemaAndIteratorWithIdentityPartition( DataFile file, FileScanTask task, Schema requiredSchema, 
 void HIPInternal::print_configuration(std::ostream &s) const { const HIPInternalDevices &dev_info = HIPInternalDevices::singleton(); #if defined(HIP_VERSION) s << "macro  HIP_VERSION = " << HIP_VERSION << " = version " << HIP_VERSION / 100 << "." << HIP_VERSION % 100 << std::endl; #endif for (int i = 0; i < dev_info.m_h
 sofa::core::topology::BaseMeshTopology* topoCon; firstBody.body->getContext()->get(topoCon); if (!topoCon || topoCon->getTopologyType()!= sofa::core::topology::TopologyElementType::TRIANGLE) return; // Output declarations
 return true; } bool python_reader::fetch_label(CPUMat& Y, int data_id, int col) { return true; }
 ResourceClusterBlockProposalQueue = "cluster_compliance_proposal_queue" // collection node, compliance engine ResourceClusterBlockVoteQueue     = "cluster_compliance_vote_queue"     // collection node, compliance engine ResourceBeaconKey                 = "beacon-key"                           // consensus node, DKG engine ResourceApprovalQueue             = "sealing_approval_queue"            // consensus node, sealing engine ResourceReceiptQueue              = "sealing_receipt_queue"             //
 state, err := c.EnsureSubscription(ctx, source, source.Spec.Project, source.Spec.Topic, source.Status.SubscriptionID) switch state { case pubsub.OpsGetFailedState: logger.Error("Failed to get subscription ops job.", zap.Error(err)) return err case pubsub.OpsCreatedState: // If we created a job to make a subscription, then add the finalizer and update the status. source.Status.MarkSubscriptionOperation("Creating",
 browser.browserAction.onClicked.addListener(catcher.watchFunction((tab) => { if (shouldOpenMyShots(tab.url)) { if (!hasSeenOnboarding && telemetryPref) { sendEvent("goto-onboarding", "selection-button"); catcher.watchPromise(forceOnboarding()); return; } catcher.watchPromise(analytics.refreshTelemetryPref().then(() => {
 def _is_generator_function(x): """Checks whether x is a generator function or a callable object where __call__ is a generator function""" import inspect import types if inspect.isgeneratorfunction(x): return True if x is None or inspect.isfunction(x):
 const pkg = fs.readFileSync(`${MOCK_TEMPLATE_BUILD_PATH}/package.json`, 'utf8') try { var validData = JSON.parse(pkg) expect(validData.author).to.equal(escapedAnswers.author) done() } catch (err) { done(err)
 @Override public Capabilities getCanonicalCapabilities() { return new ImmutableCapabilities(CapabilityType.BROWSER_NAME, BrowserType.CHROME, PLATFORM_NAME, getPlatform()); } @Override
 (re.compile(r'^download-remove --all$'), r'download-clear'), (re.compile(r'^hint links fill "([^"]*)"$'), r'hint links fill \1'), (re.compile(r'^set-cmd-text :open -([tb]) {url:pretty}$'), r'set-cmd-text :open -\1 {url:pretty}'), (re.compile(r'^hint links fill :open -t
 // This file is generated via a gradle task and should not be edited directly. public final class PantheonInfo { private static final String CLIENT_IDENTITY = "pantheon"; private static final String version = clientIdentity + "/v" + PantheonInfo.class.getPackage().getImplementationVersion() + "/"
 else: raise NoDataError("Provide at least a position, velocity" " or force group in the h5md file.") except (ValueError, IndexError): raise IOError from None self._frame = frame
 @Override protected void configure() { install(new SingularityServiceModule()); // TODO: We should probably also provide a way to set the default namespace //       for the user, rather than always using the host default. } @Provides
 Map<String, Object> data = objectMapper.readValue(entry.getData(), new TypeReference<HashMap<String, Object>>() { }); assertThat(data).containsKeys(Fields.PROCESS_DEFINITION_ID, Fields.PROCESS_INSTANCE_ID, Fields.VALUE_STRING, Fields.TENANT_ID); assertThat(data.get(Fields.PROCESS_DEFINITION_ID)).isNotNull(); assertThat(data.get(Fields.PROCESS_INSTANCE_ID)).isNotNull(); assertThat(data.get(Fields.VALUE_STRING)).isNotNull(); assertThat(da
 topicCondSet.Manage(ts).MarkTrue(TopicConditionAddressable) } else { ts.Address.URL = nil topicCondSet.Manage(ts).MarkFalse(TopicConditionAddressable, "emptyURL", "URL is the empty string") } }
 $l['purgespammer'] = "Purge Spammer"; $l['purgespammer_purge'] = "Purge spammer {1}"; $l['purgespammer_purge_desc'] = "This will delete user's whole content (posts, private messages, events, etc.) and {1} him."; $l['purgespammer_ban'] = "ban"; $l['purg
 return true; } check_acked_status(); logInfo(RTPS_HISTORY, "Reader Proxy doesn't exist in this writer"); return false; }
 /* Package migration enables you to generate migrations back and forth. It generates both migrations.
 } if (f!= 0.0) Q->xy_factor *= f; if (normalized_name!= nullptr && strcmp(normalized_name, "Radian") == 0) P->left = PJ_IO_UNITS_RADIANS; else if (normalized_name!= nullptr && strcmp(normalized_name, "Degree") == 0) P->left = PJ_IO_UNITS_DEGREES; } if ((name = pj_par
 } #ifdef ENABLE_CHAT CommandChatCreate::CommandChatCreate(MegaClient *client, bool group, userpriv_vector *upl) { this->client = client; this->chatPeers = upl; delete chat; cmd("mcc"); arg("g", (group)? 1 : 0);
 filesMatch(Lists.newArrayList("C", "D", "E"), appendsBetweenScan(2, 5)); Assert.assertTrue(listener1.event().fromSnapshotId() == 2); Assert.assertTrue(listener1.event().toSnapshotId() == 5); Assert.assertTrue(listener1.event().isIncremental()); } @Test
 return m_state.getNonce(_addr); } h256 MPTState::rootHash(bool) const { return m_state.rootHash(); }
 from MDAnalysis.tests.datafiles import PDB import pickle @pytest.fixture(params=[
 stream(modules).forEach(m -> stream(m.localSentences()).forEach(new CheckHOLE(errors, m)::check)); stream(modules).forEach(m -> stream(m.localSentences()).forEach(new CheckTokens(errors, m, isKast)::check)); stream(modules).forEach(m -> stream(m.localSentences()).forEach(new CheckK(errors)::check));
 QStringList ptDbSplit = db->getCard(name)->getPowTough().split("/"); QStringList ptSplit = pt.split("/"); if (facedown || (ptDbSplit.at(0)!= ptSplit.at(0) || ptDbSplit.at(1)!= ptSplit.at(1))) painter->setPen(QColor(255, 150, 0)); else painter->setPen(Qt::white);
 <img src="<?php echo esc_url( PODS_URL. 'ui/images/pods-logo-green.svg' );?>" alt="<?php esc_attr_e( 'Pods logo', 'pods' );?>" class="pods-logo"> <div class="pods-block-placeholder_content"> <h2 class="pods-block-placeholder_title"><?php esc_html_e( 'View', 'pods' );?></h2> <p><
 * @return the number of elements actually drained */ @SuppressWarnings("unchecked") default <E> int drainTo(Collection<E> target) { for (Object o : this) { if (!(o instanceof E)) { throw new IllegalArgumentException("Element type mismatch"); } target.add((E) o); }
 "github.com/aws/copilot-cli/internal/pkg/manifest" ) const ( fmtInvalidRepo = "unable to locate the repository URL from the properties: %+v" )
 bool image_data_reader::fetch_label(CPUMat& Y, int data_id, int mb_idx) { const label_t label = m_image_list[data_id].second; if (label >= static_cast<label_t>(0) && label < static_cast<label_t>(m_num_labels)) { Y.Set(label, mb_idx, 1); } else { LBANN_ERROR( "\"",this->get_type(),"\" data reader ", "expec
 if os.path.isfile(ovf_file_path): try: ovf_env = OvfEnv(fileutil.read_file(ovf_file_path)) self.report_event(message=str(ovf_env.provision_guest_agent), is_success=True, duration=0, operation=WALAEventOperation.ProvisionGuestAgent)
 $args = [ 'post_type'        => 'question', 'posts_per_page'   => $number, 'orderby'          => 'title', 'tax_query'        => [ // phpcs:ignore WordPress.DB.SlowDBQuery.slow_db_query_tax_query -- Query limited by the number of questions. [ 'taxonomy' => 'question-category',
 if ( $files ) { foreach ( $files as $file ) { if ( preg_match( '#^index(?:\-.+\.|\.)(?:html(?:_gzip)?)$#', $file ) ) { rocket_direct_filesystem()->delete( $file ); } }
 } var interceptor = FieldInterceptionHelper.ExtractFieldInterceptor(entity); return interceptor?.GetUninitializedLazyProperties()?? ImmutableHashSet.Create<string>(); } public override bool IsLifecycleImplementor
 if (bl>contained.getBeginLine()) return false; if (bl==contained.getBeginLine() && bc>contained.getBeginColumn()) return false; if (container.getEndLine() <= contained.getEndLine()) return false; return!(container.getEndLine() == contained.getEndLine() && container.getEndColumn() <= contained.getEndColumn()); } return true;
 wp_die( esc_html__( 'Invalid post type. Can duplicate only lessons and courses','sensei-lms' ) ); } // Set up event properties. $event            ='sensei_'. $post_type. '_duplicate'; $event_properties = [ $post_type. '_id' => $post_id, ];
 Parameters ---------- applier: Callable Function object to register `funcs` *funcs: list List of functions to register in `applier` Returns -------
 char errmsg[256]; snprintf(errmsg, 256, "step%d-hbondchk failed: H=%d end(H)=%d str(H+1)=%d\n", step, Hindex, End_Index(Hindex,hbonds), comp ); system->error_ptr->one(FLERR, errmsg); } } }
 }); const perSince = getPerSince(); const disallowed = userSafe.attempts && userSafe.attempts.filter(attempt => (attempt >= perSince)).length >= allowedAttempts; if (!disallowed) { return false; }
 $advancedSettings = $oQuestion->getAdvancedSettingsWithValues(null, $sQuestionTheme); // Group the array in categories $advancedSettings = self::groupAttributesByCategory($advancedSettings); // This category is "general setting". unset($advancedSettings['Attribute']);
 * @param n number * @return Sum of binomial coefficients of number */ uint64_t binomialCoeffSum(uint64_t n) { // Calculating 2^n return (1 << n);
 ''.format(attrname)) vals = cur.fetchall() except sqlite3.DatabaseError: raise IOError( "Failed reading the atoms from DMS Database") from None else: attrs[attrname] = np.array(vals, dtype=dt)
 def multi_gpu_test(model, data_loader, tmpdir=None, gpu_collect=False): """ Test a PyTorch model using multi-gpu. This function modified from the original implementation at https://github.com/rusty1s/proxy_zoo/blob/master/models/pytorch/multi_gpu_test.py.  Args: model (torch.nn.Module): A PyTorch model. data_loader (DataLoader): A PyTorch data loader. t
 */ protected $factories = [ 'VuFind\Hierarchy\TreeRenderer\JSTree' => 'VuFind\Hierarchy\TreeRenderer\Factory::getJSTreeFactory' ]; /**
 "github.com/fxamacker/cbor/v2" "github.com/onflow/cadence" "github.com/onflow/cadence/runtime" "github.com/onflow/flow-go/crypto/hash" "github.com/onflow/flow-go/model/flow" "github.com/stretchr/testify/assert" "github.com/stretchr/testify/require" ) func TestAddEncodedAccountKey_error_handling_produces_valid_utf8(t *testing.T) {
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4479-SEA 1645540621 3009828113</p> <hr> <p>Varnish cache server</p> </body>
 """Redis result store backend.""" from __future__ import absolute_import, unicode_literals import threading from ssl import CERT_NONE, CERT_OPTIONAL, CERT_REQUIRED from functools import partial from kombu.utils.functional import retry_over_time from kombu.utils.objects import cached_property
 return fmt.Errorf("unmarshal pipeline manifest: %w", err) } if len(pipeline.Name) > 100 { return fmt.Errorf(`pipeline name '%s' must be shorter than 100 characters`, pipeline.Name) } o.pipelineName = pipeline.Name
 combiners = new ColumnSet(Lists.newArrayList(Splitter.on(",").split(encodedColumns))); isPartialCompaction = ((env.getIteratorScope() == IteratorScope.majc) &&!env.isFullMajorCompaction()); if (options.containsKey(DELETE_HANDLING_ACTION_OPTION)) { try { deleteHandlingAction = DeleteHandlingAction.valueOf(options.get(DELETE_HANDLING_ACTION_OPTION)); } catch (IllegalArgumentException e) { LOG.warn("Invalid v
 pD = &sgLevels[currlevel].item[i]; if (pD->bCmd == 0xFF) { pD->bCmd = CMD_STAND; sgbDeltaChanged = true; pD->x = item[ii]._ix; pD->y = item[ii]._iy; pD->wIndx = item[ii].IDidx;
 v_file = "Vagrant.configure(\"2\") do |c|\n" hosts.each do |host| host['ip'] ||= randip #use the existing ip, otherwise default to a random ip v_file << "  c.vm.define '#{host.name}' do |v|\n" v_file << "    v.vm.hostname = '#{host.name}'\n" v_file << "    v.vm.box = '#{hos
 defer func() { if panicked || err!= nil { e := _txOrm.Rollback() logs.Error("rollback transaction failed: %v", e) if _txOrm.IsClosed() { _txOrm.Close() } } else { e := _txOrm.Commit() logs.Error("commit transaction failed: %v", e) if _txOrm.IsClosed() { _txOrm.Close() } } }()
 checkForFailures(); if (startTime.compareAndSet(0, System.currentTimeMillis())) { // This is a critical section that is protected by a synchronization // check.  This is the only place where we can modify the internal // state of the class. List<GarbageCollectorMXBean> gcmBeans = ManagementFactory.getGarbageCollectorMXBeans(); for (GarbageCollectorMXBean garbageCollectorMXBean : gcmBeans) {
 } } @Override public void remove(SessionId id) { Require.nonNull("Session ID", id);
 // save current page ( a page is an image file inside the archive ) this.swiperInstance.on('slideChange', () => { this.currentPage = this.swiperInstance.activeIndex; Events.trigger(this, 'pause'); }); });
 string commonNamespace; if (!RootNamespaces.TryGetValue(assembly, out commonNamespace)) { commonNamespace = ExtractAssemblyRootNamespace(assembly); } if (string.IsNullOrWhiteSpace(commonNamespace)) {
 this.slaveDiskTotal = slaveDiskTotal; } public double getCpusUsed() { return cpusUsed; }
 run.PrivateId = runId _, err := r.writer.DoTx(ctx, db.StdRetryCnt, db.ExpBackoff{}, func(r db.Writer, w db.Writer) error { rows, err := r.Query(ctx, completeRunQuery, []interface{}{completed, total, runId}) if err!= nil { return errors.Wrap(err, op) }
 } hit = random(68, 100); hper = 90 - (BYTE)monster[m].mArmorClass - dist; if (hper < 5) hper = 5; if (hper > 95)
 proxy.normalisedAddrs = append(proxy.normalisedAddrs, addr) } if len(froms) == 0 { // We need at least one address to be able to forward to. // This should never happen, but we still need to guard // against it. return nil } env := []string{
 <div css={sharedStyles.articleLayout.content}> <Header>Languages</Header> <TitleAndMetaTags canonicalUrl={`${urlRoot}/languages/`} title="React - Languages" />
 { use JobTrait; protected function getObjectAndParams() { $params = [];
 private static final String PANTHEON_PREFIX = "pantheon_"; private final Map<MetricCategory, Collection<Collector>> collectors = new ConcurrentHashMap<>(); private static final Supplier<MetricsSystem> INSTANCE = Suppliers.memoize(PrometheusMetricsSystem::init); private static MetricsSystem init() { final PrometheusMetricsSystem metricsSystem = new PrometheusMetricsSystem(); metricsSystem.collectors.put(MetricCategory.PROCESS, singleton(new StandardExports())); metricsSystem
 #   RSpec.configure do |config| #     config.format_docstrings false #   end def format_docstrings(&block) @format_docstrings_block = block_given?? block : DEFAULT_FORMATTER end
 TcpClient client = kvp.Value.client; // close the stream if not closed yet. it may have been closed // by a disconnect already, so use try/catch try { client.GetStream().Close(); } catch {} client.Close(); }
 it('log'+ servicename +'-c'+ "existingContinuationToken" +'--json (get logs by Continuation Token)', function (done) { var cmd = ('node cli.js mobile log'+ servicename +'-c'+ existingContinuationToken +'--json').split(' '); var scopes = setupNock(cmd); executeCmd(cmd, function (result) { result.exitStatus.shoul
 main_parser = argparse.ArgumentParser(dnf.const.PROGRAM_NAME, add_help=False) main_parser._optionals.title = _("Optional arguments") main_parser.add_argument("--legacy", "--rpm", dest="legacy", action="store_true", help=_("use legacy functionality of dnf")) main_parser.add_argument("-c", "--config", dest="config_file_path", default=None, metavar='[config file]', help=_("config file location"))
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4427-SEA 1645550874 172312544</p> <hr> <p>Varnish cache server</p> </body>
 sub *Subscription } // Ack acknowledges the message, telling the server that it does not need to // be sent again to the associated Subscription. It returns immediately, but // the actual ack is sent in the background, and is not guaranteed to succeed. func (m *Message) Ack() { // Send the message back to the subscription for ack batching. // size is an estimate of the size of a single AckID in bytes.
 fieldT := objT.Field(i) label, name, fType, id, class, ignored := parseFormTag(fieldT) required := parseMetaTag(fieldT) if ignored { continue }
 if ( event->type==et_close ) { SD_DoCancel( sd ); } else if ( event->type==et_save ) { sd->fv->script_unsaved = false; } else if ( event->type==et_char ) {
 def get(self, k, d=None): """Return the value in the dictionary. If the key (k) is not found, this returns None unless a specified default (d) is specified. """ try: return self.__getitem__(k)
 public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: prepareToFinish(); break; case R.id.send: checkToSendMessage();
 } func (h handler) ServeHTTP(w http.ResponseWriter, req *http.Request) { defer req.Body.Close()  caller := req.Header.Get(CallerHeader) if len(caller) == 0 { http.Error(w, "caller name is required", http.StatusBadRequest)
 uint all_sum = 0; for (int i = 0; i < numDevices; ++i) { mg_info *mg_info_temp = nullptr; result = hip_internal::ihipHostMalloc(tls, (void **)&mg_info_temp, sizeof(mg_info), hipHostMallocDefault); if (result!= hipSuccess) { hip_internal::ihipHostFree(tls, mg_sync_ptr);
 } // EachByPack returns a channel that yields all blobs known to the index // grouped by packID but ignoring blobs with a packID in packPlacklist for // finalized indexes. // When the context is cancelled, the background goroutine // terminates. This blocks any modification of the index. func (idx *Index) EachByPack(ctx context.Context, packBlacklist restic.IDSet) <-chan EachByPackResult {
 if (tableRef instanceof SqlBasicCall && ((SqlBasicCall) tableRef).getOperator() instanceof SqlAsOperator) { SqlBasicCall basicCall = (SqlBasicCall) tableRef; SqlAsOperator operator = (SqlAsOperator) ((SqlBasicCall) tableRef).getOperator(); tableRef.unparse(writer, 0, 0); writeKeywordAndPeriod(writer, snapshot); } else { tableRef.unp
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4475-SEA 1645530272 1519636845</p> <hr> <p>Varnish cache server</p> </body>
 return fmt.Errorf("missing sort key %q", c.sortKey) } if av.M[docstore.RevisionField], err = encodeValue(docstore.UniqueString()); err!= nil { return err } in := &dyn.PutItemInput{
 if set_tasks["ever_failed"]: if not set_tasks["failed"]: smiley = ":)" reason = "there were failed tasks but they all succeeded in retry" else: smiley = ":(" reason = "there were failed tasks"
 Script::ObjectiveC when 'bash','sh','shell','minimal' then Script::Generic else name = lang.split('_').map { |w| w.capitalize }.join Script.const_get(name, false) rescue Script::Ruby
 storiesOf('Inputs (Checkbox)', module).add('Checkbox', () => ({ data () { return { field,
 func main() { flag.Usage = Usage var ( server          = flag.Bool("server", false, "Run server") protocol        = flag.String("P", "binary", "Specify the protocol (binary, compact, json, simplejson)") addr            = flag.String("addr", nats.DefaultURL, "NATS address") secure          = flag.Bool("secure", false, "Use tls secure transport") port            = flag.Stri
 return nil, err } if p.config.ContainerPort == 1 { p.config.ContainerPort = 3000 }
 -------- >>> G = nx.Graph() >>> G.add_path([0, 1, 2, 3, 4]) >>> print(list(nx.dfs_postorder_nodes(G, 0))) [4, 3, 2, 1, 0] >>> print(list(nx.dfs_postorder_nodes(G, 0, 2))) [1, 0] Notes
 for directed in [False, True]: edge_counts = [[0] * 5 for row in range(5)] for i in range(runs): # Generate a random graph and count the edges G = nx.generators.random_graphs.fast_gnp_random_graph( n, p, directed=directed ) for (v, w) in G.edges:
 // +build go1.10 package net import (
 """Initialize sids and other state variables. :Arguments: granularity : str (daily, hourly or minutely) The duration of the bars. annualizer : int <optional> The number of bars in a year. If not provided, will extract from granularity. capital_base : float <default: 1.0e5> How much capital to start with. """
 nodeMetaModel.getTypeNameGenerified(), nodeMetaModel.getTypeNameGenerified() )); addOrReplaceWhenSameSignature(nodeCoid, cloneMethod); } }
 '''Cython - Command Line Parsing''' from __future__ import print_function  from Cython import __version__ as version import Options menu = { 'default' : {
 unique.setTableName(tableName); command.addConstraintCommand(unique); } if (readIf("CHECK")) { Expression expr = readExpression();
 }); Selection selection = selector.select(new CompactionSelector.SelectionParameters() { @Override public PluginEnvironment getEnvironment() { return senv;
 target.Log = "application"; // set the source explicitly to prevent random AppDomain name being used as the source name target.Source = sourceName; //The Layout is intentionally just ${message}. Be able to check message length without other patterns. target.Layout = new SimpleLayout("${message}"); if (entryType!= null) {
 def clear_keystring(self): """Clear the currently entered key sequence.""" if self._keystring: self._debug_log("discarding keystring '{}'.".format(self._keystring)) self._keystring = '' self.keystring_updated.emit(self._keystring)
 // node update sc_updatenode(); #ifdef ENABLE_SYNC // run syncdown() before continuing applykeys(); if (is_cachedfetchnode()) { // we are part of a cached fetchnode, do not force any sync scan return false; } return true; #endif break;
 _DaskPart = Union[np.ndarray, pd_DataFrame, pd_Series, ss.spmatrix] _PredictionDtype = Union[Type[np.float32], Type[np.float64], Type[np.int32], Type[np.int64]] _HostWorkers = namedtuple('HostWorkers', ['default', 'all']) class _DatasetNames(Enum):
 return result; } @Nullable static InetAddress InetAddressOrNull(@Nullable String string, @Nullable byte[] bytes) { try { return bytes == null? null : InetAddress.getByAddress(bytes); } catch (UnknownHostException e) {
 command_add("tattoo", "- Change the tattoo of your target (Drakkin Only)", AccountStatus::QuestTroupe, command_tattoo) || command_add("tempname", "[newname] - Temporarily renames your target. Leave name blank to restore the original name.", AccountStatus::GMAdmin, command_tempname) || command_add("petname", "[newname] - Temporarily renames your pet. Leav
 package org.springframework.cloud.dataflow.core.dsl; /** * After parsing a task definition from a DSL string, the validation visitor may optionally run. * Even though it parses successfully there may be issues with how the definition is constructed. The * {@link TaskValidatorVisitor} will find those problems and report them as instances of * {@link TaskValidationProblem}.
 os << std::endl << "# auto combat spell casting: on/off" << std::endl; os << "auto spell casting = " << ( opt_global.Modes( GLOBAL_BATTLE_AUTO_SPELLCAST )? "on" : "off" ) << std::endl; os << std::endl << "# game language (empty value means English)" << std::endl; os << "lang = " << force_lang << std::
 * This class was copied from Guava release 23.0 to replace the older Guava 14 version that had been used in Accumulo. * It was annotated as Beta by Google, therefore unstable to use in a core Accumulo library.  We learned this the hard * way when Guava version 20 deprecated the getHostText method and then removed the method all together in version 22. * See issue https://issues.apache.
 buts[2] = _("_No"); buts[3] = NULL; ret = gwwv_ask( _("Unsaved script"),(const char **) buts,0,2,_("You have an unsaved script in the «Execute Script» dialog. Do you intend to discard it?")); if (ret == 1) { warn_script_unsaved = false; SavePrefs(true); } return( ret ); }
 JsonNode responseNode = objectMapper.readTree(response.getEntity().getContent()); closeResponse(response); assertThatJson(responseNode).when(Option.IGNORING_EXTRA_FIELDS).isEqualTo("{" + " id: '" + formDefinition.getId() + "'," + " key: '" + formDefinition.getKey() + "',"
 for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { require.NoError(t, tt.service.Start(t)) defer func() { require.NoError(t, tt.service.Stop(t)) require.NoError(t, tt.service.Wait()) }() tt.request.Run(t) }) }
 public override bool Release() { if (!IsRetained) BufferPrimitivesThrowHelper.ThrowInvalidOperationException(); bool released = Interlocked.Decrement(ref _referenceCount) == 0; if (released) { OnNoReferences(); } return released; } protected virtual void OnNoReferences()
 desktop->server = server; desktop->config = config; desktop->xcursor_theme = roots_xcursor_theme_create("default"); if (desktop->xcursor_theme == NULL) { log_warn("Failed to load xcursor theme"); wlr_list_free(desktop->views); free(desktop); return NULL;
 // todo remove allocation // msg byte[] buffer = new byte[HeaderLength + header.readLength]; Buffer.BlockCopy(headerBuffer, 0, buffer, 0, HeaderLength); ReadHelper.SafeRead(stream, buffer, HeaderLength, header.readLength);
 std::string topic_name = TEST_TOPIC_NAME; for (uint32_t len : array_lengths) { topic_name += "_"; test_big_message(topic_name, len); } }
 return nil } // LoadGroup loads a group via cs3 by id and writes it to the provided group func (r CS3Repo) LoadGroup(ctx context.Context, id string, g *proto.Group) (err error) { t, err := r.authenticate(ctx) if err!= nil {
 class DeprecateXcode64 < Base def apply if config[:osx_image] == 'xcode6.4' sh.echo "Running builds with Xcode 6.4 in Travis CI is deprecated and will be removed in January 2019.\n", ansi: :yellow sh.echo "If Xcode 6.4 is critical to your builds, please contact our support team at support@travis-ci.com to discus
 public function up() { Schema::table('metrics', function (Blueprint $table) { $table->integer('order')->default(0); $table->integer('component_id')->default(0); }); }
 if err!= nil { return nil, false, err } else if!ok { panic(fmt.Sprintf("Name had already been verified for %q... This is a bug", name)) } sch, err := tbl.GetSchema(ctx)
 new BaseNumberOptionsConfiguration(Culture.Arabic, options))), new Arabic.PercentageExtractor(options))); // TODO: These models are failing on.NET.  See: https://github.com/dotnet/aspnetcore/pull/29262#discussion_r368552650 RegisterModel<NumberModel>( Culture.English, options => new NumberModel(
 # Note: MrBayes may choke on large alignments if not interleaved if interleave is None: interleave = (columns > 1000) n.write_nexus_data(self.handle, interleave=interleave) def _classify_alphabet_for_nexus(self, alphabet):
 * @function * * @param {Object} props * @param {Function} props.setIsCartUpdating Function for setting the updating state of the shopping cart * @param {String} props.selectedShippingMethod The carrier code or method code for the selected shipping method * @param {Array<Object>} props.shippingMethods An array of available shipping methods. * @param {ShippingRadiosMutations} props.mutations GraphQL mutations for a shipping radio sele
 def changes {}.tap do |hash| changed.each do |name| change = attribute_change(name) if change hash[name] = change if change[0]!= change[1] end end
 return sitrep; } SitRepEntry CreatePlanetStarvedToDeathSitRep(int planet_id, int population) { SitRepEntry sitrep(UserStringNop("SITREP_PLANET_DEPOPULATED"), "icons/sitrep/colony_destroyed.png"); sitrep.AddVariable(VarText::PLANET_ID_TAG,     boost::lexical_cast<std::string>(planet_id)); sitrep.AddVariable(VarText::
 # perform the analysis iteratively? # # To address the evolution of the graphs, you generate a variety of graph samples. In other words, you need # **generative models** of graphs. Instead of learning node and edge features, you would need to model the # distribution of arbitrary graphs. While general generative models can model the density function explicitly and # implicitly and generate samples at once or sequentially, you only focus
 // Scope has two uses: in JWTSecurity or OAuth2Security it defines a scope // supported by the scheme. In Security it lists required scopes. // // Scope must appear in Security, JWTSecurity or OAuth2Security. // // Scope accepts one or two arguments: the first argument is the scope name and // when used in JWTSecurity or OAuth2Security the second argument is a
 if (EnvironmentVariables!= null) { foreach (var pair in EnvironmentVariables) { psi.EnvironmentVariables[pair.Key] = pair.Value; Logger.Log($"Added environment variable: {pair.Key}={pair.Value}");
 } if err!= nil { log.Lvlf4("%+v got error (%+s) while receiving message", r.ServerIdentity.String(), err) if err == ErrClosed || err == ErrEOF { // Connection got closed. log.Lvl3(r.address, "handleConn with closed connection: stop (dst=", remote.Address, ")") return } if err == ErrTimeout { // Temporary error, continue. } // Temporary error, continue.
 return &identity } func (idm *IdentityManager) CreateNewIdentity(passphrase string) (*dto.Identity, error) { account, err := idm.KeystoreManager.NewAccount(passphrase) if err!= nil { return nil, err }
 # See the License for the specific language governing permissions and # limitations under the License. """Tests the LienRulesEngine.""" import datetime import copy import itertools
 stopEvent->attachToCompletionFuture(&cf, hStream, hipEventTypeStopCommand); } ihipPostLaunchKernel(f->_name.c_str(), hStream, lp); #if (__hcc_workweek__ >= 19213) if (lockHSAQueue) { lp.av->release_hsa_queue(); } #endif }
 // fillAttr sets attributes based on the entry info. It only handles fields // common to all entryinfo types. func fillAttr(ei *libkbfs.EntryInfo, a *fuse.Attr) { a.Valid = 1 * time.Minute a.Size = ei.Size
 /// <returns>Number of bytes written to the destination.</returns> public static int Decode(ReadOnlySpan<byte> source, Span<byte> destination) { //Diagnostics.Debug.Assert(destination.Length >= ComputeDecodedLength(source.Length), "Destination is too small"); ref byte srcBytes = ref source.DangerousGetPinnableReference(); ref byte destBytes = ref destination.DangerousGetPinnableReference();
 client_ctx->websocket_timeout = NULL; } client_ctx->ssl_ctx = self->config.ssl_ctx; client_ctx->ssl_session_cache = h2o_cache_create(H2O_CACHE_FLAG_MULTITHREADED, 4096, 86400 * 1000, h2o_socket_ssl_destroy_session_cache_entry); h2o_context_set_handler_context(ctx, &self->super, client_ctx); }
 SingleMemberAnnotationExpr retrieved = retrievedOpt.get(); assertEquals("Path", retrieved.getName().asString()); pmmlRestResourceGenerator.setPathValue(TEMPLATE); String classPrefix = getSanitizedClassName(KIE_PMML_MODEL.getName()); String expected = URLEncoder.encode(classPrefix).replaceAll("\\+", " "); assertEquals(expected, retrieved.getMemberValue().asStringLiteralExpr().asString()); } @Test
 seedMinLength := 48 seed := make([]byte, seedMinLength) input := make([]byte, 100) for i := 0; i < 3; i++ { n, err := mrand.Read(seed) require.Equal(t, n, seedMinLength)
 if ((!field.label) && (!field.contextual)) { field.label = _.startCase(field.name.replace(/^_/, '')); } if (fieldType.validate) { fieldType.validate(field, options, warn, fail); }
 device = d.split(':')[1] break break except OSError: self.log.warning('Unable to find hostname record for %s', hostname) pass return device def set_hostname_record(self, hostname):
 position: lesson_counter, section_id: section.id, is_project: true, url: "/web_development_101/pairing_project.md", ) # +++++++++++
 request.setAttribute(QNetworkRequest.CacheLoadControlAttribute, QNetworkRequest.AlwaysNetwork) if request.url().scheme().lower()!= 'data': suggested_fn = (utils.sanitize_filename(title) + ".html" if title else urlutils.filename_from_url(request.url())) else: # We might be downloading a binary blob embedded on a page or even # generated dynamically via javascript. We try to figure out a more
 var numberFormatInfo = _AppService.Currencies.GetNumberFormatInfo(settings.Currency)?? _AppService.Currencies.GetNumberFormatInfo("USD"); double step = Math.Pow(10, -(numberFormatInfo.CurrencyDecimalDigits)); return View(new ViewPointOfSaleViewModel() { Title = settings.Title, Step = step.ToString(CultureInfo.InvariantCulture),
 case P128_modetype::Wipe: return F("wipe"); case P128_modetype::Dualwipe: return F("dualwipe"); case P128_modetype::FakeTV: return F("faketv"); } return F("*unknown*"); }
 if (owner && owner->IsClient()) { if (!(owner->CastToClient()->ClientVersionBit() & EQ::versions::maskUFAndLater)) { if ((typeofpet!= petFamiliar && typeofpet!= petAnimation) || (GetAA(aaPetCommand) >= 1 && GetAA(aaPetCommand, 1) >= 1)) { taunting=true; } }
 "github.com/aws/copilot-cli/internal/pkg/deploy/cloudformation/stack" ) // DeployTask deploys a task stack and waits until the deployment is done. // If the task stack doesn't exist, then it creates the stack. // If the task stack already exists, it updates the stack.
 } @Override public void setPartitionKeyFnForInput(int ordinal, FunctionEx<?,?> keyFn) { partitionKeyFnsForInput[ordinal] = keyFn; } @Override public boolean shouldRebalanceInput(int ordinal) { return shouldRebalanceInputFlags[ordinal]; } @Override
 _, err := bs.build.BuildOn(bs.parentID, bs.setter) bs.Require().NoError(err) bs.Assert().Empty(bs.assembled.Receipts, "should have no receipts in payload when pending receipts are for unknown blocks") bs.Assert().ElementsMatch(flow.GetIDs(bs.pendingReceipts), bs.remRecIDs, "should remove receipts with unknown blocks") bs.Assert().Empty(bs.pendingReceipts, "should clear pendingReceipts"
 bootstrap = Flag( doc="Debug server catalog bootstrap.") bootstrap_cache_yolo = Flag( doc="Disable consistency check.") edgeql_parser = Flag( doc="Debug EdgeQL parser (rebuild grammar verbosly).")
 { public class CoreRunPublisher : IBuilder { public CoreRunPublisher(string coreRunPath, string customDotNetCliPath) { CoreRunPath = coreRunPath; DotNetCliPublisher = new DotNetCliPublisher(customDotNetCliPath); } private string CoreRunPath { get; } private DotNetCliPublisher DotNetCliPublisher { get; }
 int The number of bits needed """ if self.number_of_edges() >= 0x80000000 or self.number_of_nodes() >= 0x80000000: return 64 else: return 32
 conn->server_protocol_version = server_version; return 0; } #define S2N_MIN_SUPPORTED_PROTOCOL_VERSION 6 static int s2n_server_supported_versions_recv(struct s2n_connection *conn, struct s2n_stuffer *in)
 namespace lbann { namespace callback { void print_statistics::setup(model *m, const std::string&) { #ifdef LBANN_VERSION lbann_comm *comm = m->get_comm(); if (comm->am_world_master()) {
 fastrtps::rtps::RTPSWriter* /*writer*/, const fastrtps::LivelinessLostStatus& status) { if (data_writer_->listener_!= nullptr) { data_writer_->listener_->on_liveliness_lost(data_writer_->user_datawriter_, status); } data_writer_->publisher_->publisher_listener_.on_liveliness_lost(data_writer_->user_datawriter_, status); } bool DataWriterImpl::wait_for_
 auto type_registry = caf::actor_cast<type_registry_actor>( self->state.registry.find_by_label("type-registry")); if (!type_registry) return caf::make_message(make_error(ec::missing_component, "type-registry")); caf::error request_error = caf::none; auto rp = self->make_response_promise(); // The overload for'request(...)' taking a'std::chrono::duration' does not
 "strings" "time" "go.uber.org/yarpc/internal/examples/protobuf/example" "go.uber.org/yarpc/internal/examples/protobuf/examplepb" "go.uber.org/yarpc/internal/testutils" "google.golang.org/grpc" ) var flagOutbound = flag.String("outbound", "tchannel", "The outbound to use for unary calls")
 } $plugins = get_site_option( 'active_sitewide_plugins' ); return isset( $plugins[ $plugin ] ); } /**
 """ COVERAGE_UNCHANGED_SPECIFICATION = QuerySpecification( adjusted_weight=0.5, threshold=1.0, query_format=COVERAGE_UNCHANGED_FORMAT, formatter=_coverage_formatter,
 return &p, nil } // IsUserFavorite returns true if this policy is a favorite of the current user. func (p Policy) IsUserFavorite() bool { return p.isUserFavorite }
 $view = $this->getView(); $translate = $view->plugin('translate'); foreach ($strings as $key => &$translation) { $translateFunc = substr($key, -5) === '_html'? $translate : $this->transEsc; $translation = is_array($translation)? call_user_func_array([$translateFunc, '__invoke'], $translation)
 jobMetrics.delete(id); JobResult jobResult = jobResults.get(id); if (jobResult!= null) { jobResult.destroy(); jobResults.delete(id); } });
 } List<SingularityMesosArtifact> combinedArtifacts = task.getDeploy().getUris().or(Collections.emptyList()); combinedArtifacts.addAll(task.getPendingTask().getExtraArtifacts().or(Collections.emptyList())); for (SingularityMesosArtifact artifact : combinedArtifacts) { commandBldr.addUris(URI.newBuilder()
 /** * Set focus on a suitable element, taking into account the previously selected. * @param {HTMLElement} container - element to limit scope * @returns {HTMLElement} focused element */ export function autoFocus(container) { if (!isEnabled()) {
 if *conf == "" { location := path.Join(dir, file) // check that the location is valid if _, err := os.Stat(location); err == nil { *conf = location } }
 CHECK(test_hipDeviceGetAttribute(deviceId, hipDeviceAttributeMaxTexture3DWidth, props.maxTexture3D[0])); CHECK(test_hipDeviceGetAttribute(deviceId, hipDeviceAttributeMaxTexture3DHeight, props.maxTexture3D[1])); CHECK(test_hipDeviceGetAttribute(deviceId, hipDeviceAttributeMaxTexture3DDepth, props.maxTexture3D[2])); #endif passed(); };
 @JsonProperty("gcsCredentials") Map<String, Object> gcsCredentials, @JsonProperty("gcsStorageClass") Optional<String> gcsStorageClass, @JsonProperty("encryptionKey") Optional<String> encryptionKey, @JsonProperty("useS3ServerSideEncryption") Optional<Boolean> useS3ServerSideEncryption) { Preconditions.checkNotNull(directory); Preconditions.checkNotNull(fileGlob); Preconditions.checkNotNull(s3Bucket);
 class LeafNode(Node): __slots__ = ('reader',) def __init__(self, path, reader): Node.__init__(self, path)
 TEST(StatusConditionImplTests, notify_trigger) { using ::testing::StrictMock; StrictMock<ConditionNotifier> notifier; StatusConditionImpl uut(&notifier); StatusMask mask_all = StatusMask::all();
 if len(self.nlabel_dict) > 1: self.nlabels_flag = True assert g.number_of_nodes() == n_nodes # update statistics of graphs self.n += n_nodes
 git.highlightjs_language || slug end def average_test_run_time git.average_test_run_time + INFRASTRUCTURE_DURATION_S end # TODO: Set this properly
 } message := "The CertificateRequest was denied by an approval controller" apiutil.SetCertificateRequestCondition(cr, cmapi.CertificateRequestConditionReady, cmmeta.ConditionFalse, cmapi.CertificateRequestReasonDenied, message) }
 picsPathEdit->setReadOnly(true); QPushButton *picsPathButton = new QPushButton("..."); connect(picsPathButton, SIGNAL(clicked()), this, SLOT(picsPathButtonClicked())); QPushButton *clearDownloadedPicsButton = new QPushButton(tr("Delete downloaded pictures")); connect(clearDownloadedPicsButton, SIGNAL(clicked()), this, SLOT(clearDownloadedPicsButtonClicked())); cardDatabasePathLabel = new QLabel; cardDatabasePathEdit 
 class OptimScheduler(LossRecorder): '''Learning rate Scheduler for training involving multiple phases.'''. def __init__(self, layer_opt, phases, nb_batches, stop_div = False): self.phases, self.nb_batches, self.stop_div = phases, nb_batches, stop_div
 <div class="post_date"> <span class="date"> {{ theme:image file="date.png" }} About {{ helper:date timestamp=created_on }} ago. </span> <div class="timespan"> {{ theme:image file="timespan.png" }} {{ helper:timespan created_on }} </div> </div>
 if (rdevices > 0) { if (skip_device > 0 && rdevices == 1) Impl::throw_runtime_exception( "Error: cannot KOKKOS_SKIP_DEVICE the only " "KOKKOS_RAND_DEVICE.  Raised by Kokkos::initialize(int narg, char* " "argc[])."); std::srand(getpid()); while (device < 0) {
 // Get list of available jobs. if (runningTasks.Count < _exportJobConfiguration.MaximumNumberOfConcurrentJobsAllowed) { IReadOnlyCollection<ExportJobOutcome> jobs = await _fhirOperationDataStore.GetAvailableExportJobsAsync( _exportJobConfiguration.MaximumNumberOfConcurrentJobsAllowed - runningTasks.Count, _exportJobConfiguration.JobHeartbeatTimeoutThreshold, cancellationToken);
 def show @member = User.find(params[:id]) @updates = @member.updates respond_to do |format| format.html # show.html.haml
 ``p_components``, ``cumulated_variance`` will not sum to 1. ``align=True`` now correctly aligns the trajectory and computes the correct means and covariance matrix. .. versionchanged:: 0.19.0 The start frame is used when performing selections and calculating mean positions.  Previously the 0th frame was always used. .. versionchanged:: 0.19.0 The results are stored using `MDAnalysis.analysis
 // CreateTable creates a table with the name and schema given. func (db *Database) CreateTable(ctx *sql.Context, tableName string, schema sql.Schema) error { if!doltdb.IsValidTableName(tableName) { return fmt.Errorf("Invalid table name: '%v'", tableName) }
 // +build linux  package auth import (
 <html> <head> <title>{{- range.Styles}}<link rel="stylesheet" href="{{.}}">{{end}}</title> {{- range.Styles}}<link rel="stylesheet" href="{{.}}">{{end}} {{- range.Scripts}}<script src="{{.}}"></script>{{end}} </head> <body> {{.Doc.body}}
 ub = ub.Set(expression.Name(fp), expression.Value(m.Value)) } } ub = ub.Set(expression.Name(docstore.RevisionField), expression.Value(time.Now().UTC())) ce, err := expression.NewBuilder().WithCondition(*condition).WithUpdate(ub).Build() if err!= nil { return err
 remover.skipOnCompletion = true; int playerStatus = PlaybackPreferences.getCurrentPlayerStatus(); if(playerStatus == PlaybackPreferences.PLAYER_STATUS_PLAYING) { InAppBroadcastUtil.sendBroadcast(this, new Intent( PlaybackService.ACTION_PAUSE_PLAY_CURRENT_EPISODE).setPackage(getPackageName())); } } remover.executeAsync();
 } else { // The current user has no credentials, let it fail naturally at the RPC layer (no ticket) // We know this won't work, but we can't do anything else throw new IllegalStateException("The current user is a proxy user but there is no underlying real user (RPCs will fail): " + currentUser); } } else {
 { if (write (fd, buffer, sizeof (buffer))!= sizeof (buffer)) { // save the error state but keep on writing in the hope that further writes wont't fail error = 1; break; } } } if (error) { return 0; }  return 1; error:
 def test_smooth(self): seriesList = [ TimeSeries('collectd.test-db1.load.value',0,1,1,[range(20)]) ] def mock_evaluateTokens(reqCtx, tokens, replacements=None): seriesList = [ TimeSeries('collectd.test-db1.load.value',0,1,1,[range(20)]) ] for series in seriesList: series.pathExpression = series.name
 /* GT: English (possibly translating it in parentheses). I believe there */ /* GT: are legal reasons for this. */ /* GT: So "Añadir SIL Open Font License (licencia de fuentes libres)" */ tnlabel[5].text = (unichar_t *) S_("Add SIL OFL licensing"); tnlabel[5].image_precedes = false; tnlabel[5].image = &OF
 OUTPUT_RESULTS_FILE_PATH = os.path.join(_LOG_COLLECTOR_DIR, "results.txt") COMPRESSED_ARCHIVE_PATH = os.path.join(_LOG_COLLECTOR_DIR, "logs.zip") CGROUPS_SLICE = _AZURE_SLICE CGROUPS_UNIT = "collect-logs.scope" INVALID_CGROUPS_ERRCODE = 2
 set("parquet.avro.write-old-list-structure", "false"); MessageType type = ParquetSchemaUtil.convert(schema, name); if (createWriterFunc!= null) { Preconditions.checkArgument(writeSupport == null, "Cannot write with both write support and Parquet value writer");
 class ConnectionPool include Loggable # @return [ Hash ] options The pool options. attr_reader :options
 shared_ptr<const Element> e1 = map->getElement(it->first); shared_ptr<const Element> e2 = map->getElement(it->second); //LOG_INFO(e1->getTags()["note"] << " <=> " << e2->getTags()["note"]); CPPUNIT_ASSERT_EQUAL(HOOT_STR_EQUALS(e1->getTags()["note"].c_str(), e2->getTags()["note"].c_str()), true); } }
 internal SessionImpl(SessionFactoryImpl factory, ISessionCreationOptions options) : base(factory, options) { // This context is disposed only on session own disposal. This greatly reduces the number of context switches // for most usual session usages. It may cause an irrelevant session id to be set back on disposal, but since all // session entry points are supposed to set it, it should not have any consequences. _context = SessionIdLoggingContext.CreateO
 void DLBus::attachDLBusInterrupt(void) { ISR_Receiving = false; attachInterrupt(digitalPinToInterrupt(ISR_Pin), ISR, CHANGE); }
 ldapfilter.substring(ldapfilter.indexOf("=", ldapfilter.indexOf(searchRangeStr)+searchRangeStr.length())); } Log.debug("Trying to find group names using query: {}", ldapfilter); // Perform the LDAP query return manager.retrieveList(
 switch (nodesWhitelistResult.result()) { case SUCCESS: return new JsonRpcSuccessResponse(req.getId(), true); case ERROR_EXISTING_ENTRY: return new JsonRpcErrorResponse(req.getId(), JsonRpcError.NODE_WHITELIST_EXISTING_ENTRY); case ERROR_DUPLICATED_ENTRY: return new JsonRpcErrorResponse(
 } else if (profile.service === "demo") { profile.intrinsicName = "demo on " + user.createdAt.toISOString().substring(0, 10); } else if (profile.service === "ldap") { profile.intrinsicName = user.services.ldap.username; } else { throw new Error("unrecognized identity service: ", profile.service); }
 else: """change non-float data to float data, need to copy""" data = np.array(mat.reshape(mat.size), dtype=np.float32) ptr_data, type_ptr_data, _ = c_float_array(data) n_preds = self.__get_num_preds(num_iteration, mat.shape[0], predict_type) preds = np.zeros(n_preds, dtype=np.float64)
 @pyqtSlot(str) def _on_config_changed(self, option: str) -> None: if option.startswith('fonts.tabs.'): self.update() elif option == 'tabs.favicons.scale':
 "bytes" "encoding/json" "fmt" "io" "os" "reflect"
 elif len(transform_or_transforms.get_shape()) == 2: transforms = transform_or_transforms else: raise ValueError( "transforms should have rank 1 or 2, but got rank %d" % len(transform_or_transforms.get_shape())) # Invert transformations transforms = flat_transforms_to_matrices(transforms=transforms)
 // PingProposal pings service proposal as being alive func (mApi *mysteriumAPI) PingProposal(proposal dto_discovery.ServiceProposal, signer identity.Signer) error { statsDto := dto.NodeStatsRequest{ NodeKey:     proposal.ProviderID, NodeVersion: version.GetInfo().Branch, } req, err := requests.NewSignedPostRequest(mApi.discoveryAPIAddress, "ping_proposal", statsDto, signer)
 <div className={classes.root}> <h3 className={classes.editingHeading}> <FormattedMessage id={'shippingMethod.heading'} defaultMessage={'Shipping Method'} /> </h3>
 public class CdcJsonDataSerializerHook implements DataSerializerHook { public static final int CdcJsonData = 1; public static final int CdcJsonEvent = 2; public static final int FACTORY_ID = FactoryIdHelper.getFactoryId(JET_CDC_JSON_DS_FACTORY, JET_CDC_JSON_DS_FACTORY_ID);
 import collections import os import shade import tempfile import time import paramiko from molecule import util from molecule.driver import basedriver
 } }, runPlayer() { const el = this.$el.querySelector(this.playerOpts.selector); if (el && this.playerOpts.player) { this.playerOpts.player(el); } }, clicked(e) {
 NvidiaRuntime:                       os.Getenv("ECS_NVIDIA_RUNTIME"), TaskMetadataAZDisabled:              utils.ParseBool(os.Getenv("ECS_DISABLE_TASK_METADATA_AZ"), false), CgroupCPUPeriod:                     parseCgroupCPUPeriod(), SpotInstanceDrainingEnabled:         utils.ParseBool(os.Getenv("ECS_DISABLE_SPOT_INSTANCE_DRAINING"), true), }, err }
 // noop } const isUsingNpm = Boolean(process.env.npm_config_user_agent) && process.env.npm_config_user_agent.includes('npm') /* Adapted from https://github.com/prisma/prisma/blob/974cbeff4a7f616137ce540d0ec88a2a86365892/src/packages/client/scripts/postinstall.js
 // on non-relay, all the outgoing connections are throttled. wn.throttledOutgoingConnections = int32(wn.config.GossipFanout) } if wn.config.TLSCertFile!= "" && wn.config.TLSKeyFile!= "" { wn.scheme = "https" } else {
 </li> <% end %> <% if presenter.display_hire_me %> <li> <%= link_to 'Hire me', user_path(presenter.user), {remote: true, class: 'user-profile-btn',
 cmd.AddCommand(BuildEnvInitCmd()) cmd.AddCommand(BuildEnvListCmd()) cmd.AddCommand(BuildEnvDeleteCmd()) cmd.SetUsageTemplate(template.Usage) cmd.Annotations = map[string]string{ "group": group.Develop,
 // Use define from require.js not webpack's define var _define = window.define; // fetch var fetch = require("whatwg-fetch"); require("core/utils").fetch = fetch; _define("fetch", function() {
 return nil } func basicNameValidation(val interface{}) error { s, ok := val.(string) if!ok {
 Booster* ref_booster = reinterpret_cast<Booster*>(handle); auto get_row_fun = RowFunctionFromCSR(indptr, indptr_type, indices, data, data_type, nindptr, nelem); int nrow = nindptr - 1; ref_booster->Predict(num_iteration, predict_type, nrow, num_col, get_row_fun, config, out_result, out_len); API_END(); }
 progressBar.setVisibility(View.GONE); }, error -> Log.e(TAG, Log.getStackTraceString(error))); if (UserPreferences.getSubscriptionsFilter().isSubscriptionsFiltered()) { feedsFilteredMsg.setText("{md-info-outline} " + getString(R.string.subscriptions_are_filtered)); Iconify.addIcons(feedsFilteredMsg); feedsFilteredMsg.setVisibility(View.VISIBLE);
 HealthCheck.large_base_example ) # This is a hack to ensure that the number of columns in the # zero_data matrix is large enough to accommodate the number of # rows in the base matrix. for i in hrange(self.cap): if i not in zero_data.forced_indices: break
 static const char *get_ext(h2o_configurator_command_t *cmd, yoml_t *node) { if (strcmp(node->data.scalar, "default") == 0) { return node->data.scalar; } else if (assert_is_extension(cmd, node) == 0) { return node->data.scalar + 1; } else {
 timeDistinct = make(map[execute.Time]bool) } return tbl.Do(func(cr flux.ColReader) error { l := cr.Len() j := execute.ColIdx(t.column) for i := 0; i < l; i++ { // Check distinct switch col.Type {
 * Tests playback permission. Grabs the permission when called inside a click event (or any other valid user interaction). * @returns {Promise} Promise that resolves succesfully if playback permission is allowed. */ check () { if (appHost.supports('htmlaudioautoplay')) { return Promise.resolve(true); } return new Promise((resolve, reject) => { const media = createTestMediaElement(); media.play().then(() => { resolve();
 module Beaker class Platform < String #supported platforms PLATFORMS = /^(centos|fedora|debian|oracle|redhat|scientific|sles|ubuntu|windows|solaris|aix|el)\-.+\-.+$/ PLATFORM_VERSION_CODES = { :debian => { "wheezy"  => "7",
 #include "ElectricEquipmentITEAirCooled.hpp" #include "ElectricEquipmentITEAirCooled_Impl.hpp" #include "ElectricEquipmentITEAirCooledDefinition.hpp" #include "ElectricEquipmentITEAirCooledDefinition_Impl.hpp" #include "Schedule.hpp"
 APIGroups() []metav1.APIGroup } // serverResourcesInterface exposes functions for Kubernetes discovery // API. type serverResourcesInterface interface { ServerPreferredResources() ([]*metav1.APIResourceList, error) }
 std::vector<std::function<std::string()>> message_gen = { [&] { // TODO(@l4l) 26/06/18 need to be simplified at IR-1479 const auto str = perm_converter_->toString(permissions); const auto perm_debug_str = std::accumulate(str.begin(), str.end(), std::string()); return (boost::format("failed to insert role permissions, role "
 // When updating the database, please also run./bin/dumpschema --record // This updates schema.sql with the latest full database schema const MAX_DB_LEVEL = exports.MAX_DB_LEVEL = 20; exports.forceDbVersion = function(version) { mozlog.info("forcing-db-version", {db: db.constr, version});
 JsonNode rootNode = objectMapper.readTree(response.getEntity().getContent()); closeResponse(response); assertThatJson(rootNode).when(Option.IGNORING_EXTRA_FIELDS).isEqualTo("{" + "data: [ {" + "         id: '" + processInstance3.getId() + "'"
 var objects = realm.objects(schemas.PersonObject); TestCase.assertTrue(objects[0] instanceof schemas.PersonObject); function WrongPerson() {} WrongPerson.schema = schemas.PersonObject.schema; WrongPerson.realmClassName = 'WrongRealm'; TestCase.assertThrows(function() { realm.objects();
 if bins or normalize: raise NotImplementedError( "OmniSci' 'value_counts' does not support 'bins' and 'normalize' parameters." ) new_frame = self._modin_frame.value_counts(
 * <b>Sample Spring XML for Hazelcast Jet Client:</b> * <pre>{@code *   <jet:client id="client"> *      <jet:group name="jet"/> *      <jet:network connection-attempt-limit="3" *          connection-attempt-period="3000" *          connection-timeout="1000"
 'this API client') def iter_kubernetes_nodes(self, project_id, zone, cluster): """Iterate k8s nodes in a cluster from GCP API. Args: project_id (str): id of the project to query. zone (str): The zone the cluster is in.
 if tfm_y is not None: self.tfm_y=tfm_y self.tfms_y=tfms return self.tfmargs_y = kwargs def transform_labels(self, tfms:TfmList=None, **kwargs):
 private void checkImports(JavaNode node, Object data) { String name = node.getImage(); // Find all "matching" import declarations for (ASTImportDeclaration importDeclaration : imports) {
 } } }
 // more boilerplate, but there's not much else we need from those. So // override os.Stderr temporarily as a hack to inject stderr to the zap // logger. originalStderr, _ := os.Stderr.(*os.File) os.Stderr = stderr defer func() { os.Stderr = originalStderr }()
 SimTK_TEST(b->getStateVariableValue(s, "../subState") == 20); SimTK_TEST(b->getStateVariableValue(s, "../../internalSub/subState") == 10); top.getStateVariableValue(s, "a/b/subState"); SimTK_TEST(top.getStateVariableValue(s, "a/b/subState") == 10); SimTK_TEST(top.getStateVariableValue(s, "a/b/subState") == 10); 
 TableMetadata lastMetadata = ops.current(); try { if (lastMetadata == null) { LOG.debug("Not an iceberg table: %s", identifier); return false; } else { if (purge) {
 } } if (node instanceof MethodCallExpr) { Optional<ResolvedMethodDeclaration> declaration = JavaParserFacade.get(typeSolver).solve((MethodCallExpr) node).getCorrespondingDeclaration(); if (declaration.isPresent()) { return declarationClass.cast(declaration.get()); } else { throw new UnsolvedSymbolException("We are unable to find the method declaration corresponding to " + node); }
 it '#shows metadata which includes data and the owner of document' do @document = mock_model(Document, user: "John", created_at: (Date.new(2015,1,1))) expect(document).to match / "Created #{time_ago_in_words(@document.created_at)} ago by #{@document.user.display_name}/  end end  it '#shows the date of a document' do @document = mock_model(Document
 highQualityURLLabel.setText(tr("Custom Card Download URL:")); highQualityURLLinkLabel.setText(QString("<a href='%1'>%2</a>").arg(LINKING_FAQ_URL).arg(tr("Linking FAQ"))); clearDownloadedPicsButton.setText(tr("Reset/Clear Downloaded Pictures")); updateNotificationCheckBox.setText(tr("Enable notifications about a server supporting more/new features (new version/update available)")); } void GeneralSettingsPage::setEna
 } /** * Returns true if user is logged in * * @return true if user is logged in; false otherwise */ public boolean isLogged() { return authentication.getCurrentUser()!= null;
 return matches[1], matches[2], nil } func getSpannerHost() string { return os.Getenv("GCLOUD_TESTS_GOLANG_SPANNER_HOST") }
 @Override public void onConfigurationChanged(@NonNull final Configuration newConfig) { super.onConfigurationChanged(newConfig); ViewGroup.LayoutParams rlBottomSheetLayoutParams = rlBottomSheet.getLayoutParams(); rlBottomSheetLayoutParams.height = getActivity().getWindowManager().getDefaultDisplay().getHeight() / 16 * 9; rlBottomSheet.setLayoutParams(rlBottomSheetLayoutParams); }
 def auto_fp16_wrapper(old_func): def new_func(*args, **kwargs): # TODO: We could probably avoid the dimension check if we use the # `auto_fp16` decorator to specify tensors to convert. args_info = getfullargspec(old_func) num_args = len(args) num_kwargs = len(kwargs)
 if md.metricsClient == nil { return errNoClient } return doRequest(ctx, func(ctx context.Context) error { _, err := md.metricsClient.Export(ctx, &colmetricpb.ExportMetricsServiceRequest{ ResourceMetrics: protoMetrics, }) return err }, md.connection.cfg.RetrySettings, md.connection.stopCh) }() if err!= nil { md.connection.setStateDisconnected(err)
 $l['no_attachments_selected'] = "You did not select any attachments to delete."; $l['attachments_deleted'] = "The selected attachments have been successfully deleted.<br />You will be now redirected to the attachments manager."; $l['attachments_usage_quota'] = "- Using {1} of {2} in {3} Attachments"; $l['attachments_usage_percent'] = "( {1}%)"; $l['attachments
 private bool BindingValueIsValid(string bindingValue, object existingValue, BindingMemberInfo modelProperty, BindingContext bindingContext) { var bindingValueHasValue = (!String.IsNullOrEmpty(bindingValue) || (!bindingContext.Configuration.ConvertEmptyStringToNull && bindingValue!= null)); var modelPropertyHasValue = IsDefaultValue(existingValue, modelProperty.PropertyType); var overwriteProperty = bindingContext.Configuration.Overwrite;  return bindingValueHasValue && (modelPropertyHasVal
 if err := (Placement)(p).Validate(); err!= nil { return err } if string(p) == string(PrivateSubnetPlacement) { return nil } return fmt.Errorf(`"%s" is not supported for %s`, string(p), RequestDrivenWebServiceType) } // Validate returns nil if Placement is configured correctly.
 from __future__ import division from __future__ import print_function from tensorflow_addons.losses.python.lifted import lifted_struct_loss from tensorflow_addons.losses.python.triplet import triplet_semihard_loss
 targetNewSyntax := "@unittest_cpp" pkg, name, subrepo := parseBuildLabelParts(target1, "/", nil) pkg2, name2, subrepo2 := parseBuildLabelParts(targetNewSyntax, "/", nil) assert.Equal(t, pkg, "unittest") assert.Equal(t, name, "unittest_cpp") assert.Equal(t, subrepo, "") assert.Equal(t, pkg2, "unittest") assert.Equal(t, name2
 /** * Sensei_Customizer constructor. */ public function __construct() { add_action( 'customize_register', [ $this, 'add_customizer_settings' ] ); add_action( 'customize_preview_init', [ $this, 'enqueue_customizer_helper' ] );
 return BuildIfAvailable( castle, BUILD_WELL ); } const bool isLandCastle = world.getRegion( world.GetTiles( castle.GetIndex() ).GetRegion() ).getNeighbours().size() < 2; if ( isLandCastle && BuildIfEnoughResources( castle, BUILD_SHIPYARD, 2 ) ) { return true; }
 import org.flowable.common.engine.impl.util.CollectionUtil; import org.flowable.engine.ProcessEngineConfiguration; import org.flowable.engine.history.HistoricActivityInstance; import org.flowable.engine.impl.test.HistoryTestHelper; import org.flowable.engine.impl.test.PluggableFlowableTestCase; import org.flowable.engine.repository.Deployment; import org.flowable.engine.repository.MergeMode; import org.flowable.engine.repository.Model; import org.flowable.engine.repository.Pro
 rubyInterpreter.evalString(embedded_extensions_string); } catch (const std::exception& e) { rubyInterpreter.evalString(R"(STDOUT.flush)"); std::cout << "Exception in embedded_help: " << e.what() << '\n'; return ruby_cleanup(1); } catch (...) { rubyInterpreter.evalString(R"(STDOUT.flush)"); std::cout << "Unknown Exception in embedded_help" << '\n'; return ruby_cleanup(1); }
 _collectionUri = cosmosDataStoreConfiguration.GetRelativeCollectionUri(collectionConfig.CollectionId); _retryExceptionPolicyFactory = retryExceptionPolicyFactory; _cosmosDocumentQueryFactory = cosmosDocumentQueryFactory; _logger = logger; _hardDeleteIdentityProvider = new HardDeleteIdentityProvider(); _hardDeleteRole = new HardDeleteRole();
 } /* ---------------------------------------------------------------------- write a flag and a char string (including '\0' character) into restart file ------------------------------------------------------------------------- */ void WriteRestart::write_string(int flag, const char *value)
 Args: times: How many times to repeat. command: The command to run, with optional args. """ if count is not None: times *= count
 #print "rc: "+str(rc) def mqtt_on_message(self, mqttc, obj, msg): pokemon = json.loads(msg.payload) if pokemon and 'encounter_id' in pokemon: new_list = [x for x in self.bot.mqtt_pokemon_list if x['encounter_id'] is pokemon['encounter_id']] if not (new_list and len(new_list) > 0): self.bot.mqtt_pokemon_list
 { EnsureArg.IsNotNull(request, nameof(request)); IReadOnlyCollection<KeyValuePair<string, string>> requestorClaims = _claimsExtractor.Extract().OrderBy(x => x.Key).ToList(); // Compute the hash of the job. var hashObject = new
 return details.rewards.at(index).award_id; } return -1; } long long MegaAchievementsDetailsPrivate::getRewardStorage(unsigned int index)
 def init_weights(self): for m in self.modules(): if isinstance(m, nn.Conv2d): if self.relu_extra_convs: caffe2_xavier_init(m) else: xavier_init(m, distribution='uniform')
 # This file should contain all the record creation needed to seed the database with its default values. # The data can then be loaded with the rake db:seed (or created alongside the db with db:setup). # NOTE: The seeds are organized in such a way that the courses are loaded first, followed by the sections and then the lessons. # ******* NOTE ******** # You will have problems if you try to change the titles of
 return {'last_metrics': last_metrics + mets} def try_save(state:Dict, path:PathLike=None, file:PathLikeOrBinaryStream=None): target = open(path / file, 'wb') if is_pathlike(file) else file try: torch.save(state, target) except OSError as e: raise Exception(f"{e}\n Can't write {path / file}. Pass an absolute writable pathlib obj `fname`.")
 #include <s2n.h> #include <string.h> #include "tls/s2n_connection.h" #include "tls/s2n_handshake.h"
 coordinates ``reference[pairs[k, 0]]`` and ``configuration[pairs[k, 1]]``. """ if size1 == 0 or size2 == 0: raise ValueError("size1 and size2 must both be non-zero")  pairs = np.empty((0, 2), dtype=np.int64) distances = np.empty((0,), dtype=np.float64)
 private HttpResponseHandler<? extends Throwable> exceptionResponseHandler; private Executor executor; private CompletableFuture<Void> future; private boolean isDone = false; private Builder() { }
 func addPasswordFlags(c *PasswordCommand, f *base.FlagSet) { f.StringVar(&base.StringVar{ Name:   "password-min-login-name-length", Target: &c.flagPasswordMinLoginNameLength, Usage:  "The minimum length of login names", }) f.StringVar(&base.StringVar{ Name:   "password-min-password-length", Target: &c.flagPasswordMinPasswordLength, Usage:  "The minimum length of passwords",
 It("iptables should succeed in getting the lock after 3s", func() { iptCmd := cmdInContainer("iptables", "-w", "3", "-A", "FORWARD") out, err := iptCmd.CombinedOutput() log.Infof("iptables output='%s'", out) Expect(err).NotTo(HaveOccurred()) })
 /** * Redirect the customer to the failure payment page. if $message is null, a generic message is displayed. * * @param int         $orderId the order ID * @param string|null $message  an error message. */ public function redirectToFailurePage($orderId, $message) { $this->getLog()->addInfo("Redirecting customer to payment failure page");
 /** * Retrieves the body of the declaration. * * @return the declarations declared within the body of this type */ List<ASTAnyTypeBodyDeclaration> getDeclarations();
 type EventLoopV2 interface { // SubmitProposal accepts proposal for processing. Proposal will be dispatched on worker thread. SubmitProposal(proposalHeader *flow.Header, parentView uint64) // SubmitTrustedQC accepts QC for processing. QC will be dispatched on worker thread. // CAUTION: QC is trusted (_not_ validated again) SubmitTrustedQC(qc *flow.QuorumCertificate) }
 um_map::iterator mit = umindex.find(nuid); if (mit!= umindex.end() && mit->second!= hit->second) { assert(!users[mit->second].sharing.size()); users.erase(mit->second); // Remove from umindex as well umindex.erase(mit->second); } Node::copystring(&u->email, email); umindex[nuid] = hit->second;
 return Promise.resolve(); }; @action _onReceiveStateDirectoryPath = (stateDirectoryPath: string) => { this.stateDirectoryPath = stateDirectoryPath; }; // DEFINE COMPUTED VALUES
 'plugin:', 'issues:', 'list-supported-issues', 'php-version:', 'dry-run','safe-types', 'find-unused-code', 'threads:', 'codeowner:', 'allow-backwards-incompatible-changes:', 'add-newline-between-docblock-annotations:', ]; // get options from command line
 kube.GetConfig(cmdutil.GetKubeConfig(), "", types.DefaultOAMNS), types.DefaultOAMNS, os.Getenv("HELM_DRIVER"), info, k8sutil.GetKubeContext(), ); err!= nil { return nil, err }
 // Write conn log slices (as record batches) to the stream. for (auto& slice : zeek_conn_log) writer.write(slice); // Cause the writer to close its current Arrow writer by switching the layout. REQUIRE(writer.layout(ArrowSchema::emptySchema())); // Deserialize record batches, store them in arrow_table_slice objects, and // compare to the original slices. std::shared_ptr<arrow::Buffer> buf;
 return } patch = val & 65536 val >>= 16 minor = val & 65536 val >>= 16 major = val return
 if err!= nil { switch { case errors.Is(err, signature.ErrInvalidFormat): return newInvalidBlockError(block, fmt.Errorf("QC's signature data has an invalid structure: %w", err)) case errors.Is(err, model.ErrInvalidSignature): return newInvalidBlockError(block, fmt.Errorf("QC contains invalid signature(s): %w", err)) default: return fmt.Errorf("cannot verify qc's aggregated signature (qc.
 func (c *Client) DeleteBuildOrFail(name string) { c.T.Helper() builds := c.KnativeGCP.EventsV1alpha1().CloudBuildSources(c.Namespace) err := builds.Delete(name, &metav1.DeleteOptions{}) if err!= nil { c.T.Fatalf("Failed to delete build %s/%s: %v", c.Namespace, name, err)
 email = models.EmailField(_("Email"), db_index=True, blank=True) # This key are used to confirm and cancel alerts for anon users key = models.CharField(_("Key"), max_length=128, blank=True, null=True, unique=True, db_index=True) # An alert can have two different statuses for authenticated # users ``ACTIVE`` and ``CANCELLED`` and anonymous users have an
 sc, ok := s.schemas[req.Name] if!ok { return nil, errors.New("schema not found") } if sc == nil { return nil, errors.New("schema is nil") } return sc, nil }
 """ # ensure we get a 200 resp = restutil.http_get(self.instance_url, headers=self._headers, useragent="ansible") if restutil.request_failed(resp): return False, "{0}".format(restutil.read_response_error(resp))
 var ( // Mapping of GCS eventTypes to CloudEvent types. storageEventTypes = map[string]string{ "storage.object.finalize":        Finalize, "storage.object.archive":         Archive, "storage.object.delete":          Delete, "storage.object.metadata_update": MetadataUpdate, } )
 import argparse import os import sys from mmcv import Config
 const std::vector<image_data_reader::sample_t> &image_list = image_reader->get_image_list(); for (auto t : sizes) { int data_id = t.first; //TODO FIXME if (m_image_offsets.find(data_id) == m_image_offsets.end()) { LBANN_ERROR("m_image_offsets.find(data_id) == m_image_offsets.end() for data_id: ", data_id); }
 By("pause app in middle of rollout and verify status") plan.Paused = true updateAppWithCpuAndPlan(app, "2", plan) By("Verify that the app rollout pauses and no new revision created") Eventually(func() error { if err := k8sClient.Get(ctx, ctypes.NamespacedName{Name: appName, Namespace: namespaceName}, checkApp); err!= nil {
 wlr_log(L_DEBUG, "got shell surface toplevel"); struct wlr_wl_shell_surface *surface = wl_resource_get_user_data(resource); surface->toplevel = true; wl_signal_emit(&surface->events.set_toplevel, surface); } static void shell_surface_set_transient(struct wl_client *client,
 disk_cache = cache.DiskCache(str(tmpdir)) assert disk_cache.maximumCacheSize() == max_cache_size config_stub.set('storage', 'cache-size', max_cache_size * 2) assert disk_cache.maximumCacheSize() == max_cache_size * 2
 def csv type = params[:type] respond_to do |format| format.csv do send_data data(type), filename: "#{type}-#{Time.zone.today}.csv" end end end
 public class GenerateCoverage implements AutoCloseable { private final boolean cover; private final FileUtil files; private final PrintWriter allRulesFile; public GenerateCoverage(boolean cover, FileUtil files) { this.cover = cover; this.files = files; files.resolveKompiled(".").mkdirs(); try { allRulesFile = new PrintWriter(new BufferedWriter(new FileWriter(files.resolveKompiled("allRules.txt").getAbsolutePath()))); } catch (IOExcepti
 return } if err!= nil { // the error will be hidden, but at least log it i.logger.Error().Err(err).Msg("error discarding computation meter in deductTransactionFees") return } err = merr
 # Purpose: # ec2-ruby-example-create-key-pair.rb demonstrates how to # create a key pair in Amazon Elastic Compute Cloud (Amazon EC2) and # saves the resulting RSA private key file locally in the calling # user's home directory.
 from datetime import datetime import logging import os import xml.sax.saxutils from bulk_update.helper import bulk_update from django.conf import settings from django.contrib import messages from django.contrib.auth.decorators import login_required
 } HashSet<String> filteredGroups = new HashSet<String>(); for (String group : groups) { if (this.brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable().containsKey(group) || group.equals(SubscriptionGroupManager.DEFAULT_SUBSCRIPTION_GROUP_NAME)) { filteredGroups.add(group); } } GroupList groupList = new GroupList();
 log_->info("check proposal"); // fetch first proposal from proposal queue ProposalType proposal; fetchFromQueue( proposal_queue_, proposal, proposal_waiting, "missed proposal"); validation(proposal); return *this; }
 DefaultStopColLabel  = "_stop" DefaultTimeColLabel  = "_time" DefaultValueColLabel = "_value" ) func GroupKeyForRowOn(i int, cr flux.ColReader, on map[string]bool) flux.GroupKey {
 rp.Transport = &http.Transport{ Dial: socketDial(target.String()), } } else if keepalive!= keepaliveDefault { rp.Transport = &http.Transport{ Proxy: http.ProxyFromEnvironment, Dial: (&net.Dialer{
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4454-SEA 1645531086 2164440390</p> <hr> <p>Varnish cache server</p> </body>
 ProxyPreserveHost On <%- end -%> <%- [@proxy_pass].flatten.compact.each do |proxy| -%> ProxyPass <%= proxy['path'] %> <%= proxy['url'] %> <%= proxy['params'] %> <Location <%= proxy['path']%>> <%- if proxy['reverse_urls'].nil? -%>
 mean = self.sum / self.count total = self.squared_sum - self.sum * mean raw_scores = 1 - (self.res / total) if self.penalize: num = tf.multiply(tf.subtract(1.0, raw_scores), tf.subtract(n, 1.0)) den = tf.subtract(tf.subtract(n, self.num_preds), 1.0) scores = tf.subtract(1.0, tf.divide(n
 wl_keyboard_send_keymap(handle->keyboard, WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1, state->keymap_fd, state->keymap_size); if (wl_resource_get_version(handle->keyboard) >= 2) wl_keyboard_send_repeat_info(handle->keyboard, 660, 25); }  int main() {
 } private int countEntries(Iterable<Entry<Key,Value>> scanner) { return Iterables.size(scanner); } private void setRange(Range range, List<? extends ScannerBase> scanners) {
 doEnqueue(awaitableCallback); if (!await(awaitableCallback.countDown)) throw new InterruptedIOException(); Throwable t = awaitableCallback.exception.get(); if (t!= null) { if (t instanceof Error) throw (Error) t; if (t instanceof IOException) throw (IOException) t;
 // benchmarks helpers static int32_t * getRandomSeed (int32_t * seed); static FILE * openOutFileWithR_partitePostfix (const char * name); static const char * elektraGetString (void * data); static size_t getPower (size_t p, size_t q); size_t getNCount (void);
 export default TravisRoute.extend({ setupController() { this._super(...arguments); return this.controllerFor('repo').activate('requests');
 before(:all) do @client = ConnectionHelper.create_default_connection @blueprint = GoodData::Model::ProjectBlueprint.from_json('./spec/data/blueprints/test_project_model_spec.json') @project = @client.create_project_from_blueprint(@blueprint, :auth_token => @token) end after(:all) do
 // When re-building the Trie from the sequence of nodes, one can build the trie on the fly, // as for each node, the children have been previously encountered. func NewNodeIterator(mTrie *trie.MTrie) *NodeIterator { // for a Trie with k := mTrie.KeyLength() [bytes], the longest possible path can contain at most k*8+1 vertices stackSize := hash.TreeMax
 t.string   "name" t.string   "category" t.text     "description" t.datetime "event_date",                                 default: '2014-03-06 00:00:00', null: false t.time     "start_time",                                 default: '2000-01-01 14:55:03', null: false t.time     "end_time",                                   default: '20
 self.logger.info("Update extension [{0}]".format(update_cmd)) self.launch_command(update_cmd, timeout=900, env={'VERSION': version}, handler_configuration=handler_configuration) except ExtensionError:
 SUBSCRIBER_NAME = "bq" KEYSPACE_NAME_INCOMING = "ilisten" KEYSPACE_NAME_UNIQUE = "ulisten" APP_CREDENTIALS_FILE = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS') # TODO: #   Big query hardcoded data set ids
 #include <caf/actor_system.hpp> #include <caf/actor_system_config.hpp> #include <caf/binary_deserializer.hpp> #include <caf/deserializer.hpp> #include <caf/error.hpp> #include <caf/execution_unit.hpp>
 }, overrides: [ { files: ['**/*.gql.ce.js', '**/*.gql.ee.js', '**/*.gql.js'], processor: '@graphql-eslint/graphql' }, {
 } else { flb_warn("[in_syslog] error parsing log message " "(input_plugin_alias_name='%s' parser_name='%s')", ctx->i_ins->alias, ctx->parser->name); return -1; }
 np.ndarray: The image with bboxes drawn on it. """ if kwargs is not None: score_thr = kwargs.pop('score_thr') text_color = kwargs.pop('text_color') bbox_color = kwargs.pop('bbox_color') mmcv.imshow_bboxes(data, result, top_k=top_k, **kwargs)
 namespace { // kernel for initializing GWS // nwm1 is the total number of workgroups minus 1 and rid is the GWS resource id __global__ void init_gws(uint nwm1, uint rid) { __ockl_gws_init(nwm1, rid); }
 centers=centers ) params = { "n_estimators": 10, "num_leaves": 10
 string result = string.Empty; var platformOption = Array.Find(args, element => element.StartsWith("/platform")); var platformOptionSpecicifcation = "x64";
 fatalException = new TableDeletedException(tableId.canonical()); } catch (SampleNotPresentException e) { fatalException = e; } finally { semaphore.release(); Thread.currentThread().setName(threadName);
 const lwcMap = lwcNpmResolver.resolveLwcNpmModules(); // TODO: revisit this code in the future. It's duplicated in 3 places. function isImplicitHTMLImport(importee, { basedir }) { const ext = extname(importee); const isHTML = ext === '.html';
 private final BlockTimer blockTimer; private final IbftMessageTransmitter transmitter; private final MessageFactory messageFactory; private final Map<Integer, RoundState> futureRoundStateBuffer; private final NewRoundMessageValidator newRoundMessageValidator; private final Clock clock; private final Function<ConsensusRoundIdentifier, RoundState> roundStateCreator;
 } type queryFilterAction struct { // `replace` to replace the value(s) associated with the parameter(s), `hash` to replace them with the 4 initial bytes of the SHA-256 of their content or `delete` to remove them entirely. Type filterAction `json:"type"` // The name of the query parameter.
 /// <returns>true if a type was found, false if not</returns> bool TryToType(string propertyName, out IType type); /// <summary> /// Given a query alias and a property path, return the qualified column name /// </summary>
 ClientScene.DestroyAllClientObjects(); if (!string.IsNullOrEmpty(offlineScene)) { // Must pass true or offlineScene will not be loaded ClientChangeScene(offlineScene, true); }
 * @param file a DataFile to remove from the table * @return this for method chaining */ default DeleteFiles deleteFile(DataFile file) { return new StreamingDeleteFiles(this, file); } /** * Delete files that match an {@link Expression} on data rows from the table.
 require(["playerSelectionMenu", "components/playback/remotecontrolautoplay"]); } if (!(appHost.supports("physicalvolumecontrol") &&!browser.touch)) { require(["components/playback/volumeosd"]); }
 func NewClientConfig( remote string, secPrimitives *primitives.SecurityPrimitives, ) *ClientConfig { config := ClientConfig{ NewConfig(), } config.SetClientMode(remote, 1194) config.SetTLSCACertificate(secPrimitives.CACertPath) config.SetTlsCrypt(secPrimitives.TLSCryptKeyPath) config.SetDevice("tun") config.setParam("cipher", "AES-256-GCM")
 vpnServerFactory func(sessionManager session.Manager, serviceLocation dto_discovery.Location, providerID identity.Identity, callback state.Callback) *openvpn.Server vpnServer          *openvpn.Server openvpnCheck       func() error } // Start starts server - does not block func (cmd *Command) Start() (err error) { err = cmd.openvpnCheck() if err!= nil { return err }
 style_opts = line_properties + ['level'] _plot_methods = dict(single='Span') def get_data(self, element, ranges, style):
 const Actions & plannedActions = _battlePlanner.planUnitTurn( arena, currentUnit ); actions.insert( actions.end(), plannedActions.begin(), plannedActions.end() ); // Do not end the turn if we only cast a spell if ( plannedActions.size()!= 1 ||!plannedActions.front().isType( MSG_BATTLE_CAST ) ) actions.emplace_back( MSG_BATTLE_END_TURN, currentUnit.GetUID() ); } }
 }; get miniCartInner() { const { checkout, productConfirm, productList, props, state, loadingIndicator } = this; const { classes, isCartEmpty, isMiniCartMaskOpen } = props; const { isEditPanelOpen } = state;
 Column c = cols[j]; DataType dataType = c.getDataType(); String precision = Integer.toString(c.getPrecisionAsInt()); boolean isDateTime = dataType.isDateOrTime(); Sequence sequence = c.getSequence(); add(rows, // TABLE_CATALOG
 'Characters %r are present in both whitelist_characters=%r, and''blacklist_characters=%r' % ( sorted(overlap), whitelist_characters, blacklist_characters)) blacklist_categories = validate_categories(blacklist_categories, whitelist_categories) whitelist_categories = validate_categories(whitelist_categories, blacklist_categories) both_cats = set( blacklist_categories or ()).intersection(whitelist_categories or ()) if both_cats:
 } // ExportKindFor reports back to the OpenTelemetry SDK sending this Exporter // metric telemetry that it needs to be provided in a pass-through format. func (e *Exporter) ExportKindFor(*metric.Descriptor, aggregation.Kind) metricsdk.ExportKind { return metricsdk.PassThroughExporter }
 // Get LCCN from Index $raw = isset($this->fields['lccn'])? $this->fields['lccn'] : ''; // Remove all blanks. $raw = preg_replace('{[ \t]+}', '', $raw);
 * </pre> */ public class ImapStore extends RemoteStore { private static final int IDLE_READ_TIMEOUT_INCREMENT = 5 * 60 * 1000; private static final int IDLE_FAILURE_COUNT_LIMIT = 10;
 from kombu.utils.encoding import bytes_to_str, str_to_bytes from celery.five import items, string_t from.encoding import safe_repr try:
 } func (p *AWSProvider) cloudwatch() *cloudwatch.CloudWatch { return cloudwatch.New(session.New(), p.config().WithLogLevel(aws.LogOff)) } func (p *AWSProvider) cloudwatchlogs() *cloudwatchlogs.CloudWatch { return cloudwatchlogs.New(session.New(), p.config()) } func (p *AWSProvider) dynamodb() *dynamodb.DynamoDB {
 buckets = ab.pop('buckets', [tactic]) ab.pop('access', None) plugin_path = pathlib.PurePath(filename).parts plugin = get_plugin_from_path(plugin_path) if tactic and tactic not in filename: self.log.error('Ability=%s has wrong tactic' % id)
 def order_processes(delays, args_for_script): processed_delays = [] processes_dictionary = {} for delay in delays: if delay in processed_delays: continue else: processed_delays.append(delay) delays_indices = [i for i, e in enumerate(delays) if e == delay and i!= 0] args_list = [] for index in delays_indices:
 shutil.rmtree(self.tmp_dir, ignore_errors=True) def _get_backups(self): files = [os.path.join(self.backup_dir, file) for file in os.listdir(self.backup_dir)] files = [file for file in files if os.path.isfile(file) and self.backup_name_prefix in file] return sorted(files, key=os.path.getmtime, reverse=True) def _remove_old_backups(self):
 if (arguments.length > 2) { const slice = Array.prototype.slice; normalizedProps.children = arguments.length > 3? slice.call(arguments, 2) : children; } return createVNode(
 { logInfo(RTPS_EDP,"Adding SEDP Pub Writer to my Pub Reader"); temp_writer_proxy_data_.guid().entityId = c_EntityId_SEDPPubWriter; temp_writer_proxy_data_.persistence_guid().entityId = set_persistence_entity_id(temp_writer_proxy_data_); publications_reader_.first->matched_writer_add(temp_writer_proxy_data_); } auxendp = endp;
 // This confirms that each program compiles to the same bytes // (except the leading version indicator), when compiled under // original and max versions. That doesn't *have* to be true, // as we can introduce optimizations in later versions that // change the bytecode emitted. But currently it is, so we // test it for now to catch any suprises.
 * @param Container $container * @return Container|mixed */ function sage($abstract = null, $parameters = [], Container $container = null) { $container = $container?: Container::getInstance(); if (!$abstract) {
 import ( _ "github.com/bufbuild/buf/cmd/buf" _ "github.com/favadi/protoc-go-inject-tag" // use this instead of google.golang.org/protobuf/cmd/protoc-gen-go since this supports grpc plugin while the other does not. // see https://github.com/golang/protobuf/releases#v1.4-generated-code and // https://github.com/protocolbuffers/protobuf-go/r
 public function testShouldSanitizeExcludeCSS( $original, $sanitized ) { $this->stubWpParseUrl(); Functions\when( 'content_url' )->justReturn( 'http://example.org/wp-content/' ); Functions\when( 'get_rocket_i18n_uri' )->justReturn( [ 'http://example.org/' ] ); Functions\when( 'rocket_validate_css' )->justReturn( true ); Fu
 return descriptions; } void HeroesIndicator::SetHero( Heroes * h ) { hero = h; } void HeroesIndicator::SetPos( const Point & pt )
 // exit messages this.exitLogs = [] // We need to use a setTimeout here because we don't want to // trigger a re-render in the UI when the error occurs. this.errorTimeout = setTimeout(() => { this.exitLogs.push({ type: 'error', message: msg }) }, 0)  const cliService = plugins.find(p => p.id === '@vue/cli-service') const rootOptions = cliService? cliService.options
 t.Fatal("Did not expect errors.") } if!errorInSlice(errs, test.wantErrorStrings) { t.Errorf("errors did not contain: %v", test.wantErrorStrings) } return
 $command = $container->hasDefinition('contao.command.debug_fragments')? $container->findDefinition('contao.command.debug_fragments') : null; foreach ($this->findAndSortTaggedServices($tag, $container) as $reference) { // If a controller has multiple methods for different fragment type (e.g. a content element and a front end module), // the first RegisterFragmentsPass creates a child definition that in
 { public SchemaInformation() { MinimumSupportedVersion = SchemaVersion.V1; MaximumSupportedVersion = SchemaVersion.V1; } public SchemaVersion MinimumSupportedVersion { get; } public SchemaVersion MaximumSupportedVersion { get; } public SchemaVersion? Current { get; set; } }
 const int numWorkers() const { return m_threadSupportInterface->getNumWorkerThreads(); } void runTask(int threadIdx, btThreadSupportInterface::ThreadFunc func, void *arg) { FunctionContext& ctx = m_functionContexts[threadIdx]; ctx.func = func; ctx.arg = arg; m_threadSupportInterface->runTask(threadIdx, (void *)&ctx);
 $this->is_started   = $json_arr['i']; $this->percentage   = $json_arr['p']; $this->files        = $json_arr['f']; $this->is_error     = $json_arr['e']; } /**
 // these provider-specific subpackages and use its exported function(s) to // create a *Variable; do not use the New function in this package. For example: // //  var v *Variable //  v, err := etcdvar.New("my variable", etcdClient, runtimevar.JSONDecode, nil) // ... // // Then, write your application code using the *Variable type. You can
 long cachedUidValidity = localFolder.getUidValidity(); long currentUidValidity = imapFolder.getUidValidity(); if (localFolder.hasCachedUidValidity() && cachedUidValidity!= currentUidValidity) { Timber.v("SYNC: Deleting all local messages in folder %s due to UIDVALIDITY change", localFolder); Set<String> localUids = localFolder.getAllMessagesAndEffectiveDates().keySet();
 } /// <summary> /// Gets the collection of Codings. /// </summary> public ICollection<Coding> Codings { get; } }
 public function setExtraData(array $data): void { // Not implemented in the base class throw new NotImplementedException('setExtraData()'); } /**
 $this->disableRenewals = $this->config['Catalog']['disableRenewals']?? false; $this->useOAuth2 = ($this->config['tokenEndpoint']?? false) && ($this->config['clientId']?? false) && ($this->config['clientSecret']?? false); $this->tokenBasicAuth = $this->config['tokenBasicAuth']?? false; } /**
 protected void onDraw(Canvas canvas) { if (GRID_ENABLED) { int screenWidth = Utils.getScreenWidth(); int screenHeight = Utils.getScreenHeight(); canvas.drawLine(2 * (screenWidth / 3), 0, 2 * (screenWidth / 3), screenHeight, paint); canvas.drawLine((screenWidth / 3), 0, (screenWidth / 3), screenHeight, paint);
 nnodes = 10; break; default: msg_warning() << "Elements of type 1, 2, 3, 4, 5, or 6 expected. Element of type " << etype << " found."; nnodes = 0; } }
 func NewTrieWithUpdatedRegisters(parentTrie *MTrie, updatedPaths []ledger.Path, updatedPayloads []ledger.Payload) (*MTrie, error) { parentRoot := parentTrie.root updatedRoot := parentTrie.update(parentRoot.Height(), parentRoot, updatedPaths, updatedPayloads, nil) updatedTrie, err := NewMTrie(updatedRoot) if err!= nil { return nil, fmt.Errorf("constructing updat
 }); }); IpRemoteHostImpl = class IpRemoteHostImpl { constructor(address, tls, udp) { this.address = address; this.tls = tls; this.udp = udp; }
 import { useCallback } from'react'; import { useSearchField } from '../../hooks/useSearchField'; import { useDropdown } from '../../hooks/useDropdown';
 area.DrawTile( dst, fheroes2::AGG::GetTIL( TIL::STON, 32 + ( mp.y % 4 ), 0 ), mp ); } else { area.DrawTile( dst, fheroes2::AGG::GetTIL( TIL::STON, ( abs( (int)mp.y ) % 4 ) * 4 + abs( (
'sanitize_callback' => 'absint', ), 'discover'  => array( 'description' => __( 'Whether to perform an oEmbed discovery request for a non-curated provider.' ), 'type'        => 'boolean', 'default'     => true, ),
 j++ } } out = append(out, n.entries[j:]...) return StringLatestMap{out} }
 // pause records to prevent double logging trie removals w.PauseRecord() defer w.UnpauseRecord() err = w.ReplayOnForest(forest) if err!= nil { return nil, fmt.Errorf("cannot restore LedgerWAL: %w", err)
 // Relay represents the configuration data necessary for a single Relay type Relay struct { ID             int64 // db key injected when loaded Address        string // IP / DNS name MetricsEnabled bool CheckSuccess   bool   // true if check was successful DNSAlias       string // DNS Alias name used
 * @author Glenn Renfro */ @RunWith(SpringRunner.class) @SpringBootTest(classes = { TaskDependencies.class, TaskServiceDependencies.class }) @DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) @AutoConfigureTestDatabase(replace = Replace.ANY)
 } if!resData.OK { if resData.Error == "missing_scope" { acceptedScopes := resp.Header.Get("X-Accepted-Oauth-Scopes") providedScopes := resp.Header.Get("X-Oauth-Scopes") log.Log(ctx, fmt.Errorf("list Slack channels: missing_scope; need one of %v but got %v", acceptedScopes, providedScopes)) } return nil, wrapError
 animator.Play(stateHash, layerId, normalizedTime); } animator.SetLayerWeight(layerId, weight); ReadParameters(reader); }
 is_internal=False, log_event=True): if not is_success and log_event: _log_event(name, op, message, duration, is_success=is_success) self._add_event(duration, evt_type, is_internal, is_success, message, name, op, version, eventId=1)
 from __future__ import absolute_import, division, print_function from django import forms from django.forms.models import ModelForm from tests.django.toystore.models import ( CouldBeCharming,
 else: res = http.get(self.url) status_m = _status_re.search(res.text) if not status_m: self.logger.info("Stream currently unavailable.") return if status_m.group(1)!= 'true': self.logger.info("Stream currently unavailable.") return
 JID searchJID = new JID(originatingResource.getNode(), originatingResource.getDomain(), null); List<JID> addresses = routingTable.getRoutes(searchJID, null); for (JID address : addresses) { if (!address.equals(originatingResource)) { // Send the presence of the session whose presence has changed to // this user's other session(s) presence.setTo(address);
 } if!success { return errors.New("At least one of the tests failed") } return nil
 uint8_t session_id_from_client[MAX_KEY_LEN]; /* aes keys. Used for session ticket/session data encryption. Taken from test vectors in https://tools.ietf.org/html/rfc5869 */ char ticket_key_name[] = "2018.07.26.10"; uint8_t ticket_key[32] = {0x19, 0xef, 0x24, 0
 } // Coverage struct for writing to xml file type coverage struct { XMLName         xml.Name  `xml:"coverage"` LineRate        float64   `xml:"line-rate,attr"` BranchRate      float64   `xml:"branch-rate,attr"`
 } glob := s.globber.Glob(s.pkg.SourceRoot(), include, exclude, hidden, includeSymlinks) if len(glob) == 0 { panic(fmt.Errorf("No matches found for this glob (try using --include-all)")) } return fromStringList(glob)
 return o.loadError() } // WaitUntilRunning blocks until the instance enters the running state, or the // context times out. func (o *Once) WaitUntilRunning(ctx context.Context) error { state := State(o.state.Load()) if state == Running { return nil
 (initial_finished, initial_inputs) = sampler.initialize(input_tensors) cell_input = initial_inputs cell_state = cell.get_initial_state(...) for _ in tf.range(max_output_length): cell_output, cell_state = cell(cell_input, cell_state) sample_ids = sampler.sample(_, cell_output, cell_state) (finished, cell_input, cell_state) = sampler.next_inputs(_, cell_output, cell_state, sample_ids) if tf.reduce_all(f
 // that indicates database contention that warrants a retry. // Sends warnings and errors to log. func LoggedRetry(fn func() error, log logging.Logger) (err error) { for i := 1; dbretry(err); i++ { if i > 0 { if i < infoTxRetries { log.Infof("db.LoggedRetry: %d retries (last err: %v)", i, err)
 use WP_Rocket\Tests\Integration\FilesystemTestCase; use WP_Rocket\ThirdParty\Themes\Divi; use WP_Theme; /** * @covers \WP_Rocket\ThirdParty\Divi::maybe_disable_youtube_preview
 * Returns a sink constructed directly from the given Core API processor * meta-supplier. * <p> * The default local parallelism for this source is specified by the given * {@link ProcessorMetaSupplier#preferredLocalParallelism() metaSupplier}. * * @param sinkName user-friendly sink name
 if not conv: raise configexc.ValidationError( value, '{} not in {}'.format(kind, list(sorted(converters)))) if len(kind)!= len(vals): raise configexc.ValidationError(
 <div id="admincenter"> <h2 class="category_header">', $txt['package_examine_file'],': ', $context['package'], '</h2> <h3 class="category_header">', $txt['package_file_contents'],'', $context['filename'], ':</h3> <div class="content" style="font-size: 1.1em"> <code><pre class="file_content prettypr
 writeEvent        bool filters           []Filter spanNameFormatter func(string, *http.Request) string counters          []metric.Int64Counter valueRecorders    []metric.Int64ValueRecorder } func defaultHandlerFormatter(operation string, _ *http.Request) string {
.. autofunction:: Merge """ import six import numpy as np import logging import copy import uuid import os import errno import MDAnalysis import sys
 use Symfony\Component\HttpFoundation\ParameterBag; /** * Controller providing functionality used to perform paged datastore queries. * * This controllers streamed counterpart can be found at: * @see \Drupal\datastore\ControllerQueryDownloadController * * @package Drupal\datastore */
 /** @var bool */ private $overwriteLiipImagine; /** * @var bool */ private $useStandardEdition;  /** * @param string $rootDir */
 # # Used internally to print deprecation warnings def warn_deprecation(message) RSpec.configuration.deprecation_io.puts(message) end end end
 static RpmOstreeCommand override_subcommands[] = { { "replace", RPM_OSTREE_BUILTIN_FLAG_SUPPORTS_PKG_INSTALLS, "Replace packages in the base layer", rpmostree_override_builtin_replace }, { "remove", RPM_OSTREE_BUILTIN_FLAG_SUPPORTS_PKG_INSTALLS, "Remove packages from the base layer",
 52, 53, 54, 55, 56, 57, 43, 47          //4..9, +, / }; static readonly byte s_encodingPad = (byte)'=';              // '=', for padding [MethodImpl(MethodImplOptions.AggressiveInlining)] public static int ComputeEncodedLength(int sourceLength)
 */ private function getDeprecationArgs(string $package, string $version, string $message): array { if (Kernel::MAJOR_VERSION === 4 && $package === 'http-kernel' && $version === '4.2.0' && $this->configComponent === '4.2.0') { return [$message]; }
 `gt_bboxes` corresponds to `gt_labels` and `gt_masks`, and `gt_bboxes_ignore` corresponds to `gt_labels_ignore` and `gt_masks_ignore`. - If the crop is not located in any bbox, skip this image. - If the crop is not located in any bbox and `allow_negative_crop` is set to False, skip this image. """ def __init__(self, crop_size, allow_negative_crop=False):
 import ( "context" "path" "strings" "github.com/golang/glog" "google.golang.org/grpc/codes"
 tensor The destination node ID array. """ return _find_edges(self, edges) def get_partition_book(self): """Get the partition information.
 * */ export default function hasErrorWithStatus(errorResponse, status) { const { errors = [] } = errorResponse || {}; return errorResponse.errors.isAny('status', status); }
 return } if!has { jsonhttp.NotFound(w, nil) return } jsonhttp.OK(w, nil) }
 cmpctBlock->vTxHashes.insert(it, iterShortID, shorttxids.end()); } // Create a map of all 6 bytes tx hashes pointing to their full tx hash counterpart // We need to check all transaction sources (orphan list, mempool, and new (incoming) transactions in this block) int missingCount = 0; int unnecessaryCount = 0;
 *        OpenSSL erroneously rejects valid certificates possibly because OpenSSL doesn't have access to the *        proper trust certificates. *   - `partial` - Whether this Realm should be opened in 'partial synchronization' mode. *        Partial synchronization mode means that only those objects are synchronized from the remote *        Realm that match the query specified. *        **Partial synchronization is a tech preview. Its APIs are subject to change.** */
 type: "POST", url: url, data: user }, dataType: "json" }) }, ApiClient.prototype.updateUser = function(user) {
 if (LaunchIntent!= null) { startActivity(LaunchIntent); }else{ Toast.makeText(this, getResources().getText(R.string.app_disabled), Toast.LENGTH_SHORT).show(); } } else { try {
 if ($nodeIdentifiers === array()) { $nodes = $this->nodeSearchService->findByProperties($searchTerm, $searchableNodeTypeNames, $contentContext, $contextNode); } else { $nodes = $this->nodeSearchService->findByIdentifiers($nodeIdentifiers, $contentContext, $contextNode, true); } $this->view->assign('nodes', $nodes);
 TOutput VisitInclude(IncludeExpression expression, TContext context); /// <summary> /// Visits the <see cref="SortExpression"/>. /// </summary> /// <param name="expression">The expression to visit.</param> /// <param name="context">The input</param> TOutput VisitSort(SortExpression expression, TContext context); } }
 package com.alibaba.nacos.naming.push; import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang3.SystemUtils; import org.codehaus.jackson.Version; import org.codehaus.jackson.util.VersionUtil;
 } String provider = ipAddressAttributes[0]; String[] providerAddr = IpUtil.splitIpPortStr(provider); if (providerAddr.length!= IpUtil.SPLIT_IP_PORT_RESULT_LENGTH &&!StringUtils.isNumeric(provider)) { // not ip:port string return null; }
 let alphaFocusedElement; let alphaFocusTimeout; function onAlphaFocusTimeout() { alphaFocusTimeout = null; if (document.activeElement === alphaFocusedElement) { const value = alphaFocusedElement.getAttribute('data-value'); alphaPicker.value(value, true); } }
 GetOptionsDB().Get<bool>("verbose-combat-logging"); m_wnd.DeleteChildren(); GG::Layout* layout = new GG::DeferredLayout(m_wnd.UpperLeft().x, m_wnd.UpperLeft().y, m_wnd.Width(), m_wnd.Height(), 1, 1  ///< numrows, numcols, 0, 0  ///< wnd margin, cell margin ); m_wnd.SetLayout(layo
 ('colors', 'tab.indicator.stop'): 'tabs.indicator.stop', ('colors', 'tab.indicator.error'): 'tabs.indicator.error', ('colors', 'tab.indicator.system'): 'tabs.indicator.system', ('tabs', 'auto-hide'): 'hide-auto', } DELETED_OPTIONS = [
 * binary number of an integer value it is formed as the combination of 0’s and * 1’s. So digit 1 is known as a set bit in computer terms. * Time Complexity: O(log n) * Space complexity: O(1) * @author [Swastika Gupta](https://github.com/swastyy) */ #include <cassert>   /// for assert
 import ( "fmt" "testing" "github.com/stretchr/testify/require" "github.com/algorand/go-algorand/components/mocks" "github.com/algorand/go-algorand/crypto" "github.com/algorand/go-algorand/data/basics" "github.com/algorand/go-algorand/data/pools"
 } private void useRequestSlot(final EthPeer peer) throws PeerNotConnected { peer.getNodeData(new ArrayList<>()); } @SuppressWarnings("unchecked") private void assertRequestSuccessful(final PendingPeerRequest pendingRequest) throws Exception { final Consumer<ResponseStream> onSuccess = mock(Consumer.class); pendingRequest.thenEither(onSuccess, error -> fail("Request should have executed", error)); verify(onSuccess).accept(any()); }
 if isinstance(offline, Packet): tempfile_written, offline = _write_to_pcap([offline]) elif isinstance(offline, (list, PacketList)) and \ all(isinstance(elt, Packet) for elt in offline): tempfile_written, offline = _write_to_pcap(offline)
 if (otherPlayerId!= -1) cmd.set_player_id(otherPlayerId); cmd.set_zone_name("grave"); cmd.set_card_id(cardId); sendGameCommand(cmd); }
 * Delete segment path */ public static boolean deleteSegmentParquetStoragePath(CubeInstance cube, String segmentName, String identifier) throws IOException { if (cube == null || identifier == null || segmentName == null) { return false; } String path = getSegmentParquetStoragePath(cube, segmentName, identifier);
 { notifyAboutUpdates = _notifyaboutupdate; settings->setValue("personal/updatenotification", notifyAboutUpdates); } No newline at end of file
 // check if the underlay is usable by doing a raw ping using libp2p if _, err = s.streamer.Ping(ctx, multiUnderlay); err!= nil { s.metrics.PingTime.Observe(float64(time.Since(start).Milliseconds())) s.metrics.UnreachablePeers.Inc() s.metrics.PingErrorTime.Observe(float64(time.Since(start).Milliseconds())) s.logger.Debugf("hive: peer 
 auto current_time = time_provider_->getCurrentTime(); auto size = data.size(); std::for_each( data.begin(), data.end(), [this, current_time, size](const auto &peer) { auto diff = storage_->getDiffState(peer, current_time); if (not diff.isEmpty()) { log_->info("Propagate new data[{}]", size);
 package protocol import ( "github.com/dedis/cothority/config" "github.com/dedis/cothority/sda"
 _base_ = '../fcos/fcos_r50_caffe_fpn_gn-head_4x4_1x_coco.py' img_norm_cfg = dict( mean=[103.53, 116.28, 123.675], std=[57.375, 57.12, 58.395] ) model = dict( pretrained='open-mmlab://msra/hrnetv2_w32', backbone=dict(
 ) // ContextEventKey key used for storing and retrieving an event from the context. const ContextEventKey = "clientMetricEvent" // NewContextForEvent creates a new context with the event provided func NewContextForEvent(ctx context.Context, evt *Event) context.Context {
 (renamed as appropriate) to be updated in an event. """ stream_params = set(util.stream_parameters(self.streams)) updated_streams = [] for stream in self.streams: rkwargs = util.rename_stream_kwargs(stream, kwargs, reverse=True, stream_params=stream_params) stream.update(**dict(rkwargs, trigger=False)) updated_streams.append(stream)
 wg.Add(1) go func() { defer wg.Done() wait.Until(func() { c.worker(ctx) }, time.Second, stopCh) }() }
 handler := jsonHandler{reader: ifaceEmptyReader{}, handler: reflect.ValueOf(h)} reqBuf := yarpc.NewBufferString(`["a", "b", "c"]`) r, err := handler.Handle(context.Background(), &yarpc.Request{ Procedure: "foo", Encoding:  "json", }, reqBuf) require.NoError(t, err) respBuf := r.(*yarpc.Response).Buffer require.JSON
 using Nancy.Bootstrapper; /// <summary> /// Defines the functionality for Nancy diagnostics /// </summary> public interface IDiagnostics { /// <summary> /// Initialise diagnostics /// </summary> /// <param name="pipelines">Application pipelines</param> void Initialize(IPipelines pipelines);
 testPackage, err := parser.Parse(bytes.NewReader(data), "") if err!= nil { return core.TestSuite{}, fmt.Errorf("Failed to parse go test output: %w", err) } results := fromGoJunitReport(testPackage)
 else: segm_results = self.simple_test_mask( x, img_metas, det_bboxes, det_labels, rescale=rescale) return list(zip(bbox_results, segm_results)) def aug_test(self, x, proposal_list, img_metas, rescale=False): """Test with augmentations.
 if!exists { // when the block no longer exists in the queue, it means there was a race condition that // two onBlockExecuted was called for the same block, and one process has already removed the // block from the queue, so we could simply bail here. // // Note: this situation can only happen if we are during syncing right? That block is both // executed and synced from other node. If so, we should distinguish those
 } // If first run, set to RR if (settingsCache->servers().previousHostName().isEmpty()) { previousHosts->setCurrentIndex(1); }
 // visible (not private) for testing VolumeChooser getDelegateChooser(VolumeChooserEnvironment env) { if (env.getScope() == ChooserScope.TABLE) { return getVolumeChooserForTable(env); } return getVolumeChooserForScope(env); } private VolumeChooser getVolumeChooserForTable(VolumeChooserEnvironment env) {
 return False def get_status(self, bigchain): concluded = self.get_election_output(self.id, bigchain) if concluded: return self.CONCLUDED return self.INCONCLUSIVE if self.has_validator_set_changed(bigchain) else self.ONGOING
 } func TestInternalParse(t *testing.T) { tests := []struct { inputInternalPaths    string shouldErr             bool
 # Code based on # https://bitbucket.org/bedwards/networkx-community/src/370bd69fc02f/networkx/algorithms/community/ from networkx.utils.decorators import required_edge_list_graph def directed_laplacian(G, nodelist=None, weight='weight', walk_type=None, alpha=0.95): r"""Return the directed Laplacian matrix of G.
 public void startReloader() { if (isEnabled) { // first fetch the values from the cache to make sure they are present. fetchAll();  reloadingFuture = executor.scheduleAtFixedRate(this::reloadZkValues, 0, cacheTtl, TimeUnit.SECONDS); }
 attrs = append(attrs, HTTPRouteKey.String(route)) } if ip := request.Header.Get("X-Forwarded-Client-IP"); ip!= "" { attrs = append(attrs, HTTPClientIPKey.String(ip)) }
 g_return_val_if_fail (repo!= NULL, FALSE); g_return_val_if_fail (ref!= NULL, FALSE); g_return_val_if_fail (out_rev!= NULL, FALSE); g_return_val_if_fail (error == NULL || *error == NULL, FALSE); if (ostree_repo_resolve_rev (repo, ref, FALSE, out_rev, &my_error)) return TRUE;
 func decode(v reflect.Value, d Decoder) error { if!v.CanSet() { return fmt.Errorf("cannot set %+v", v) } // A Null value sets anything nullable to nil. // If the value isn't nullable, we keep going.
 namespace vast { void factory_traits<table_slice_builder>::initialize() { using F = factory<table_slice_builder>; F::add<DefaultTableSliceBuilder>(default_table_slice::class_id); } } // namespace vast
 break; } } } catch (MessagingException me) { /** * Let the user continue composing their message even if we have a problem processing
 import org.junit.Test; import software.amazon.awssdk.core.internal.batchutilities.BatchAndSendFunction; import software.amazon.awssdk.core.internal.batchutilities.BatchManager; import software.amazon.awssdk.core.internal.batchutilities.BatchResponseMapperFunction; import software.amazon.awssdk.core.internal.batchutilities.BatchResponseProcessor; import software.amazon.awssdk.core.internal.batchutilities.GetBatchGroupIdFunction; import software.amazon.awssdk.core.internal.batchutilities.IdentifiableResponse;
 cmd = (cmd % creator_account_id_ % role_id % perm_str); auto str_args = [&role_id, &perm_str]() { return (boost::format("role_id: %s, perm_str: %s") % role_id % perm_str).str(); };
 isContributionsFragmentVisible = false; updateMenuItem(); // Do all permission and GPS related tasks on tab selected, not on create ((NearbyParentFragment)contributionsActivityPagerAdapter.getItem(1)).onTabSelected(); break; default: tabLayout.getTabAt(CONTRIBUTIONS_TAB_POSITION).select();
 return pt; } virtual void OnPlaceMouseUp(ViewportPlaceMethod select_method, ViewportDragDropSelectionProcess select_proc, Point pt, TileIndex start_tile, TileIndex end_tile) { if (pt.x!= -1) {
 } struct wlr_renderer *wlr_renderer_autocreate_with_drm_fd(int drm_fd) { #if WLR_HAS_GLES2_RENDERER && ZEPHYR_IS_ENABLED(CONFIG_SOC_EVM_KICU) struct gbm_device *gbm_device = gbm_create_device(drm_fd); if (!gbm_device) { wlr_log(WLR_ERROR, "Failed to create GBM device");
 <div class="learning-goal-wrapper"> <p class="camel bold learning-goal-title">Learning Goal</p> <p class="learning-goal"> <%= user.learning_goal %> </p> </div> </div>
 } public static Option startRowOpt() { final Option o = new Option(START_ROW_OPT, "begin-row", true, "begin row (NOT inclusive)"); o.setArgName("begin-row"); return o; }
 response.append(HTTPXMLHelper.SOAP_ENCODING_FOOTER); response.append(CRLF); } else { LOGGER.debug("Unsupported action received: " + content); } } else if (method.equals("SUBSCRIBE")) { output.headers().set("SID", PMS.get().usn());
 @Subscribe public void onStatusEvent(final EventTempTargetChange ev) { new Thread(() -> LoopPlugin.invoke("EventTempTargetChange", true)).start(); FabricPrivacy.getInstance().logCustom(new CustomEvent("TT_Loop_Run")); }
 "github.com/rs/zerolog" "github.com/onflow/flow-go/module" libp2pnet "github.com/onflow/flow-go/network" flownet "github.com/onflow/flow-go/network" ) const (
 private final AllocateMappedFileService allocateMappedFileService; /** * The offset of the file that contains the flushed data. */ private long flushedWhere = 0; private long committedWhere = 0; private volatile long storeTimestamp = 0;
 // Windows requires a slightly different language code identifier (LCID). // https://msdn.microsoft.com/en-us/library/cc233982.aspx if ($is_win) { $txt['lang_locale'] = strtr($txt['lang_locale'], '_', '-'); } if (setlocale(LC_TIME, $txt['lang_locale'])) {
 func normalizeToken(token string) (string, error) { _, password, ok := clientaccess.ParseUsernamePassword(token) if!ok { return password, errors.New("failed to normalize token; must be in format K10<CA-HASH>::<USERNAME>:<PASSWORD> or <PASSWORD>") } return password, nil }
 public JsonLayout() { this.Attributes = new List<JsonAttribute>(); this.RenderEmptyLiteral = false; } /// <summary>
 return false; } bool SecondarySkillsBar::ActionBarCursor( const fheroes2::Point & /*unused*/, Skill::Secondary & skill, const fheroes2::Rect & /*unused*/) { if ( skill.isValid() ) { msg = _( "View %{skill} Info" );
 return os.ErrClosed } if epoch!= rb.epoch { return ErrBadEpoch } rb.items[rb.headSlice][rb.headPos] = item
 /// <summary> /// Gets or sets default singleton instance of <see cref="ConfigurationItemFactory"/>. /// <para> /// This property is not thread safe. /// </para> /// </summary> public static ConfigurationItemFactory Default { get
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4420-SEA 1645544077 1496735272</p> <hr> <p>Varnish cache server</p> </body>
 copy(k[4:8], addr) binary.LittleEndian.PutUint16(k[8:10], port) k[10] = protocol k[11:12] = []byte{0x0, 0x0} // Fill in the CIDR address. return k }
 public const string BenchI = "BenchI"; public const string Inlining = "Inlining"; public const string V8 = "V8"; public const string Perflab = "Perflab"; public const string Virtual = "Virtual"; public const string ByteMark = "ByteMark";
 hwDeviceStatus, sendMoneyRequest, selectCoinsRequest, getHardwareWalletDeviceInfoByWalletId, } = hardwareWallets; const { stakePools,
 import React from'react'; import { createTestInstance } from '@magento/peregrine'; import { useQuery } from '@apollo/client'; import { useBreadcrumbs } from '../useBreadcrumbs';
 // NewLocalConnWithManager is similar to NewLocalConn but takes a specific // LocalManager. func NewLocalConnWithManager(ctx *LocalManager, local, remote Address) (*LocalConn, error) { return ctx.connect(local, remote) } // Send implements the Conn interface. func (lc *LocalConn) Send(ctx context.Context, msg Body) error { buff, err := marshalRegisteredType(msg) if err!= nil { return err
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4427-SEA 1645530207 2624334085</p> <hr> <p>Varnish cache server</p> </body>
 arrowsize : int or list (default=10) For directed graphs, choose the size of the arrow head's length and width. A list of values can be passed in to assign a different size for arrow head's length and width. See `matplotlib.patches.FancyArrowPatch` for attribute `mutation_scale` for more info.
 # No need to pad. return if pd.isnull(last_date): # If there is no data, determine how many days to add so that # desired days are written to the correct slots. days_to_zerofill = tds[tds.slice_indexer(end=date)]
 def ping(self, **kwargs): worker_id = kwargs['worker'] worker = self._update_worker(worker_id) return {"messages": worker.fetch_messages().json()} def _upstream_status(self, task_id, upstream_status_table): if task_id in upstream_status_table:
 (['redhat', '7.7.1908', 'Core'], False), (['bigip', '15.0.1', 'Final'], False), (['gaia', '273.562', 'R80.30'], False), (['debian', '9.1', ''], False), ] for (distro, supported) in test_cases:
 $object->upload(__DIR__. '/../../Resources/assets/', __DIR__. '/../../Resources/assets/', $filesystem); } public function testUploadWithoutFilesystemService() { $object = $this->object; $this->assertNull($object->upload('..', '..'));
 "--output", koreOutputFile.getAbsolutePath())); if (depth.isPresent()) { args.add("--depth"); args.add(String.valueOf(depth.get())); } if (smtOptions.smtPrelude!= null) { args.add("--smt-prelude");
 return; } msgtable[msgcnt] = e; // BUGFIX: missing out-of-bounds check if (msgcnt < (BYTE)sizeof(msgtable)) msgcnt++;
 ) func TrustDomainMemberIDFromProto(td spiffeid.TrustDomain, protoID *types.SPIFFEID) (spiffeid.ID, error) { id, err := uncheckedIDFromProto(protoID) if err!= nil { return spiffeid.ID{}, err }
 int max = security_policy->signature_preferences->signature_schemes[i]->maximum_protocol_version; s2n_signature_algorithm sig_alg = security_policy->signature_preferences->signature_schemes[i]->sig_alg; if (max <= S2N_TLS13) { has_tls_13_sig_alg = 1; }
 wantError: yarpcerror.WrapHandlerError( &atomic.KeyDoesNotExist{Key: ptr.String("foo")}, "roundtrip-server", "ReadOnlyStore::integer", ), }, { desc:          "readonly store: integer with readonly client",
 results['ori_shape'] = img.shape # Set initial values for default meta_keys num_channels = 1 if len(img.shape) < 3 else img.shape[2] results['img_norm_cfg'] = dict(
 exit(EXIT_FAILURE); } if (!*my_args.argv) { ERROR("A command to execute in the new namespace is required"); exit(EXIT_FAILURE); }
 let widthWindow = $(window).width(); popbox = $(".pop-box"); headerpop = $(".header-pop"); sizeevent = $(".sizeevent"); tracktime = $(".sizeevent span"); speakerinfo = $(".speaker-info");
 private final TaskSanitizer taskSanitizer = new TaskSanitizer(); private static final List<String> allowedSorts = Arrays.asList("TASK_EXECUTION_ID", "TASK_NAME", "START_TIME", "END_TIME", "EXIT_CODE", "COMMAND_LINE", "WORKING_DIRECTORY"); /** * Creates a {@code TaskExecutionController} that retrieves Task Execution information
 return errors.WithMessage(err, "Failed to ensure Kubernetes cluster exists") } providerPlugins := getProviderPlugins(objectStoreProvider, clusterConfig) veleroInstallOptions, err := getProviderVeleroInstallOptions(objectStoreProvider, cloudCredentialsFile, bslBucket, bslPrefix, bslConfig, vslConfig, providerPlugins, features) if err!= nil {
 def #{method_name} without_autobuild do relation = __send__(:#{name}) relation.touch(#{extra_field? ":#{extra_field}" : 'nil' }, callbacks: [self]) if relation end end TOUCH
 def update_kinesis(method, path, data, headers, response=None, return_forward_info=False): if return_forward_info: if constants.KINESIS_RETURN_ERRORS: return 500 else: return True
 this.suggestions = new Suggestions(embark, options); } registerApi() { let plugin = this.plugins.createPlugin('consoleApi', {}); plugin.registerAPICall('post', '/embark-api/command', (req, res) => {
 * @see Authentication */ public final class InMemoryOAuth2AuthorizedClientService implements OAuth2AuthorizedClientService { private final ClientRegistrationRepository clientRegistrationRepository; private Map<OAuth2AuthorizedClientIdentifier, OAuth2AuthorizedClient> authorizedClients = new ConcurrentHashMap<>(); /** * Constructs an {@code InMemoryOAuth2AuthorizedClientService} using the provided parameters.
 // Continue digit deduction score -= Math.Max(Regex.Matches(phoneNumberText, continueDigitRegex).Count - 1, 0) * continueDigitDeductionScore; // Special award for special USphonenumber, i.e. 123-4567 or 123 - 4567 if (SpecialUSphonenumbeRegex.IsMatch(phoneNumberText)) { score += specialUSphoneNumberAward * continueDigitDeductionScore; } retur
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License.  // Package drivertest provides a conformance test for implementations of // driver. package drivertest
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4467-SEA 1645548010 1442166390</p> <hr> <p>Varnish cache server</p> </body>
 import java.util.Properties; import java.util.concurrent.TimeUnit; import static com.alibaba.nacos.test.naming.NamingBase.TEST_IP_4_DOM_1; import static com.alibaba.nacos.test.naming.NamingBase.TEST_NEW_CLUSTER_4_DOM_1; import static com.alibaba.nacos.test.naming.NamingBase.TEST_PORT; import static com.alibaba.nacos.test.naming.NamingBase.TEST_SERVICE_4_DOM_1; /** * C
 """ Purpose Shows how to use the AWS SDK for Python (Boto3) with the Amazon Elastic Compute Cloud (Amazon EC2) API to terminate an instance and clean up additional resources. """
 __tablename__ = violations_tablename id = Column(Integer, primary_key=True) inventory_index_id = Column(Integer, ForeignKey('inventory_index.id')) inventory_index = relationship('InventoryIndex', backref=backref('violations', uselist=True)) resource_id = Column(String(256), nullable=False) resource_type = Column(String(256), nullable=False) rule_name = Column(String(256)) rule_index = Column(Integer, default=0) violatio
 int TryAddRawGroupKern(struct splinefont *sf, int isv, struct glif_name_index *class_name_pair_hash, int *current_groupkern_index_p, struct ff_rawoffsets **current_groupkern_p, const char *left, const char *right, int offset) { char *pairtext; int success = 0; if (left && right && (pairtext = smprintf
 * This method should be called while committing non-idempotent overwrite operations. * If a concurrent operation commits a new file after the data was read and that file might * contain rows matching the specified conflict detection filter, the overwrite operation * will detect this during retries and fail. * <p> * If the filter is empty, this method will return false and the caller will need to * validateNoConflictingDataFiles. * <p> * Call
 } } func GetResultFormat(format string) (resultFormat, error) { switch strings.ToLower(format) { case "tabular": return formatTabular, nil
 import ( "fmt" asmfactory "github.com/aws/amazon-ecs-agent/agent/asm/factory" "github.com/aws/amazon-ecs-agent/agent/config" "github.com/aws/amazon-ecs-agent/agent/credentials"
 public boolean isPrimitive() { return clazz.isPrimitive(); } public boolean equals(JavaTypeDefinition def) { // TODO: JavaTypeDefinition generic equality return clazz.equals(def.clazz) && getTypeParameterCount() == def.getTypeParameterCount(); }
 // This is a weird type that only exists to satisify the interface required by // grpc.WithPerRPCCredentials. That api is designed to incorporate things like OAuth // but in our case, we really just want to send this static token through, but we still // need to do the dance. type staticToken string func (t staticToken) GetRequestMetadata(ctx context.Context, uri...string) (map[string]string, error) {
 JavaTypeDefinition previousType; if (node.getType()!= null) { // static field or method previousType = JavaTypeDefinition.forClass(node.getType()); // We need to remember the previous type so that we can // return the appropriate type when we are in a method. } else { // non-static field or method if (dotSplitImage.length == 1 && astArguments!= null) { // method
 code.mark_pos(self.pos) self.expr.result_is_used = False  # hint that.result() may safely be left empty self.expr.generate_evaluation_code(code) if not self.expr.is_temp: result = self.expr.result() if not result: return # if not self.expr.is_temp and result: if not self.expr.type.is_void: result = "(void)(%s)" % result code.putln("%s;" % result)
 return } // Add the nodes that were meant to be collapsed back to the lookup table. for _, node := range collapsedNodes { g.AddNode(node) }  // Create and edge for the dependency of newNode on parentNode. parentEdge := g.NewEdge(newNode, parentNode) g.SetEdge(parentEdge)
 // The URL's host is the name of the collection. // The URL's path is used as the keyField. // // The following query parameters are supported: // // - revision_field: //   Specifies the name of the revision field. See Options.RevisionField for details. // - filename: //   Specifies a filename to use when opening and closing the collection. See Options.Filename for details. type URLOpener struct { mu     
 def is_paired(input_string): pass
 <Wishlist key={wishlist.id} data={wishlist} shouldRenderVisibilityToggle={shouldRenderVisibilityToggle} /> )); }, [wishlists, shouldRenderVisibilityToggle]); if (loading &&!error) { return fullPageLoadingIndicator;
 import static org.assertj.core.api.Assertions.assertThat; import static tech.pegasys.pantheon.tests.acceptance.dsl.WaitUtils.waitFor; import static tech.pegasys.pantheon.tests.acceptance.dsl.transaction.clique.CliqueTransactions.LATEST_BLOCK; import tech.pegasys.pantheon.ethereum.core.Address; import tech.pegasys.pantheon.tests.acceptance.dsl.condition.Condition;
 root = etree.Element("FinalStatus") report_info = get_bza_report_info(self.engine, self.log) if report_info: report_element = etree.Element("ReportURL", link=report_info[0][0], name=report_info[0][1]) root.append(report_element) if self.last_sec: for label, kpiset in iteritems(self.last_sec[DataPoint.CUMULATIVE]):
 ipv6deactivationtime = Waiter::ds; // for IPv6 errors, try IPv4 before sending an error to the engine if ((dnsEntry.ipv4.size() && (!DNS_CACHE_EXPIRES || (Waiter::ds - dnsEntry.ipv4timestamp) < DNS_CACHE_TIMEOUT_DS)) || (httpctx->ares_pending &&!httpctx->ares_ipv6_pending)) { numconnections[httpctx->d]--; pausedreq
 delete chat->userpriv;  // discard any existing `userpriv` chat->userpriv = this->chatPeers; chat->group = group; chat->setTag(tag); client->notifychat(chat);
 ('graph vc', 'brown', 'brown'), ('graph rps', 'dark green', 'dark green'), ('graph fail', 'dark red', 'dark red'), ('graph r_time', 'dark blue', 'dark blue'), ('graph lt', 'dark cyan', 'dark cyan'), ('graph cn', 'dark magenta', 'dark magenta'), ('stat-hdr', 'light gray', 'dark blue'),
 goto out; old_path = g_file_resolve_relative_path (root, commit_filepath); if (!glnx_file_get_contents_utf8_at (old_path, &old_contents, cancellable, error)) goto out; }
 }) t.Run("unstaked (0 stake) origin", func(t *testing.T) { // submit using non-existing origin ID ps := new(protocol.State) ss := new(protocol.Snapshot) execState := new(state.ExecutionState)
 public async Task GivenAValidConfigurationWithETag_WhenExportingAnonymizedData_ResourceShouldBeAnonymized(string path) { _metricHandler?.ResetCount(); var dateTime = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss"); var resourceToCreate = Samples.GetDefaultPatient().ToPoco<Patient>(); resourceToCreate.Id = Guid.NewGuid().ToString(); await _testFhirClient.UpdateAsync(resourceToCreate);
 std::string classname = arg->getAttribute( "type", ""); std::string templatename = arg->getAttribute( "template", ""); // If a template alias is found, replace it with the corresponding full name templatename = sofa::defaulttype::TemplateAliases::resolveAlias(templatename); ClassEntryMap::iterator it = registry.find(classname); if (it == registry.end())
 processed.totalCredits += addon.current_usage.addon_quantity; processed.usedCredits += addon.current_usage.addon_usage; processed.remainingCredits += addon.current_usage.remaining; processed.validDate = addon.current_usage.valid_to; processed.purchaseDate = addon.current_usage.purchase_date; } return processed;
 errs := make([]error, len(actions)) beforeGets, gets, writes, afterGets := driver.GroupActions(actions) c.runGets(ctx, beforeGets, errs, opts) c.runWrites(ctx, writes, errs, opts) c.runGets(ctx, afterGets, errs, opts) return driver.NewActionListError(errs) }
 ) const ( reasonDomainVerified = "DomainVerified" ) // solver solves ACME challenges by presenting the given token and key in an
 def p_c_class_options(s): objstruct_name = None typeobj_name = None check_size ='min' s.expect('[') while 1: if s.sy!= 'IDENT':
 _icnId = icnId; _releasedIndex = releasedIndex; _pressedIndex = pressedIndex; } const Sprite & Button::_getPressed() const
 return; } let image = clip.imageBinary(); let path = `${req.protocol}://${req.get('Host')}/clip/${encodeURIComponent(req.params.id)}/${encodeURIComponent(req.params.domain)}/${encodeURIComponent(req.params.clipId)}`; if (req.userAnalytics) { req.userAnalytics.pageview(path).send(); } else { let anonAnalytics = ua(config.gaId); anonAnalytics.pageview(path).send(); } res.header("Content-Type", image.co
 model_name (str): Model name. progress_queue (Queue): Progress queue. """ try: self.scanner.run(model_name, progress_queue, self.service_config) except Exception as e: LOGGER.error(e) progress_queue.put('Error occurred during the scanning process.') progress_queue.put(None)
 self.disconnect() """ def __init__(self): super(ServerConnectionMixin, self).__init__() self.server_conn = ServerConnection() self.__check_self_connect() def __check_self_connect(self):
 } func toChunk(at uint64, payload []byte) (swarm.Chunk, error) { ts := make([]byte, 8) binary.BigEndian.PutUint64(ts, at) return cac.New(append(ts, payload...)) }
 if (!dev::stringCmpIgnoreCase(m_param->mutableStorageParam().type, "External")) { initAMDBStorage(); } else if (!dev::stringCmpIgnoreCase(m_param->mutableStorageParam().type, "LevelDB")) {
 }; } private static final Schema SUPPORTED_PRIMITIVES = new Schema( required(100, "id", Types.LongType.get()), required(101, "data", Types.StringType.get()), required(102, "b", Types.BooleanType.get()),
 // SimpleFSSyncStatus - Get sync status. func (k *SimpleFS) SimpleFSSyncStatus(ctx context.Context) (keybase1.FSSyncStatus, error) { ctx = k.makeContext(ctx) jServer, err := libkbfs.GetJournalServer(k.config) if err!= nil { k.log.CDebugf(ctx, "No journal server, sending empty response")
 from google.cloud.forseti.common.util import logger from google.cloud.forseti.common.util import string_formats from google.cloud.forseti.notifier.notifiers import findings from google.cloud.forseti.notifier.notifiers.gcs_inv_summary import GcsInvSummary from google.cloud.forseti.notifier.notifiers.base_notification import BaseNotification from google.cloud.forseti.services.inventory.storage import DataAccess from google.cloud.forseti.services.inventory.storage import InventoryIndex
 isHistoryMigrated: equal('historyMigrationStatus', HISTORY_MIGRATION_STATUS.MIGRATED), isMigratable: computed('migrationStatus', 'permissions.migrate', function () { const isMigrated =!!this.migrationStatus; const isFailed = this.isMigrationFailed; const hasPermissions = this.permissions.migrate;
 else if (strCommand == NetMsgType::XPEDITEDBLK) { // ignore the expedited message unless we are at the chain tip... if (!fImporting &&!fReindex &&!IsInitialBlockDownload()) { if (!HandleExpeditedBlock(vRecv, pfrom)) {
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4462-SEA 1645530275 1419928550</p> <hr> <p>Varnish cache server</p> </body>
 for key, value in query.items(): if key in redis.connection.URL_QUERY_ARGUMENT_PARSERS: query[key] = redis.connection.URL_QUERY_ARGUMENT_PARSERS[key](value)  # Query parameters override other parameters connparams.update(query)
 ASSERT_TRUE(account_asset); ASSERT_EQ((*account_asset)->accountId(), account); ASSERT_EQ((*account_asset)->assetId(), asset); ASSERT_EQ((*account_asset)->balance(), amount); } /**
 if err!= nil { return "", fmt.Errorf("parse worker service template: %w", err) } overridenTpl, err := s.taskDefOverrideFunc(convertTaskDefOverrideRules(s.manifest.TaskDefOverrides), content.Bytes()) if err!= nil { return "", fmt.Errorf("apply task definition overrides: %w", err) } return string(overridenTpl), nil } // Parameters returns the list of CloudFormation parameters used b
 var dialect = Session.Factory.Dialect; var hydratedObjects = new List<object>[_queryInfos.Count]; var cacheModeOrig = Session.CacheMode; using (var sessionContext = new SessionContext(Session, _cacheMode)) { try { var rowCount = 0; for (var i = 0; i < _queryInfos.Count; i++)
 del othercid['spam'] assert cid!= othercid assert cid == {'spam': 'blueval', 'eggs':'redval'} with pytest.raises(NotImplementedError): cid == object() def test_setdefault(self): cid = CaseInsensitiveDict({'Spam': 'blueval'})
 class ZKSecurityTool { private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class); private static final int SALT_LENGTH = 8; // Generates a byte array salt of length SALT_LENGTH private static byte[] generateSalt() {
 len(fact['relationships']) > 0] # list of used facts uf = link.get('used', []) if not requirement.enforce(combo[0], uf, operation['facts']): return False return True
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4476-SEA 1645543044 1202716557</p> <hr> <p>Varnish cache server</p> </body>
 def test_select_slice(self): cube = Dataset(self.cube) self.assertEqual(cube.select(longitude=(0, 1.01)).data.data, np.array([[1, 2], [5, 6], [9, 10]], dtype=np.int32)) def test_select_set(self):
 } /** * Removes all nodes with a specific path and their children in the given workspace. * * @param string $nodePath * @param string $workspaceName
 private final HashMap<String/* topic */, List<QueueData>> topicQueueTable; private final HashMap<String/* brokerName */, BrokerData> brokerAddrTable; private final HashMap<String/* clusterName */, Set<String/* brokerName */>> clusterAddrTable; private final HashMap<String/* brokerAddr */, BrokerLiveInfo> brokerLiveTable; private final HashMap<String/* brokerAddr */, List<String>/* Filter Server */> filterServerTable; public RouteInfoM
 os.remove(jmeter_dist.name) if self.check_if_installed(): return self.tool_path else: raise RuntimeError("Unable to run %s after installation!" % self.tool_name) class JMeterPlugins(RequiredTool): """ JMeter plugins
 if source == target: if source not in G: raise nx.NodeNotFound( f"Source {source} or target {target} not in G" ) return 0 weight = _weight_function(G, weight) length = _dijkstra(G, source, weight, target=target)
 } public void updateHeightEstimate(final long blockNumber) { synchronized (this) { estimatedHeightKnown = true; if (blockNumber > estimatedHeight) { estimatedHeight = blockNumber; } } estimatedHeightListeners.forEach(e -> e.onEstimatedHeightChanged(estimatedHeight)); }
 # # from stp_core.loop.eventually import eventually # from plenum.common.util import randomString # from plenum.test.helper import checkNodeLedgersForEquality # from plenum.test.node_catchup.helper import checkNodeLedgersForEquality #
'ssl_cert_reqs': ssl.CERT_REQUIRED,'ssl_ca_certs': '/path/to/ca.crt','ssl_certfile': '/path/to/client.crt','ssl_keyfile': '/path/to/client.key'},'redis_backend_use_ssl': {'ssl_cert_reqs': ssl.CERT_REQUIRED,'ssl_ca_certs': '/path/to/ca.crt','ssl_certfile': '/path/to/client.crt',
 :Author: Zhiyi Wu :Year: 2017-2018 :Copyright: GNU Public License v3 :Maintainer: Zhiyi Wu <zhiyi.wu@gtc.ox.ac.uk>, Zhiyi Wu <zhiyi.wu@ucl.ac.uk>,  `@xiki-tempula`_ on GitHub.. _`@xiki-tempula`: https://github.com/xiki-tempula
 return $this->generateOrderPdf($order_id, ConfigQuery::read('pdf_delivery_file', 'delivery')); } public function downloadVirtualProduct($order_product_id) { if (null!== $orderProduct = OrderProductQuery::create()->findPk($order_product_id)) {
 if not os.path.exists(FLAGS.output_path): os.makedirs(output_path) output_path = os.path.abspath(output_path) _upload_csv(output_path, now_utc, csv_file.name) # Send summary email. if FLAGS.email_recipient is not None: resource_counts = kwargs.get('resource_counts', {}) _send_email(csv_file.name, now_utc, all_violations, resource_counts) def _upload_csv(output_path, now_utc, csv_n
 LOG(NET, "more getheaders (%d) to end to peer=%s (startheight:%d)\n", pindexLast->nHeight, pfrom->GetLogName(), pfrom->nStartingHeight); pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()); // reset the time because more headers needed CNodeState* state = State(p
 import tech.pegasys.pantheon.tests.acceptance.dsl.transaction.eth.EthTransactions; public class ExpectBeneficiary implements Condition { private final EthTransactions eth; private final String beneficiary; public ExpectBeneficiary(final EthTransactions eth, final PantheonNode node) { this.eth = eth;
 false!== strpos( $tag[0], 'data-minify=' ) || false!== strpos( $tag[0], 'data-no-minify=' ) || false!== strpos( $tag[0], 'data-rocketlazyloadscript=' ) || false!== strpos( $tag[0], 'data-rocket-combine=' ) ) { return true; }
 n_tags = potentials.shape[-1] transition_params = tf.random.normal([n_tags, n_tags]) backpointers, _ = text.crf_decode_forward( inputs, initial_state, transition_params, sequence_length_less_one )
 rowBuilder.set(i, Double.NaN); break; } case DECIMAL: case VARINT: case TIMESTAMP: case DATETIME: case DATE: case TIME: case DATETIME2: case DATETIMEOFFSET: case SMALLDATETIME: case SMALLDATETIME2: case MONEY: case SMALLMONEY: case UNIQUEIDENTIFIER: rowBuilder.set(i, s); break;
 import {typeForConstructor} from '../lib/browser/objects'; //////////////////////////////////////////////////////////////////////////// // // Copyright 2016 Realm Inc.
 private static Set<String> ownedObservables(DAG dag) { return StreamSupport.stream(Spliterators.spliteratorUnknownSize(dag.iterator(), 0), false).map(vertex -> (String) vertex.getMetaSupplier().getTags().get(ObservableRepository.OWNED_OBSERVABLE)).filter(Objects::nonNull).collect(Collectors.toSet()); }
 consumer = file_accessor.spec_consumer flags = compiler_flags_for_consumer(consumer) source_files = file_accessor.source_files other_file_refs = (source_files - source_files_for_directories).map { |sf| project.reference_for_path(sf) } target.add_file_references(other_file_refs, nil)  source_files_for_directories.each do |sf| if sf.extname == ".d" target.add_file_references([project.reference_for_path(sf)], nil) 
 * @param <T>      value type * @return A new Stream */ static <T> Stream<T> gen(T seed, Function<T, T> supplier) { Objects.requireNonNull(supplier, "supplier is null"); return new Stream.Cons<>(seed, () -> gen(supplier.apply(seed), supplier)); }
 self.cloudsql_instance = '{}-{}'.format( 'forseti-security', self.datetimestamp) self.cloudsql_region = kwargs.get('cloudsql_region') or FLAGS.cloudsql_region # forseti_conf_server.yaml.in properties self.sendgrid_api_key = kwargs.get('sendgrid_api_key')
 * {@link NullPointerException}s for reasons that still require further investigation, but are assumed to be due to a * bug in the JDK. Propagating such NPEs is confusing for users and are not subject to being retried on by the default * retry policy configuration, so instead we bias towards propagating these as {@link IOException}s. * * TODO: revisit this in the future */ private static int getResponseCodeSafely(HttpURLConnection con
 raise Bolt::CLIError, "Unsupported format: '#{self[:format]}'" end self[:transports].each_value do |v| timeout_value = v[:connect_timeout] unless timeout_value.is_a?(Integer) || timeout_value.nil?
 El::Matrix<TensorDataType, Device>& mat) { El::EntrywiseMap( mat, {[](TensorDataType const& a) { return El::Sqrt(a); }}); } template <typename TensorDataType, data_layout Layout, El::Device Device>
 import tech.pegasys.pantheon.ethereum.core.Address; import tech.pegasys.pantheon.ethereum.core.Hash; import tech.pegasys.pantheon.tests.acceptance.dsl.transaction.PantheonWeb3j; import tech.pegasys.pantheon.tests.acceptance.dsl.transaction.PantheonWeb3j.BlockBodyResponse; import tech.pegasys.pantheon.tests.acceptance.dsl.transaction.PantheonWeb3j.Signer
 return 1 for kind, name in self.read_dependency_file(source_path): if kind == "cimport": dep_path = self.find_pxd_file(name, pos) elif kind == "include": dep_path = self.search_include_directories(name, pos) else: continue
 opt.setRequired(true); options.addOption(opt); opt = new Option("q", "queue", true, "set the queue, eg: 0,1"); opt.setRequired(false); options.addOption(opt);
 */ public enum AuditOperationType { STREAM_DEFINITIONS(100L, "Stream Definitions"), TASK_DEFINITIONS(  200L, "Task Definitions"), APP_REGISTRATION( 300L, "App Registrations"), SCHEDULE(         400L, "Schedules"); private Long id; private String name;
 ); uksort( $crons,'strnatcasecmp' ); return _set_cron_array( $crons ); } /**
 elif isinstance(data, str):  # TODO - What about unicode? self._data = array.array("u", data) elif isinstance(data, MutableSeq): self._data = array.array("u", data._data[:]) else: # Make no assumptions about the Seq subclass internal storage self._data = array.array("u", str(data)) else:
 func (c *container) getBaseNode() report.Node { result := report.MakeNodeWith(report.MakeContainerNodeID(c.ID()), map[string]string{ ContainerID:       c.ID(), ContainerName:     c.container.Name, ContainerCreated:  c.container.Created.Format(time.RFC822), ContainerCommand:  c.container.Path + " " + strings.Join(c.container.Args, " "), ImageID:           c.Image(),
 * code related to the symbol table. */ typedef enum { K_UNDEFINED = KEYWORD_NONE, /* the followings items are also used as indices for VerilogKinds[] and SystemVerilogKinds[] */
 } protected JobGroupInfo newJobGroupInfo(String groupId, String desc) { return new JobGroupInfo(groupId, desc + "-" + jobCounter.getAndIncrement(), false); } /** * Returns all the path locations of all Manifest Lists for a given list of snapshots
 public class Kafka8MessageTimestamp implements KafkaMessageTimestamp { @Override public long getTimestamp(MessageAndMetadata<byte[], byte[]> kafkaMessage) { return 0l; } @Override public long getTimestamp(MessageAndOffset messageAndOffset) { return 0l; } }
 *          deselected (false) */ private void setSelected(WebElement option, boolean select) { if (!option.isSelected() && select || option.isSelected() &&!select) { option.click(); } }
 machine_id = 0 lines = [line.rstrip('\n') for line in open(filename)] for line in lines: result = line.split() if len(result) == 2: port = int(result[1]) elif len(result) == 1:
 # Always record the affected head version. start_revision, end_revision = get_start_and_end_revision( testcase.regression, testcase.job_type) build_revision_mappings = revisions.get_build_to_revision_mappings() impacts.head = get_head_impact(build_revision_mappings, start_revision, end_revision)
 writer_two{write_two}; writer_one.join(); reader_one.join(); reader.join(); }
 $notallowed = true; } if($notallowed == true) { if(!$mybb->get_input('modal')) {
 void GenericConstraintProblem::freeConstraintResolutions() { for(unsigned int i=0; i<constraintsResolutions.size(); i++) { if (constraintsResolutions[i]!= nullptr) { delete constraintsResolutions[i]; } } }
 gr.Add(func() error { return server.Run() }, func(err error) { logger.Err(err). Info(). Str("transport", "http"). Msg("Shutting down server")
 help="File to write a ticket to (for TLS 1.3)") parser.add_argument("--res_master", help="Resumption master secret (for TLS 1.3)") parser.add_argument("--sni", help="Server Name Indication (for TLS 1.3)") parser.add_argument("--debug", action="store_const", const=5, default=0, help="Enter debug mode") parser.add_argument("server", nar
.map(AccountManagerFuture::getResult).doOnEvent((bundle, throwable) -> { if (bundle.containsKey(AccountManager.KEY_ACCOUNT_NAME)) { return; } }).map(bundle -> bundle.getString(AccountManager.KEY_ACCOUNT_NAME))
 func getDogStatsdMetricImpl(b *testing.B) Metrics { m, err := NewMetrics(testDogStatsdConfig()) if err!= nil { b.FailNow() } return m }
 } const AccountResponse::AccountRolesIdType &AccountResponse::roles() const { return account_roles_; } }  // namespace proto
 } // Normalize size if ($size instanceof PictureConfiguration) { return array($size, $margin); } if (is_numeric($size)) { $size = array(0, 0, (int) $size);
 from.packages.urllib3.poolmanager import PoolManager, proxy_from_url from.packages.urllib3.response import HTTPResponse from.packages.urllib3.util import Timeout as TimeoutSauce from.compat import urlparse, basestring, urldefragauth from.utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers, prepend_scheme_if_needed, get_auth_from_url) from.structures import CaseInsensitiveDict
 return formatted_msg return msg
 module Rest # Wrapper of low-level HTTP/REST client/library class Connection DEFAULT_URL = ENV['GD_SERVER'] || 'https://secure.gooddata.com' LOGIN_PATH = '/gdc/account/login' TOKEN_PATH = '/gdc/account/token' KEYS_TO_SCRUB = [:password, :verifyPassword, :authorizationToken]
 if ( hero.HasArtifact( Artifact::BALLISTA ) ) catShots += Artifact( Artifact::BALLISTA ).ExtraValue(); } u32 Battle::Catapult::GetDamage() const
 { $userTable = $schema->getTable($this->getTable('user')); $this->skipIf(false === $userTable->hasColumn('credentials_expired'), 'It seems that you already played this migration.'); $userTable->dropColumn('credentials_expired'); }
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4444-SEA 1645530232 1491495855</p> <hr> <p>Varnish cache server</p> </body>
 t.Helper() logger := logging.New(ioutil.Discard, 0) store := statestore.NewStateStore() s := api.New(tags.NewTags(store, logger), storer, nil, logger, nil) ts := httptest.NewServer(s) srvUrl, err := url.Parse(ts.URL) if err!= nil {
 self.evaluate(tf.compat.v1.global_variables_initializer()) with tf.control_dependencies([wn_output]): wn_removed_layer = wn_layer.remove() if wn_layer.is_rnn: kernel = wn_layer.layer.cell.recurrent_kernel
 #include <climits> #include <iostream> /** * @brief This function calculates the sum of all numbers from 1 to n * @param n the number till which the sum is calculated * @return the sum of all numbers from 1 to n */ /** * @brief This function calculates the sum of all numbers from 1 to n * @param n the number till which the sum is calculated
 if (result.isPresent()) { Result toReturn = result.get(); LOG.info(String.format("Detected dialect: %s", toReturn.dialect)); return toReturn; }
 } field.withType = withType; } if (!field.withType) { fail('withType property is missing. Hint: it must match the "name" property of a doc type.'); }
 logs.log_error('Unable to determine build parameters.') return # Check if we already have the symbols locally. if check_cached_build_params(symbols_directory, build_params): # No work to do, same system symbols already in local. return build_id = build_params.get('build_id')
 // Ask for a number of messages that will give us the desired queue length. // Unless we don't have information about process time (at the beginning), in // which case just get one message. nMessages := 1 if s.dynamicBatchSizes && s.avgProcessTime > 0 { // Using Ceil guarantees at least one message. n := math.Ceil(desiredQueueDuration.Seconds() / s.avgProcessTime)
 // CTC interacts with the OVM CTC contract type CTC struct { Address common.Address Client  *ethclient.Client } func (ctc *CTC) GetTotalElements(ctx context.Context) (*big.Int, error) { contract, err := bindings.NewCanonicalTransactionChainCaller(ctc.Address, ctc.Client) if err!= nil {
'second-child-node-name' => $secondChildNodeType ])); $mockNode->method('getIdentifier')->willReturn($this->uuid); $mockNode->expects(self::once()) ->method('getNodeType')
 public void addHostedFeedData() throws IOException { if (feedDataHosted) throw new IllegalStateException("addHostedFeedData was called twice on the same instance"); for (int i = 0; i < NUM_FEEDS; i++) { Feed feed = new Feed(0, null, "Title " + i, "https://news.google.com/news/rss?" + i, "Description of feed " + i, "htt
 */ package tech.pegasys.pantheon.metrics; import java.util.concurrent.atomic.AtomicInteger;  @FunctionalInterface public interface Counter { void inc();  int getValue(); }
 # def podspec_path declared_path = (params[:path] || params[:local]).to_s podfile_dir   = File.dirname(podfile_path || '') absolute_path = File.expand_path(declared_path, podfile_dir) pathname      = Pathname.new(absolute_path)
 config: config, type: 'api' }; return this.request('/configs', 'POST', { data: data }, { contentType: 'application/json' }); }, parse(configs) {
 'force': 'kcal/(mol*Angstrom)'} _Timestep = Timestep def __init__(self, filename, mmap=None, **kwargs): self._mmap = kwargs.pop('mmap', None) super(NCDFReader, self).__init__(filename, **kwargs)
 if (e == API_EOVERQUOTA) { assert((type == PUT &&!timeleft) || (type == GET && timeleft)); //only expected overstorage overquota for uploads if (!slot) { bt.backoff(timeleft? timeleft : NEVER);
 "errors" "fmt" "reflect" "strings" ) // NoDedupeID indicates a streaming insert row wants to opt out of best-effort
 Expression expressionObject = CommandContextUtil.getCmmnEngineConfiguration(commandContext).getExpressionManager().createExpression(expression); value = expressionObject.getValue(planItemInstanceEntity); if (resultVariable!= null) { if (storeResultVariableAsTransient) { planItemInstanceEntity.setTransientVariable(resultVariable, value); } else { planItemInstanceEntity.setVariable(resultVariable, value);
 IndexNames []string `json:"index_names,omitempty"` Browse     *Browse  `json:"browse,omitempty"` bufPool   *sync.Pool // TODO: Content negotiation }
 GUARD(s2n_stuffer_write_uint16(out, total_size)); /* Write server name extension */ if (s2n_server_should_send_server_name(conn)) { GUARD(s2n_stuffer_write_uint16(out, TLS_EXTENSION_SERVER_NAME)); /* TLS extension length is 0 */ GUARD(s2n_stuffer_write_uint16(out, 0)); }
 private static String getCause(Exception e) { StringBuilder sb = new StringBuilder(); if (e.getMessage()!= null) { sb.append(e.getMessage()); } if (e.getCause()!= null && e.getCause().getMessage()!= null) { sb.append(": ").append(e.getCause().getMessage()); } return sb.toString(); }
 m_network_Factory.RegisterTransport(&descriptor); } // Workaround TCP discovery issues when register switch (PParam.builtin.discoveryProtocol) {
 attrs = attrs.to_a added_purchases = if attrs.any? inserted = GamePurchase.insert_all(attrs, unique_by: [:game_id, :user_id]) # GamePurchase.insert_all doesn't perform validations, so we need to # run the callbacks manually. GamePurchase.transaction do GamePurchase.after_insert_all inserted end inserted GamePurchase.where(id: inserted.map { |e| e['id'] }) else GamePurchase.none
 defined( 'ABSPATH' ) || exit;?> <script type="text/javascript">!function(e,t,n){function a(){var e=t.getElementsByTagName("script")[0],n=t.createElement("script");n.type="text/javascript",n.async=!0,n.src="https://beacon-v2.helpscout.net",e.parentNode.insertBefore(n,e)}if(e.Beacon=n(function(t,n,a){e.Beacon.readyQueue.push({m
 /** * Converts this collection to a {@link SortedMap}. * * @param comparator  A comparator that induces an order of the map keys. * @param keyMapper   A function that maps an element to a key * @param valueMapper A function that maps an element to a value * @param merge A function that merges values that are associated with the same key
 */ #include "mega/utils.h" namespace mega { Cachable::Cachable()
 template <typename TensorDataType> bool sgd<TensorDataType>::save_to_checkpoint_shared(persist& p, std::string name_prefix) { if (this->get_comm().am_trainer_master()) { write_cereal_archive(*this, p, "sgd.xml"); } char l_name[512];
 } type FileConfig struct { Prometheus   *PrometheusConfig `hcl:"Prometheus"` DogStatsd    []DogStatsdConfig `hcl:"DogStatsd"` M3           []M3Config        `hcl:"M3"` InMem        InMemConfig       `hcl:"InMem"` } type DogStatsdConfig struct {
 resIndex := -1 for i := 0; i < v.NumField(); i++ { if f := t.Field(i); p.fieldName(f) == fieldName { if!v.Field(i).IsZero() { return t.Field(i), true } else if resIndex == -1 { resIndex = i } } }
 final JsonObject respBody = new JsonObject(body); final String token = respBody.getString("token"); assertThat(token).isNotNull(); websocketService.authenticationService
 FCMoveContent(temp_objects, matches); } // No operand condition was selected. State is restored... } //...  Move all to non_matches input set. non_matches.reserve(matches.size() + non_matches.size()); FCMoveContent(matches, non_matches); } bool OrderedAlternativesOf::RootCandidateInvariant() const {
 } InputFile getInputFile(String location) { return inputFiles.get(new Path(location)); } @Override
 "one hundred and twenty-three")) def test_number_too_large(self): with self.assertRaisesWithMessage(ValueError) as error: say(1e12) self.assertEqual(len(str(error.exception)), 31) def test_number_negative(self): with self.assertRaisesWithMessage(ValueError) as error: say(-1) self.assertEqual(len(str(error.exception)), 31) # Utility functions def setUp(self):
 // Expiration sets the Backup's expiration. func (b *BackupBuilder) Expiration(val time.Time) *BackupBuilder { b.object.Status.Expiration = &metav1.Time{Time: val} return b } // StartTimestamp sets the Backup's start timestamp. func (b *BackupBuilder) StartTimestamp(val time.Time) *BackupBuilder { b.object.Status.StartTimestamp = &metav1.Time{Time: val} return b }
 @classmethod def get_root(cls, session, inventory_index_id): """Get the resource root from the inventory. Args: session (object): Database session.
 tx = b.create_transaction(b.me, user_vk, None, 'CREATE', payload=payload) payload_uuid = tx['transaction']['data']['uuid'] matches = b.get_tx_by_payload_uuid(payload_uuid) assert len(matches) == 1 assert matches[0]['id'] == tx['id'] block = b.create_block([tx]) b.write_block(block, durability='hard') matches = b.get_tx_by_payload_uuid(payload_uuid) asse
 from six.moves import range import six import itertools import os.path import warnings
 """Initialize layers of the head.""" self.cls_convs = nn.ModuleList() self.reg_convs = nn.ModuleList() # TODO: In the future, we will use the registry to choose either # DepthwiseSeparableConvModule or ConvModule. Thus, we will have a # chance to reduce the option `use_depthwise`. conv = DepthwiseSeparableConvModule \ if self.use_depthwise else ConvModule
 // telemetry the destination_service_name label will be set to the service entry host, // which is required to have the form <name>.<namespace>.global where name and namespace // correspond to the remote service’s name and namespace respectively. In this situation // we massage the request in two ways: // // First, we reset destSvcName to <name> in order to unify remote and local requests to the // service. By doing this the graph
 convertOps.setProgress( Progress( ConfigOptions().getJobId(), JOB_SOURCE, Progress::JobState::Running, (float)(_currentTaskNum - 1) / (float)_numTotalTasks, 1.0f / (float)_numTotalTasks)); convertOps.apply(fullMap); // get back into wgs84 in case some op changed the proj MapProjector::projectToWgs84(fullMap);
 return false; } supports(feature) { if (!supportedFeatures) { supportedFeatures = getSupportedFeatures();
 FormInfo formInfo = repositoryService.getFormModelByKey("form1"); SimpleFormModel formModel = (SimpleFormModel) formInfo.getFormModel(); assertThat(formModel.getFields()).extracting(FormField::getId, FormField::getName).containsExactly(tuple("input1", "Input1")); FormDeployment redeployment = repositoryService.createDeployment().addClasspathResource("org/flowable/form/engine/test/deployment/simple2.form")
 } } return nil }
 import org.apache.arrow.vector.ValueVector; public class ArrowVectorAccessor<DecimalT, Utf8StringT, ArrayT, ChildVectorT extends ValueVector> { private final ValueVector vector; private final ChildVectorT[] childColumns;
 // - Configures routes between the hosts, giving each host 10.65.x.0/24, where x is the //   index in the returned array.  When creating workloads, use IPs from the relevant block. // - Configures the Tunnel IP for each host as 10.65.x.1. func StartNNodeEtcdTopology(n int, opts TopologyOptions) (felixes []*Container, e
 fullOutputFilename); if (get_report_errors()) { STOFileAdapter_<double>::write(*modelOrientationErrors, getName() + "_orientationErrors.sto"); } else { throw std::runtime_error("IMUInverseKinematicsTool: No output files are written."); } } // Results written to file, clear in case we run again ikReporter->clearTable(); }
 require.NoError(t, err) require.Equal(t, ops2.Program, ops.Program) testProg(t, "#pragma unk", assemblerNoVersion, expect{1, "unsupported pragma..."}) } func TestAssembleConstants(t *testing.T) {
.add<std::string>("aging-query", "query for aging out obsolete data").add<std::string>("shutdown-grace-period", "time to wait until component shutdown " "finishes cleanly; after this period, the server forces a shutdown"); return std::make_unique<command>(path, "", documentation::vast, add_index_opts(std::move(ob))); }
 def hausdorff_avg(P, Q): r"""Calculate the average Hausdorff distance between two paths. *P* (*Q*) is a :class:`numpy.ndarray` of :math:`N_p` (:math:`N_q`) time steps, :math:`N` atoms, and :math:`3N` coordinates (e.g.,
 // Browsing navigation gets messed up if browsing a directory // that doesn't end in "/" (which it should, anyway) u := r.Context().Value(httpserver.OriginalURLCtxKey).(url.URL) if u.Path == "" || u.Path == "/" { u.Path = "/" }
 return self.request_dict.get('group') @cached_property def _request(self): """The request dictionary, which is used to construct the Request object.  This property is used internally by the Celery library. """ request = self.request_dict # pylint: disable=unpacking-non-sequence #    payload is a property, so pylint doesn't think it's a tuple.
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4434-SEA 1645530261 1539636372</p> <hr> <p>Varnish cache server</p> </body>
 """Upload inventory summary to GCS.""" from google.cloud.forseti.common.gcp_api import storage from google.cloud.forseti.common.gcp_api import utils from google.cloud.forseti.common.util import date_time from google.cloud.forseti.common.util import logger from google.cloud.forseti.common.util import string_formats
 func (h *errorHandler) Handle(ctx context.Context, err error) { // get the request path path, _ := ctx.Value(kithttp.ContextKeyRequestPath).(string) logger := level.Info(kitlog.With(h.logger, "path", path))
 Returns ------- dict With ``str`` keys and ``tensor`` values.  Note that this dict will be a subset of the original data dict. """ return self._src_data
 cmdutils.check_overflow(new_idx, 'int') self._tabbed_browser.tabBar().moveTab(cur_idx, new_idx) @cmdutils.register(instance='command-dispatcher', scope='window') @cmdutils.argument('choice', completion=miscmodels.suggest) def suggest(self, command: str, suggestions: str, choice: str):
 if (context.Request.Cookies.ContainsKey(CsrfToken.DEFAULT_CSRF_KEY)) { var cookieValue = context.Request.Cookies[CsrfToken.DEFAULT_CSRF_KEY]; var cookieToken = CsrfApplicationStartup.ObjectSerializer.Deserialize(cookieValue) as CsrfToken; if (CsrfApplicationStartup.TokenValidator.CookieTokenStillValid(cookieToken)) { context.Items[CsrfToken.DEFAULT_CSRF_KEY] = cookieValue; return; } }
 """Return a tuple of exceptions meaning'skip this test', to re-raise. This is intended to cover most common test runners; if you would like another to be added please open an issue or pull request. """ # This is a set because nose may simply re-export unittest.SkipTest exceptions = set()
 // Do not index or cache the page with the confirmation message if ($_SESSION['TL_COMMENT_ADDED']) { $objTemplate->confirm = $GLOBALS['TL_LANG']['MSC']['com_confirm']; // delete the session variable $objTemplate->confirm = $GLOBALS['TL_LANG']['MSC']['com_confirm']; unset($_SESSION['TL_COMMENT_ADDED']); }
 lgb_train, num_boost_round=100, valid_sets=lgb_eval, # you can use a list to represent multiple valid_datas/valid_names # don't use tuple, tuple is used to represent one dataset early_stopping_rounds=5) # save model to file
 bolt "github.com/coreos/bbolt" ) // diskDB is the DB implementation for bolt. type diskDB struct { db     *bolt.DB
 # limitations under the License. # import os import os.path from.cfg_parser import LuigiConfigParser from.toml_parser import LuigiTomlParser
 def hausdorff(P, Q): r"""Calculate the symmetric Hausdorff distance between two paths. *P* (*Q*) is a :class:`numpy.ndarray` of :math:`N_p` (:math:`N_q`) time steps, :math:`N` atoms, and :math:`3N` coordinates (e.g.,
 @reply_link = reply_link(@notification) # Encrypting @signed_message = verifier.generate(member_id: @notification.recipient.id, type: :send_notification_email) { mail(to: @notification.recipient.email, subject: @notification.subject)
 } if (strProjectPlanClass.Find(_T("nvidia"))!= wxNOT_FOUND) { pProjectInfo->m_bProjectSupportsIntelGPU = true; if (!pDoc->state.host_info.coprocs.have_nvidia()) { // If the project uses nvidia, but the host does not, don't add it. continue; } }
 tp.RegisterSpanProcessor(ssp) tr := tp.Tracer("BatchSpanProcessorWithOptions") wg := &sync.WaitGroup{} generateSpan(t, option.parallel, tr, option, wg) wg.Wait() time.Sleep(option.waitTime)
 return false; } log_->debug("status written, {}", client_id);  if (last_tx_status_received) { // force stream to end because no more tx statuses will arrive. // it is thread safe because of synchronization on current_thread return false; } return true; }).subscribe(subscription,
 // <auto-generated> //     This code was generated by a tool. //     Changes to this file may cause incorrect behavior and will be lost if
 public class RequestEntityTooLargeException : FhirException { public RequestEntityTooLargeException() : base(Resources.RequestEntityTooLargeException, null) { Issues.Add(new OperationOutcomeIssue( OperationOutcomeConstants.IssueSeverity.Error,
 ) const ( numRekeyWorkers = 32 ) type rekeyQueueEntry struct {
 # WORKAROUND for https://github.com/PyCQA/pylint/issues/574 # pylint: disable=superfluous-parens if'magenta' in (old_config or ''): assert' colors.hints.fg: magenta' in lines if insert: assert' tabs.show: never' in lines # pylint: enable=superfluous-parens def test_init_save_manager(self, yaml, fake_save
 delete(data.Brokers["ns2/broker2"].Targets, "name4") b, _ = proto.Marshal(data) atomicWriteFile(t, dir, "tmp", b) <-ch
 @Override public PriorityQueue read(ObjectDataInput in) throws IOException { int size = in.readInt(); Comparator comparator = in.readObject(); PriorityQueue res = new PriorityQueue(Math.min(1, size), comparator); for (int i = 0; i < size; i++) { res.add(in.readObject()); }
 flag.StringVar(&conf.MetricsPath, "metricspath", "/metrics", "path of prometheus endpoint where metrics will be available") flag.DurationVar(&conf.PollTime, "polltime", time.Second*pollTime, "time interval in seconds between each poll") flag.DurationVar(&conf.ProbeTimeout, "timeout", time.Second*probeTimeout, "probe timeout in seconds") flag.BoolVar(&conf.EnableGRPCMetrics, "en
 * * @return Request * * NEXT_MAJOR : Return $this->get('request_stack')->getCurrentRequest() only * */ public function getRequest()
 binding.role: bigquery_acl.role, } return regular_exp.all_match(rule_regex_to_val)
 def spiral(matrix_size): pass
 return comp; } bool MegaApiImpl::nodeNaturalComparatorASC(Node *i, Node *j) { int r = naturalsorting_compare(i->displayname(), j->displayname()); if (r < 0 || (!r && i < j))
 metrics_set, local_namespace, environ, blotter_class): """Run a backtest for the given algorithm. This is shared between the cli and :func:`zipline.run_algo`.
 import $ from 'jQuery'; import globalize from 'globalize'; import taskButton from'scripts/taskbutton';
 } scanner.setRange(rangeSplit.getRange());  // do this last after setting all scanner options } else if (split instanceof BatchInputSplit) {
 } else if (sit > min_seq_in_history) { gap_builder.add(sit); } else { assert(sit > changes_low_mark_); } });
 return( true ); } static int GFD_Format(GGadget *g, GEvent *e) { if ( e->type==et_controlevent && e->u.control.subtype == et_listselected ) { struct gfc_data *d = GDrawGetUserData(GGadgetGetWindow(g));
 slow_step_size: A floating point value. The ratio for updating the slow weights. name: Optional name for the operations created when applying gradients. Defaults to "Lookahead". **kwargs: keyword arguments. Allowed to be {`clipnorm`, `clipvalue`, `lr`, `decay`}. `clipnorm` is clip gradients by norm; `clipvalue` is clip gradients by value, `decay` is
 row = result.fetchone() if row: users = {} for user in row['similar_users']: users[user] = row['similar_users'][user][0] return SimilarUsers(user_id=row[0], similar_users=users) return None
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4426-SEA 1645541665 1630079835</p> <hr> <p>Varnish cache server</p> </body>
 // +build android /* * Copyright (C) 2021 The "MysteriumNetwork/node" Authors. * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by
 * @deprecated since 2.0.0, replaced by {@link Accumulo#newClient()} */ @Deprecated public class ClientConfiguration extends CompositeConfiguration { private static final Logger LOG = LoggerFactory.getLogger(ClientConfiguration.class); public static final String USER_ACCUMULO_DIR_NAME = ".accumulo";
 with ctx.new() as orderctx: orderctx.expr_exposed = False # In ORDER BY we compile ir.Set as a subquery: #    SELECT SetRel.value FROM SetRel) subq = relgen.set_as_subquery( expr.expr, as_value=True, ctx=orderctx)
 functools.partial(self._on_title_changed, tab)) tab.icon_changed.connect( functools.partial(self._on_icon_changed, tab)) tab.search_match_changed.connect( functools.partial(self._filter.search_match_changed, tab)) tab.pinned_changed.connect( functools.partial(self._on_pinned_changed, tab)) tab.load_progress.connect(
 plugin.UpdateChainAndProcess(parser_mediator, registry_key) except (IOError, dfwinreg_errors.WinRegistryValueError) as exception: parser_mediator.ProduceExtractionError( 'in key: {0:s} with error: {1!s}'.format(registry_key.path, exception)) def _NormalizeKeyPath(self, key_path): """Normalizes a Windows Registry key path.
 g.edata[EID] = eid_tensor return g def sample_neighbors(dist_graph, nodes, fanout, edge_dir='in', prob=None, replace=False, local=True): """Sample from the neighbors of the given nodes from a distributed graph.
 $widget_key = $wp_widget_factory->get_widget_key( $attributes['idBase'] ); if ( '' === $widget_key ) { return ''; }
 if ($this->allLocales === null) { $this->allLocales = []; foreach ($this->domain->getAll() as $domainConfig) { $this->allLocales[$domainConfig->getLocale()] = $domainConfig->getLocale(); } }
 // Add browser classes. // We have to do this here since admin bar shows on the front end. $class = 'nojq nojs'; if ( $is_IE ) { $class.='ie9'; } elseif ( wp_is_mobile() ) { $class.='mobile'; }
 return this; } public ConfigBuilder select(List<String> columns) { conf.setStrings(COLUMN_PROJECTIONS, columns); return this; }
 if err!= nil { _ = p2ps.Disconnect(overlay) logger.Debugf("addressboook error persisting %s %s: %v", aa, overlay, err) logger.Errorf("error persisting node %s", aa) return }
 if o.err!= nil { return nil, o.err } return fakeAck(nil), nil } func stubTime() func() {
 f"'{text_non_ascii_str}'!= '{ref_text_non_ascii_literal[idx]}'" @pipeline_def(batch_size=alias_batch_size, device_id=0, num_threads=4) def nemo_pipe(nemo_op, path, read_text, read_sample_rate, dtype, downmix): if read_sample_rate: audio, sr = nemo_op(manifest_filepaths=path, read_sample_rate=read_sample_rate,
 * @since 2.0.0 */ public interface IteratorConfiguration { String getIteratorClass(); String getName(); int getPriority(); Map<String,String> getOptions(); }
 storageResult.match( [&](expected::Value<std::unique_ptr<ametsuchi::MutableStorage>> &_storage) { storage = std::move(_storage.value); }, [](expected::Error<std::string> &error) { log_->error("cannot create storage: {}", error.what()); } ); if (not storage) { return; } auto chain = blockLoader_->retrieveBlocks(signature.pubkey);
 } candies = inventory.candies().get(pokemon.pokemon_id).quantity threshold = pokemon_config.get('candy_threshold', False) if( candies > threshold  ): self.emit_event( 'ignore_candy_above_thresold', level='info',
 Project        string                    `json:"project"` // HostedZoneName is an optional field that tells cert-manager in which // Cloud DNS zone the challenge record has to be created. // If left empty cert-manager will automatically choose a zone. // +optional HostedZoneName string `json:"hostedZoneName,omitempty"` }
 label = 'order' name = 'oscar.apps.order' verbose_name = _('Order')
 { $token = Yii::app()->securityManager->generateRandomString($iTokenLength); if ($token === false) { throw new CHttpException(500, gT('Failed to generate random string for token. Please check your configuration and ensure that the openssl or mcrypt extension is enabled.')); } $token = str_replace(array('~', '_'), array('a', 'z'), $token); $event = new PluginEvent('afterG
 $parameters['referer'] = base64_encode($request->getRequestUri()); } throw new RedirectResponseException(\System::getContainer()->get('router')->generate('contao_backend_login', $parameters, UrlGeneratorInterface::ABSOLUTE_URL)); } /**
 self.client.timeout = dehumanize_time(self.settings.get("timeout", self.client.timeout)) self.send_interval = dehumanize_time(self.settings.get("send-interval", self.send_interval)) self.send_monitoring = self.settings.get("send-monitoring", self.send_monitoring) self.monitoring_buffer_limit = self.settings.get("monitoring-buffer-limit", self.DEFAULT_MONITORING_BUFFER_LIMIT) self.browser_open = self.settings.get("browser-open", sel
 var referencesToInclude = matches.SelectMany(m => m.ReferencesToInclude).Distinct().ToList(); if (referencesToInclude.Count > 0) { // construct the expression typeAndId = <Include1Type, Include1Id> OR  typeAndId = <Include2Type, Include2Id> OR... // NOTE: We use Expression.And here because the Expression.Or takes up to 3 arguments, //       but we may 
 const response = await this.localTimeDifferenceRequest.execute().promise; runInAction('update time difference', () => (this.localTimeDifference = response)); } catch (error) { // If the request fails, we will fall back to the default value. runInAction('update time difference', () => (this.localTimeDifference = this.ALLOWED_TIME_DIFFERENCE + 1)); } } }
 obj_type = TRACER_TO_REAL_TYPE_MAP[type(obj)] real_type = TRACER_TO_REAL_TYPE_MAP[tracer_type] raise errors.InvalidReferenceError( f'{str(refname)!r} exists, but is a {obj_type.get_schema_class_displayname()!r},'f'not a {real_type.get_schema_class_displayname()!r}', context=sourcectx, )
 DefaultLdflags     string     `help:"Linker flags passed to all C++ rules.\nBy default this is empty." var:"DEFAULT_LDFLAGS"` PkgConfigPath      string     `help:"Custom PKG_CONFIG_PATH for pkg-config.\nBy default this is empty." var:"PKG_CONFIG_PATH"` Coverage           bool       `help:"If true (the default), coverage will be available for C and C++
 it('config set should work', function (done) { suite.execute('webapp config set %s %s --phpversion %s --json', groupName, sitename, updatedPHPValue, function (result) { result.exitStatus.should.equal(0); result.stdout.should.contain('PHP version changed to: 7.0.0'); done(); });
 // snippet-sourcetype:[snippet] // snippet-sourcedate:[2019-01-10] // snippet-sourceauthor:[AWS] /** * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 logCtx.Info("Finding TC program ID") key := ap.Iface + "_" + string(ap.Hook) if ExistsTCOpts() { optsLock.RLock() defer optsLock.RUnlock() if val, ok := optsMap[key]; ok { progId, err := libbpf.GetProgID(ap.Iface, string(ap.Hook), val) if err!= nil { return "", errors.New("failed to find TC program")
 'FUCHSIA_DIR', os.path.join(self.build_dir, self.FUCHSIA_DIR_REL_PATH)) environment.set_value('FUCHSIA_RESOURCES_DIR', self.build_dir) # Does not support partial unpack. assert environment.get_value('UNPACK_ALL_FUZZ_TARGETS_AND_FILES'), \ "Fuchsia fuzz targets are not unpacked" result = super(FuchsiaBuild, self).setup() if not result: return result
 ﻿using System; using System.Collections.Generic; using System.Collections.ObjectModel; using System.Linq; using System.Linq.Expressions; using System.Reflection;
 cout << cmd << endl; if (!env.empty()) { #ifdef __HIP_PLATFORM_HCC__ setenv("HIP_VISIBLE_DEVICES", env.c_str(), 1); #else setenv("CUDA_VISIBLE_DEVICES", env.c_str(), 1); #endif cout << "set env HIP_VISIBLE_DEVICES = " << env.c_str() << endl; // verify if the environment variable is set
 // https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-rpc.md import ( "log" "go.opentelemetry.io/otel/plugin/grpctrace"
 try { log.debug("Basal profile " + profile + ": " + String.format("%02d", index) + "h: " + pump.pumpProfiles[profile][index]); } catch (Exception e){ log.error("Unhandled exception", e); } } }
 return nil, err } err = a.BasicStore.CreateTx(ctx, tx, newUser.ID, input.Username, input.Password) if err!= nil { return nil, err }
 settings, _ = crypt.Argon2idSettings(memory, iterations, parallelism, keyLength, salt) } else if algorithm == HashingAlgorithmSHA512 { settings = fmt.Sprintf("$6$rounds=%d$%s", iterations, salt) } else { return "", fmt.Errorf("algorithm not supported") } return settings }
 # Internal Cell @Normalize def setups(self, to:Tabular): store_attr(means=dict(getattr(to, 'train', to).conts.mean()), stds=dict(getattr(to, 'train', to).conts.std(ddof=0)+1e-7)) return self(to) @Normalize
 for k in range(K)] B = [experiment('xentropy', label_type='binary', data=DATA)['time'] for k in range(K)] print(f"Best `binary` time: {min(A)}") print(f"Best `xentropy` time: {min(B)}")
 cmd("spt"); arg("p", deviceType); arg("t", token); tag = client->reqtag; }
 end # Wire up all pod target dependencies to aggregate target. aggregate_target.pod_targets.each do |pod_target| if pod_target_installation_result = pod_target_installation_results[pod_target.name] pod_target_native_target = pod_target_installation_result.native_target aggregate_native_target.add_dependency(pod_target_native_target) configure_app_extension_api_only_to_native_target(pod_target_native_target) end # Hit the cache cached_dependency = metadata_cache.target_label_
 * * @param bool $do_preload_links Whether to enable preload links. Default is true. */ if (! (bool) apply_filters( 'rocket_do_preload_links', true ) ) { //phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound return; }
 mgr *lifecycle.Manager db     *sql.DB l      net.Listener events *sqlutil.Listener cooldown *cooldown
 } // getBlocks uses ProtocolGetBlocks to return up to n blocks, traversing the // skiplist forward from id. It contacts a random subset of the nodes in the // roster, in order to find an answer, even in the case that a few nodes in // the network are down. func (s *Service) getBlocks(roster *onet.Roster, id SkipBlockID, n int) ([]*SkipBl
 } @Override public Long sequenceNumber() { return replaceSequenceNumber; }
 return glnx_throw (error, "Checksum mismatch for package %s", nevra); } return get_header_variant (pkgcache, cache_branch, out_header, cancellable, error); } static gboolean
 restrictedSigner := darc.NewSignerEd25519(nil, nil) unrestrictedSigner := darc.NewSignerEd25519(nil, nil) // spawn a new secure darc with spawn:insecure_darc - fail log.Info("spawn a new secure darc with spawn:insecure_darc - fail") secDarc := gDarc.Copy()
 require 'travis/build/script/csharp' require 'travis/build/script/d' require 'travis/build/script/dart' require 'travis/build/script/erlang' require 'travis/build/script/elixir' require 'travis/build/script/go'
 PropagationData peers; std::transform( ids.begin(), ids.end(), std::back_inserter(peers), [](auto &s) { return makePeer(s, shared_model::interface::types::PubkeyType{}); }); return peers; }
 * @return object                 class instance object */ public function load_data_object( $name = '', $data = 0, $optional_data = null ) { // User constructors directly. _deprecated_function( __METHOD__, '3.3.0', 'new Sensei_Grading_{$name}' ); // Load Analysis data $object_name = 'Sensei_Grading_'. $name;
 return (RET) attach( flatMapUsingServiceAsyncBatchedTransform( transform, operationName, serviceFactory, BATCH_SIZE, maxBatchSize, flattenedFn), fnAdapter); }
 wl_container_of(listener, roots_xdg_surface, commit); struct roots_view *view = roots_xdg_surface->view; bool centered = view_center(view); if (centered && view->view->offscreen) { wl_list_remove(&listener->link); } }
 parent::__construct($controller, $id); Yii::app()->loadHelper('export'); } public function survey()
 maximum_matching = hopcroft_karp_matching def minimum_weight_full_matching(G, top_nodes=None, weight='weight'): r"""Returns a minimum weight full matching of the bipartite graph `G`. If multiple minimum weight full matchings exist, this function returns one of them. Let :math:`G = ((U, V), E)` be a weighted bipartite graph with real weights
 return fmt.Errorf("start height must be less than or equal to end height") } // check if range exceeds maximum but only if end is not equal to special value which is not known yet if g.EndHeight-g.StartHeight+1 > MaxAllowedHeights && g.EndHeight!= FinalHeight && g.EndHeight!= SealedHeight { return fmt.Errorf("height range %d exceeds maximum allowed of %d", g.EndHeight-g.StartHeigh
 # explicit relative cimport # error of going beyond top-level is handled in cimport node relative_to = self while relative_level > 0 and relative_to and self._is_package_scope_or_module(): relative_to = relative_to.parent_module relative_level -= 1 elif relative_level!= 0:
 self.nodeMsgRouter.routes[Request] = self.processNodeRequest self.nodeAuthNr = self.defaultNodeAuthNr() def getPoolConfig(self): return PoolConfig(self.configLedger)
 return entry.getValue(); } // We did not find any non-virtual interfaces, so choose the first virtual one if it exists if (!virtualInterfaces.isEmpty()) { for (Entry<String, InterfaceAssociation> entry : virtualInterfaces.entrySet()) { return entry.getValue();
 public const string PeriodDescRegex = @"(?<desc>pm|am|p\.m\.|a\.m\.|p|a)"; public const string PeriodPmRegex = @"(?<pm>afternoon|evening|in the afternoon|in the evening|in the night)s?"; public const string PeriodAmRegex = @"(?<am>morning|in the morning)s?"; public static readonly strin
 } #endif double GetAngle( const Point & start, const Point & target ) { const int dx = target.x - start.x; const int dy = target.y - start.y;
 movePointsLeft = _remainingMovePoints - consumedMovePoints; } else { movePointsLeft = (_maxMovePoints - ( consumedMovePoints - _remainingMovePoints )) % _maxMovePoints; } lastMove = movePointsLeft >= srcTilePenalty && movePointsLeft <= dstTilePenalty;
 if self.selection_expr is None: return data if not isinstance(data, Dataset): data = Dataset(data) return data[self.selection_expr.apply(Dataset(data))]
 from scapy.arch.consts import LOOPBACK_NAME from scapy.config import conf,ConfClass from scapy.error import warning, Scapy_Exception, log_runtime from scapy.data import * from scapy.arch import pcapdnet from scapy.arch.pcapdnet import * from scapy.util import * def sndrcv(pks, pkt, timeout = 2, inter = 0, verbose=None, chai
 module.exports = { isLocalPath: function (templatePath) { return /^[./]|^[a-z|A-Z]:/.test(templatePath) }, getTemplatePath: function (templatePath) {
 */ public function buildRelations() { $this->addRelation('Export', '\\Thelia\\Model\\Export', RelationMap::ONE_TO_MANY, array('id' => 'export_category_id', ), null, null, 'Exports'); $this->addRelation('ExportCategoryI18n', '\\Thelia\\Model\\ExportCategoryI18n', RelationMap::ONE_TO_MANY, array('id' => 'id', )
.title(R.string.title_clear_history_dialog).content(R.string.text_clear_history_dialog).onPositive((dialog, which) -> { historyProductDao.deleteAll(); productItems.clear(); recyclerHistoryScanView.getAdapter().notifyDataSetChanged(); })
 @partner.invited! end private  def partner_attributes(partner) partner.attributes.merge({ organization_email: partner.organization.email }).with_indifferent_access end
 * v5. */ void switchToV5Framing() { // We want to do this on the event loop, to make sure it doesn't race with // incoming requests assert channel.eventLoop().inEventLoop();
 from. import carafe_cuda, carafe_naive_cuda class CARAFENaiveFunction(Function): @staticmethod def forward(ctx, features, masks, kernel_size, group_size, scale_factor):
 return "KeybaseDaemonRPC" } func (k *KeybaseDaemonRPC) registerProtocol(p rpc.Protocol) error { k.log.Debug("registering protocol %q", p.Name) err := k.server.Register(p) switch err.(type) { case nil, rpc.AlreadyRegisteredError: return nil
 _logger.LogWarning(ex, "Failed to delete the secret."); } } catch (Exception ex) { // The job has encountered an error it cannot recover from.
 parent (Resource): The parent Resource. lifecycle_state (LifecycleState): The lifecycle state of the bucket. lifecycle (list): A list of bucket lifecycle rules. Each item is a dict containing an action and conditions when this action should be taken. """ super(Bucket, self).__init__( resource_id=bucket_id,
 "sortable" => true, "switchable" => true, "title" => $field->name, 'formatter' => 'customFieldsFormatter', 'escape' => true, 'class' => ($field->field_encrypted == '1')? 'css-padlock' : '', 'visible' => true, ]; }
 # TODO Consider not installing the db drivers, or putting them in extras.'rethinkdb~=2.3',  # i.e. a version between 2.3 and 3.0 'pymongo~=3.4', 'pysha3==1.0.0', 'cryptoconditions>=0.5.0','statsd>=3.2.1', 'python-rap
 # extensions on incarnation change, we need to maintain its state. # Setting the status as Initialize here. This would be overridden as soon as the first GoalState is processed # (once self._extension_processing_allowed() is True). self.__gs_aggregate_status = GoalStateAggregateStatus(status=GoalStateState.Initialize, seq_no=-1, code=GoalStateAggregateStatusCodes.Success, message="Initializing new GoalState")
 throw new InvalidOperationException("Current does not exist"); } ReadOnlySpan<byte> buffer = new ReadOnlySpan<byte>(_buffer, 0, _index); uint ret; bool succeeded = Utf8Helper.TryDecodeCodePointBackwards(buffer, out ret, out _currentLenCache); if (!succeeded || _currentLenCache == 0) {
 case string: idArg = sqlutil.UUIDArray{t} case int: idArg = sqlutil.IntArray{t} case []int: idArg = sqlutil.IntArray{t} default: return errors.Errorf("invalid id type %T", t) }
 // This handler is registered for tests in which the only authorized user is // "okuser" upstreamHandler := func(w http.ResponseWriter, r *http.Request) (int, error) { remoteUser, ok := r.Context().Value("remote_user").(string) if!ok { t.Errorf("Test %d: expecting remote user to be a string, got %#v", i, r.Context().Value("remote_user")) return } 
 for _, r := range results { id, err := r.Get(ctx) if err!= nil { // Prints the fatal error that caused the publisher to terminate. fmt.Printf("Publisher client stopped due to error: %v\n", publisher.Error()) break } else if id!= "" { fmt.Printf("Published a message with a message ID: %s\n", id) } }
 if (StringUtils.isNotBlank(sparkUploadFiles)) { sb.append("--files ").append(sparkUploadFiles).append(" "); } sb.append("--name job_step_%s "); sb.append("--jars %s %s %s"); String cmd = String.format(Locale.ROOT, sb.toString(), hadoopConf, sparkSubmitCmd, getId(), jars, kylinJobJar,
 'page'. $this->num, 'post_type', 'taxonomy', 'action', ), $this->exclusion() );
 foreach ( $files as $file ) { rocket_rrmdir( $file, get_rocket_i18n_to_preserve( $lang ) ); } } catch ( InvalidArgumentException $e ) { // No logging yet. return; }
 // Return true when all valid troops have the same ID, or when there are no troops bool Troops::AllTroopsAreTheSame( void ) const { int first_troop_id = UNKNOWN; for ( const Troop * troop : *this ) { if ( troop->isValid() ) { if ( first_troop_id == UNKNOWN ) { first_troop_id = troop->GetID(); } else if (
 #if defined(_WIN32) bool read = false, write = false; if (info.checkEvent(read, write)) { curl_multi_socket_action(curlm[d], info.fd, (read? CURL_CSELECT_IN : 0)
 } memset(&listener->ssl, 0, sizeof(listener->ssl)); listener->quic.qpack = (h2o_http3_qpack_context_t){.encoder_table_capacity = 4096 /* our default */}; listener->proxy_protocol = proxy_protocol; listener->tcp_congestion_controller = h2o_iovec_init(NULL, 0);
 return true; } private boolean hasDuplicateAuthors( final Collection<SignedData<RoundChangePayload>> roundChangeMsgs) { final long distinctAuthorCount = roundChangeMsgs.stream().map(SignedData::getAuthor).distinct().count();
 return reflectiveSource(handler, handler.getDef().methods, handlerClass); } /** * Creates a {@link RelMetadataProvider} that uses reflection to access the methods of a * {@link MetadataHandler}. */ private static RelMetadataProvider reflectiveSource( final MetadataHandler target, final ImmutableList<Method> methods, final Class<? extends MetadataHandler<?>> handlerClass) {
 * * @param int     $post_id The post ID. * @param WP_Post $post    WP_Post object. * @return array           Array with all URLs which need to be purged. */ function rocket_get_purge_urls( $post_id, $post ) { $purge_urls = [];
 using System; using System.Collections.Generic; using System.Linq; using System.Text; using MvvmCross.Logging; namespace Playground.Forms.Uwp { public class EmptyVoidLog : IMvxLog { public bool Log(MvxLogLevel logLevel, Func<string> messageFunc, Exception exception = null, params object[] formatParameters)
 } }); AlertDialog dialog = builder.create(); dialog.show(); } private void handleDisconnectDevice(final long deviceId) {
 import ( "encoding/json" "fmt" "github.com/golang/protobuf/proto" "github.com/hashicorp/hcl/v2"
 row['run_count'] } bigquery_data.append(big_query.Insert(row=bigquery_row, insert_id=None)) if bigquery_data: client = big_query.Client(dataset_id='main', table_id='fuzz_strategy_experiments') try: client.insert(bigquery_data) except Exception as e: logging.error("Error inserting data into BigQuery: %s", e) def _query_and_upload_strategy_probabilities():
 Status ClusterAdminClient::MasterLeaderStepDown( const string& leader_uuid, const string& new_leader_uuid) { auto master_proxy = std::make_unique<ConsensusServiceProxy>(proxy_cache_.get(), leader_addr_); return LeaderStepDown(leader_uuid, yb::master::kSysCatalogTabletId, new_leader_uuid, &master_proxy); } CHECKED_STATUS ClusterAdminClient::LeaderStepDownWithNewLeader(
 * @since 5.5 */ public void setCookieMaxAge(int cookieMaxAge) { Assert.isTrue(cookieMaxAge!= 0, "cookieMaxAge cannot be zero"); this.cookieMaxAge = cookieMaxAge; }
 logger = logging.getLogger(__name__) monitor = Monitor() class Block(object):
 anyBoolean(), fileArgumentCaptor.capture()); assertThat(fileArgumentCaptor.getValue()).isEqualTo(file); assertThat(commandOutput.toString()).isEmpty(); assertThat(commandErrorOutput.toString()).isEmpty();
 return defaultPenalty; } int AIWorldPathfinder::getFogDiscoveryTile( const Heroes & hero, const bool considerWhirlpools, const bool isReevaluate ) { // paths have to be pre-calculated to find a spot where we're able to move reEvaluateIfNeeded( hero, considerWhirlpools, isReevaluate ); const int start = hero.GetIndex(); const int scouteValue = hero.GetScoute();
 } // Returns a collection that returns the latest five, ten, or all posts from the Redshift table. public String getPosts(String lang, int num) { try {
 j.jServer.deferLog.LazyTrace(ctx, "jMDOps: GetRange %s %d-%d done (err=%v)", id, start, stop, err) }() return j.getRange(ctx, id, NullBranchID, Merged, start, stop, lockBeforeGet, j.MDOps.GetRange) }
 GetBlocksReply chan []*SkipBlock DB             *SkipBlockDB replies        int closing        chan struct{} } // NewProtocolGetBlocks prepares for a protocol that fetches blocks.
 """ return self._screen @expect_types(term=ComputableTerm, name=str) def add(self, term, name, overwrite=False, **kwargs): """ Add a column.
 def validateFloat(value): try: return isinstance(value, float) except ValueError: raise MlflowException( "Value should be a float, but was %s" % (str(value))) def validateInteger(value):
 Debug.Log("NetworkManager: added default Transport because there was none yet."); } #if UNITY_EDITOR UnityEditor.Undo.RecordObject(this, "Added default NetworkAuthenticator"); #endif }
 private String outerName; private Map<String, String> packages = new HashMap(); private AnnotationVisitor annotationVisitor = new PMDAnnotationVisitor(this);
 flashes: service(), features: service(), auth: service(), classNames: ['repo-main-tools'], classNameBindings: ['labelless','mobilelabels'],
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4431-SEA 1645540644 4234292398</p> <hr> <p>Varnish cache server</p> </body>
 if (process.env.VUE_CLI_TEST) { return true } if (_hasPnpm4orLater!= null) { return _hasPnpm4orLater } try {
 Field[] fields = proxyIn.getDeclaredFields(); for (Field field : fields) { int modifiers = field.getModifiers(); if (Modifier.isFinal(modifiers) || Modifier.isStatic(modifiers)) { continue; } Object value = decorator.decorate(page.getClass().getClassLoader(), field); if (value!= null) {
 */ protected function writeToErrorLog(): void { /** @var ErrorRendererInterface $renderer */ $renderer = $this->callableResolver->resolve($this->logErrorRenderer); $error = $renderer($this->exception, $this->logErrorDetails); $error.= "\nView in rendered output by enabling the \"displayErrorDetails\" setting.\n"; $this->logError($error); }
 try: proc = next(w for w in self._pool if w.pid == pid) except StopIteration: logger.critical("process with pid=%s already exited :(  this will be handled elsewhere.", pid) return proc.inqW_fd not in self._fileno_to_inq assert proc.inqW_fd not in self._all_inqueues
 Resources:     transformResources(request.Resources), } log.G(m.ctx).Info("handling Start request", zap.Any("req", request)) var publicKey ssh.PublicKey if len(request.PublicKeyData)!= 0 { var err error k, _, _, _, err := ssh.ParseAuthorizedKey([]byte(request.PublicKeyData))
 events.trigger(instance, "playbackstop", [state]); var state = instance.lastPlayerData.PlayState || {}; var volume = state.VolumeLevel || 0.5; var mute = state.IsMuted || false; // Reset this so the next query doesn't make it appear like content is playing. instance.lastPlayerData = {};
 Object.defineProperty(proto, key, { configurable: false, get() { return this['UNSAFE_' + key]; }, // This set is only used if a user sets an unsafe lifecycle like cWU // after setting a lifecycle like UNSAFE_cWU. I doubt anyone // actually does this in practice so not testing it /* istanbul ignore next */
 def _imptcs_to_numpy(X, impcts_dict): cols = ['Column_' + str(i) for i in range(X.shape[1])] imptcs = [impcts_dict.get(col, 0.) for col in cols] return np.array(imptcs) X, y = load_breast_cancer(True)
 if(count($bcc_recipients) > 0) { $bcc_recipients = implode(', ', $bcc_recipients); $bcc_form_val = implode(',', $bcc_form_val); eval("\$bcc = \"".$templates->get("private_read_bcc")."\";"); }
 SendMessageContext sendMessageContext, ChannelHandlerContext ctx, int queueIdInt) { putMessageResult.thenAcceptAsync((r) -> handlePutMessageResult(r, response, request, msgInner, responseHeader, sendMessageContext, ctx, queueIdInt), this.brokerController.getSendMessageExecutor()); return null; } private boolean handleRetryAndDLQ(SendMessageRequestHeader requestHeader, RemotingCommand response,
 self.fail('KeyError should be caught') def test_get_coord_axes_bad_dims(self): '''Test that ValueError is raised when a numpy array with incorrect dimensions is fed to get_coord_axes().''' with self.assertRaises(ValueError): PSA.get_coord_axes(np.zeros((5,5,5,5)))
 // table, since we must write a value for each row. If the column is not nullable, a default value must be provided. // // Returns an error if the column added conflicts with the existing schema in tag or name. func AddColumnToTable(ctx context.Context, tbl *doltdb.Table, tag uint64, newColName string, typeInfo typeinfo.TypeInfo, nullable Nullable, defaultVal types.Value, order *Col
 // now that we know the container instance ARN, we can build out the doctor // and pass it on to ACS and TACS seelog.Warnf("Setting up the doctor healthchecks.") doctor, doctorCreateErr := agent.newDoctorWithHealthchecks(agent.cfg.Cluster, agent.containerInstanceARN) if doctorCreateErr!= nil { seelog.Warnf("Error starting doctor, healthchecks won't be running: %v", err) } // Beg
 * * @ORM\Entity(repositoryClass="Kunstmaan\MediaBundle\Repository\MediaRepository") * @ORM\Table(name="kuma_media", indexes={ *      @ORM\Index(name="idx_media_name", columns={"name"}), *      @ORM\Index(name="idx_media_deleted", columns={"deleted"}) * }) * @ORM\HasLifecycleCallbacks */
 """ h_rel = self.rel_emb(rels) proj_rel = self.rel_project(rels).reshape(-1, self.nfeats, self.rfeats) h_head = (h_head.unsqueeze(1) @ proj_rel).squeeze(1) h_tail = (h_tail.unsqueeze(1) @ proj_rel).squeeze(1) return - torch.norm(h_head + h_rel - h_tail, p=self.p, dim=-1)
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4432-SEA 1645537635 2090099837</p> <hr> <p>Varnish cache server</p> </body>
 { // The original CDRMessage buffer (msg) now points to the proprietary temporary buffer crypto_msg_. // The auxiliary buffer now points to the propietary temporary buffer crypto_submsg_. // This way each decoded sub-message will be processed using the crypto_submsg_ buffer. msg = auxiliary_buffer; auxiliary_buffer = &crypto_submsg_; }
 while (next && next->playback_short) next = playlist_entry_get_rel(next, -1); // Always allow jumping to first file if (!next && mpctx->opts->loop_times == 1) { next = playlist_get_first(mpctx->playlist); while (next && next->playback_short) next = playlist_entry_get_rel(next, 1); } } if (!next && mpctx->opts->lo
 def check_import(self, lib_path): import tensorflow as tf print("Importing the TF library to check for errors") try: tf.load_op_library(lib_path)
 force_search = False if not utils.supports_selection(): sel = False text = utils.get_clipboard(selection=sel, text_type='plain') text_urls = [u for u in text.split('\n') if u.strip()] if (len(text_urls) > 1 and not urlutils.is_url(text_urls[0]) and urlutils.get_path_if_valid(
 import org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration; import org.springframework.boot.autoconfigure.web.HttpMessageConverters; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.cloud.dataflow.server.controller.StreamDefinitionController; import org.springframework.cloud.dataflow.server.repository.InMemoryStreamDefinitionRepository;
 /** * Checks if the given URL object belongs to the home route `/` * or has a `.html` extension. * * @param {URL} url *
 TelemetryEventParam(CommonTelemetryEventSchema.TaskName, threading.current_thread().getName()), TelemetryEventParam(CommonTelemetryEventSchema.KeywordName, '')] if event.eventId == TELEMETRY_EVENT_EVENT_ID and event.providerId == TELEMETRY_EVENT_PROVIDER_ID: # Currently only the GuestAgentExtensionEvents has these columns, the other tables dont have them so skipping # this data in those tables. # By default, if no eventId/provider
 } $renderer = $this->determineRenderer(); $body = call_user_func($renderer, $this->exception, $this->displayErrorDetails); $response->getBody()->write($body); return $response; }
 self.events.emit('code-generator-ready'); }); }; const cargo = async.cargo((tasks, callback) => { generateCode(tasks[tasks.length - 1]); self.events.once('outputDone', callback); }); const addToCargo = function () { cargo.push(); }; this.events.on('contractsDeployed', addToCargo);
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4459-SEA 1645538750 1513358699</p> <hr> <p>Varnish cache server</p> </body>
 *     } * }); * * @param {string|Realm.Sync.SubscriptionOptions} options - an optional name or configuration object for the subscription. *   The configuration object must contain `name` and the optional properties `update` and `timeToLive`. *   If `update` is true the query on an existing subscription will be updated. If `timeToLive` is set, it indicates *   to Realm for how long 
 Integer.toString(mvStore.getFillRate())); add(rows, "info.CHUNKS_FILL_RATE", Integer.toString(mvStore.getChunksFillRate())); long size = -1; try { size = fs.getFile().size(); } catch (IOException e) { LOG.warn("Can not get size", e); } add(rows, "info.FILE_SIZE", Long.toString(size)); add(rows, "info.CHUNK_COUNT", Long.toString(mvStore.get
 self.g.set_n_repr({'h' : features}) for layer in self.layers: self.gcn_layer(layer, self.dropout) return self.g.pop_n_repr('h') def main(args): # load and preprocess dataset data = load_data(args) features = torch.FloatTensor(data.features)
 KernelEvents.Add(keyword); } // TODO: Rename this to something more generic, like KernelKeyword. public enum KernelKeyword { Empty,
 printExitLogs () { if (this.exitLogs.length) { this.exitLogs.forEach(({ id, msg, type }) => { const shortId = getIdShortName(id) const logFn = logTypes[type] if (!logFn) { logger.error(`Invalid api.exitLog type '${type}'.`, shortId)
 def abbreviate(words): regex = '[A-Z]+[\'a-z]*|[\'a-z]+' return ''.join(word[0].upper() for word in re.findall(regex, words))
 public Regex RelativeMonthRegex { get; } //The following three regexes only used in this configuration //They are not used in the base parser, therefore they are not extracted //If the german date parser need the same regexes, they should be extracted public static readonly Regex RelativeDayRegex= new Regex( DateTimeDefinitions.RelativeDayRegex, RegexOptions.IgnoreCase | RegexOptions.Singleline);
 return &Bucket{b: b} } // ReadBlob is a shortcut for creating a Reader via NewReader and reading the entire blob. func (b *Bucket) ReadBlob(ctx context.Context, key string) ([]byte, error) { r, err := b.NewReader(ctx, key) if err!= nil { return nil, err
 URL:  r.URL, } html, err := md.Process(m, fpath, body, ctx) if err!= nil { return http.StatusInternalServerError, err }
 ctypes.c_int(end_iteration))) return self def _load_params(self): """Loads model parameters by calling LGBM_BoosterGetConfig.""" buffer_len = 2 << 20 tmp_out_len = ctypes.c_int64(0)
 #endregion // Since v5.3 [Obsolete("This method has no more usages and will be removed in a future version. Please use GetUninitializedLazyProperties extension method instead.")] public ISet<string> UninitializedFields { get { return uninitializedFields; }
 def _adjust_cbar(self, cbar, label, dim): noalpha = math.floor(self.style[self.cyclic_index].get('alpha', 1)) == 1 for i in ['clabel', 'labels']: label = i labelsize = self._fontsize(label, common=False).get('fontsize') if labelsize is not None: break
 } // NewNATMapper is exposed for testing func (NATMapper) NewConntracker() (*NATMapper, error) { ct, err := NewConntracker(true, "--any-nat") if err!= nil { return nil, err } return &NATMapper{ct}, nil } func toMapping(f Flow) *endpointMapping {
 return null; } if (isLocalFile(loadingUrl) || (bridge.getServerUrl() == null &&!bridge.getAppAllowNavigationMask().matches(loadingUrl.getHost())) || loadingUrl.getHost().equals(bridge.getHost())) { Logger.debug("Handling local request: " + request.getUrl().toString()); return handleLocalRequest(request, handler); } else {
 */ public function enqueue_styles() { wp_enqueue_style('sensei-settings-api', Sensei()->plugin_url. 'assets/css/settings.css', '', Sensei()->version ); } // End enqueue_styles()
 date, key)); var httpRequestMessage = new HttpRequestMessage( HttpMethod.Get, $"{_host}/dbs/{_dataStoreConfiguration.DatabaseId}/colls/{_collectionConfiguration.CollectionId}/pkranges") {
 public void onReceive(Context context, Intent intent) { if (NetworkUtils.isInternetConnectionEstablished(NearbyActivity.this)) { refreshView(LOCATION_SIGNIFICANTLY_CHANGED); } } };
 * Props data to use when rendering a single gift card component. * @typedef {Object} GiftCardProps * * @property {Object} removeGiftCardWithCode Function for removing a gift card associated with the code passed into this talon. */
 buf.seek( offset2 ); std::vector<std::string> tags = StringSplit( buf.toString( length2 ), "\n" ); for (auto & tag : tags) { if ( encoding.empty() ) encoding = get_tag( *it, tag1, sep1 );
 continue; } $value = $this->get_submitted_setting_value( $field )?: $field['default']; if ( isset( $value ) ) { add_post_meta( $quiz_id, '_'. $field['id'], $value ); }
 * @return map that contains accessToken, null if acessToken is empty. */ protected Map<String, String> getSecurityHeaders() { Map<String, String> spasHeaders = new HashMap<String, String>(2); spasHeaders.put(Constants.ACCESS_TOKEN, this.getAccessToken()); return spasHeaders; }
 constructor(props: Props) { super(props); const { asset } = props; const { decimals } = asset; this.state = { decimals,
 yield {'resource_id': violation.resource_id,'resource_type': violation.resource_type,'resource_name': violation.resource_name,'resource_parent': violation.resource_parent, 'full_name': violation.full_name, 'rule_index': violation.rule_index, 'rule_name': violation.rule_name,
 return gd.value.AsNumber(), gd.timestamp, nil } // SynchronizedCopy atomically saves the current value. func (g *Aggregator) SynchronizedCopy(oa export.Aggregator, _ *metric.Descriptor) error { o, _ := oa.(*Aggregator) if o == nil {
 } return nil } // fixes #1739 Get rid of TYPO3 trustedHostsPattern warning
 @Override public void onFailure(Throwable t) { // downgrade to system.peers if we get an invalid query or server error as this // indicates the peers_v2 table does not exist. if (t instanceof InvalidQueryException || t instanceof ServerError && t.getMessage().equals("table peers_v2 does not exist")) { isPeersV2 = false; MoreFutures.propagateFuture(peersFuture, selectPeersFuture(connection)); } else {
 Example ------- To group atoms with the same residue name and mass together:: >>> ag.groupby('resnames','masses') To group atoms with the same residue name together:: >>> ag.groupby('resnames')
 Notes ----- Unbatching will break each field tensor of the batched graph into smaller partitions. For simpler tasks such as node/edge state aggregation, try to use readout functions.
 const day = match[3]; const filename = match[4]; slug = `blog/${year}/${month}/${day}/${filename}`; const date = new Date(year, month - 1, day);
 node_pubkey (str): base58 encoded public key. Returns: The id of the last block the node has voted on. If the node didn't cast any vote then the genesis block id is returned. """
 @outcome = Mongo::CRUD::Outcome.new(test['outcome']) end @expected_results = @operations.map do |o| if o.key?('error') && o['error'] {'error' => true}
 * @param callback the callback {@link Consumer} * @return the callback to enable fluent programming */ public Consumer<Value<T>> addOnSetNextValue(Consumer<Value<T>> callback); /** * Removes an onSetNextValue callback.
 results (dict): Result dict from loading pipeline. Returns: dict: Padded results, 'pad_shape', 'pad_fixed_size', 'pad_size_divisor' keys are added into result dict.  The 'pad_shape' key is added with a tuple of shape of padded image. The 'pad_fixed_size' key is added with a boolean value indicating whether the padded image has fixed size or not. The 'pad_size_divisor' ke
 if (!selectedPool ||!selectedWallet || (selectedWallet.delegatedStakePoolId === selectedPool.id || selectedWallet.lastDelegatedStakePoolId === selectedPool.id) ) return 0;
 } // timestamp change->sourceTimestamp = rtps::Time_t(sqlite3_column_double(load_writer_stmt_, 5)); changes.insert(changes.begin(), change); }
 goog.require('goog.userAgent'); goog.require('goog.math.Rect'); /** * Class for a workspace.  This is an onscreen area with optional trashcan, * scrollbars, bubbles, and dragging.
 if context.client_context: headers["X-Amz-Client-Context"] = context.client_context data = json.dumps(json_safe(event)) LOG.debug("Forwarding Lambda invocation to LAMBDA_FORWARD_URL: %s" % config.LAMBDA_FORWARD_URL) result = safe_requests.post(url, data, headers=headers) content = run_safe(lambda: to_str(result.content)) or result.content
 * @param \Shopsys\FrameworkBundle\Model\Pricing\Group\PricingGroup $pricingGroup * @return bool */ public function existsCustomerUserWithPricingGroup(PricingGroup $pricingGroup) { $query = $this->em->createQuery(' SELECT COUNT(u)
 lines = [] output = output_writer.ReadOutput() output = codecs.decode(output, 'utf-8') output = output.split('\n') for line in output: lines.append(line)
 } if fulfillment.type_name == 'threshold-sha-256': subfulfillments = [ _fulfillment_to_details(cond['body']) for cond in fulfillment.subconditions[:FULFILLMENT_THRESHOLD_MAX_DEPTH] ] return { 'type': 'threshold-sha-256', 'threshold': fulfillment.threshold,'subfulfillments': subfulfillments,'max_depth': FULFILLMENT_THRESHOLD_MAX_DEPTH, } raise UnsupportedTy
 const { if (not transactions_) { types::SharedTxsCollectionType result; auto transactions_amount = std::accumulate( std::next(std::begin(batches_)), std::end(batches_), batches_->front().transactions().size(), [](size_t acc_size, decltype(batches_->front()) batch) { return acc_size + batch.transactions().size(); }); result.reserve(transactions_amount); for (const auto &batch : batches_) { aut
 for i, a in enumerate(FastaM10Iterator(open(os.path.join(path, filename)))): print("#%i, %s" % (i + 1, a)) for r in a: if hasattr(r.seq.alphabet, "gap_char"): self.assertEqual(r.seq.alphabet.gap_char, "-") else: assert not hasattr(r.seq.alphabet, "gap_char")
 A dictionary containing the keys 'name' and 'ident' which are mapped to the 'name' and 'id' node elements in cyjs format. All other keys are ignored. Default is `None` which results in the default mapping ``{name="name", ident="id"}``. If `None` is passed, the default mapping is used. Returns -------
 if (isInternetOn(context)) { return true; } else Snackbar.make(parentView, R.string.internet_is_off, Snackbar.LENGTH_SHORT).show(); return false; } public static void promptSpeechInput(Activity activity, int requestCode, View parentView, String promtMsg) {
 # @api private class RoundTripTimeAverager private_constant :RTT_WEIGHT_FACTOR  # The weighting factor (alpha) for calculating the average moving round trip time. RTT_WEIGHT_FACTOR = 0.2 def initialize @last_round_trip_time = nil
 if isinstance(arrowsize, list): if len(arrowsize)!= len(edge_pos): raise ValueError("arrowsize should have the same length as edgelist") else: mutation_scale = arrowsize  # scale factor of arrow head
 Examples -------- >>> from networkx.algorithms.threshold import is_threshold_graph >>> G = nx.path_graph(3) >>> is_threshold_graph(G) True
 fromDataplane: fromDriverR, } return dataplaneConnection, cmd }
 if o.Storage!= nil && o.Storage.requiresEFSCreation() { parameters = append(parameters, "EFSWorkloads,") } return parameters }
 if ((initial_announcements_.count > 0) && (initial_announcements_.period <= c_TimeZero)) { // Force a small interval (1ms) between initial announcements // This is to ensure that the first announcement is actually sent initial_announcements_.period = { 0, 1000000 }; }
 boost::optional<protocol::Block> result; storage_->getBlocksFrom(1).filter([&hash](auto block) { return block->hash() == hash; }).map([](auto block) { return std::static_pointer_cast<shared_model::proto::Block>(block) ->getTransport(); }).as_blocking()
 <h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4475-SEA 1645530233 1513353163</p> <hr> <p>Varnish cache server</p> </body>
 """ self.ag.center_of_mass(pbc=True) def time_center_of_geometry_default(self, num_atoms): """Benchmark center_of_geometry calculation with pbc and unwrap inactive.
 } helperworker.trackMods(backendOverride || null); require("./user").initialize(exports.getBackend(), options.loadReason); }; exports.onUnload = function (reason) {
 rootCategoryId: null, currentPage: 1, pageSize: 6, chosenFilterOptions: getFilterParams(), appliedFilterOptions: getFilterParams(), };
 return this.jdbcTemplate.queryForList(sqlBuilder.toString(), Long.class, new Object[] { officeId}); } catch (final EmptyResultDataAccessException e) { return Collections.emptyList(); } } } No newline at end of file
 public abstract String getTable() throws TableNotFoundException; /** * @return tablet that is compacting * @since 1.7.0 */ public abstract TabletId getTablet();
 package com.getcapacitor; import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import org.json.JSONException; import org.junit.Test; import java.util.Map;  public class JSObjectTest { @Test
 from zipline.utils.calendars.exchange_calendar_lse import LSEExchangeCalendar from zipline.utils.calendars.exchange_calendar_tsx import TSXExchangeCalendar NYSE_CALENDAR_EXCHANGE_NAMES = frozenset([ "NYSE",
 $questionThemeName = SettingsUser::getUserSettingValue('preselectquestiontheme', null, null, null, Yii::app()->getConfig('preselectquestiontheme')); } if (empty($questionThemeName)) { $questionThemeName = QuestionTheme::model()->getBaseThemeNameForQuestionType($questionType); } $oCurrentGroup = QuestionGroup::model()->findByPk($gid); $temporaryTitle =
 //   a) Add 'MetadataUpdated' field to 'api.Container' //   b) Add 'DomainNameServers' and 'DomainNameSearchList' in `api.ENI` // 8) //   a) Added task cgroup related fields to 'api.Task' //   b) Added container cgroup related fields to 'api.Container' ECSDataVersion = 8 // ecsDataFile specifies the filename in the ECS_DATADIR
 click_button '利用規約に同意して参加する' assert_text 'サインアップメールをお送りしました。メールからサインアップを完了させてください。' user = User.find_by(email: email) login_user 'taguo', 'testtest' visit_with_auth user_path(user), 'taguo' assert_text 'タグ夫' end end
 // Licensed under the MIT License (MIT). See LICENSE in the repo root for license information. // ------------------------------------------------------------------------------------------------- using System; using System.Net; using System.Text; using Hl7.Fhir.Model; using Microsoft.Health.Fhir.Tests.Common; using Microsoft.Health.Fhir.Tests.Common.FixtureParameters; using Newtonsoft.Json;
 self._idx += offset self._idx %= len(self.items) new = self.curitem() elif self._mode == self.Modes.edge: new_idx = self._idx + offset right_edge = len(self._items) - 1 left_edge = 0
 </div> </div> <!-- /#submitdiv --> <div id="submitdiv"> <?php do_meta_boxes( 'pods_edit','side', $pod );?> </div> </div> </div>
 @Test public void shouldLimitNumberOfResponsesToNodeDataRequests() throws Exception { new EthServer( blockchain, worldStateArchive, ethMessages, 1, 1, 1, 1); when(worldStateArchive.getNodeData(HASH1)).thenReturn(Optional.of(VALUE1)); when(worldStateArchive.getNodeData(HASH2)).thenReturn(Optional.of(VALUE2)); ethMessages.dispatch(
 var systemAndCode = value as ISystemAndCode; if (systemAndCode == null || string.IsNullOrWhiteSpace(systemAndCode.Code)) { yield return null; }
 dir.setFilter(QDir::Files); foreach(QString dirFile, dir.entryList()) { LOG_warn << "Removing unexpected temporary file found from previous executions: " << dirFile.toUtf8().constData(); dir.remove(dirFile); } #endif
 return PolygonMasks(resized_masks, *out_shape) def shear(self, shear_matrix, out_shape, fill_val=0, flags=cv2.INTER_NEAREST, borderMode=cv2.BORDER_CONSTANT): return PolygonMasks(self.shear(shear_matrix, out_shape, fill_val, flags, borderMode), *out_shape) def to_bitmap(self):
 # - deck_cost is a computable based on sum # - count also has cardinality 1 of the return set <int64>(F.deck_cost / count(F.deck)) ); LIMIT 1 ''', [ [
 * @author [TsungHan Ho](https://github.com/dalaoqi) */ #include <cassert> #include <iostream> #include <vector>
 import tech.pegasys.pantheon.tests.acceptance.dsl.node.Node; import java.io.IOException; import javax.annotation.concurrent.Immutable; import javax.annotation.concurrent.ThreadSafe; @Immutable @ThreadSafe public class Blockchain { public Condition blockNumberMustBeLatest(final Node node) throws IOException {
 package net.sourceforge.pmd.lang.java.ast; /** * Marker interface for type body declarations, such as AnnotationMembers, Methods, Fields * * @author Clément Fournier */
 if (resumeRes!= null && resumeRes.media!= null) { resumeRes.media.setThumbready(false); resumeRes.media.setMimeType(HTTPResource.VIDEO_TRANSCODE); } /**
 def __repr__(self): repr_str = self.__class__.__name__ repr_str += '(transforms={})'.format(self.transforms) return repr_str
 self.rule_name = rule_name self.rule_index = rule_index self.rule = rule self.violation = None def rule_requirements(self): """Used to create violation reason.
 * npctalk (sends message to surrounding area) * usage: npctalk "<message>"{,"<npc name>"{,<show_npcname>}}; *  <show_npcname>: *      1: shows npc name like "Npc : message" *      0: hide npc name *      -1: shows npc name like "Npc : message" only if it is not the same as the 
 import org.h2.table.TableFilter; /** * An index for a function that returns a result set. Search in this index * performs scan over all rows and should be avoided. */ public class FunctionIndex extends BaseIndex {
 reachabilityTest reachabilityTest challenge        *v1alpha1.Challenge expectedErr      bool } tests := []testT{ {
 void ServerApp::Run() { DebugLogger() << "FreeOrion server waiting for network events"; // loop until the server is stopped while (1) { if (m_io_service.run_one()) m_networking.HandleNextEvent();
 endHour = 23; endMin = 59; } else if (trimedText.Contains("business") && trimedText.Contains("hour")) { timex = "TBH"; beginHour = 8;
 create_inventory_parser.add_argument( 'import_as', metavar=('IMPORT_AS',), help='Import the inventory when complete, requires a model name') create_inventory_parser.add_argument( '--background',
 AvroFileAppender(Schema schema, OutputFile file, Function<Schema, DatumWriter<?>> createWriterFunc, CodecFactory codec, Map<String, String> metadata) throws IOException { this.stream = file.createOrOverwrite(); this.writer = newAvroWriter(schema, stream, createWriterFunc, codec, metadata, true); }
 from tests.test_libs import test_utils @test_utils.skip_unless_python_version() @test_utils.with_cloud_emulators('datastore') class OssFuzzGenerateCertsTest(test_utils.OssFuzzTestBase): """Test oss_fuzz_generate_certs."""
 package sqle import ( "github.com/dolthub/dolt/go/dolt" "github.com/dolthub/go-mysql-server/sql" "github.com/dolthub/dolt/go/libraries/doltcore/doltdb"
 if (!string.IsNullOrEmpty(exactMatch.Groups["special"].Value)) { var specialYearTimex = this.config.SpecialYearPrefixesMap[exactMatch.Groups["special"].Value.ToLowerInvariant()]; ret.Timex = this.GetSpecialYearTimex(year, specialYearTimex); ret.Success = true; return ret; } } }
 corpus_directories.insert(0, merge_directory) if use_minijail: target = '/' + MERGE_DIRECTORY_NAME minijail_chroot.add_binding(minijail.ChrootBinding(merge_directory, target, True)) merge_result = runner.merge( corpus_directories,
 detectedPPMCol = datamap[detectedNuc + ".P"] + 1 # Make a list of the data lines involving the detected if (str(toResNum) in peaklist.residue_dict(detectedNuc) and str( originResNum ) in peaklist.residue_dict(detectedNuc)): detectedList = peaklist.residue_dict(detectedNuc)[str(toResNum)] originList = peakli
 @JsonProperty @NotNull private boolean runAsTaskUser = true; public List<SingularityExecutorShellCommandOptionDescriptor> getOptions() { return options;
 return true; } if (isWebOs()) { return true; }
 } public void handleGoAway(Channel parentChannel, int lastStreamId, GoAwayException exception) { log.debug(() -> "Received GOAWAY on " + parentChannel + " with lastStreamId of " + lastStreamId); try { MultiplexedChannelRecord multiplexedChannel = parentChannel.attr(MULTIPLEXED_CHANNEL).get();
 import { observer } from'mobx-react'; import { defineMessages, intlShape } from'react-intl'; import styles from './DisplaySettings.scss'; import themeLightBluePreview from '../../../assets/images/themes/light-blue-preview.png'; import themeCardanoPreview from '../../../assets/images/themes/cardano-preview.png'; import themeDarkBluePreview from '../../../assets/images/themes/dark-blue-preview.png'; const messages = defineMessages({ themeLabel: {
