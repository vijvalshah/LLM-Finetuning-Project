Tasks.range(readTasks.length) .stopOnFailure() .executeWith(localityPreferred ? ThreadPools.getWorkerPool() : null) .run(index -> readTasks[index] = new ReadTask<>( scanTasks.get(index), tableBroadcast, expectedSchemaString, caseSensitive, localityPreferred, new BatchReaderFactory(batchSize))); LOG.info("Batching input partitions with {} tasks.", readTasks.length); return Arrays.asList(readTasks);
if (!$asset instanceof AssetInterface) { throw new \Exception('No asset given for rendering.', 1415184217); } if (!empty($preset)) { $thumbnailConfiguration = $this->thumbnailService->getThumbnailConfigurationForPreset($preset); } else { $thumbnailConfiguration = new ThumbnailConfiguration($this->getWidth(), $this->getMaximumWidth(), $this->getHeight(), $this->getMaximumHeight(), $this->getAllowCropping(), $this->getAllowUpScaling(), $this->getAsync());
// calculates synchronized time and rtt public class NetworkTime { // a fixed point in time.  Both client and server should have the same epoch // so that the clock offset will be small and safe to convert to float static readonly DateTime epoch = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc); static ExponentialMovingAverage _rtt = new ExponentialMovingAverage(10);
public String toString() { return String.format( "Top rising stocks:%n%s\nTop falling stocks:%n%s", topIncrease.stream().map(kwr -> String.format("   %s by %.2f%%", kwr.key(), 100d * kwr.result())) .collect(joining("\n")), topDecrease.stream().map(kwr -> String.format("   %s by %.2f%%", kwr.key(), 100d * kwr.result())) .collect(joining("\n")) ); }
meter := metric.WrapMeterImpl(accum) var calls int64 metric.Must(meter).NewInt64CounterObserver("observer.sum", func(_ context.Context, result metric.Int64ObserverResult) { calls++ result.Observe(calls)
*/ public class MainnetTransactionValidator implements TransactionValidator { public static MainnetTransactionValidator create() { return new MainnetTransactionValidator(new FrontierGasCalculator(), false); }
""" request: HTTPRequest response: Optional[HTTPResponse] = None trailers: Optional[http.Headers] = None error: Optional[flow.Error] = None """ Note that it's possible for a Flow to have both a response and an error
// return the peers of current node func (a *API) listPeers() Response { return NewSuccessResponse(a.sync.Peers().GetPeerInfos()) } // disconnect peer
return p, address } func (sm *SyncManager) makeNodeInfo(bestBlockHeader *types.BlockHeader, listenerStatus bool) *p2p.NodeInfo { nodeInfo := &p2p.NodeInfo{ PubKey:      sm.privKey.PubKey().Unwrap().(crypto.PubKeyEd25519), Moniker:     sm.config.Moniker,
{ _transformed = true; // Transform each initializer recursively (to allow for nested initializers) if (expression.Members == null) return Expression.New(expression.Constructor, expression.Arguments.Select(VisitInternal)); return Expression.New(expression.Constructor, expression.Arguments.Select(VisitInternal), expression.Members);
} $attributes = $additionalAttributes; $attributes['data-node-__typoscript-path'] = $fusionPath; // @deprecated $attributes['data-node-__fusion-path'] = $fusionPath; $attributes = $this->addGenericEditingMetadata($attributes, $node); $attributes = $this->addNodePropertyAttributes($attributes, $node);
} // Attest implements the server side logic for the gcp iit node attestation plugin. func (p *IITAttestorPlugin) Attest(stream nodeattestor.NodeAttestor_AttestServer) error { c, err := p.getConfig() if err != nil { return err
boost::optional<double> People_Impl::spaceFloorAreaPerPerson() const { OptionalDouble temp = peopleDefinition().spaceFloorAreaperPerson(); if (temp) { double mult = multiplier(); if (mult > 0) { return temp.get() / mult; } } return temp; }
*/ public function insert_script() { if ( rocket_get_constant( 'WP_ROCKET_WHITE_LABEL_ACCOUNT' ) || ! current_user_can( 'rocket_manage_options' ) ) { return; }
} // Poll instructs the broker to read new broadcast messages, which will be // relayed through the message channel. The function does not return until the // received messages are processed. func (c *Controller) Poll(blockReference flow.Identifier) error { return c.broker.Poll(blockReference) }
.. versionchanged:: 0.11.0 Frames now 0-based instead of 1-based .. versionchanged:: 2.0.0 Reader now only parses boxes defined with 3 or 9 fields. Reader now reads a 3 entry zero unit cell (i.e. ``[0, 0, 0]``) as a being without dimension information (i.e. will the timestep dimension to ``None``).
/** * Delete the MatchSet structure in a safe way. */ struct ScopedMatchDeleter { ScopedMatchDeleter(MatchSet& ms) : _ms(ms) {} ~ScopedMatchDeleter() { foreach (const Match* m, _ms) {
export function addEncode(object, name, value, set) { if (value != null) { // Always assign signal to update, even if the signal is from the enter block if (isObject(value) && !isArray(value)) { object.update[name] = value; } else {
:return: """ if self.client.token: worker_index = self.engine.config.get('modules').get('shellexec').get('env').get('TAURUS_INDEX_ALL', '') if worker_index: suffix = '-' + worker_index else: suffix = '' artifacts_zip = "artifacts%s.zip" % suffix mfile = self.__get_jtls_and_more() self.log.info("Uploading all artifacts as %s ...", artifacts_zip) self.client.upload_file(artifacts_zip, mfile.getvalue())
Map<VariableNameDeclaration, List<NameOccurrence>> vars = node.getScope() .getDeclarations(VariableNameDeclaration.class); for (Map.Entry<VariableNameDeclaration, List<NameOccurrence>> entry : vars.entrySet()) { VariableNameDeclaration decl = entry.getKey(); AccessNode accessNodeParent = decl.getAccessNodeParent(); if (entry.getValue().isEmpty() || accessNodeParent.isTransient() || accessNodeParent.isStatic()) { continue; } String varName = trimIfPrefix(decl.getImage()); varName = varName.substring(0, 1).toUpperCase() + varName.substring(1, varName.length()); boolean hasGetMethod = Arrays.binarySearch(methNameArray, "get" + varName) >= 0 || Arrays.binarySearch(methNameArray, "is" + varName) >= 0;
def parseTimeReference(ref, now): if not ref or ref == 'now': return timezone.now() #Time-of-day reference i = ref.find(':') hour,min = 0,0
else: self.bot.sniper_disabled_global_warning = False targets = [] # Retrieve the targets if self.mode == SniperMode.SOCIAL:
if (allowance && allowance.subscriptionType === 1) return true; if (!allowance) { return false; }
} for _, tt := range tests { pi := PeerIdentifier(tt.hostport) assert.Equal(t, tt.expectedIdentifier, pi.Identifier()) }
try { result = httpAgent.httpGet(path, headers, paramValues, encoding, readTimeoutMs); } catch (IOException e) { throw e; } finally { timer.observeDuration(); timer.close(); } return result; }
foreach ( (array) $submenu['themes.php'] as $item ) { $class = ''; if ( in_array( $item[2], $forbidden_paths, true ) || str_starts_with( $item[2], 'customize.php' ) ) { continue; } // 0 = name, 1 = capability, 2 = file.
return super.dispatchTouchEvent(event); } private class GestureDetectorListener extends GestureDetector.SimpleOnGestureListener { @Override public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) { Log.d(TAG, "GestureDetecorListener:onFling() fired");
return size; } // TODO (kodebach): update docu /** * Return the owner of the key. * - Given @p user:someuser:/..... return @p someuser
h2o_header_t *headers, size_t num_headers, int header_requires_dup) { struct st_h2o_mruby_http_request_context_t *ctx = client->data; if (try_dispose_context(ctx)) return NULL; int gc_arena = mrb_gc_arena_save(ctx->ctx->shared->mrb); mrb_gc_protect(ctx->ctx->shared->mrb, ctx->refs.request);
opt_group{custom_options_, "vast"} .add<size_t>("table-slice-size", "Maximum size for sources that generate table slices.");  initialize_factories<synopsis, table_slice, table_slice_builder, value_index>(); } caf::error configuration::parse(int argc, char** argv) {
"io" "github.com/gogo/protobuf/proto" "go.uber.org/multierr" yarpc "go.uber.org/yarpc/v2" )
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4431-SEA 1645521621 3669565527</p> <hr> <p>Varnish cache server</p> </body>
var result struct { Service struct { OnCallUsers []struct { UserID   string UserName string } } }
assertNoProblems(result); } @Test void noMultipleVariablesInForEach() { ParseResult<Statement> result = javaParser.parse(STATEMENT, provider("for(int i, j : nums){}")); assertProblems(result, "(line 1,col 1) A foreach statement's variable declaration must have exactly one variable declarator. Given: 2."); }  @Test void noModifiersInForEachBesideFinal() { ParseResult<Statement> result = javaParser.parse(STATEMENT, provider("for(static transient int i : nums){}"));
from google.cloud.forseti.services.scanner import scanner_pb2_grpc from google.cloud.forseti.services.server_config import server_pb2 from google.cloud.forseti.services.server_config import server_pb2_grpc from google.cloud.forseti.services.utils import oneof from google.cloud.forseti.services.utils import is_opencensus_enabled # pylint: disable=too-many-instance-attributes
func (c *Chain) ProcessBlock(block *legacy.Block) (bool, error) { blockHash := block.Hash() if c.BlockExist(&blockHash) { log.WithField("hash", blockHash.String()).Info("Skip process due to block already been handled") return false, nil } if !c.BlockExist(&block.PreviousBlockHash) { log.WithField("hash", blockHash.String()).Info("Add to orphan block setg") c.orphanManage.Add(block) return true, nil }
</tr> <tr> <td><?php echo __('Unassign ticket when transferring to another department'); ?>:</td> <td> <span> <input type="checkbox" name="unassign_tickets_dept" <?php echo $info['unassign_tickets_dept']?'checked="checked"':''; ?>> <?php echo __('Unassign ticket when transferring to another department'); ?> <i class="help-tip icon-question-sign" href="#sandboxing"></i> </span> </td>
void ModelComponent::extendFinalizeFromProperties() { Super::extendFinalizeFromProperties(); int geomSize = getProperty_geometry().size(); if (geomSize > 0){ for (int i = 0; i < geomSize; ++i){ addComponent(&upd_geometry(i)); } } }
'transEsc' => 'VuFind\View\Helper\Root\TransEsc', 'translate' => 'VuFind\View\Helper\Root\Translate', 'truncate' => 'VuFind\View\Helper\Root\Truncate', 'userlist' => 'VuFind\View\Helper\Root\UserList', 'usertags' => 'VuFind\View\Helper\Root\UserTags', 'Zend\View\Helper\Url' => 'VuFind\View\Helper\Root\Url', ] ], ];
* @then there is an empty proposal */ TEST_F(TransferAsset, NonexistentAsset) { std::string nonexistent = "inexist#test"; IntegrationTestFramework(1) .setInitialState(kAdminKeypair) .sendTx(makeUserWithPerms(kUser1, kUser1Keypair, kPerms, kRole1))
MaxConcurrencyPerEvent int    `envconfig:"MAX_CONCURRENCY_PER_EVENT"` // MaxStaleDuration is the max duration of the handler pool without being synced. // With the internal pool resync period being 15s, it requires at least 4 // continuous sync failures (or no sync at all) to be stale. MaxStaleDuration time.Duration `envconfig:"MAX_STALE_DURATION" default:"1m"` // Max to 10m.
return JSON_JR.beanFrom(type, jsonString); } /** * Converts a JSON string to a {@link Map}. */
'type'    => 'string', 'context' => array( 'view', 'edit' ), ), 'c.*'   => array( 'type'    => 'string', 'context' => array( 'edit' ), ), ), 'additionalProperties' => array( 'type'    => 'string',
input->getName().length(), ' ') << input->getName() << " : "; if (input->getNumConnectees() == 0 || (input->getNumConnectees() == 1 && !input->isConnected())) { std::cout << "no connectees" << std::endl; } else { for (unsigned i = 0; i < input->getNumConnectees(); ++i) {
$plugins->run_hooks("modcp_allreports_start"); $query = $db->query(" SELECT r.*, u.username, p.username AS postusername, up.uid AS postuid, t.subject AS threadsubject, prrep.username AS repusername, pr.username AS profileusername FROM ".TABLE_PREFIX."reportedcontent r LEFT JOIN ".TABLE_PREFIX."posts p ON (r.id=p.pid) LEFT JOIN ".TABLE_PREFIX."threads t ON (p.tid=t.tid) LEFT JOIN ".TABLE_PREFIX."users u ON (r.uid=u.uid) LEFT JOIN ".TABLE_PREFIX."users up ON (p.uid=up.uid) LEFT JOIN ".TABLE_PREFIX."users pr ON (pr.uid=r.id) LEFT JOIN ".TABLE_PREFIX."users prrep ON (prrep.uid=r.id2) {$wflist_reports} ORDER BY r.dateline DESC LIMIT {$start}, {$perpage}
timer := time.NewTimer(0) defer timer.Stop() resultChan := make(chan retrievalResult) doneChan := make(chan struct{}) defer close(doneChan)
{} void StartUsing() { if (m_failed_init) return; if (!m_scanline_shader) { boost::filesystem::path shader_path = GetRootDataDir() / "default" / "shaders" / "scanlines.frag"; std::string shader_text; ReadFile(shader_path, shader_text);
fatal_lang_error('registration_disabled', false); // If we're using an agreement checkbox, did they check it? if (!empty($modSettings['checkboxAgreement']) && !empty($_POST['checkbox_agreement'])) $_SESSION['registration_agreed'] = true; // Things we don't do for people who have already confirmed their OpenID allegances via register.
config.Docker.ResultsTimeout = cli.Duration(20 * time.Second) config.Docker.RemoveTimeout = cli.Duration(20 * time.Second) config.Go.GoTool = "go" config.Go.CgoCCTool = "gcc" config.Go.GoPath = "$TMP_DIR:$TMP_DIR/src:$TMP_DIR/$PKG_DIR:$TMP_DIR/third_party/go:$TMP_DIR/third_party/" config.Python.PipTool = "pip3"
if ( is_wp_error( $link ) ) { return $link; } $links[] = '<a class="' . esc_attr( sanitize_html_class( $taxonomy ) ) . ' ' . esc_attr( sanitize_html_class( $term->slug ) ) . '" href="' . esc_url( $link ) . '" rel="tag">' . $term->name . '</a>'; } /**
tensor([0, 1, 0, 1, 2, 2, 3, 5, 4, 6, 3, 5, 4, 6])) """ if algorithm == 'bruteforce-blas': return _segmented_knn_graph_blas(x, k, segs, dist=dist) else: out = knn(x, segs, x, segs, k, algorithm=algorithm, dist=dist) row, col = out[1], out[0] return convert.graph((row, col)) def _segmented_knn_graph_blas(x, k, segs, dist='euclidean'): """Construct multiple graphs from multiple sets of points according to k-nearest-neighbor (KNN).
#include "../Empire/EmpireManager.h" #include "../Empire/Supply.h" #include <boost/algorithm/string/case_conv.hpp> #include <boost/bind.hpp> #include <boost/graph/adjacency_list.hpp>
AppAdapter.get().getPassword(), ""); } // Get CSRFToken response off the main thread. Response<MwQueryResponse> response = Executors.newSingleThreadExecutor().submit(new CsrfTokenCallExecutor(service)).get(); if (response.body() == null || response.body().query() == null || TextUtils.isEmpty(response.body().query().csrfToken())) {
} } func TestStorageInitOpts_Execute(t *testing.T) { const ( wantedAppName      = "ddos"
self.handle_private_mode = False self._tmphist = None if history is None: self.history = [] else: self.history = history def __getitem__(self, idx):
def define_graph(self): self.jpegs, self.labels = self.input() images = self.decode(self.jpegs) outputs = self.cmnp([images, images]) outputs[1] = self.affine(outputs[1]) return [self.labels] + outputs
fprintf(stderr, "    Turn on experimental TLS1.3 support.\n"); fprintf(stderr, "  -w --https-server\n"); fprintf(stderr, "    Run s2nd in a simple https server mode.\n"); fprintf(stderr, "  -b --https-bench <bytes>\n"); fprintf(stderr, "    Send number of bytes in https server mode to test throughput.\n"); fprintf(stderr, "  -h,--help\n"); fprintf(stderr, "    Display this message and quit.\n");
// aim to create chunks of 20 bits or about 1MiB on average. averageBits = 20 // MinSize is the minimal size of a chunk. MinSize = 512 * KiB // MaxSize is the maximal size of a chunk.
{ public interface IMvxOverridePresentationAttribute { MvxBasePresentationAttribute PresentationAttribute(); } }
class new_build_ext(_build_ext, object): user_options = _build_ext.user_options + [ ('c-build-dir=', None, "directory for generated c files"), ] def initialize_options(self): _build_ext.initialize_options(self)
} @Override public void removeSubscriber(Subscriber subscriber) { subscribers.remove(subscriber); }
assert N == 2 assert_almost_equal(cutoff, 10.5, decimal=4) def test_pbc_on_off(universe, lipid_heads): lfls_pbc_on = LeafletFinder(universe, lipid_heads, pbc=True) lfls_pbc_off = LeafletFinder(universe, lipid_heads, pbc=False) assert lfls_pbc_on.graph.size() > lfls_pbc_off.graph.size()
} auto YacInit::createTimer(std::chrono::milliseconds delay_milliseconds) { return std::make_shared<TimerImpl>( delay_milliseconds, // TODO 2019-04-10 andrei: IR-441 Share a thread between MST and YAC rxcpp::observe_on_new_thread()); } std::shared_ptr<YacGate> YacInit::initConsensusGate(
"canmanagemembers" => 1, "canmanagerequests" => 1, "caninvitemembers" => 1, "makeleadermember" => 0 ) ); }
model_name = request.handle try: self.modeller.delete_model(model_name) status = model_pb2.DeleteModelReply.Status.Value('SUCCESS') except Exception: LOGGER.exception('Unable to delete model: %s', model_name) status = model_pb2.DeleteModelReply.Status.Value('FAIL') return model_pb2.DeleteModelReply(status=status) def ListModel(self, request, _): """List all models.
* @param {!Object} json JSON representation of the manifest. * @return {!AddonDetails} The add-on details. */ function parseManifestJson({name, version, applications}) { if (!(applications && applications.gecko && applications.gecko.id)) { throw new AddonFormatError('Could not find add-on ID for ' + addonPath); }
if (resolvedComponents.Count > 0) { // this is not actually creating the search parameter, it will return the existing one. GetOrCreateSearchParameterInfo(searchParameter).ResolvedComponents = resolvedComponents; } }
if os.path.exists('/var/log/forseti.log'):  # ubuntu on GCE default_log_handler = logging.FileHandler('/var/log/forseti.log') default_log_handler.setFormatter(logging.Formatter(FORSETI_LOG_FMT)) else: default_log_handler = logging.handlers.SysLogHandler() default_log_handler.setFormatter(logging.Formatter(SYSLOG_LOG_FMT)) logger_instance = logging.getLogger(module_name) logger_instance.addHandler(default_log_handler)
""" Sets the status message of the task to message, i.e., invokes _status_message_callback if it is a callable. This propagates the message down to the scheduler.  See :ref:`Task.set_status_message` """ if hasattr(self._status_message_callback, "__call__"): self._status_message_callback(message)
req *execution.GetEventsForBlockIDsRequest, ) (*execution.GetEventsForBlockIDsResponse, error) { if !h.queriesEnabled { return nil, status.Error(codes.Unimplemented, "event queries are disabled") }  // validate request blockIDs := req.GetBlockIds() flowBlockIDs, err := convert.BlockIDs(blockIDs)
*/ private boolean isRequiredToUploadAtTime(TopicPartition topicPartition) throws Exception{ final String topic = topicPartition.getTopic(); if (mTopicFilter == null || mTopicFilter.isEmpty()){ return false; } if (topic.matches(mTopicFilter)){ if (DateTime.now().minuteOfHour().get() == mConfig.getUploadMinuteMark()){ return true; }
@ApiOperation("Retrieve the list of logs stored in S3 for a specific task.") public List<SingularityS3Log> getS3LogsForTask( @ApiParam("The task ID to search for") @PathParam("taskId") String taskId, @ApiParam("Start timestamp (millis, 13 digit)") @QueryParam("start") Optional<Long> start, @ApiParam("End timestamp (mills, 13 digit)") @QueryParam("end") Optional<Long> end) throws Exception { checkS3(); SingularityTaskId taskIdObject = getTaskIdObject(taskId);
@Override public Options forTablets(Collection<KeyExtent> extents) { if (extents.stream().map(KeyExtent::tableId).map(DataLevel::of) .anyMatch(dl -> dl != DataLevel.USER)) { throw new IllegalArgumentException( "readTablets only supported for user tablets at this time."); }
from helpers import RunOnceTask import luigi import luigi.server import luigi.scheduler import luigi.worker import luigi.rpc
nonliteral_other.append(arg) else: arg.default = DefaultLiteralArgNode(arg.pos, arg.default) if arg.default.type and arg.default.type.can_coerce_to_pyobject(env): if arg.kw_only: default_kwargs.append(arg) else:
$('.banner__badge').html("<%= j render 'shared/course_badge', course: @lesson.course, user: @user, modifier: '' %>"); if($('.lesson-button-group').length == 0) { $("#section-lessons__<%= @lesson.id %>").html("<%= j render 'courses/course/lesson_completion_button', lesson: @lesson, course: @lesson.course, user: @user %>"); } else { $('.lesson-button-group').html("<%= j render 'lessons/lesson_buttons', lesson: @lesson, course: @lesson.course, user: @user  %>"); } 
// instance of etcd in the event that etcd certificates are unavailable, // reading the data, and comparing that to the data on disk, all the while // starting normal etcd. if isInitialized { logrus.Info("Only reconciling with datastore") tmpDataDir := filepath.Join(c.config.DataDir, "db", "tmp-etcd")
type colInfo struct { Name     spansql.ID Type     spansql.Type NotNull  bool            // only set for table columns AggIndex int             // Index+1 of SELECT list for which this is an aggregate value. Alias    spansql.PathExp // an alternate name for this column (result sets only) }
SFXSource* source = NULL; if( track ) { if (dStrcmp(x, "") == 0) { source = SFX->playOnce( track ); }
return true; } if (putObjectRequest.getSSEAwsKeyManagementParams() != null && (putObjectRequest.getSSEAwsKeyManagementParams().getEncryption() != null || putObjectRequest.getSSEAwsKeyManagementParams().getAwsKmsKeyId() != null)) { return true; } } else if (request instanceof UploadPartRequest) {
@property def status_verbose_name(self): status_verbose_names = getattr(settings, 'OSCAR_ORDER_STATUS_VERBOSE_NAMES', {}) if self.status and self.status in status_verbose_names: return status_verbose_names[self.status] return self.status
if len(svcEnvNames) == 1 { o.svcName = svcEnvs[svcEnvNames[0]].svcName o.envName = svcEnvs[svcEnvNames[0]].envName log.Infof("Showing logs of service %s deployed in environment %s\n", color.HighlightUserInput(o.svcName), color.HighlightUserInput(o.envName)) return nil }
#include "Version.h" QString MumbleSSL::defaultOpenSSLCipherString() { return QLatin1String("EECDH+AESGCM:AES256-SHA:AES128-SHA"); } QList<QSslCipher> MumbleSSL::ciphersFromOpenSSLCipherString(QString cipherString) {
bitmap_masks = self.to_ndarray() return BitmapMasks(bitmap_masks, self.height, self.width) @property def areas(self): """Compute areas of masks.  This func is modified from https://github.com/facebookresearch/detectron2/blob/ffff8acc35ea88ad1cb1806ab0f00b4c1c5dbfd9/detectron2/structures/masks.py#L387 Only works with Polygons, using the shoelace formula Return: ndarray: areas of each instance
supportedPolicies[name] = policy } func (u *staticUpstream) From() string { return u.from }
std::shared_ptr<shared_model::interface::EmptyBlock> makeEmptyCommit( size_t time = iroha::time::now()) const { auto block = TestUnsignedEmptyBlockBuilder() .height(5) .createdTime(time)
def __getitem__(self, n): if isinstance(n, slice): raise nx.NetworkXError( f"{type(self).__name__} does not support slicing, " f"try list(G.nodes)[{n.start}:{n.stop}:{n.step}]" ) return self._nodes[n]
* @return a new module which imports the original user module and a set of marker modules. */ public Module getConfigGrammar(Module mod) { return getGrammar(mod, CONFIG_CELLS); } /**
int main() { BEGIN_TEST(); if (!s2n_pq_is_enabled()) { END_TEST();
public IModel GetURLModel(string culture = null, bool fallbackToDefaultCulture = true) { return GetModel<URLModel>(Culture.English, fallbackToDefaultCulture); } public IModel GetGUIDModel(string culture = null, bool fallbackToDefaultCulture = true)
Raises: ApiExecutionError: ApiExecutionError is raised if the call to the GCP API fails ValueError: Raised if neither zone nor location are passed in. """ try:
A new dataframe with the updated labels. """ def new_labels_mapper(x, suffix=str(suffix)): return str(x) + suffix if axis == 0: return self.rename(new_row_labels=new_labels_mapper)
let(:registry) { InterceptableSpec::CallbackRegistry.new } let(:parent) do InterceptableSpec::CbEmbedsOneParent.new(registry).tap do |parent| parent.child = InterceptableSpec::CbEmbedsOneChild.new(registry) end end
:coll_name => collection.name }).execute(server) end Cursor.new(self, result, server, session: session) end end
mode = self.rule['mode'] has_violation = False crypto_key_rule = self.rule['key'] for key_data in crypto_key_rule: rule_algorithms = key_data.get('algorithms') rule_protection_level = key_data.get('protection_level') rule_purpose = key_data.get('purpose')
// IsWindows returns whether or not the service is building with a Windows OS. func (t TaskConfig) IsWindows() bool { return isWindowsPlatform(t.Platform) }
private OAuth2AccessTokenResponseClient<OAuth2ClientCredentialsGrantRequest> clientCredentialsTokenResponseClient = new DefaultClientCredentialsTokenResponseClient(); /** * Constructs an {@code OAuth2AuthorizedClientArgumentResolver} using the provided parameters. *
if (ex is DocumentClientException dce && dce.StatusCode == (HttpStatusCode)429) { throw new RequestRateExceededException(dce.RetryAfter); } } }
} } static void SplitMonotonicAt(Monotonic *m,int which,bigreal coord, struct inter_data *id) { SplitMonotonicAtFlex(m, which, coord, id, 1); }  static void SplitMonotonicAtFake(Monotonic *m,int which,bigreal coord, struct inter_data *id) { SplitMonotonicAtFlex(m, which, coord, id, 0);
# now superseded by Tm_NN. warnings.warn( "Tm_staluc is deprecated; please use Tm_NN instead.", BiopythonDeprecationWarning, ) if not rna:
* @param Optimization     $optimize    Database optimization instance. * @param UserClient       $user_client User client instance; */ public function __construct( array $args, Settings $settings, Render_Interface $render, Beacon $beacon, Optimization $optimize, UserClient $user_client ) { $args = array_merge( [ 'slug'       => 'wprocket', 'title'      => 'WP Rocket', 'capability' => 'rocket_manage_options', ], $args );  $this->slug        = $args['slug']; $this->title       = $args['title']; $this->capability  = $args['capability'];
); } if (data.products.items.length === 0) { return ( <div className={classes.noResult}> <FormattedMessage
import org.w3c.dom.Node; import org.w3c.dom.NodeList; import java.text.ParseException; import java.text.SimpleDateFormat; import java.time.format.DateTimeFormatter; import java.util.ArrayList; import java.util.Date; import java.util.List;
String MANDATORY_NETWORK_FORMAT_HELP = "<NETWORK>"; String MANDATORY_NODE_ID_FORMAT_HELP = "<NODEID>"; Wei DEFAULT_MIN_TRANSACTION_GAS_PRICE = Wei.of(1000); long DEFAULT_RETENTION_PERIOD = 1024; long DEFAULT_TRANSIENT_FORK_OUTLIVING_PERIOD = 10; BytesValue DEFAULT_EXTRA_DATA = BytesValue.EMPTY; long DEFAULT_MAX_REFRESH_DELAY = 3600000;
} // DecoderByName returns a *Decoder based on decoderName. // // It is intended to be used by URL openers in driver packages. // // Supported values include: //   - empty string: Returns the default from the URLOpener.Decoder, or //       BytesDecoder if URLOpener.Decoder is nil (which is true if you're
jobRepository = new JobRepository(jetInstance); jobExecutionService = new JobExecutionService(nodeEngine, taskletExecutionService, jobRepository); jobCoordinationService = createJobCoordinationService(); MetricsService metricsService = nodeEngine.getService(MetricsService.SERVICE_NAME); metricsService.registerPublisher(nodeEngine -> new JobMetricsPublisher(jobExecutionService,
return url def check_forms_can_be_destroyed(self, tab): """If needed ask user for confirmation to close a tab  Args: tab: The QWebView to be closed.  Return: True if tab can be destroyed and false otherwise. """ # Check for user modified fields in a single tab confirm_quit = config.get('ui', 'confirm-quit') if tab.isModified() and 'forms' in confirm_quit:
<?php final class Company extends Elegant { protected $table = 'companies';
if (this.parentIsRoot === true) { return; } this.parentIsRoot = this.template.querySelector('div').parentNode === this.template; } }
if (!self->have_rofiles) { g_warning ("rofiles-fuse not available, doing without"); return TRUE; }
}; render() { const { onClose, onContinue, stores } = this.props; const { walletMigration, app } = stores; const {
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4472-SEA 1645549164 1602202436</p> <hr> <p>Varnish cache server</p> </body>
Annotations: map[string]string{ types.TagCommandType: types.TypeStart, }, Deprecated: "vela install is DEPRECATED and we will remove it after Kubevela 1.0. Please use helm chart instead", } flag := cmd.Flags()
"have k8s service account and secret at the same time": { spec: func() CloudAuditLogsSourceSpec { obj := auditLogsSourceSpec.DeepCopy() obj.ServiceAccountName = validServiceAccountName obj.Secret = duckv1alpha1.DefaultGoogleCloudSecretSelector() return *obj }(),
errno = 0; if (env_ndevices_str != nullptr && env_rdevices_str != nullptr) { Impl::throw_runtime_exception( "Error: cannot specify both KOKKOS_NUM_DEVICES and " "KOKKOS_RAND_DEVICES. " "Raised by Kokkos::initialize(int narg, char* argc[])."); } int rdevices = -1;
{ public static Assembly Core => typeof(Clock).Assembly; public static Assembly CoreVersionSpecific => typeof(R4ModelInfoProvider).Assembly; } }
http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url) if http_error_msg: if isinstance(self.text, basestring) and include_text: http_error_msg += u' Response Body: %s' % body_text[:max_text_length] raise HTTPError(http_error_msg, response=self) def close(self):
def _get_streams(self): is_live = False self.video_id = self._find_video_id(self.url) log.debug("Using video ID: {0}", self.video_id) info = self._get_stream_info(self.video_id) if info and info.get("status") == "fail": log.error("Could not get video info: {0}".format(info.get("reason"))) return
} else { foreach ( $response->get_links() as $rel => $link ) { foreach ( $link as $attributes ) { if ( ! empty( $attributes['attributes']['embeddable'] ) ) { $fields[] = "_links.{$rel}"; break; }
clipboard.set(this.shot.viewUrl, "text"); notifications.notify({ title: "Link Copied", text: "The link to your shot has been copied to the clipboard.", iconURL: self.data.url("../data/copy.png") }); }, openLink: function (link) {
end def check_deprecated_file if (@path + 'project.yaml').file? logger = Logging.logger[self] logger.warn "Project configuration file 'project.yaml' is deprecated; use 'bolt-project.yaml' instead." end
interface::types::HashType reduced_hash_{ shared_model::crypto::Sha3_256::makeHash(reduced_payload_blob_)}; std::vector<proto::Command> commands_{ reduced_payload_.mutable_commands()->begin(), reduced_payload_.mutable_commands()->end()}; boost::optional<std::shared_ptr<interface::BatchMeta>> meta_{ [this]() -> boost::optional<std::shared_ptr<interface::BatchMeta>> {
t="file", d=fd; static bool extractAll = Config_getBool(EXTRACT_ALL); //printf("  %s:warnIfUndoc: hasUserDocs=%d isFriendClass=%d isFriend=%d protection=%d isRef=%d isDel=%d\n", //    name().data(), //    hasUserDocumentation(),isFriendClass(),isFriend(),protectionLevelVisible(m_impl->prot),isReference(),isDeleted()); if ((!hasUserDocumentation() && !extractAll) &&
cmdline.type = "protein" self.assertEqual( str(cmdline), t_coffee_exe + " -output clustalw_aln -infile Fasta/fa01 -outfile Fasta/tc_out.aln " "-type protein -outorder input -gapopen -2 -gapext -5", ) stdout, stderr = cmdline()
while (true) { index++; // get next byte while (length <= index) { if (rest == null) { RejectRequest(RequestRejectionReason.InvalidRequestHeadersNoCRLF); } span = rest.First.Span; length = span.Length; rest = rest.Rest; index = 0; straddling = true; throw new NotImplementedException("call to OnHeader below needs to account for straddling spans"); }
Encoding for text data. prettyprint : bool (optional, default: True) If True use line breaks and indenting in output XML. version: string (optional, default: '1.2draft') The version of GEXF to be used for nodes attributes checking Examples --------
# divide in degrees for mean reducer. if reduce_op == 'mean': ret_shape = F.shape(ret) deg = g.in_degrees() deg = F.astype(F.clamp(deg, 1, max(g.number_of_edges(), 1)), F.dtype(ret))
num_nodes_dict = defaultdict(int) for (srctype, etype, dsttype), data in data_dict.items(): if isinstance(data, tuple): # TODO(minjie): converting to index is unnecessary just for getting the max ID. src = utils.toindex(data[0], dtype='int32' if idtype == F.int32 else 'int64').tonumpy() dst = utils.toindex(data[1],
} private void validatePercentileFunctions(SqlCall call) { if (call.getOperandList().size() == 2) { SqlBasicCall sqlBasicCall = null; SqlNodeList list = null;
// from disk, but an active partition does not have any files // on disk, so it should never get selected for deletion. VAST_WARN("{} got erase atom as an active partition", self); return caf::make_error(ec::logic_error, "can not erase the active " "partition"); }, [self](caf::stream<table_slice> in) { self->state.streaming_initiated = true;
/// </summary> public string StorageAccountConnection { get; set; } public ushort MaximumNumberOfConcurrentJobsAllowed { get; set; } = 1; public TimeSpan JobHeartbeatTimeoutThreshold { get; set; } = TimeSpan.FromMinutes(10);
deSecrets := decodeCredentials(enSecrets) for key, value := range secrets { if deSecrets[key] != value { t.Errorf("key %s of credentials's value %s change after decode %s ", key, value, deSecrets[key]) } } }
public static readonly string NumberCombinedWithUnit = $@"(?<num>\d+(\.\d*)?){UnitRegex}"; public static readonly string YearToYear = $@"((从|在|自)\s*)?({DatePeriodYearInChineseRegex}|{DatePeriodYearRegex}){DatePeriodTillRegex}({DatePeriodYearInChineseRegex}|{DatePeriodYearRegex})"; public static readonly string MonthToMonth = $@"({MonthRegex}){DatePeriodTillRegex}({MonthRegex})"; public const string PastRegex = @"(?<past>(前|上|之前|近))"; public const string FutureRegex = @"(?<future>(后|(?<![一两几])下|之后|未来(的)?))"; public const string SeasonRegex = @"(?<season>春|夏|秋|冬)(天|季)?"; public static readonly string SeasonWithYear = $@"(({DatePeriodYearRegex}|{DatePeriodYearInChineseRegex}|(?<yearrel>明年|今年|去年))(的)?)?{SeasonRegex}"; public static readonly string QuarterRegex = $@"(({DatePeriodYearRegex}|{DatePeriodYearInChineseRegex}|(?<yearrel>明年|今年|去年))(的)?)?(第(?<cardinal>1|2|3|4|一|二|三|四)季度)";
{ uint8_t renegotiation_info_scsv[S2N_TLS_CIPHER_SUITE_LEN] = { TLS_EMPTY_RENEGOTIATION_INFO_SCSV }; struct s2n_cipher_suite *higher_vers_match = NULL; struct s2n_cert_chain_and_key *higher_vers_cert = NULL; /* RFC 7507 - If client is attempting to negotiate a TLS Version that is lower than the highest supported server * version, and the client cipher list contains TLS_FALLBACK_SCSV, then the server must abort the connection since
</body> </html> <?php return ob_get_clean(); } /**
return new RemoteWebDriverBuilder(); } private Capabilities init(Capabilities capabilities) { capabilities = capabilities == null ? new ImmutableCapabilities() : capabilities; logger.addHandler(LoggingHandler.getInstance());
if (reader != null) reader.close(); } } public static interface ProgressListener {
} @Test public void removeAuthorizationRequestWhenExpired() { final Duration expiresIn = Duration.ofMinutes(2); this.authorizationRequestRepository.setAuthorizationRequestTimeToLive(expiresIn); this.authorizationRequestRepository.setClock(Clock.fixed(Instant.ofEpochMilli(0), ZoneId.systemDefault())); MockHttpServletRequest request = new MockHttpServletRequest(); MockHttpServletResponse response = new MockHttpServletResponse();
cr.Status.FailureTime = &p } }
highlightCells.emplace( attackerCell ); if ( _currentUnit->GetTailIndex() != -1 ) { const int tailDirection = _currentUnit->isReflect() ? RIGHT : LEFT; const Cell * tailAttackerCell = Board::GetCell( attackerCell->GetIndex(), tailDirection ); assert( tailAttackerCell != nullptr );  highlightCells.emplace( tailAttackerCell ); } } else {
"github.com/authelia/authelia/internal/logging" ) // ValidateSecrets checks that secrets are either specified by config file/env or by file references func ValidateSecrets(configuration *schema.Configuration, validator *schema.StructValidator, viper *viper.Viper) { configuration.JWTSecret = getSecretValue("jwt_secret", validator, viper) configuration.Session.Secret = getSecretValue("session.secret", validator, viper)
if _find_unsafe(s) is None: return s __all__ = ["is_py2", "is_py3", "is_win32", "input", "stdout", "file", "shlex_quote", "get_terminal_size"]
class PersistenceContext: state_dir: str lock: rwlock.RWLockable  def __init__(self, state_dir: str = None, lock: rwlock.RWLockable = None): # state dir (within DATA_DIR) of currently processed API in local file system self.state_dir = state_dir # read-write lock for concurrency control of incoming requests self.lock = lock class StateSerializer(abc.ABC):
$dst_h = $src_h; } foreach ( array( $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h ) as $value ) { if ( ! is_numeric( $value ) || (int) $value <= 0 ) { return new WP_Error( 'image_crop_error', __( 'Image crop failed.' ), $this->file ); }
}, appMarketUrl: function () { const ref = Template.instance().data; const appMarket = ref._db.collections.settings.findOne({ _id: "appMarketUrl" }); if (!appMarket) { return "#"; }
# Each fetch will take place in its own thread, since it's naturally # parallel work. patterns = [] for v in nodes_or_patterns: if isinstance(v, basestring): patterns.append(v) else: patterns.append(node.path) results = [] for store in self.remote_stores:
void replace_prefix_dot(flb_sds_t s, int tag_prefix_len) { int i; int str_len; char c;
echo = self.stub.Ping(notifier_pb2.PingRequest(data=data)).data return echo == data def run(self, inventory_id): """Runs the notifier. Args: inventory_index_id (int): Inventory Index Id. Returns:
public function up() { Schema::table('settings', function (Blueprint $table) { $table->boolean('labels_display_model')->default(0); }); }
* * @return string|null */ public function getArgument(string $name, ?string $default = null): ?string; /** * Get route arguments
o.RegisterItems(initContainerItems...) var containerItems []ItemDescriptor for i := range pod.Spec.Containers { container := pod.Spec.Containers[i] cc := NewContainerConfiguration(pod, &container, portForwarder, false, opts) containerItems = append(containerItems, ItemDescriptor{ Width: component.WidthHalf,
// If Shutdown has been called, Add immediately returns an error. func (b *Batcher) Add(ctx context.Context, item interface{}) error { b.wg.Add(1) defer b.wg.Done() b.mu.Lock() if b.shutdown { return errors.New("batcher: shut down") } // Create a channel to receive the error from the handler. c := make(chan error, 1) // Add the item to the pending list.
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4454-SEA 1645523397 2001672727</p> <hr> <p>Varnish cache server</p> </body>
<dd> <select name="id_group" ', ($context['user']['is_owner'] && $context['member']['group_id'] == 1 ? 'onchange="if (this.value != 1 &amp;&amp; !confirm(\'' . $txt['deadmin_confirm'] . '\')) this.value = 1;"' : ''), '>'; // Fill the select box with all primary membergroups that can be assigned to a member. foreach ($context['member_groups'] as $member_group) if (!empty($member_group['can_be_primary'])) echo '
int value = si.x + si.y*nx + si.z*nx*ny; fails += (array(i,j,k) != value); AMREX_ASSERT(fails==0);  // If DEBUG, crash on first error. }); } return fails == 0;
if issue_owners: metadata['issue_owners'] = ','.join(issue_owners) issue_metadata = get_issue_metadata(fuzz_target_path) if issue_metadata: metadata['issue_metadata'] = issue_metadata return metadata
newopts.password = "" return ReadPasswordTwice(newopts, "enter new password: ", "enter password again: ") } func addKey(gopts GlobalOptions, repo *repository.Repository) error {
if (!compress) { return encode(); } long start = System.currentTimeMillis(); ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); DeflaterOutputStream outputStream = new DeflaterOutputStream(byteArrayOutputStream, new Deflater(Deflater.BEST_COMPRESSION)); DataVersion dataVersion = topicConfigSerializeWrapper.getDataVersion();
} func TestRegistrationEntryMetrics(t *testing.T) { log, _ := test.NewNullLogger() actual := fakemetrics.New() cache := New(log, "spiffe://domain.test", bundleV1, actual) // populate the cache with FOO and BAR without SVIDS foo := makeRegistrationEntry("FOO", "A")
[^\\\\\'])* ) )$/x'; const SPLIT_PATTERN_VALUEBOOLEAN = '/^\s*(TRUE|FALSE|true|false)\s*$/'; const SPLIT_PATTERN_VALUENULL = '/^\s*(NULL|null)\s*$/'; const SCAN_PATTERN_VALUEOBJECTTYPE = '/
* The method {@link #upgradeRelativePaths(ServerContext, Ample.DataLevel)} was added for resolving * and replacing all relative tablet file paths found in metadata tables with absolute paths during * upgrade. Absolute paths are resolved by prefixing relative paths with a volume configured by the * user in the instance.volumes.upgrade.relative property, which is only used during an upgrade. * If any relative paths are found and this property is not configured, or if any resolved absolute * path does not correspond to a file that actually exists, the upgrade step fails and aborts * without making changes. See the property {@link Property#INSTANCE_VOLUMES_UPGRADE_RELATIVE} and
if (--(sce->val4) >= 0) { // Needed to check the caster's location for the range check. struct block_list *src = map->id2bl(sce->val2); if (!src || status_isdead(src) || src->m != bl->m || !check_distance_bl(bl, src, 11)) break; status->heal(bl, 150 * sce->val1, 0, 2);
return transactions.Transaction{}, err } return c.signAndBroadcastTransactionWithWallet(walletHandle, pw, tx) }
var force = !!options.quiet; if (force !== true) { force = cli.interaction.confirm($('Do you want to delete the CORS rules? [y/n]'), _); if (force !== true) { return; }
concat_data = obj.interface.concatenate([dense_data, obj], datatype=[dtype]) reindexed = concat_data.reindex([xdim, ydim], vdims) if pd: df = PandasInterface.as_dframe(reindexed) df = df.groupby([xdim, ydim], sort=False).first().reset_index() agg = reindexed.clone(df) else:
# Don't prefix with project name if it's the default project. return binary # E.g. for project names that are in the form of paths like: # //third_party/llvm, the result will be //third_party/llvm:fuzz_target separator = ':' if project.startswith('/') else '_' project_prefix = project + separator if binary.startswith(project_prefix): return binary
func NewDNSProviderEnvironment(dns01Nameservers []string, hostedZoneName string) (*DNSProvider, error) { project := os.Getenv("GCE_PROJECT") if saFile, ok := os.LookupEnv("GCE_SERVICE_ACCOUNT_FILE"); ok { return NewDNSProviderServiceAccount(project, saFile, dns01Nameservers, hostedZoneName) } return NewDNSProviderCredentials(project, dns01Nameservers, hostedZoneName) }
"%(status_filter)s") paginate_by = 25 description = '' actions = ('download_selected_orders','change_order_statuses') current_view = 'dashboard:order-list' order_actions = ('save_note', 'delete_note', 'create_order_payment_event') def dispatch(self, request, *args, **kwargs):
} // NewWorkerService creates a new WorkerService stack from a manifest file. func NewWorkerService(mft *manifest.WorkerService, env, app string, rc RuntimeConfig, allowedTopics []string) (*WorkerService, error) { parser := template.New() addons, err := addon.New(aws.StringValue(mft.Name)) if err != nil {
use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface; use Symfony\Component\DependencyInjection\ContainerBuilder; use Symfony\Component\DependencyInjection\Definition; use Symfony\Component\DependencyInjection\Reference; /** * @internal
enforceConnectionLimits(); } private boolean remoteConnectionExceedsLimit() { final int remotelyInitiatedConnectionsCount = Math.toIntExact( connectionsById.values().stream()
if more? if exhausted? kill_cursors raise StopIteration end @documents = get_more else raise StopIteration end else # cursor is closed here
} else { Log.d(TAG, "Activity was started with url " + feedUrl); setLoadingLayout(); // Remove subscribeonandroid.com from feed URL in order to subscribe to the actual feed URL if (feedUrl.contains("subscribeonandroid.com")) { feedUrl = feedUrl.replaceFirst("((www.)?(subscribeonandroid.com/))", ""); } if (savedInstanceState == null) { startFeedDownload(feedUrl, null, null);
"""Tests for Email Factory""" from google.cloud.forseti.common.util.email import email_factory from google.cloud.forseti.common.util.email import mailjet_connector from google.cloud.forseti.common.util.email import sendgrid_connector from google.cloud.forseti.common.util.errors import InvalidInputError from tests.unittest_utils import ForsetiTestCase
const tlsConfig = ClientApi.tlsInit(ca); let messageCallback, errorCallback = null; let isNotifyRunning = false; const startNotify = () => { notify(
// Copyright (c) 2020 Tigera, Inc. All rights reserved. // // Licensed under the Apache License, Version 2.0 (the "License"); // you may not use this file except in compliance with the License.
public String getLogFileParentDir() { ArrayList<String> elements = new ArrayList<String>(); if (mPrefix != null && mPrefix.length() > 0) { elements.add(mPrefix); } if (mTopic != null && mTopic.length() > 0) { elements.add(mTopic); } return StringUtils.join(elements, "/");
// would have different encoded representation than the one on disk. // To address this, this startup proceduce would attempt to scan all the accounts data. for each account data, we would // see if it's encoding aligns with the current messagepack encoder. If it doesn't we would update it's encoding. // then, depending if we found any such account data, we would reset the merkle trie and stored catchpoints. // once the upgrade is complete, the accountsInitialize would (if needed) rebuild the merke trie using the new // encoded accounts. //
$this->writable = null; $this->seekable = null; $this->size = null; $this->isPipe = null; return $oldResource; }
'id' => '1', ]; $config = $this->mockPickerConfig('tl_article', '42'); $provider = $this->createTableProvider( $this->mockFrameworkWithDcaLoader('tl_article'), $this->mockRouterWithExpectedParams($params), $this->mockConnectionForQuery('tl_article', 42, ['pid' => 1]) ); $provider->getUrl($config);
return value def __repr__(self): return utils.get_repr(self, none_ok=self.none_ok, minint=self.minval, maxint=self.maxval, minperc=self.minperc, maxperc=self.maxperc)
status := toChunkRequestStatus(entity) if status.Locators.Contains(request.Locator.ResultID, request.Locator.Index) { return fmt.Errorf("chunk request exists with same locator (result_id=%x, chunk_index=%d)", request.Locator.ResultID, request.Locator.Index) } status.Locators = append(status.Locators, &request.Locator)
"strings" "github.com/drud/ddev/pkg/plugins/platform" "github.com/spf13/cobra" )
print("\nSetting up cluster\n") redis_address = cluster.setup_cluster(config) print("\nLaunching notebook\n")  cluster.launch_notebook(config, port, redis_address=redis_address) cli.add_command(notebook)
return action } // TODO add a unit test for successfully creating a k8s service account, after issue https://github.com/google/knative-gcp/issues/657 gets solved. func TestAllCases(t *testing.T) { calSinkURL := sinkURI
require.Equal(t, 0, res.Code) res.RequireStderr(t, []string{""}) res.RequireStdout(t, []string{ "ID        STATUS  BUILD   CREATED     DESCRIPTION ", "release1  active  build1  2 days ago  description1", "release2          build1  2 days ago  description2", }) }) }
# root process broadcasts nccl id nccl_id = nccl.UniqueId() uid = str(nccl_id) store.set(self._nccl_root_id, uid) else: uid = store.get(self._nccl_root_id) nccl_id = nccl.UniqueId(uid) # needs to be set for nccl to work self._comm = nccl.Communicator(self._world_size,
bool Way::isSimpleLoop() const { return (getFirstNodeId() == getLastNodeId()); } bool Way::isValidPolygon() const
bottomSheetCallback.onSlide(null, 1.0f); } else if (Intent.ACTION_VIEW.equals(intent.getAction())) { handleDeeplink(intent.getData()); } // to avoid handling the intent twice when the configuration changes setIntent(new Intent(MainActivity.this, MainActivity.class));
init_db_connection(app) messybrainz.db.init_db_engine(app.config['MESSYBRAINZ_SQLALCHEMY_DATABASE_URI']) # OAuth from webserver.login import login_manager, provider login_manager.init_app(app)
// EnvironmentVPC holds the ID of the environment's VPC configuration. type EnvironmentVPC struct { ID               string   `json:"id"` PublicSubnetIDs  []string `json:"publicSubnetIDs"` PrivateSubnetIDs []string `json:"privateSubnetIDs"` } // EnvDescriber retrieves information about an environment.
if (al.volatileSpecifier()) result+=" volatile"; if (al.refQualifier()==RefQualifierLValue) result+=" &"; else if (al.refQualifier()==RefQualifierRValue) result+=" &&"; if (!al.trailingReturnType().isEmpty()) result+=al.trailingReturnType(); if (al.pureSpecifier()) result+=" =0"; return removeRedundantWhiteSpace(result); }
from Queue import Queue from anytree import RenderTree from anytree import AsciiStyle from anytree import node
case 'error_withdraw': $notice = [ 'error', __( 'An error occurred removing the learner\'s enrollment.', 'sensei-lms' ), ]; break; case 'success_withdraw':
} func (s *Service) GetFederationRelationship(ctx context.Context, req *trustdomainv1.GetFederationRelationshipRequest) (*types.FederationRelationship, error) { rpccontext.AddRPCAuditFields(ctx, logrus.Fields{telemetry.TrustDomainID: req.TrustDomain})  log := rpccontext.Logger(ctx) trustDomain, err := spiffeid.TrustDomainFromString(req.TrustDomain)
.execute(function (servicename, options, _) { options.servicename = promptServiceNameIfNotGiven(options, servicename, _); var progress = cli.interaction.progress($('Retrieving app settings')); try { result = mobile.getServiceSettings(options, _); } finally {
errNoSourceVolume           = errors.New("`source_volume` cannot be empty") errEmptyEFSConfig           = errors.New("bad EFS configuration: `efs` cannot be empty") errMissingPublishTopicField = errors.New("field `publish.topics[].name` cannot be empty") errDeadLetterQueueTries     = fmt.Errorf("DeadLetter `tries` field cannot exceed %d", deadLetterTriesMaxValue) ) // Conditional errors.
*/ @SafeVarargs @SuppressWarnings("varargs") static <U> Arbitrary<U> of(U... values) { return ofAll(Gen.choose(values)); } /**
self.assertEqual(string_table, expected_string_table) def testReadUTF16(self): """Test reading a UTF-16 string.""" self.assertEqual(binary.ReadUTF16(self._ascii_string_1), 'Whatis') self.assertEqual(binary.ReadUTF16(self._ascii_string_2), 'What is this?')
return (resourceType == ResourceType.DomainResource.ToString() && searchParameterName == "_text") || (resourceType == ResourceType.Resource.ToString() && searchParameterName == "_content") || (resourceType == ResourceType.Resource.ToString() && searchParameterName == "_query") #if Stu3 || (resourceType == ResourceType.DataElement.ToString() && (searchParameterName == "objectClass" || searchParameterName == "objectClassProperty")) #endif ;
<R_NEW> AggregateOperation1<T, A, R_NEW> andThen(DistributedFunction<? super R, ? extends R_NEW> thenFn); /** * Adapts this aggregate operation to a collector which can be passed to * {@link java.util.stream.Stream#collect(Collector)}. */ @Nonnull
s.postReceiveBatchHook(len(msgs)) } s.mu.Lock() // Update these even if there was an error; the next call to Receive will // try again to get more messages, and updateBatchSize based on 0 messages // proceesed, which is fine. s.lastBatchRecv = time.Now() s.lastBatchNumMsgs = len(msgs) close(s.waitc)
e_repr = np.zeros((4, 5)) n_repr[[1, 3]] = 1 e_repr[[1, 3]] = 1 n_repr = F.copy_to(F.zerocopy_from_numpy(n_repr), F.ctx()) e_repr = F.copy_to(F.zerocopy_from_numpy(e_repr), F.ctx()) g.ndata['a'] = n_repr g.edata['a'] = e_repr
$get_request_response_body  = ! isset( $config['generate_get_request_data']['body'] ) ? '' : $config['generate_get_request_data']['body']; $request_timeout            = isset( $config['request_timeout'] ) ? $config['request_timeout'] : false; Functions\expect( 'wp_remote_post' ) ->atMost() ->times( 1 )
# Cell add_docs(TfmdLists, setup="Transform setup with self", decode="From `Pipeline`", show="From `Pipeline`", overlapping_splits="All splits that are in more than one split", subset="New `TfmdLists` with same tfms that only includes items in `i`th split", infer_idx="Finds the index where `self.tfms` can be applied to `x`, depending on the type of `x`",
this.isDefault = this.isDefault || false; this.environment = environment; this.registeredResourceNamespaces = _.without(subscriptionData.registeredResourceNamespaces.toString() .split(','), 'undefined', ''); this.registeredProviders = _.without(subscriptionData.registeredProviders.toString() .split(','), 'undefined', ''); }
func fromSystemError(err tchannel.SystemError) error { code, ok := TChannelCodeToCode[err.Code()] if !ok { return yarpcerrors.InternalErrorf("got tchannel.SystemError %v which did not have a matching YARPC code", err) } return yarpcerrors.FromHeaders(code, "", err.Message()) }
// error_reporting(0); include_once __DIR__ . '/../config/config.inc.php'; include 'style/wrapper.inc.php'; function servercmp($a, $b) { global $usercount;
Function applied to size values before applying scaling, to remove values lower than zero.""") style_opts = (['cmap', 'palette', 'marker', 'size', 's'] + line_properties + fill_properties) _plot_methods = dict(single='scatter', batched='scatter')
var force = !!options.quiet; if (utils.fileExists(rdpFile, _)) { if (force !== true) { force = interaction.confirm(util.format($('Do you want to overwrite file %s? '), rdpFile), _); if (force !== true) { return; }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4423-SEA 1645541394 4241859337</p> <hr> <p>Varnish cache server</p> </body>
if (n_runnable_jobs >= n_not_excluded && queue_est > (gstate.work_buf_min() * n_not_excluded)/rwf.ninstances ) { if (log_flags.work_fetch_debug) { printf("%s: setting reason to BUFFER_FULL\n", p->project_name); } return RSC_REASON_BUFFER_FULL; } }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4436-SEA 1645533494 996826832</p> <hr> <p>Varnish cache server</p> </body>
} const text = message.join('\n'); const copyToClipboard = bridge().showConfirmMessageBox(text, { icon: `${bridge().electronApp().buildDir()}/icons/128x128.png`, buttons: [_('Copy'), _('OK')], defaultId: 1, }); if (copyToClipboard) {
*/ private final ReentrantLock l; /** * Create a new cache segment. *  @param maxMemory the maximum memory to use
} }() ledger_vacuum_count.Inc(nil) vacuumStats, err := au.dbs.wdb.Vacuum(ctx) close(vacuumExitCh) vacuumLoggingAbort.Wait()
pass @property def range(self): """
def follow_vk_redirect(cls, url): # If this is a 'videos' catalog URL with an video ID in the GET request, get that instead parsed_url = urlparse(url) if parsed_url.path.startswith('/videos'): query = {v[0]: v[1] for v in [q.split('=') for q in parsed_url.query.split('&')] if v[0] == 'z'} try: true_path = unquote(query['z']).split('/')[0]
func (n *SMTPNotifier) dial() error { log.Debugf("Notifier SMTP client attempting connection to %s", n.address) if n.port == 465 { log.Warnf("Notifier SMTP client configured to connect to a SMTPS server. It's highly recommended you use a non SMTPS port and STARTTLS instead of SMTPS, as the protocol is long deprecated.") conn, err := tls.Dial("tcp", n.address, n.tlsConfig) if err != nil { return err
r.log.CDebugf(ctx, "Waiting for %d journal bytes to flush", firstStatus.UnflushedBytes) bytesFmt := "(%.2f%%) %s... " str := fmt.Sprintf( bytesFmt, float64(0), humanizeBytes(0, firstStatus.UnflushedBytes))
"""Get a list of assets from the assets table. Args: asset_ids (list): a list of ids for the assets to be retrieved from the database. Returns:
def test_defaults_replacement(self, klass, monkeypatch): configtypes.FontBase.set_defaults(['Terminus'], '23pt') assert klass().to_py('23pt default_family') == '23pt Terminus' class TestFontFamily:
public static final FamilyOperandTypeChecker STRING_STRING_STRING = family(SqlTypeFamily.STRING, SqlTypeFamily.STRING, SqlTypeFamily.STRING); public static final FamilyOperandTypeChecker STRING_STRING_OPTIONAL_STRING = family(ImmutableList.of(SqlTypeFamily.STRING, SqlTypeFamily.STRING, SqlTypeFamily.STRING), // Third operand optional (operand index 0, 1, 2) number -> number == 2);
import ( "bufio" "bytes" "net/http" "github.com/go-chassis/go-chassis/core/handler"
AttachChild(m_icon); m_link_text = new LinkText(GG::X0, GG::Y0, GG::X1, m_sitrep_entry.GetText() + " ", ClientUI::GetFont(ClientUI::Pts()), GG::FORMAT_LEFT | GG::FORMAT_VCENTER | GG::FORMAT_WORDBREAK, ClientUI::TextColor()); m_link_text->SetDecorator(VarText::EMPIRE_ID_TAG, new ColorEmpire()); AttachChild(m_link_text);
"Couldn't compute ratio for dividend sid=2, ex_date=1990-10-19," " amount=0.100", )) self.assertTrue(self.log_handler.has_warning( "Couldn't compute ratio for dividend sid=2, ex_date=1990-11-01," " amount=0.100", )) self.assertTrue(self.log_handler.has_warning( 'Dividend ratio <= 0 for dividend sid=1, ex_date=1990-10-17,' ' amount=0.510',
int Dialog::ArmySplitTroop( const uint32_t freeSlots, const uint32_t redistributeMax, const bool savelastTroop, uint32_t & redistributeCount, bool & useFastSplit ) { assert( freeSlots > 0 );  fheroes2::Display & display = fheroes2::Display::instance(); // cursor
public const string GeneralEndingRegex = @"^\s*((\.,)|\.|,|!|\?)?\s*$"; public const string MiddlePauseRegex = @"\s*(,)\s*"; public const string DurationConnectorRegex = @"^\s*(?<connector>\s+|and|,)\s*$"; public const string PrefixArticleRegex = @"\bthe\s+"; public static readonly string NumberAsTimeRegex = $@"\b({EngTimeRegex}|{PeriodHourNumRegex}|{BaseDateTime.HourRegex})\b"; public static readonly string TimeBeforeAfterRegex = $@"\b(((?<=\b(before|after)\s+)({EngTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}|{MidTimeRegex}))|{MidTimeRegex})\b"; public const string DateNumberConnectorRegex = @"^\s*(?<connector>\s+at)\s*$";
@JsonProperty private String s3UploaderBucket; @JsonProperty private boolean useLocalDownloadService = false;
dwellingTobuild = ( Race::NECR == race ? BUILD_SHRINE : BUILD_TAVERN ); return ConstructionDialogResult::Build; } if ( le.MouseCursor( buildingThievesGuild.GetArea() ) && buildingThievesGuild.QueueEventProcessing( buttonExit ) ) { dwellingTobuild = BUILD_THIEVESGUILD; return ConstructionDialogResult::Build; }
if (len == 1) { /* bind=src */ m->dest = construct_path(mntarray[0], false); } else if (len == 2) { /* bind=src:option or bind=src:dest */ if (strncmp(mntarray[1], "rw", strlen(mntarray[1])) == 0) m->options = strdup("rw"); if (strncmp(mntarray[1], "ro", strlen(mntarray[1])) == 0) m->options = strdup("ro"); if (m->options)
// Decide on a modal message based on the opt_type. If opt_type was not // provided, default to the original message for scalar variables. var newMsg = ''; if (opt_type === Blockly.LIST_VARIABLE_TYPE) { newMsg = Blockly.Msg.NEW_LIST_TITLE; } else if (opt_type === Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE) { newMsg = Blockly.Msg.NEW_BROADCAST_MESSAGE_TITLE; } else { newMsg = Blockly.Msg.NEW_VARIABLE_TITLE;
if ( buf.size() ) { Surface surf( Size( head.width, head.height ), /*false*/ true ); // accepting transparency const RGBA clkey = RGBA( 0xFF, 0, 0xFF ); surf.Fill( clkey ); surf.SetColorKey( clkey ); surf.Fill( RGBA( 0, 0, 0, 0xFF ) ); // filling with transparent color if ( 0x20 == head.type ) SpriteDrawICNv2( surf, buf, debug );
from __future__ import print_function import glob import locale import os import sys
} private SearchRow getSearchRow(SearchRow row, int columnId, Value v, boolean max) { if (row == null) { row = table.getTemplateRow(); } else {
} // epoch contract name and get code for contract epochContractName := systemcontracts.ContractNameEpoch epochContractCode := contracts.FlowEpoch(flagFungibleTokenAddress, flagFlowTokenAddress, flagIDTableAddress, systemContracts.ClusterQC.Address.Hex(), systemContracts.DKG.Address.Hex())
package org.flowable.editor.language.xml; import static org.assertj.core.api.Assertions.assertThat; import static org.assertj.core.api.Assertions.tuple; import org.flowable.bpmn.BpmnAutoLayout; import org.flowable.bpmn.model.BpmnModel;
try: backup_archive_path = shutil.make_archive(backup_archive_path, BACKUP_ARCHIVE_FORMAT, directory) logs.log( 'Created corpus backup file.', backup_archive_path=backup_archive_path, directory=directory, size=os.path.getsize(backup_archive_path)) dated_backup_url = gcs_url_for_backup_file( backup_bucket_name, corpus.engine, corpus.project_qualified_target_name,
// The limit menu depends on other panels that may set a filter query, e.g. search and filter. // In order to correctly calculate the total row count, the limit menu must be compiled last. // We isnert a placeholder here and compile the limit menu after all other panels. if ($strSubPanel == 'limit') { // Set placeholder to inject compiled limit menu later
def get_container_network_for_lambda(): global LAMBDA_CONTAINER_NETWORK if config.LAMBDA_DOCKER_NETWORK: return config.LAMBDA_DOCKER_NETWORK if LAMBDA_CONTAINER_NETWORK is None: try: if config.is_in_docker: networks = DOCKER_CLIENT.get_networks(bootstrap.get_main_container_name())
module.exports = { cleanDistDir: false, // update me env: { nextConfigEnv: process.env.ENV_KEY_IN_NEXT_CONFIG, nextConfigPublicEnv: process.env.NEXT_PUBLIC_ENV_KEY_IN_NEXT_CONFIG,
self._assert_ext_pkg_file_status(expected_to_be_present=False, extension_version=extension_version) def test_ext_zip_file_packages_removed_in_update_and_uninstall_case(self, *args): test_data = WireProtocolData(DATA_FILE) exthandlers_handler, protocol = self._create_mock(test_data, *args)
sockdir, dir_stat.st_uid, dir_stat.st_mode)) print('sockfile: {} / owner {} / mode {:o}'.format( sockfile, file_stat.st_uid, file_stat.st_mode)) assert file_owner_ok or dir_owner_ok assert file_mode_ok or dir_mode_ok
public Writer(BlockFileWriter bfw, int blockSize) throws IOException { this(bfw, blockSize, (int) DefaultConfiguration.getInstance().getAsBytes(Property.TABLE_FILE_COMPRESSED_BLOCK_SIZE_INDEX), null, null); } public Writer(BlockFileWriter bfw, int blockSize, int indexBlockSize, SamplerConfigurationImpl samplerConfig, Sampler sampler) throws IOException {
HeartbeatMonitorsPerService ID = "heartbeat_monitors_per_service" // Only limits future overrides (e.g. end in the future). UserOverridesPerSchedule ID = "user_overrides_per_schedule" CalendarSubscriptionsPerUser ID = "calendar_subscriptions_per_user" ) // Valid returns nil if a given ID is valid, a validation error is returned otherwise.
private static final int DEFAULT_WORLD_STATE_MAX_REQUESTS_WITHOUT_PROGRESS = 1000; private static final long DEFAULT_WORLD_STATE_MIN_MILLIS_BEFORE_STALLING = TimeUnit.MINUTES.toMillis(5); // Fast sync config private final int fastSyncPivotDistance;
// IsCodeStarConnection indicates to the manifest if this source requires a CSC connection. func (s Source) IsCodeStarConnection() bool { switch s.ProviderName { case GithubProviderName: return true case BitbucketProviderName: return true default: return false } } func validateVersion(pm *PipelineManifest) (PipelineSchemaMajorVersion, error) {
return reply, nil } // GetAllByzCoinIDs returns the list of Byzcoin chains known by the server given in // parameter. func (c *Client) GetAllByzCoinIDs(si *network.ServerIdentity) (*GetAllByzCoinIDsResponse, error) { reply := &GetAllByzCoinIDsResponse{} if err := c.SendProtobuf(si, &GetAllByzCoinIDsRequest{}, reply); err != nil { return nil, err }
package component import "github.com/vmware-tanzu/octant/internal/util/json" type SelectFile struct { Base
// Get the mtx before starting the rotation // In this way, the client do not create new connections until the new SVID is received r.rotMtx.Lock() defer r.rotMtx.Unlock() r.c.Log.Debug("Rotating agent SVID")
import ( "fmt" "sync" "k8s.io/api/core/v1" "github.com/kiali/kiali/config" "github.com/kiali/kiali/kubernetes" "github.com/kiali/kiali/log" "github.com/kiali/kiali/prometheus" "github.com/kiali/kiali/services/models" )
bookkeeping.Block SeedProof crypto.VrfProof `codec:"sdpf"` OriginalPeriod   period         `codec:"oper"` OriginalProposer basics.Address `codec:"oprop"` } // ToBeHashed implements the Hashable interface.
"io/ioutil" "github.com/go-sql-driver/mysql" "github.com/jinzhu/gorm" // gorm mysql `cloudsql` dialect, for GCP
* \author [Benjamin Walton](https://github.com/bwalton24) * \author [Shiqi Sheng](https://github.com/shiqisheng00) */ #include <cassert>        /// for assert #include <cmath>         /// for mathematical functions #include <functional>   /// for passing in functions #include <iostream>    /// for IO operations
import ( "github.com/dedis/cothority/omniledger/darc" ol "github.com/dedis/cothority/omniledger/service" "github.com/dedis/kyber" "github.com/dedis/onet" "github.com/dedis/onet/network"
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4471-SEA 1645540616 4077615373</p> <hr> <p>Varnish cache server</p> </body>
self._lines = None def get_stock_info(self, product, options): """ Hook for implementing strategies that depend on product options """ # The built-in strategies don't use options, so initially disregard # them. return self.strategy.fetch_for_product(product) def add_product(self, product, quantity=1, options=None):
} func extractSubBenchmark(b *testing.B, fn func(*testing.B, *http.Request)) { b.Run("Sampled", func(b *testing.B) { req, _ := http.NewRequest("GET", "http://example.com", nil) req.Header.Set("traceparent", "00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01")
configureJetService(config); HazelcastInstanceImpl hazelcastInstance = ((HazelcastInstanceProxy) Hazelcast.newHazelcastInstance(config.getHazelcastConfig())).getOriginal(); JetInstanceImpl jetInstance = new JetInstanceImpl(hazelcastInstance, config); jetInstance.registerShutdownHook(); return jetInstance; } /**
.SelectMany(handler => handler.GetSupportedPaymentMethods().Select(id => id.ToString())) .Distinct(); var syncStatus = _dashBoard.GetAll() .Where(summary => summary.Network.ShowSyncSummary) .Select(summary => new ServerInfoSyncStatusData { CryptoCode = summary.Network.CryptoCode,
self._scheduler.add_worker(self._id, {'workers': self.worker_processes}) @rpc_message_callback def dispatch_scheduler_message(self, task_id, message_id, message, **kwargs): if not self._config.receive_messages: return
</p> <p> <button class="button button-primary" data-enable-tracking="yes"> <?php _e( 'Enable Usage Tracking', 'woothemes-sensei' ) ?> </button> <button class="button" data-enable-tracking="no"> <?php _e( 'Disable Usage Tracking', 'woothemes-sensei' ) ?> </button> <span id="progress" class="spinner alignleft"></span> </p>
} else { #ifdef HELLFIRE if (2 * curlv < AllItemsList[i].iMinMLvl) #else if (2 * currlevel < AllItemsList[i].iMinMLvl) #endif okflag = FALSE; } if (AllItemsList[i].itype == ITYPE_MISC) okflag = FALSE;
RESOURCE = 'resource' IAM_POLICY = 'iam_policy' GCS_POLICY = 'gcs_policy' SUPPORTED_TYPECLASS = [RESOURCE, IAM_POLICY, GCS_POLICY] class InventoryIndex(BASE):
return errors.New("service name must be at least two characters long") } return multierr.Combine( checkHyphens(name), checkFirstCharacter(name), checkForbiddenCharacters(name), checkUUIDs(name), ) }
if ( $phpunit_polyfills_error || ! file_exists( $phpunit_polyfills_autoloader ) ) { echo 'Error: The PHPUnit Polyfills library is a requirement for running the WP test suite.' . PHP_EOL; if ( isset( $phpunit_polyfills_path ) ) { printf( 'The PHPUnit Polyfills autoload file was not found in "%s"' . PHP_EOL, WP_TESTS_PHPUNIT_POLYFILLS_PATH ); echo 'Please verify that the file path provided in the WP_TESTS_PHPUNIT_POLYFILLS_PATH constant is correct.' . PHP_EOL; } else {
} var statusesAllowedToDisplay = new List<InvoiceStatus>() { InvoiceStatus.New }; var validInvoice = result.Invoices.FirstOrDefault(invoice => statusesAllowedToDisplay.Contains(invoice.Status)); if (validInvoice != null) {
try { asyncHttpClient .post(url, Header.newInstance().addParam(Constants.NACOS_SERVER_HEADER, VersionUtils.version), Query.EMPTY, getSelf(), reference.getType(), new Callback<String>() { @Override public void onReceive(RestResult<String> result) { if (result.getCode() == HttpStatus.NOT_IMPLEMENTED.value()
int s2n_stuffer_read(struct s2n_stuffer *stuffer, struct s2n_blob *out) { notnull_check(out); return s2n_stuffer_read_bytes(stuffer, out->data, out->size); }
return nameAllocator; } public CryptoService getCryptoService() { if (cryptoService == null) { throw new CryptoService.CryptoException("Crypto service not initialized."); }
dali_cflags, dali_lflags = get_dali_build_flags() tf_cflags, tf_lflags = get_tf_build_flags() cuda_cflags, cuda_lflags = get_cuda_build_flags()  filenames = ['daliop.cc', 'dali_dataset_op.cc'] plugin_src = '' for filename in filenames: plugin_src = plugin_src + ' ' + self.src_path + '/' + filename  lib_path = self.plugin_dest_dir + '/libdali_tf_current.so' cmd = compiler + ' -Wl,-R,\'$ORIGIN/..\' -std=c++11 -DNDEBUG -shared ' \ + plugin_src + ' -o ' + lib_path + ' -fPIC ' + dali_cflags + ' ' \
} } else if (name==='dangerouslySetInnerHTML') { if (value!=null && (old==null || value.__html!==old.__html)) node.innerHTML = value.__html; } else if (name[0]=='o' && name[1]=='n') { let useCapture = name !== (name=name.replace(/Capture$/, ''));
result[i] += fmt.Sprintf(" (maxLoss: %.1f%%)", exp.ExpectedPacketLoss.MaxPercent) } } if exp.ErrorStr != "" { result[i] += " " + exp.ErrorStr } } return result
f'shapes cannot be applied to ' f'{expr_stype.get_verbosename(ctx.env.schema)}' ) view_type = viewgen.process_view( stype=expr_stype, path_id=expr.path_id, elements=shape.elements, parser_context=shape.context, ctx=ctx) return setgen.ensure_set(expr, type_override=view_type, ctx=ctx)
.WithMinIterationCount(15) .WithMaxIterationCount(20) // we don't want to run more that 20 iterations .AsDefault()) // tell BDN that this are our default settings .WithArtifactsPath(Path.Combine( Path.GetDirectoryName(typeof(Program).Assembly.Location), "BenchmarkDotNet.Artifacts")) .With(MemoryDiagnoser.Default) // MemoryDiagnoser is enabled by default .With(new OperatingSystemFilter()) .With(JsonExporter.Full) // make sure we export to Json (for BenchView integration purpose)
from . import NeighborSearch from . import formats from . import pkdtree from . import nsgrid
(target_h + eps)) # view(..., -1) does not work for empty tensor loss_comb = torch.stack([loss_dx, loss_dy, loss_dw, loss_dh], dim=-1).flatten(1) loss = torch.where(loss_comb < beta, 0.5 * loss_comb * loss_comb / beta, loss_comb - 0.5 * beta)
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4438-SEA 1645530232 3081338134</p> <hr> <p>Varnish cache server</p> </body>
// switch (priority) { case MSG_INTERNAL_ERROR: snprintf(event_msg, sizeof(event_msg), "[error] %s", message); break; case MSG_SCHEDULER_ALERT: snprintf(event_msg, sizeof(event_msg), "%.64s: %s", _("Message from server"), message ); break;
defer cancel() if err := w.WriteMsgWithContext(ctx, headersP2PToPB(headers)); err != nil { return fmt.Errorf("write message: %w", err) } h := new(pb.Headers) if err := r.ReadMsgWithContext(ctx, h); err != nil { return fmt.Errorf("read message: %w", err) } stream.headers = headersPBToP2P(h)
UnusedKeys   []string `hcl:",unusedKeys"` } type federationConfig struct { BundleEndpoint *bundleEndpointConfig         `hcl:"bundle_endpoint"` FederateWith   map[string]federateWithConfig `hcl:"federate_with"` }  type bundleEndpointConfig struct { Address    string                    `hcl:"address"` Port       int                       `hcl:"port"` ACME       *bundleEndpointACMEConfig `hcl:"acme"`
goto Exit; } /* call post_handler_generation hooks */ mrb_funcall_argv(mrb, h2o_mruby_eval_expr(mrb, "H2O::ConfigurationContext.instance"), mrb_intern_lit(mrb, "post_handler_generation"), 1, &result); if (mrb->exc != NULL) { mrb_value obj = mrb_funcall(mrb, mrb_obj_value(mrb->exc), "inspect", 0); struct RString *error = mrb_str_ptr(obj);
func Procedure(name string, handler interface{}) []transport.Procedure { return []transport.Procedure{ { Name: name, HandlerSpec: transport.NewUnaryHandlerSpec( wrapUnaryHandler(name, handler), ),
rightClickHandler.call(this, ev, term); } if (term.browser.isFirefox || term.browser.isMSIE) { on(this.element, 'mousedown', function (ev) { if (ev.button == 2) { rightClickHandlerWrapper(ev);
vpcID := envDescription.EnvironmentVPC.ID subnets, err := o.subnetLister.ListVPCSubnets(vpcID) if err != nil { return nil, fmt.Errorf("list subnets of vpc %s in environment %s: %w", vpcID, o.envName, err) } var cidrBlocks []string for _, subnet := range subnets.Public {
if(empty($mybb->input['groups'])) { $mybb->input['groups'] = ''; } if(empty($mybb->input['forums']))
In order to query this endpoint, send a GET request. A JSON response will be returned, with one of three codes. :statuscode 200: The user token is (in)valid. :statuscode 400: No token was sent to the endpoint. """ auth_token = request.args.get('token', '') if not auth_token:
warn(message) print(final_message) def load_data(path:PathOrStr, file:PathLikeOrBinaryStream='data_save.pkl', bs:int=64, val_bs:int=None, num_workers:int=defaults.cpus, dl_tfms:Optional[Collection[Callable]]=None, device:torch.device=None, collate_fn:Callable=data_collate, no_check:bool=False, **kwargs)->DataBunch: "Load a saved `DataBunch` from `path/file`. `file` can be file-like (file or buffer)" source = Path(path)/file if is_pathlike(file) else file ll = torch.load(source, map_location='cpu') if defaults.device == torch.device('cpu') else torch.load(source) return ll.databunch(path=path, bs=bs, val_bs=val_bs, num_workers=num_workers, dl_tfms=dl_tfms, device=device,
if (typeof req.body.code !== 'string') { return res.send({error: 'Body parameter \'code\' must be a string'}); } const input = {[normalizePath(req.body.name, true)]: {content: req.body.code.replace(/\r\n/g, '\n')}}; this.compile_solidity_code(input, {}, true, {}, (errors, result) => { const responseData = {errors: errors, result: result}; this.logger.trace(`POST response /embark-api/contract/compile:\n ${JSON.stringify(responseData)}`);
*/ @Nonnull public static <K, V, R> ProcessorMetaSupplier readHdfsP( @Nonnull Configuration configuration, @Nonnull BiFunctionEx<K, V, R> projectionFn ) { configuration = SerializableConfiguration.asSerializable(configuration); if (configuration.get("mapreduce.job.inputformat.class") != null) { return new ReadHdfsNewApiP.MetaSupplier<>(configuration, projectionFn); } else { return new ReadHdfsOldApiP.MetaSupplier<>((JobConf) configuration, projectionFn); } }
return buff.toString(); } if (table.isView() && ((TableView) table).isRecursive()) { buff.append(table.getSchema().getSQL()).append('.').append(Parser.quoteIdentifier(table.getName())); } else { buff.append(table.getSQL()); }
/** * @given initialized storage, all permissions * @when get account transactions of non existing account * @then return error */ TEST_F(GetAccountTransactionsExecutorTest, InvalidNoAccount) { addAllPerms();
import java.io.File; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Comparator; import java.util.EnumSet; import java.util.List; import java.util.Map; import java.util.stream.Collectors; import org.infinispan.protostream.FileDescriptorSource;
} recordSchema = Schema.createRecord(recordName, null, null, false, fields); if (struct.isConvertedFromUnionSchema()) { recordSchema.addProp(AvroSchemaUtil.UNION_SCHEMA_TO_RECORD, true); } results.put(struct, recordSchema);
vctx, cancel := context.WithTimeout(ctx, 2*time.Second) defer cancel() go helper.VerifyAndRespondNextTargetEvent(ctx, t, t3.Key(), &e, nil, http.StatusInternalServerError, 0) go helper.VerifyNextTargetRetryEvent(ctx, t, t3.Key(), &e) helper.SendEventToDecoupleQueue(ctx, t, b2.Key(), &e) <-vctx.Done() }) t.Run("event with delivery timeout was sent to retry queue", func(t *testing.T) { // Set timeout context so that verification can be done before // exiting test func. vctx, cancel := context.WithTimeout(ctx, 2*time.Second)
} @VisibleForTesting Optional<EnodeURL> getLocalEnode() { return networkRunner.getNetwork().getLocalEnode(); } }
} public String getUploaderRetries() { return getString("secor.upload.retries"); }  public String getUploaderRetryBackoffMillis() { return getString("secor.upload.retry.backoff"); } public String getUploadManagerClass() {
target (torch.Tensor): The learning target of the iou-aware classification score with shape (N, C), C is the number of classes. weight (torch.Tensor, optional): The weight of loss for each prediction. Defaults to None. alpha (float, optional): A balance factor for the negative part of Varifocal Loss, which is different from the alpha of Focal Loss. Defaults to 0.75. gamma (float, optional): The gamma for calculating the modulating factor. Defaults to 2.0.
// if the db name is equal to the schema name ArrayList<String> list = Utils.newSmallArrayList(); do { if (currentTokenType != DOT) { list.add(readUniqueIdentifier()); } else if(database.getMode().allowEmptySchemaValuesAsDefaultSchema) { list.add(null); } } while (readIf(DOT)); schemaName = session.getCurrentSchemaName();
case 'extensions': if ($varValue) { $this->arrAttributes['accept'] = '.' . implode(',.', StringUtil::trimsplit(',', strtolower($varValue))); } parent::__set($strKey, $varValue); break;
// Set the topic being used. topic.Status.TopicID = topic.Spec.Topic // If enablePublisher is false, then skip creating the publisher. if enablePublisher := topic.Spec.EnablePublisher; enablePublisher != nil && !*enablePublisher { // TODO delete previous publishers before the 0.16 cut: https://github.com/google/knative-gcp/issues/1217 return reconciler.NewEvent(corev1.EventTypeNormal, reconciledSuccessReason, `Topic reconciled: "%s/%s"`, topic.Namespace, topic.Name) }
from cython.cimports.libc.math import sin @cython.cclass class Function:
} } private function handleLegacyRouting(array $config, ContainerBuilder $container, YamlFileLoader $loader): void { $count = 0;
using System; using System.Collections.Generic;
watchFunction(captureSelection)(); } let textSelectButton;  window.addEventListener("mouseup", watchFunction(function (event) { if (textSelectButton) { textSelectButton.parentNode.removeChild(textSelectButton); textSelectButton = null; }  if (event.target.className === "pageshot-textbutton" && currentState !== "text") { return; }
*/ public final class Compression { private static final Logger log = LoggerFactory.getLogger(Compression.class); /** * Prevent the instantiation of this class.
"Bio.KEGG.Compound", "Bio.KEGG.Enzyme", "Bio.NMR.xpktools", "Bio.MaxEntropy", "Bio.motifs", "Bio.motifs.applications._xxmotif", "Bio.pairwise2",
if err != nil { return nil, fmt.Errorf("invalid package import path: %s", err) } return generate(pkgName, pkgPath, c, nil) } func runGen(c *cobra.Command, args []string) ([]string, error) {
return $button; } /** * This function search usergroups for a user * If $mine = true then usergroups are those that have been created by the current user * else this function provides usergroups which contain the current user * * The object \CActiveDataProvider returned is used to generate the view in application/views/admin/usergroup/usergroups_view.php * * @param bool $mine * @return \CActiveDataProvider */ function searchMine($mine) { $pageSize=Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']);
for _, o := range makeWritable { stat, err := os.Stat(o) if err != nil { util.Warning("Unable to ensure write permissions: %v", err) continue }
receiver.mu.Lock() defer receiver.mu.Unlock() subscription, err := receiver.connection.Subscribe(messageTopic, messageHandler) if err != nil { err = fmt.Errorf("failed subscribe message '%s'. %s", messageTopic, err) return err } receiver.subs[messageTopic] = subscription return nil }
"context" "fmt" "io" "github.com/ethersphere/bee/pkg/file" "github.com/ethersphere/bee/pkg/file/splitter/internal"
{ pr = this.Config.DatePeriodParser.Parse(er, referenceTime); } else if (er.Type.Equals(Constants.SYS_DATETIME_TIMEPERIOD)) { pr = this.Config.TimePeriodParser.Parse(er, referenceTime);
node.mu.Lock() defer node.mu.Unlock() // start accepting connections node.net.Start() node.config.NetAddress, _ = node.net.Address()
finding_id = finding_list[0] to_be_updated_finding = finding_list[1] if to_be_updated_finding['state'] == 'INACTIVE': continue  if finding_id not in new_findings_map: to_be_updated_finding['state'] = 'INACTIVE' current_time = date_time.get_utc_now_datetime() actual_time = current_time.strftime(
eval_hook(val_dataloader, **eval_cfg), priority='LOW') resume_from = None if cfg.resume_from is None and cfg.get('auto_resume'): resume_from = find_latest_checkpoint(cfg.work_dir) if resume_from is not None: cfg.resume_from = resume_from
// ACMEIssuerHTTP01Config is a structure containing the ACME HTTP configuration options type ACMEIssuerHTTP01Config struct { ServiceType corev1.ServiceType `json:"serviceType,omitempty"` } // ACMEIssuerDNS01Config is a structure containing the ACME DNS configuration
let fullPageButton = document.getElementById("full-page-button"); let fullPageButtonScrollable = document.getElementById("full-page-button-scrollable"); let frameElement = document.getElementById("frame"); let offset = (fullPageButtonScrollable.clientHeight / 2); window.onscroll = function (e) { if (e.pageY > 0) { toolbar.style.visibility = "visible";
void TabMessage::processUserMessageEvent(const Event_UserMessage &event) { auto userInfo = event.sender_name() == otherUserInfo->name() ? otherUserInfo : ownUserInfo; const UserLevelFlags userLevel(userInfo->user_level()); const QString userPriv = QString::fromStdString(userInfo->privlevel());  chatView->appendMessage(QString::fromStdString(event.message()), 0,QString::fromStdString(event.sender_name()), userLevel, userPriv, true); if (tabSupervisor->currentIndex() != tabSupervisor->indexOf(this)) soundEngine->playSound("private_message");
func (*topic) IsRetryable(error) bool { return false } // As implements driver.Topic.As. // It supports *topic so that NewSubscription can recover a *topic // from the concrete type (see below). External users won't be able // to use As because topic isn't exported. func (t *topic) As(i interface{}) bool { x, ok := i.(**topic) if !ok {
public: CommandExecutorTest() { domain_id = "domain"; name = "id"; account_id = name + "@" + domain_id; role_permissions.set( shared_model::interface::permissions::Role::kAddMySignatory);
TempData.SetStatusMessageModel(new StatusMessageModel() { Severity = StatusMessageModel.StatusSeverity.Error, Html = $"To create an invoice, you need to <a href='{Url.Action(nameof(StoresController.UpdateStore), "Stores", new { storeId = store.Id })}' class='alert-link'>set up your wallet</a> first", AllowDismiss = false }); return View(model);
if isinstance(edges, dict): # TODO(zhengda) we need to directly generate subgraph of all relations with # one invocation. if isinstance(edges, tuple): subg = {etype: self.find_edges(edges[etype], etype[1]) for etype in edges} else: subg = {self._etype2canonical[etype]: self.find_edges(edges[etype], etype) \ for etype in edges} num_nodes = {ntype: self.number_of_nodes(ntype) for ntype in self.ntypes} subg = dgl_heterograph(subg, num_nodes_dict=num_nodes) else:
caf::actor_system sys{cfg}; fixup_logger(cfg); // Print the configuration file(s) that were loaded. if (!cfg.config_file_path.empty()) cfg.config_paths.emplace_back(std::move(cfg.config_file_path)); for (auto& path : cfg.config_paths) VAST_INFO_ANON("loaded configuration file:", path); using string_list = std::vector<std::string>; auto schema_dirs = std::vector<vast::path>{}; if (!caf::get_or(cfg, "system.no-default-schema", false)) {
HealthCheckPath:    aws.String(defaultHealthCheckPath), HealthyThreshold:   aws.Int64(defaultHealthyThreshold), UnhealthyThreshold: aws.Int64(defaultUnhealthyThreshold), Interval:           aws.Int64(defaultIntervalinS), Timeout:            aws.Int64(defaultTimeoutinS), } if lc.RoutingRule.HealthCheck.HealthCheckArgs.Path != nil { opts.HealthCheckPath = lc.RoutingRule.HealthCheck.HealthCheckArgs.Path
public static readonly string NumbersFractionPercentageRegex = $@"{ZeroToNineFullHalfRegex}{{1,3}}([,，]{ZeroToNineFullHalfRegex}{{3}})+\s*개\s*백\s*분\s*점"; public static readonly string SimpleIntegerPercentageRegex = $@"(?<!%|\d)({NegativeNumberTermsRegexNum}|{NegativeNumberTermsRegex})?({AllIntRegex}|{ZeroToNineFullHalfRegex}|{RoundNumberIntegerRegex})+([\.．]{ZeroToNineFullHalfRegex}+)?(\s*)([％%]|(퍼\s*센\s*트)|(프\s*로)|(퍼\s*센\s*티\s*지))(?!\d)"; public const string TillRegex = @"(부터|에서|--|-|—|–|——|~)"; public const string MoreRegex = @"(초과|많|높|크|더많|더높|더크|넘는|초과이다|크고)"; public const string LessRegex = @"(미만|적|낮|작|더적|더낮|더적|이하|이하이다|<|아래|작다)"; public const string EqualRegex = @"(동일|같|=|(해당하는)|는|그와 같다)"; public const string RangePrefixLessRegex = @"(까지최소|(?<!>|=)<|≤)";
// The .NET Foundation licenses this file to you under the MIT license. // See the LICENSE file in the project root for more information. using System; using System.ComponentModel; using System.Diagnostics; using System.IO; using System.Runtime.InteropServices;   #if BIT64 using nuint = System.UInt64; #else
let rpcApi = this.config.rpcApi; let wsApi = this.config.wsApi; let args = ['--ipcdisable']; // Add --ipcdisable as ipc is not needed for Whisper and it conflicts on Windows with the blockchain node args.push(`--port="${this.communicationConfig.connection.port || 30304}"`); async.series([ function commonOptions(callback) { let cmd = self.commonOptions();
with self.assertRaisesMessage(CommandError, 'Course "645343" does not exist'): management.call_command('exportcourse', 645343, stdout=StringIO(), verbosity=3) def test_language_preserved(self): with translation.override('en'): management.call_command('exportcourse', 2, stdout=StringIO()) self.assertEqual(translation.get_language(), 'en', "Same language")
return { updatedCallback: (newConfig) => { config = newConfig; if (subscription) { subscription.unsubscribe(); subscription = getObservable(config).subscribe({ next: data => targetSetter({ data, error: undefined }), error: error => targetSetter({ data: undefined, error }) }); } }, connectedCallback: () => {
}) } /** @type {import('../types/index').defineConfig} */ module.exports.defineConfig = (config) => config
:Copyright: GNU Public License v3 ..Warning: This module is deprecated and will be removed in version 2.0. Please use :mod:`MDAnalysis.analysis.hydrogenbonds.hbond_analysis` instead. Given a :class:`~MDAnalysis.core.universe.Universe` (simulation
}); return resolverContract.methods.name(node).call(cb); }) .catch(cb); }; __embarkENS.registerSubDomain = function (name, address, callback) {
LOG_VARD(poisMergedIntoPolys); const QString description = MatchCreator::BaseFeatureTypeToString(featureType); LOG_VARD(description); double totalFeatures = 0.0; totalFeatures = _applyVisitor( map, FilteredVisitor(criterion->clone(), _getElementVisitorForFeatureType(featureType))); LOG_VARD(totalFeatures); _stats.append(SingleStat(QString("%1 Count").arg(description), totalFeatures)); _stats.append(SingleStat(QString("Conflatable %1s").arg(description), conflatableCount));
return require(['connectionManagerFactory', 'apphost', 'credentialprovider', 'events', 'userSettings', 'apiclient', 'clientUtils'], function (ConnectionManager, appHost, credentialProvider, events, userSettings, apiClientFactory, clientUtils) { appHost = appHost.default || appHost; const credentialProviderInstance = new credentialProvider(); const promises = [appHost.init()]; return Promise.all(promises).then(responses => { const capabilities = Dashboard.capabilities(appHost); window.connectionManager = new ConnectionManager(credentialProviderInstance, appHost.appName(), appHost.appVersion(), appHost.deviceName(), appHost.deviceId(), capabilities);
defer p.m.Unlock() switch { case runtime.GOOS == "windows" && extConf.DevicePath == "": // OK case runtime.GOOS == "windows" && extConf.DevIDCertPath != "": return nil, status.Error(codes.InvalidArgument, "device path is not allowed on windows") case runtime.GOOS != "windows" && extConf.DevicePath != "": p.c.devicePath = extConf.DevicePath case runtime.GOOS != "windows" && extConf.DevicePath == "": tpmPath, err := AutoDetectTPMPath(BaseTPMDir) if err != nil { return nil, status.Errorf(codes.Internal, "tpm autodetection failed: %v", err)
p->Add(exec_treecompare, sequence(text("treecompare"), localFSPath(), remoteFSPath(client, &cwd))); #endif p->Add(exec_querytransferquota, sequence(text("querytransferquota"), param("filesize"))); p->Add(exec_getcloudstorageused, sequence(text("getcloudstorageused"))); p->Add(exec_getuserquota, sequence(text("getuserquota"), repeat(either(flag("-storage"), flag("-transfer"), flag("-pro"))))); return autocompleteTemplate = std::move(p);
#include "caffe/caffe.hpp" int main(int argc, char** argv) { LOG(FATAL) << "Deprecated. Use caffe.bin train --solver_proto_file=... " "[--resume_point_file=...] instead."; return 0; }
PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; """  # TODO: Add a RAW_GROUP_MEMBERS_TABLE.
$ echo "autoload -U compinit; compinit" >> ~/.zshrc # To load completions for each session, execute once: $ velero completion zsh > "${fpath[1]}/_velero" # You will need to start a new shell for this setup to take effect.
} } /** * Scale up or down the number of application instances. * @param application App in the stream to scale.
private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class); public static int ringBufferSize = 16384; public static int shareBufferSize = 1024; private static final AtomicBoolean CLOSED = new AtomicBoolean(false);
@pytest.fixture() def plot_data(self, psa): psa.run(metric='hausdorff') psa.run(metric='discrete_frechet') return psa.plot()
String videoType = "V_MPEG4/ISO/AVC"; String codecV = media.getCodecV(); if (codecV != null) { if (codecV.equals(FormatConfiguration.MPEG2)) { videoType = "V_MPEG-2"; } else if (codecV.equals(FormatConfiguration.H265)) {
} /** * Sets the job ID. */ public TestProcessorMetaSupplierContext setJobId(long jobId) { this.jobId = jobId;
messageCertificateIssued  = "Certificate issued successfully" messageCertificateRenewed = "Certificate renewed successfully" messageRenewalScheduled   = "Certificate scheduled for renewal in %d hours" ) func (c *Controller) Sync(ctx context.Context, crt *v1alpha1.Certificate) (err error) {
*/ package com.alibaba.nacos.config.server.utils; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.io.*; import java.nio.charset.StandardCharsets; import java.util.ArrayList;
super.onCreate(savedInstanceState); wasPreviouslyDarkTheme = systemThemeUtils.isDeviceInNightMode(); setTheme(wasPreviouslyDarkTheme ? R.style.DarkAppTheme : R.style.LightAppTheme); float fontScale = android.provider.Settings.System.getFloat(getBaseContext().getContentResolver() , android.provider.Settings.System.FONT_SCALE, 1f); adjustFontScale(getResources().getConfiguration(),fontScale); }
try: tar.extract(member) except TarError as err: # Cleanup if utils.path_exists('/temp'): utils.delete_dir('/temp', recursive=True) if utils.path_exists(tmp_dump_dir): utils.delete_dir(tmp_dump_dir, recursive=True) shutil.rmtree(tmp_dump_dir) raise DumpInvalidException("{} while extracting {}, aborting import".format(type(err).__name__, member.name)) tmp_hdfs_path = os.path.join(tmp_dump_dir, member.name) utils.upload_to_HDFS(tmp_hdfs_path, member.name)
return errors.Wrap(err, "init service store") } if app.AuthBasicStore == nil { app.AuthBasicStore, err = basic.NewStore(ctx, app.db) } if err != nil { return errors.Wrap(err, "init basic auth store")
if err != nil || cookie.Value == "" { return }  sid, _ := url.QueryUnescape(cookie.Value) manager.provider.SessionDestroy(sid) if manager.config.EnableSetCookie {
} path = "file:" + path log.Printf("opening sqlite database with path %s", path) db, err := gorm.Open("sqlite3", path) if err != nil { return err
const ( // maxCatchpointFileChunkSize is a rough estimate for the worst-case scenario we're going to have of all the accounts data per a single catchpoint file chunk. maxCatchpointFileChunkSize = ledger.BalancesPerCatchpointFileChunk * basics.MaxEncodedAccountDataSize // defaultMinCatchpointFileDownloadBytesPerSecond defines the worst-case scenario download speed we expect to get while downloading a catchpoint file defaultMinCatchpointFileDownloadBytesPerSecond = 20 * 1024 // catchpointFileStreamReadSize defines the number of bytes we would attempt to read at each itration from the incoming http data stream catchpointFileStreamReadSize = 4096
var err error mb.unlockedIdentity, err = mb.identitySelector.UseOrCreate("", "") if err != nil { return "", errors.Wrap(err, "could not unlock identity") } return mb.unlockedIdentity.Address, nil }
const apiLoadingLogo = apiIcon; const canReportConnectingIssue = forceConnectivityIssue || (!isConnected && (connectingTime >= REPORT_ISSUE_TIME_TRIGGER || cardanoNodeState === CardanoNodeStates.UNRECOVERABLE)); const canReportSyncingIssue = forceSyncIssue || (isConnected && !isSynced && syncingTime >= REPORT_ISSUE_TIME_TRIGGER); const showReportIssue = isNewAppVersionLoaded && !isNewAppVersionAvailable &&
for (auto &batch : batches) { if (auto answer = batch_validator.validate(batch)) { reason.second.emplace_back(answer.reason()); } }
} public void decrementOpenFiles(int numOpenFiles) { openFiles.addAndGet(numOpenFiles > 0 ? numOpenFiles : numOpenFiles * -1); } @Override
// Takes registration entry SPIFFE ID func IncrRegistrationEntryCreatedCounter(m telemetry.Metrics, id string) { labels := []telemetry.Label{ {Name: telemetry.SPIFFEID, Value: id}, } m.IncrCounterWithLabels([]string{telemetry.CacheManager, telemetry.RegistrationEntry, telemetry.Create}, 1, labels) }
} /** * @return list<PhpParser\Node\Stmt>|null */ public function loadExistingStatementsFromCache(string $file_path)
select { case <-ctx.Done(): t.Fatalf("Cancellation is not delayed") case <-time.After(10 * time.Millisecond): } <-ctx.Done()
import networkx as nx from networkx.algorithms.approximation.steinertree import metric_closure from networkx.algorithms.approximation.steinertree import steiner_tree from networkx.testing.utils import assert_edges_equal class TestSteinerTree:
}, [=](telemetry_atom) { self->state.send_report(); self->delayed_send(self, std::chrono::milliseconds(defs::telemetry_rate_ms), telemetry_atom::value); } }; }
import numpy as np import pytest import torch from mmdet import digit_version from mmdet.models.dense_heads import RetinaHead, YOLOV3Head from .utils import (WrapFunction, convert_result_list, ort_validate, verify_model) data_path = osp.join(osp.dirname(__file__), 'data')
Number of input node features. hidden_feats : list of int ``hidden_feats[i]`` gives the size of node representations after the i-th GCN layer. ``len(hidden_feats)`` equals the number of GCN layers. By default, we use ``[64, 64]``. activation : list of activation functions or None If None, no activation will be applied. If not None, ``activation[i]`` gives the activation function to be used for the i-th GCN layer. ``len(activation)`` equals
AND p.outOfStockAction = :outOfStockActionHide ) OR ( p.variantType = :mainType AND p.usingStock = TRUE AND ( SELECT SUM(pv.stockQuantity)
/** * Remove the given map. * * @param map the map */ void removeMap(TransactionMap map) { store.removeMap(map.map); }
namespace MvvmCross.Core.Navigation { public class MvxNavigationService : IMvxNavigationService { protected IMvxViewDispatcher ViewDispatcher => (IMvxViewDispatcher)MvxMainThreadDispatcher.Instance; private static readonly Dictionary<Regex, Type> Routes = new Dictionary<Regex, Type>();
from streamlink.plugin.api import useragents, validate from streamlink.stream.stream import Stream from streamlink.stream.stream import StreamIO from streamlink.utils.url import update_qsd  log = logging.getLogger(__name__)
if 'ESDestinationDescription' in dest: es_dest = dest['ESDestinationDescription'] es_index = es_dest['IndexName'] es_type = es_dest.get('TypeName') es = connect_elasticsearch() for record in records: obj_id = uuid.uuid4()
} function normalizeLocaleName(culture) { // TODO remove normalizations culture = culture.replace('_', '-'); // convert de-DE to de
if __name__ == "__main__": from Bio._utils import run_doctest run_doctest(verbose=0)
level.setMaximumUniqueImagesUsed(5); if(achievements.getImagesUploaded() >= 100 && achievements.getUniqueUsedImages() >= 45){ level.setLevel(10); level.setMaximumUniqueImagesUsed(50); level.setMaximumUploadCount(110); level.setLevelStyle(R.style.LevelFive); } else if (achievements.getImagesUploaded() >= 90 && achievements.getUniqueUsedImages() >= 40){ level.setLevel(9);
$userhandler->set_data($user); if($userhandler->verify_style()) { $userhandler->update_user();
Logger.debug('AdaApi::createTransaction called', { parameters: filterLogData(request), }); const { walletId, address, amount, passphrase } = request; try { const data = {
<% end %> </div> </section> <%=javascript_include_tag 'event_instances.js' %>
public Regex NonUnitRegex => NonUnitsRegex; public virtual Regex AmbiguousUnitNumbersRegex => AmbiguousUnitsRegex; public Dictionary<Regex, Regex> AmbiguityFiltersDict { get; } = null;
def source_ssh? return false if prefer_https? (repo_private? || force_private?) && !installation? or repo_private? && custom_ssh_key? end def force_private? !source_host.include? 'github.com' end def source_host
recordStat(ctx, StreamRequestCount, 1) log.Print("starting open") err = spc.Send(&pb.StreamingPullRequest{ log.Printf("open returned %v", err) Subscription: subName, // We modack messages when we receive them, so this value doesn't matter too much. StreamAckDeadlineSeconds: 60,
EdgeDistanceExtractor::EdgeDistanceExtractor(ValueAggregatorPtr a, Meters spacing): _aggregator(a) { if (!_aggregator) _aggregator.reset(new MeanAggregator());  setSpacing(spacing); }
return &tx, true } // All returns all transactions from the mempool. Since it is using the HeroCache, All guarantees returning // all transactions in the same order as they are added. func (t Transactions) All() []*flow.TransactionBody { entities := t.c.All()
wrapper = os.path.join(get_full_path(__file__, step_up=2), "resources", "locustio-taurus-wrapper.py") self.env.set({"LOCUST_DURATION": dehumanize_time(load.duration)}) self.env.add_path({"PYTHONPATH": get_full_path(__file__, step_up=3)}) self.log_file = self.engine.create_artifact("locust", ".log") args = [sys.executable, wrapper, '-f', self.script]
'parent'                    => 'Parent', 'currency'                  => 'Location Currency', 'ldap_ou'                   => 'LDAP Search OU', 'user_name'                 => 'User Name', 'department'                => 'Department', 'location'                  => 'Location', 'asset_tag'                 => 'Assets Tag',
cout<<"Running tool "<<getName()<<".\n"; // Get the trial name to label data written to files string trialName = getName(); // Initialize the model's underlying computational system and get its default state. SimTK::State& s = _model->initSystem();
proposals.clear(); } public Map<Address, VoteType> getProposals() { return Collections.unmodifiableMap(proposals); } public Optional<VoteType> get(final Address address) {
# @param [ String, BSON::ObjectId ] id of the related document. # @param [ Hash ] attrs The single document attributes to process. # # @since 6.0.0 def update_nested_relation(parent, id, attrs) first = existing.first converted = first ? convert_id(first.class, id) : id
def __init__(self): super(ApiritifNoseExecutor, self).__init__() self._tailer = FileReader(file_opener=lambda _: None, parent_logger=self.log) def reporting_setup(self, prefix=None, suffix=None): if not self.reported:
otherUserRealm.write(() => { otherUserRealm.create(schemas.TestObject.name, { doubleCol: 42.133 }); }); return otherUserRealm.syncSession.uploadAllLocalChanges().then(() => { otherUserRealm.close(); }); })
* Generates a token for this object. * @throws CHttpException */ public function generateToken($iTokenLength = NULL) { if(empty($iTokenLength)) { $iTokenLength = $this->getSurveyTokenLength(); }  $this->token = $this->_generateRandomToken($iTokenLength); $counter = 0; while (!$this->validate(array('token'))) {
T visit(LogicalTableModify modify) throws E; T visit(RelNode other) throws E; }
# Generate autosummary pages. Output should be set with: `:toctree: pythonapi/` autosummary_generate = ['Python-API.rst'] # Only the class' docstring is inserted. autoclass_content = 'class' # If true, `todo` and `todoList` produce output, else they produce nothing. todo_include_todos = False # The master toctree document. master_doc = 'index'
<?php defined( 'ABSPATH' ) || die( 'Cheatin&#8217; uh?' );  // Launch hooks that deletes all the cache domain. add_action( 'switch_theme', 'rocket_clean_domain' );  // When user change theme. add_action( 'user_register', 'rocket_clean_domain' );  // When a user is added.
Parameters ---------- groupby_ngroups: str or int number of groups that will be used in `groupby` operation shape: tuple Return
} var orgProjPath string if org != "" { orgProjPath = path.Join(orgProjPath, "orgs", org) } if project != "" { orgProjPath = path.Join(orgProjPath, "projects", project) }
self.generate_set_slot_code(src, scope, code) class SyntheticSlot(InternalMethodSlot): #  Type slot descriptor for a synthesized method which #  dispatches to one or more user-defined methods depending
if (numWaitingInInbox == 0 && rwinDiff < 0) { rwinDiff = 0; } rwinDiff /= 2; receiveWindowCompressed += rwinDiff; if (rwinDiff != 0) { logFinest(logger, "receiveWindowCompressed changed by %d to %d", rwinDiff, receiveWindowCompressed); } } return ackedSeqCompressed + receiveWindowCompressed; }
"github.com/algorand/go-algorand/data/basics" ) func TestApplicationCallFieldsNotChanged(t *testing.T) { af := ApplicationCallTxnFields{} s := reflect.ValueOf(&af).Elem()  if s.NumField() != 11 { t.Errorf("You added or removed a field from transactions.ApplicationCallTxnFields. " + "Please ensure you have updated the Empty() method and then " + "fix this test") } }  func TestApplicationCallFieldsEmpty(t *testing.T) { a := require.New(t)
Script.createMultisig = function(n_required, inKeys, opts) { opts = opts || {}; var keys = opts.noSorting ? inKeys : this._sortKeys(inKeys); var script = new Script(); script.writeN(n_required); keys.forEach(function(key) {
} } public override bool Equals(object obj) { throw Contract.InvalidOperationExceptionForBoxingSpans(); }  /// <summary> /// Checks to see if two spans point at the same memory.  Note that /// this does *not* check to see if the *contents* are equal.
threw = false; } catch (TException | UnknownHostException e) { if (e.getMessage().contains("Table/View 'HIVE_LOCKS' does not exist")) { throw new RuntimeException("Failed to acquire locks from metastore because 'HIVE_LOCKS' doesn't " + "exist, this probably happened when using embedded metastore or doesn't create a " + "transactional meta table. To fix this, use an alternative metastore", e); } throw new RuntimeException(String.format("Metastore operation failed for %s.%s", database, tableName), e);
ds_layout = None class redim_graph(redim): """ Extension for the redim utility that allows re-dimensioning Graph objects including their nodes and edgepaths. """ def __call__(self, specs=None, **dimensions): redimmed = super(redim_graph, self).__call__(specs, **dimensions) new_data = (redimmed.data,) if self.parent.nodes: new_data = new_data + (self.parent.nodes.redim(specs, **dimensions),)
/// <summary> /// Gets or sets the option to render the empty object value {} /// </summary> public bool RenderEmptyObject { get; set; } /// <summary> /// Formats the log event as a JSON document for writing.
// Should avoid update scheduling tight-loop. await sleep(10); // `getDerivedStateFromProps` is called on mount and when context updates. expect(getDerivedStateFromProps.calls.length).toBe(2, '`getDerivedStateFromProps()` called unexpectedly'); withIntlContext.unmount(); });
buf.WriteString(validation) first = false } keyVal := v.Code(h.KeyType, true, false, false, "k", context+"[*]", depth+1, false) if keyVal != "" { switch h.KeyType.Type.(type) { case *design.UserTypeDefinition, *design.MediaTypeDefinition: // For user and media types, call the Validate method
Only callables that accept one argument (:meth:`~nvidia.dali.types.SampleInfo` objects that represent the index of the requested sample) can be used as ``source`` when ``parallel`` is set to True. It can be a function or an object implementing ``__call__`` operator, which allows to add an initial state to the object instance. Keep in mind, that **copies** of the ``source`` will be distributed between Python workers, and no global state can be shared between them.
Minimum number of nodes for graphs max_num_v: int Maximum number of nodes for graphs verbose : bool Whether to print out progress information seed : int, default is None Random seed for data generation """ def __init__(self, num_graphs, min_num_v, max_num_v, verbose=False, seed=None): self.num_graphs = num_graphs
'failure' => 'The component could not be updated. Please try again.', ], 'delete' => [ 'success' => 'The component has been deleted!', 'failure' => 'The component could not be deleted. Please try again.', ],
test.Http{ Method: "POST", Path:   "/apps/myapp/environment", Body:   "foo=bar\nping=pong\n", Code:   200, }, test.Http{
} /** * @return array */ public function getDomainIdsIndexedByLocale(): array { $domainIdsByLocale = []; foreach ($this->domainConfigs as $domainConfig) {
(Traversable<?> seq, Object elem) -> ((List<Object>) seq).remove(elem) ); private final BiFunction<Traversable<?>, Object, Traversable<?>> add; private final BiFunction<Traversable<?>, Object, Traversable<?>> remove; ContainerType(BiFunction<Traversable<?>, Object, Traversable<?>> add, BiFunction<Traversable<?>, Object, Traversable<?>> remove) {
/** * Build the email message. * * @param  \VuFind\Db\Row\Search      $s            Search table row * @param \VuFind\Db\Row\User         $user         User owning search row * @param \VuFind\Search\Base\Results $searchObject Search results object * @param array                       $newRecords   New results in search
const yamljs = require('yamljs'); let reportUrl = ''; reportUrl = yamljs.parseFile('launcher-config.yaml').reportServer; module.exports = { devtool: 'cheap-source-map',
await test('[wolkenkit init --force] ignores the .git directory.', async ({ directory }) => { const template = defaults.commands.init.template; await shell.cp('-R', path.join(__dirname, '..', '..', '.git'), directory); const { code, stderr, stdout } = await wolkenkit('init', { force: true }, { cwd: directory });
status_factory, cache_, tx_presence_cache_); service_transport_ = std::make_shared<iroha::torii::CommandServiceTransportGrpc>( service_,
hash: buffertools.reverse(new Buffer(txin.getOutpointHash())).toString('hex'), n: txin.getOutpointIndex() }, sequence: txin.q }; if (txin.isCoinBase()) { txinObj.coinbase = txin.s.toString('hex');
"""Anchor-based head (RPN, RetinaNet, SSD, etc.). Args: num_classes (int): Number of categories excluding the background category. in_channels (int): Number of channels in the input feature map. feat_channels (int): Number of hidden channels. Used in child classes.
// and othttp.Transport types. type Config struct { Tracer            trace.Tracer Propagators       propagation.Propagators SpanStartOptions  []trace.StartOption ReadEvent         bool WriteEvent        bool
os.environ, ) def extract_option_object(option): """Convert a click.option call into a click.Option object.
self.tmaster.reset(addons) self.tmaster.addons.trigger("tick") def start(self): super().start() while True: if self.tmaster: break time.sleep(0.01)  class ProxyTestBase: # Test Configuration
auto r_statistics_participant = statistics::dds::DomainParticipant::narrow(r_participant); ASSERT_NE(nullptr, r_statistics_participant); // TODO: some topics get stuck in infinite loop in an error (generally if they are included twice): // [SUBSCRIBER Error] Change not found on this key, something is wrong -> Function remove_change_sub // These topics are commented in test params // TODO: some topics could be used in both participants, but they lead to the same error
*/ public static Password promptUser() throws IOException { if (System.console() == null) { throw new IOException("Attempted to prompt user on the console when System.console = null"); } ConsoleReader reader = new ConsoleReader(); String enteredPass = reader.readLine("Enter password: ", '*');
values ({{uuid "cm_user"}}, 'CM User'), ({{uuid "nr_user"}}, 'NR User'), ({{uuid "generic_user1"}}, 'User 1'), ({{uuid "generic_user2"}}, 'User 2'), ({{uuid "generic_user3"}}, 'User 3'), ({{uuid "generic_user4"}}, 'User 4'), ({{uuid "generic_user5"}}, 'User 5'); insert into schedules (id, name, time_zone) values
cursorFrom.setPosition( rect_from.x - 2, rect_from.y - 2 ); if ( resourceTo ) { cursorTo.hide(); } RedrawToResource( pt2, true, kingdom, fromTradingPost, resourceFrom ); if ( resourceTo ) { cursorTo.show(); gui.ShowTradeArea( kingdom, resourceFrom, resourceTo, max_buy, max_sell, count_buy, count_sell, fromTradingPost ); } display.render(); }
ordered = [] newscripts = [] for s in scripts: if s in current: ordered.append(current[s]) else:
if testcase.regression.startswith('0:'): # If the regression range starts from the start of time, # then we assume that the bug impacts stable. # TODO(yuanjunh): change to extended stable label when it's fully supported. new_impact = data_types.SecurityImpact.STABLE elif testcase.is_impact_set_flag: # Add impact label based on testcase's impact value. if testcase.impact_extended_stable_version:
return R.string.location_inside; case OUTSIDE: return R.string.location_outside; case GOING_IN: return R.string.location_going_in; case GOING_OUT: return R.string.location_going_out; default: return R.string.unknown; }
} else g_print ("State: idle\n"); g_print ("Deployments:\n"); if (booted_deployment) g_assert (g_variant_lookup (booted_deployment, "id", "&s", &booted_id));
if (!NetworkServer.active) return; if (authenticator != null) authenticator.OnServerAuthenticated.RemoveListener(OnServerAuthenticated); OnStopServer();
exports.registerHandler = function (h) { handler = h; for (let error of queue) { handler(error); } queue = []; }; return exports;
appsv1 "k8s.io/api/apps/v1" "k8s.io/api/batch/v1beta1" corev1 "k8s.io/api/core/v1" "k8s.io/apimachinery/pkg/runtime/schema" serving "knative.dev/serving/pkg/apis/serving/v1"
A new DataFrame filled with Booleans. """ if level is not None: raise NotImplementedError("Mutlilevel index not yet supported " "in Modin") other = self._validate_other(other, axis) new_manager = self._data_manager.gt(other=other, axis=axis, level=level) return self._create_dataframe_from_manager(new_manager)
return nil, fmt.Errorf("could not send broadcast order: %w", err) } finalState, ok := receipt.ExecutionResult.FinalStateCommitment() if !ok { finalState = startState } return finalState, nil } func (e *Engine) saveExecutionResults(
* cluster topology change (triggering data migration), the source may * miss and/or duplicate some entries. * <p> * The default local parallelism for this processor is 2 (or 1 if just 1 * CPU is available). */ @Nonnull public static <K, V> Source<Map.Entry<K, V>> cache(@Nonnull String cacheName) {
$found_key = false; foreach ( $order as $type ) { if ( 'defaults' !== $type && array_key_exists( $key, $this->params[ $type ] ) ) { $this->params[ $type ][ $key ] = $value; $found_key                     = true; }
PagedResources<MetricResource> list(/* TODO */); /** * Delete the counter with given name. */ void delete(String name); }
else: logger.error("[GetWireserverEndpoint] Missing file {0}", file_path) self.endpoint = KNOWN_WIRESERVER_IP logger.info("Using hardcoded Wireserver endpoint {0}", self.endpoint) return self.endpoint
#include <set> #include <map> // This macro may be moved to a global scope #define _THROW_LBANN_EXCEPTION_(_CLASS_NAME_,_MSG_) { \ std::stringstream err; \ err << __FILE__ << ' '  << __LINE__ << " :: " \
Args: topk (tuple, optional): The criterion used to calculate the accuracy. Defaults to (1,). thresh (float, optional): If not None, predictions with scores under this threshold are considered incorrect. Default to None. """ super().__init__() self.topk = topk
// Case: caller sends us a new set of variables case newVars := <-w.inVarCh: // If the variables and files are the same as the last set, then we do nothing. if prevEnvSent && prevFilesSent && w.sameAppConfig(log, prevVars, newVars) { log.Trace("got var update but ignoring since they're the same") continue }
return 'ANDROID' in (plt or platform()) def is_android_cuttlefish(plt=None): """Return true if we are on android gce platform.""" return 'ANDROID_X86' in (plt or platform())
it(`should remove the existing attribute if set to undefined`, () => { const elm = createElement('x-test', { is: Test }); elm.attr = 'initial value'; document.body.appendChild(elm); expect(elm.shadowRoot.querySelector('div').getAttribute('title')).toBe('initial value'); elm.attr = undefined; return Promise.resolve().then(() => {
Returns: A FuzzOptions object. """ return engine.FuzzOptions(corpus_dir, [], {}) # TODO(mbarbella): As implemented, this will not work for untrusted workers. # We would need to copy fuzzer binaries to workers.
import android.widget.EditText; import android.widget.LinearLayout; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.List; public class SWUrl extends SWItem { private static Logger log = LoggerFactory.getLogger(SWUrl.class); private List<String> labels; private List<String> values; private  String groupName;
self.shmem_buffer_holder.append( self._shared_cache[emb_name][grad_shmem_name]) # The total number of buffers is the number of NodeEmbeddings * # world_size * (world_size - 1). The minimun buffer size is 128. # # We extend the buffer by idx_i.shape[0] * 2 to avoid # frequent shared memory allocation. # The overall buffer cost will be smaller than three times # the maximum memory requirement for sharing gradients. buffer_size = 128 if idx_i.shape[0] < 128 else idx_i.shape[0] * 2 idx_shmem = create_shared_mem_array(idx_shmem_name, \ (buffer_size,), idx_dtype) grad_shmem = create_shared_mem_array(grad_shmem_name, \
transactionFee            cadence.UFix64 minimumStorageReservation cadence.UFix64 // config values for epoch smart-contracts epochConfig epochs.EpochConfig // list of initial network participants for whom we will create/stake flow // accounts and retrieve epoch-related resources identities flow.IdentityList }
try { return getDaoCareportalEvents().queryForId(timestamp); } catch (SQLException e) { log.error("Unhandled exception", e); } return null; }
except (pika.exceptions.ConnectionClosed, AttributeError): pass listen_count = _influx.get_total_listen_count() try: user_count = _get_user_count() except DatabaseException as e:
// PrimaryKey return custom primary key func (a *ApplicationRevision) PrimaryKey() string { return fmt.Sprintf("%s-%s", a.AppPrimaryKey, a.Version) } // Index return custom index
class TestGROWriterLarge(TestCase, tempdir.TempDir): # not normally recommended to use class-level # setup for universe (special case here) @classmethod def setUpClass(cls): cls.tmpdir = tempdir.TempDir()
log.Error().Err(err).Msg("could not copy private key files") } log.Info().Msg("") } else { log.Info("skipping copy of private keys to output dir") } // print count of all nodes
g_autoptr(GString) txn_title = g_string_new (""); if (is_install) g_string_append (txn_title, "install"); else if (self->refspec) g_string_append (txn_title, "rebase"); else if (self->revision) g_string_append (txn_title, "deploy"); else
ChromecastPlayer.prototype.volumeDown = function () { vol = this._castPlayer.session.receiver.volume.level; if (vol == null) { vol = 0.5; } vol -= 0.02; vol = Math.max(vol, 0);
def __init__(self, in_vm_artifacts_profile_json): if in_vm_artifacts_profile_json and not in_vm_artifacts_profile_json.isspace(): self.__dict__.update(parse_json(in_vm_artifacts_profile_json)) def is_extension_handlers_handling_on_hold(self): # hasattr() is not available in Python 2.6
@target_integrator.integrate! end it 'does not set the Pods xcconfig as the base config if the base ' \ 'config is already set' do @target.build_configurations.each do |config| config.stubs(:base_configuration_reference).returns(@sample_config) end
private static final int EXPECTED_DEFAULT_EPOCH_LENGTH = 30_000; private static final int EXPECTED_DEFAULT_BLOCK_PERIOD = 1; private static final int EXPECTED_DEFAULT_REQUEST_TIMEOUT = 1; private static final int EXPECTED_DEFAULT_SEEN_MESSAGES_QUEUE_SIZE = 10_000; private static final int EXPECTED_DEFAULT_EVENT_SIZE = 1000; @Test public void shouldGetEpochLengthFromConfig() {
} func blackholeOrAllowDirectPath(testEnv IntegrationEnv, t *testing.T, blackholeDP bool) { //	blackholeDpv6Cmd := "sudo ip6tables -I INPUT -s 2001:4860:8040::/42 -j DROP && sleep 5 && echo blackholeDpv6" //	blackholeDpv4Cmd := "sudo iptables -I INPUT -s 34.126.0.0/18 -j DROP && sleep 5 && echo blackholeDpv4" //	allowDpv6Cmd := "sudo ip6tables -I INPUT -s 2001:4860:8040::/42 -j ACCEPT && sleep 5 && echo allowDpv6" //	allowDpv4Cmd := "sudo iptables -I INPUT -s 34.126.0.0/18 -j ACCEPT && sleep 5 && echo allowDpv4" if testEnv.Config().DirectPathIPV4Only { if blackholeDP {
title_url: 'Express'.parameterize, course_id: course.id, position: section_position, description: 'Here we finally get to Express, the most popular back-end JavaScript framework, and MongoDB, a non-relational database frequently paired with Node.', ) lesson_position += 1
new URLParser(), new BaseURLExtractor(new ChineseURLExtractorConfiguration(options)))); RegisterModel<GUIDModel>( Culture.English, (options) => new GUIDModel(new GUIDParser(), new GUIDExtractor()));
var validPorts = regexp.MustCompile(`[0-9]+`) if !validPorts.MatchString(port) { return httperr.Errorf(403, "balancer port must be a number") } ssl, err := models.CreateSSL(a, port, body, key)
# TODO: deprecate `extra_convs_on_inputs` warnings.simplefilter('once') warnings.warn( '"extra_convs_on_inputs" will be deprecated in v2.9.0,' 'Please use "add_extra_convs"', DeprecationWarning) self.add_extra_convs = 'on_input' else:
.setTarget(nav_cam) .setDismissText(getResources().getString(R.string.ok_button)) .setContentText(getResources().getString(R.string.camera_button)) .setDismissOnTouch(true) .build() );
// AppDeployment is the Schema for the AppDeployment API // +kubebuilder:object:root=true // +kubebuilder:resource:categories={oam},shortName=appdeploy;appdpy // +kubebuilder:subresource:status type AppDeployment struct { metav1.TypeMeta   `json:",inline"`
'Rule %s already defined in rules: %s' % ( rule['name'], ', '.join(sorted(self.rules.keys())))) callback_ok = ( self._add_rule_callback(new_rule) if self._add_rule_callback else True) if callback_ok: self.rules[new_rule['name']] = new_rule def filtered_by_networks(self, networks):
public void onPause() { super.onPause(); savePreference(); webvDescription.scrollTo(0,0); } private void savePreference() {
} if (r.config.Port != 0 || r.config.NodePort != 0) && r.config.Ports != nil { return nil, fmt.Errorf("Cannot define both 'ports' and 'port' or 'node_port'." + " Use 'ports' for configuring multiple service ports.") } else if r.config.Ports == nil && (r.config.Port != 0 || r.config.NodePort != 0) { r.config.Ports = make([]map[string]string, 1)
dependent: :destroy validates :name, :address, :organization, presence: true validates :warehouse_type, inclusion: { in: WAREHOUSE_TYPES }, allow_blank: true include Geocodable
* Factory for providers of source code for JavaParser. * Providers that have no parameter for encoding but need it will use UTF-8. */ public final class Providers { public static final Charset UTF8 = Charset.forName("utf-8"); private Providers() {
$message = preg_replace('#(>|^|\r|\n)/slap ([^\r\n<]*)#i', "\\1<span style=\"color: red;\" class=\"mycode_slap\">* {$this->options['me_username']} {$lang->slaps} \\2 {$lang->with_trout}</span>", $message); } $message = $plugins->run_hooks("parse_message_me_mycode", $message); // If we can, parse smilies if(!empty($this->options['allow_smilies']))
*  and multiply it by -1. */ Vec3 massCenter = osimModel.getBodySet().get("r_ulna_radius_hand").getMassCenter(); osimModel.getMultibodySystem().realize(s, Stage::Velocity); const auto& hand = osimModel.getComponent<OpenSim::Body>("r_ulna_radius_hand"); Vec3 velocity = hand.findVelocityInGround(s, massCenter); f = -velocity[0]; stepCount++;
$(function () { $('[data-toggle="tooltip"]').tooltip() No newline at end of file })
int m_NativeRef = 0; readonly int id; static byte[] buffer; public Client(int BufferSize) { id = Interlocked.Increment(ref idGenerator); buffer = new byte[BufferSize]; } public void Connect(Uri uri)
import React from 'react'; import { func, shape, string } from 'prop-types'; import { useRegion } from '@magento/peregrine/lib/talons/Region/useRegion'; import { mergeClasses } from '../../classify';
*/ @Configuration @EnableConfigurationProperties(ZipkinUiProperties.class) @ConditionalOnProperty(name = "zipkin.ui.enabled", matchIfMissing = true) @RestController public class ZipkinUiAutoConfiguration extends WebMvcConfigurerAdapter {
* Constructor * * @param bool $enabled is this tab enabled? */ public function __construct($enabled = true) { $this->enabled = $enabled; }
// GenerateRootQC generates QC for root block, caller needs to provide votes for root QC and // participantData to build the QC. // NOTE: at the moment, we require private keys for one node because we we re-using the full business logic, which assumes that only consensus participants construct QCs, which also have produce votes. // TODO: modularize QC construction code (and code to verify QC) to be instantiated without needing private keys. func GenerateRootQC(block *flow.Block, votes []*model.Vote, participantData *ParticipantData, identities flow.IdentityList) (*flow.QuorumCertificate, error) {  validators, signers, err := createValidators(participantData, identities) if err != nil { return nil, err }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4465-SEA 1645537649 280040208</p> <hr> <p>Varnish cache server</p> </body>
}).filter(Boolean); utilGetSetValue(input, !isMixed ? displayValue(tags[field.key]) : '') .attr('title', isMixed ? mixedValues.join('\n') : undefined) .attr('placeholder', isMixed ? t('inspector.multiple_values') : _staticPlaceholder || '') .classed('mixed', isMixed); }
if (!isSlaveAttributesMatch(offerHolder, taskRequest, isPreemptibleTask)) { return SlaveMatchState.SLAVE_ATTRIBUTES_DO_NOT_MATCH; } else if (!areSlaveAttributeMinimumsFeasible(offerHolder, taskRequest, activeTaskIdsForRequest)) { return SlaveMatchState.SLAVE_ATTRIBUTES_DO_NOT_MATCH; } final SlavePlacement slavePlacement = taskRequest.getRequest().getSlavePlacement().or(configuration.getDefaultSlavePlacement());
if len(config.Files) == 0 { config.Files = []string{} for _, pattern := range filePatterns { matches, err := globPath(pattern) if err != nil { log.Fatalf("Error searching for %q: %v", pattern, err) }  config.Files = append(config.Files, matches...) } } if config.Token == "" {
"ArrayEquals", "MissingOverride", "UnnecessaryParentheses", "PreferJavaTimeOverload"); private final ListProperty<String> patchChecks;
namespace Tests\FrameworkBundle\Unit\Model\Customer; use PHPUnit\Framework\TestCase; use Shopsys\FrameworkBundle\Model\Customer\Exception\EmptyCustomerUserIdentifierException; use Shopsys\FrameworkBundle\Model\Customer\User\CustomerUserIdentifier; class CustomerUserIdentifierTest extends TestCase {
namespace Contao\ManagerBundle\EventListener; use Doctrine\DBAL\Event\SchemaAlterTableRenameColumnEventArgs; use Doctrine\DBAL\Schema\TableDiff; /** * @internal
} if l.log != nil && l.log.IsDebug() { event.WriteSysEvent(ctx, op, event.I{"msg": "registered", "proto": proto}) } return sub, nil
package org.apache.calcite.test; import org.apache.calcite.rel.RelNode; import org.apache.calcite.rel.logical.LogicalFilter; import org.apache.calcite.rel.logical.LogicalProject; import org.apache.calcite.rex.RexNode; import org.apache.calcite.rex.RexProgramBuilderBase; import org.apache.calcite.test.verifier.RexToSymbolicColumn; import org.apache.calcite.test.verifier.SymbolicColumn;
} } [Obsolete("Use NetworkTime.rtt instead")] public float GetRTT() { return (float)NetworkTime.rtt;
ValidateController disabledValidateController = GetController(false); Resource payload = new Observation(); OperationNotImplementedException ex = await Assert.ThrowsAsync<OperationNotImplementedException>(() => disabledValidateController.Validate(payload, profile: null, mode: null)); CheckOperationOutcomeIssue( ex,
MAINNET_LATEST_VERSION_INFO_URL, TESTNET_LATEST_VERSION_INFO_URL, STAGING_LATEST_VERSION_INFO_URL, CHECK_INTERNET_PING_HOSTNAME, ];
BlockAndCertValue  = "blockAndCert"    // block+cert request data (as the value of requestDataTypeKey) ) // const error messages var errorNoRedirectPeers = errors.New("redirectRequest: no archiver peers found") var errorNotHTTPPeer = errors.New("redirectRequest: error getting an http peer") // BlockService represents the Block RPC API type BlockService struct {
# whether the in_docker check should always return true OVERRIDE_IN_DOCKER = is_env_true("OVERRIDE_IN_DOCKER") def has_docker(): try:
self.assertEqual(len(alignments), 4) self.assertEqual(len(alignments[0]), 2) for a in alignments: self.assertEqual(len(a), a.get_alignment_length()) for r in a: print("%s %s %i" % (r.seq, r.id, r.annotations["original_length"])) # print(a.annotations)
} // execTemplate executes a template given a requestPath, template, and metadata func execTemplate(c *Config, mdata metadata.Metadata, meta map[string]string, files []FileInfo, ctx httpserver.Context) ([]byte, error) { mdData := Data{ Context: ctx, Doc:     mdata.Variables, Styles:  c.Styles, Scripts: c.Scripts, Meta:    meta, Files:   files, }
# https://github.com/mitmproxy/mitmproxy/issues/2197 if hf.request.http_version == "HTTP/2.0": hf.request.http_version = "HTTP/1.1" host = hf.request.headers.pop(":authority", None) if host is not None: hf.request.headers.insert(0, "host", host) self.q.put(hf) ctx.master.addons.trigger("update", lst)
def get_result(self): """Get the result of minimization.""" # Done with minimization, output log one more time self._report_progress(is_final_progress_report=True) if not self.minimizer.tokenize: return self.get_required_tokens() return str(self)
#define LONGEST_STR                                                                                                                \ ELEMENT_LONGEST_STR("connect")                                                                                                 \ DELIMITER ELEMENT_LONGEST_STR("request-header") DELIMITER ELEMENT_LONGEST_STR("request-body")                                  \ DELIMITER ELEMENT_LONGEST_STR("request-total") DELIMITER ELEMENT_LONGEST_STR("process")                                    \ DELIMITER ELEMENT_LONGEST_STR("proxy-idle") DELIMITER ELEMENT_LONGEST_STR("proxy-connect")                             \ DELIMITER ELEMENT_LONGEST_STR("proxy-request") DELIMITER ELEMENT_LONGEST_STR("proxy-process") size_t max_len = sizeof(LONGEST_STR); emit_server_timing_element(req, &dst, "connect", h2o_time_compute_connect_time, max_len);
// which ECS agent tries to register the instance where the instance id document is // not available or needed NoIID bool  // SharedVolumeMatchFullConfig is config option used to short-circuit volume validation against a // provisioned volume, if false (default). If true, we perform deep comparison including driver options // and labels. For comparing shared volume across 2 instances, this should be set to false as docker's // default behavior is to match name only, and does not propagate driver options and labels through volume drivers. SharedVolumeMatchFullConfig bool }
Mongo::VERSION.split('.')[0...2].map(&:to_i) end # Prepare options for Mongo::Client based on Mongoid client configuration. # # @param [ Hash ] opts Parameters from options section of Mongoid client configuration. # @return [ Hash ] Options that should be passed to Mongo::Client driver. # # @api private def options(opts) options = opts.dup options[:platform] = PLATFORM_DETAILS
/* adjust speed for broken vehicles */ if (v->vehstatus & VS_AIRCRAFT_BROKEN) { if (speed_limit > SPEED_LIMIT_BROKEN) hard_limit = false; speed_limit = min(speed_limit, SPEED_LIMIT_BROKEN); } if (v->vcache.cached_max_speed < speed_limit) {
const int64_t padding = shmem_size * 10 / 100;  // Padding per team. // FIXME_OPENMPTARGET - Total amount of scratch memory allocated is depenedent // on the maximum number of teams possible. Currently the maximum number of // teams possible is calculated based on NVIDIA's Volta GPU. In // future this value should be based on the chosen architecture for the // OpenMPTarget backend. int64_t total_size = (shmem_size + 16 + padding) * ((2048 * 80) / team_size); if (total_size > m_scratch_size) { space.deallocate(m_scratch_ptr, m_scratch_size);
def setUp(self): self.P4 = nx.path_graph(4) self.K3 = nx.complete_bipartite_graph(3,3) self.C4 = nx.cycle_graph(4) self.davis = nx.davis_southern_women_graph() self.top_nodes = [n for n,d in self.davis.nodes(data=True)
try: body_seek(body_pos) except (IOError, OSError): raise UnrewindableBodyError("An error occured when rewinding request " "body for redirect/retry.") elif body_pos is _FAILEDTELL: raise UnrewindableBodyError("Unable to record file position for rewinding "
from .. import utils __all__ = [ 'random_walk', 'pack_traces'] def random_walk(g, nodes, *, metapath=None, length=None, prob=None, restart_prob=None): """Generate random walk traces from an array of seed nodes (or starting nodes), based on the given metapath.
if closeIndex < 0 { closeIndex = len(expanded) - 2 } return "", ErrDeployedNetworkTemplate{expanded[openIndex : closeIndex+2]} } return
daedalus.stores.wallets .refreshWalletsData() .then(() => { const wallet = daedalus.stores.wallets.getWalletByName(name); if (wallet) { const walletAmount = wallet.amount || new BigNumber(0); if (transferFunds && walletAmount.isZero()) { throw new Error(noWalletsErrorMessage); } } done(); })
@click.option( '--trading-calendar', metavar='TRADING-CALENDAR', default='NYSE', help="The calendar you want to use e.g. LSE. NYSE is the default." ) @click.option( '--print-algo/--no-print-algo',
int size = mb.readInt(); currentReaders = new ArrayList<>(size); deepCopies = new LinkedList<>(); for (int i = 0; i < size; i++) { LocalityGroupMetadata lgm = new LocalityGroupMetadata(ver, rdr);
* * The semantics of this kind depend on the language. */ @Experimental int getKind(); }
mock_issue = self._make_mock_issue() issue_filer.update_issue_impact_labels(self.testcase, mock_issue) six.assertCountEqual(self, ['Security_Impact-Stable'], mock_issue.labels.added) six.assertCountEqual(self, [], mock_issue.labels.removed)
return {'new_feat': h} class TransitionDown(nn.Module): """ The Transition Down Module """ def __init__(self, in_channels, out_channels, n_neighbor=64): super(TransitionDown, self).__init__() self.frnn_graph = KNNGraphBuilder(n_neighbor) self.message = KNNMessage(n_neighbor) self.conv = KNNConv([in_channels, out_channels, out_channels])
assertEquals("00000000-0000-4000-8000-000000000000", min.getString()); // Test conversion from ValueJavaObject to ValueUuid ValueJavaObject valObj = ValueJavaObject.getNoCopy(UUID.fromString("12345678-1234-4321-8765-123456789012"), null, null); Value valUUID = valObj.convertTo(Value.UUID); assertTrue(valUUID instanceof ValueUuid); assertTrue((valUUID.getString().equals("12345678-1234-4321-8765-123456789012"))); ValueJavaObject vo_string = ValueJavaObject.getNoCopy(new String("This is not a ValueUuid object"), null, null); assertThrows(DbException.class, vo_string).convertTo(Value.UUID);
/** Flush the render queue by rerendering all queued components */ function process() { let p; let toRender = q.splice(0).sort((a, b) => a._depth - b._depth); while ((p=toRender.pop())) { // forceUpdate's callback argument is reused here to indicate a non-forced update. if (p._dirty) p.forceUpdate(false); }
// 1) in part header params // 2) as formname // 3) file reference hash (after uploading the file) if fileName = part.FileName(); fileName == "" { fileName = part.FormName() }
self.assertEqual(s.read_bytes(3), b'foo') self.assertEqual(s.read_bytes(2), b'ba') with self.assertRaises(transaction.SerializationError): s.read_bytes(4) self.assertEqual(s.read_bytes(0), b'') self.assertEqual(s.read_bytes(1), b'r') self.assertEqual(s.read_bytes(0), b'')
os.symlink(os.path.join(os.pardir, os.pardir, os.pardir, 'Contents', 'MacOS', lib), os.path.join(dest, lib)) # Patch Info.plist - pyinstaller's options are too limiting plist_path = os.path.join(app_path, 'Contents', 'Info.plist') with open(plist_path, "rb") as f: plist_data = plistlib.load(f)
link = "https://github.com/palantir/gradle-baseline#baseline-error-prone-checks", linkType = LinkType.CUSTOM, severity = SeverityLevel.SUGGESTION, summary = "Avoid default cases in switch statements to correctly handle new enum values") public final class SwitchStatementDefaultCase extends BugChecker implements BugChecker.SwitchTreeMatcher { @Override
def transitive_closure(G, reflexive=False): """Returns transitive closure of a graph The transitive closure of G = (V,E) is a graph G+ = (V,E+) such that for all v, w in V there is an edge (v, w) in E+ if and only if there
ExpectedActions:    []testpkg.Action{}, }, }, "should update Ready condition with 'Denied' if certificate request is denied": { certificateRequest: gen.CertificateRequestFrom(baseCRNotApproved, gen.SetCertificateRequestStatusCondition(cmapi.CertificateRequestCondition{ Type:               cmapi.CertificateRequestConditionDenied,
* operations. Violations of this rule will manifest as less than 100% CPU * usage under maximum load (note that this is possible for other reasons too, * for example if the network is the bottleneck or if {@linkplain * JetProperties#JET_IDLE_COOPERATIVE_MAX_MICROSECONDS parking time} is too high). * The processor must also return as soon as the outbox rejects an item * (that is when the {@link Outbox#offer(Object) offer()} method returns * {@code false}).
self.matcher = self.pat.match if match else self.pat.search def __call__(self, o): o = str(o).replace(os.sep, posixpath.sep) res = self.matcher(o) assert res,f'Failed to find "{self.pat}" in "{o}"' return res.group(1) # Cell
check_parameters_default_constructible(name, estimator) check_no_fit_attributes_set_in_init(name, estimator) # we cannot leave default params (see https://github.com/Microsoft/LightGBM/issues/833) estimator = estimator(min_child_samples=1, min_data_in_bin=1) for check in _yield_all_checks(name, estimator): if check.__name__ == 'check_estimators_nan_inf': continue  # skip test because LightGBM deals with nan
"context" "fmt" authzv1 "k8s.io/api/authorization/v1" certificatesv1 "k8s.io/api/certificates/v1" corev1 "k8s.io/api/core/v1" apierrors "k8s.io/apimachinery/pkg/api/errors" metav1 "k8s.io/apimachinery/pkg/apis/meta/v1" apiutil "github.com/jetstack/cert-manager/pkg/api/util" "github.com/jetstack/cert-manager/pkg/apis/certmanager"
# All the unique values in f are the fragments frags = tuple( sorted( [AtomGroup(list(sorted(a.ats))) for a in set(f.values())], key=lambda x: x[0].index ) )
x509Authorities, err := s.v0.parseMintX509CABundleUpdate(resp) if err != nil { s.v0.Log.WithError(err).Warn("Failed to parse an X.509 root update from the upstream authority plugin. Please report this bug.") continue } return x509Authorities, nil
else: cmd = compose_cmd(['dpkg', '--compare-versions', v1, 'gt', v2]) try: NodeControlUtil.run_shell_script_extended(cmd) except ShellError as exc: if exc.stderr: raise
@classmethod def expanded_format(cls, arrays): return not any(array.shape not in [arrays[0].shape, (1,)] for array in arrays[1:]) @classmethod
assertEquals(2, requests.size()); AppDeploymentRequest logRequest = requests.get(0); assertThat(logRequest.getDefinition().getName(), is("log")); assertEquals("true", logRequest.getDeploymentProperties().get(AppDeployer.INDEXED_PROPERTY_KEY)); AppDeploymentRequest timeRequest = requests.get(1); assertThat(timeRequest.getDefinition().getName(), is("time")); }
} private static void stopServer(final ClientContext context, final boolean tabletServersToo) throws AccumuloException, AccumuloSecurityException { MasterClient.executeVoidAdmin(context, client -> client.shutdown(Tracer.traceInfo(), context.rpcCreds(), tabletServersToo)); }
install_requires = [ 'tornado>=4.0,<5', 'python-daemon<3.0', ] if os.environ.get('READTHEDOCS', None) == 'True':
def _activate_persistor(self): self._repo_persistor = dnf.persistor.RepoPersistor(self.conf.cachedir) def init_plugins(self, disabled_glob=(), enable_plugins=(), cli=None): # :api """Load plugins and run their __init__().""" if self.conf.plugins: self._plugins._load(self.conf, disabled_glob, enable_plugins) self._plugins._run_init(self, cli) def configure_plugins(self):
end end context 'because a unrecognized item_id was provided' do let(:family_requests_attributes) do [ ActionController::Parameters.new(item_id: 0, person_count: Faker::Number.within(range: 1..10))
add_event(name=AGENT_NAME, version=CURRENT_VERSION, op=WALAEventOperation.HeartBeat, is_success=True, message=msg, log_event=False) self.counter += 1 io_errors = IOErrorCounter.get_and_reset() hostplugin_errors = io_errors.get("hostplugin") protocol_errors = io_errors.get("protocol")
// If `options.permissions` is set explicitly to // `false`, permissions checks are bypassed. // // If `options.skipAttachments` is true, the operation will be slightly // faster, however this is only safe to use if both the schema of the document // and the schemas of any arrays and widgets within the document and its // areas contain no attachments. This does not include attachments // reached via joins. // // If `callback` is omitted, a promise is returned.
{ reference.Reference = $"{referenceInformation.resourceType}/{referenceInformation.resourceId}"; } else if (referenceInformation.versionId == versionId) { reference.Reference = $"{referenceInformation.resourceType}/{referenceInformation.resourceId}/_history/{referenceInformation.versionId}"; } } else
render() { const { rewardsOrder, rewardsSortBy } = this.state; const { rewards, isLoading, onLearnMoreClick, dateLocale } = this.props; this.localizedDateFormat = moment.localeData(dateLocale).longDateFormat('L'); const { intl } = this.context; const noRewards = !isLoading && ((rewards && !rewards.length) || !rewards); const showRewards = rewards && rewards.length > 0 && !isLoading;
# Golang stacktraces. golang_panic_match = GOLANG_PANIC_REGEX.match(line) if golang_panic_match: state.crash_type = golang_panic_match.group(2) continue # Sanitizer SEGV crashes.
self.cumulative_stats = CumulativeStats() stats_pane = Pile([(WEIGHT, 0.50, self.latest_stats), (WEIGHT, 0.50, self.cumulative_stats), ]) self.graphs = ThreeGraphs()
self.segm_head = build_head(segm_head) self.mask_head = build_head(mask_head) def forward_dummy(self, imgs): """Used for computing network flops. See `mmdetection/tools/analysis_tools/get_flops.py`
.endFileIndex(END_FILE_INDEX) .build(); } No newline at end of file }
* @return bool **/ public static function is_tracking_enabled() { return Sensei()->settings->get( self::$usage_tracking_setting_name ) || false; } /**
DataFrame with asset_id as index and 'start_date'/'end_date' columns. calendar : pd.DatetimeIndex The trading calendar to use. holes : dict[int -> tuple[pd.Timestamps]], optional A dict mapping asset ids to the tuple of dates that should have no data for that asset in the output. Default is no holes. Yields ------
*/ #include "module/shared_model/mock_objects_factories/mock_command_factory.hpp" #include "backend/protobuf/permissions.hpp" #include "utils/string_builder.hpp" using ::testing::Return; using ::testing::ReturnRef;
try { LoadOpenSimLibrary("osimActuators"); testStates("arm26.osim"); testMemoryUsage("arm26.osim"); testMemoryUsage("PushUpToesOnGroundWithMuscles.osim"); } catch (const Exception& e) { cout << "testInitState failed: ";
import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout; import com.wdullaer.materialdatetimepicker.time.TimePickerDialog; import org.json.JSONException; import org.json.JSONObject; import org.slf4j.Logger;
outChan := make(chan *PaginateResponse) stopChan := make(chan bool) done := make(chan struct{})  go func() { defer close(done)  if msg.PageSize < 1 { outChan <- &PaginateResponse{ ErrorCode: PaginateWrongInput,
private final BlockHeader header = TestHelpers.createCliqueSignedBlockHeader(headerBuilder, proposerKeys, validatorList); private final BlockHeaderBuilder builder = BlockHeaderBuilder.fromHeader(headerBuilder.buildHeader()) .blockHashFunction(MainnetBlockHashFunction::createHash);
isUnlimitedUsers: equal('startingUsers', 999999), addonConfigs: attr() });
build_revision = fuzzer_utils.get_build_revision() job = environment.get_value('JOB_NAME') # fuzzer name is filled by fuzz_task. testcase_run = fuzzer_stats.TestcaseRun(None, job, build_revision, current_timestamp()) testcase_run['command'] = fuzzer_command
} } errno = 0; int val = strtol(buf, &end, 0); if (errno) return false; if (end != buf+strlen(buf)) return false;
""" index = count if count is not None else index if index == 'last': self._tab_focus_last() return elif index == self._current_index() + 1: self._tab_focus_last(show_error=False) return elif index is None: self.tab_next() return
// to reconstruct a threshold signature. func EnoughShares(threshold int, sharesNumber int) (bool, error) { if threshold < MinimumThreshold { return false, fmt.Errorf("The threshold can't be smaller than %d, got %d", MinimumThreshold, threshold) } return sharesNumber > threshold, nil }
with_label=True, test_mode=False, extra_aug=None, keep_ratio_rescale=True): # load annotations (and proposals) self.img_infos = self.load_annotations(ann_file) if proposal_file is not None:
makedir(dirname.c_str()); std::string rng_name; /// @todo - Note that the RNG with thread local data is not correct rng_name = dirname + "/rng_seq_generator"; std::ofstream rng_seq(rng_name); rng_seq << ::data_seq_generator;
return promisify(cb => this._logOut(cb)); }, async callFunction(name, args = [], service = undefined) { const cleanedArgs = cleanArguments(args); const stringifiedArgs = EJSON.stringify(cleanedArgs, { relaxed: false }); const result = await promisify(cb => this._callFunction(name, stringifiedArgs, service, cb));
$filename = md5($group['key']) . '.min.' . $this->getFileType(); $concatPath = $this->getResourceCacheDir() . $filename; if (!file_exists($concatPath)) { $lockfile = "$concatPath.lock"; $handle = fopen($lockfile, 'c+'); if (!is_resource($handle)) {
virtual bool isMouseCursorActive() const override { return ( SDL_GetAppState() & SDL_APPMOUSEFOCUS ) == SDL_APPMOUSEFOCUS; } private:
/// <summary> /// The NetworkIdentity for this connection. /// </summary> [Obsolete("Use NetworkConnection.identity instead")] public NetworkIdentity playerController { get
@Test public void correctHttpResponse() throws Exception { PublicMetrics publicMetrics = () -> Collections.singleton(new Metric<Number>("mem.free", 1024)); ResponseEntity<String> response = responseForMetrics(publicMetrics); assertThat(response.getStatusCode(), equalTo(HttpStatus.OK)); assertThat(response.getHeaders().getContentType().toString(),
this(accumuloPropsLocation, Collections.emptyMap()); } public SiteConfiguration(URL accumuloPropsLocation, Map<String,String> overrides) { config = createMap(accumuloPropsLocation, overrides); } @SuppressFBWarnings(value = "URLCONNECTION_SSRF_FD", justification = "location of props is specified by an admin") private static ImmutableMap<String,String> createMap(URL accumuloPropsLocation, Map<String,String> overrides) { CompositeConfiguration config = new CompositeConfiguration();
err = w.WriteMsgWithContext(ctx, &pb.Payment{ Amount: amount, }) if err != nil { return err } s.metrics.TotalSentPseudoSettlements.Add(float64(amount)) return nil } // SetPaymentObserver sets the payment observer which will be notified of incoming payments
PUBSUB_PLATFORMS = ['linux'] MEMORY_SAFE_LANGUAGES = {'go', 'java', 'python', 'rust'} OSS_FUZZ_DEFAULT_PROJECT_CPU_WEIGHT = 1.0 OSS_FUZZ_MEMORY_SAFE_LANGUAGE_PROJECT_WEIGHT = 0.2
for (int i = 0; i < numLoop; ++i) { model.setStateVariableValues(s, stateValues); // Directly setting values for coordinates does not ensure they // satisfy kinematic constraints. Explicitly enforce constraints // by performing an assembly, now. model.assemble(s); }
@Nonnull public static synchronized JetInstance getInstance() { if (supplier == null) { supplier = new ConcurrentMemoizingSupplier<>(() -> new InstanceProxy(createStandaloneInstance())); } return supplier.get(); }
} ContentValues cv = new ContentValues(); Intent launchIntent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName()); String launchIntentClassname = launchIntent.getComponent().getClassName(); cv.put("tag", context.getPackageName() + "/" + launchIntentClassname); cv.put("count", count); context.getContentResolver().insert(
this(null, modifiers, new NodeList<>(), new NodeList<>(), type, new SimpleName(name), parameters, new NodeList<>(), new BlockStmt(), null); } public MethodDeclaration(final EnumSet<Modifier> modifiers, final NodeList<AnnotationExpr> annotations, final NodeList<TypeParameter> typeParameters, final Type type, final SimpleName name, final NodeList<Parameter> parameters, final NodeList<ReferenceType> thrownExceptions, final BlockStmt body) { this(null, modifiers, annotations, typeParameters, type, name, parameters, thrownExceptions, body, null); }  @AllFieldsConstructor public MethodDeclaration(final EnumSet<Modifier> modifiers, final NodeList<AnnotationExpr> annotations, final NodeList<TypeParameter> typeParameters, final Type type, final SimpleName name, final NodeList<Parameter> parameters, final NodeList<ReferenceType> thrownExceptions, final BlockStmt body, ReceiverParameter receiverParameter) { this(null, modifiers, annotations, typeParameters, type, name, parameters, thrownExceptions, body, receiverParameter);
projects, err := getRequestedProjects(args, false) if err != nil { util.Failed("GetRequestedProjects() failed:  %v", err) } project := projects[0]
if frame.ncols < 2: return s = self.random_array(frame.ncols - 1, positive=True) print("[14] Removing columns %r -> ncols = %d" % (s, frame.ncols - len(s))) if python_output:
* @package */ Blockly.scratchBlocksUtils.duplicateAndDragCallback = function(oldBlock) { return function(e) { // Give the context menu a chance to close. setTimeout(function() {
elif role == "ALL" and self.need_to_be_owner and self.sig_count > 1: return "{} signatures of any role are required and needs to be owner".format(self.sig_count) @staticmethod def from_dict(as_dict): return AuthConstraint(**as_dict)  class AuthConstraintAnd(AbstractAuthConstraint): def __init__(self, auth_constraints: List[AbstractAuthConstraint]):
while(*c && isspacetab(*c)) c++; if(*c && (*c != ',') && (*c != ')')) { paramBegin[iParamCount] = c; c++;
if (reportOn(target)) { MetricOptions options = MetricOptions.ofOptions(getProperty(optionsDescriptor)); N reportLevel = parseReportLevel(getProperty(reportLevelDescriptor)); N result = Metric.compute(metric, target, options); if (result != null && reportLevel.compareTo(result) <= 0) { addViolationWithMessage(ctx, target, violationMessage(target, result));
nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST) ? nMedianTimePast : pblock->GetBlockTime(); std::vector<const CTxMemPoolEntry *> vtxe; addPriorityTxs(&vtxe); addScoreTxs(&vtxe); nLastBlockTx = nBlockTx; nLastBlockSize = nBlockSize;
} bool TransactionsPageResponse::operator==(const ModelType &rhs) const { return transactions() == rhs.transactions() and nextTxHash() == rhs.nextTxHash() and allTransactionsSize() == rhs.allTransactionsSize(); } }  // namespace interface
AllowedScopes = { DevelopmentIdentityProviderConfiguration.Audience }, // app roles that the client app may have Claims = applicationConfiguration.Roles.Select(r => new Claim("roles", r)).Concat(new[] { new Claim("appid", applicationConfiguration.Id) }).ToList(),  ClientClaimsPrefix = string.Empty, })); }
*/ GUARD(s2n_config_set_session_cache_onoff(config, 1)); GUARD(config->wall_clock(config->sys_clock_ctx, &now)); EXPECT_SUCCESS(s2n_config_add_ticket_crypto_key(config, ticket_key_name, strlen(ticket_key_name), ticket_key, sizeof(ticket_key), now/ONE_SEC_IN_NANOS)); EXPECT_SUCCESS(s2n_connection_set_config(conn, config));
package jaeger // import "go.opentelemetry.io/otel/exporters/trace/jaeger" import ( "os" )
}; }; export const requestGetter = (req: Request, systemValue: string | boolean) => { const { result } = req.execute(); if (isRequestSet(req)) return result; return systemValue;
} // Encode span stubs, one by one if err := e.encoder.Encode(stub); err != nil { return err }
return } tx, err := c.SendPaymentFromUnencryptedWallet(cfg.Source, target, uint64(cfg.Fee), uint64(cfg.Amount), nil) if err != nil { http.Error(w, fmt.Sprintf("failed to dispense money - %v", err), http.StatusInternalServerError) return
from azurelinuxagent.ga.exthandlers import ExtHandlerInstance class ExtensionCommandNames(object): INSTALL = "install" UNINSTALL = "uninstall" UPDATE = "update"
Cmd.Flags().BoolVar(&flagNoReport, "no-report", false, "don't report the state") Cmd.Flags().BoolVar(&flagCleanupStorage, "cleanup-storage", false, "cleanup storage by removing broken contracts") } func run(*cobra.Command, []string) {
goal_state_fetched = True except Exception as e: msg = u"Exception retrieving the goal state: {0}".format(ustr(traceback.format_exc())) add_event(AGENT_NAME, op=WALAEventOperation.FetchGoalState, version=CURRENT_VERSION, is_success=False, message=msg) if goal_state_fetched:
$mocks = $this->getConstructorMocks( 1, '', '', '' ); Functions\when( 'current_user_can' )->justReturn( true ); Functions\when( 'get_current_user_id' )->justReturn( 1 ); Functions\expect( 'get_rocket_i18n_home_url' )->once()->andReturn( 'http://example.org/' ); Functions\expect( 'get_feed_link' )->twice()->andReturn( 'http://example.org/feed/', 'http://example.org/feed/comments' ); $wp_error   = \Mockery::mock( \WP_Error::class ); $wp_error->shouldReceive('get_error_message')->andReturn( 'Error!' );
pal[i].unused = 0; } SDL_SetColors(_sdl_screen, pal, _local_palette.first_dirty, _local_palette.count_dirty); if (_sdl_screen != _sdl_realscreen && init) { /* When using a shadow surface, also set our palette on the real screen. This lets SDL
'MyResearch/NewPassword', 'MyResearch/Profile', 'MyResearch/Recover', 'MyResearch/SaveSearch', 'MyResearch/StorageRetrievalRequests', 'MyResearch/UserLogin', 'MyResearch/Verify', 'Overdrive/MyContent','Overdrive/Hold', 'Primo/Advanced', 'Primo/Home', 'Primo/Search', 'QRCode/Show', 'QRCode/Unavailable', 'OAI/Server', 'Pazpar2/Home', 'Pazpar2/Search', 'Records/Home', 'Search/Advanced', 'Search/CollectionFacetList', 'Search/Email', 'Search/FacetList', 'Search/History', 'Search/Home', 'Search/NewItem',
"5c2ef2d4eddd2381daa681ac1a901519": true, // Max Goodman, "chromakode" "08abe80bd2da8984534b2d8f7b12c700": true, // Song Gao, "songgao" "eb08cb06e608ea41bd893946445d7919": true, // Miles Steele, "mlsteele" "743338e8d5987e0e5077f0fddc763f19": true, // Taru Karttunen, "taruti" "ee71dbc8e4e3e671e29a94caef5e1b19": true, // Michał Zochniak, "zapu" "0cfef3bacae68424de9bec5b7ff58600": true, // Andrey Petrov, "shazow" "b848bce3d54a76e4da323aad2957e819": true, // Surya, "modalduality" } // EnableAdminFeature returns true if admin features should be enabled
) func TestSimulationBF(t *testing.T) { sc, _, err := createBFTree(7, 2) if err != nil { t.Fatal(err)
try: avg_size_of_message //= num_of_messages except ZeroDivisionError: avg_size_of_message = 0 current_app.logger.warn("No messages calculated", exc_info=True) current_app.logger.info("Done!")
return convertDMNOutput(decisionModel.evaluateAll(dmnContext), predictInput); } protected DecisionModel getDecisionModel(DecisionModels decisionModels, ModelIdentifier modelIdentifier) { String[] namespaceAndName = extractNamespaceAndName(modelIdentifier.getResourceId()); return decisionModels.getDecisionModel(namespaceAndName[0], namespaceAndName[1]); }
} /** * Return the tags associated with the snapshot, or null if no tags are associated with the snapshot. * @return tags associated with the snapshot, or null if no tags are associated with the snapshot. */ default List<String> tags() { return null;
Assert.Equal(createdResource.Meta.VersionId, readResource.Meta.VersionId); Assert.Equal(createdResource.Meta.LastUpdated, readResource.Meta.LastUpdated); } } }
return websocket -> { final SocketAddress socketAddress = websocket.remoteAddress(); final String connectionId = websocket.textHandlerID(); final String token = getAuthToken(websocket); LOG.trace("Authentication token {}", token); LOG.debug("Websocket Connected ({})", socketAddressAsString(socketAddress));
assert_fatal(src.IsObject(), path + " Irohad config top element must be an object."); const auto obj = src.GetObject(); getValByKey(path, dest.block_store_path, obj, config_members::BlockStorePath); getValByKey(path, dest.torii_port, obj, config_members::ToriiPort); getValByKey(path, dest.internal_port, obj, config_members::InternalPort); getValByKey(path, dest.pg_opt, obj, config_members::PgOpt);
} func isWindowsOS(os string) bool { for _, windowsOS := range task.ValidWindowsOSs() { if os == windowsOS { return true }
public static final String CATALOG = "iceberg.mr.catalog"; public static final String HADOOP_CATALOG_WAREHOUSE_LOCATION = "iceberg.mr.catalog.hadoop.warehouse.location"; public static final String CATALOG_LOADER_CLASS = "iceberg.mr.catalog.loader.class"; public static final String SELECTED_COLUMNS = "iceberg.mr.selected.columns"; public static final String CATALOG_NAME = "iceberg.catalog"; public static final String HADOOP_CATALOG = "hadoop.catalog";
{ foreach (ResourcePermission permission in ResourcePermissions) { if (permission.Actions.Count == 0) { yield return new ValidationResult(string.Format(CultureInfo.InvariantCulture, Core.Resources.RoleResourcePermissionWithNoAction, Name)); }
return fileStore != null && fileStore.isReadOnly(); } public double getUpdateFailureRatio() { long updateCounter = this.updateCounter; long updateAttemptCounter = this.updateAttemptCounter; MVMap.RootReference rootReference = meta.getRoot();
} } `; export default { queries: {
defined( 'ABSPATH' ) || exit; ?> <?php echo esc_html( $data['title'] ); ?> <?php $this->render_settings_fields( $data['page'], $data['id'] );
namespace caffe { bool NetNeedsUpgrade(const NetParameter& net_param) { for (int i = 0; i < net_param.layers_size(); ++i) { if (net_param.layers(i).has_layer()) {
end test "does not broadcast for solution run" do # see changes solution not submission for solution run for explanation of this setup exercise = create :practice_exercise, git_important_files_hash: 'da39a3ee5e6b4b0d3255bfef95601890afd80709' solution = create :practice_solution, :published, exercise: exercise submission = create :submission, solution: solution, git_sha: "b72b0958a135cddd775bf116c128e6e859bf11e4"
func (tw *twServer) WaitAndAssert() { tw.t.Helper() processMessages := func() { tw.h.Trigger() // wait for mock twilio server to send messages msgDelay := time.NewTimer(1000 * time.Millisecond)
) func main() { ctx, _ := context.WithTimeout(context.Background(), 10*time.Second) // top is a topic that notifies when a video has been uploaded. // sub is a subscription to this topic.
def slot_code(self, scope): if not self._needs_own(scope): # if the type does not have object attributes, it can # delegate GC methods to its parent - iff the parent # functions are defined in the same module slot_code = self._parent_slot_function(scope) return slot_code or '0'
return results def __repr__(self): repr_str = self.__class__.__name__ + f'(transforms={self.transforms})' return repr_str
}, }, { name:   "additional items with the velero.io/exclude-from-backup label are not backed up", backup: defaultBackup().IncludedNamespaces("ns-1").Result(), apiResources: []*test.APIResource{ test.Pods(
def exit_status(self): return self._proc.exitStatus()
{ Pair<Long, Long> messageAndThreadId; if (message.getSyncContext().isPresent()) { messageAndThreadId = insertSyncTextMessage(masterSecret, envelope, message, smsMessageId); } else { messageAndThreadId = insertStandardTextMessage(masterSecret, envelope, message, smsMessageId); } MessageNotifier.updateNotification(context, masterSecret, messageAndThreadId.second);
scheme := runtime.NewScheme() velerov1api.AddToScheme(scheme) kubebuilderClient, err := kbclient.New(clientConfig, kbclient.Options{ Scheme: scheme, })
} } k.logger.Debugf("could not connect to peer from kademlia %s: %v", bzzAddr.String(), err) k.logger.Warningf("could not connect to peer %s: %v", bzzAddr.ShortString(), err) // continue to next return false, false, nil }
return nil, err } err = validate.UUID("Dest.ID", dst.ID) if err != nil { return nil, err }  var cmID, chanID sql.NullString if dst.Type.IsUserCM() { cmID.String, cmID.Valid = dst.ID, true
protected File generatedResources; @Parameter(property = "kogito.codegen.persistence", defaultValue = "true") protected String generatePersistence; @Parameter(property = "kogito.codegen.rules", defaultValue = "true") protected String generateRules;
{ @"allsaintsday", new string[] { @"allerheiligen" } }, { @"allsoulsday", new string[] { @"allerzielen" } }, { @"christmaseve", new string[] { @"kerstavond" } }, { @"columbus", new string[] { @"columbusday", @"columbusdag" } }, { @"thanksgiving", new string[] { @"thanksgivingday", @"thanksgiving", @"dankzeggingsdag" } }, { @"martinlutherking", new string[] { @"martinlutherkingday", @"martinlutherkingjrday", @"martinlutherkingdag", @"mlkdag" } }, { @"washingtonsbirthday", new string[] { @"washingtonsbirthday", @"washingtonbirthday" } },
// showToken prints the token func showToken(data []byte, out io.Writer) error { _, err := fmt.Fprintln(out, string(data)) if err != nil { return err }
); }); it(`throws an error if the returned compiled template is invalid`, () => { // Emulating an invalid template generated by the LWC compiler. const invalidTemplate = () => '<h1>template</h1>'; registerTemplate(invalidTemplate);
return 'auth'; } reg.logger().error('Not authenticated with sync target - please check your credentials.'); return 'error'; }
), description: shape({ html: string.isRequired }).isRequired }).isRequired, addToCart: func.isRequired };
{ std::string path = str; std::replace( path.begin(), path.end(), ( SEPARATOR == '/' ) ? '\\' : '/', SEPARATOR ); return GetBasename( path ); }
/// </summary> /// <returns>The block that is reserved for the called. It must be passed to Return when it is no longer being used.</returns> #if DEBUG private MemoryPoolBlock Lease() { Debug.Assert(!_disposedValue, "Block being leased from disposed pool!"); #else
'monthly' => 1, ]; $input['automatic_cleanup_frequency'] = isset( $input['automatic_cleanup_frequency'], $cleanup_frequencies[ $input['automatic_cleanup_frequency'] ] ) ? $input['automatic_cleanup_frequency'] : $this->options->get( 'automatic_cleanup_frequency' ); if ( 1 !== $input['schedule_automatic_cleanup'] && ( 'daily' !== $input['automatic_cleanup_frequency'] || 'weekly' !== $input['automatic_cleanup_frequency'] || 'monthly' !== $input['automatic_cleanup_frequency'] ) ) { $input['automatic_cleanup_frequency'] = $this->options->get( 'automatic_cleanup_frequency' );
class Track < ApplicationRecord has_many :users has_many :track_courses, dependent: :delete_all has_many :courses, through: :track_courses validates :title, presence: true
* @param {String} props.signInPageUrl - Sign In Page url * * @returns {{ *   createAccountProps: object * }} */ export const useCreateAccountPage = props => {
_engine->updatePalette( StandardPaletteIndexes() ); }  bool Cursor::isFocusActive() const { return engine().isMouseCursorActive();
'}', '.blocklyDragging>.blocklyPath {', '}', '.blocklyDisabled>.blocklyPath {',
package tech.pegasys.pantheon.consensus.ibft.jsonrpc.methods; import tech.pegasys.pantheon.consensus.ibft.IbftBlockInterface; import tech.pegasys.pantheon.ethereum.core.BlockHeader; import tech.pegasys.pantheon.ethereum.jsonrpc.internal.JsonRpcRequest; import tech.pegasys.pantheon.ethereum.jsonrpc.internal.methods.AbstractBlockParameterMethod;
network.disconnect(this, Optional.ofNullable(reason)); } @Override public void disconnect() { network.disconnect(this, Optional.empty()); }  @Override public SocketAddress getLocalAddress() { throw new UnsupportedOperationException();
parsed = [] headers = {'User-Agent': self._user_agent} # Some videos may be also available on Dailymotion (especially on CNews) if videos['ID_DM'] != '': for stream in self.session.streams('https://www.dailymotion.com/video/' + videos['ID_DM']).items(): yield stream for quality, video_url in list(videos['MEDIA']['VIDEOS'].items()):
'checkout_date'		=> 'Checkout Date', 'checkin_date'		=> 'Checkin Date', 'checkout_to'		=> 'Checkout to', 'cost'				=> 'Purchase Cost', 'create'			=> 'Create Asset', 'date'				=> 'Purchase Date',
private def with_cache return yield unless QueryCache.enabled? return yield if system_collection? key = cache_key if QueryCache.cache_table.has_key?(key) instrument(key) { QueryCache.cache_table[key] }
} // Local sources are listed last, keep searching for the last possible match packageNames = append(packageNames, matches[1]) logger.Log.Debugf("'%s' is available from package '%s'", pkgVer.Name, matches[1]) } return })
const SimTK::Real& muscleTendonVelocity, const SimTK::Real& activation, const bool& ignoreTendonCompliance, const bool& isTendonDynamicsExplicit, const MuscleLengthInfo& mli, FiberVelocityInfo& fvi, const SimTK::Real& normTendonForce, const SimTK::Real& normTendonForceDerivative) const { if (isTendonDynamicsExplicit && !ignoreTendonCompliance) { const auto& normFiberForce = normTendonForce / mli.cosPennationAngle;
} for _, job := range jobs { cmd, err := o.jobExecutor(job.Name) if err != nil { return err }
from mmdet.utils import Registry IOU_CALCULATOR = Registry('iou_calculator')
protected View inflate(LayoutInflater layoutInflater, ViewGroup viewGroup) { View inflatedView = layoutInflater.inflate(R.layout.item_notification, viewGroup, false); ButterKnife.bind(this, inflatedView); if (isarchivedvisible) { swipeLayout.setSwipeEnabled(false); }else { swipeLayout.setSwipeEnabled(true);
Args: url: url to save as a bookmark. If None, use url of current page. title: title of the new bookmark. """ if url and not title: raise cmdexc.CommandError('Title must be provided if url has ' 'been provided')
), 'output_filename': 'js/machinery.min.js', }, 'homepage': { 'source_filenames' : ( 'js/lib/fullpage.js',
app.get("/:id/:domain", function (req, res) { let shotId = req.params.id + "/" + req.params.domain; Shot.get(req.backend, shotId).then((shot) => { if (! shot || shot.clipNames().length === 0) { simpleResponse(res, "Not found", 404); return; } req.shot = shot; if (shouldRenderSimple(req)) { return require("./views/frame").renderSimple(req, res); } else { return require("./views/frame").render(req, res);
repos = list(self.base.repos._iter_disabled_with_enabled_metadata()) for repo in repos: repo.enable() self.base._add_repos_to_sack(repos) self.base._setup_excludes_includes() try: self.base.install(pkg_spec, strict=strict, forms=forms)
assert r.request.url == pr.request.url assert r.request.headers == pr.request.headers  def test_response_lines(self): """ iter_lines should be able to handle data dribbling in which delimiters might not be lined up ideally. """ mock_chunks = [ 'This \r\n',
Kokkos::Impl::initialize_space_factory<SYCLSpaceInitializer>("170_SYCL"); void SYCLSpaceInitializer::initialize(const InitArguments& args) { // If there are no GPUs return whatever else we can run on if no specific GPU is // requested. const auto num_gpus = sycl::device::get_devices(sycl::info::device_type::gpu).size();
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4428-SEA 1645534124 2913735748</p> <hr> <p>Varnish cache server</p> </body>
for name, test := range tests { t.Run(name, func(t *testing.T) { fixedClock.SetTime(fixedClockStart) test.builder.Clock = fixedClock test.builder.T = t test.builder.Init() defer test.builder.Stop()
def _list_from_csv(csv_string, caster=None): """Transform the given comma-separated string into a list (PRIVATE). :param csv_string: comma-separated input string :type csv_string: string
throws IOException, AccumuloException, AccumuloSecurityException, TableNotFoundException; } @VisibleForTesting static class ConcurrentKeyExtentCache implements KeyExtentCache { private static final Text MAX = new Text();
# # @since 2.0.0.rc.7 def process_attribute(name, value) if !respond_to?("#{name}=") && store_as = aliased_fields.invert[name.to_s] name = store_as end responds = respond_to?("#{name}=")
k2ch = k2c/hbar; K6h = K6/hbar; if (utils::strmatch(update->integrate_style,"^respa")) { ilevel_respa = ((Respa *) update->integrate)->nlevels-1; if (respa_level >= 0) ilevel_respa = MIN(respa_level,ilevel_respa); }
baseYmlName: '.travis.yml', externalLinks: service(), buttonLabel: computed('copied', 'rawConfig.source', function () { let source = this.get('rawConfig.source'); return this.get('copied') ? 'Copied!' : `Copy ${fileNameWithoutSha(source)}`; }),
return dict(name=self.name, module=self.module, params=self.params, description=self.description, stopping_conditions=[fact.display for fact in self.stopping_conditions]) def __init__(self, planner_id, name, module, params, stopping_conditions=None, description=None): super().__init__() self.planner_id = planner_id self.name = name self.module = module self.params = params
import threading import os from select import select, error as select_error import socket import subprocess import time import types  from scapy.consts import DARWIN, FREEBSD, OPENBSD, WINDOWS from scapy.compat import plain_str from scapy.data import ETH_P_ALL, MTU
from netlib import version from OpenSSL import SSL;  def sysinfo(): data = [ "Mitmproxy version: %s" % version.VERSION, "Python version: %s" % platform.python_version(), "Platform: %s" % platform.platform(), "SSL version: %s" % SSL.SSLeay_version(SSL.SSLEAY_VERSION), ] d = platform.linux_distribution() t = "Linux distro: %s %s %s" % d
func TestAlertmanagerReloadConfig(t *testing.T) { alertmanager := framework.MakeBasicAlertmanager("reload-config", 1) firstConfig := ` global:
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4461-SEA 1645542551 4124995566</p> <hr> <p>Varnish cache server</p> </body>
} static void init(TestHiveShell shell, TestTables testTables, TemporaryFolder temp, String engine) { init(shell, testTables, temp, engine, false); } static void init(TestHiveShell shell, TestTables testTables, TemporaryFolder temp, String engine, boolean cboEnable) { shell.openSession(); for (Map.Entry<String, String> property : testTables.properties().entrySet()) {
private final HazelcastInstance instance; private final ILogger logger; private final IMap<Long, JobRecord> jobRecords; private final IMap<Long, JobExecutionRecord> jobExecutionRecords; private final IMap<Long, JobResult> jobResults;
def generate_c_code(self, env, options, result): # Check for a common gotcha for new users: naming your .pyx file after the .c file you want to wrap if not is_cython_generated_file(result.c_file, allow_failed=True, if_not_found=True): # Raising a fatal CompileError instead of calling error() to prevent castrating an existing file. raise CompileError( self.pos, 'The output file already exists and does not look like it was generated by Cython: "%s"' % os.path.basename(result.c_file)) modules = self.referenced_modules
* There are a few places where we need to repopulate * the comments. * * @return 	void */ private function _repopulate_comment()
def resize_rows(self, nrows): curr_nrows = self.nrows if len(self.df.key) and nrows > curr_nrows: with pytest.raises(ValueError) as e: self.df.nrows = nrows assert str(e.value) == "Cannot increase the number of rows in a keyed frame" return False else: self.df.nrows = nrows if curr_nrows < nrows: append = [None] * (nrows - curr_nrows)
func (ddb *DoltDB) PullChunks(ctx context.Context, tempDir string, srcDB *DoltDB, stRef types.Ref, progChan chan datas.PullProgress, pullerEventCh chan datas.PullerEvent) error { if datas.CanUsePuller(srcDB.db) && datas.CanUsePuller(ddb.db) { puller, err := datas.NewPuller(ctx, tempDir, defaultChunksPerTF, srcDB.db, ddb.db, stRef.TargetHash(), pullerEventCh) if err != nil { return err }
* * @param WP_Query $query The WP_Query instance (passed by reference). */ if ( ! doing_action( 'pre_get_posts' ) ) { do_action_ref_array( 'pre_get_posts', array( &$this ) ); }
} @Test public void testLambdaBug1470() { String code = readAsString("LambdaBug1470.java"); parseJava18(code); }
ts.exec("createtable " + tableName + " -sf " + splitsFile, true); Collection<Text> createdSplits = client.tableOperations().listSplits(tableName); assertEquals(expectedSplits, new TreeSet<>(createdSplits)); ts.exec("deletetable -f " + tableName); } finally { if (splitsFile != null) { Files.delete(Paths.get(splitsFile)); } }
*/ /** * Upgrade Script: 1.8.4 */ $upgrade_detail = array(
} private static boolean isContinuationChar(byte b) { return b >= (byte)0b1000_0000 && b <= (byte)0b1011_1111; } private static int numberOfFollowingBytes(byte b) { if (b >= (byte)0b1100_0000 && b <= (byte)0b1101_1111) { return 1; } else if (b >= (byte)0b1110_0000 && b <= (byte)0b1110_1111) {
for i := range actions { err := ql.limiter.Wait(context.TODO()) if err != nil { klog.Errorf("QPS load exec error: %v", err) } wg.Start(actions[i]) }
world_size=world_size, rank=proc_id) train_mask, val_mask, test_mask, n_classes, g = data nfeat = g.ndata.pop('feat') labels = g.ndata.pop('label') if not args.data_cpu: nfeat = nfeat.to(device) labels = labels.to(device) in_feats = nfeat.shape[1] train_nid = th.LongTensor(np.nonzero(train_mask)).squeeze()
} if strings.HasPrefix(field, "!") { field = field[1:] headers := *m headers[field] = nil m = &headers
*  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ***********************************************************************************************************************/ // TODO: QT-Separation-Move #include "QJson.hpp" #include "Assert.hpp"
"-Wno-switch-enum", "-Wno-weak-template-vtables", "-Wno-weak-vtables", ) else: ext.compiler.add_compiler_flag(
if __name__ == '__main__': sys.path.append('') setup_logger() validate_environment() parser = argparse.ArgumentParser('Welcome to the system') parser.add_argument('-E', '--environment', required=False, default='local', help='Select an env. file to use') parser.add_argument('--fresh', action='store_true', required=False, default=False,
.limit(5) .order(created_at: :desc) @completed_learnings = current_user.learnings.where(status: 3).order(updated_at: :desc) @my_seat_today = current_user.reservations.find_by(date: Date.current)&.seat&.name render aciton: :index end else
return Arrays.stream(validators).map(PantheonNode::getAddress).sorted().toArray(Address[]::new); } public Condition aBlockIsCreatedByProposer(final PantheonNode proposer) { return new ExpectBlockHasProposer(eth, proposer.getAddress()); }
// This plugin interferes with gradles native annotation processor path configuration so need to configure // it as well to avoid surprises. project.getPluginManager().withPlugin("org.inferred.processors", processorsplugin -> project.getConfigurations() .named(ErrorProneJavacPluginPlugin.CONFIGURATION_NAME)
long recentPubDate = recentPubDates.containsKey(feed.getId()) ? recentPubDates.get(feed.getId()) : -1; NavDrawerData.FeedDrawerItem drawerItem = new NavDrawerData.FeedDrawerItem(feed, feed.getId(), feedCounters.get(feed.getId()), playedCounters.get(feed.getId(), -1), recentPubDate); if (FeedPreferences.TAG_ROOT.equals(tag)) { items.add(drawerItem); } NavDrawerData.FolderDrawerItem folder; if (folders.containsKey(tag)) { folder = folders.get(tag);
// variable private volatile boolean enable = SystemConfig.getInstance().getEnableStatistic() == 1; private volatile int associateTablesByEntryByUserTableSize = SystemConfig.getInstance().getAssociateTablesByEntryByUserTableSize(); private volatile int frontendByBackendByEntryByUserTableSize = SystemConfig.getInstance().getFrontendByBackendByEntryByUserTableSize(); private volatile int tableByUserByEntryTableSize = SystemConfig.getInstance().getTableByUserByEntryTableSize(); private int statisticQueueSize = SystemConfig.getInstance().getStatisticQueueSize(); private StatisticManager() {
// request proposal for the current round auto proposal = network_client_->onRequestProposal(current_round_); auto final_proposal = this->processProposalRequest(std::move(proposal)); // vote for the object received from the network proposal_notifier_.get_subscriber().on_next(std::move(final_proposal)); })),
return nil } // formatKey returns a comma-separated string representation of the key given. func formatKey(ctx context.Context, key types.Value) (string, error) { tuple, ok := key.(types.Tuple) if !ok { return "", fmt.Errorf("Expected types.Tuple but got %T", key) } var vals []string iter, err := tuple.Iterator() if err != nil { return "", err
if len(actions) == 0 { return } log.Infoln(fmt.Sprintf("Recommended follow-up %s:", english.PluralWord(len(actions), "action", "actions"))) prefix := "- " if len(actions) == 1 { prefix = "  " } for _, followup := range actions { log.Infof("%s %s\n", prefix, followup) } }
self.base_class_path = [self.selenium_server_jar_path, self.junit_path, self.junit_listener_path, self.hamcrest_path, self.json_jar_path] self.base_class_path.extend(self.scenario.get("additional-classpath", [])) self.base_class_path = [os.path.abspath(executor.engine.find_file(x)) for x in self.base_class_path] def prepare(self): """
foreach ($this->getElements() as $el) { $isCheckbox = $el['type'] === 'checkbox'; $requireOne = $isCheckbox && ($el['requireOne'] ?? false); $required = $el['required'] ?? $requireOne; $fieldValidators = []; if ($required || $requireOne) {
case "http": outbound = http.NewOutbound(fmt.Sprintf("http://%s:8081", server)) case "tchannel": ch, err := tchannel.NewChannel("client", nil) if err != nil { behavior.Fatalf(s, "couldn't create tchannel: %v", err) }
{ parent::configure(); $this->setDescription('Create a user.') ->setDefinition([ new InputArgument('username', InputArgument::REQUIRED, 'The username'), new InputArgument('email', InputArgument::REQUIRED, 'The email'),
return { id: currNote.id, parent_id: currNote.parent_id,  notesParentType: state.notesParentType, selectedFolderId: state.selectedFolderId, selectedTagId: state.selectedTagId, selectedSearchId: state.selectedSearchId, selectedSmartFilterId: state.selectedSmartFilterId, }; } }
nx.write_gexf(G,fh) fh.seek(0) H=nx.read_gexf(fh,node_type=int) assert_equal(H.node[1]['testattr'], True)
} protoerr := protobuf.NewError(yarpcerrors.CodeAborted, "test error", protobuf.WithErrorDetails(&types.StringValue{Value: "val"})) p := NewPortProvider(t) tests := []struct { name     string
flowExporter := exporter.NewFlowExporter( flowrecords.NewFlowRecords(connStore), o.config.FlowExportFrequency) go wait.Until(func() { flowExporter.Export(o.flowCollector, stopCh, pollDone) }, 0, stopCh) } <-stopCh
}), ) tppCRWithCustomFields := gen.CertificateRequestFrom(tppCR, gen.SetCertificateRequestAnnotations(map[string]string{"venafi.cert-manager.io/custom-fields": `[{"name": "cert-manager-test", "value": "test ok"}]`})) tppCRWithInvalidCustomFields := gen.CertificateRequestFrom(tppCR, gen.SetCertificateRequestAnnotations(map[string]string{"venafi.cert-manager.io/custom-fields": `[{"name": cert-manager-test}]`})) cloudCR := gen.CertificateRequestFrom(baseCR, gen.SetCertificateRequestIssuer(cmmeta.ObjectReference{
*/ public static function table_drop( $table ) { $pods_prefix = self::get_pods_prefix();  $sql = "DROP TABLE `{$pods_prefix}{$table}`"; return self::query( $sql ); }
total = self.squared_sum - self.sum * mean raw_scores = 1 - (self.res / total) raw_scores = tf.where( tf.math.is_inf(raw_scores), tf.zeros_like(raw_scores), raw_scores ) if self.multioutput == "raw_values":
assert.Equal(t, 1, len(tasks)) task := tasks[0] assert.Equal(t, "arn:aws:ecs:us-west-2:1234567890:task/e4e6c98c-aa44-4146-baf9-431b04c0d162", task.Arn) assert.Equal(t, "chc-state", task.Family) assert.Equal(t, 1, len(task.Containers))
return data def readline(self): """Read a single line for the BGZF file.""" i = self._buffer.find(self._newline, self._within_block_offset) # Three cases to consider, if i == -1:
) => { if (!imageURL || !type) return ''; const imageRatio = ratio || DEFAULT_WIDTH_TO_HEIGHT_RATIO; const generateSrcsetUrl = generateUrl(imageURL, type); return Array.from(imageWidths, ([, value]) => value)
} return ipAddr case IPSetTypeHashIPPort: // The member should be of the format <IP>,(tcp|udp):<port number> parts := strings.Split(member, ",") if len(parts) != 2 { log.WithField("member", member).Panic("Failed to parse IP,port IP set member")
namespace MvvmCross.Forms.Presenters { public abstract class MvxFormsPagePresenter : MvxViewPresenter, IMvxFormsPagePresenter { public const string ModalPresentationParameter = "modal";
} cmd := []string{"go", "build"} if ctx.Config.Build.Flags != "" { cmd = append(cmd, strings.Fields(ctx.Config.Build.Flags)...) } cmd = append(cmd, "-ldflags="+ldflags, "-o", output, ctx.Config.Build.Main) if err := run(goos, goarch, cmd); err != nil {
# REALLY Needs to use columns! print(fmt % (fill_exact_width(_("ID"), 6, 6), fill_exact_width(_("Action(s)"), 14, 14), fill_exact_width(P_("Package", "Packages", 1), 53, 53))) print("-" * 79) fmt = "%6u | %s | %-50s" num = 0
<?php /** * Finds whether a customized block template with the given slug exists for the currently active theme. * * @access private * @since 5.8.0
Preconditions.checkArgument(repeatedElement.isRepetition(Type.Repetition.REPEATED), "Invalid list: inner group is not repeated"); Preconditions.checkArgument( repeatedElement.isPrimitive() || repeatedElement.asGroupType().getFieldCount() <= 1, "Invalid list: repeated group is not a single field or primitive: %s", list); visitor.beforeRepeatedElement(repeatedElement);
public static class TestPerson implements Serializable { public String name; public int age; public boolean status; public TestPerson() { }
return false; } if (null === static::$removedServiceIds) { static::$removedServiceIds = $container->getRemovedIds(); } return isset(static::$removedServiceIds[$strClass]); } /**
url = flow.request.pretty_url else: url = flow.request.url terminalWidthLimit = max(shutil.get_terminal_size()[0] - 25 , 50) if self.flow_detail < 1 and len(url) > terminalWidthLimit: url = url[:terminalWidthLimit] + "…" url = click.style(strutils.escape_control_characters(url), bold=True)
execute = pyqtSignal(str) def __init__(self, _namespace, parent): """Constructor.
private readonly TimeSpan _minWaitTime; private readonly TimeSpan _maxWaitTime; public RetryExceptionPolicyFactory(CosmosDataStoreConfiguration configuration) { EnsureArg.IsNotNull(configuration, nameof(configuration));
var pr = this.config.DateParser.Parse(ers[0], refDateTime); var futureDate = (DateObject)((DateTimeResolutionResult)pr.Value).FutureValue; var pastDate = (DateObject)((DateTimeResolutionResult)pr.Value).PastValue;  ret = GetParsedResult(pr.TimexStr, futureDate, pastDate); } return ret;
MulticastSocket multicastSocket = null; SocketAddress sa = null; NetworkInterface ni = PMS.get().getServer().getNetworkInterface(); try { multicastSocket = getNewMulticastSocket(); sa = new InetSocketAddress(getIPv4MulticastAddress(), UPNP_PORT); multicastSocket.joinGroup(sa, ni); for (String NT: NT_LIST) {
}); } async setupEmbarkJS() { this.events.request("embarkjs:plugin:register", 'storage', 'ipfs', 'embarkjs-ipfs'); await this.events.request2("embarkjs:console:register", 'storage', 'ipfs', 'embarkjs-ipfs'); this.events.on("storage:started", () => { let config = this.embark.config.storageConfig.dappConnection || []; this.events.request("embarkjs:console:setProvider", 'storage', 'ipfs', config);
.option('-b, --bare', 'Scaffold project without beginner instructions') .action((name, cmd) => { const options = cleanArgs(cmd) if (program.args.length > 1){ console.log(chalk.yellow('\n Info: You provided more than one argument. The first one will be used as the app\'s name, the rest are ignored.')) } // --git makes commander to default git to true if (process.argv.includes('-g') || process.argv.includes('--git')) {
app.get("/:id/:domain", function (req, res) { let shotId = req.params.id + "/" + req.params.domain; Shot.get(req.backend, shotId).then((shot) => { if (! shot || shot.clipNames().length === 0) { simpleResponse(res, "Not found", 404); return; }
oldVNode._dom == oldDom && oldDom.parentNode != parentDom ) { // The above condition is to handle null placeholders. See test in placeholder.test.js: // `efficiently replace null placeholders in parent rerenders` oldDom = getDomSibling(oldVNode); }
std::unique_ptr<optimizer> build_no_optimizer_from_pbuf( google::protobuf::Message const& msg, lbann_comm* comm) { return nullptr; } using factory_type = lbann::generic_factory<
closed chan bool } // LocalMaxBuffer is the number of packets that can be sent simultaneously to the // same address. const LocalMaxBuffer = 200
if (!SUPPORTED_PACKAGE_MANAGERS.includes(this.bin)) { log() warn(`Unknown package manager: ${this.bin}. Currently we only support one of [${SUPPORTED_PACKAGE_MANAGERS.join(', ')}]. ${this.bin} may not be well supported and we are now treating it like npm but potential errors could happen. See if you can use '--registry' instead.`) PACKAGE_MANAGER_CONFIG[this.bin] = PACKAGE_MANAGER_CONFIG.npm } }
elif 'reg_class_agnostic' in config.model.bbox_head.keys(): reg_cls_agnostic = config.model.bbox_head \ .reg_class_agnostic temp_file.close() return is_two_stage, is_ssd, is_retina, reg_cls_agnostic
for _, span := range spans { span.End() } // Only one span should be sampled meaning only one execution of // executionTracerTaskEnd. if got, want := n, uint64(1); got != want { t.Fatalf("Execution tracer task ended for %v spans; want %v", got, want) }
for (int i = 0; i < union.getInputs().size(); i++) { RelNode input = union.getInput(i); List<Pair<RexNode, String>> newChildExprs = new ArrayList<>(); for (int j : refsIndex) { newChildExprs.add( Pair.<RexNode, String>of(rexBuilder.makeInputRef(input, j), input.getRowType().getFieldList().get(j).getName())); } if (newChildExprs.isEmpty()) { // At least a single item in project is required.
package org.apache.rocketmq.remoting.netty; import io.netty.handler.ssl.ClientAuth; import io.netty.handler.ssl.OpenSsl; import io.netty.handler.ssl.SslContext; import io.netty.handler.ssl.SslContextBuilder; import io.netty.handler.ssl.SslProvider;
private final SparkSession spark; private final JavaSparkContext sparkContext; private final AtomicInteger jobCounter = new AtomicInteger(); protected BaseSparkAction(SparkSession spark) { this.spark = spark;
return false, err } err = withContextTx(ctx, a.DB, func(ctx context.Context, tx *sql.Tx) error { return a.ScheduleStore.SetTemporarySchedule(ctx, tx, schedID, schedule.TemporarySchedule{ Start:  input.Start,
try { parent::deleteAction(); } catch (CustomerException $e) { $error_msg = $e->getMessage();
} /** * Check that __clone, __construct, and __destruct do not have a return type * hint in their signature. * * @param  MethodStorage $method_storage * @param  CodeLocation  $code_location * @return false|null
CommonsApplication application = CommonsApplication.getInstance(); compositeDisposable.add( CommonsApplication.getInstance().getMWApi() .getUploadCount(application.getCurrentAccount().name) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(
{ /** * Only uncompressed points are supported by the server and the client must include it in * the extension. Just skip the extension. */ return 0; }
end end module BSON class InvalidDocument def inspect
* @return bool */ private function is_user_allowed() { return ( rocket_get_constant( 'WP_CLI', false ) || current_user_can( 'rocket_manage_options' ) ) && rocket_valid_key(); } /**
return <-done, <-errChan } // handleUpdate handles both best effort `FullUpdate` and the stricter single workspace `Update` callers. // For the stricter case, we collect all errors that prevent the update from establishing a // tunnel to a "running" instance. func (b *Bastion) handleUpdate(ur *WorkspaceUpdateRequest) { var ws *Workspace var errs []error
} var q = stringQs(location.hash.substring(1)), chosen = q.background || q.layer, extent = parseMap(q.map), validRecent, best; backgroundSources = imagery.map(function(source) {
try: stream = openfunction(filename, mode=mode) except (IOError, OSError) as err: # An exception might be raised due to two reasons, first the openfunction is unable to open the file, in this # case we have to ignore the error and return None. Second is when openfunction can't open the file because # either the file isn't there or the permissions don't allow access. if errno.errorcode[err.errno] in ['ENOENT', 'EACCES']: six.reraise(*sys.exc_info()) return None
// 9) Add 'ipToTask' map to state file // 10) Add 'healthCheckType' field in 'apicontainer.Container' // 11) //  a) Add 'PrivateDNSName' field to 'api.ENI' //  b)Remove `AppliedStatus` field form 'apicontainer.Container' // 12) Deprecate 'TransitionDependencySet' and add new 'TransitionDependenciesMap' in 'apicontainer.Container' // 13) Add 'resources' field to 'api.task.task' ECSDataVersion = 13 // ecsDataFile specifies the filename in the ECS_DATADIR ecsDataFile = "ecs_agent_data.json"
rocket_first_install(); $this->assertSame( 1, Filters\applied( 'rocket_first_install_options' ) ); } public function addProvider() {
// from config loader (eg. a http loader) with given interval. // // EXPERIMENTAL: Subject to change. PullInterval caddy.Duration `json:"pull_interval,omitempty"` } // IdentityConfig configures management of this server's identity. An identity
EXPECT_FAILURE_WITH_ERRNO(s2n_negotiate_test_server_and_client(server_conn, client_conn), S2N_ERR_BAD_MESSAGE); /* Pretend we didn't test the above error condition. * The S2N_ERR_BAD_MESSAGE error triggered S2N to close the connection. */ server_conn->closed = false; client_conn->closed = false;  /* Read the remaining early data properly */ EXPECT_SUCCESS(s2n_recv_early_data(server_conn, actual_payload, sizeof(actual_payload), &data_size, &blocked));
Constants.VERSION_MINOR < 4); /** * System property {@code h2.oldResultSetGetObject}, {@code true} by default. * Return {@code Byte} and {@code Short} instead of {@code Integer} from * {@code ResultSet#getObject(...)} for {@code TINYINT} and {@code SMALLINT} * values. */ public static final boolean OLD_RESULT_SET_GET_OBJECT = Utils.getProperty("h2.oldResultSetGetObject", true); /** * System property <code>h2.pgClientEncoding</code> (default: UTF-8).<br />
javaConvention.getTargetCompatibility().toString()))); project.getPluginManager().apply(ScalaStylePlugin.class); TaskCollection<ScalaStyleTask> scalaStyleTasks = project.getTasks().withType(ScalaStyleTask.class); project.getTasks().named("check").configure(task -> task.dependsOn(scalaStyleTasks)); scalaStyleTasks .configureEach(scalaStyleTask -> { scalaStyleTask.setConfigLocation(project.getRootDir().toPath()
// make sure we process item without checking integrity assert.Equal(t, 1, called) } // Verify that the origin should not be checked when ValidateStaking config is set to false func TestOriginValidation(t *testing.T) { identities := unittest.IdentityListFixture(16) targetID := identities[0].NodeID
Notes ----- Group betweenness centrality is described in [1]_ and its importance discussed in [3]_. initial implementation of the algorithm is mentioned in [2]_. This function uses an improved algorithm presented in [4]_. The number of nodes in the group must be a maximum of n - 2 where `n` is the total number of nodes in the graph.
} var file = filepath.Join(primeDir, "meta", "snap.yaml") log.WithField("file", file).Debug("creating snap metadata") var metadata = &Metadata{ Version:       ctx.Version,
} const fheroes2::Sprite & panel = fheroes2::AGG::GetICN( ICN::REQSBKG, 0 ); Rect rt( ( display.width() - panel.width() ) / 2, ( display.height() - panel.height() ) / 2, panel.width(), panel.height() ); fheroes2::ImageRestorer background( display, rt.x - SHADOWWIDTH, rt.y, rt.w + SHADOWWIDTH, rt.h + SHADOWWIDTH );
{ tagEntryInfo tag; /* FIXME: This if-clause should be removed. */ if (kind == K_UNDEFINED || kind == K_IDENTIFIER) { verbose ("Unexpected token kind %d\n", kind); return; }  /* check if a container before kind is modified by prototype */ /* BTW should we create a context for a prototype? */ bool container = isContainer(kind);
"github.com/kiali/kiali/models" "github.com/kiali/kiali/prometheus" "github.com/kiali/kiali/prometheus/internalmetrics" ) const defaultNamespaceLabel = "namespace"
return fastquery.FastQuery(self.connection) def get_validators(self, height=None): result = backend.query.get_validator_set(self.connection, height) validators = result['validators'] for v in validators: v.pop('address')
m.poster_time, m.subject, m.id_topic, m.id_member, m.id_msg, m.id_board, b.name AS board_name, COALESCE(mem.real_name, m.poster_name) AS poster_name, ' . ($user_info['is_guest'] ? '1 AS is_read, 0 AS new_from' : ' COALESCE(lt.id_msg, lmr.id_msg, 0 >= m.id_msg_modified AS is_read, COALESCE(lt.id_msg, lmr.id_msg, -1) + 1 AS new_from') . ', ' . ($limit_body ? 'SUBSTRING(m.body, 1, 384) AS body' : 'm.body') . ', m.smileys_enabled FROM {db_prefix}messages AS m INNER JOIN {db_prefix}boards AS b ON (b.id_board = m.id_board) LEFT JOIN {db_prefix}members AS mem ON (mem.id_member = m.id_member)' . (!$user_info['is_guest'] ? '
statusBar.SetCenter( dst_pt.x + bar.width() / 2, dst_pt.y + 12 ); // redraw resource panel const Rect & rectResource = RedrawResourcePanel( cur_pt ); // button exit dst_pt.x = cur_pt.x + 553;
{ public Task Run() { using (var bufferPool = new MemoryPool()) { var filePath = Path.GetFullPath("Program.cs");
private final Address recipient; private final VoteType voteType; public static final byte ADD_NONCE = (byte) 0xFF; public static final byte DROP_NONCE = (byte) 0x0L;  public static final ImmutableBiMap<VoteType, Byte> voteToValue = ImmutableBiMap.of( VoteType.ADD, ADD_NONCE, VoteType.DROP, DROP_NONCE); public Vote(final Address recipient, final VoteType voteType) { this.recipient = recipient;
} @Override public void add(final PeerConnection newConnection) { final Address peerAddress = newConnection.getPeer().getAddress(); peerConnections.put(peerAddress, newConnection); } @Override public void remove(final PeerConnection removedConnection) { final Address peerAddress = removedConnection.getPeer().getAddress(); peerConnections.remove(peerAddress); }
String containerName = String.format("%s%s", configuration.getDockerPrefix(), taskProcess.getTask().getTaskId()); int possiblePid = dockerClient.inspectContainer(containerName).state().pid(); if (possiblePid == 0) { LOG.warn(String.format("Container %s has pid %s (running: %s). Defaulting to 0 threads running.", containerName, possiblePid, dockerClient.inspectContainer(containerName).state().running())); return 0; } else { dockerPid = Optional.of(possiblePid);
# See the License for the specific language governing permissions and # limitations under the License. """Forseti installer CLI config object.""" from config import Config from ..util.constants import TEMPLATE_TYPE_CLIENT class ClientConfig(Config): """Forseti installer CLI config object.""" def __init__(self, **kwargs): """Initialize.
{ bool has_child_methods = false; /* skip whatever is the value */ while (! isType (token, TOKEN_COMMA) && ! isType (token, TOKEN_CLOSE_CURLY) &&
errlog  *log.Logger } // newOSProcessContext returns the default processContext from global variables. func newOSProcessContext() (*processContext, error) { workdir, err := os.Getwd() if err != nil { return nil, err
// See SEC-2002 @Test public void onSessionChangePublishesMigrationEventIfMigrateAttributesIsTrue() throws Exception { SessionFixationProtectionStrategyWithPublicOnSessionChange strategy = new SessionFixationProtectionStrategyWithPublicOnSessionChange(); HttpServletRequest request = new MockHttpServletRequest(); HttpSession session = request.getSession();
// Ask each dirty IP set to write its updates to the stream. var writeErr error s.dirtyIPSetIDs.Iter(func(item interface{}) error { if !s.ipSetNeeded(item.(string)) { return nil } ipSet := s.ipSetIDToIPSet[item.(string)]
headers["Content-Type"] = "application/json" self.log.debug("Request: %s %s %s", log_method, url, data[:self.logger_limit] if data else None)  response = self.http_request(method=log_method, url=url, data=data, headers=headers, cookies=self._cookies, timeout=self.timeout) resp = response.content if not isinstance(resp, str):
namespace Contao\NewsBundle\EventListener; use Contao\Config; use Contao\CoreBundle\Framework\Adapter; use Contao\CoreBundle\Framework\ContaoFrameworkInterface; use Contao\Input; use Contao\News;
# create daily and cumulative stats dataframe daily_perfs = [] cum_perfs = [] # TODO: the loop here could overwrite expected properties # of daily_perf. Could potentially raise or log a # warning. for perf in perfs: if 'daily_perf' in perf:  perf['daily_perf'].update( perf['daily_perf'].pop('recorded_vars') ) daily_perfs.append(perf['daily_perf']) else: cum_perfs.append(perf)
def warn_about_first_description_arg_behavioral_change_in_rspec_3 return unless behavior_change = self[:description_arg_behavior_changing_in_rspec_3] RSpec.warn_deprecation(behavior_change.warning) end def first_description_arg
e := escape.Escape(k, func(runes []rune, i int) bool { c := runes[i] switch { case escape.IsASCIIAlphanumeric(c): return false case c == '_': return false
AttachChild(m_icon); m_link_text = new LinkText(GG::X0, GG::Y0, GG::X1, m_sitrep_entry.GetText() + " ", ClientUI::GetFont(), GG::FORMAT_LEFT | GG::FORMAT_VCENTER | GG::FORMAT_WORDBREAK, ClientUI::TextColor()); m_link_text->SetDecorator(VarText::EMPIRE_ID_TAG, new ColorEmpire()); AttachChild(m_link_text);
ValidateMultiaryExpression( options.Expression, MultiaryOperator.And, e => ValidateResourceTypeSearchParameterExpression(e, resourceType.ToString()), e => Assert.Equal(expression, e)); }
status := location.Status.Phase if status == "" { status = "Unknown" } row.Cells = append(row.Cells,
'jQuery': 'readonly', // Jellyfin globals 'ApiClient': 'writable', 'Events': 'writable', 'chrome': 'writable', 'DlnaProfilePage': 'writable', 'DashboardPage': 'writable',
Also cleans up the temp file if close is not invoked """ def move_to_final_destination(self): os.rename(self.tmp_path, self.path)
// ListContainersResponse encapsulates the response from the docker client for the // ListContainers call. type ListContainersResponse struct { DockerIds []string Error     error }
return new GetClusterMetadataOperation(); case GET_JOB_METRICS_OP: return new GetJobMetricsOperation(); case GET_LOCAL_JOB_METRICS_OP: return new GetLocalJobMetricsOperation(); default: throw new IllegalArgumentException("Unknown type id " + typeId); }
@EnableConfigurationProperties(SelfTracingProperties.class) @ConditionalOnSelfTracing public class TracingConfiguration { /** Configuration for how to buffer spans into messages for Zipkin */ @Bean Reporter<Span> reporter(BeanFactory factory, SelfTracingProperties config) { return AsyncReporter.builder(new LocalSender(factory)) .messageTimeout(config.getMessageTimeout().toNanos(), TimeUnit.NANOSECONDS) .metrics(new ReporterMetricsAdapter(factory)) .build();
}; exports.imageLink = function (urlBase, resource) { if (! resource.startsWith("/")) { resource = "/" + resource; } if (resource.startsWith("/images")) {
public String format() { return CsvFileFormat.FORMAT_CSV; } }
public static class RedRemoteControlCarTeam { public class RemoteControlCar
private void scheduleNextPull(PullResult pullResult) { pullRequest.setNextOffset(pullResult.getNextBeginOffset()); correctTagsOffset(pullRequest); if (defaultMQPushConsumer.getPullIntervalPolicy().getPullInterval() > 0) { executePullRequestLater(pullRequest, defaultMQPushConsumer.getPullIntervalPolicy().getPullInterval()); } else { DefaultMQPushConsumerImpl.this.executePullRequestImmediately(pullRequest); }
// // 3. Locate the Access Key (Primary or Secondary) under your Storage Account > Settings > Access Keys. // // 4. Set the environment variables AZURE_STORAGE_ACCOUNT, AZURE_STORAGE_KEY to //    the storage account name and your access key. // // 5. Create a container in your Storage Account > Blob. Update the bucketName // constant to your container name.
add_overlay("bombarding.png"); } // Moving fleets can't be gifted.  The order will be automatically // cancelled on the server.  This make the UI appear to cancel the // order when the ship is moved without requiring the player to // re-order the gifting if the ship is stopped. if (fleet->OrderedGivenToEmpire() != ALL_EMPIRES && fleet->TravelRoute().empty()) add_overlay("gifting.png");
point["lat"] = float(point_tuple[0]) point["lng"] = float(point_tuple[1]) point["alt"] = float(point_tuple[2]) point["mode"] = mode.get("mode", "walking") return points def load_gpx(self):
""" default_domain = self.scenario.get("default-domain", None) default_port = self.scenario.get("default-port", None) retrieve_resources = self.scenario.get("retrieve-resources", True) concurrent_pull_size = self.scenario.get("concurrent-pull-size", 4) timeout = self.scenario.get("timeout", None)
Blockly.Events.setGroup(false); } this.variableMap_.clear(); // Any block with a drop-down or WidgetDiv was disposed. if (Blockly.DropDownDiv) { Blockly.DropDownDiv.hideWithoutAnimation();
}; }, [imageLabel, imageURL]); return { addToCartButtonProps, confirmRemovalIsOpen,
req["url"] = None try: requests.append(self.__parse_request(req)) except BaseException as exc: logging.debug("%s\n%s" % traceback.format_exc()) raise TaurusConfigError("Wrong request:\n %s" % req) return requests
} if (!$kernel->isDebug()) { // Enable HTTP Cache if not disabled explicitly if (!($_SERVER['DISABLE_HTTP_CACHE'] ?? false)) { return $kernel->getHttpCache(); } }
try { if (userpoolsLoginKey.equals(mStore.get(PROVIDER_KEY))) { String token = mStore.get("token"); return CognitoJWTParser.getClaim(token, "sub"); } return null; } catch (Exception e) {
""" class SwissProtParserError(ValueError): """An error occurred while parsing a SwissProt file."""
goog.require('Blockly.utils'); goog.require('goog.color'); // Turn off debugging when compiled. /* eslint-disable no-unused-vars */
type Props = { percentage: number }; @observer export default class StakingInfo extends Component<Props> { static defaultProps = { percentage: 0, };
} } } for (handledrn_map::iterator it = hdrns.begin(); it != hdrns.end();) { (it++)->second->retry(API_OK); } } }
sessionManager.forceLogin(context); return; } contribution.setCreator(sessionManager.getAuthorName()); } if (contribution.getDescription() == null) {
func_details.envvars["AWS_LAMBDA_FUNCTION_HANDLER"] = main_file func_details.envvars["AWS_LAMBDA_EVENT_BODY"] = json.dumps(json_safe(event)) else: LOG.warn("Function details are empty") LOG.info(cmd) result = self._execute_in_custom_runtime(cmd, func_details=func_details)
return ret; } void OpenSimContext::setLocation(PathPoint& mp, int i, double d) { mp.setLocationCoord(*_configState, i, d); _configState->invalidateAll(SimTK::Stage::Position); _model->getMultibodySystem().realize(*_configState, SimTK::Stage::Position); } void OpenSimContext::setEndPoint(PathWrap& mw, int newEndPt) {
self.after_conv3_plugin_names = self.make_block_plugins( planes * self.expansion, self.after_conv3_plugins) def make_block_plugins(self, in_channels, plugins): """ make plugins for block
// Request transmits the given data and waits for a response. // Implementations of send should be threadsafe and respect the timeout // present on the context. func (f *fAdapterTransport) Request(ctx FContext, oneway bool, payload []byte) ([]byte, error) { resultC := make(chan []byte, 1) errorC := make(chan error, 1)
blacklist ${PATH}/ssh blacklist /usr/lib/openssh blacklist /usr/lib/ssh blacklist /usr/libexec/openssh blacklist ${PATH}/passwd blacklist /usr/lib/xorg/Xorg.wrap blacklist /usr/lib/policykit-1/polkit-agent-helper-1
class Sensei_Setup_Wizard { const SUGGEST_SETUP_WIZARD_OPTION = 'sensei_suggest_setup_wizard'; const WC_INFORMATION_TRANSIENT    = 'sensei_woocommerce_plugin_information'; const WCCOM_INSTALLING_TRANSIENT  = 'sensei_setup_wizard_wccom_installing'; const USER_DATA_OPTION            = 'sensei_setup_wizard_data'; const MC_LIST_ID                  = '4fa225a515'; const MC_USER_ID                  = '7a061a9141b0911d6d9bafe3a';
int i; int action = 3; // 1=add, 2=remove, 3=help+list (default), 4=reset if (message && *message) { if (message[0] == '+') { message++;
DefaultSendMode = Binary ) // Start starts the adapter. Note: Only call once, not thread safe. func (a *Adapter) Start(ctx context.Context) error { var err error
} { int fd = h2o_make_temp_file(h2o_socket_buffer_mmap_settings.fn_template); if (fd == -1) { fprintf(stderr, "temp-buffer-path: failed to create temporary file from the mkstemp(3) template '%s': %s\n", h2o_socket_buffer_mmap_settings.fn_template, strerror(errno)); return EX_CONFIG; } close(fd); } /* calculate defaults (note: open file cached is purged once every loop) */
CollectionExprAliasCommand[CollectionExprAliasT], sd.CreateObject[CollectionExprAliasT], ): pass class DeleteCollectionExprAlias(
"\" with \"" + definitionFileName.substring(0, definitionFileName.length() - 2) + ".md\".", di); } ArrayList<File> allLookupDirectories = new ArrayList<>(lookupDirectories); allLookupDirectories.add(1, currentDirectory); //after builtin directory but before anything else Optional<File> definitionFile = allLookupDirectories.stream() .map(lookupDirectory -> { if (new File(definitionFileName).isAbsolute()) { return new File(definitionFileName);
in.close(); } void data_store_image::exchange_data() { if (m_master) std::cerr << "starting exchange_data\n"; std::stringstream err; //build map: proc -> global indices that proc needs for this epoch, and
} @Override public final List<DMLResponseHandler> getMerges() { return this.merges; }
// updatePeers update the peers list if their peer change counter has changed. updatePeers := func() { if curPeersChangeCounter := atomic.LoadInt32(&wn.peersChangeCounter); curPeersChangeCounter != lastPeersChangeCounter { peers, lastPeersChangeCounter = wn.peerSnapshot(peers) } }
data, csvfile = get_airdrop_data(protocol_name, data_dir) for row in data: if len(row) < 2: raise UnableToDecryptRemoteData( f'Airdrop CSV for {protocol_name} contains an invalid row: {row}', ) addr, amount, *_ = row # not doing to_checksum_address() here since the file addresses are checksummed # and doing to_checksum_address() so many times hits performance
// Note that we don't need to call mayOpenGrain() because the existence of a session // implies this check was already performed. var user = session.userId && Meteor.users.findOne(session.userId);
final boolean devMode, final Function<Collection<PantheonNode>, Optional<String>> genesisConfig) throws IOException { this.name = name; this.homeDirectory = Files.createTempDirectory("acctest"); this.keyPair = KeyPairUtil.loadKeyPair(homeDirectory); this.p2pPort = p2pPort; this.miningParameters = miningParameters;
import com.hazelcast.jet.impl.execution.init.JetInitDataSerializerHook; import com.hazelcast.nio.tcp.FirewallingConnectionManager; import com.hazelcast.test.HazelcastSerialClassRunner; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith;
* @param consumer *          emit counter objects derived from key and value to this consumer */ void convert(Key k, Value v, Consumer<K> consumer); } /**
html += '<button is="paper-icon-button-light" class="muteButton mediaButton"><i class="md-icon">&#xE050;</i></button>'; html += '<div class="sliderContainer nowPlayingBarVolumeSliderContainer hide" style="width:9em;vertical-align:middle;display:inline-flex;">'; html += '<input type="range" is="emby-slider" pin step="1" min="0" max="100" value="0" class="slider-medium-thumb nowPlayingBarVolumeSlider"/>'; html += '</div>';
</td> <td> <ul> <li><?php eT("Responses are no longer accessible.");?><?php sprintf(gT('Your response table will be renamed to: {%s}old_%d_{%s}'), $dbprefix, $surveyid, $date); ?></li> <li><?php eT("All participant information will be lost.");?></li> <li><?php eT("A deactivated survey cannot be accessed by participants.  A message will be displayed stating that the survey has been closed.");?></li> <li><?php eT("Questions, groups and parameters can be edited again.");?></li>
assert_almost_equal(Q.mean(),  0.0, decimal=1) @staticmethod def test_villin_folded(): # one folded, one unfolded f = MDAnalysis.Universe(contacts_villin_folded)
Changed struct { Since            string `long:"since" description:"Calculate changes since this tree-ish/scm ref (defaults to current HEAD/tip)."` DiffSpec         string `long:"diffspec" description:"Calculate changes contained within given scm spec (commit range/sha/ref/etc)."` IncludeDependees string `long:"include-dependees" default:"none" choice:"none" choice:"direct" choice:"transitive" description:"Include direct or transitive dependees of changed targets."` } `command:"changed" description:"Show changed targets since some diffspec."` } `command:"query" description:"Queries information about the build graph"` }
from .context_block import ContextBlock from .dcn import (DeformConv, DeformConvPack, DeformRoIPooling, DeformRoIPoolingPack, ModulatedDeformConv, ModulatedDeformConvPack, ModulatedDeformRoIPoolingPack, deform_conv, deform_roi_pooling, modulated_deform_conv) from .masked_conv import MaskedConv2d from .nms import nms, soft_nms from .roi_align import RoIAlign, roi_align
map = new LinkedHashMap<CollectionEntry, IPersistentCollection>(); batchLoadableCollections.Add(persister.Role, map); } map[ce] = collection; } /// <summary>
if err := c.Run(); err != nil { return err } _, _, err := gc.cV3.PullRequests.Edit(ctx, "googleapis", "go-genproto", genprotoPRNum, &github.PullRequest{ Body: &newBody, }) return err
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4448-SEA 1645542722 2410604392</p> <hr> <p>Varnish cache server</p> </body>
; """)  # noqa : W291 def test_write_alignment(self): # Default causes no interleave (columns <= 1000) records = [SeqRecord(Seq("ATGCTGCTGA" * 90, alphabet=ambiguous_dna), id=_id) for _id in ["foo", "bar", "baz"]] a = MultipleSeqAlignment(records, alphabet=ambiguous_dna)
# try to revoke token with Google Auth API otherwise Google will consider the account # be still connected and will not send a refresh_token next time the user tries to # connect again. if it doesn't succeed proceed normally and just delete from our database self._revoke_token(user_id, user["access_token"]) super(YoutubeService, self).remove_user(user_id) def _revoke_token(self, user_id: int, access_token: str): """ Revoke the given access_token using Google OAuth Revoke endpoint. Args: access_token: the token to be revoked
state    States } // Check that struct satisfies interface var _ PortForwarder = (*Service)(nil)  // New creates an instance of Service. func New(ctx context.Context, opts ServiceOptions) *Service { ctx, cancel := context.WithCancel(ctx)
} public CompletableFuture<SyncTarget> findSyncTarget() { return syncState .syncTarget() .map(CompletableFuture::completedFuture) // Return an existing sync target if present .orElseGet(this::selectNewSyncTarget); } private CompletableFuture<SyncTarget> selectNewSyncTarget() {
def validate_transaction_schema(tx): """ Validate a transaction dict.  TX_SCHEMA_COMMON contains properties that are common to all types of transaction. TX_SCHEMA_[TRANSFER|CREATE] add additional constraints on top. """ _validate_schema(TX_SCHEMA_COMMON, tx) if tx['operation'] == 'TRANSFER': _validate_schema(TX_SCHEMA_TRANSFER, tx) else:
variables = re.findall(self.re_variable, decoded_test) if variables: relevant_facts = await self._build_relevant_facts([x for x in variables if '_' not in x], facts) if all(relevant_facts): good_facts = [await RuleSet(rules=rules).apply_rules(facts=fact_set) for fact_set in relevant_facts] valid_facts = [await self._trim_by_limit(decoded_test, g_fact[0]) for g_fact in good_facts] for combo in list(itertools.product(*valid_facts)):
if err != nil { return "", err } bts, err := ioutil.ReadFile(path) if os.IsNotExist(err) { return "", nil } if err != nil { return "", err }
const int inner_feature_index = train_data_->InnerFeatureIndex(best_split_info.feature); if(!config_->cegb_penalty_feature_coupled.empty() && !feature_used[inner_feature_index]){ feature_used[inner_feature_index] = true; for(int i = 0; i < tree->num_leaves(); ++i){ if(i == best_leaf) continue; auto split = &splits_per_leaf_[i*train_data_->num_features() + inner_feature_index]; split->gain += config_->cegb_tradeoff*config_->cegb_penalty_feature_coupled[best_split_info.feature];
} public function tearDown() { unset( $_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW'], $GLOBALS['wp_rest_application_password_status'], $GLOBALS['wp_rest_application_password_uuid'] ); parent::tearDown(); } /**
import javax.security.auth.login.LoginException; import javax.security.auth.spi.LoginModule; /** * Dummy login module used for test cases */ public class MyLoginModule implements LoginModule{ String password;
if ($keys[0] == 'LNG' && \count($keys) == 2) { try { $arrCache[$strTag] = System::getContainer()->get(Locales::class)->getDisplayNames(array($keys[1]))[$keys[1]];
content: getTagHref(publicPath, iconPaths.msTileImage, assetsVersionStr) })) } if (msTileColor != null) { data.head.push( makeTag('meta', { name: 'msapplication-TileColor',
TargetPort      string SSLPolicy       *string Aliases         []string Stickiness       *bool HealthCheck     NLBHealthCheck }
saveGiftOptionsQuery: SET_GIFT_OPTIONS_QUERY }); const classes = mergeClasses(defaultClasses, props.classes); return ( <div className={classes.root}>
void testTutorialOne(); // Test different default activations are respected when activation // states are not provided. void testTugOfWar(const string& dataFileName, const double& defaultAct); void reportTendonAndFiberForcesAcrossFiberLengths(const Model& model, const SimTK::State& state); int main() { SimTK::Array_<std::string> failures;
$check = str_replace( array( $thousands, $dot, html_entity_decode( $thousands ) ), array( '', '.', '' ), $value ); $check = trim( $check );
@RunWith(HazelcastSerialClassRunner.class) public class JetInstanceTest extends JetTestSupport { private static final String UNABLE_TO_CONNECT_MESSAGE = "Unable to connect"; @Rule public ExpectedException expectedException = ExpectedException.none();
#@subsitute: tempita [requires tempita substitution - context can't be specified here though so only tempita utility that requires no external context will benefit from this tag - only necessary when @required from non-tempita code] for prototypes and implementation respectively.  For non-python or
BufferSegment returnStart = null; BufferSegment returnEnd = null; int consumedBytes = 0; if (!consumed.IsDefault) { consumedBytes = ReadCursor.GetLength(_readHead, _readHead.Start, consumed.Segment, consumed.Index); returnStart = _readHead; returnEnd = consumed.Segment;
await self._load_payloads(plug) await self._load_abilities(plug) await self._load_objectives(plug) await self._load_adversaries(plug) await self._load_planners(plug) await self._load_sources(plug) await self._load_packers(plug) await self._load_extensions() await self._verify_data_sets() except Exception as e:
else: result_slice = self.df.columns.slice_locs(col_loc.start, col_loc.stop) return self.df.iloc[:, slice(*result_slice)] row_lookup, col_lookup = self._compute_lookup(row_loc, col_loc) if any(i == -1 for i in row_lookup) or any(i == -1 for i in col_lookup):
} private FileVisitResult callback(Path absolutePath, ParserConfiguration configuration, Callback callback) throws IOException { Path localPath = root.relativize(absolutePath); Log.trace("Parsing %s", localPath); ParseResult<CompilationUnit> result = new JavaParser(configuration).parse(COMPILATION_UNIT, provider(absolutePath));
], ], 'service_manager' => [ 'factories' => [ 'VuFindApi\Formatter\FacetFormatter' => 'Zend\ServiceManager\Factory\InvokableFactory', 'VuFindApi\Formatter\RecordFormatter' => 'VuFindApi\Formatter\RecordFormatterFactory', ], ],
// disk, then accesses the network if it must obtain a new certificate // via ACME. // func (cg ConfigGroup) GetCertificate(clientHello *tls.ClientHelloInfo) (*tls.Certificate, error) { cert, err := cg.getCertDuringHandshake(strings.ToLower(clientHello.ServerName), true, true) return &cert.Certificate, err
// Host URL & hostname // Dropped fetching host details since v.1.8.16 as http://www.whoishostingthis.com API seems to be down and this info is not required by MyBB. $info['hosturl'] = $info['hostname'] = "unknown/local"; if($_SERVER['HTTP_HOST'] == 'localhost') { $info['hosturl'] = $info['hostname'] = "localhost"; } if(isset($_SERVER['HTTP_USER_AGENT'])) {
{ QCString replBuf = replaceRef(buf,relPath,urlOnly,context); int indexS = replBuf.find("id=\""), indexE; if (indexS>=0 && (indexE=replBuf.find('"',indexS+4))!=-1) { t << replBuf.left(indexS-1) << replBuf.right(replBuf.length() - indexE - 1); }
appendExecCmdParameters(cmd, BatchConstants.ARG_SEGMENT_ID, seg.getUuid()); appendExecCmdParameters(cmd, BatchConstants.ARG_PARTITION, getRowkeyDistributionOutputPath(jobId) + "/part-r-00000"); String partitionOutputPath = null; if(this.seg.getConfig().isHFileDistCP()){ partitionOutputPath = getRealizationRootPath(jobId) + "/rowkey_stats/part-r-00000_hfile"; }else { partitionOutputPath = getRowkeyDistributionOutputPath(jobId) + "/part-r-00000"; } appendExecCmdParameters(cmd, BatchConstants.ARG_PARTITION, partitionOutputPath); appendExecCmdParameters(cmd, BatchConstants.ARG_CUBOID_MODE, cuboidMode.toString()); appendExecCmdParameters(cmd, BatchConstants.ARG_HBASE_CONF_PATH, getHBaseConfFilePath(jobId));
<div className={styles.loader}> <div className={styles.loaderContent}> {message} {state.babel.isLoading && <PresetLoadingAnimation className={styles.loadingAnimation} />} </div> </div> );
Notes ----- Graphs may have node labels, node attributes, edge labels, and edge attributes, varing from different dataset.  Labels are mapped to :math:`\lbrace 0,\cdots,n-1 \rbrace` where :math:`n` is the number of labels (some datasets have raw labels :math:`\lbrace -1, 1 \rbrace` which will be mapped to :math:`\lbrace 0, 1 \rbrace`). In previous versions, the minimum label was added so that :math:`\lbrace -1, 1 \rbrace` was mapped to :math:`\lbrace 0, 2 \rbrace`. """ _url = r"https://www.chrsmrrs.com/graphkerneldatasets/{}.zip"
rtsFlagsDialogOptions ); if (response === 0) { if (enable) { setRtsFlagsAndRestart(environment.network, RTS_FLAGS); } else { setRtsFlagsAndRestart(environment.network, []); } } };
Ef[2][2] = h_rate[2]/domain->zprd; Ef[0][1] = Ef[1][0] = 0.5 * h_rate[5]/domain->yprd; Ef[0][2] = Ef[2][0] = 0.5 * h_rate[4]/domain->zprd; Ef[1][2] = Ef[2][1] = 0.5 * h_rate[3]/domain->zprd; // copy updated velocity/omega/angmom to the ghost particles // no need to do this if not shearing since comm->ghost_velocity is set
ObjectColor & objcol = ( *it ).second.objcol; if ( objcol.isColor( color ) ) { const MP2::MapObjectType objectType = static_cast<MP2::MapObjectType>( objcol.first ); objcol.second = objectType == MP2::OBJ_CASTLE ? Color::UNUSED : Color::NONE; world.GetTiles( ( *it ).first ).CaptureFlags32( objectType, objcol.second );
def test_word_with_duplicated_character_in_mixed_case(self): self.assertIs(is_isogram("Alphabet"), False) def test_word_with_duplicated_letter_in_mixed_case_lowercase_first(self): self.assertIs(is_isogram("alphAbet"), False) def test_hypothetical_isogrammic_word_with_hyphen(self):
qsort(&containers[0], count, sizeof(struct lxc_container *), cmporder); if (cmd_groups_list && my_args.all) ERROR("Specifying -a (all) with -g (groups) doesn't make sense. All option overrides"); /* We need a default cmd_groups_list even for the -a * case in order to force a pass through the loop for
end describe 'connection to Atlas' do it 'runs ismaster successfully' do result = client.database.command(:ismaster => 1) expect(result.documents.first['ismaster']).to be true end it 'runs findOne successfully' do
boost::optional<iroha::protocol::TxStatus> last_tx_status; auto rounds_counter{0}; std::mutex stream_write_mutex; command_service_ ->getStatusStream(hash) // convert to transport objects
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4435-SEA 1645547911 685224674</p> <hr> <p>Varnish cache server</p> </body>
.. Note:: This option does not perform a true mass weighting but weighting by the number of atoms in each residue; the name of the parameter exists for historical reasons and will be removed in 0.17.0. Until then, setting `MassWeight` to anything but ``None`` will override `weights`. .. SeeAlso:: :class:`GNMAnalysis`
end context "when given a Proc" do it "behaves as Enumerable" do lambda do criteria.find(-> {"default"}) # Proc is not serializable to a BSON type
self.universes = [self.universe1, self.universe2, self.universe_rev] self.psa = MDAnalysis.analysis.psa.PSAnalysis(self.universes,           \ path_select='name CA',           \ targetdir=self.outdir) self.psa.generate_paths(align=True) self.psa.paths[-1] = self.psa.paths[-1][::-1,:,:] # reverse third path self._run()
{ public static class ResolutionKey { public const string ValueSet = "values"; public const string Value = "value"; public const string Type = "type"; public const string Unit = "unit"; } }
"Focus follows new flows." ) loader.add_option( "view_filter_active", bool, False, "Toggle whether the view filter is enabled." )
def _email_error(self, task, formatted_traceback, subject, headline): formatted_subject = subject.format(task=task, host=self.host) command = subprocess.list2cmdline(sys.argv) message = notifications.format_task_error(headline, task, command, formatted_traceback) notifications.send_error_email(formatted_subject, message, task.owner_email)
log.trace("\'none - no action\' or invalid value provided: {}", action); } final long actionComplete = System.nanoTime(); log.info("gc post action {} completed in {} seconds", action, String.format("%.2f", (TimeUnit.NANOSECONDS.toMillis(actionComplete - actionStart) / 1000.0))); } catch (Exception e) { log.warn("{}", e.getMessage(), e);
SYNC_HTTP_CLIENT.close(); ASYNC_HTTP_CLIENT.close(); } catch (Exception ex) { logger.error("An exception occurred when the HTTP client was closed : {}", ExceptionUtil.getStackTrace(ex)); } logger.warn("[HttpClientManager] Destruction of the end"); }
* @see https://usehooks.com/useScript/. * * @param {String} src - the script src. * * @returns {string} - returns one of the possible status: "idle", "loading", "ready" or "error" */ export default src => { // Keep track of script status ("idle", "loading", "ready", "error")
Return only the value for nodes u distance : edge attribute key, optional (default=None) Use the specified edge attribute as the edge distance in shortest path calculations.  If `None`, then each edge will have distance equal to 1.  Returns -------
"math/rand" "time" "github.com/ethersphere/bee/pkg/swarm" )
return err == nil && n == total } // DoneSplit sets total count to SPLIT count and sets the associated swarm hash for this tag // is meant to be called when splitter finishes for input streams of unknown size func (t *Tag) DoneSplit(address swarm.Address) int64 { total := atomic.LoadInt64(&t.Split) atomic.StoreInt64(&t.Total, total) t.Address = address return total }  // Status returns the value of state and the total count func (t *Tag) Status(state State) (int64, int64, error) { count, seen, total := t.Get(state), atomic.LoadInt64(&t.Seen), atomic.LoadInt64(&t.Total)
diff = 0; } /* Lock buffers where size > 2MB */ if (size > FLB_INPUT_CHUNK_FS_MAX_SIZE) { cio_chunk_lock(ic->chunk);
package org.apache.iceberg.mr.hive.serde.objectinspector; /** * Interface for converting the Hive primitive objects for the objects which could be added to an Iceberg Record. * If the IcebergObjectInspector does not implement this then the default Hive primitive objects will be used without * conversion. */
values[i] = SortOrder.valueOf(valueStrs[i]); } int idxCurrentSort = 0; for  (int i = 0; i < values.length; i++) { if (currentSortOrder == values[i]) { idxCurrentSort = i; break; }
return firstEntry; } String auditLogBooleanDefault(Boolean value, Boolean checkValue) { if (checkValue == Boolean.TRUE) { return value == Boolean.TRUE ? "true" : "false"; } else { return value == Boolean.FALSE ? "false" : "true";
secretLister        corelisters.SecretLister scheduledWorkQueue scheduler.ScheduledWorkQueue metrics            *metrics.Metrics // used for testing
/// </summary> /// <param name="exception">The exception to check.</param> /// <param name="loggerContext">Target context of the exception.</param>  /// <returns><c>true</c>if the <paramref name="exception"/> must be rethrown, <c>false</c> otherwise.</returns> public static bool MustBeRethrown(this Exception exception, IInternalLoggerContext loggerContext = null) { if (exception.MustBeRethrownImmediately()) {
console.error(err); // Make sure any errors from the mutation are displayed. if (onWishlistUpdateError) { onWishlistUpdateError(true); } } }, [
Processor // CheckpointSet returns the current data set.  This may be // called before and after collection.  The // implementation is required to return the same value // throughout its lifetime, since CheckpointSet exposes a // sync.Locker interface.  The caller is responsible for
return worker_ip_to_port def _find_random_open_port() -> int: """Find a random open port on the machine. Returns
->children() ->arrayNode('allowed_url_protocols') ->prototype('scalar')->end() ->defaultValue(['http', 'https', 'ftp', 'mailto', 'tel', 'data', 'skype', 'whatsapp']) ->validate() ->always( static function (array $protocols): array {
} /** * Sets properties to be used in variable resolution. * * If null properties supplied, System.properties will be used. * * @param properties the properties to be used to resolve ${variable} *                   occurrences in the XML file * @return the XmlJetConfigBuilder */ public XmlJetConfigBuilder setProperties(@Nullable Properties properties) {
// but should be considered a high priority. switch (action.type) { case "UPDATE_FILE_SOURCES": { const fileSources = produceFileSources(action.fileSources); return Object.assign({}, state, { fileSources }); }
#define MAX_NEW_WORKERS 10 // Result codes for signaling the completion of operations in WQ typedef enum { WQ_SUCCESS = 0,
if self.focus is None: self.set_focus(0) elif self.follow_focus: self.update_focus() return f def set_limit(self, limit):
nullpo_retv(sd); fd = sd->fd; hd = sd->hd;  if ( !hd ) return; WFIFOHEAD(fd, 4+37*MAX_HOMUNSKILL);  WFIFOW(fd,0)=0x235; for ( i = 0; i < MAX_HOMUNSKILL; i++){ if( (id = hd->homunculus.hskill[i].id) != 0 ){
self.get_client().startUntrustedTransaction(True, inputIndex, chipInputs, redeemScripts[inputIndex]) if changePath: outputData = self.get_client().finalizeInput(to_bytes(output), format_satoshis_plain(outputAmount), format_satoshis_plain(tx.get_fee()), changePath, bfh(rawTx)) else: outputData = self.get_client().finalizeInputFull(txOutput)
: transferQueue;    // transfer queue of class MegaApiImpl // if we are processing a custom queue, we need to process in one shot bool canSplit = !queue; while(MegaTransferPrivate *transfer = auxQueue.pop()) {
// Datastore is a type implementing the CarveStore interface // relying on AWS S3 storage type Datastore struct { metadatadb kolide.CarveStore s3client   *s3.S3 bucket     string prefix     string } // New initializes an S3 Datastore func New(config config.S3Config, metadatadb kolide.CarveStore) (*Datastore, error) { conf := &aws.Config{} // Use default auth provire if no static credentials were provided
loading.hide(); this.swiperInstance = new Swiper(elem.querySelector('.slideshowSwiperContainer'), { direction: 'horizontal', // loop is disabled due to the lack of Swiper support in virtual slides loop: false, zoom: { minRatio: 1,
t.index ["organization_id"], name: "index_diaper_drives_on_organization_id" end create_table "distributions", force: :cascade do |t| t.text "comment" t.datetime "created_at", null: false t.datetime "updated_at", null: false t.bigint "storage_location_id" t.bigint "partner_id" t.integer "organization_id" t.datetime "issued_at" t.string "agency_rep"
@Value("${" + CREDENTIALS_REFRESH_INTERVAL + "}") Integer credentialsRefreshInterval, @Qualifier(QUALIFIER) BasicCredentials basicCredentials) throws IOException { ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor( new NamedThreadFactory("zipkin-load-es-credentials")); DynamicCredentialsFileLoader credentialsFileLoader = new DynamicCredentialsFileLoader(basicCredentials, credentialsFile); credentialsFileLoader.updateCredentialsFromProperties();
} } if nodeAttestor == nil { return nil, fmt.Errorf("could not find node attestor type %s", attestedData.Type) }  attestRequest := &nodeattestor.AttestRequest{ AttestedData:   attestedData, AttestedBefore: attestedBefore,
for i, (X, y) in enumerate(eval_set): # when individual eval set is equivalent to training data, skip recomputing parts. if X is data and y is label for parts_idx in range(n_parts): eval_sets[parts_idx].append('__train__')
conf.setStrings(enumToConfKey(implementingClass, ScanOpts.RANGES), rangeStrings.toArray(new String[0])); } catch (IOException ex) { throw new IllegalArgumentException("Unable to encode ranges to Base64", ex); } }
package org.apache.rocketmq.common.protocol; public class RequestCode { public static final int SEND_MESSAGE = 10;
created_at timestamp DEFAULT CURRENT_TIMESTAMP, updated_at timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (id), FOREIGN KEY fk_policies_query_id (query_id) REFERENCES queries(id) ON DELETE RESTRICT ); ` policyMembershipHistoryTable := ` CREATE TABLE IF NOT EXISTS policy_membership_history ( id int(10) unsigned NOT NULL AUTO_INCREMENT, policy_id INT UNSIGNED, host_id int(10) UNSIGNED NOT NULL,
return p.Addr.String() } // parseFullMethod returns a span name following the OpenTelemetry semantic // conventions as well as all applicable span kv.KeyValue attributes based // on a gRPC's FullMethod. func parseFullMethod(fullMethod string) (string, []kv.KeyValue) {
super().__init__() self.id = id self.start, self.finish = None, None self.base_timeout = 180 self.name = name self.group = group self.agents = agents
* @kind function * * @param {Object} props An object containing the location, parameter, and setter function. * @param {String} props.location The URL location to search in * @param {String} props.parameter The parameter to search for * @param {Function} props.setValue A setter function that is passed the parameter value found in the URL */
UseIntermediate: true, }) x509CA, err := client.MintX509CA(context.Background(), csr, 0, func(_, _ []*x509.Certificate) error { return nil }) require.NoError(t, err)
}; export const networkPrettyNames = { staging: 'Staging', testnet: 'Testnet', development: 'Development', itn_balance_check: 'Incentivized Testnet - Balance check', };
// are NOT guaranteed to have been validated by HotStuff. Pending() ([]flow.Identifier, error) // ValidPending returns the IDs of all descendants of the Head block. // Pending means the returned blocks are not finalized yet. // Valid means the returned bocks have at least one child. // The IDs are ordered such that parents are included before their children. Includes // only blocks that have child blocks. // These are NOT guaranteed to have been validated by HotStuff. ValidPending() ([]flow.Identifier, error)
} assert.Equal(t, "", runAppForTest(t, []string{"logout"})) assert.True(t, ds.DestroySessionFuncInvoked) }
assert_equal(sorted(G.neighbors('C')),['D']) assert_equal(sorted(G['C']),['D']) assert_equal(sorted(G.neighbors('A')),['B', 'C']) assert_raises(nx.NetworkXError,G.neighbors,'j') assert_raises(nx.NetworkXError,G.neighbors,'j')
if (text.Length < 1) { charsConsumed = 0; value = default; return false; }
tz.setZoneControlContaminantController(controllerClone); } // Note: rendering color is already handled via the fact that it's a children // DLM: do not clone zone mixing objects
from mitmproxy import options from .. import tservers import pytest from unittest import mock as Mock class TestFlowlist(tservers.MasterTest):
taskId.getId() ); purgeFromZk(taskId); } else { LOG.error( "Task ID {} too long to persist to DB, skipping", taskId.getId() ); } } else { if (moveToHistoryOrCheckForPurge(taskId, forRequest)) { LOG.debug("Transferred task {}", taskId);
// ResolvedCatalogTable class into the iceberg-flink-runtime jar for compatibility purpose. private static final DynMethods.UnboundMethod GET_CATALOG_TABLE = DynMethods.builder("getCatalogTable") .impl(Context.class, "getCatalogTable") .orNoop() .build(); private final FlinkCatalog catalog;
_this.componentWillUnmount = function() { render(null, _this._temp); _this._temp = null; _this._container = null; }; // When we change container we should clear our old container and
""" # TODO: Examine other versions of the file format and if this parser should # support them. return line == '#Version: 1.5\n' manager.ParsersManager.RegisterParser(WinFirewallParser)
{ ResultRelInfo *resultRelInfo; ResultRelInfo *saved_resultRelInfo = NULL; EState *estate = ccstate->estate; /* for ExecConstraints() */ ExprContext *econtext; TupleTableSlot *singleslot;
var maxH264Level = 42; var h264Profiles = 'high|main|baseline|constrained baseline'; if (canPlayH264Level51(videoTestElement)) { maxH264Level = 51; }
def _get_redis_ip(project): """Get the redis IP address.""" region = appengine.region(project) _, ip = common.execute('gcloud redis instances describe redis-instance ' '--project={project} --region={region} ' '--format="value(host)"'.format( project=project, region=region)) return ip.strip()
case "Long": return currentNode.asLong(); case "Short": return (short) currentNode.asInt(); case "Integer": return currentNode.asInt(); case "String":
.add<std::string>("directory,d", "directory for persistent state") .add<std::string>("endpoint,e", "node endpoint") .add<std::string>("node-id,i", "the unique ID of this node") .add<bool>("node,N", "spawn a node instead of connecting to one") .add<bool>("disable-accounting", "don't run the accountant") .add<bool>("no-default-schema", "don't load the default schema " "definitions"));
if (null !== $resource) { if ($resource === 'listTag') { // special case -- if $resource is set to the string "listTag", // we want to retrieve tags assigned to a user list // and filter out user resource tags // (resource_id is NULL for list tags). $select->where->isNull('resource_id'); } else { if (!is_array($resource)) {
""" ) general.add_argument( "--can-handle-url-no-redirect", metavar="URL", help=""" Same as --can-handle-url but without following redirects when looking up the URL. """ ) general.add_argument(
type = t; count = 0; } if (count === 255) { lengths.push(count); types.push(type); count = 0; } count++; } lengths.push(count); types.push(type);
* A custom compare function for the VariableModel objects. * @param {Blockly.VariableModel} var1 First variable to compare. * @param {Blockly.VariableModel} var2 Second variable to compare. * @return {number} -1 if name of var1 is less than name of var2, 0 if equal, * and 1 if greater. * @package */ Blockly.VariableModel.compareByName = function(var1, var2) {
new_index = pandas.RangeIndex(len(self.index)) if not axis else self.index new_columns = self.columns if not axis else pandas.RangeIndex(len(self.columns)) new_dtypes = self._dtype_cache if new_dtypes: new_dtypes.index = new_columns return self.__constructor__( new_data, new_index, new_columns, new_dtypes ).dropna(axis=axis, how="all")
t.Parallel() a := require.New(t) defer os.Unsetenv("ALGORAND_TEST_UNUPGRADEDPROTOCOL_DELETE_UPGRADE") os.Setenv("ALGORAND_TEST_UNUPGRADEDPROTOCOL_DELETE_UPGRADE", "0") // Overview of this test:
tag_string = container['image_tag'].format(container['image'], container['image_version']) nocache = container.get('disable_cache', False) errors = False
// Precomputed sums are a special case. if mkind.PrecomputedSum() { // This functionality was removed from // the basic processor in PR #2350. return aggregation.ErrNoCumulativeToDelta } agg = value.current.Aggregation()
// List returns the list of TreeNodes cached in the node (creating it if necessary) func (n *Node) List() []*TreeNode { n.mtx.Lock() if n.treeNodeList == nil { n.treeNodeList = n.Tree().List() } n.mtx.Unlock() return n.treeNodeList }
Tensor from which to copy `arr` : mxnet.nd.NDArray Destination of the copy `cuda_stream` : cudaStream_t handle or any value that can be cast to cudaStream_t. CUDA stream to be used for the copy (if not provided, an internal user stream will be selected) In most cases, using the default internal user stream or stream 0
processFetchResponses(remoteMessagesToDownload, qresyncParamResponse, flagSyncHelper, syncHelper); boolean flaglessMessagesPresent = false; int newLocalMessageCount = remoteMessagesToDownload.size() + localFolder.getMessageCount(); if (imapFolder.getMessageCount() >= localFolder.getVisibleLimit() && imapFolder.getMessageCount() >= newLocalMessageCount) { flaglessMessagesPresent = findOldRemoteMessagesToDownload(remoteMessagesToDownload, syncHelper); } int messageDownloadCount = remoteMessagesToDownload.size();
* * @return string */ protected function getSsoLoginAsCustomerUserUrl(CustomerUser $customerUser) { $customerDomainRouter = $this->domainRouterFactory->getRouter($customerUser->getDomainId()); $loginAsUserUrl = $customerDomainRouter->generate(
const TypeIdentifier *type_id_complete = objectFactory->get_type_identifier(dpst->getName(), true); const TypeObject *type_obj_complete = objectFactory->get_type_object(dpst->getName(), true); objectFactory->add_type_object(dpst->getName(), type_id_complete, type_obj_complete); // Add complete return true; } } }
def generate_scoped_enum_definition(self, entry, code): code.mark_pos(entry.pos) type = entry.type code.putln( "enum class %s : %s {" % (type.cname, type.underlying_type.empty_declaration_code()) ) enum_values = entry.enum_values if not enum_values: error(entry.pos, "Empty enum definition not allowed outside a 'cdef extern from' block")
if (!empty($options)) { throw new \Exception('Unexpected options sent to factory.'); } $translator = $container->get(Translator::class); // Add a special locale used just for this plugin: $translator->addTranslationFile('ExtendedIni', null, 'default', 'native'); return new $requestedName($translator); } }
return $response; } $status = 200;  if (null !== $module = ModuleQuery::create()->findPk($module_id)) { $title = $module->setLocale($this->getSession()->getLang()->getLocale())->getTitle();
private $event_handler = <<<'JS' document.addEventListener( 'DOMContentLoaded', function () { document.getElementById( 'elementID' ) .addEventListener( 'click', function( event ) { event.preventDefault(); }); }); JS; public function get_inline_script_tag_type_set() { add_theme_support( 'html5', array( 'script' ) ); $this->assertSame(
define( 'WP_ROCKET_INC_PATH',              realpath( WP_ROCKET_PATH . 'inc/' ) . '/' ); if ( ! defined( 'WP_ROCKET_VIEWS' ) ) { define( 'WP_ROCKET_VIEWS', WP_ROCKET_PATH . 'views/' ); } require_once WP_ROCKET_INC_PATH . 'constants.php';
public const string MID_MOD = "mid"; public const string LATE_MOD = "end"; public const string MORE_THAN_MOD = "more"; public const string LESS_THAN_MOD = "less"; // Invalid year public const int InvalidYear = int.MinValue;
LBANN_ASSERT_MSG_HAS_FIELD(proto_layer, scatter); using BuilderType = Builder<TensorDataType, Layout, Device>; auto dims = parse_list<int>(proto_layer.scatter().dims()); const auto& params = proto_layer.gather(); int axis = -1; if (params.has_axis()){ axis = params.axis().value(); } return BuilderType::Build(dims, axis); }
env:     os.Environ(), stdin:   strings.NewReader(""), outlog:  log.New(ioutil.Discard, "", 0), errlog:  log.New(ioutil.Discard, "", 0), } }
project.slack_channel_codes end def send_notifications channels return post_premium_mob_youtube_notification if @event_instance.for == 'Premium Mob Members' if @event_instance.category == 'Scrum'
return getTaskJobExecutionsForList(jobExecutions); } @Override public List<TaskJobExecution> listJobExecutionsWithStepCount(Pageable pageable) { return listJobExecutionsWithStepCount(null, pageable); }  @Override public List<TaskJobExecution> listJobExecutionsWithStepCount(String queryString, Pageable pageable) { Assert.notNull(pageable, "pageable must not be null");
}); _.each(_.values(network), function(value) { if (!_.isUndefined(value) && !_.isObject(value)) { networkMaps[value] = network; } });
try: connection = socket.socket(self.address.family, socket.SOCK_STREAM) if self.spoof_source_address: try: connection.setsockopt(socket.SOL_IP, 19, 1) except socket.error as e: raise exceptions.ProtocolException( "Failed to spoof the source address: " + e.strerror) if self.source_address: connection.bind(self.source_address()) connection.connect(self.address())
end tally(result, "nUpserted", n_upserted) if n_upserted > 0 tally(result, "nMatched", n - n_upserted) nil_tally(result, "nModified", response["nModified"]) elsif op_type == :delete tally(result, "nRemoved", n) end
Console.WriteLine(message); } public void LogIterationHeader(string message) { Console.WriteLine($"=============== {message} ================ "); } public void LogStepHeader(string message) { Console.WriteLine($"***{message}***"); }
// create the execution result for the target block result := flow.ExecutionResult{ PreviousResultID: resultID,               // need genesis result BlockID:          targetID,               // refer the target block Chunks:           flow.ChunkList{&chunk}, // include only chunk }
// Define dynamic routes -- controller => [route name => action] $dynamicRoutes = [ 'Feedback' => ['feedback-form' => 'Form/[:id]'], 'MyResearch' => ['userList' => 'MyList/[:id]', 'editList' => 'EditList/[:id]'], 'LibraryCards' => ['editLibraryCard' => 'editCard/[:id]'], ];
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4432-SEA 1645521621 2104936845</p> <hr> <p>Varnish cache server</p> </body>
// a node in the host topology. That host node is the origin host, where // the node was originally detected. HostNodeID = "host_node_id" // ControlProbeID is the random ID of the probe which controls the specific node. ControlProbeID = "control_probe_id" )
this.previousFileNames = new Queue<string>(this.maxLogFilenames); this.fileAppenderCache = FileAppenderCache.Empty; this.CleanupFileName = true; } #if NET4_5 static FileTarget() { FileCompressor = new ZipArchiveFileCompressor(); } #endif
public bool RunCore21 { get; set; } [Option("cli", Required = false, HelpText = "Optional path to dotnet cli which should be used for running benchmarks.")] public FileInfo CliPath { get; set; } [Option("coreRun", Required = false, HelpText = "Optional path to CoreRun which should be used for running benchmarks.")] public FileInfo CoreRunPath { get; set; } [Option("coreClrVersion", Required = false, HelpText = "Optional version of Microsoft.NETCore.Runtime which should be used. Example: \"2.1.0-preview2-26305-0\"")] public string CoreClrVersion { get; set; }
protected final boolean distinct; /** * FILTER condition for aggregate */ protected Expression filterCondition;
/// Gets a value indicating whether this instance is closing boundary. /// </summary> /// <value> /// <see langword="true"/> if this instance is closing boundary; otherwise, <see langword="false"/>. /// </value> public bool IsClosingBoundary {
for i, st := range stxns { txgroup[i].SignedTxn = st } if timeStamp <= 0 { timeStamp = time.Now().Unix() } proto := getProto(protoVersion) for i, txn := range txgroup { if txn.Lsig.Blank() { continue
end def replace_index(keys, position) # replace index with $ only if that key is in the selector and it is only # nested a single level deep. matches = position.scan(/\.\d+\./) if matches.size == 1
if err := c.Snapshot(ctx, c.config); err != nil { logrus.Error(err) os.Exit(1) } os.Exit(0) } // Set up the dynamiclistener and http request handlers
Returns: iter: An iterator of assets that match the text search. """ objects = backend.query.text_search(self.connection, search, limit=limit, table=table)
offset = 0; colCounter = 0; char *lastIndex = "#0"; while((col = parseLine(lineBuffer, delim, offset)) != NULL) { cur = getKeyByOrderNr(header, colCounter);
class ServerConnection(tcp.TCPClient, stateobject.StateObject): def __init__(self, address, source_address=None): tcp.TCPClient.__init__(self, address, source_address) self.via = None
#include "vast/detail/assert.hpp" #include "vast/detail/string.hpp" #include "vast/expression.hpp" #include "vast/type.hpp" namespace vast {
else: self.sources = source if sim_params: self.sim_params = sim_params  if not self.sim_params: self.sim_params = create_simulation_parameters( start=start,
// TODO(peterebden): Remove this nonsense once API v2.1 is released. files, dirs := outputs(target) if len(target.Outputs()) == 1 { // $OUT is relative when running remotely; make it absolute commandPrefix += `export OUT="$TMP_DIR/$OUT" && ` } cmd, err := core.ReplaceSequences(c.state, target, c.getCommand(target)) return &pb.Command{
def dotnet_osx_url if config[:dotnet].include? "-preview" && !is_dotnet_after_2_0_prev_2? return "https://dotnetcli.azureedge.net/dotnet/preview/Installers/#{config[:dotnet]}/dotnet-#{dotnet_package_prefix}-osx-x64.#{config[:dotnet]}.pkg" else return "https://dotnetcli.azureedge.net/dotnet/Sdk/#{config[:dotnet]}/dotnet-#{is_dotnet_after_2_0_prev_2? ? "sdk" : "dev"}-osx-x64.#{config[:dotnet]}.pkg" end end def dotnet_package_prefix return is_dotnet_after_2_0_prev_2? ? "sdk" : "dev" end  def is_mono_version_valid? return false unless config[:os] == 'linux' || config[:os] == 'osx' return true if is_mono_version_keyword?
// roundStartedEvaluating is the round which we were attempted to evaluate last. It's a good measure for // which round we started evaluating, but not a measure to whether the evaluation is complete. roundStartedEvaluating basics.Round // assemblyCompletedOrAbandoned is *not* protected via the pool.assemblyMu lock and should be accessed only from the OnNewBlock goroutine. // it's equivilent to the "ok" variable, and used for avoiding taking the lock. assemblyCompletedOrAbandoned bool } const (
public class CompactorInfo { // Variable names become JSON keys public final long lastContact; public final String server; public final String queueName; public CompactorInfo(long fetchedTimeMillis, String queue, String hostAndPort) { lastContact = System.currentTimeMillis() - fetchedTimeMillis;
url := url.URL{Path: "./" + name} // prepend with "./" to fix paths with ':' in the name fileinfos = append(fileinfos, FileInfo{ IsDir:     f.IsDir() || isSymlinkTargetDir(f), IsSymlink: isSymlink(f), Name:      f.Name(), Size:      f.Size(),
return _validUpgrade def test_node_upgrade_scheduled_on_proper_date(poolNodesStarted, poolUpgradeScheduled): # Verify that the upgrade is scheduled in approximately 5 days for each node now = datetime.utcnow().replace(tzinfo=dateutil.tz.tzutc()) for node in poolNodesStarted.nodes.values():
that they wish to delete their listens. """ if request.method == 'POST': if request.form.get('token') and (request.form.get('token') == current_user.auth_token): try: delete_listens_history(current_user.musicbrainz_id) except Exception as e:
// chainsToFullRules contains the full rules, mapped from chain name to slices of rules in that chain. chainsToFullRules map[string][]string // hashCommentPrefix holds the prefix that we prepend to our rule-tracking hashes. hashCommentPrefix string // hashCommentRegexp matches the rule-tracking comment, capturing the rule hash.
violation_map[resource['resource']], global_configs, notifier_configs, None)) # else block below is added for backward compatibility else: notifiers.append( email_violations.EmailViolations( resource['resource'], inventory_index_id, violation_map[resource['resource']], global_configs, notifier_configs, notifier['configuration']))  if notifier['name'] != 'email_violations': chosen_pipeline = find_notifiers(notifier['name']) notifiers.append(chosen_pipeline(
} bidOrder, err := h.market.GetOrderByID(h.ctx, &pb.ID{Id: r.GetBidId()}) if err != nil { return nil, status.Errorf(codes.NotFound, "bid not found") }
return Uri.parse(BASE_URI.toString() + "/" + id); } @Inject DBOpenHelper dbOpenHelper; @Override public boolean onCreate() {
public static void validate(Iterable<Entry<String,String>> entries) { String instanceZkTimeoutValue = null; boolean usingVolumes = false; String cipherSuite = NULL_CIPHER; String keyAlgorithm = NULL_CIPHER; String secretKeyEncryptionStrategy = NULL_SECRET_KEY_ENCRYPTION_STRATEGY; String cryptoModule = NULL_CRYPTO_MODULE; for (Entry<String,String> entry : entries) { String key = entry.getKey(); String value = entry.getValue();
# data that needs to be added to them. # We postpone processing of this in order to do type inference/generalization. # See self.attr_type for (xml_obj, data) in self.attributes.items(): for (k, v, scope, default) in data: xml_obj.append(self.add_data(make_str(k), self.attr_type(k, scope, v), make_str(v), scope, default))
} } func (cb *roundCowState) addTx(txn transactions.Transaction, txid transactions.Txid) { cb.mods.Txids[txid] = txn.LastValid cb.mods.txleases[txlease{sender: txn.Sender, lease: txn.Lease}] = txn.LastValid }
* bit in there, but that isn't always correct either (in the case * where a user has no location, for example). * * In all likelihood, we need to denorm an "effective_location" column * into Assets to make this slightly less miserable. * * @author A. Gianotto <snipe@snipe.net>
termprogress "github.com/aws/copilot-cli/internal/pkg/term/progress" "github.com/aws/copilot-cli/internal/pkg/term/prompt" "github.com/aws/copilot-cli/internal/pkg/workspace" "github.com/lnquy/cron" "github.com/spf13/afero" "github.com/spf13/cobra" )
// initialize ordered gradients and hessians ordered_gradients_.resize(num_data_); ordered_hessians_.resize(num_data_); // if has ordered bin, need to allocate a buffer to fast split if (has_ordered_bin_) { is_data_in_leaf_.resize(num_data_); }
Short: `Commands for tasks. Tasks are one-off Amazon ECS tasks.`, Long: `Commands for tasks Tasks are one-off container images that run once in a given environment, then terminate.`, } cmd.AddCommand(BuildTaskRunCmd())
} const size_t expected{ column_labels.size() * 3 + 2 }; // Will first store data in a SimTK::Matrix to avoid expensive calls // to the table's appendRow() which reallocates and copies the whole table. int rowNumber = 0; int last_size = 1024; SimTK::Matrix_<SimTK::Vec3> markerData{last_size, static_cast<int>(num_markers_expected)};
#ifdef HELLFIRE char *jogging_toggle_names[] = { "Jog", "Walk", "Fast Walk" }; #endif #ifndef HELLFIRE char *color_cycling_toggle_names[] = { "Color Cycling Off", "Color Cycling On" }; #endif void gamemenu_previous() {
self.rate_average = rate_average def message(self, msg): dnf.util._terminal_messenger('write_flush', msg, self.fo) def start(self, total_files, total_size): self.total_files = total_files
return nil, db.NoRowsAffected, fmt.Errorf("update: static host: %w", db.ErrEmptyFieldMask) } var rowsUpdated int var returnedHost *Host _, err := r.writer.DoTx(ctx, db.StdRetryCnt, db.ExpBackoff{},
import torch as th import backend as F from dgl.nn import NodeEmbedding from dgl.optim import SparseAdam, SparseAdagrad import unittest, os
} state struct { sum   metric.Number min   metric.Number max   metric.Number count int64 } )
| 'USER-TIME-FORMAT' | 'WALLET-MIGRATION-STATUS' | 'WALLETS' | 'WINDOW-BOUNDS'; export type StoreMessage = { type: StorageType,
new_directives_out.update(new_directives) return new_directives_out # Declare compiler directives _directive_defaults = { 'binding': True,  # was False before 3.0
def getAscendent(self, node_type): """Return the ancenstor node of the given type, or None. Node type can be a two letter code or longer description, e.g. 'fa' or 'family'. """ if node_type in _nodetype_to_code: node_type = _nodetype_to_code[node_type]
a.CAFile = "xxx" } // ThanosProxy describes configuration of the Thanos proxy component type ThanosProxy struct { Enabled         bool   `yaml:"enabled,omitempty"` RetentionPeriod string `yaml:"retention_period,omitempty"` ScrapeInterval  string `yaml:"scrape_interval,omitempty"`
def populate_indices(self): """Populate keywords for fast test case list searching.""" self.keywords = list( search_tokenizer.tokenize(self.name) | search_tokenizer.tokenize(self.project)) def _pre_put_hook(self): """Pre-put hook."""
* @throws AssetVariantGeneratorException * @throws IllegalObjectTypeException */ public function renderVariantsCommand($limit = null, bool $quiet = false): void { $resultMessage = null; $generatedVariants = 0;
@command('wp') async def payto(self, destination, amount, fee=None, feerate=None, from_addr=None, from_coins=None, change_addr=None, nocheck=False, unsigned=False, rbf=None, password=None, locktime=None, addtransaction=False, wallet: Abstract_Wallet = None): """Create a transaction. """ self.nocheck = nocheck tx_fee = satoshis(fee)
def test_changed(self): config = [ [[1,2,3,4,4,5,5,5,6,7], [0,1,1,1,0,1,0,0,1,1]], [[None,None,None,None,0,0,0,None,None,1], [0,0,0,0,0,0,0,0,0,1]] ] for i, c in enumerate(config): name = "collectd.test-db{0}.load.value".format(i + 1)
EtcdS3BucketName         string EtcdS3Region             string EtcdS3Folder             string EtcdS3Timeout            time.Duration EtcdS3Insecure           bool }
/// <para>This function is called when the a client player calls CmdChangeReadyState.</para> /// </summary> /// <param name="newReadyState">New Ready State</param> public virtual void ReadyStateChanged(bool oldReadyState, bool newReadyState) { } #endregion
.iterator(); while (iterator.hasNext()) { String topic = iterator.next().getKey(); if (topicList.getTopicList().contains(topic) || (!specialTopic && (topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX) || topic.startsWith(MixAll.DLQ_GROUP_TOPIC_PREFIX)))) { iterator.remove(); } }
@monitoring = server.monitoring @options = options.freeze @server = server @ssl_options = options.select { |k, v| k.to_s.start_with?(SSL) }.freeze @socket = nil @last_checkin = nil @auth_mechanism = nil
startActivity(new Intent(getActivity(), PreferenceActivity.class))); getContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE) .registerOnSharedPreferenceChangeListener(this); return root; }
# TODO: This should probably be in the Request resource specs, not Distribution context "When creating a distrubition from a request" do it "sets the distribution id and fulfilled status on the request" do items = @storage_location.items.pluck(:id).sample(2) request_items = [{ "item_id" => items[0], "quantity" => 10 }, { "item_id" => items[1], "quantity" => 10 }] @request = create :request, organization: @organization, request_items: request_items
def __init__(self, data, models, **kwargs): super().__init__(data, models, **kwargs) def _get_crit(self, data): return F.cross_entropy def save_encoder(self, name): save_model(self.model[0], self.get_model_path(name)) def load_encoder(self, name): load_model(self.model[0], self.get_model_path(name))
* @param string $string * @return string */ if ( ! function_exists('no_parse') ) { function no_parse($string = '') { return str_replace(array('{{','}}'), array('&#123;&#123;','&#125;&#125;'), $string); } }
query := "" for _, v := range tos { t = replacer.Replace(v) tparts := strings.SplitN(t, "?", 2) t = path.Clean(tparts[0]) if len(tparts) > 1 {
queueConfig = append(queueConfig, yaml.MapItem{Key: "capacity", Value: spec.QueueConfig.Capacity}) } if version.GTE(semver.MustParse("2.6.0")) { if spec.QueueConfig.MinShards != int(0) { queueConfig = append(queueConfig, yaml.MapItem{Key: "min_shards", Value: spec.QueueConfig.MinShards}) } } if spec.QueueConfig.MaxShards != int(0) {
as a weight.  If None, then each edge has weight 1. The degree is the sum of the edge weights adjacent to the node. n_communities: int Desired number of communities: the community merging process is terminated once this number of communities is reached, or until modularity can not be further increased. Must be between 1 and the total number of nodes in `G`. Default is ``1``, meaning the community merging process continues until all nodes are in the same community or until the best community structure is found. Returns -------
*/ public function execute(string $command) : array { if (!\function_exists('exec')) { throw new \RuntimeException(sprintf('exec does not exist, failed to execute command: %s', $command)); }; exec($command, $result, $returnValue);
slot_table = ( ConstructorSlot("tp_dealloc", '__dealloc__'), EmptySlot("tp_print", ifdef="PY_VERSION_HEX < 0x030800b4"), EmptySlot("tp_vectorcall_offset", ifdef="PY_VERSION_HEX >= 0x030800b4"), EmptySlot("tp_getattr"), EmptySlot("tp_setattr"),
$groups = array(); $request = $smcFunc['db_query']('', ' SELECT mg.id_group, mg.group_name, mg.min_posts, mg.description, mg.group_type, mg.online_color, mg.hidden, mg.icons, IFNULL(gm.id_member, 0) AS can_moderate, 0 AS num_members FROM {db_prefix}membergroups AS mg
else: # Explicit count with a tab that doesn't exist. return elif curtab.data.pinned: message.info("Tab is pinned!") else: curtab.openurl(cur_url)
implements ServiceCreationConfiguration<ClusteringService>, CacheManagerConfiguration<PersistentCacheManager> { private static final String CLUSTER_SCHEME = "terracotta"; private final URI clusterUri; private final boolean autoCreate;
import numpy as np from numpy.testing import assert_allclose, assert_equal import itertools import random from MDAnalysis.lib import transformations as t
for (var i = filterStartIndex; i < rawCommand.length; i++) { var token = rawCommand[i]; if (!utilsCore.stringStartsWith(token, '-')) { token = (token.length > 40) ? '***' : token.replace(/./g, '*'); } outCmd += ' ' + token; }
"Return data path to `filename`, checking locally first then in the config file." local_path = URLs.LOCAL_PATH/'data'/filename if local_path.exists() or local_path.with_suffix(ext).exists(): return local_path elif archive: return Config.data_archive_path() / filename else: return Config.data_path() / filename def download_data(url:str, fname:PathOrStr=None, data:bool=True, ext:str='.tgz') -> Path: "Download `url` to destination `fname`."
eslintConfig: { overrides: [ { files: ['**/__tests__/*.{j,t}s?(x)'], env: { jest: true }
""" data = self._data if not isinstance(data, (bytes, bytearray)): data = bytes(self) return data.decode("ASCII") def __hash__(self):
return b, nil } func (b *BeegoHTTPRequest) JSONMarshal(obj interface{}) ([]byte, error) { bf := bytes.NewBuffer([]byte{}) jsonEncoder := json.NewEncoder(bf) jsonEncoder.SetEscapeHTML(b.setting.EscapeHTML)
// built-in retry (3x) mechanism. Probably because of the large number of probes, // each one being executed in its own goroutine. For example, with 9 Pods and for // ports 80, 81, 8080, 8081, 8082, 8083, 8084 and 8085, we would end up with // potentially 9*9*8 = 648 simultaneous probes. k.validateOnePort(allPods, reachability, port, protocol) } }
def destroy(self): self._write_vagrant_file() if self.m._state.get('created'): self._vagrant.destroy() os.remove(self.m._config.config['molecule']['vagrantfile_file'])
case MegaRequest::TYPE_GET_ATTR_NODE: if (mApi[apiIndex].lastError == API_OK) { mMegaFavNodeList.reset(request->getMegaHandleList()->copy()); } break; }
} } func outputIsClosed() bool { isClosed := atomic.LoadUint64(&outputClosed) return isClosed == 1 }
else { std::string error_message; LBANN_DATA_FETCH_OMP_FOR (int s = 0; s < mb_size; s++) { int n = m_current_pos + (s * m_sample_stride); int index = m_shuffled_indices[n]; bool valid = fetch_datum(X, index, s, LBANN_OMP_THREAD_NUM); if (!valid) { LBANN_DATA_FETCH_OMP_CRITICAL error_message = "invalid datum (index " + std::to_string(index) + ")"; } }
"""Instead of reading a file, just parse a config entry.""" def locked_get(self): """Return Credentials.""" content = db_config.get_value('client_credentials') if not content: return None
class UpdateMongoArch < Base def apply command = <<-EOF if command -v lsb_release &>/dev/null; then shopt -s nullglob for f in /etc/apt/sources.list.d/mongodb-*.list; do grep -vq arch=amd64 "$f" && sudo sed -i 's/^deb /deb [arch=amd64] /' "$f"
// For tests. var _timeNow = time.Now // Unary is middleware for unary RPCs. type Unary struct { logger  *zap.Logger extract ContextExtractor
#if !defined(_WIN32) || defined(__CYGWIN__) #include <signal.h> #define HAS_SIGNALS #endif // globally accessible variables
foreach ( $data as $item_id => $item ) { // $field is 123x123, needs to be _src.123x123 $traverse_fields    = array_splice( $params->traverse, $key ); $full_field         = implode( '.', $traverse_fields ); $maybe_traverse     = false; $maybe_traverse_val = null; if ( is_array( $item ) && isset( $item[ $field ] ) ) { if ( $table['field_id'] === $field ) {
boolean zapTservers = false; @Parameter(names = "-tracers", description = "remove tracer locks") boolean zapTracers = false; @Parameter(names = "-compaction-coordinators", description = "remove compaction coordinator locks") boolean zapCoordinators = false; @Parameter(names = "-compactors", description = "remove compactor locks") boolean zapCompactors = false; @Parameter(names = "-verbose", description = "print out messages about progress")
/** * Create a new component was added event instance. * * @param \CachetHQ\Cachet\Models\Component $component * * @return void */
JobResult jobResult = new JobResult(jobId, config, coordinator, creationTime, completionTime, error != null ? error.toString() : null); JobMetrics prevMetrics = jobMetrics.put(jobId, terminalMetrics); if (prevMetrics != null) { logger.warning("Overwriting job metrics for job " + jobResult); } JobResult prev = jobResults.putIfAbsent(jobId, jobResult); if (prev != null) {
} } @Deprecated Use {@link #getSessionCredentialsExpiration()} instead. public Date getSessionCredentitalsExpiration() { credentialsLock.readLock().lock(); try {
storageFlagDescription             = "Name of the storage resource to create." storageServiceFlagDescription      = "Name of the service to associate with storage." storagePartitionKeyFlagDescription = `Partition key for the DDB table. Must be of the format '<keyName>:<dataType>'.` storageSortKeyFlagDescription = `Sort key for the DDB table. Must be of the format '<keyName>:<dataType>'.` storageAttributeFlagDescription = `Attributes for a DDB table. Must be of the format '<name>:<dataType>'. Can be specified multiple times.` ) func quoteAll(elems []string) []string {
match = re.search(pattern, new_line.decode('utf-8')) if match: self.set_tracking_url( self.build_tracking_url(match.group(1)) ) else: sleep(time_to_sleep)
class Tests_Image_Meta extends WP_UnitTestCase { public static function setUpBeforeClass() { if ( ! in_array( 'testimagemeta', stream_get_wrappers(), true ) ) { require_once DIR_TESTROOT . '/includes/class-wp-test-stream.php'; stream_wrapper_register( 'testimagemeta', 'WP_Test_Stream' ); } WP_Test_Stream::$data = array(
g := func(to []byte, newest *SkipBlock) (out bool) { defer func() { if re := recover(); re != nil { log.Errorf("Verification function panic: %v", re) out = false } }()
Returns: object: Generator yielding access tuples. """ request = explain_pb2.GetAccessByPermissionsRequest(
* @returns 0 on exit */ int main() { tests();  // running predefined tests uint64_t vertices = uint64_t(); uint64_t edges = uint64_t(); std::cout << "Enter the number of vertices : ";
* @param bool $dryRun * @return void */ private function attachPluginEventHandlers(EventDispatchingNodeCommandControllerPluginInterface $plugin, bool $dryRun): void { $plugin->on(EventDispatchingNodeCommandControllerPluginInterface::EVENT_NOTICE, function (string $text) { $this->outputLine($text);
// Print entries that failed to be created for _, r := range failed { env.ErrPrintf("Failed to create the following entry (code: %s, msg: %q):\n", codes.Code(r.Status.Code), r.Status.Message) printEntry(r.Entry, env.ErrPrintf)
data.special_flag[2] = special_flag[2]; data.special_flag[3] = special_flag[3]; data.h_resize()=1; while(data.h_resize()) { data.h_new_maxneighs() = list->maxneighs;
$subject_lookin = " AND {$tfield} LIKE '%{$keywords}%'"; if($search['postthread'] == 1) { $message_lookin = " AND {$pfield} LIKE '%{$keywords}%'"; } } }
} func compareTypesEntries(a, b *types.Entry) int { c := strings.Compare(protoutil.SPIFFEIDToStr(a.SpiffeId), protoutil.SPIFFEIDToStr(b.SpiffeId)) if c != 0 { return c } c = strings.Compare(protoutil.SPIFFEIDToStr(a.ParentId), protoutil.SPIFFEIDToStr(b.ParentId)) if c != 0 { return c }
if err != nil { return reconcile.Result{}, err } appContext.Status.DeepCopyInto(&appConfig.Status) // the name of the appConfig has to be the same as the appContext appConfig.Name = appContext.Name
// createIndirectBlockLocked creates a new indirect block and // pick a new id for the existing block, and use the existing block's ID for // the new indirect block that becomes the parent. func (fbo *folderBlockOps) createIndirectBlockLocked(md *RootMetadata, file path, uid keybase1.UID, dver DataVer) (*FileBlock, error) { newID, err := fbo.config.Crypto().MakeTemporaryBlockID()
{ #ifdef __linux__ if((fd = open(filename.getFullPath().c_str(), O_RDONLY)) < 0) msg_error() << "Impossible to open the file: " << filename.getValue(); #endif if(p_outputFilename.isSet())
item_count = item_dict.get('count') item_id = item_dict.get('item_id') if item_count and item_id: if item_id in items_stock: items_stock[item_id] = item_count return items_stock
for code, titles in _codes.items(): for title in titles: setattr(codes, title, code) if not if not title.startswith(('\\', '/')): setattr(codes, title.upper(), code)
type Tuple []byte func NewTuple(pool pool.BuffPool, values ...[]byte) Tuple { var count int var pos ByteSize for _, v := range values { if isNull(v) { continue
// Parse project id from env var, if not found we simply continue var env ProjectIDEnvConfig if err := envconfig.Process("", &env); err != nil { logging.FromContext(ctx).Error("Failed to process env var", zap.Error(err)) } return ProjectID(env.ProjectID, defaultMetadataClientCreator()) }
} private void setLicenseSummary(String license) { licenseSummaryView.setText(getString(R.string.share_license_summary, getString(Utils.licenseNameFor(license)))); } @Override
it 'it is rejected' do expect do client end.to raise_error(ArgumentError, /:srv_max_hosts > 0 cannot be used with :load_balanced=true/) end end context 'srv_max_hosts > 0 and replica_set' do let(:client) do new_local_client_nmio(['127.0.0.1:27017'], srv_max_hosts: 1, replica_set: 'rs')
// RegisterVerification stores the verification in a map and will // call it whenever a verification needs to be done. func RegisterVerification(v VerifierID, f bftcosi.VerificationFunction) error { verifiersMutex.Lock() if len(verifiers) == 0 { verifiers = map[VerifierID]bftcosi.VerificationFunction{}
export default Model.extend({ name: attr('string'), startingPrice: attr('number'), startingUsers: attr('number'), privateCredits: attr('number'), publicCredits: attr('number'), isFree: equal('startingPrice', 0), isUnlimitedUsers: equal('startingUsers', 999999) });
return log; } if (Environment.isJUnitTest()) { log = new ConsoleLog(logTag); } else if (checkApacheCommonsLoggingExists()) { log = new ApacheCommonsLogging(logTag); } else { log = new AndroidLog(logTag); } logMap.put(logTag, log); return log;
pstmt = con.prepareStatement(INSERT_MESSAGE); ArchivedMessage message;  int msgCount = getArchivedMessageCount();  int count = 0; while ((message = messageQueue.poll()) != null) { pstmt.setInt(1, ++msgCount); pstmt.setLong(2, message.getConversationID()); pstmt.setString(3, message.getFromJID().toBareJID()); pstmt.setString(4, message.getFromJID().getResource());
) var ( errUnmarshalBuildOpts 	= errors.New("cannot unmarshal build field into string or compose-style map") errUnmarshalCountOpts 	= errors.New(`cannot unmarshal "count" field to an integer or autoscaling configuration`) errUnmarshalEntryPoint 	= errors.New("cannot unmarshal entrypoint into string or slice of strings") errUnmarshalCommand 	= errors.New("cannot unmarshal command into string or slice of strings") ) const defaultFluentbitImage = "amazon/aws-for-fluent-bit:latest"
@property def pickle_protocol(self): return configuration.get_config().getint('spark', 'pickle-protocol', pickle.DEFAULT_PROTOCOL) def setup(self, conf): """
errorMessage = 'no error'; @api unwrapContentWindow() { const contentWindow = this.root.querySelector('iframe').contentWindow; try { unwrap(contentWindow);
// groupByVersion adds compound nodes to group multiple versions of the same app func groupByVersion(nodes *[]*NodeWrapper) { appBox := make(map[string][]*NodeData) for _, nw := range *nodes {
return resp, err } if req.GlobalConfig == nil { err := errors.New("global configuration is required") resp.ErrorList = []string{err.Error()}
return statusAssembler.toResource(status); } @RequestMapping("{streamName}/logs") public String getLog(@PathVariable String streamName) { return this.streamDeployer.getLog(streamName); } @RequestMapping("{streamName}/{appName}/logs") public String getLog(@PathVariable String streamName, @PathVariable String appName) { return this.streamDeployer.getLog(streamName, appName); }
require_once __DIR__.'/src/bootstrap.php'; MyBB\app('config')->set( array_dot($config) );
public override bool OnSerialize(NetworkWriter writer, bool initialState) { if(useLocalCoordinates){ SerializeIntoWriter(writer, targetComponent.transform.localPosition, targetComponent.transform.localRotation, compressRotation); } else { SerializeIntoWriter(writer, targetComponent.transform.position, targetComponent.transform.rotation, compressRotation); } return true; }
*/ package zipkin2.internal; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit;
): try: val = configuration.find(attrname) vals = [mapper(el) for el in val.text.strip().split()] except: pass else:
import menuIconClosed from '../assets/images/menu-ic.inline.svg'; import { matchRoute } from '../utils/routing'; import { ROUTES } from '../routes-config'; import { IS_TADA_ICON_AVAILABLE } from '../config/topBarConfig'; type Props = InjectedProps;
app := mux.Vars(r)["app"] var err error var limit = 20 if l := r.URL.Query().Get("limit"); l != "" { limit, err = strconv.Atoi(l) if err != nil {
def get_s3(region=None): """ Get a Boto 3 Amazon S3 resource with a specific AWS Region or with your default AWS Region. """ return boto3.resource('s3', region_name=region) if region else boto3.resource('s3')
# if det_bboxes is rescaled to the original image size, we need to # rescale it back to the testing scale to obtain RoIs. if rescale and not isinstance(scale_factor, float): scale_factor = det_bboxes.new_tensor(scale_factor) _bboxes = ( det_bboxes[:, :4] * scale_factor if rescale else det_bboxes) mask_rois = bbox2roi([_bboxes])
!(relevant_line_numbers(metadata) & preceding_declaration_lines).empty? end def relevant_line_numbers(metadata) Metadata.ascend(metadata).map { |meta| meta[:line_number] } end
/** * @file * @brief Implementation of [Kadane * Algorithm] (https://en.wikipedia.org/wiki/Kadane%27s_algorithm) *
$resource = $this->resourceManager->importResourceFromContent($im->getImageBlob(), $filenameWithoutExtension . '.png'); $im->destroy(); $thumbnail->setResource($resource); $thumbnail->setWidth($width); $thumbnail->setHeight($height);
private View.OnLongClickListener photosOnLongClickListener = new View.OnLongClickListener() { @Override public boolean onLongClick(View v) { if(checkForReveal) { enterReveal(); checkForReveal = false; } Media m = (Media) v.findViewById(R.id.photo_path).getTag(); //If first long press, turn on selection mode
* @param array $lines Array of lines to format. * @return array Array of the formatted lines. */ private function formatLines(array $lines) { $lines = array_map(array($this, 'ExpandTabs'), $lines); $lines = array_map(array($this, 'HtmlSafe'), $lines);
&b, }, } nopayloadEndpoint = design.ServiceExpr{ Name: "NoPayload",
} } func (mm *measurementManager) getMeasurementInstance(methodName string, identifier string) (Measurement, error) { mm.lock.Lock() defer mm.lock.Unlock() if _, exists := mm.measurements[methodName]; !exists {
} if (auxts) { dstime diff = static_cast<dstime>((now - auxts) * 10); dstime current = client->btugexpiration.backoffdelta(); if (current > diff) {
temp_seq = "" # split the sequence into exons exons = [seq[exonstart:exonend] for exonstart, exonend in zip(positions, positions[1:])] for exon in exons: # reverse and complement the exon seq = _rc(exon) # then concatenate it to the previous ones temp_seq += seq seq = Seq(temp_seq) result_multiseq.append(SeqRecord(seq,
self.log = logging.getLogger('') self.prev_errors = BetterDict() self.cur_errors = BetterDict() self.handle_errors = True def _get_err_diff(self): # find diff of self.prev_errors and self.cur_errors
httpFetcher HTTPFetcher concurrency ConcurrencyParams stats       cacheStats logger      chunks.DebugLogger } func NewDoltChunkStoreFromPath(ctx context.Context, nbf *types.NomsBinFormat, path, host string, csClient remotesapi.ChunkStoreServiceClient) (*DoltChunkStore, error) {
throw new NoSuchTableException("No such table: " + identifier); } Map<String, String> tableProperties = properties != null ? properties : Maps.newHashMap();  TableMetadata metadata; if (ops.current() != null) { String baseLocation = location != null ? location : ops.current().location(); metadata = ops.current().buildReplacement(schema, spec, baseLocation, tableProperties); } else { String baseLocation = location != null ? location : defaultWarehouseLocation(identifier); metadata = TableMetadata.newTableMetadata(schema, spec, baseLocation, tableProperties); }
pass def _matrix(self, options): """Creates a matrix for NEXUS object (PRIVATE).""" if not self.ntax or not self.nchar: raise NexusError('Dimensions must be specified before matrix!') self.matrix = {}
# Services def debug(self, lvl, msg): if self.debug_level >= lvl: log_runtime.debug(msg) def send(self, pkt): if self.state.state in self.interception_points:
} func (o *deleteAppOpts) deleteSvcs() error { svcs, err := o.store.ListServices(o.name) if err != nil { return fmt.Errorf("list services for application %s: %w", o.name, err) }
} } else if spiffeID == h.c.TrustDomain.String() { signLog.Debug("Signing downstream CA SVID") e, err := h.getDownstreamEntry(ctx, callerID) if err != nil { return nil, err
import { configure, addDecorator } from '@storybook/react'; import { Adapter } from '@magento/venia-drivers'; import store from '../store'; import '@magento/venia-ui/lib/index.css'; import { PeregrineContextProvider } from '@magento/peregrine'; const loadStories = () => {
public bool HasConnectorToken(string text) { return Regex.Match(text, DateTimeDefinitions.RangeConnectorRegex).Success; } } } No newline at end of file
/** * Similar to $this->prepare(), but returns a WP_DB_Partial_Query object instead of a string. * This method can be used as a query builder to join prepared query from various places. * * @param string $query     Same as $this->prepare()'s $query argument. * @param array|mixed $args Same as $this->prepare()'s $args argument. * * @return WP_DB_Partial_Query The prepared partial query. */ public function prepare_partial( $query, ...$args ) { require_once trailingslashit( __DIR__ ) . 'class-wp-db-partial-query.php';
return nil } // This should never happen but error when EFS is Enabled with a non-empty configuration. if aws.BoolValue(in.EFS.Enabled) && !in.EFS.Advanced.IsEmpty() { return errInvalidEFSConfig }
[MemberData(nameof(GetIncompatibleRoleDataForAction), ResourceAction.Read)] [MemberData(nameof(GetIncompatibleRoleDataForAction), ResourceAction.Write)] [MemberData(nameof(GetIncompatibleRoleDataForAction), ResourceAction.HardDelete)] public void GivenAClaimWithRoleWithoutPermissionForAction_WhenPermissionIsChecked_ReturnsFalse(ClaimsPrincipal claimsPrincipal, AuthorizationConfiguration authorizationConfiguration, ResourceAction action) { _securityConfiguration.Authorization = authorizationConfiguration; var authPolicyClient = new RoleBasedAuthorizationPolicy(_securityOptions);
const [, { toggleDrawer }] = useAppContext(); const [{ isSignedIn }] = useUserContext(); const [{ isEmpty }] = useCartContext();  /** * Using local state to maintain these booleans. Can be * moved to checkout context in the future if needed. */ const [shippingInformationDone, setShippingInformationDone] = useState( false );
end end def next_lesson FindLesson.new(lesson, course).next_lesson end
entity_list.RemoveFromAutoXTargets(this); if (killer->GetUltimateOwner() && killer->GetUltimateOwner()->IsClient()) { killer->GetUltimateOwner()->CastToClient()->ProcessXTargetAutoHaters(); } uint16 emoteid = this->GetEmoteID();
self.assertRaises(ValueError, list, mmcif._splitline("foo b'ar'")) def test_verbatim_block(self): """Verbatim blocks parsed correctly. Verbatim blocks delimited by ";...;" should have the final newline stripped. Whitespace may be stripped from the end of the line but not
'rocket_cache_mandatory_cookies'          => [ 'return_empty_array', PHP_INT_MAX ], 'rocket_htaccess_mod_expires'             => [ 'remove_htaccess_html_expire', 5 ], 'rocket_varnish_purge_headers'            => 'add_purge_headers', 'rocket_varnish_purge_url'                => [ 'remove_regex_from_purge_url', 10, 2 ], ]; }
eval("\$post['useravatar'] = \"".$templates->get("postbit_avatar")."\";"); } $post['button_find'] = ''; if($mybb->usergroup['cansearch'] == 1) { eval("\$post['button_find'] = \"".$templates->get("postbit_find")."\";");
return new Nutriment(additionalProperties.get(nutrimentName).toString(), get100g(nutrimentName), getServing(nutrimentName), getUnit(nutrimentName)); }catch (NullPointerException e){ // In case one of the getters was unable to get data as string Log.e("NUTRIMENTS-MODEL",e.printStackTrace()); } return null; }
.option('-c, --client-config <client-config>', $('chef client configuration file(i.e client.rb) path')) .option('-C, --client-pem <client-pem>', $('chef client pem file path i.e required in validator less bootstrap')) .option('-j, --bootstrap-options <bootstrap-json-attribute>', $('Bootstrap options in JSON format. Ex: -j \'{"chef_node_name":"test_node"}\'')) .option('--bootstrap-version <number>', $('chef-client version to be installed')) .option('--chef-service-interval <chef-service-interval>', $('It specifies the frequency (in minutes) at which the chef-service runs. Pass 0 if you don\'t want the chef-service to be installed on the target machine.')) .option('--daemon <daemon>', $('Configures the chef-client service for unattended execution. The node platform to be Windows. Options: \'none\' or \'service\'. \n \'none\' - Currently prevents the chef-client service from being configured as a service. \n \'service\' - Configures the chef-client to run automatically in the background as a service.')) .option('-u, --uninstall', $('uninstall extension'))
cacert_path: /foo/bar/ca.pem cert_path: /foo/bar/cert.pem key_path: /foo/bar/key.pem tls_verify: true env: FOO: bar restart_policy: on-failure
// (*adj)[v - 1].push_back(std::make_pair(u - 1, w)); } /** * @brief This function returns the shortest distance from the source * to the target if there is path between vertices 's' and 't'. * * @param workset_ vertices visited in the search
// something went wrong on this connection log.Lvlf4("%+v got error (%+s) while receiving message", r.id.String(), err) if err == ErrClosed || err == ErrEOF { // remote connection closed log.Lvl3(r.address, "handleConn with closed connection: stop (dst=", remote.Address, ")") return
module Pod describe Installer::PostInstallHooksContext do it 'offers a convenience method to be generated' do pods_project = Project.new('/path/Pods.xcodeproj') sandbox = stub(:root => Pathname.new('/path'), :project => pods_project) spec = fixture_spec('banana-lib/BananaLib.podspec') user_project = Xcodeproj::Project.open(SpecHelper.create_sample_app_copy_from_fixture('SampleProject'))
*/ public static function checkIteratorType( StatementsAnalyzer $statements_analyzer, PhpParser\NodeAbstract $stmt, PhpParser\Node\Expr $expr, Type\Union $iterator_type, Codebase $codebase,
static LogPatterns default_patterns; if (not is_initialized.test_and_set()) { default_patterns.setPattern( LogLevel::kTrace, R"([%Y-%m-%d %H:%M:%S.%F][th:%t][%=8l][%n]: %v)"); default_patterns.setPattern(LogLevel::kInfo, R"([%Y-%m-%d %H:%M:%S.%F][%L][%n]: %v)"); }
List<T> parents = new ArrayList<>(); Node parentNode = jjtGetParent(); while (parentNode != null) { if (parentType.isInstance(parentNode)) { parents.add((T) parentNode); } parentNode = parentNode.jjtGetParent();
'core/button', array( 'name'         => 'no-shadow', 'label'        => __( 'No Shadow', 'twentythirteen' ), 'style_handle' => 'no-shadow', ) );
<header> <h1 class="accent hero__main-heading"> Learn Web Development for Free </h1> <p class="secondary hero__sub-heading"> Stop wasting time...&nbsp;  Here's what you need to know. </p> <%= custom_button %> </header> <%= image_tag 'home-isometric.svg', class: 'hero__image', alt: 'home-page-banner' %> </div>
{ IdfObject idfObject( openstudio::IddObjectType::Schedule_File ); idfObject.setName(modelObject.name().get()); boost::optional<ScheduleTypeLimits> scheduleTypeLimits = modelObject.scheduleTypeLimits();
type connectionManager struct { //these are passed on creation mysteriumClient      server.Client newDialogEstablisher DialogEstablisherCreator newVpnClient         VpnClientCreator statsKeeper          bytescount.SessionStatsKeeper //these are populated by Connect at runtime status        ConnectionStatus dialog        communication.Dialog
if (!checkSql()) return true; QString error; if (!usernameIsValid(user, error)) return true; QSqlQuery *passwordQuery = prepareQuery("select password_sha512 from {prefix}_users where name = :name");
import matplotlib.pyplot as plt rmsd = R.rmsd.T   # transpose makes it easier for plotting time = rmsd[1] fig = plt.figure(figsize=(4,4)) ax = fig.add_subplot(111) ax.plot(time, rmsd[2], 'k-',  label="all")
Chem = pytest.importorskip("rdkit.Chem") mol = Chem.Mol() u = mda.Universe(mol, format="RDKIT") assert len(u.atoms) == 0  class TestUniverseFromSmiles(object): def setup_class(self):
var _ propagation.TextFormat = TraceContext{} var traceCtxRegExp = regexp.MustCompile("^[0-9a-f]{2}-[a-f0-9]{32}-[a-f0-9]{16}-[a-f0-9]{2}-?") // DefaultPropagator is the default trace propagator. var DefaultPropagator propagation.TextFormat = TraceContext{} func (hp TraceContext) Inject(ctx context.Context, supplier propagation.Supplier) {
public static void outputShellVariables(Map<String,String> config, PrintStream out) { for (String section : SECTIONS) { if (config.containsKey(section)) { out.printf(PROPERTY_FORMAT, section.toUpperCase() + "_HOSTS", config.get(section)); } else { if (section.equals("manager") || section.equals("tserver")) { throw new RuntimeException("Required configuration section is missing: " + section);
def float2str(value, precision=None): return "{0:.{1}f}".format(value, precision) \ if (precision is not None) and not isinstance(value, string_type) else str(value) def add(root, parent=None, decision=None): """recursively add node or edge"""
for (auto& [id, partition] : qm) { self->state.open_requests.emplace(id, 1 /*qm.size()*/); // TODO: Add a proper configurable timeout. // TODO: Handle the error case for the `then()` handler. self ->request(partition, caf::infinite, expr, caf::actor_cast<partition_client_actor>(client)) .then([=, id = id](atom::done) { auto& num_evaluators = self->state.open_requests[id]; if (--num_evaluators == 0) {
defer cancel() } if err := h.Processor.Process(ctx, event); err != nil { logging.FromContext(ctx).Error("failed to process event", zap.String("eventID", event.ID()), zap.Error(err)) msg.Nack() return }
"net/url" "time" "github.com/spiffe/spire/test/clock" ) // NewSVIDTemplate returns a default SVID template with the specified SPIFFE ID. Must
# @param [ String ] hostname The hostname whose records should be obtained. # @param [ String | nil ] srv_service_name The SRV service name for the DNS query. #   If nil, 'mongodb' is used. # @param [ Integer | nil ] srv_max_hosts The maximum number of records to return. #   If this value is nil, return all of the records. # # @raise [ Mongo::Error::MismatchedDomain ] If the :raise_in_invalid #   Resolver option is true and a record with a domain name that does
public const string OutputFormat = "_outputFormat"; public const string TypeFilter = "_typeFilter"; } }
<% if @notifications.to_a.any? %> <div class="per-page btn-group float-right d-none d-md-block" data-toggle="tooltip" data-placement="left" title="Notifications per page"> <button type="button" class="btn btn-sm btn-outline-dark dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <%= @per_page %> <span class="caret"></span> </button> <ul class="dropdown-menu dropdown-menu-right text-right">
{{if .After.Key}} AND (lower(l.key) > lower(:afterKey) AND l.tgt_service_id > :afterServiceID) {{end}} ORDER BY lower(key), key, lower(value), value, tgt_service_id LIMIT {{.Limit}} `))
std::cout << "Wrong format for amount" << std::endl; return nullptr; } if (precision.value() > 255) { std::cout << "Too big precision (should be between 0 and 256)" << std::endl; return nullptr; }
{ for ($i=0, $c=\count($topMostRootIds); $i<$c; $i++) { $tree .= $this->generateTree($table, $topMostRootIds[$i], array('p'=>($topMostRootIds[($i-1)] ?? null), 'n'=>($topMostRootIds[($i+1)] ?? null)), $blnHasSorting, -20, ($blnClipboard ? $arrClipboard : false), (($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['mode'] ?? null) == self::MODE_TREE && $blnClipboard && $topMostRootIds[$i] == $arrClipboard['id']), false, false, $arrFound); } }
Object actualValue = actualRow[col]; if (expectedValue != null && expectedValue.getClass().isArray()) { String newContext = String.format("%s (nested col %d)", context, col + 1); assertEquals(newContext, (Object[]) expectedValue, (Object[]) actualValue); } else if (expectedValue != ANY) { Assert.assertEquals(context + " contents should match", expectedValue, actualValue); }
amount_{ [this] { return proto::Amount(add_asset_quantity_.amount()); }} {} // TODO 30/05/2018 andrei Reduce boilerplate code in variant classes template AddAssetQuantity::AddAssetQuantity( AddAssetQuantity::TransportType &); template AddAssetQuantity::AddAssetQuantity(
struct wlr_color_config *wlr_color_config_load(const char *icc_profile_path) { assert(icc_profile_path); bool can_access = access(icc_profile_path, F_OK) != -1; if (!can_access) { wlr_log(WLR_ERROR, "Unable to access color profile '%s'", icc_profile_path);
assert.Equal(t, carrier.Get("foo"), "bar") assert.Equal(t, carrier.Get("baz"), "qux")  keys := carrier.Keys() sort.Strings(keys) assert.Equal(t, carrier.Keys(), []string{"baz", "foo"}) } type outOfThinAirPropagator struct {
// limitations under the License. // Package filevar provides a runtimevar implementation with variables // backed by the filesystem. Use New to construct a *runtimevar.Variable. // // Configuration files can be updated using any commands (cp, mv) or // tools/editors. This package does not guarantee read consistency since
*/ public function index() { $this->authorize('view', CustomField::class); $fieldsets = CustomFieldset::with("fields", "models")->get(); $fields = CustomField::with("fieldset")->get();
void SynchronizerImpl::process_commit(network::Commit commit_message) { log_->info("processing commit"); shared_model::interface::types::HeightType top_block_height{0}; if (auto block_query = block_query_factory_->createBlockQuery()) { top_block_height = (*block_query)->getTopBlockHeight(); } else { log_->error("Unable to retrieve top block height"); return; } const auto &block = commit_message.block;
except (errors.HttpError, HttpLib2Error) as e: raise api_errors.ApiExecutionError(project_id, e) @tracing.trace() def get_tables(self, project_id, dataset_id): """Return BigQuery tables stored in the requested project_id.
} // Newsletters with an unsubscribe header are less likely to be blocked (see #2174) $objEmail->addHeader('List-Unsubscribe', '<mailto:' . $objNewsletter->sender . '?subject=' . rawurlencode($GLOBALS['TL_LANG']['MSC']['unsubscribe']) . '>'); return $objEmail; }
/** * Initialize all views. * TODO: View elements that are part of NearbyFragment should ideally be not accessed directly in NearbyMapFragment. */ private void initViews() { Timber.d("initViews called");
func (bsp *BatchSpanProcessor) processQueue() { defer bsp.timer.Stop() ctx, cancel := context.WithCancel(context.Background()) for { select { case <-bsp.stopCh: cancel() return case <-bsp.timer.C: if err := bsp.exportSpans(ctx); err != nil {
return false; } $items = $this->get_items(); $head  = '<' . '?' . 'xml version="1.0" encoding="utf-8" ' . '?' . '>' . "\r\n<items count=\"" . count( $items ) . "\">\r\n"; $lines = '';
{ $upper = $helpcount; } $multipage = multipage($helpcount, $perpage, $page, "misc.php?action=helpresults&amp;sid='".htmlspecialchars_uni($mybb->get_input('sid'))."'"); $helpdoclist = ''; require_once MYBB_ROOT."inc/class_parser.php";
man.addConfigBool("pubsub.add_attributes", false, "Add PubSub attributes in addition to the message body") // Filesystem man.addConfigString("filesystem.status_log_file", filepath.Join(os.TempDir(), "osquery_status"), "Log file path to use for status logs") man.addConfigString("filesystem.result_log_file", filepath.Join(os.TempDir(), "osquery_result"), "Log file path to use for result logs") man.addConfigBool("filesystem.enable_log_rotation", false, "Enable automatic rotation for osquery log files")
* @return Thumbnail The thumbnail or NULL * @throws \Doctrine\ORM\NonUniqueResultException */ public function findOneByAssetAndThumbnailConfiguration(AssetInterface $asset, ThumbnailConfiguration $configuration): ?Thumbnail { $query = $this->entityManager->createQuery('SELECT t FROM Neos\Media\Domain\Model\Thumbnail t WHERE t.originalAsset = :originalAsset AND t.configurationHash = :configurationHash'); $query->setParameter('originalAsset', $this->persistenceManager->getIdentifierByObject($asset));
def __len__(self): if self.fold != -1: return self.fold_start_idx[self.fold + 1] - self.fold_start_idx[self.fold] return len(self.graph_lists) def _download(self):
final TransactionPool transactionPool = pantheonController.getTransactionPool(); final MiningCoordinator miningCoordinator = pantheonController.getMiningCoordinator(); if (permissioningConfiguration.isAccountWhitelistSet()) { AccountWhitelistController accountWhitelistController = new AccountWhitelistController(permissioningConfiguration); transactionPool.setAccountWhitelist(accountWhitelistController); } final FilterManager filterManager = createFilterManager(vertx, context, transactionPool);
public NormalizedSearchParameterQueryGenerator VisitBinary(BinaryExpression expression, object context) { throw new InvalidOperationException("Not expecting a BinaryExpression under a Token search param."); } public NormalizedSearchParameterQueryGenerator VisitChained(ChainedExpression expression, object context)
return p.builtins } // ParseFile parses the contents of a single file in the BUILD language. // It returns true if the call was deferred at some point awaiting  target to build,
class TypeName(_TypeName): name: str  # name is used for types in named tuples maintype: ObjectRef subtypes: typing.Optional[typing.List[_TypeName]] dimensions: typing.Optional[typing.List[int]] class FuncParam(Base):
url="https://github.com/modin-project/modin", long_description=long_description, long_description_content_type="text/markdown", install_requires=["pandas==0.23.4", "ray==0.6.2", "numpy<=1.15.0"], extras_require={ # can be installed by pip install modin[dask] "dask": ["dask==1.0.0", "distributed==1.25.0"],
} else { continue; }  if (!ignoreInterface(ifc.getDisplayName())) { for (Enumeration<InetAddress> addrs = ifc.getInetAddresses(); addrs.hasMoreElements(); ) { InetAddress address = addrs.nextElement(); boolean isLegalIpVersion = IPUtil.PREFER_IPV6_ADDRESSES ? address instanceof Inet6Address : address instanceof Inet4Address; if (isLegalIpVersion && !address.isLoopbackAddress() && isPreferredAddress(address)) { LOG.debug("Found non-loopback interface: " + ifc.getDisplayName()); result = address; }
*/ const USE_FLOW_CONTROL = false; // send ACK request every n-th bytes const ACK_WATERMARK = 131072; // max allowed pending ACK requests before pausing pty
*/ package tech.pegasys.pantheon.ethereum.eth.sync.fastsync; import static java.util.Arrays.asList; import static java.util.Collections.emptyList; import static java.util.Collections.singletonList; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.ArgumentMatchers.anyLong; import static org.mockito.Mockito.mock; import static org.mockito.Mockito.never; import static org.mockito.Mockito.verify; import static org.mockito.Mockito.verifyZeroInteractions; import static org.mockito.Mockito.when;
handle = guid_; handle.value[15] = 0x01; // Vendor specific; handle.value[14] = static_cast<octet>(next_instance_id_ & 0xFF); handle.value[13] = static_cast<octet>((next_instance_id_ >> 8) & 0xFF); handle.value[12] = static_cast<octet>((next_instance_id_ >> 16) & 0xFF);; } }  // namespace dds
def worker(start_method, sock, task_queue, res_queue, worker_cb, worker_params): if start_method == "spawn": task_queue.open_shm(multiprocessing.reduction.recv_handle(sock)) res_queue.open_shm(multiprocessing.reduction.recv_handle(sock)) sock.close() while True: if worker_cb(task_queue, res_queue, **worker_params) is None:
int s2n_hmac_hash_alg(s2n_hmac_algorithm hmac_alg, s2n_hash_algorithm *out) { notnull_check(out); switch(hmac_alg) { case S2N_HMAC_NONE:       *out = S2N_HASH_NONE;   break; case S2N_HMAC_MD5:        *out = S2N_HASH_MD5;    break;
/* * Copyright (C) 2016-2018 The JavaParser Team. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License.
alignments = list(FastaIO.FastaM10Iterator(StringIO(simple_example))) self.assertEqual(len(alignments), 4) self.assertEqual(len(alignments[0]), 2) rows = (2, 3, 4, 5) cols = (108, 64, 123, 456) for a in (alignments, rows, cols): self.assertEqual(rows, len(a)) self.assertEqual(cols, a.get_alignment_length()) for r in a: print("%s %s %i" % (r.seq, r.id, r.annotations["original_length"])) # print(a.annotations)
Returns ------- iterable | iterable[tuple[node, int]] If with_generation=False: An iterable of node names in topological sorted order. If with_generation=True: An iterable of tuples where the first element is the node and the second element is the generation. In topologically sorted order.
TableFilter filter = readSimpleTableFilter(); command.setTableFilter(filter); command.setSetClauseList(readUpdateSetClause(filter)); if (database.getMode().allowUsingFromClauseInUpdateStatement && readIf(FROM)) { TableFilter fromTable = readTableFilter(); command.setFromTableFilter(fromTable); } if (readIf(WHERE)) { command.setCondition(readExpression());
super(HttpError, self).__init__(msg, inner) class InvalidContainerError(HttpError): """ Container id sent in the header is invalid """ def __init__(self, msg=None, inner=None): super(InvalidContainerError, self).__init__(msg, inner) class EventError(AgentError):
# If string is passed in, execute and get reference to # functions. self.algoscript = kwargs.pop('script', None) self._initialize = None self._before_trading_start = None self._analyze = None
// Extract FLAGS bool bScriptHash = false; if (vStrInputParts.size() > 2) { std::string flags = vStrInputParts.back(); bScriptHash = (flags.find("S") != std::string::npos);
return "/v1/api/alerts?integration_key=" + url.QueryEscape(key.ID), nil case integrationkey.TypeGrafana: return "/v1/webhooks/grafana?integration_key=" + url.QueryEscape(key.ID), nil case integrationkey.TypeEmail: if !cfg.Mailgun.Enable || cfg.Mailgun.EmailDomain == "" { return "", nil
break; case 'NOTE_DEVTOOLS_TOGGLE': newState = Object.assign({}, state); newState.noteDevToolsVisible = !newState.noteDevToolsVisible; break; }
err := s.ProjectPut(proj) require.NoError(err) _, err = s.AppPut(serverptypes.TestApplication(t, &pb.Application{ Name:    "test", Project: ref, })) require.NoError(err) _, err = s.AppPut(serverptypes.TestApplication(t, &pb.Application{ Name:    "test2", Project: ref, })) require.NoError(err)
// for any given table. The logic here uses the setting of the first getItem in a table batch and then checks // the rest are identical or throws an exception. private KeysAndAttributes generateKeysAndAttributes(ReadBatch readBatch) { Collection<BatchableReadOperation> readOperations = readOperations(readBatch); AtomicReference<Boolean> consistentRead = new AtomicReference<>(); AtomicBoolean firstRecord = new AtomicBoolean(true);
[Benchmark(InnerIterationCount = 1000)] [InlineData(EncoderTarget.InvariantUtf8)] [InlineData(EncoderTarget.InvariantUtf16)] public void ReaderSystemTextJsonBasic(EncoderTarget encoderTarget) { var encoder = GetTargetEncoder(encoderTarget); var data = EncodeTestData(encoderTarget, TestJson.HeavyNestedJson); foreach (var iteration in Benchmark.Iterations) {
jet.newJobIfAbsent(p, config); } private static void printResults(List<Long> topNumbers) { StringBuilder sb = new StringBuilder(String.format("\nTop %d random numbers in the latest window: ", TOP)); for (int i = 0; i < topNumbers.size(); i++) { sb.append(String.format("\n\t%d. %,d", i + 1, topNumbers.get(i))); } System.out.println(sb.toString()); } }
package v1alpha2 import ( metav1 "k8s.io/apimachinery/pkg/apis/meta/v1" )
createAndInitSourceTable(sourceName); append(targetName, new Employee(1, "emp-id-one"), new Employee(6, "emp-id-6")); append(sourceName, new Employee(2, "emp-id-2"), new Employee(1, "emp-id-1"), new Employee(6, "emp-id-6")); String sqlText = "MERGE INTO %s AS target \n" + "USING %s AS source \n" + "ON target.id = source.id \n" + "WHEN MATCHED AND target.id = 1 THEN UPDATE SET * \n" + "WHEN MATCHED AND target.id = 6 THEN DELETE \n" + "WHEN NOT MATCHED AND source.id = 2 THEN INSERT * "; sql(sqlText, targetName, sourceName); assertEquals("Should have expected rows", ImmutableList.of(row(1, "emp-id-1"), row(2, "emp-id-2")), sql("SELECT * FROM %s ORDER BY id ASC NULLS LAST", targetName));
@Override protected void onResume() { dynamicTheme.onResume(this); super.onResume(); }
case *proto.ServiceAccountUpdate: d.serviceAccounts[*event.Id] = event case *proto.ServiceAccountRemove: id := *event.Id Expect(d.serviceAccounts).To(HaveKey(id)) delete(d.serviceAccounts, id) } }
final StringBuilder buff = new StringBuilder(); final String name = "GeneratedMetadata_" + simpleNameForHandler(def.handlerClass); final Map<MetadataHandler<?>, String> handlerToName = new LinkedHashMap<>(); for (MetadataHandler<?> provider : map.values()) { if (!handlerToName.containsKey(provider)) { handlerToName.put(provider, "provider" + (handlerToName.size() - 1)); } }
if tool_matches(tool, job_name): return tool # If no tool specified, assume it is ASAN. Also takes care of LSAN job type. return 'ASAN'
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4432-SEA 1645541715 2247492900</p> <hr> <p>Varnish cache server</p> </body>
.description(__('New Application')) .option('--simple', __('create a barebones project meant only for contract development')) .option('--locale [locale]', __('language to use (default: en)')) .option('--template [name/url]', __('download a template using a known name or a GitHub repository URL')) .action(function(name, options) { i18n.setOrDetectLocale(options.locale); if (name === undefined) {
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4449-SEA 1645545920 1526457240</p> <hr> <p>Varnish cache server</p> </body>
} $lang->attach_quota = $lang->sprintf($lang->attach_quota, $friendlyquota); if($usage['ausage'] !== NULL) { $friendlyusage = get_friendly_size($usage['ausage']); $lang->attach_usage = $lang->sprintf($lang->attach_usage, $friendlyusage);
for (int i = splitOffset; i < splitCount + splitOffset; i++) { byte[] splitBytes = ByteBufferUtil.toBytes(arguments.get(i)); String encodedSplit = Base64.getEncoder().encodeToString(splitBytes); stream.write((encodedSplit + '\n').getBytes(UTF_8)); } } catch (IOException e) { log.error("Error in FateServiceHandler while writing splits to {}: {}", splitsPath,
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4452-SEA 1645546101 2777032446</p> <hr> <p>Varnish cache server</p> </body>
// with a useWindowSize hook and rerender when the width changes across the // breakpoint. This is important when changing from portrait to landscape. isDesktop = () => { return window.innerWidth >= 1024; }; onClickHandlerWrapper = () => {
let messageType = ''; if (invalidCharacterLength) { messageType = 'INVALID_CHARACTER_LENGTH'; } else if (error) { messageType = 'ERROR'; } else if (loading) {
} ReadCursor cursor; if (Segment == end.Segment && end.Index - Index >= bytes) { // end.Index >= bytes + Index and end.Index is int cursor = new ReadCursor(Segment, Index + (int)bytes);
/** * @since 1.9.5 * @deprecated 3.14.0 Moved into the_answer_feedback * * @param integer $lesson_id * @param integer $question_id */ public static function output_result_indication( $lesson_id, $question_id ) { _deprecated_function( __METHOD__, '3.14.0', 'Sensei_Question::the_answer_feedback' );  $question_grade      = Sensei()->question->get_question_grade( $question_id ); $user_question_grade = Sensei()->quiz->get_user_question_grade( $lesson_id, $question_id, get_current_user_id() );
p.logger.Info("project initialized", "workspace", p.workspace) // Output all the variables that this project will use along with // the source of that variable. This can be used to debug unexpected // variable values. for name, value := range p.variables {
/// <param name="length">The length of the slice</param> public ReadableBuffer Slice(int start, int length) { var begin = _start.Seek(start, _end); var end = begin.Seek(length, _end); return Slice(begin, end); }
} for _, server := range d.upstream.Servers { reqCopy := req.Copy() reqCopy.Id = dns.Id() response, _, err := client.Exchange(reqCopy, fmt.Sprintf("%s:%s", server, d.upstream.Port)) if err != nil || response == nil { d.ns.debugf("error trying %s: %v", server, err) continue
self._update_overlay_geometries() elif option == 'window.hide_decoration': self._set_decoration(config.val.window.hide_decoration) elif option == 'colors.webpage.bg': self._set_bg_color() def _add_widgets(self): """Add or readd all widgets to the VBox.""" self._vbox.removeWidget(self.tabbed_browser.widget)
using Nancy.Responses; /// <summary> /// Containing extensions for the <see cref="Response"/> object. /// </summary> public static class ResponseExtensions {
public static ProcessorMetaSupplier writeObservableSupplier(@Nonnull String name) { return new ProcessorMetaSupplier() { private final Map<String, String> tags = Collections.singletonMap( ObservableUtil.OWNED_OBSERVABLE, name ); @Nonnull @Override public Map<String, String> getTags() { return tags; }
<div class="col-xs-12"> <div class="form-group"> <label>{{ trans('forms.setup.mail_driver') }}</label> <select name="mail_driver" class="form-control" required> @foreach($mail_drivers as $key => $driver) <option value="{{ $key }}" @if( $mail_config['driver'] === $key) selected @endif> {{ $driver }} </option> @endforeach
end scenario "Clicking link to owner's profile" do visit seeds_by_owner_path(member) click_link "View #{member}'s profile >>" current_path.should eq member_path(member) end
# the fd from epoll(7) anymore, causing a 100% CPU poll loop. fd = proc._sentinel_poll = os.dup(proc._popen.sentinel) # Safely call hub.add_reader for the determined fd iterate_file_descriptors_safely( [fd], None, hub.add_reader, self._event_process_exit, hub, proc)
// we have to create the snapshot dir if we are using // the default snapshot dir if it doesn't exist defaultSnapshotDir := filepath.Join(config.DataDir, "db", "snapshots") s, err := os.Stat(defaultSnapshotDir) if err != nil { if os.IsNotExist(err) {
annotations_file = annotations_file, ratio=True, ltrb=True, random_shuffle=True) self.decode = ops.nvJPEGDecoder(device="mixed", output_type=types.RGB) # Augumentation techniques self.crop = ops.RandomBBoxCrop(
} /** * Upgrades the settings from version 78 to 79. * * <p> * Change default value of {@code registeredNameColor} to have enough contrast in both the light and dark theme. * </p> */ private static class SettingsUpgraderV79 implements SettingsUpgrader {
imageView.SetImageDrawable(null); else { var context = imageView.Context; Drawable drawable; if (Build.VERSION.SdkInt >= BuildVersionCodes.Lollipop) drawable = context.Resources.GetDrawable(intValue, context.Theme); else drawable = context.Resources.GetDrawable(intValue); if (drawable != null) imageView.SetImageDrawable(drawable);
#include "text.h" #include "world.h" void RedistributeArmy( ArmyTroop & troop1 /* from */, ArmyTroop & troop2 /* to */ ) { const Army * army1 = troop1.GetArmy();
jsonContent := `{"Success":true}` validReqBuf := yarpc.NewBufferString(jsonContent) body, err := c.Decode(validReqBuf) assert.Equal(t, body.(*simpleResponse), &simpleResponse{Success: true}) assert.NoError(t, err) invalidReqBuf := yarpc.NewBufferString(`invalid`)
services.Add<ReindexJobWorker>() .Singleton() .AsSelf(); } } }
return self::$instance; } self::$instance = new self(); return self::$instance; }
describe('restrictions', () => { it('throws a property error when a reactive field conflicts with a method', () => { expect(() => { // The following class is wrapped by the compiler with registerDecorators. We check // here if the fields are validated properly. // eslint-disable-next-line @typescript-eslint/no-unused-vars class Invalid extends LightningElement {
category = Category.ONE_OFF, link = "https://github.com/palantir/gradle-baseline#baseline-error-prone-checks", linkType = LinkType.CUSTOM, severity = SeverityLevel.ERROR, summary = "log statement in catch block does not log the caught exception.") public final class CatchBlockLogException extends BugChecker implements BugChecker.CatchTreeMatcher {
Number of wells 96 If the handle contains no records, or more than one record, an exception is raised.  For example:: from Bio import phenotype record = phenotype.read("plates.csv", "pm-csv")
flags.StringVarP(&rpcConf.ListenAddr, "rpc-addr", "i", "localhost:9000", "the address the gRPC server listens on") flags.BoolVar(&rpcConf.RpcMetricsEnabled, "rpc-metrics-enabled", false, "whether to enable the rpc metrics") flags.StringVar(&triedir, "triedir", datadir, "directory to store the execution State") flags.Uint32Var(&mTrieCacheSize, "mtrie-cache-size", 500, "cache size for MTrie") flags.UintVar(&checkpointDistance, "checkpoint-distance", 40, "number of WAL segments between checkpoints") flags.UintVar(&checkpointsToKeep, "checkpoints-to-keep", 5, "number of recent checkpoints to keep (0 to keep all)")
{ /** @var EncoderFactoryInterface $encoderFactory */ $encoderFactory = System::getContainer()->get('security.encoder_factory'); $encoder = $encoderFactory->getEncoder(User::class); return $encoder->encodePassword($strPassword, null); }
path = g_strdup_printf ("%s/%s.rpm", self->metadata_dir_path, nevra); pkg = dnf_sack_add_cmdline_package (sack, path); if (!pkg) return glnx_throw (error, "Failed to add local pkg %s to sack", nevra); hy_goal_install (goal, pkg); }
backward_time.append(t2 - t1) print("Epoch {:05d} | Train Forward Time(s) {:.4f} | Backward Time(s) {:.4f}". format(epoch, forward_time[-1], backward_time[-1])) train_acc = torch.sum(logits[train_idx].argmax(dim=1) == labels[train_idx]).item() / len(train_idx) val_loss = F.cross_entropy(logits[val_idx], labels[val_idx]) val_acc = torch.sum(logits[val_idx].argmax(dim=1) == labels[val_idx]).item() / len(val_idx) print("Train Accuracy: {:.4f} | Train Loss: {:.4f} | Validation Accuracy: {:.4f} | Validation loss: {:.4f}". format(train_acc, loss.item(), val_acc, val_loss.item()))
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4459-SEA 1645536499 3891142003</p> <hr> <p>Varnish cache server</p> </body>
) ); $data = array( 'remove_generic_confirm'     => __( 'Are you sure you want to remove this user?', 'sensei-lms' ), 'remove_from_lesson_confirm' => __( 'Are you sure you want to remove the user from this lesson?', 'sensei-lms' ),
re_score = re_score - re_tail im_score = im_score - im_tail score = th.stack([re_score, im_score], dim = 0, p = 1) score = score.norm(dim = 0) return {'score': self.gamma - th.sum(score, -1)}
for (int i = 0; i < preferences->count; ++i) { if (0 == strcmp(preferences->suites[i]->name, conn->secure.cipher_suite->name) && /* make sure we dont use a tls version lower than that configured by the version */ s2n_connection_get_actual_protocol_version(conn) >= preferences->suites[i]->minimum_required_tls_version) { return 0; } }
}), arch: computed('job.config.content.arch', function () { return this.get('job.config.content.arch') || 'amd64'; }) });
#include <stdio.h> #include <sys/stat.h> #include <iostream> std::string id_to_name(uint32_t id) { std::string new_id(16, '\0');
namespace Microsoft.Health.Fhir.Core.Features.Operations.Reindex.Models { /// <summary> /// JsonConverter to handle change <see cref="ReindexJobRecord.QueryList"> from ConcurrentBag to ConcurrentDictionary. /// For backcompat and fact what we don't need values in dictionary and only key uniqueness, we read and write it as array and not dictionary. /// </summary> public class ReindexJobQueryStatusConverter : JsonConverter<ConcurrentDictionary<ReindexJobQueryStatus, byte>> {
utils.pingEndpoint( canonicalHost(host), port, ws ? 'ws': false, 'http', _origin, async (err) => { if (!err || (Date.now() - start > 10000)) { return resolve(); } await utils.timer(250).then(awaitTarget).then(resolve); } );
""" for o in self._options.values(): o.reset() self.changed.send(self._options.keys()) def update(self, **kwargs): updated = set(kwargs.keys())
); /** * Filters the query which fetches the user courses. * * @since 3.13.2 * @hook sensei_user_courses_query
* * @param bool $do_delay_js Whether to enable preload links. Default is true. */ if ( ! (bool) apply_filters( 'rocket_do_delay_js', true ) ) { return false; }
: config.getProfile(profileName); } if (this.statement.getNode() != null) { this.queryPlan = new QueryPlan(this.statement.getNode()); } else { this.queryPlan =
#define PROTO_DEVICE(T, Device) \ template class fully_connected_layer<T, data_layout::DATA_PARALLEL, Device>; \ template class fully_connected_layer<T, data_layout::MODEL_PARALLEL, Device> #define LBANN_INSTANTIATE_CPU_HALF #define LBANN_INSTANTIATE_GPU_HALF
case 'add': if(!$filter) { $errors['err']=sprintf(__('%s: Unknown or invalid'), __('ban list')); }elseif(!$_POST['val'] || !Validator::is_email($_POST['val'])) { $errors['err']=$errors['val']=__('Valid email address required'); }elseif(BanList::includes(trim($_POST['val']))) { $errors['err']=$errors['val']=__('Email already in the ban list');
assertThat(cmd.getCode()).isEqualTo(code); assertThat(cmd.getVersion()).isEqualTo(2333); assertThat(cmd.getRemark()).isEqualTo(remark); assertThat(cmd.getFlag() & 0x01).isEqualTo(1); //flag bit 0: 1 presents response } @Test
"github.com/influxdata/flux/execute/table" ) type ( Builder      = table.Builder BuilderCache = table.BuilderCache )
private NotificationWorkerFragment mNotificationWorkerFragment; private RVRendererAdapter<Notification> adapter; private List<Notification> notificationList; private boolean isarchivedvisible = false; MenuItem notificationmenuitem; TextView nonotificationtext; @Override
extends MergingSnapshotProducer<ReplacePartitions> implements ReplacePartitions { BaseReplacePartitions(String tableName, TableOperations ops) { super(tableName, ops); set(SnapshotSummary.REPLACE_PARTITIONS_PROP, "true"); } @Override
wp_die( sprintf( /* translators: %s: The options page name. */ __( 'Options page %s not found in the allowed options list.' ), '<code>' . esc_html( $option_page ) . '</code>' ) );
pytest.raises(NetworkXError, dbag, m2, m1, m2, 0) pytest.raises(NetworkXError, dbag, 100, m1, m2, -0.5) pytest.raises(NetworkXError, dbag, 100, m1, m2, 1.5) initial = nx.complete_graph(max(m1, m2) - 1) pytest.raises(NetworkXError, dbag, 100, m1, m2, p, initial=initial) def test_extended_barabasi_albert(self, m=2): """
if (this.number) this.set('jobIdNumber', this.number); }, });
} // InstallNewPipeline instantiates a NewExportPipeline and registers it globally. func InstallNewPipeline(config Config, options ...controller.Option) (*Exporter, error) { exp, err := NewExportPipeline(config, options...) if err != nil {
render() { const { state, controller } = this.props; if (state.isApplicationLoading) { return <div>Loading...</div>; } const { activeWallet } = this.props.state;
name='recommended_dict', probability=0.10, manually_enable=False) VALUE_PROFILE_STRATEGY = Strategy( name='value_profile', probability=0.33, manually_enable=False) # TODO(mpherman): Increase the probability of peach mutation strategy. PEACH_GRAMMAR_MUTATION_STRATEGY = Strategy( name='peach_grammar_mutation', probability=0.10, manually_enable=True)
switch v.Type() { case BOOL: return strconv.FormatBool(v.AsBool()) case INT32: return strconv.FormatInt(int64(v.AsInt32()), 10) case INT64: return strconv.FormatInt(v.AsInt64(), 10) case UINT32: return strconv.FormatUint(uint64(v.AsUint32()), 10) case UINT64: return strconv.FormatUint(v.AsUint64(), 10) case FLOAT32: return fmt.Sprint(v.AsFloat32())
// Store the fallback language (see #6874) if (!$objParentPage->fallback) { $this->rootFallbackLanguage = null; $objFallback = static::findPublishedFallbackByHostname($objParentPage->dns);
""" if not self.bundles: @self.register('bundle', calendar_name='NYSE', start_session=pd.Timestamp('2014', tz='UTC'), end_session=pd.Timestamp('2014', tz='UTC')) def _(environ,
long length(); /** * @return a list of recommended split locations, if applicable, null otherwise. When available, * this information is used for planning scan tasks whose boundaries are determined by these offsets. * The returned list must be sorted in ascending order. * Only valid after the file is closed. */ default List<Long> splitOffsets() {
public void remoteConnectionsPercentageWithInvalidFormatMustFail() { parseCommand( "--remote-connections-limit-enabled", "--remote-connections-percentage", "invalid"); verifyZeroInteractions(mockRunnerBuilder); assertThat(commandOutput.toString()).isEmpty(); assertThat(commandErrorOutput.toString()) .contains( "Invalid value for option '--remote-connections-percentage'", "should be a number between 0 and 100 inclusive"); } @Test
# ANY KIND, either express or implied. See the License for the specific language # governing permissions and limitations under the License. """Benchmarks measuring how Modin performance scales when MODIN_CPUS are changed"""
import sys import gflags as flags # TODO: Investigate improving so we can avoid the pylint disable. # pylint: disable=line-too-long
List<Variable> variables = new ArrayList<>(); Set<String> keys = new HashSet<>(); taskInfo .getExecutor() .getCommand()
noblacklist ${HOME}/.kde4/share/config/okularpartrc noblacklist ${HOME}/.kde4/share/config/okularrc noblacklist ${HOME}/.local/share/kget noblacklist ${HOME}/.local/share/okular noblacklist ${HOME}/.local/share/qpdfview
if err != nil { return } if len(statusParts) > 0 { resp.Status = statusParts[1] }
private CompactionCoordinatorService.Client coordinatorClient; private final String coordinatorMissingMsg = "Error getting the compaction coordinator. Check that it is running. It is not " + "started automatically with other cluster processes so must be started by running " + "'accumulo compaction-coordinator'."; private EmbeddedWebServer server;
emit muteDeafStateChanged(); } void ClientUser::setDeaf(bool deaf) { bDeaf = deaf; if (bDeaf)
*/ public function shouldLoadMinifiedJavascript() { if (isset($this->settings['userInterface']['loadMinifiedJavaScript'])) { return $this->settings['userInterface']['loadMinifiedJavaScript']; } elseif (isset($this->settings['userInterface']['loadMinifiedJavascript'])) { return $this->settings['userInterface']['loadMinifiedJavascript']; } return true; } /**
//make sure we don't call this before onAdd(); if( !mProfile ) return;  // The txt pointer is sometimes the same as the mText pointer, so make sure // we don't call strncpy with overlapping src and dest. if (txt && txt != mText) dStrncpy(mText, (UTF8*)txt, MAX_STRING_LENGTH); mText[MAX_STRING_LENGTH] = '\0';
JAVA_7(new Java7Validator(), null), JAVA_8(new Java8Validator(), null), JAVA_9(new Java9Validator(), null), JAVA_10_PREVIEW(null, new Java10PostProcessor()); final Validator validator; final ParseResult.PostProcessor postProcessor;
* @param AssetUsageInNodeProperties $assetUsage * @return ContentContext */ protected function getContextForReference(AssetUsageInNodeProperties $assetUsage): ContentContext { $hash = md5(sprintf('%s-%s', $assetUsage->getWorkspaceName(), json_encode($assetUsage->getDimensionValues()))); if (!isset($this->contexts[$hash])) {
try: is_gcs_summary_enabled = ( inventory_notifier_config.get('gcs_summary').get('enabled')) if inventory_notifier_config.get('email_summary'): is_email_summary_enabled = ( inventory_notifier_config.get('email_summary')
this.serialized             = serialized; } MaterialColor(int lightColor, int darkColor, int lightStatusBarColor, int darkStatusBarColor, String serialized) { this(lightColor, lightColor, lightStatusBarColor, darkColor, darkColor, darkStatusBarColor, serialized); } public int toConversationColor(@NonNull Context context) {
"""Set up.""" fake_global_configs = { 'securitycenter': {'max_calls': 1, 'period': 1.1}} cls.securitycenter = securitycenter.SecurityCenterClient(version='v1') cls.project_id = 111111 cls.source_id = 'organizations/111/sources/222'
public void onViewCreated(final View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); mAllergenDao = Utils.getAppDaoSession(getActivity()).getAllergenDao(); mAllergensFromDao = mAllergenDao.loadAll(); api = new OpenFoodAPIClient(getActivity()); mView = view;
var ErrInconsistentState = fmt.Errorf("inconsistent processor state") var ErrInvalidExporterKind = fmt.Errorf("invalid exporter kind") // New returns a basic Processor that is also a Checkpointer using the provided // AggregatorSelector to select Aggregators.  The ExportKindSelector // is consulted to determine the kind(s) of exporter that will consume // data, so that this Processor can prepare to compute Delta or
package dynamodocstore import ( "context" "net/url"
txtvSeek.setText(Converter.getDurationStringLong(position)); } } else if (controller.getDuration() != controller.getMedia().getDuration()) { controller.getMedia().setDuration(controller.getDuration()); updateUi(controller.getMedia()); } }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4453-SEA 1645544078 772888257</p> <hr> <p>Varnish cache server</p> </body>
// verify that rack was detected if len(stacks.Rack) == 0 || stacks.Rack[0].StackName != rackName { return stdcli.Error(fmt.Errorf("can not find rack named %s\nAre you authenticating with the correct AWS account?\nSee AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and ~/.aws/credentials", rackName)) } fmt.Println("Resources to delete:\n")
if (rootNode && !rootNode->isEmpty()) { ol.startParagraph(); ol.pushGeneratorState(); ol.disableAllBut(OutputGenerator::Man); ol.writeString(" - "); ol.popGeneratorState(); ol.writeDoc(rootNode,this,0); ol.pushGeneratorState(); ol.disable(OutputGenerator::RTF);
// wrapUnaryHandler takes a valid JSON handler function and converts it into a // yarpc.UnaryEncodingHandler. func wrapUnaryHandler(name string, handler interface{}) yarpc.UnaryEncodingHandler { return jsonHandler{ handler: reflect.ValueOf(handler), }
initResult = F(""); // Clear any previous result // check model ID register (value specified in datasheet) uint8_t modelId = readReg(IDENTIFICATION_MODEL_ID); if (modelId != 0xEE && modelId != 0xEA) { // Recognize VL53L0X (0xEE) and VL53L1X (0xEA) initResult  = F("VL53L0X: Init: unrecognized Model-ID: 0x"); initResult += String(modelId, HEX); return false;
this._changeToState(CardanoNodeStates.ERRORED); this._transitionListeners.onError(code, signal); try { _log.info('CardanoNode: restarting'); await this.restart(); } catch (error) { _log.error('CardanoNode: cannot be restarted', error); } } };
d = self.__dict__ for field_name, factory in self._field_factories: if field_name not in kwargs: d[field_name] = factory() d.update(kwargs)
GettingStarted = "Getting Started 🌱" Develop        = "Develop ✨" Settings       = "Settings ⚙️" Operational    = "Operations 🧐" Release        = "Release 🚀" )
} func (c *Command) proposals() { proposals := c.fetchProposals() c.fetchedProposals = proposals info(fmt.Sprintf("Found %v proposals", len(proposals))) for _, proposal := range proposals {
"github.com/liquidata-inc/dolt/go/libraries/doltcore/doltdb" ) var _ sql.Table = ConflictsTable{} // ConflictsTable is a sql.Table implementation that provides access to the conflicts that exist for a user table type ConflictsTable struct { tblName string dbName  string
if (requireAuthenication && !networkMessage.conn.isAuthenticated) { // message requires authentication, but the connection was no authnticated Debug.LogWarning($"Closing connection: {networkMessage.conn.connectionId}. Received message {typeof(T)} that required authentication, but the user has not authenticated yet"); networkMessage.conn.Disconnect(); return; }
return 0; } static int validateFile(Plugin *handle, Key *parentKey) { iconv_t conv = iconv_open(getFrom(handle), getFrom(handle)); if(conv == (iconv_t)(-1))
*/ #if !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_IS_BORINGSSL) /* Symbols for AES-SHA1-CBC composite ciphers were added in Openssl 1.0.1: */ #if S2N_OPENSSL_VERSION_AT_LEAST(1,0,1) #define S2N_AES_SHA1_COMPOSITE_AVAILABLE
cvd_dir = environment.get_value('CVD_DIR') cvd_bin_dir = os.path.join(cvd_dir, 'bin') launch_cvd_path = os.path.join(cvd_bin_dir, 'launch_cvd') device_memory_mb = environment.get_value('DEVICE_MEMORY_MB', DEFAULT_DEVICE_MEMORY_MB) launch_cvd_command_line = ( '{launch_cvd_path} -daemon -memory_mb {device_memory_mb}'.format( launch_cvd_path=launch_cvd_path, device_memory_mb=device_memory_mb)) execute_command(launch_cvd_command_line, on_cuttlefish_host=True) def stop_gce_device():
public const string SetEachPrefixRegex = @"(?<each>(每)\s*$)"; public const string SetLastRegex = @"(?<last>last|this|next)"; public const string SetEachDayRegex = @"(每|每一)(天|日)\s*$"; public const string TimeHourNumRegex = @"([0-1]?\d|2[0-4])"; public const string TimeMinuteNumRegex = @"([0-5]?\d)"; public const string TimeSecondNumRegex = @"([0-5]?\d)"; public const string TimeHourCJKRegex = @"(([零〇一二两三四五六七八九]|二十[一二三四]?|十[一二三四五六七八九]?)(つ)?)"; public const string TimeMinuteCJKRegex = @"([二三四五]?十[一二三四五六七八九]?|六十|[零〇一二三四五六七八九])"; public static readonly string TimeSecondCJKRegex = $@"{TimeMinuteCJKRegex}";
import os import os.path import itertools import sip from PyQt5.QtCore import QUrl, QObject, QPoint, QTimer
char time_formatted[255]; struct tm tm; struct flb_time tms; severity_t severity; msgpack_object *obj; msgpack_unpacked result; msgpack_sbuffer mp_sbuf;
constants.REPRODUCTION_TIMEOUT_LIMIT)) result = runner.run_single_testcase( input_path, timeout=constants.REPRODUCTION_TIMEOUT_LIMIT + 10,  # processing buffer. additional_args=arguments) return engine.ReproduceResult(result.command, result.return_code,
// convert from local encoding, then unescape escaped forbidden characters void FileSystemAccess::local2name(string *filename, const string *localPath) const { assert(filename);  string t = *filename; local2path(&t, filename);
verbose = 0 standard_include_path = os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir, 'Includes')) class Context(object): #  This class encapsulates the context needed for compiling
// EnvFile returns the location of the env file against the ws root directory. func (j *ScheduledJob) EnvFile() string { return aws.StringValue(j.TaskConfig.EnvFile) } // JobDockerfileBuildRequired returns if the job container image should be built from local Dockerfile.
/** * Sample simple product */ export const silverAmorBangleSet = { name: 'Silver Amor Bangle Set', url: '/silver-amor-bangle-set.html' };
templatePath(), "Compilation unit doesn't contain a class or interface declaration!")); // ApplicationTemplate (no CDI/Spring) has placeholders to replace if (annotator == null) { for (String section : sections) { replaceSectionPlaceHolder(cls, section);
// WorkloadManifest represents a workload manifest. type WorkloadManifest interface { ApplyEnv(envName string) (WorkloadManifest, error) } // WorkloadProps contains properties for creating a new workload manifest.
*polymorphic_tx.operator->()); }); auto block = std::make_shared<shared_model::proto::Block>( shared_model::proto::UnsignedBlockBuilder() .height(proposal.height()) .prevHash(last_block.value()->hash()) .transactions(proto_txs)
raise TypeError('`amount` must be an int') if amount < 1: raise AmountError('`amount` must be greater than 0') if amount > self.MAX_AMOUNT: raise AmountError('`amount` must be <= %s' % self.MAX_AMOUNT) self.fulfillment = fulfillment self.amount = amount
@Override public SnapshotTable.Result execute() { String desc = String.format("Snapshotting table %s as %s", sourceTableIdent(), destTableIdent); JobGroupInfo info = newJobGroupInfo("SNAPSHOT-TABLE", desc); return withJobGroupInfo(info, this::doExecute); }
} if len(newerOnDisk) > 0 { logrus.Fatal(strings.Join(newerOnDisk, ", ") + " newer than datastore and could cause a cluster outage. Remove the file(s) from disk and restart to be recreated from datastore.") } if updateDisk {
return false } // ApplicationName will return the General.ApplicationName func (cfg Config) ApplicationName() string { if cfg.General.ApplicationName == "" { cfg.General.ApplicationName = "GoAlert"
} void printNodeInfo(ILogger log, String addToProductName) { log.info(versionAndAddressMessage(addToProductName)); log.info(clusterNameMessage()); log.fine(serializationVersionMessage()); log.info('\n' + JET_LOGO); log.info(COPYRIGHT_LINE);
} /** * Is password required. * * @param int $lesson_id Lesson ID. *
// if it is a new resource if secret.SelfLink == "" { enableOwner := c.CertificateOptions.EnableOwnerRef if enableOwner { secret.SetOwnerReferences(append(secret.GetOwnerReferences(), ownerRef(crt))) } secret, err = c.Client.CoreV1().Secrets(namespace).Create(secret) } else { secret, err = c.Client.CoreV1().Secrets(namespace).Update(secret) }
Client().GetClientUI().GetPlayerListWnd()->Refresh(); // HumanClientFSM isn't being processed right now so we can't use transit<PlayingTurn>() and need an event for the FSM to react // ideally HumanClientFSM would have it's own processing thread, but right now it is processed by the GUI thread in response to network messages // post_event(DoneLoading()) would delay the event until the next network message is processed, so we use process_event(DoneLoading()) to get immediate results context<HumanClientFSM>().process_event(DoneLoading()); }
// global progatators and tracer providers. return &Handler{ propagators: otel.GetTextMapPropagator(), tracer:      otel.Tracer("examples/passthrough/handler"), next:        next, } }
IdfObject idfObject(openstudio::IddObjectType::EnergyManagementSystem_Program); m_idfObjects.push_back(idfObject); //m_map.insert(std::make_pair(modelObject.handle(), idfObject)); //Name s = modelObject.name(); if (s) {
'consumables'			=> 'Consumables', 'country'  				=> 'Country', 'create'				=> 'Create New', 'created'               => 'Item Created', 'created_asset'			=> 'created asset', 'created_at' 			=> 'Created at', 'currency'  			=> '$', // this is deprecated
import net.sourceforge.pmd.cpd.internal.JavaCCTokenizer; import net.sourceforge.pmd.lang.TokenManager; import net.sourceforge.pmd.lang.jsp.ast.JspTokenManager; import net.sourceforge.pmd.util.IOUtil; public class JSPTokenizer extends JavaCCTokenizer { @Override protected TokenManager getLexerForSource(SourceCode sourceCode) { return new JspTokenManager(IOUtil.skipBOM(new CharSequenceReader(sourceCode.getCodeBuffer()))); } }
return $args; } if ( empty( $args['headers']['Authorization'] ) && self::ROCKETCDN_API . 'pricing' === $url ) { return $args; }
using sofa::helper::Factory; using namespace sofa::core::objectmodel; // TODO (sescaida 13.02.2018): this factory code is redundant to the Communication plugin, but should easily be mergeable, when an adequate spot is found. typedef sofa::helper::Factory< std::string, BaseData> PSDEDataFactory; PSDEDataFactory* getFactoryInstance(){
def list_exfilled_files(self, startdir=None): if not startdir: startdir = self.get_config('exfil_dir') if not os.path.exists(startdir): return dict() exfil_files = dict() exfil_folders = [f.path for f in os.scandir(startdir) if f.is_dir()]
}) } // By default, generate a safe job name from the PodMonitor. We also keep // this around if a jobLabel is set in case the targets don't actually have a // value for it. A single pod may potentially have multiple metrics
); if (!rp->avp) { msg_printf(project, MSG_INTERNAL_ERROR, "No application found for task %s: platform %s version %d plan class %s; discarding", rp->wup->name, rp->platform, rp->version_num, rp->plan_class ); delete rp;
private String composedTaskRunnerName = "composed-task-runner"; @NotBlank private String schedulerTaskLauncherName = "scheduler-task-launcher"; public String getComposedTaskRunnerName() { return composedTaskRunnerName;
config[:bioc_required] = true config[:bioc_use_devel] = true config[:r] = 'release' normalized_r_version('release') when 'bioc-release' config[:bioc_required] = true config[:bioc_use_devel] = false config[:r] = 'release' normalized_r_version('release') else v end end
*/ public class CmmnParserImpl implements CmmnParser { private final Logger logger = LoggerFactory.getLogger(CmmnParserImpl.class); protected CmmnParseHandlers cmmnParseHandlers; protected CmmnActivityBehaviorFactory activityBehaviorFactory;
// CloseToAmount is amount of the remaining funds that were transferred to the close to address (if closing). // // required: false CloseToAmount uint64 `json:"closetoamount"` } // AssetFreezeTransactionType contains the additional fields for an asset freeze transaction
} /** * @return string[] */ public function getAllowedExtensions() {
auth            BlockAuthenticator parallelBlocks  uint64 deadlineTimeout time.Duration  // suspendForCatchpointWriting defines whether we've ran into a state where the ledger is currently busy writing the // catchpoint file. If so, we want to suspend the catchup process until the catchpoint file writing is complete, // and resume from there without stopping the catchup timer. suspendForCatchpointWriting bool // The channel gets closed when the initial sync is complete. This allows for other services to avoid // the overhead of starting prematurely (before this node is caught-up and can validate messages for example).
enableLegacyOAuthProvidersIfNotInSettings ]; function migrateToLatest() { var applied = Migrations.findOne({_id: "migrations_applied"}); var start; if (!applied) {
try: resp.content  # Consume socket so it can be released except (ContentDecodingError, RuntimeError): resp.raw.read()  # Ensure that the socket is consumed if i >= self.max_redirects: raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)
package util import ( "fmt" "net/http" "github.com/gin-gonic/gin"
var routeTable = self.get(resourceGroupName, routeTableName, _); self.interaction.formatOutput(routeTable, function (routeTable) { if (!routeTable) { self.output.warn(util.format($('A route table with name "%s" not found'), routeTableName)); } else { var resourceInfo = resourceUtils.getResourceInformation(routeTable.id);
} else { const AWS = require('aws-sdk'); s3bucket = new AWS.S3({params: {Bucket: 'pageshot-images-bucket'}}); get = (uid, contentType) => {
async def _add_fact_relationships(self, criteria=None): relationships = await self.dao.get('core_relationships', criteria) return [dict(edge=r.get('edge'), target=(await self.dao.get('core_fact', dict(id=r.get('target'))))[0]) for r in relationships if r.get('target')] No newline at end of file
const { walletMigration } = stores; const { walletMigrationStep } = walletMigration; const { nextStep, resetMigration } = actions.walletMigration; const migrationStep = IMPORT_WALLET_STEPS[walletMigrationStep]; const CurrentContainer = this.containers[migrationStep]; return ( <CurrentContainer
# SPDX-License-Identifier: Apache-2.0 # Purpose: # sns-ruby-example-send-message.rb demonstrates how to send a message using an Amazon Simple Notification Service (SNS) topic using # the AWS SDK for Ruby. # Inputs:
keyUsages |= x509.KeyUsageCertSign } return &x509.Certificate{ Version:               3, BasicConstraintsValid: true,
void USM_memcpy(void* dst, const void* src, size_t n) { Experimental::SYCL().fence(); auto event = USM_memcpy( *Experimental::Impl::SYCLInternal::singleton().m_queue, dst, src, n); Experimental::Impl::SYCLInternal::fence(event); } }  // namespace
@classmethod def from_string(cls, treetext): """Instantiate the Newick Tree class from the given string.""" handle = StringIO(treetext) return cls(handle)
return nil, err } span := make([]byte, 8) binary.LittleEndian.PutUint64(span, uint64(len(content))) err = hasher.SetSpanBytes(span) if err != nil { return nil, err
For user_pwd, a default username as string. title: The question title to show. text: The prompt text to display to the user. url: Any URL referenced in prompts. answer: The value the user entered (as password for user_pwd). is_aborted: Whether the question was aborted. interrupted: Whether the question was interrupted by another one.
from plenum.common.util import get_utc_epoch from plenum.test.helper import sdk_send_and_check, sdk_sign_request_from_dict from indy_common.constants import REVOC_REG_DEF_ID, VALUE, FROM, TO, ISSUED, \ REVOKED, PREV_ACCUM, ACCUM_FROM, ACCUM_TO, STATE_PROOF_FROM, ACCUM from plenum.common.constants import TXN_TIME, DATA from plenum.common.types import f from plenum.common.util import randomString
if (ResourcePermissions.Count == 0) { yield return new ValidationResult(Resources.ResourcePermissionEmpty); } else {
import os.path as osp import mmcv import numpy as np from numpy import random from torch.utils.data import Dataset from mmdet.core import eval_map, eval_recalls
# Copyright 2019 The TensorFlow Authors. All Rights Reserved. # # Licensed under the Apache License, Version 2.0 (the "License"); # you may not use this file except in compliance with the License.
rule_bigquery_acl.role: bigquery_acl.role, } return regular_exp.all_match(rule_regex_to_val) # TODO: The naming is confusing and needs to be fixed in all scanners. def find_policy_violations(self, bigquery_acl):
spotipy_call = getattr(spotipy_client, endpoint) recently_played = spotipy_call(**kwargs) break except (AttributeError, TypeError): current_app.logger.critical("Invalid spotipy endpoint or arguments:", exc_info=True) return None except SpotifyException as e: retries -= 1
) const ( serviceName = "SwarmBeeSvc" ) func (c *command) initStartCmd() (err error) {
log.Lvl3(r.address, "Handling new connection to ", remote.Address) for { packet, err := c.Receive() // whether the router is closed if r.Closed() {
private void showSnackBarWithRetry() { progressBar.setVisibility(View.GONE); ViewUtil.showDismissibleSnackBar(findViewById(android.R.id.content), R.string.achievements_fetch_failed, R.string.retry, view -> setAchievements()); } /**
"github.com/aws/copilot-cli/internal/pkg/deploy/cloudformation/stack" "github.com/aws/copilot-cli/internal/pkg/describe" "github.com/aws/copilot-cli/internal/pkg/exec" "github.com/aws/copilot-cli/internal/pkg/initialize" "github.com/aws/copilot-cli/internal/pkg/logging" "github.com/aws/copilot-cli/internal/pkg/repository"
arena->DialogBattleSummary( result, artifactsToTransfer, false ); } // if both armies had heroes and the defeated hero didn't flee or surrender: capture the artifacts if ( hero_wins != nullptr && hero_loss != nullptr && loserAbandoned ) { clearArtifacts( hero_loss->GetBagArtifacts() ); transferArtifacts( hero_wins->GetBagArtifacts(), artifactsToTransfer ); } // save count troop
leaf_value_[0] = 0.0f; leaf_weight_[0] = 0.0f; leaf_parent_[0] = -1; shrinkage_ = 1.0f; num_cat_ = 0; cat_boundaries_.push_back(0);
use Shopsys\FrameworkBundle\Model\Cart\CartFacade; use Shopsys\FrameworkBundle\Model\Cart\CartFactory; use Shopsys\FrameworkBundle\Model\Cart\CartRepository; use Shopsys\FrameworkBundle\Model\Cart\Item\CartItemFactory; use Shopsys\FrameworkBundle\Model\Cart\Watcher\CartWatcherFacade; use Shopsys\FrameworkBundle\Model\Customer\CurrentCustomer;
}; /** * @given initialized storage * block 1 - initial block with 4 peers * block 2 - new peer added. signed by supermajority of ledger peers * block 3 - signed by supermajority of ledger peers, contains signature of * new peer * @when blocks 2 and 3 are validated * @then result is successful */ TEST_F(ChainValidatorStorageTest, PeerAdded) {
break; case CR_ACIDDEMONSTRATION: #ifdef RENEWAL {// [malufett] // [violetharmony] ratio change int64 matk=0, atk; short tdef = status->get_total_def(target); short tmdef =  status->get_total_mdef(target);
DisableLabelCreation   bool   `public:"true" info:"Disables the ability to create new labels for services."` MessageBundles         bool   `public:"true" info:"Enables bundling status updates and alert notifications. Also allows 'ack/close all' responses to bundled alerts."` ShortURL               string `public:"true" info:"If set, messages will contain a shorter URL using this as a prefix (e.g. http://example.com). It should point to GoAlert and can be the same as the PublicURL."` DisableSMSLinks        bool   `public:"true" info:"If set, SMS messages will not contain a URL pointing to GoAlert."` } Maintenance struct {
if !enabled { return } // For a large number of clients (˜10'000), the connection phase // can take some time. This is a linear backoff to enable connection // even when there are a lot of request: for wait := 500; wait < 1000; wait += 100 { if err := encoder.Encode(v); err == nil { return
std::string last_name; int save_version = CURRENT_FORMAT_VERSION; std::vector<int> reserved_vols( LOOPXX_COUNT, 0 ); std::map<std::string, std::vector<Player>> mapPlayers; namespace ObjectFadeAnimation {
go network.SetupAndEnsureIPTables(network.ForwardRules(config.Network.String()), 50) if flannelIPv6Masq && config.IPv6Network.String() != emptyIPv6Network { logrus.Debugf("Creating IPv6 masquerading iptables rules for %s network", config.IPv6Network.String()) go network.SetupAndEnsureIP6Tables(network.MasqIP6Rules(config.IPv6Network, bn.Lease()), 60) go network.SetupAndEnsureIP6Tables(network.ForwardRules(config.IPv6Network.String()), 50) }
issue = errors.New("cycle detected") return false } // we make a copy so that diamond delegation will work, // seeTestDarc_DelegationDiamond newVisited := make(map[string]bool) for k, v := range visited { newVisited[k] = v
use Aws\Exception\AwsException; /** * Creating an S3 Amazon Kinesis Firehose Delivery Stream. * * This code expects that you have AWS credentials set up per: * https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/guide_credentials.html
const util = require('./util'); const {keys, propTypes, objectTypes} = constants; const listenersKey = Symbol(); const resultsKey = Symbol(); // TODO: DATA
fd, host, port); /* * Prepare a timeout using poll(2): we could use our own * event loop mechanism for this, but it will require an * extra file descriptor, the poll(2) call is straightforward * for this use case. */ FD_ZERO(&wait_set);
"bytes" "encoding/json" "fmt" "text/template" "sort" "testing"
im_ids_16) def _dataset_options(): options = tf.data.Options() try: options.experimental_optimization.apply_default_optimizations = False options.experimental_optimization.autotune = False except: print('Could not set TF Dataset Options')  return options   def _test_tf_dataset(device): skip_for_incompatible_tf()
namespace config { namespace detail { std::string append_slash_if_needed(const std::string& str) { if (str.empty()) { return std::string("/"); }
team, err = ds.TeamByName(context.Background(), tt.name) require.Error(t, err)  require.NoError(t, ds.DeletePack(context.Background(), newP.Name)) }) } }
func HandleCheckAndExit(failed bool) { if failed { fmt.Printf("\nThis PR has non-whitelisted committers or authors.\n") fmt.Printf("Please use ./utils/checkcommitters/fix_committer.sh to make\n") fmt.Printf("all commits from a whitelisted committer and author.\n") os.Exit(1) }
} static async defaultFilename(noteIds, fileExtension) { if (!noteIds) { return ''; }
<td>{rewardWallet}</td> <td className={styles.rewardAmount}> {isRestoring ? '-' : rewardAmount} {isRestoring && ( <div className={styles.syncingProgress}> <PopOver content={intl.formatMessage(
Hex("vote_id", vote.BlockID[:]). Hex("voter_id", vote.SignerID[:]). Hex("proposer_id", proposal.Block.ProposerID[:]). Msg("vote for invalid proposal detected") } func (lc *LogConsumer) logBasicBlockData(loggerEvent *zerolog.Event, block *model.Block) *zerolog.Event {
* Account stores all of the settings for a single account defined by the user. It is able to save * and delete itself given a Preferences to work with. Each account is defined by a UUID. */ public class Account implements BaseAccount, StoreConfig { /** * Default value for the inbox folder (never changes for POP3 and IMAP)
* * @param string $smileyPath */ public function importSmileys($smileyPath) { global $modSettings;
"github.com/mholt/caddy/middleware" "net/http" "net/url" "path/filepath" "runtime" "strconv" "strings"
group: 'AposInputGroup', array: 'AposInputArray', object: 'AposInputObject', relationship: 'AposInputRelationship', relationshipReverse: 'AposInputRelationshipReverse', attachment: 'AposInputAttachment', video: 'AposInputVideo' }
$user_question_grade = 0; $graded_count++; } else { $user_right = intval( $user_question_grade ) > 0; // The user's grade will be 0 if they answered incorrectly. // Don't set a grade for questions that are part of an auto-graded quiz, but that must be manually graded. $user_wrong =
type Props = { disabled?: boolean, onDelegate: Function, }; export default class DelegateWalletButton extends Component<Props> {
package repo import ( "github.com/pkg/errors" "github.com/spf13/cobra" "github.com/spf13/pflag"
} /** * Sets the 1st element of this tuple to the given {@code value}. * * @return a copy of this tuple with a new value for the 1st element of this Tuple. */ public Tuple3<T1, T2, T3> update1(T1 value) { return new Tuple3<>(value, _2, _3); } /**
func initializeRpmDatabase(installRoot string, diffDiskBuild bool) (err error) { if !diffDiskBuild { var ( stdout string stderr string )  stdout, stderr, err = shell.Execute("rpm", "--root", installRoot, "--initdb") if err != nil { logger.Log.Warnf("Failed to create rpm database: %v", err)
onGetFreshLogs={(logs) => { getFreshLogs.trigger({ logs }); }} /> ); }
DBA = dual_barabasi_albert_graph(100, m1, m2, p, seed, initial=initial) BA1 = barabasi_albert_graph(100, m1, seed, initial=initial) BA2 = barabasi_albert_graph(100, m2, seed, initial=initial) assert ( min(BA1.size(), BA2.size()) <= DBA.size() <= max(BA1.size(), BA2.size()) )
try: inventory_dict = inventory_req['responses'][ 'GET_INVENTORY']['inventory_delta']['inventory_items'] except TypeError: return 0 item_count = 0
/// </summary> internal partial class IndentedStringBuilder { private const char IndentChar = ' '; private const int CharCountPerIndent = 4; private bool _indentPending; private int _indentLevel;
'id'      => 'id' ], JsonResponse::HTTP_OK, [ 'Expires' => 'Mon, 26 Jul 1997 05:00:00 GMT', 'Last-Modified' => \gmdate('D, d M Y H:i:s') . ' GMT', 'Cache-Control' => 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0', 'Pragma' => 'no-cache', ]);
@When("I type `$text` in field located `$locator` and keep keyboard opened") public void typeTextInFieldAndKeepKeyboard(String text, Locator locator) { baseValidations.assertElementExists(ELEMENT_TO_TYPE_TEXT, locator) .ifPresent(e -> keyboardActions.typeText(e, text)); } /**
Args: s: The string to evaluate. file: Interpret s as a path to file, also implies --quiet. quiet: Don't show the output in a new tab. """ if file:
//@HEADER */ #include <cstdint> #include <iostream> #include <iomanip>
import ( "context" "errors" "testing" "time" "github.com/google/go-cmp/cmp" "go.etcd.io/etcd/clientv3" "go.etcd.io/etcd/embed" "go.etcd.io/etcd/etcdserver/api/v3rpc/rpctypes"
}, }, a: &admissionv1.AdmissionRequest{ RequestKind: &metav1.GroupVersionKind{Group: "cert-manager.io", Version: "v1alpha2", Kind:    "Certificate"}, },
decl = attr_type.cpp_optional_declaration_code(attr.cname) else: decl = attr_type.declaration_code(attr.cname) type.scope.use_entry_utility_code(attr) code.putln("%s;" % decl) code.putln(footer) if type.objtypedef_cname is not None:
if err != nil { return controller, exp, err } global.SetMeterProvider(controller.Provider()) return controller, exp, err }
} private AuthenticationException onError(JwtException e) { if (e instanceof BadJwtException) { return new InvalidBearerTokenException(e.getMessage(), e); } else {
'SELECT location FROM user_credentials UNION ' 'SELECT location FROM amm_swaps', ) locations = {Location.deserialize_from_db(loc[0]) for loc in cursor} cursor.execute('SELECT DISTINCT type FROM amm_events') for event_type in cursor: if EventType.deserialize_from_db(event_type[0]) in (EventType.MINT_SUSHISWAP, EventType.BURN_SUSHISWAP):  # noqa: E501 locations.add(Location.SUSHISWAP) else:
<table class="outer" align="center" style="background-color: #ffffff; border: 1px solid black; border-spacing: 0; color: #333333; font-family: sans-serif; max-width: 600px; width: 100%;"> <tr> <td class="full-width-image center" style="padding: 0; text-align: center;"> <%=  image_tag attachments['logo.svg'].url, alt: 'home page banner' %> <p class="main-heading" style="color: #cc9543; font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 28px; font-weight: bold; margin: 10px 0 20px 0; vertical-align: center;">The Odin Project</p> </td> </tr>
public void setHint(@NonNull String hint, @Nullable CharSequence subHint) { this.hint = hint; this.subHint = subHint; if (this.subHint != null) { super.setHint(new SpannableStringBuilder().append(ellipsizeToWidth(this.hint))
class AddNameAndNameKanaToUsers < ActiveRecord::Migration[6.0] def change change_table :users, bulk: true do |t| t.string :name, null: false, default: "" t.string :name_kana, null: false, default: "" end end end
self.get_organization() self.check_billing_enabled() self.has_permissions() self.check_network_host_project_id() self.enable_apis()
} static uint8_t *do_encode_header(h2o_hpack_header_table_t *header_table, uint8_t *dst, const h2o_iovec_t *name, const h2o_iovec_t *value, h2o_header_flags_t flags) { int name_index = flags.http2_static_table_name_index;  /* try to send as indexed */ { size_t header_table_index = header_table->entry_start_index, n;
_, err = tx.StmtContext(ctx, db.lock).ExecContext(ctx) if err != nil { return uuid.UUID{}, fmt.Errorf("acquire lock: %w", err) } // try again after exclusive lock
} // FIXME: Make sure that the content provider is up // This is the wrong place for it, but bleh - better than not having it turned on by default for people who don't go throughl ogin ContentResolver.setSyncAutomatically(sessionManager.getCurrentAccount(), ModificationsContentProvider.AUTHORITY, true); // Enable sync by default! EventLog.schema(CommonsApplication.EVENT_CATEGORIZATION_ATTEMPT, mwApi, prefs) .param("username", sessionManager.getCurrentAccount().name) .param("categories-count", categories.size()) .param("files-count", photosList.size()) .param("source", Contribution.SOURCE_EXTERNAL)
curStatus, nextStatus := statuses[len(statuses)-2], statuses[len(statuses)-1] switch { case nextStatus.value.InProgress(): // It's possible that CloudFormation sends multiple "CREATE_IN_PROGRESS" events back to back, // we don't want to reset the timer then. if curStatus.value.InProgress() { return } sw.reset()
/// </summary> public class SearchParameterExpression : SearchParameterExpressionBase { public SearchParameterExpression(SearchParameterInfo searchParameter, Expression expression) : base(searchParameter) { EnsureArg.IsNotNull(expression, nameof(expression)); Expression = expression; } public Expression Expression { get; }
} proposal := service_discovery.NewServiceProposal( providerId, nats.NewContact(providerId), ) proposal.ConnectionConfig = vpnClientConfigString
.collect(Collectors.toList()); assertThat(result.size()).isEqualTo(1); assertThat(result.get(0).getValue()).contains(BytesValue.of(1)); BytesValue actualPath = CompactEncoding.pathToBytes(result.get(0).getPath()); assertThat(actualPath).isEqualTo(BytesValue.fromHexString("0x100000")); } @Test
end end describe 'auth_oidc', unless: (os[:family] == 'ubuntu' && os[:release].to_f == 14.04) do pp = <<-MANIFEST class { 'apache': } apache::vhost { 'test.server':
"go.uber.org/yarpc/transport" ) // rawHandler adapts a Handler into a transport.UnaryHandler type rawHandler struct { UnaryHandler UnaryHandler } func (r rawHandler) Handle(ctx context.Context, treq *transport.Request, rw transport.ResponseWriter) error {
>>> print(list(nx.bfs_tree(G,1).edges())) [(1, 0), (1, 2)] >>> H = nx.Graph() >>> nx.add_path(H, [0, 1, 2, 3, 4, 5, 6]) >>> nx.add_path(H, [2, 7, 8, 9, 10]) >>> print(list(nx.bfs_tree(H, source=3, depth_limit=3).edges())) [(1, 0), (2, 1), (2, 7), (3, 2), (3, 4), (4, 5), (5, 6), (7, 8)] Notes
'excerpt' => $this->contentExtension->getExcerpt($content), 'link' => $this->contentExtension->getLink($content), 'editLink' => $this->contentExtension->getEditLink($content), 'icon' => $this->getIcon(), ]; } }
} @Test public void testExecuteImmediateIssue3106() { plsql.parseResource("ExecuteImmediateIssue3106.pls"); } }
->withArgument( $this->getContainer()->get( 'advanced_cache' ) ) ->withArgument( $this->getContainer()->get( 'wp_cache' ) ); $this->getContainer()->add( 'expired_cache_purge', 'WP_Rocket\Engine\Cache\PurgeExpired\PurgeExpiredCache' ) ->withArgument( rocket_get_constant( 'WP_ROCKET_CACHE_PATH' ) ); $this->getContainer()->share( 'expired_cache_purge_subscriber', 'WP_Rocket\Engine\Cache\PurgeExpired\Subscriber' ) ->withArgument( $this->getContainer()->get( 'options' ) ) ->withArgument( $this->getContainer()->get( 'expired_cache_purge' ) ); } }
data = client.fetch_organization(resource_key) return FACTORIES['organization'].create_new(data, root=True) except api_errors.ApiExecutionError as e: LOGGER.warn('Unable to fetch Organization %s: %s', resource_key, e) data = {'name': resource_key} resource = FACTORIES['organization'].create_new(data, root=True) resource.add_warning(e)
resourceManagerEndpointUrl: propDescriptor('resourceManagerEndpointUrl', 'AZURE_RESOURCEMANAGERENDPOINT_URL'), sqlManagementEndpointUrl: propDescriptor('sqlManagementEndpointUrl', 'AZURE_SQL_MANAGEMENTENDPOINT_URL'), hostNameSuffix: propDescriptor('hostNameSuffix', 'AZURE_HOSTNAME_SUFFIX'), sqlServerHostnameSuffix: propDescriptor('sqlServerHostNameSuffix', 'AZURE_SQL_SERVER_HOSTNAME_SUFFIX'), activeDirectoryEndpointUrl: propDescriptor('activeDirectoryEndpointUrl', 'AZURE_ACTIVEDIRECTORY_ENDPOINT_URL'), commonTenantName: propDescriptor('commonTenantName', 'AZURE_ACTIVEDIRECTORY_COMMON_TENANT_NAME'), storageEndpoint: propDescriptor('storageEndpoint', 'AZURE_STORAGE_ENDPOINT'),
export function getMultiServer() { return getConfig().then(config => { // Enable multi-server support when served by webpack if (process.env.WEBPACK_SERVE) { // eslint-disable-line no-undef return true; } return !!config.multiserver; }).catch(error => { console.log('cannot get web config:', error); return false;
{ GVariantDict dict; g_variant_dict_init (&dict, NULL); glnx_unref_object GUnixFDList *fd_list = NULL; /* let's take care of install_pkgs first since it can fail */ if (install_pkgs) { g_autoptr(GPtrArray) repo_pkgs = NULL; g_autoptr(GVariant) fd_idxs = NULL; if (!rpmostree_sort_pkgs_strv (install_pkgs, &repo_pkgs, &fd_list, &fd_idxs, error)) return FALSE;
View\Helper\PipelineInjectorFactory::class, View\Helper\TemplatePath::class => View\Helper\TemplatePathFactory::class, View\Helper\ThemeResources::class => View\Helper\ThemeResourcesFactory::class, ], 'aliases' => [ 'headThemeResources' => View\Helper\HeadThemeResources::class, 'imageLink' => View\Helper\ImageLink::class, \Laminas\View\Helper\HeadLink::class => View\Helper\HeadLink::class, \Laminas\View\Helper\HeadScript::class =>
DEV_TIMED_ABOVE("Stop worker", 100) while (m_state != WorkerState::Stopped) { m_state_notifier.wait(l); } } }
*/ public function markAllAsResolved() {  return $this->createQueryBuilder('e') ->update() ->set('e.isResolved', ':isResolvedTrue') ->where('e.isResolved = :isResolvedFalse') ->setParameter('isResolvedTrue', true) ->setParameter('isResolvedFalse', false) ->getQuery() ->getSingleScalarResult(); }
auto ctx = ihipGetTlsDefaultCtx(); hipError_t ret = hipSuccess; std::size_t blockSize = hip_impl::get_program_state().get_kernattribute(f->_name); if (blockSize < (localWorkSizeX * localWorkSizeY * localWorkSizeZ)) { return hipErrorLaunchFailure; }  if (ctx == nullptr) { ret = hipErrorInvalidDevice;
<section class="content-header"> <% content_for :title, "Edit - Organizations - #{@organization.name}" %> <h1> Editing <small><%= @organization.name %></small>
return true } func TestConsumedBalances(t *testing.T) { balancesFunc := func() (ret map[string]int64, err error) { ret = make(map[string]int64)
listMode := false flag.Parse() flag.Visit(func(f *flag.Flag) { if f.Name == "test.list" { listMode = true } })
>>> G = nx.DiGraph(nx.path_graph(4)) >>> sr = nx.simrank_matrix(G) >>> sr array([[ 1.,  0.,  0.8181254,  0.], [ 0.,  1.,  0.,  0.8181254], [ 0.8181254,  0.,  1.,  0.], [ 0.,  0.8181254,  0.,  1.]]) Notes -----
It("should have expected chains", expectWlChainsFor("cali12345-ab_policy1")) Context("with another endpoint with the same interface name and earlier workload ID, and no policy", func() { JustBeforeEach(func() { epMgr.OnUpdate(&proto.WorkloadEndpointUpdate{
import ( "fmt" "github.com/algorand/go-algorand/crypto" "github.com/algorand/go-algorand/data/basics" "github.com/algorand/go-algorand/data/transactions" )
// Secret specifies the secret key which HMAC tokens are created with. Secret string `yaml:"secret"` } `yaml:"http"` }
request = new MegaRequestPrivate(MegaRequest::TYPE_FETCH_NODES); } if (e == API_OK) { // check if we fetched a folder link and the key is invalid
AccountAssetResponse::AccountAssetResponse( QueryResponseType &&queryResponse) : CopyableProto(std::forward<QueryResponseType>(queryResponse)), account_asset_response_{proto_->account_assets_response()}, account_assets_{account_asset_response_.account_assets().begin(), account_asset_response_.account_assets().end()} {} template AccountAssetResponse::AccountAssetResponse( AccountAssetResponse::TransportType &);
.commit(); } private void setActionBarNotificationBarColor(MaterialColor color) { getSupportActionBar().setBackgroundDrawable(new ColorDrawable(color.toActionBarColor(this))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
if self.is_cpp_class_scope and function and function.scope is self: # for C++ classes we can have both member and non-member operators # and we really want to consider both global_scope = self.global_scope() if global_scope: global_func = global_scope.lookup_here("operator%s" % operator) if global_func: nonmember_alternatives = global_func.all_alternatives()
newIfaceNameToHostEpID[ifaceName] = bestHostEpId newHostEpIDToIfaceNames[bestHostEpId] = append( newHostEpIDToIfaceNames[bestHostEpId], ifaceName) } oldID, wasKnown := m.activeIfaceNameToHostEpID[ifaceName] newID, isKnown := newIfaceNameToHostEpID[ifaceName] if oldID != newID { logCxt := ifaceCxt.WithFields(log.Fields{ "oldID": m.activeIfaceNameToHostEpID[ifaceName], "newID": newIfaceNameToHostEpID[ifaceName], }) logCxt.Info("Endpoint matching interface changed") if wasKnown {
&& uh != me && !fetchingnodes) { // new user --> fetch keys fetchContactKeys(u); }
shellutil.run_command(["eject", dvd]) except shellutil.CommandError as cmd_err: if chk_err:  msg = """Failed to eject dvd: ret={0} [stdout] {1}  [stderr] {2} """.format(cmd_err.returncode, cmd_err.stdout, cmd_err.stderr)  raise OSUtilError(msg) def try_load_atapiix_mod(self): try:
#else // When USE_APPIMAGE_UPDATER_BRIDGE is defined // USE_APPIMAGE_UPDATER_BRIDGE implies that we are on a linux machine // so we are going to assume that. Q_UNUSED(focus) m_UpdaterDialog = nullptr; m_Revisioner = new AppImageDeltaRevisioner(/*singleThreaded=*/true,/*parent=*/this);
import com.hazelcast.internal.metrics.ProbeLevel; import com.hazelcast.internal.metrics.ProbeUnit; import com.hazelcast.jet.core.metrics.Metric; import com.hazelcast.jet.core.metrics.MetricTags; import com.hazelcast.jet.core.metrics.Unit; import javax.annotation.Nonnull;
# [Super Admin] This is for administrating organizations at a global level. We can create, view, modify, etc. class Admin::OrganizationsController < AdminController def edit @current_organization = Organization.find(params[:id]) end
elif n == 1: ret_new[f'{q}_alt'] = items[n] else: ret_new[f'{q}_alt{n}'] = items[n] return ret_new def open(self):
def _init_write_request_validator(self): constraint_serializer = ConstraintsSerializer(domain_state_serializer) config_state = self.states[CONFIG_LEDGER_ID] self.write_req_validator = WriteRequestValidator(config=self.config, auth_map=auth_map, cache=self.getIdrCache(),
label : [None | string] Label for legend margins : Sequence of 2 numbers or None (default=None) The sequence contains horizontal and vertical axis margins. Adjust to avoid image being clipped. Returns -------
"a map of ports and options that the application is listening on", docs.Summary( "used to define and configure multiple ports that the application is", "listening on. Available keys are 'port', 'name', 'host_port', and 'host_ip'.", "Ports will be TCP protocol.", ), )
} var seed [32]byte sha3pool.Sum256(seed[:], make([]byte, 32)) b := &legacy.Block{ BlockHeader: legacy.BlockHeader{
:param bucket_name: The name of the bucket that receives the posted object. :param object_key: The object key to identify the uploaded object. :param expires_in: The number of seconds the presigned POST is valid. :return: A dictionary that contains the URL and form fields that contain required access data. """
this.keyMetadata = toCopy.keyMetadata() == null ? null : ByteBuffers.copy(toCopy.keyMetadata()); this.splitOffsets = toCopy.splitOffsets() == null ? null : copyList(toCopy.splitOffsets()); this.sortOrderId = toCopy.sortOrderId(); return this; }
} if (flags & DC_EXEC) { if (reset) { d->name.clear(); MakeDefaultName(d);
String brokerAddr = findBrokerResult.getBrokerAddr(); if (PullSysFlag.hasClassFilterFlag(sysFlagInner)) { brokerAddr = acquireFilterServerRandomly(mq.getTopic(), brokerAddr); } PullResult pullResult = this.mQClientFactory.getMQClientAPIImpl().pullMessage(
@Override public Set<StoredTabletFile> getCandidates(Set<StoredTabletFile> currFiles, CompactionKind kind) { return Collections.unmodifiableSet(Sets.difference(currFiles, allCompactingFiles)); } }
// Verify one element records := processorTest.NewOutput(attribute.DefaultEncoder()) require.NoError(t, reader.ForEach(ekindSel, records.AddRecord)) require.EqualValues(t, map[string]float64{ "observe.sum/A=B/": float64(3 * 10 * multiplier), }, records.Map())
Timber.d("Contributions tab selected"); tabLayout.getTabAt(CONTRIBUTIONS_TAB_POSITION).select(); isContributionsFragmentVisible = true; ViewUtil.hideKeyboard(tabLayout.getRootView()); updateMenuItem(); break; case NEARBY_TAB_POSITION:
"Text color for the keyhint widget."), ('keyhint.fg.suffix', SettingValue(typ.CssColor(), '#FFFF00'), "Highlight color for keys to complete the current keychain"), ('keyhint.bg',
.description($('Commands to manage your Storage account keys')); var connectionString = storageAccount.category('connection-string') .description($('Commands to show your Storage connection string')); var serviceType = { blob: 0, queue: 1, table: 2, file: 3 };
@Override public String toString() { return getDestinationName(); } String getDestinationName() {
full = self.adaptor.get_subseq_as_string( self.primary_id, self.start + start, self.start + end ) return full[::step].encode("ASCII") def __bytes__(self): """Return the full sequence as bytes."""
else if (m->s->from->nonextcp && m->s->to->noprevcp && Within4RoundingErrors(m->s->from->me.x,m->s->to->me.x) && Within4RoundingErrors(m->s->from->me.y,m->s->to->me.y)) SOError( "The spline is straight and is too short to be meaningful.\n"); else if (Within4RoundingErrors(evalCubicSpline(m->s->splines[0], m->tstart), evalCubicSpline(m->s->splines[0], m->tend)) && Within4RoundingErrors(evalCubicSpline(m->s->splines[1], m->tstart), evalCubicSpline(m->s->splines[1], m->tend))) SOError( "The monotonic curve is too short.\n"); else { /* It is monotonic, so a subset of it must also be */ Monotonic *m2 = chunkalloc(sizeof(Monotonic));
return keps, err } func (c *Client) findKEPPullRequests(sig string) (*keps.Proposal, error) { gh := github.NewClient(nil) pulls, _, err := gh.PullRequests.List(context.Background(), "kubernetes", "enhancements", &github.PullRequestListOptions{}) if err != nil {
prev_block_id = g.id for block in range(4): transactions = [ Transaction.create([b.me], [user_vk]).sign([b.me_private]) for i in range(10) ] block = b.create_block(transactions)
apiServiceConfigPath:  "google/cloud/bigquery/reservation/v1/bigqueryreservation_v1.yaml", releaseLevel:          "ga", }, { inputDirectoryPath:    "google/cloud/bigquery/storage/v1beta1", pkg:                   "storage",
pScene->mNumMaterials = sib.mtls.size(); pScene->mNumMeshes = sib.meshes.size(); pScene->mNumLights = sib.lights.size(); pScene->mMaterials = pScene->mNumMaterials ? new aiMaterial*[pScene->mNumMaterials] : NULL; pScene->mMeshes = pScene->mNumMeshes ? new aiMesh*[pScene->mNumMeshes] : NULL; pScene->mLights = pScene->mNumLights ? new aiLight*[pScene->mNumLights] : NULL; if (pScene->mNumMaterials) memcpy(pScene->mMaterials, &sib.mtls[0], sizeof(aiMaterial*) * pScene->mNumMaterials); if (pScene->mNumMeshes)
# Detecing KVM is tricky, so let's use an environment variable, set from the # docker image, to determine whether to turn it on or not. if environment.get_value('FUCHSIA_USE_KVM'): qemu_args.append('-enable-kvm') # Get the list of fuzzers for ClusterFuzz to choose from.
self._out_feats = out_feats self._k = k with self.name_scope(): self.fc = nn.Sequential() for _ in range(k): self.fc.add(
if (!nodebyhandle(config.getRemoteNode())) { // remote node gone config.setResumable(false); syncConfigs->insert(config); continue; } const auto e = addsync(config, DEBRISFOLDER, nullptr);
def get_issue_url(testcase): """Return issue url for a testcase. This is used when rendering a testcase, details page, therefore it accounts for |group_bug_information| as well.""" issue_tracker = get_issue_tracker_for_testcase(testcase) if not issue_tracker: return None
}) } // NewRecordReplayClient creates a new http.Client for tests. This client's // activity is being either recorded to files (when *Record is set) or replayed // from files. rf is a modifier function that will be invoked with the address // of the httpreplay.Recorder object used to obtain the client; this function // can mutate the recorder to add provider-specific header filters, for example. func NewRecordReplayClient(ctx context.Context, t *testing.T, rf func(r *httpreplay.Recorder), opts ...option.ClientOption) (c *http.Client, cleanup func()) { httpreplay.DebugHeaders() path := filepath.Join("testdata", t.Name()+".replay") if *Record {
} expect(transformError.toString()).toContain(expected.error.message); expect(transformError.loc).toEqual(expected.error.loc); } else if (expected.output) { const output = testTransform(actual); if (expected.output.code !== undefined) {
Run scanner: $ forseti_scanner \\ --rules <rules path> \\ --engine_name <rule engine name> """
"grpc",      // github.com/pieterlouw/caddy-grpc "gopkg",     // github.com/zikes/gopkg "restic",    // github.com/restic/caddy } const (
$find = str_replace(array('\\', "'"), array('\\\\', "\'"), htmlspecialchars_uni($smilie['find'])); $smilie['onclick'] = $smilie['extra_class'] = true; ++$i; $smilies[] = $smilie; }
"jarcat":      config.Java.JarCatTool, "javacworker": config.Java.JavacWorker, "junitrunner": config.Java.JUnitRunner, "langserver":  path.Join(config.Please.Location, "build_langserver"), "lps":  	   path.Join(config.Please.Location, "build_langserver"), "maven":       config.Java.PleaseMavenTool, "pex":         config.Python.PexTool,
* @param b the second key * @return -1 if the first key is smaller, 1 if bigger, 0 if equal */ @SuppressWarnings("unchecked") final int compare(Object a, Object b) { return keyType.compare((K)a, (K)b); }
*/ Map<String, E> mappings(); }
@Nonnull List<Transform> upstream(); void determineLocalParallelism(Context context); void addToDag(Planner p);
return errTopicSubscriptionNotAllowed } func validateTime(t, floor, ceiling time.Duration) error { if t < floor || t > ceiling { return fmt.Errorf("must be between %v and %v", floor, ceiling) } return nil
# # Skeleton file for the Python "Bob" exercise, to get you coding more quickly. # def hey(what) return
using namespace vast; using namespace std::string_literals; TEST(functionality) { std::string str = "1";
namespace Microsoft.Health.Fhir.Api.Features.Bundle { /// <summary> /// This class extends the standard JwtBearerHandler to handle cases when batches and transactions are processed. /// Because the pipeline is only setup once, the context used in portions of the pipeline is set to the POST on / for batches/transactions and not the sub-calls. /// To counteract this behavior in the case of sub-calls we check to see if the BundleHttpContextAccessor has an HttpContext and set its response status code. /// </summary> public class BundleAwareJwtBearerHandler : JwtBearerHandler { private readonly IBundleHttpContextAccessor _bundleHttpContextAccessor;
// Note: no longer calling `validateDomainName` because if users use git-remote-codecommit // (the HTTPS (GRC) protocol) to connect to CodeCommit, the url does not have any periods. if !strings.Contains(url, githubURL) && !strings.Contains(url, ccIdentifier) && !strings.Contains(url, bbURL) { return fmt.Errorf("must be a URL to a supported provider (%s)", strings.Join(manifest.PipelineProviders, ", ")) } return nil }
status = map_objects.get('status', None) cells = map_objects['map_cells'] #insert detail info about gym to fort for cell in cells: if 'forts' in cell: for fort in cell['forts']:
} if !claims.Expiry.Time().IsZero() { // This is an indication that this may be a projected service account token p.log.Warn("The service account token has an expiration time, which is an indication that may be a projected service account token. If your cluster supports Service Account Token Volume Projection you should instead consider using the `k8s_psat` attestor. Please look at https://github.com/spiffe/spire/blob/main/doc/plugin_server_nodeattestor_k8s_sat.md#security-considerations for details about security considerations when using the `k8s_sat` attestor.") // Validate the time with leeway if err := claims.ValidateWithLeeway(jwt.Expected{
v_k_0 = 0 for n in G: weighted_cost += d[n] * (arborescence.degree(n) - 2) v_k_0 += 1 if arborescence.degree(n) - 2 == 0 else 0 if weighted_cost < min_k_d_weight: min_k_d_weight = weighted_cost min_k_d = arborescence # If d is the zero vector, then all minimum arborescences # will have the same weighted cost of 0, but if there is a # cycle among them, that needs to be the one we pick if v_k_0 == len(G): min_k_d_weight = weighted_cost min_k_d = arborescence
from io import StringIO from collections import defaultdict from numpy.testing import ( assert_equal, assert_array_equal,)
kernel_size=self.kernel_size, stride=_pair(self.stride), padding=_pair(self.padding), dilation=_pair(self.dilation), bias=True) self.init_offset()
num_data_ = train_data_->num_data(); // create buffer for gradients and Hessians if (objective_function_ != nullptr) { const size_t total_size = static_cast<size_t>(num_data_) * num_tree_per_iteration_; gradients_.resize(total_size); hessians_.resize(total_size); } // get max feature index max_feature_idx_ = train_data_->num_total_features() - 1;
return nil } // Send transmits the given data. The data is expected to already be framed. func (h *fHttpTransport) Send(data []byte) error { if !h.IsOpen() {
} } const tempOptions = Object.assign({}, options, { conditions: [...options.conditions, 'isPinned = 1'] }); const pinnedItems = await this.search(tempOptions); options.conditions.push('isPinned = 0'); if (!options.showCompletedTodos) { options.conditions.push('todo_completed <= 0');
spotipy_call = getattr(spotipy_client, endpoint) recently_played = spotipy_call(**kwargs) break except (AttributeError, TypeError) as err: current_app.logger.critical("Invalid spotipy endpoint or arguments:", err, exc_info=True) return None except SpotifyException as e: retries -= 1 if e.http_status == 429:
""" Finds any applicable compositor and applies it. """ from .overlay import Overlay, CompositeOverlay if not isinstance(overlay, CompositeOverlay): overlay = Overlay([overlay]) while True: match = cls.strongest_match(overlay, mode) if match is None: return overlay
} /** * Shortcut for {@code filterTry(predicate::test, throwableSupplier)}, see * {@link #filterTry(CheckedPredicate, Supplier)}}. * * @param predicate A predicate * @return a {@code Try} instance
* @param int     $post_id The post ID. * @param WP_Post $post    WP_Post object. */ function rocket_clean_post( $post_id, $post = null ) { static $done = []; if ( isset( $done[ $post_id ] ) ) { return; } $done[ $post_id ] = 1;  if ( defined( 'DOING_AUTOSAVE' ) ) { return; }
// Client is included for easy `Send`-methods. sda.Client // IdentityData holds all the data related to this identity // It can be stored and loaded from a config file. Data }
t, err := s.tag.GetByAddress(ch.Address()) if err != nil { s.logger.Debugf("pusher: get tag by address %s: %v", ch.Address(), err) continue } t.Inc(tags.StateSent)
# Cell class AzureMLCallback(Callback): "Log losses, metrics, model architecture summary to AzureML" order = Recorder.order+1 def before_fit(self): self.run = Run.get_context()
def _test(): """Run the Bio.Blast.Applications module's doctests (PRIVATE).""" import doctest doctest.testmod(verbose=1)
log.warn("Use of {} and {} are deprecated. Consider using {} instead.", INSTANCE_DFS_URI, INSTANCE_DFS_DIR, Property.INSTANCE_VOLUMES); } if ((cipherSuite.equals(NULL_CIPHER) || keyAlgorithm.equals(NULL_CIPHER)) && !cipherSuite.equals(keyAlgorithm)) { fatal(Property.CRYPTO_CIPHER_SUITE.getKey() + " and " + Property.CRYPTO_CIPHER_KEY_ALGORITHM_NAME + " must both be configured."); } if (cryptoModule.equals(NULL_CRYPTO_MODULE) && !secretKeyEncryptionStrategy.equals(NULL_SECRET_KEY_ENCRYPTION_STRATEGY)) {
import com.google.errorprone.BugPattern.SeverityLevel; import com.google.errorprone.VisitorState; import com.google.errorprone.bugpatterns.BugChecker; import com.google.errorprone.fixes.SuggestedFixes; import com.google.errorprone.matchers.Description; import com.google.errorprone.matchers.Matcher; import com.google.errorprone.matchers.method.MethodMatchers; import com.sun.source.tree.ExpressionTree; import com.sun.source.tree.MethodInvocationTree; import java.util.Collections;
this.test.assertEquals(this.get_cell_text(0), a, 'Merge cell 0 above: Cell 0 is unchanged'); this.test.assertEquals(this.get_cell_text(1), b, 'Merge cell 0 above: Cell 1 is unchanged'); this.test.assertEquals(this.get_cell_text(2), c, 'Merge cell 0 above: Cell 2 is unchanged'); this.validate_notebook_state('merge up', 'command', 0); }); // Try to merge cell 0 below with cell 1
for (int i = 0; i < indent; i++) { System.out.print(" "); } System.out.printf(fmtString, args); } }
Returns: dict[str, Tensor]: A dictionary of loss components. """ super(SingleStageDetector, self).forward_train(img, img_metas) x = self.extract_feat(img) losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes, gt_labels, gt_bboxes_ignore)
$editreason = ''; if($mybb->settings['alloweditreason'] == 1) { eval("\$editreason = \"".$templates->get("editpost_reason")."\";"); $bgcolor = "trow2"; $bgcolor2 = "trow1";
protocolTraffic.Rates = make(map[string]string) } // handle low request rates precision trouble. // If rate < 1 then increase precision delta := calPrecisionDelta(rateVal) rate := fmt.Sprintf("%.*f", r.Precision+delta, rateVal) // remove redundant zero and keep at least two decimals
if ! [[ "${paths[$i]}" == *"$target_variant"* ]]; then matched_all_archs="0" fi  # This regex matches all possible variants of the arch in the folder name: # Let's say the folder name is: ios-armv7_armv7s_arm64_arm64e/CoconutLib.framework # We match the following: -armv7_, _armv7s_, _arm64_ and _arm64e/. # If we have a specific variant: ios-i386_x86_64-simulator/CoconutLib.framework # We match the following: -i386_x86_ and _x86_64- local target_arch_regex="[_\-]${target_arch}[_\-\/]" if ! [[ "${paths[$i]}" =~ $target_arch_regex ]]; then matched_all_archs="0" fi done
this.store = new Iterable<TabletLocationState>() { @Override public Iterator<TabletLocationState> iterator() { try { return Iterators.concat(new ZooTabletStateStore().iterator(), new RootTabletStateStore(context).iterator(), new MetaDataStateStore(context).iterator()); } catch (DistributedStoreException e) { throw new RuntimeException(e); } } }; }
# See the License for the specific language governing permissions and # limitations under the License. # from .getter import get_config, add_config_path from .cfg_parser import LuigiConfigParser from .toml_parser import LuigiTomlParser __all__ = [ 'add_config_path', 'get_config', 'LuigiConfigParser', 'LuigiTomlParser', ]
Impl::SYCLInternal::singleton().initialize(d.get_device()); } std::ostream& SYCL::impl_sycl_info(std::ostream& os, const sycl::device& device) { using namespace sycl::info; return os << "Name: " << device.get_info<device::name>() << "\nDriver Version: " << device.get_info<device::driver_version>()
// unavailable at the proper time self.apos.migrations.add(self.__meta.name + '.docReferencesCorrected', function(callback) { var attachmentUpdates = {}; return async.series([ reset, docs, attachments, self.updatePermissions ], callback); function reset(callback) { return self.db.update({}, { $set: { docIds: [], trashDocIds: []
import bigchaindb from bigchaindb.consensus import AbstractConsensusRules logger = logging.getLogger(__name__) CONFIG_DEFAULT_PATH = os.environ.setdefault(
*/ TEST_F(ToriiServiceTest, CommandClient) { iroha::protocol::TxStatusRequest tx_request; tx_request.set_tx_hash(std::string('1', 32)); iroha::protocol::ToriiResponse toriiResponse; auto client1 = torii::CommandSyncClient(Ip, Port);
{ return IsModifiableEntity() && (Persister.HasMutableProperties || !(entity is IFieldInterceptorAccessor interceptorAccessor) || interceptorAccessor.FieldInterceptor.IsDirty); } /// <summary>
/// Adds a new static directory to the nancy conventions /// </summary> /// <param name="requestDirectory">The route of the file</param> public string this[string requestDirectory, params string[] allowedExtensions] { set { this.conventions.StaticContentsConventions.Add(StaticContentConventionBuilder.AddDirectory(requestDirectory, value, allowedExtensions)); } } }
} filteredConns := filterAntreaConns(conns, ct.nodeConfig, ct.serviceCIDR, zoneFilter) klog.V(2).Infof("FlowExporter considered flows: %d", len(filteredConns)) return filteredConns, nil }
"headers": semantic.Tvar(1), }, Required: []string{"url"}, Return:   semantic.NewObjectPolyType(map[string]semantic.PolyType{"statusCode": semantic.Int, "body": semantic.Bytes}, semantic.LabelSet{"status", "body"}, nil), }), func(ctx context.Context, args values.Object) (values.Value, error) { // Get and validate URL
def __init__( self, name: str, typespec: type, default: typing.Any, help: str, choices: typing.Optional[typing.Sequence[str]] ) -> None: typecheck.check_type(name, default, typespec) self.name = name self.typespec = typespec self._default = default self.value = unset self.help = help self.choices = choices
}) } maxHandlers := 1 ab := batcher.New(reflect.TypeOf([]ackIDBox{}).Elem(), maxHandlers, handler) return &Subscription{ driver:     d, ackBatcher: ab,
#   RSpec's built-in formatters emit. def fully_formatted(pending_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes) formatted_caller = RSpec.configuration.backtrace_formatter.backtrace_line(example.location)  [ colorizer.wrap("\n  #{pending_number}) #{example.full_description}", :pending), "\n     ", Formatters::ExceptionPresenter::PENDING_DETAIL_FORMATTER.call(example, colorizer), "\n", colorizer.wrap("     # #{formatted_caller}\n", :detail) ].join("") end end
{ var matchingRule = GetMatchingRowHighlightingRule(logEvent); if (ColorDoesChange(matchingRule.ForegroundColor, oldForegroundColor)) { Console.ForegroundColor = (ConsoleColor)matchingRule.ForegroundColor; didChangeForegroundColor = true; } if (ColorDoesChange(matchingRule.BackgroundColor, oldBackgroundColor)) { Console.BackgroundColor = (ConsoleColor)matchingRule.BackgroundColor; didChangeBackgroundColor = true;
server.t = new(tomb.Tomb) } if server.m == nil { server.m = new(sync.RWMutex) }  server.t.Go(server.run) return server.t.Wait()
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4426-SEA 1645534116 1373961312</p> <hr> <p>Varnish cache server</p> </body>
end if Rails.env.development? || Rails.env.test? get 'reports/nbdn_annual', to: 'reports/nbdn_annual#index' get 'reports/nbdn_annual/:year', to: 'reports/nbdn_annual#show' end resources :transfers, only: %i(index create new show destroy)
EventBus.getDefault().register(this); chip = layout.findViewById(R.id.feed_title_chip); chip.setOnCloseIconClickListener(v -> { getArguments().putLong(ARG_FEED, 0); search(); }); return layout; }
// from config loader (eg. a http loader) with given interval. // // EXPERIMENTAL: Subject to change. PullInterval Duration `json:"pull_interval,omitempty"` } // IdentityConfig configures management of this server's identity. An identity
{round.block_round, currentRejectRoundConsumer(round.reject_round)}); } void OnDemandOrderingServiceImpl::tryErase( const consensus::Round &current_round) { auto current_proposal = proposal_map_.find(current_round); auto proposal_range_size = boost::size( boost::make_iterator_range(proposal_map_.begin(), current_proposal));  while (proposal_range_size > number_of_proposals_ and proposal_map_.begin()->first < current_round) { log_->info("tryErase: erasing {}", proposal_map_.begin()->first); proposal_map_.erase(proposal_map_.begin()); }
def test_tf_dataset_mismatched_input_type(): input_dataset = tf.data.Dataset.from_tensors(np.full((2, 2), 42)).repeat() for wrong_input_dataset in ["str", [input_dataset]]: yield check_tf_dataset_mismatched_input_type, wrong_input_dataset, "a" for wrong_input_name in [42, ["a"]]: yield check_tf_dataset_mismatched_input_type, input_dataset, wrong_input_name yield check_tf_dataset_mismatched_input_type, (input_dataset, input_dataset), ("a", "b"), "HWC" yield check_tf_dataset_mismatched_input_type, (input_dataset), ("a", "b") yield check_tf_dataset_mismatched_input_type, (input_dataset, input_dataset), ("b")
obj.dataCol = 'b'; }); TestCase.assertEqual(obj.boolCol, false, 'wrong bool value'); TestCase.assertEqual(obj.intCol, 2, 'wrong int value'); TestCase.assertEqualWithTolerance(obj.floatCol, 2.2, 0.000001, 'wrong float value');
class Template: def __init__(self, variables): self.variables = variables self.tmpl = Apply("") def apply(self, template):
* <pre>{@code * Pipeline pipeline = Pipeline.create(); * pipeline.<String>readFrom(Sources.list(LIST_NAME)) *         .mapUsingService(JetSpringServiceFactories.bean("userDao", UserDao.class), *                 (userDao, item) -> userDao.findByName(item.toLowerCase())) *         .writeTo(Sinks.logger()); * }</pre>
if (loopIfNoConnection) { try { Thread.sleep(retryWait); } catch (InterruptedException ex) { String msg = "Interrupted waiting for DB connection"; Log.info(msg,ex); Thread.currentThread().interrupt(); throw new SQLException(msg,ex); } } } while (loopIfNoConnection);
shotContext.isShowing(); shootButton.checked = true; this.updateShot(this._activeContext, this._activeContext.shot.asJson()); if (this._activeContext.isEditing) { shootPanel.resize(400, 525); } else { shootPanel.resize(400, 250);
package org.apache.iceberg.mr.hive; import java.math.BigDecimal; import org.apache.hadoop.hive.ql.io.sarg.PredicateLeaf; import org.apache.hadoop.hive.ql.io.sarg.SearchArgument; import org.apache.hadoop.hive.ql.io.sarg.SearchArgumentFactory; import org.apache.hadoop.hive.serde2.io.HiveDecimalWritable; import org.apache.iceberg.expressions.And; import org.apache.iceberg.expressions.Expressions; import org.apache.iceberg.expressions.Not;
} class LayoutManager { setLayout(layout, save) { if (!layout || layout === 'auto') { this.autoLayout();
sel    appEnvSelector spinner progress deployer taskDeployer } func newTaskRunOpts(vars runTaskVars) (*runTaskOpts, error) {
}); mCryptoSupportSignOnly.setChecked(mAccount.getCryptoSupportSignOnly()); } else { final Preference mCryptoMenu = findPreference(PREFERENCE_CRYPTO); mCryptoMenu.setEnabled(false);
// TODO(dmo): figure out if we need to add a more specific timeout for // individual checks transport := &http.Transport{ // we're only doing 1 request, make the code around this // simpler by disabling keepalives DisableKeepAlives: true, TLSClientConfig: &tls.Config{ InsecureSkipVerify: true, },
/** * Return the current schema version for the host. * <p/> * Schema versions in Cassandra are used to ensure all the nodes agree on the current * Cassandra schema when it is modified. For more information see {@link ExecutionInfo#isSchemaInAgreement()} * * @return the node's current schema version value.
# mode: run # ticket: 5 # A small number of extra tests checking: # 1) this works correctly with pure-Python-mode decorators - methodmangling_pure.py. # 2) this works correctly with cdef classes - methodmangling_cdef.pyx class CyTest(object): """
if (!isNodeProcess) { return; } let called = false; let user = await Realm.Sync.User.login('http://127.0.0.1:9080', Realm.Sync.Credentials.nickname('admin', true));
maxedExpRetry := retry.WithMaxRetries(RETRY_MAX, expRetry) err = retry.Do(context.TODO(), maxedExpRetry, func(ctx context.Context) error { err := b.dkgContractClient.Broadcast(bcastMsg) if err != nil { b.log.Error().Err(err).Msg("error broadcasting DKG result retrying") } return retry.RetryableError(err) }) if err != nil {
} ] const router = new VueRouter({ <%_ if (historyMode) { _%> mode: 'history',
* @param spec {@link PartitionSpec} used to produce {@link DataFile} partition tuples * @param outputFile the destination file location * @return a manifest writer * @deprecated will be removed in 0.9.0; use {@link ManifestFiles#write(PartitionSpec, OutputFile)} instead. */ @Deprecated public static ManifestWriter write(PartitionSpec spec, OutputFile outputFile) { return ManifestFiles.write(spec, outputFile); }
level with shape (N, num_anchors * 4, H, W) img_metas (list[dict]): Meta information of each image, e.g., image size, scaling factor, etc. cfg (mmcv.Config | None): Test / postprocessing configuration, if None, test_cfg would be used rescale (bool): If True, return boxes in original image space.
# TODO: remove inplace=False if isinstance(instance, (Seq, MutableSeq)): instance = instance.reverse_complement(inplace=False) elif isinstance(instance, (str, SeqRecord)): instance = instance.reverse_complement() else: raise RuntimeError("instance has unexpected type %s" % type(instance)) instances.append(instance) return instances
log := logf.FromContext(ctx) log.V(logf.DebugLevel).Info("performing HTTP01 reachability check") req, err := http.NewRequestWithContext(ctx, url.String(), http.MethodGet, nil) if err != nil { return err } req.Header.Set("User-Agent", pkgutil.CertManagerUserAgent) // ACME spec says that a verifier should try // on http port 80 first, but follow any redirects may be thrown its way
} MessageAndMetadata<byte[], byte[]> kafkaMessage = mIterator.next(); Long timestamp = mKafkaMessageTimestampFactory.getKafkaMessageTimestamp().getTimestamp(kafkaMessage); Message message = new Message(kafkaMessage.topic(), kafkaMessage.partition(), kafkaMessage.offset(), kafkaMessage.key(), kafkaMessage.message(), timestamp);
{ Html = $"Error: You must have created at least one store. <a href='{(Url.Action("CreateStore", "UserStores"))}'>Create store</a>", Severity = StatusMessageModel.StatusSeverity.Error }.ToString(); return RedirectToAction(nameof(ListApps)); }
* @return a function that applies arguments to the given {@code partialFunction} and returns {@code Some(result)} *         if the function is defined for the given arguments, and {@code None} otherwise. */ @SuppressWarnings("RedundantTypeArguments") static <R> Function0<Option<R>> lift(CheckedFunction0<? extends R> partialFunction) { return () -> Try.<R>of(partialFunction::apply).getOption(); } /**
$response = $this->process($request, $response); if (!$silent) { $this->respond($response); }
# add these directories to sys.path here. If the directory is relative to the # documentation root, use os.path.abspath to make it absolute, like shown here. # import datetime import os import sys import sphinx  from sphinx.errors import VersionRequirementError curr_path = os.path.dirname(os.path.realpath(__file__)) libpath = os.path.join(curr_path, '../python-package/')
##### Distributed sampler infrastructure ##### def _create_sender(ip, port): """ Create a sender communicator via C socket Parameter:
* Filter the course completed page content when auto-creating it * through setup wizard. * * @hook  sensei_default_course_completed_page_template * @since 3.13.1 * * @param {array} $blocks Blocks array.
require.NoError(t, puller.Collect(ctx)) records := processortest.NewOutput(attribute.DefaultEncoder()) require.NoError(t, controllertest.ReadAll(puller.Reader(), export.CumulativeExportKindSelector(), records.AddInstrumentationLibraryRecord)) require.EqualValues(t, map[string]float64{ "counter.sum/A=B/": 10,
'apostrophe-images-widgets': {}, 'apostrophe-files': {}, 'apostrophe-files-widgets': {}, 'apostrophe-service-bridge': {} } };
/** * {@inheritdoc} */ public function compile(Compiler $compiler): void { $arguments = $this->getAttribute('arguments');
if server_extensions: server_extensions[0].finalize(handshake_flow.response.headers['Sec-WebSocket-Extensions']) request = Request(extensions=client_extensions, host=handshake_flow.request.host, target=handshake_flow.request.path) data = self.connections[self.server_conn].send(request) self.connections[self.client_conn].receive_data(data)
'vendor/bootstrap-accessibility.min.js', 'vendor/validator.min.js', 'vendor/form-attr-polyfill.js', // input[form] polyfill, cannot load conditionally, since we need all versions of IE 'lib/autocomplete.js', 'common.js', 'lightbox.js', ),
func TestValidForImagesCleanupExclusion(t *testing.T) { defer setTestRegion()() defer setTestEnv("ECS_EXCLUDE_UNTRACKED_IMAGE", "amazonlinux:2,amazonlinux:3")() imagesNotDelete := parseImageCleanupExclusionList("ECS_EXCLUDE_UNTRACKED_IMAGE") assert.Equal(t, []string{"amazonlinux:2", "amazonlinux:3"}, imagesNotDelete, "unexpected imageCleanupExclusionList") }
* @return {@code true} if {@code find()} implementation performs scan over all *         index, {@code false} if {@code find()} performs the fast lookup */ boolean isFindUsingFullTableScan(); /** * Find a row or a list of rows and create a cursor to iterate over the
indices[i] = chunk.Index } return indices }
return loop, nil } // NewForks creates new consensus forks manager func NewForks(final *flow.Header, headers storage.Headers, updater module.Finalizer, modules *HotstuffModules, rootHeader *flow.Header, rootQC *flow.QuorumCertificate) (hotstuff.Forks, error) { finalizer, err := newFinalizer(final, headers, updater, modules.Notifier, rootHeader, rootQC) if err != nil { return nil, fmt.Errorf("could not initialize finalizer: %w", err) }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4422-SEA 1645530270 2112560691</p> <hr> <p>Varnish cache server</p> </body>
// fix extra border part on higher resolutions if ( displayHeight > fheroes2::Display::DEFAULT_HEIGHT ) { srcrt.x = 478; srcrt.y = isEvilInterface ? 328 : 345; srcrt.width = 3; srcrt.height = isEvilInterface ? 15 : 20; dstpt.x += 14; dstpt.y += 18; fheroes2::Blit( icnadv, srcrt.x, srcrt.y, display, dstpt.x, dstpt.y, srcrt.width, srcrt.height );
('move-to-end-of-line', ['$']), ('move-to-start-of-document', ['gg']), ('move-to-end-of-document', ['G']), ('yank selection -s', ['Y']), ('yank selection', ['y'] + RETURN_KEYS), ('scroll left', ['H']), ('scroll down', ['J']),
self.assertRaises(FileNotFoundError, d.get_raw, "alpha") def test_old_check_same_thread(self): """Setting check_same_thread to False doesn't raise an exception.""" d = SeqIO.index_db("Roche/triple_sff_rel_paths.idx") def reader_thread():
mosaic_bboxes = np.concatenate(mosaic_bboxes, 0) mosaic_labels = np.concatenate(mosaic_labels, 0) # In some dataset like MOT17, the gt bboxes are allowed to cross # the border of images. Therefore, we don't need to clip the gt # bboxes in these cases. if self.bbox_clip_border: mosaic_bboxes[:, 0::2] = np.clip(mosaic_bboxes[:, 0::2], 0, 2 * self.img_scale[1])
* SPDX-License-Identifier: Apache-2.0 */ #include "backend/protobuf/query_responses/proto_transactions_page_response.hpp" #include "common/byteutils.hpp" namespace shared_model {
BlockExplorerLink = NetworkType == NetworkType.Mainnet ? "https://blockstream.info/liquid/tx/{0}" : "https://blockstream.info/testnet/liquid/tx/{0}", NBXplorerNetwork = nbxplorerNetwork, UriScheme = "liquidnetwork", CryptoImagePath = "imlegacy/lcad.png", DefaultSettings = BTCPayDefaultSettings.GetDefaultSettings(NetworkType), CoinType = NetworkType == NetworkType.Mainnet ? new KeyPath("1776'") : new KeyPath("1'"), SupportRBF = true
for ruleField, ruleValues := range rules { if strings.HasPrefix(ruleField, "+") { for _, ruleValue := range ruleValues { var replacement = repl.Replace(ruleValue) if len(replacement) > 0 { headers.Add(strings.TrimPrefix(ruleField, "+"), replacement) } } } else if strings.HasPrefix(ruleField, "-") { headers.Del(strings.TrimPrefix(ruleField, "-"))
// Currently only works on DataTypes. // Need to decide how to handle uint8_t matrices. auto& mat = data.template get<DataType>(); if (mat.Height() != mat.LDim()) { LBANN_ERROR("Scaling non-contiguous matrix not supported."); } // Don't use El::Scale because it spawns OpenMP threads. DataType* __restrict__ buf = mat.Buffer(); const El::Int size = mat.Height() * mat.Width();
public static readonly Regex TimeZoneEndRegex = new Regex("time$|timezone$", RegexOptions.Singleline); // Compute UTC offset in minutes from matched timezone offset in text. e.g. "-4:30" -> -270; "+8"-> 480. public static int ComputeMinutes(string utcOffset) { if (utcOffset.Length == 0) { return Constants.InvalidOffsetValue; } utcOffset = utcOffset.Trim();  int sign = Constants.PositiveSign; // later than utc, default value if (utcOffset.StartsWith("+") || utcOffset.StartsWith("-") || utcOffset.StartsWith("±")) {
if (wasDST(cal)) { LoopPlugin loopPlugin = LoopPlugin.getPlugin(); if (!loopPlugin.isSuspended()) { warnUser(Notification.DST_LOOP_DISABLED, MainApp.gs(R.string.dst_loop_disabled_warning)); } else { log.debug("Loop already suspended");
BeginWithCtxAndOpts(ctx context.Context, opts *sql.TxOptions) (TxOrmer, error) //closure control transaction DoTx(task func(txOrm TxOrmer) error) error DoTxWithCtx(ctx context.Context, task func(txOrm TxOrmer) error) error DoTxWithOpts(opts *sql.TxOptions, task func(txOrm TxOrmer) error) error DoTxWithCtxAndOpts(ctx context.Context, opts *sql.TxOptions, task func(txOrm TxOrmer) error) error } type TxCommitter interface {
oss_fuzz_project.ccs = ccs oss_fuzz_project.put() else: if language in MEMORY_SAFE_LANGUAGES: cpu_weight = OSS_FUZZ_MEMORY_SAFE_LANGUAGE_PROJECT_WEIGHT else: cpu_weight = OSS_FUZZ_DEFAULT_PROJECT_CPU_WEIGHT data_types.OssFuzzProject( id=project,
// ErrorCode implements driver.ErrorCode. func (*watcher) ErrorCode(err error) gcerrors.ErrorCode { // err might have come from blob, in which case use its code. return gcerrors.Code(err) }
def with_mask(self): return hasattr(self, 'mask_head') and self.mask_head is not None @abstractmethod def extract_feat(self, imgs): pass
* Add CSS classes for block alignment to the incoming attributes array. * This will be applied to the block markup in the front-end. * * @access private * * @param WP_Block_Type $block_type       Block Type. * @param array         $block_attributes Block attributes. *
return nil } // generateStruct generates a python representation of a thrift struct func (g *Generator) generateStruct(s *parser.Struct) string { contents := ""
total_size += (sizeof(s2n_preferred_hashes) * num_signature_algs * 2) + 6; } struct s2n_blob *client_app_protocols; GUARD(s2n_connection_get_protocol_preferences(conn, &client_app_protocols)); uint16_t application_protocols_len = client_app_protocols->size; uint16_t server_name_len = strlen(conn->server_name); uint16_t mfl_code_len = sizeof(conn->config->mfl_code);
// The maximum length of a glyph's name is 31 chars. #define MAXGLYPHNAME_LEN 31 unsigned int selectmax = fvmv_selectmax < 0 ? fv->b.sf->glyphcnt : fvmv_selectmax; char *buf = malloc(selectmax * MAXGLYPHNAME_LEN); char *pt; char titlebuf[50+strlen(fv->b.sf->fontname)+1]; GTextInfo label; int i,j,cnt;
sc: trace.SpanContext{ TraceID:    traceID, SpanID:     spanID, TraceFlags: trace.FlagsUnset, }, b3: trace.B3{SingleHeader: true}, expected: &Supplier{
const op = "authtoken.newAuthTokenId" id, err := db.NewPublicId(AuthTokenPrefix) if err != nil { return "", errors.Wrap(err, op) } return id, nil } // newAuthToken generates a token with a version prefix.
for i in range(num_samples): grads0 = tf.constant(db_grad[i]) cg_opt.apply_gradients(zip([grads0], [var0])) np.testing.assert_allclose( np.array(db_out[i]), var0.numpy(), rtol=1e-06, atol=1e-06 ) @pytest.mark.usefixtures("maybe_run_functions_eagerly")
require 'aws-sdk-secretsmanager' # Gets all secrets in us-west-2 # Replace us-west-2 with the AWS Region you're using for Amazon Secrets Manager. sm = Aws::SecretsManager::Client.new(region: 'us-west-2') resp = sm.list_secrets
/* if options.uniqueTitle is true, a unique title for the duplicated file will be assigned. */ const ensureUniqueTitle = options && options.ensureUniqueTitle; for(const noteId of noteIds){ const noteOptions = {}; //If ensureUniqueTitle is truthy, set the original note's name as root for the unique title. if(ensureUniqueTitle){ const originalNote = await Note.load(noteId); noteOptions.uniqueTitle = originalNote.title; }
from plenum.common.constants import STEWARD_STRING from plenum.common.exceptions import RequestNackedException from plenum.common.util import randomString from plenum.test.helper import sdk_multi_sign_request_objects, \ sdk_json_to_request_object, sdk_send_signed_requests, sdk_get_and_check_replies from plenum.test.pool_transactions.helper import prepare_nym_request def test_txn_with_different_signature_and_idr( looper, txnPoolNodeSet, sdk_pool_handle, sdk_wallet_trustee, sdk_wallet_client): # filling nym request and getting steward did nym_request, new_did = looper.loop.run_until_complete(
return offers; } @Override public List<Offer> peakOffers() { List<Offer> offers = new ArrayList<>((int) offerCache.size()); for (CachedOffer cachedOffer : offerCache.asMap().values()) { offers.add(cachedOffer.offer); } return offers; }  @Override public void returnOffer(OfferID offerId) { synchronized (offerCache) {
_bboxes = bbox_mapping(det_bboxes[:, :4], img_shape, scale_factor, flip) mask_rois = bbox2roi([_bboxes]) mask_feats = self.mask_roi_extractor[-1]( x[:len(mask_roi_extractor.featmap_strides)], mask_rois) for i in range(self.num_stages): mask_roi_extractor = self.mask_roi_extractor[i]
return ( <Dialog title={intl.formatMessage(messages.dialogTitle)} subtitle={walletName} actions={showActions ? actions : []} closeOnOverlayClick={false} onClose={onClose}
$url = $path; } return $url; }
lastClientSendTime = NetworkTime.localTime; if (cachedSnapshotComparison) { hasSentUnchangedPosition = true; }
uint64_t>; using PermissionTuple = boost::tuple<int>; const auto &pagination_info = q.paginationMeta(); auto first_hash = pagination_info.firstTxHash(); // retrieve one extra transaction to populate next_hash auto query_size = pagination_info.pageSize() + 1u;
'--firebase-api-key', type=str, required=True, help='Firebase web API key (for authentication).') parser_create_config.add_argument( '--oauth-client-secrets-path', type=str,
// Go to the redirect if any if ( $this->input->post('redirect') ) { redirect(str_replace('://', '', $this->input->post('redirect'))); } else {
var peers []*peer for _, peer := range ps.peers { if peer.knownStatus < height { peers = append(peers, peer) } }
} } protected SingularityDeleteResult delete(String path) { final long start = System.currentTimeMillis();
can handle negative edge weights. If a negative cycle is detected, you can use :func:`find_negative_cycle` to return the cycle and examine it. Shortest paths are not defined when a negative cycle exists because once reached, the path can cycle forever to build up arbitrarily low weights.
{ return new LightboxResult($this->locator, $filePathOrImage, $url, $sizeConfiguration, $groupIdentifier, $resizeOptions); } }
return None revision_pattern = revision_pattern_from_build_bucket_path(bucket_path) for build_url in build_url_list: match = re.match(revision_pattern, build_url) if not match: continue current_revision = convert_revision_to_integer(match.group(1)) if current_revision == revision: return build_url return None
private readonly struct ComparableComparerStruct : IComparer<T> { public int Compare(T x, T y) => x.CompareTo(y); } }
return onnx_outputs def convert_list(outputs): """Convert the torch forward outputs containing tuple or list to a list only containing torch.Tensor.
} } else { // rename only main file to main.ts const tsFile = api.entryFile.replace(jsRE, '.ts') let content = files[api.entryFile] if (tsLint) { content = convertLintFlags(content) } files[tsFile] = content delete files[api.entryFile] }
Git::SyncTrack.(track) assert track.concepts.where(uuid: 'd0fe01c7-d94b-4d6b-92a7-a0055c5704a3').exists? end test "concept exercises use track concepts for taught concepts" do
} /** * Returns the bootstrapped {@code JetInstance}. The instance will be * automatically shut down once the {@code main()} method of the JAR returns. */ public static JetInstance getInstance() { return SUPPLIER.get().instance;
url:                 "https://foo/file1.html", expectedStatus:      http.StatusOK, expectedBodyContent: testFiles["file1.html"], expectedEtag:        `W/"1e240-13"`, }, // Test 3 - access folder with index file with trailing slash { url:                 "https://foo/dirwithindex/", expectedStatus:      http.StatusOK, expectedBodyContent: testFiles[filepath.Join("dirwithindex", "index.html")], expectedEtag:        `W/"1e240-20"`, }, // Test 4 - access folder with index file without trailing slash {
return nodeWhitelist.remove(node); } public boolean contains(final Peer node) { return (!nodeWhitelistSet || (nodeWhitelistSet && nodeWhitelist.contains(node))); } }
public function buildFields() { $this->addField('title', 'Title', false, 'KunstmaanMenuBundle:AdminList:menu-item-title.html.twig'); $this->addField('online', 'Online', false, 'KunstmaanMenuBundle:AdminList:menu-item-online.html.twig'); $this->addField('type', 'Type', false); $this->addField('url', 'Url', false, 'KunstmaanMenuBundle:AdminList:menu-item-url.html.twig'); $this->addField('newWindow', 'New window', false);
func TestValidateBlockHeader(t *testing.T) { // add (hash, seed) --> (tensority hash) to the  tensority cache for avoid // real matrix calculate cost. tensority.AIHash.AddCache(&bc.Hash{V0: 0}, &bc.Hash{}, testutil.MaxHash) tensority.AIHash.AddCache(&bc.Hash{V0: 1}, &bc.Hash{}, testutil.MinHash) cases := []struct { block  *bc.Block
return !oldReference.equals(reference); } public boolean isBranch() { return reference instanceof Branch; }
Text::Text( const Text & t ) { assert( t.message != nullptr ); message = new TextAscii( dynamic_cast<TextAscii &>( *t.message ) ); gw = t.gw; gh = t.gh;
return resp, err } func (c RetryingChunkStoreServiceClient) ListTableFiles(ctx context.Context, in *remotesapi.ListTableFilesRequest, opts ...grpc.CallOption) (*remotesapi.ListTableFilesResponse, error) { var resp *remotesapi.ListTableFilesResponse op := func() error { var err error resp, err = c.client.ListTableFiles(ctx, in, opts...) return processGrpcErr(err) }
orig     *CloudAuditLogsSource expected *CloudAuditLogsSource }{ "missing defaults, except cluster name annotations": { orig: &CloudAuditLogsSource{ ObjectMeta: metav1.ObjectMeta{ Annotations: map[string]string{
threshold: 0 }) ); } if (env.NODE_ENV === 'production') {
pipeline.readFrom(TestSources.items(1, 2)) .map(Value::new) .writeTo(Sinks.observable(OBSERVABLE_NAME)); // When Observable<Value> observable = client().getObservable(OBSERVABLE_NAME);
dist.broadcast(module.running_mean, 0) def after_train_epoch(self, runner): if not self.by_epoch or not self.evaluation_flag(runner): return if self.broadcast_bn_buffer: self._broadcast_bn_buffer(runner)  from mmdet.apis import multi_gpu_test tmpdir = self.tmpdir if tmpdir is None:
/// </summary> public static double Sqrt(this double numericProperty) { throw QueryOver.GetDirectUsageException(); } /// <summary>
ps.metrics.HandlerReplication.Inc() ctxd, canceld := context.WithTimeout(context.Background(), timeToWaitForPushsyncToNeighbor) defer canceld()  span, _, ctxd := ps.tracer.StartSpanFromContext(ctxd, "pushsync-replication-storage", ps.logger, opentracing.Tag{Key: "address", Value: chunkAddress.String()}) defer span.Finish() realClosestPeer, err := ps.topologyDriver.ClosestPeer(chunk.Address(), false)
# ++++++++++++++++++++++++++++++++++++++++++ course.add_section do |section| section.title = 'Asynchronous JavaScript and APIs' section.description = 'This section explores asynchronous JavaScript and event loops, and how it\'s useful in fetching data from web servers using APIs.' section.identifier_uuid = '46153ba3-d10b-4566-924f-b3fa549a05bc' section.add_lessons(
entry("property1", "sampleValueForProperty1"), entry("property2", "sampleValueForProperty2") ) .doesNotContainKey("property3"); } @Test
func init() { StopChan = make(chan bool) go SendMessageToController(StopChan) } func SendMessageToController(stop chan bool) { ResultChannel = make(chan ExecResult, 1024) for { select {
{ memcpy(original_change_cit->getChange()->serializedPayload.data + original_offset, incoming_change->serializedPayload.data + incoming_offset, original_change_cit->getChange()->serializedPayload.length - original_offset); } original_change_cit->getChange()->getDataFragments()->at(count) = ChangeFragmentStatus_t::PRESENT;
/* json parser */ fuzz_config = flb_config_init(); fuzz_parser = flb_parser_create("fuzzer", "json", NULL, NULL, NULL, NULL, MK_FALSE, NULL, 0, NULL, fuzz_config); flb_parser_do(fuzz_parser, (char*)data, size, &out_buf, &out_size, &out_time);
Update:  linkUpd, }) case routeUpd := <-routeInC: logrus.WithField("route", routeUpd).Debug("Route update") if routeUpd.Route.Type&unix.RTN_LOCAL == 0 { logrus.WithField("route", routeUpd).Debug("Ignoring non-local route.") continue
// If the HighlyAvailableService is not initialized or it's not the active service, throw an exception // to prevent processing of the servlet. if (null == Monitor.HA_SERVICE_INSTANCE || !Monitor.HA_SERVICE_INSTANCE.isActiveService()) { throw new IOException(STANDBY_MONITOR_MESSAGE, new NotActiveServiceException()); } }
// Only remove per request handler if the channel is registered // or open since DefaultChannelPipeline would remove handlers if // channel is closed and unregistered if (channel.isOpen() || channel.isRegistered()) { removeIfExists(channel.pipeline(), HttpStreamsClientHandler.class,
def self.latest_semver_aliases(major_full) {}.tap do |aliases| major_full.each do |major, full| fullparts = full.split('.') aliases.merge!( major => full,
} //sign signReq := &ca.SignCsrRequest{Csr: csr, Ttl: entry.Ttl} res, err := s.serverCA.SignCsr(signReq) if err != nil { s.l.Error(err)
* necessary so that such topics can't clash with regular topics used * for other purposes. */ private static final String JET_OBSERVABLE_NAME_PREFIX = INTERNAL_JET_OBJECTS_PREFIX + "observables."; private ObservableUtil() { }
func (ai *AttendedInstaller) initializeUI() (err error) { ai.keyboard, err = speakuputils.CreateVirtualKeyboard() if err != nil { // Non-fatal - results in a slightlydegraded experience due to the lack of a // text-to-speech buffer clear between views, but not bad enough to exit outright logger.Log.Warnf("Failed to initialize virtual keyboard via uinput") err = nil }  const osReleaseFile = "/etc/os-release" ai.backdropStyle = tview.Theme{
// If inadequate bytes left or if the segment is readonly if (bytesLeftInBuffer == 0 || bytesLeftInBuffer < count || segment.ReadOnly) { BufferSegment nextSegment; lock (_sync) { nextSegment = CreateSegmentUnsynchronized(); }  nextSegment.SetMemory(_pool.Rent(count)); segment.SetNext(nextSegment);
ch->writerGUID = c_Guid_Unknown; ch->serializedPayload.length = 0; ch->serializedPayload.pos = 0; memset(ch->instanceHandle.value, 0, 16); ch->isRead = 0; ch->sourceTimestamp.seconds(0); ch->sourceTimestamp.fraction(0);
and_(SuppressBug.run_id == action.run_id, SuppressBug.hash == bug_hash, SuppressBug.type == bug_hash_type, SuppressBug.file_name == u''))) \ .first() if supp:
id=record_id, description=record_id, annotations={ "model": model.id, "chain": chain.id, "start": int(rnumbers[0]),
} } finally { synchronized (this) { if (writesInProgress < 1) throw new IllegalStateException("writesInProgress < 1 " + writesInProgress);  writesInProgress--; if (writesInProgress == 0) this.notifyAll();
class HmmStudent include Mongoid::Document belongs_to :school, class_name: 'HmmSchool' field :name, type: String
var groupLock sync.Mutex // DiskRepo provides a local filesystem implementation of the Repo interface type DiskRepo struct { cfg *config.Config log olog.Logger } // NewDiskRepo creates a new disk repo func NewDiskRepo(cfg *config.Config, log olog.Logger) DiskRepo { paths := []string{ filepath.Join(cfg.Repo.Disk.Path, accountsFolder),
log.info(`========== Daedalus is starting at ${new Date()} ==========`); log.info(`!!! ${environment.getBuildLabel()} is running on ${os.platform()} version ${os.release()} with CPU: ${JSON.stringify(os.cpus(), null, 2)} with ${JSON.stringify(os.totalmem(), null, 2)} total RAM !!!`);
roles[j].RoleName === options.name) { if (found) { // found duplicates return cmdCallback(new Error('VM name is not unique')); } found = options.rsps[i];
// verify that yac gate emit expected block auto gate_wrapper = make_test_subscriber<CallExact>(gate->onOutcome(), 1); gate_wrapper.subscribe([actual_hash, actual_pubkey](auto outcome) { auto concrete_outcome = boost::get<iroha::consensus::VoteOther>(outcome); auto public_keys = concrete_outcome.public_keys; auto hash = concrete_outcome.hash; ASSERT_EQ(1, public_keys.size()); ASSERT_EQ(actual_pubkey, public_keys.front());
Use:   "init", Short: "Creates a new environment in your application.", Example: ` Creates a test environment using your "default" AWS profile and default configuration. /code $ copilot env init --name test --profile default --default-config Creates a prod-iad environment using your "prod-admin" AWS profile and enables container insights. /code $ copilot env init --name prod-iad --profile prod-admin --container-insights Creates an environment with imported VPC resources.
if (syncxfer && (!badfp.isvalid || !(badfp == fingerprint))) { badfp = fingerprint; fa.reset(); chunkmacs.clear(); client->fsaccess->unlinklocal(&localfilename); return failed(API_EWRITE); } else
intl: intlShape.isRequired, }; render() { const { intl } = this.context; const { adaValue, percentage } = this.props;
def send_notifications(method, bucket_name, object_path, version_id): for bucket, notifs in S3_NOTIFICATIONS.items(): if normalize_bucket_name(bucket) == normalize_bucket_name(bucket_name): action = {'PUT': 'ObjectCreated', 'POST': 'ObjectCreated', 'DELETE': 'ObjectRemoved'}[method] # TODO: support more detailed methods, e.g., DeleteMarkerCreated # http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html
response = self.client.get(creation_url) self.assertEqual(response.status_code, 200) expected_re = b'^<html>.+<title>Events</title>.+Something happened.+<td>\\[&#39;foo&#39;, &#39;bar&#39;\\]</td>.+</html>$' self.assertRegexpMatches(response.content, re.compile(expected_re, re.DOTALL)) def test_tag_as_str(self):
Column column = table.getColumn(columnName); columnsToRemove.add(column); } while (readIf(",")); if (openingBracketDetected) { read(")"); // For Oracle compatibility - close bracket } command.setTableName(tableName); command.setIfTableExists(ifTableExists); command.setColumnsToRemove(columnsToRemove);
url      string } func NewDefault(authType AuthType) AuthenticationCheck { return &DefaultAuthenticationCheck{ authType: authType, client:   http.DefaultClient,
if (success) { var pr = parser.Parse(ers[0], refDate); ret.Timex = pr.TimexStr; ret.FutureValue = ret.PastValue = "Set: " + ret.Timex;
} } else { $result_type = Type::combineUnionTypes( $always_positive ? Type::getPositiveInt(true) : Type::getInt(true), $result_type ); }
return "(" + _1 + ", " + _2 + ")"; } public static <T1, T2> Tuple2<List<? extends T1>, List<? extends T2>> sequence(Iterable<Tuple2<? extends T1, ? extends T2>> tuples) { Objects.requireNonNull(tuples, "tuples is null"); return new Tuple2<>(Iterator.ofAll(tuples).map(Tuple2::_1).toList(), Iterator.ofAll(tuples).map(Tuple2::_2).toList()); } } No newline at end of file
return sortOrder; } public static (Core.Models.SearchParameterInfo, SortOrder) GetFirstSupportedSortParam(this SearchOptions searchOptions) { EnsureArg.IsNotNull(searchOptions, nameof(searchOptions));
@pytest.mark.parametrize("dtype", _DTYPES) @pytest.mark.parametrize("shape", [(4, 4,), (4, 4, 1), (4, 4, 3), (5, 4, 4, 3)]) def test_equalize_dtype_shape(dtype, shape): image = np.ones(shape=shape, dtype=dtype) equalized = color_ops.equalize(tf.constant(image)).numpy()
* @param arr array to shuffle * @returns new array with elements shuffled from a given array */ template <typename T, size_t N> std::array <T, N> shuffle (std::array <T, N> arr) { for (int i = 0; i < N; i ++) { // Swaps i'th  index with random index (less than array size) std::swap(arr[i], arr[std::rand() % N]); }
if (wasStored || store.getAutoCommitDelay() == 0) { store.tryCommit(); } else { if (isUndoEmpty()) { // to avoid having to store the transaction log, // if there is no open transaction, // and if there have been many changes, store them now
location: location }; try { if (options.slot) { client.sites.createOrUpdateSiteSlot(resourceGroup, name, siteEnvelope, options.slot, _); log.info('Webapp slot ' + name + '/' + options.slot + ' has been created '); } else {
{ case NEW_PUBLIC: case NEW_NODE: snk.add(nn[i].nodekey, nn[i].nodehandle, tn, 0); break; case NEW_UPLOAD: snk.add(nn[i].nodekey, nn[i].nodehandle, tn, 0, nn[i].uploadtoken, (int)sizeof nn->uploadtoken); break; } }
private long batchCount = 0; private long readaheadThreshold; private ScannerImpl.Reporter reporter; private static ThreadPoolExecutor readaheadPool = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 3L, TimeUnit.SECONDS, new SynchronousQueue<>(),
} } return $this->assertCallableAndBindClosureToContainer($resolved, $toResolve); } /**
*/ @XmlJavaTypeAdapter(JaxbAbstractIdSerializer.class) public static class ID extends AbstractId { private static final long serialVersionUID = 7399913185860577809L; static final Cache<String,ID> cache = CacheBuilder.newBuilder().weakValues().build(); public static final ID METADATA = of("!0");
return ( <div> <Button color="primary" onClick={toggleDrawer('left', true)}> <FilterList /> </Button> <SwipeableDrawer
baseSpiffeIDPrefix := fmt.Sprintf("%s/spire/agent", h.c.TrustDomain.String()) sourceAddress := "unknown" if peerAddress, ok := getPeerAddress(ctx); ok { sourceAddress = peerAddress.String() }  signLog := h.c.Log.WithFields(logrus.Fields{ "caller_id":      callerID, "spiffe_id":      spiffeID, "source_address": sourceAddress, }) if spiffeID == callerID && strings.HasPrefix(callerID, baseSpiffeIDPrefix) {
super().__init__(database_manager) self.write_req_validator = write_req_validator def authorize(self, request): self.write_req_validator.validate(request, [AuthActionEdit(txn_type=LEDGERS_FREEZE,
* @author Remy Perona */ public function update_cache_file() { rocket_clean_domain(); $this->create_cache_file( true ); } /**
} $workspaces = $this->collectWorkspaceAndAllBaseWorkspaces($workspace); $nodes = $this->findRawNodesByPath($path, $workspace, $dimensions); $dimensions = $dimensions === null ? [] : $dimensions; $foundNodes = $this->reduceNodeVariantsByWorkspacesAndDimensions($nodes, $workspaces, $dimensions); $foundNodes = $this->filterNodeDataByBestMatchInContext($foundNodes, $workspace, $dimensions);
tabletMutator.putLocation(assignment.server, LocationType.LAST); tabletMutator.deleteLocation(assignment.server, LocationType.FUTURE); // remove the old location if (prevLastLoc != null && !prevLastLoc.equals(assignment.server)) { tabletMutator.deleteLocation(prevLastLoc, LocationType.LAST); }
} function addImgOptMiddleware(app, config) { const { cacheExpires, cacheDebug, origin } = config; if (origin === 'backend') { debug( `image origin set to "backend", not mounting onboard image optimization middleware` ); return; } debug(`mounting onboard image optimization middleware "hastily"`); let cacheMiddleware;
sb.append("]"); } private static String[] asciiReadableEncodingKoreCalc() { String[] koreEncoder = Arrays.copyOf(StringUtil.asciiReadableEncodingDefault, StringUtil.asciiReadableEncodingDefault.length); koreEncoder[0x2d] = "-"; koreEncoder[0x3c] = "-LT-"; koreEncoder[0x3e] = "-GT-";
package org.apache.rocketmq.common.protocol.body; import org.apache.rocketmq.remoting.protocol.RemotingSerializable; import org.junit.Test;
$order = "desc"; } $query = $db->simple_select("spamlog", "COUNT(sid) AS count", $where); $rescount = $db->fetch_field($query, "count"); // Figure out if we need to display multiple pages.
} // onSyncResponse processes a synchronization response. func (e *Engine) onSyncResponse(originID flow.Identifier, res *messages.SyncResponse) error { final := e.finalSnapshot().head e.core.HandleHeight(final, res.Height) return nil } // onRangeRequest processes a request for a range of blocks by height.
'locale/*/LC_MESSAGES/electrum.mo', ] }, scripts=['electrum'], data_files=data_files, description="Lightweight Bitcoin Wallet", author="Thomas Voegtlin",
Encoding = Encoding.UTF8; Language = "en-us"; Type = "private"; AddCategoryMapping(1, TorznabCatType.TVAnime, "Anime Series"); AddCategoryMapping(2, TorznabCatType.TVAnime, "OVA"); AddCategoryMapping(3, TorznabCatType.AudioOther, "Soundtrack");
export type ClockOffset = { quantity: number, unit: 'microsecond', }; export type SlotLength = {
clusterObj.setHealthChecker(new AbstractHealthChecker.None()); serviceManager.createServiceIfAbsent(Constants.DEFAULT_NAMESPACE_ID, serviceName, false, clusterObj); String[] ipArray = addressServerManager.splitIps(ips); String checkResult = IPUtil.checkIPs(ipArray); if (IPUtil.checkOK(checkResult)) { List<Instance> instanceList = addressServerGeneratorManager .generateInstancesByIps(serviceName, rawProductName, clusterName, ipArray); for (Instance instance : instanceList) {
}, }, DB: &db.Config{ Type:       "badgerv2", DataSource: dbPath, }, }
"context" "crypto" "crypto/x509" "errors" "sync" "github.com/spiffe/spire/proto/spire/server/datastore"
{ var pipe = new Pipe(_pool); produce(reader, pipe); return pipe; }
$post_type_object = get_post_type_object( 'lesson' ); // phpcs:ignore WordPress.Security.NonceVerification.Recommended $lesson_id = isset( $_GET['post'] ) ? intval( $_GET['post'] ) : 0; // WP query is not ready yet. $course_id = Sensei()->lesson->get_course_id( $lesson_id );  // Notice that for new Lessons, the `lesson_id` will return `0` (post query string not set). // It means the following check will return `false`. It's expected and works well because // new lessons don't have associated courses yet. $sensei_theme_enabled = Sensei_Course_Theme_Option::instance()->has_sensei_theme_enabled( $course_id ); if ( $sensei_theme_enabled ) {
elif tag == "//": if len(record.sequence) != scount: raise ValueError( "The number of sequences specified in the record " "(%d) does not agree with the number of sequences found (%d)" % (scount, len(record.sequence)) ) return record
} latestState := connection.NotConnected return di.EventBus.Subscribe(connection.StateEventTopic, func(e connection.StateEvent) { // Here we care only about connected and disconnected events. if e.State != connection.Connected && e.State != connection.NotConnected { return }  isDisconnected := latestState == connection.Connected && e.State == connection.NotConnected isConnected := latestState == connection.NotConnected && e.State == connection.Connected if isDisconnected || isConnected {
if 'pinned' in histentry: new_tab.data.pinned = histentry['pinned'] if (config.val.session.lazy_restore and histentry.get('active', False) and not histentry['url'].startswith('qute://back')): # remove "active" mark and insert back page marked as active lazy_index = i + 1 lazy_load.append({ 'title': histentry['title'], 'url': 'qute://back#' + histentry['title'], 'active': True
RSpec.describe "Level 1" do describe "Level 2" do describe "Level 3" do inner_metadata = example("Level 4").metadata end end end expect(inner_metadata[:description]).to eq("Level 4") expect(inner_metadata[:example_group][:description]).to eq("Level 3") expect(inner_metadata[:example_group][:example_group][:description]).to eq("Level 2") expect(inner_metadata[:example_group][:example_group][:example_group][:description]).to eq("Level 1")
void Initialize(); void Startup(); void Reset(); }
self.assertAlmostEqual(evals_result['valid_0']['binary_logloss'][-1], ret, places=5) params['feature_fraction'] = 0.5 gbm2 = lgb.train(params, lgb_train, num_boost_round=25) ret2 = log_loss(y_test, gbm2.predict(X_test)) self.assertNotEqual(ret, ret2)
requestedAppenders[AggregateNodeAppenderName] = true case DeadNodeAppenderName: requestedAppenders[DeadNodeAppenderName] = true case HealthConfigAppenderName: requestedAppenders[HealthConfigAppenderName] = true case IdleNodeAppenderName:
bottomSheetBehavior.setBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() { @Override public void onStateChanged(View bottomSheet, int unusedNewState) { prepareViewsForSheetPosition(); }
#include <model/Schedule.hpp> #include <model/Schedule_Impl.hpp> #include <utilities/idd/IddFactory.hxx> #include <utilities/idd/OS_Fan_ZoneExhaust_FieldEnums.hxx>
* render into */ export function render(vnode, parentDom) { if (options.root) options.root(vnode, parentDom); let oldVNode = parentDom._prevVNode; vnode = createElement(Fragment, null, [vnode]); let mounts = [];
$md5 = substr(md5($folders[$f]), 0, 8); $content = scan($folders[$f]); $currentFolder = StringUtil::stripRootDir($folders[$f]); $objFolder = $this->blnIsDbAssisted ? FilesModel::findByPath($currentFolder) : null; $session['filetree'][$md5] = is_numeric($session['filetree'][$md5]) ? $session['filetree'][$md5] : 0; $currentEncoded = $this->urlEncode($currentFolder); $countFiles = \count($content);
const cli = path.join(__dirname, '../../bin/vue-build') let originalCwd = process.cwd() function setup () { process.chdir(path.join(__dirname, 'mock-vue-app')) } function teardown (done) { rm('dist') process.chdir(originalCwd) done()
hypre_bndry.reset(new MLMGBndry(ba, dm, ncomp, geom)); hypre_bndry->setHomogValues(); const Real* dx = linop.m_geom[0][0].CellSize(); int crse_ratio = linop.m_coarse_data_crse_ratio > 0 ? linop.m_coarse_data_crse_ratio : 1; RealVect bclocation(AMREX_D_DECL(0.5*dx[0]*crse_ratio, 0.5*dx[1]*crse_ratio,
HifPackage *pkg = k; /* Set noscripts since we already validated them above */ if (!add_to_transaction (rpmdb_ts, pkg, tmp_metadata_dfd, TRUE, NULL, cancellable, error)) goto out; }
std::shared_ptr<network::BlockLoader> blockLoader) : validator_(std::move(validator)), mutableFactory_(std::move(mutableFactory)), blockLoader_(std::move(blockLoader)) { log_ = logger::log("synchronizer"); consensus_gate->on_commit().subscribe( subscription_,
# See the License for the specific language governing permissions and # limitations under the License. """Mailjet email connector module.""" # The pre-commit linter will complain about useless disable of no-member, but # this is needed because quiet the Sendgrid no-member error on Travis.
matches, err := globber.glob(rootPath, include, excludes, includeHidden, includeSymlinks) if err != nil { panic(fmt.Errorf("error globbing files with %v: %v", include, err)) } // Remove the root path from the returned files and add them to the output for _, filename := range matches {
} validateIdentityLinkArguments(identityId, type);  IdentityLink link = getIdentityLink(identityId, type, caseInstance.getId());  if (restApiInterceptor != null) { restApiInterceptor.deleteCaseInstanceIdentityLink(caseInstance, link); } runtimeService.deleteUserIdentityLink(caseInstance.getId(), identityId, type); response.setStatus(HttpStatus.NO_CONTENT.value());
aligner.score("AAA", "AA&") def test_aligner_array_errors(self): aligner = Align.PairwiseAligner() self.assertEqual(aligner.alphabet, "ABCDEFGHIJKLMNOPQRSTUVWXYZ") s1 = "GGG"
@ParameterizedTest @MethodSource("org.kie.kogito.codegen.api.utils.KogitoContextTestUtils#contextBuilders") public void givenADMNModelWhenMonitoringIsActiveThenGrafanaDashboardsAreGenerated(KogitoBuildContext.Builder contextBuilder) throws Exception { DecisionCodegen decisionCodeGenerator = getDecisionCodegen("src/test/resources/decision/models/vacationDays", AddonsConfig.builder().withMonitoring(true).withPrometheusMonitoring(true).build(), contextBuilder); List<GeneratedFile> dashboards = generateTestDashboards(contextBuilder, decisionCodeGenerator);  if (contextBuilder.build().hasRESTForGenerator(decisionCodeGenerator)) { JGrafana vacationOperationalDashboard = JGrafana.parse(new String(dashboards.stream().filter(x -> x.relativePath().contains("operational-dashboard-Vacations.json")).findFirst().get().contents()));
deque wrapper implementing the Queue interface. """ def put(self, obj, block=None, timeout=None): del block, timeout return self.append(obj) def get(self, block=None, timeout=None): del block, timeout return self.pop()
} func initEndpoints(pluginCatalog *helpers.PluginCatalog) error { //plugins nodeAttestor := pluginCatalog.GetPluginsByType("NodeAttestor")[0] level.Info(logger).Log("pluginType", reflect.TypeOf(nodeAttestor))
tasks = [TaskRole('test', 'cd scikit-learn/benchmarks && python bench_mnist.py', memoryMB=4096)] class TestPaiTask(unittest.TestCase): @responses.activate
<div className="column-center full-height inverse-color-scheme"> <div className="large-icon-message-container"> <div className="large-icon check" /> <div className="large-icon-message-string">All of your Firefox Screenshots data has been erased. </div> </div> </div>
if (interfaceType.IsGenericType && interfaceType.GetGenericTypeDefinition() == typeof(ITableValuedParameterRowGenerator<,>)) { serviceCollection.Add(type).Singleton().AsSelf().AsService(interfaceType); } } }
public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); configureForOrientation(newConfig); } public float convertDpToPixel(float dp) {
'--theme-transactions-list-border-color': '1e1f31', '--theme-transactions-list-group-date-color': '#ffffff', '--theme-transactions-list-item-details-color': '#ffffff', '--theme-transactions-list-item-highlight-color': '#eb4a22', '--theme-transactions-search-background-color': '#121326', '--theme-transactions-state-ok-background-color': '#2cbb69', '--theme-transactions-state-pending-background-color':
"""Return a filter to be used to select entities with translations with warnings. This filter will return an entity if at least one of its plural forms has an approved or fuzzy translation with a warning. :arg Locale locale: a Locale object to get translations for
return tasks_host.do_corpus_pruning(context, last_execution_failed, revision) if not build_manager.setup_build(revision=revision): raise CorpusPruningException('Failed to setup build.') build_directory = environment.get_value('BUILD_DIR') start_time = datetime.datetime.utcnow() runner = Runner(build_directory, context) pruner = CorpusPruner(runner)
idfObject.setName(*s); } idfObject.setString(EnergyManagementSystem_MeteredOutputVariableFields::EMSVariableName, modelObject.emsVariableName()); idfObject.setString(EnergyManagementSystem_MeteredOutputVariableFields::UpdateFrequency, modelObject.updateFrequency()); s = modelObject.emsProgramOrSubroutineName(); if (s.is_initialized()) { idfObject.setString(EnergyManagementSystem_MeteredOutputVariableFields::EMSProgramorSubroutineName, s.get()); }
} `command:"export" subcommands-optional:"true" description:"Exports a set of targets and files from the repo."` Format struct { Quiet bool `long:"quiet" short:"q" description:"Don't print corrections to stdout, simply exit with a code indicating success / failure (for linting etc)."` Write bool `long:"write" short:"w" description:"Rewrite files after update"` Args  struct { Files cli.Filepaths `positional-arg-name:"files" description:"BUILD files to reformat"`
self.string = string self.expr = expr def analyse_types(self, env): return self # nothing needs doing def analyse_as_type(self, env): # for compatibility when used as a return_type_node, have this interface too
}, 'Introduction' => { title: 'Introduction to Flexbox', description: "Let's get started with Flexbox", is_project: false, url: '/foundations/html_css/flexbox/flexbox-intro.md', identifier_uuid: '41a157af-b416-4744-bac0-ab5dabde1ad9',
LOGGER = logger.get_logger(__name__) class CaiDataModel(base_data_model.BaseDataModel): """Cloud Asset Inventory (CAI) Data Model."""
int s2n_stuffer_writev_bytes(struct s2n_stuffer *stuffer, const struct iovec* iov, int iov_count, size_t offs, size_t size) { void *ptr = s2n_stuffer_raw_write(stuffer, size); notnull_check(ptr); size_t size_left = size, to_skip = offs;
[Fact] public async Task GivenAnExistingResource_WhenRead_ThenAuditLogEntriesShouldBeCreated() { await ExecuteAndValidate( async () => { FhirResponse<Patient> response = await _client.CreateAsync(Samples.GetDefaultPatient()); return await _client.ReadAsync<Patient>(ResourceType.Patient, response.Resource.Id); }, "read", ResourceType.Patient,
'creating-managing-organization') MESSAGE_RUN_FREQUENCY = ( 'Forseti will run once every 12 hours, you can configure the run ' 'frequency in the server deployment template field "run-frequency"' ' and update the deployment using the deployment manager.') # Questions templates QUESTION_ENABLE_WRITE_ACCESS = (
<% end %> <%= f.input :square_footage, label: "Square Footage", wrapper: :input_group do %> <span class="input-group-text"><i class="fa fa-th"></i></span> <%= f.input_field :square_footage, class: "form-control" %> <% end %> <%= f.input :warehouse_type, label: "Warehouse Type", wrapper: :input_group, collection: StorageLocation::WAREHOUSE_TYPES %> </div> <!-- /.card-body --> <div class="card-footer">
// auto inject saylinks (say) if (RuleB(Chat, AutoInjectSaylinksToSay)) { std::string new_message = EQ::SayLinkEngine::InjectSaylinksIfNotExist(message); buf.WriteString(new_message); } else { buf.WriteString(message);
campaignRoi.emplace_back( 30 + roiOffset.x, 59 + roiOffset.y, 224, 297 ); Video::ShowVideo( Settings::GetLastFile( System::ConcatePath( "heroes2", "anim" ), "INTRO.SMK" ), false ); Video::ShowVideo( Settings::GetLastFile( System::ConcatePath( "heroes2", "anim" ), "CHOOSEW.SMK" ), false ); const size_t chosenCampaign = Video::ShowVideo( Settings::GetLastFile( System::ConcatePath( "heroes2", "anim" ), "CHOOSE.SMK" ), true, campaignRoi ); const bool goodCampaign = chosenCampaign == 0; AGG::PlayMusic( MUS::VICTORY );
logger.warn("Cannot add cgroup '{0}' to tracking list; resource usage will not be tracked. " "Error: {1}".format(cgroup.path, ustr(exception))) @staticmethod def get_processes_in_cgroup(cgroup_path): with open(os.path.join(cgroup_path, "cgroup.procs"), "r") as cgroup_procs:
ctx.env.schema, json_t)): # Turn casts from json->array<T> into json->array<json> # and array<json>->array<T>. ctx.env.schema, json_array_typ = s_types.Array.from_subtypes( ctx.env.schema, [json_t]) json_array_ir = compile_cast( ir_expr, json_array_typ, srcctx=srcctx, ctx=ctx) return compile_cast(
} return objectMapper.readValue(response.getResponseBodyAsStream(), MESOS_FILE_OBJECTS); } catch (ConnectException ce) { throw new SlaveNotFoundException(ce); } catch (Exception e) { if (e.getCause().getClass() == ConnectException.class) { throw new SlaveNotFoundException(e); } else { throw Throwables.propagate(e); } } }
} func ResponseDirectWithHeaders(t *testing.T, client *http.Client, method, url string, body io.Reader, responseCode int, response interface{}, headers http.Header) { t.Helper() resp := request(t, client, method, url, body, responseCode, headers)
let schemas = require("./schemas"); const AppConfig = require("./support/testConfig"); const { resolve } = require("path"); const REALM_MODULE_PATH = require.resolve("realm");
`; this.mainWindowRef.on('closed', () => { if (this.splashWindow && !this.splashWindow.isDestroyed()) { this.splashWindow.close(); } });
} } RegexOptions regexOptions = RegexOptions.Compiled; if (this.IgnoreCase) { regexOptions |= RegexOptions.IgnoreCase;
return fmt.Sprintf("https://%s.%s/", k.keyVaultName, keyVaultEndpointSuffix) } func getSupportedAlgorithmsForError() string { var algos []string for _, a := range keyvault.PossibleJSONWebKeyEncryptionAlgorithmValues() {
activeNotifications.remove(holder); int notificationId = holder.notificationId; markNotificationIdAsFree(notificationId); if (!additionalNotifications.isEmpty()) { NotificationContent newContent = additionalNotifications.removeFirst();
*/ package tech.pegasys.pantheon.chainexport; import tech.pegasys.pantheon.ethereum.chain.Blockchain; import tech.pegasys.pantheon.ethereum.core.Block; import tech.pegasys.pantheon.ethereum.rlp.RLP; import tech.pegasys.pantheon.util.bytes.BytesValue;
} else { clusterState, err = clusterkv.Bootstrap(f.db, stateRoot) if err != nil { return nil, nil, nil, nil, fmt.Errorf("could not bootstrap cluster state: %w", err) } }
Seq(NonTerminal(ul.childSort), Terminal(""), NonTerminal(Sort(ul.sort.name() + "#Terminator", ul.sort.params()))), newAtts.add(Constants.ORIGINAL_PRD, Production.class, ul.pList)); // Es ::= Ne#Es prod4 = Production(Seq(), ul.sort, Seq(NonTerminal(Sort("Ne#" + ul.sort.name(), ul.sort.params()))), Att().add(NOT_INJECTION)); // Es ::= Es#Terminator // if the list is * prod5 = Production(Seq(), ul.sort, Seq(NonTerminal(Sort(ul.sort.name() + "#Terminator", ul.sort.params()))), Att().add(NOT_INJECTION)); res.add(prod1); res.add(prod2);
} /** * Utility for registering completable futures for cleanup if this EthTask is cancelled. * * @param <S> the type of data returned from the CompletableFuture * @param subTaskFuture the future to be registered.
if (searchOptions.IncludeTotal == TotalType.Accurate && !searchOptions.CountOnly) { // TODO: Clone search options instead of mutating it (see User Story #720). searchOptions.CountOnly = true; var totalSearchResult = await ExecuteSearchAsync(
this.setState(prevState => ({ isScannable: !prevState.isScannable })); }; onConfirmReadableChange = this.onConfirmReadable.bind(this); onConfirmScannableChange = this.onConfirmScannable.bind(this); onConfirmCorrectPrintingChange = this.onConfirmCorrectPrinting.bind(this); render() { const { intl } = this.context;
fetched_recs = self.idx._get_record(99228) self.compare_records(recs, fetched_recs) class TestSearchGoodMAF(unittest.TestCase): """Test index searching on a properly-formatted MAF."""
namespace parse { namespace detail { condition_parser_rules_3::condition_parser_rules_3( const parse::lexer& tok, Labeller& labeller, const condition_parser_grammar& condition_parser, const parse::value_ref_grammar<std::string>& string_grammar ) :
Castle * castle = hero.inCastle(); if ( castle ) { ReinforceHeroInCastle( hero, *castle, castle->GetKingdom().GetFunds() ); } }
ReasonsGroupType reason; reason.first = "Transaction list"; for (const auto &tx : transactions) { auto answer = UnsignedTransactionsCollectionValidator::transaction_validator_ .validate(tx); if (answer.hasErrors()) { auto message = (boost::format("Tx %s : %s") % tx.hash().hex() % answer.reason())
} } if !deploymentAvailableFound { pullSubscriptionCondSet.Manage(s).MarkUnknown(PullSubscriptionConditionDeployed, "DeploymentUnavailable", "The Deployment '%s' is unavailable.", d.Name) } }
oldQuery := queryDomain queryDomain, err := updateDomainWithCName(queryDomain, nameservers) if err != nil { return fmt.Errorf("while trying to follow CNAMEs for domain %s using nameservers %v: %w", queryDomain, nameservers, err) } if queryDomain == oldQuery { break
@aiohttp_apispec.docs(tags=['operations'], summary='Get Links from Operation', description='Retrieves all links for a given operation_id.', parameters=[{ 'in': 'path', 'name': 'id', 'operation_id' : 'Unique ID for operation', 'schema' : {'type': 'string'}, 'required': 'true' }]) @aiohttp_apispec.querystring_schema(BaseGetAllQuerySchema) @aiohttp_apispec.response_schema(LinkSchema(many=True, partial=True)) async def get_operation_links(self, request: web.Request):
stds = deltas.new_tensor(stds).unsqueeze(0) deltas = deltas.sub_(means).div_(stds) return deltas def delta2bbox(rois,
login: 'org-login', }); this.server.createList('allowance', 2, {subscription_type: 1}); const repository = this.server.create('repository', { name: 'repository-name', slug: 'org-login/repository-name',
// The caller must call Close on the returned Writer, even if the write is // aborted. func (b *Bucket) NewWriter(ctx context.Context, key string, opts *WriterOptions) (_ *Writer, err error) { var dopts *driver.WriterOptions var w driver.Writer if opts == nil {
char **jx_match_string(struct jx *j, char **v) { if (jx_istype(j, JX_STRING)) { if (v) { if (!(*v = strdup(j->u.string_value))) return NULL; } return &j->u.string_value; } else {
// TODO remove this once a version containing this code has // been deployed to archival nodes if len(initBlocks) > 0 && initBlocks[0].Round() == basics.Round(0) { updated, err := blockReplaceIfExists(tx, l.log, initBlocks[0], agreement.Certificate{}) if err != nil { err = fmt.Errorf("initBlocksDB.blockReplaceIfExists %v", err) return err } if updated { l.log.Infof("initBlocksDB replaced block 0") } } }
} reqs := task.getAllSSMSecretRequirements() assert.Equal(t, secret1, reqs[regionWest][0]) assert.Equal(t, 1, len(reqs[regionWest])) assert.Equal(t, secret3, reqs[regionEast][0]) }
return opts, nil } // NewBackendServiceDescriberWithResources instantiates a backend service describer with stack resources. func NewBackendServiceDescriberWithResources(app, svc string) (*BackendServiceDescriber, error) { d, err := NewBackendServiceDescriber(app, svc) if err != nil {
struct LoopSoundTask { LoopSoundTask( std::vector<int> vols_, const int soundVolume_ ) : vols( std::move( vols_ ) ) , soundVolume( soundVolume_ ) {}
result, err := historicalNode.GetTransactionResult(ctx, &accessproto.GetTransactionRequest{Id: txID[:]}) if err == nil { // Found on a historical node. Report if result.GetStatus() == entities.TransactionStatus_PENDING { // This is on a historical node. No transactions from it will ever be // executed, therefore we should consider this expired result.Status = entities.TransactionStatus_EXPIRED } return access.MessageToTransactionResult(result), nil } // Otherwise, if not found, just continue
var blockCmd = &cobra.Command{ Use:   "dumpblock <round>", Short: "Dump ledger block.", Long:  "Dump ledger block.", Args:  cobra.ExactArgs(1), Run: func(cmd *cobra.Command, args []string) { dataDir := ensureSingleDataDir() algodClient := ensureAlgodClient(dataDir) blocknum, err := strconv.ParseUint(args[0], 10, 64) msgpack.StrictJSON = false msgpack.Base32Encoding = true if err != nil { reportErrorf(errorRequestFail, err) }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4477-SEA 1645545907 3705123398</p> <hr> <p>Varnish cache server</p> </body>
let platformInfo = {}; chrome.runtime.getPlatformInfo(function(info) { if (chrome.runtime.lastError) { catcher.unhandled(new Error(chrome.runtime.lastError.message), {context: "getPlatformInfo"}); } platformInfo = info; });
private boolean watchingParent = false; private String asyncLock; public ZooLock(ZooReaderWriter zoo, String path) { this(new ZooCache(zoo), zoo, path); } protected ZooLock(ZooCache zc, ZooReaderWriter zrw, String path) { getLockDataZooCache = zc; this.path = path;
yield ("* With this command, +;;+ is interpreted literally " "instead of splitting off a second command.") if cmd.no_replace_variables: yield r"* This command does not replace variables like +\{url\}+." def _get_action_metavar(action, nargs=1):
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4453-SEA 1645549760 830942967</p> <hr> <p>Varnish cache server</p> </body>
return; // helpers for combining building effects into a single line std::vector<std::string> combined_names; float combined_meter_change = 0.0f; // add label-value pairs for each alteration recorded for this meter for (auto it = maybe_info_vec->begin(); it != maybe_info_vec->end(); ++it) { auto info = *it;
__all__ = ['gsddmm', 'copy_u', 'copy_v', 'copy_e'] def reshape_lhs_rhs(lhs_data, rhs_data): r""" Expand dims so that there will be no broadcasting issues with different number of dimensions. For example, given two shapes (N, 3, 1), (E, 5, 3, 4) that are valid broadcastable shapes, change them to (N, 1, 3, 1) and (E, 5, 3, 4) Parameters ----------
from indy_common.types import ClientGetAuthRuleOperation from plenum.common.txn_util import get_request_data from plenum.server.request_handlers.handler_interfaces.read_request_handler import ReadRequestHandler from indy_common.authorize.auth_actions import AuthActionEdit, EDIT_PREFIX, AuthActionAdd from indy_common.constants import CONFIG_LEDGER_ID, AUTH_RULE, AUTH_ACTION, OLD_VALUE, \ NEW_VALUE, AUTH_TYPE, FIELD from plenum.common.exceptions import InvalidClientRequest from plenum.common.request import Request from plenum.server.database_manager import DatabaseManager
for _, h := range hosts { if h == defaultSNI { hosts = append(hosts, "") cp.DefaultSNI = defaultSNI break } } // TODO: are matchers needed if every hostname of the resulting config is matched? if len(hosts) > 0 {
t.Fatal(err) } if err := SolveAndUpdate(chain, block); err == nil { t.Fatalf("invalid coinbase tx validate success") } }
public function up(Schema $schema) { $entryTable = $schema->getTable($this->getTable('entry')); $this->skipIf($entryTable->hasIndex($this->indexName), 'It seems that you already played this migration.');  $entryTable->addIndex(['created_at'], $this->indexName); } /**
var Point = require('./Point'), Key = require('./Key'), sha256 = require('../util').sha256, twoSha256 = require('../util').twoSha256;
auto start_time = std::chrono::steady_clock::now(); // Now generate new data structure feature4, and copy data to the device int nthreads = std::min(omp_get_max_threads(), (int)dense_feature_map_.size() / dword_features_); nthreads = std::max(nthreads, 1); std::vector<Feature4*> host4_vecs(nthreads); std::vector<boost::compute::buffer> host4_bufs(nthreads); std::vector<Feature4*> host4_ptrs(nthreads);
import ( context "context" "database/sql" "net/http" "strconv" "sync"
// exchange headers if err := handleHeaders(ss.Headler, stream); err != nil { s.logger.Debugf("handle protocol %s/%s: stream %s: peer %s: handle headers: %v", p.Name, p.Version, ss.Name, overlay, err) if err := stream.Close(); err != nil { s.logger.Debugf("handle protocol %s/%s: stream %s: peer %s: handle headers close stream: %v", p.Name, p.Version, ss.Name, overlay, err) }
private string DebuggerDisplay { get { return string.Format("{0} {1} {2}", this.Method, this.Url, this.ProtocolVersion).Trim(); } } } }
package com.hazelcast.jet.impl.serialization; import com.hazelcast.internal.nio.BufferObjectDataInput; import com.hazelcast.internal.serialization.InternalSerializationService; public interface DataInput {
return proposalValue{ OriginalPeriod:   p.OriginalPeriod, OriginalProposer: p.OriginalProposer, BlockDigest:      p.Digest(), EncodingDigest:   crypto.HashObj(p.Compressed()), } }
func (s *server) bytesUploadHandler(w http.ResponseWriter, r *http.Request) { ctx := r.Context() toEncrypt := strings.ToLower(r.Header.Get(EncryptHeader)) == "true" sp := splitter.NewSimpleSplitter(s.Storer) address, err := file.SplitWriteAll(ctx, sp, r.Body, r.ContentLength, toEncrypt) if err != nil { s.Logger.Debugf("bytes upload: %v", err) jsonhttp.InternalServerError(w, nil)
$username = "$target.$username"; } // Check the credentials if the username is changed or a new password is // entered: $card = $user->getLibraryCard($id == 'NEW' ? null : $id); if ($card->cat_username !== $username || trim($password)) { // Connect to the ILS and check that the credentials are correct: $loginMethod = $this->getILSLoginMethod($target);
"https://github.com/algorandfoundation/specs/tree/5615adc36bad610c7f165fa2967f4ecfa75125f0", ) // ConsensusVFuture adds the ability to issue a transaction that marks an account non-participating const ConsensusVFuture = ConsensusVersion( "---->!!!TODO!!!<----", )
func (s *Suite) assertNodeApprovedAndProposed(ctx context.Context, env templates.Environment, info *StakedNodeOperationInfo) { // ensure node ID in approved list approvedNodes := s.ExecuteReadApprovedNodesScript(ctx, env) require.Containsf(s.T(), approvedNodes.(cadence.Array).Values, cadence.String(info.NodeID.String()), "expected new node to be in approved nodes list: %x", info.NodeID) // check if node is in proposed table proposedTable := s.ExecuteGetProposedTableScript(ctx, env, info.NodeID) require.Containsf(s.T(), proposedTable.(cadence.Array).Values, cadence.String(info.NodeID.String()), "expected new node to be in proposed table: %x", info.NodeID) } // newTestContainerOnNetwork configures a new container on the suites network
<div class="col-md-11 col-md-offset-1"> <!-- Alerts Enabled --> <div class="form-group {{ $errors->has('alerts_enabled') ? 'error' : '' }}"> <div class="col-md-3"> {{ Form::label('alerts_enabled', trans('admin/settings/general.alerts_enabled')) }} </div>
if (WriteParameters(writer, true)) { SendAnimationParametersMessage(writer.ToArray()); } } }
from .test_mixins import RPNTestMixin from .. import builder from ..registry import DETECTORS from mmdet.core import (build_assigner, bbox2roi, bbox2result, build_sampler, merge_aug_masks) @DETECTORS.register_module
"away" => $away, "profile_fields" => $mybb->get_input('profile_fields', MyBB::INPUT_ARRAY) )); foreach(array('icq', 'skype', 'google') as $cfield) { $csetting = 'allow'.$cfield.'field'; if($mybb->settings[$csetting] == '')
// +build linux darwin freebsd netbsd package disk
const { specialFeatures } = targets.of('@magento/pwa-buildpack'); specialFeatures.tap(flags => { /** *  Wee need to activate esModules, cssModules and GQL Queries to allow build pack to load our extension * {@link https://magento.github.io/pwa-studio/pwa-buildpack/reference/configure-webpack/#special-flags}. */ flags[targets.name] = {
# skip the image if there is no valid gt bbox if len(gt_bboxes) == 0 and self.skip_img_without_anno: warnings.warn('Skip the image "%s" that has no valid gt bbox' % osp.join(self.img_prefix, img_info['filename'])) return None # extra augmentation
} if o.familyName != "" { if err := basicNameValidation(o.familyName); err != nil { return err } }
ns_sol.reset(new MultiFab(ba, dm, ncomp, ng, MFInfo(), *(ns_linop->Factory(0,0)))); ng = 0; if (cf_strategy == CFStrategy::ghostnodes) ng = nghost; ns_rhs.reset(new MultiFab(ba, dm, ncomp, ng, MFInfo(), *(ns_linop->Factory(0,0)))); ns_sol->setVal(0.0); ns_rhs->setVal(0.0);
try { double progress = entries.getValue().getBytesCopied() / walBlockSize; // to be sure progress does not exceed 100% status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn("Error getting bytes read"); }
endif; function rocket_cache_sccss() { $sccss = rocket_get_cache_busting_paths( 'sccss.css' ); if ( ! file_exists( $sccss['filepath'] ) ) { rocket_sccss_create_cache_file( $sccss['bustingpath'], $sccss['filepath'] );
// The DDL target table, present only for CREATE/DROP FUNCTION/PROCEDURE queries. DDLTargetRoutine *Routine // ReservationUsage details slot consumption by reservation. ReservationUsage []*ReservationUsage }
/** Cache of pre-generated handlers by provider and kind of metadata. * For the cache to be effective, providers should implement identity * correctly. */ private static final LoadingCache<Key, MetadataHandler<?>> HANDLERS = maxSize(CacheBuilder.newBuilder(), CalciteSystemProperty.METADATA_HANDLER_CACHE_MAXIMUM_SIZE.value())
@Test public void shouldHandleTransformOnNone() { assertThat(Option.none().<String>transform(self -> self.isEmpty() ? "ok" : "failed")).isEqualTo("ok"); } // -- iterator
// When rules.SuppressNormalHostPolicy is true, we also skip normal host policy; this is // the case when we're building the policy program for workload -> host and // DefaultEndpointToHostAction is ACCEPT or DROP; or for host -> workload. if rules.SuppressNormalHostPolicy { p.writeJumpIfToOrFromHost("allowed_by_host_policy") } else { p.writeJumpIfToOrFromHost("to_or_from_host")
@pytest.mark.parametrize('number_of_eth_accounts', [0]) def test_data_import_shapeshift_trades(rotkehlchen_api_server): """Test that the data import endpoint works successfully for shapeshift trades""" rotki = rotkehlchen_api_server.rest_api.rotkehlchen dir_path = Path(__file__).resolve().parent.parent filepath = dir_path / 'data' / 'shapeshift-trade-history.csv'
package com.hazelcast.jet.function; import javax.annotation.Nonnull; import java.util.function.Predicate; import static com.hazelcast.util.Preconditions.checkNotNull;  /** * Represents a predicate which accepts three arguments. This * is the three-arity specialization of {@link Predicate}.
def test_get_wrong_n_atoms(self): with pytest.raises(ValueError, match=r"Supplied n_atoms *"): mda.Universe(TRZ, n_atoms=8080) class TestTRZWriter(RefTRZ):
// goto main menu int rs = ( test ? Game::TESTING : Game::MAINMENU ); Video::ShowVideo( Settings::GetLastFile( System::ConcatePath( "heroes2", "anim" ), "H2XINTRO.SMK" ), false ); while ( rs != Game::QUITGAME ) { switch ( rs ) {
define('IN_MYBB', 1); define('THIS_SCRIPT', 'report.php'); require_once './global.php'; require_once MYBB_ROOT . 'inc/functions_modcp.php';
data['score'] = float(bboxes[i][4]) data['category_id'] = 1 json_results.append(data) return json_results def det2json(dataset, results):
// Prepend parent group pattern(s) if ($this->routeGroups) { // If any route in the group only has / we remove it if ($pattern === '/') { $pattern = ''; } $pattern = $this->processGroups() . $pattern; }
it "renders the body with correct text with partner information" do expect(subject.body.encoded).to include("<h1> You've received a request to approve the account for #{partner.name}. </h1>") expect(subject.body.encoded).to include("Review This Organization") expect(subject.body.encoded).to include("#{organization.short_name}/partners/#{partner.id}#partner-information\">Review This Organization</a>") end
self.errorOnMove = function(error) { if (error === 'auto-commit-forbidden') { apos.notify('You may only move pages you are allowed to commit.', { type: 'error' }); } else { apos.notify('You may only move pages you are allowed to publish. If you move a page to a new parent, you must be allowed to edit the new parent.', { type: 'error' }); }
const defaultShallowBinPeers = 2 var ( logMore = false // enable this to get more logging )
//                           `Notifications` collection. //       ipNetwork: An IpNetwork capability that is implemented by the frontend. Eventually, this //                  will be moved out of the frontend and into the backend, but we'll migrate the //                  database when that happens. This field contains the boolean true to signify that //                  it has been set. //       ipInterface: Ditto IpNetwork, except it's an IpInterface. //   parentToken: If present, then this token represents exactly the capability represented by //              the ApiToken with _id = parentToken, except possibly (if it is a UiView) attenuated
providerConfig.AzureDNS.HostedZoneName, s.DNS01Nameservers, canUseAmbientCredentials, providerConfig.AzureDNS.ManagedIdentity, ) if err != nil { return nil, nil, fmt.Errorf("error instantiating azuredns challenge solver: %s", err)
next(); }); app.post("/error", function (req, res) { let bodyObj = req.body; if (typeof bodyObj !== "object") {
Fee *big.Int `json:"fee"` // Beneficiary: Provider channelID by default, optionally set during Identity registration. // Can be updated later through transactor. We can check it's value directly from SC. // It's a cash out address. Beneficiary string `json:"beneficiary"` // Signature from fields above Signature string `json:"signature"`
// ProcessRequest is called when a external client will connect through // the websocket-port to this service. It returns a message that will be // sent back to the client. ProcessClientRequest(handler string, msg []byte) (reply []byte, err ClientError) // Processor makes a Service being able to handle any kind of packets // directly from the network. It is used for inter service communications, // which are mostly single packets with no or little interactions needed. If
$parsed_url = get_rocket_parse_url( $url ); if ( $url_no_dots ) { $parsed_url['host'] = str_replace( '.', '_', $parsed_url['host'] ); } $root = $cache_path . $parsed_url['host'] . $parsed_url['path'];
managed by Waypoint. When the '-refresh' flag is included, this command will attempt to regenerate every requested application's status report on-demand for both local and remote data sourced projects. ` + c.Flags().Help())
loadingSceneAsync = SceneManager.LoadSceneAsync(newSceneName); // ServerChangeScene can be called when stopping the server // when this happens the server is not active so does not need to tell clients about the change if (NetworkServer.active) {
if (checkInit) { DbException.throwInternalError(); } Collections.sort(filters, TableFilter.ORDER_IN_FROM_COMPARATOR); expandColumnList(); visibleColumnCount = expressions.size(); ArrayList<String> expressionSQL;
LogConfig   *LogConfigOpts Autoscaling *AutoscalingOpts Storage     *StorageOpts Network     *NetworkOpts // Additional options for service templates. HealthCheck         *ecs.HealthCheck
projects:{count:5}, members:{count:100}, documents:{count:40}}) end it 'displays a tab view' do
} if (!confirm( TAPi18n.__("grains.grainlist.sandstormGrainListPage.transfers.warningGiving", destination))) { return; }
builder.Finish(example.MonsterPack(builder, monster)) monster2 := example.GetRootAsMonster(builder.FinishedBytes(), 0).UnPack() if !reflect.DeepEqual(monster, monster2) { fail(FailString("Pack/Unpack()", monster, monster2)) } }
**Default Window Length:** 1 """ window_length = 1 def _validate(self): super(PeerCount, self)._validate()
class ClientAuthRulesOperation(MessageValidator): schema = ( (TXN_TYPE, ConstantField(AUTH_RULES)), (RULES, IterableField(AuthRuleField(), min_length=1)) )
private static final String TAG_NOTIFICATION_WORKER_FRAGMENT = "NotificationWorkerFragment"; private NotificationWorkerFragment mNotificationWorkerFragment; @Override protected void onCreate(Bundle savedInstanceState) {
from say import say # Tests adapted from `problem-specifications//canonical-data.json` @ v1.2.0 class SayTest(unittest.TestCase): def test_zero(self):
die(); } if ( ! isset( $_FILES['import'] ) || 0 === $_FILES['import']['size'] ) { add_settings_error( 'general', 'settings_update_error', __( 'Settings import failed: no file uploaded.', 'rocket' ), 'error' ); wp_safe_redirect( esc_url_raw( wp_get_referer() ) );
"fmt" "github.com/aws/aws-sdk-go/aws" "github.com/aws/aws-sdk-go/service/ssm" "github.com/pkg/errors" ) // GetSecretFromSSM makes the api call to the AWS SSM parameter store to // retrieve secrets value in batches func GetSecretsFromSSM(names []string, client SSMClient) (map[string]string, error) { var secretNames []*string for _, name := range names { secretNames = append(secretNames, aws.String(name))
import ( "bytes" "runtime" "testing" "encoding/json"
*         same UUID is found in the settings file.<br> *         <strong>Note:</strong> This can have side-effects we currently don't handle, e.g. *         changing the account type from IMAP to POP3. So don't use this for now! * @return An {@link ImportResults} instance containing information about errors and *         successfully imported accounts. *
* These should be close to the expected value and variance of the given distribution to pass. * @param dist The distribution to test */ void sample_test(const probability::geometric_dist::geometric_distribution& dist) { uint32_t n_tries = 1000000; std::vector<float> tries; tries.resize(n_tries);
CONTEXT_SIZE_LIMIT = 131072 JSON_LD_LIMIT = CONTEXT_SIZE_LIMIT ENABLE_RICH_SCHEMAS = False
return NewBranchItr(sqlCtx, bt.ddb) } // BranchItr is a sql.RowItr implementation which iterates over each commit as if it's a row in the table. type BranchItr struct { branches []string
m_aStdColNameOrder->Insert(_("Progress"), COLUMN_PROGRESS); m_aStdColNameOrder->Insert(_("Status"), COLUMN_STATUS); m_aStdColNameOrder->Insert(_("Elapsed"), COLUMN_CPUTIME); m_aStdColNameOrder->Insert(_("Remaining (estimated)"), COLUMN_TOCOMPLETION); m_aStdColNameOrder->Insert(_("Estimated Completion"), COLUMN_ESTIMATEDCOMPLETION); m_aStdColNameOrder->Insert(_("Deadline"), COLUMN_REPORTDEADLINE); m_aStdColNameOrder->Insert(_("Application"), COLUMN_APPLICATION);
for(WriterProxyData* wdatait : (*pit)->m_writers) { bool valid = validMatching(&rdata, wdatait); const GUID_t& reader_guid = R->getGuid(); const GUID_t& writer_guid = wdatait->guid(); if(valid) {
//check that the cleanup functions are called on each loop exit for (int i = 0; i < 10; ++i) { DEFER_CLEANUP(struct foo x = {i}, foo_free); S2N_UNUSED(x); EXPECT_EQUAL(foo_cleanup_calls, expected_cleanup_count); expected_cleanup_count++;
+ _base_doc[_base_doc.find('verbose :'):]) # DaskLGBMClassifier support for callbacks and init_model is not tested fit.__doc__ = f""" {_base_doc[:_base_doc.find('callbacks :')]}**kwargs Other parameters passed through to ``LGBMClassifier.fit()`` """ def predict(self, X: _DaskMatrixLike, **kwargs: Any) -> dask_Array: """Docstring is inherited from the lightgbm.LGBMClassifier.predict."""
return $this->fromPath($identifier); } throw new \TypeError(sprintf('%s(): Argument #1 ($identifier) must be of type FilesModel|ImageInterface|string|int|null, %s given', __METHOD__, \is_object($identifier) ? \get_class($identifier) : \gettype($identifier))); } /**
l2Fee := new(big.Int).Mul(l2GasPrice, roundedL2GasLimit) sum := new(big.Int).Add(l1Fee, l2Fee) scaled := new(big.Int).Div(sum, bigFeeScalar) rounded := Ceilmod(scaled, BigTenThousand) roundedScaledL2GasLimit := new(big.Int).Div(roundedL2GasLimit, BigTenThousand) result := new(big.Int).Add(rounded, roundedScaledL2GasLimit) return result
"""Scanner for the GroupsSettings rules engine.""" import json  from google.cloud.forseti.common.gcp_type import groups_settings from google.cloud.forseti.common.util import logger from google.cloud.forseti.scanner.audit import groups_settings_rules_engine
namespace WP_Rocket\Engine\Optimization\RUCSS\Warmup; use WP_Rocket\Engine\Optimization\RUCSS\Database\Queries\ResourcesQuery; use \WP_Rocket_WP_Background_Process; class WarmupProcess extends WP_Rocket_WP_Background_Process {
TabletIteratorEnvironment iterEnv; if (env.getIteratorScope() == IteratorScope.majc) iterEnv = new TabletIteratorEnvironment(IteratorScope.majc, !propogateDeletes, acuTableConf, getMajorCompactionReason()); else if (env.getIteratorScope() == IteratorScope.minc) iterEnv = new TabletIteratorEnvironment(IteratorScope.minc, acuTableConf); else throw new IllegalArgumentException();
if absPathErr != nil { reportErrorf("Can't convert data directory's path to absolute, %v\n", dataDir) } algodConfig, err := config.LoadConfigFromDisk(absolutePath) if err != nil && !os.IsNotExist(err) { log.Fatalf("Cannot load config: %v", err) } if _, err := os.Stat(absolutePath); err != nil {
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4480-SEA 1645531101 2650991108</p> <hr> <p>Varnish cache server</p> </body>
@classmethod def _section(cls, opts): """Get logging settings from config file section "logging".""" if isinstance(cls.config, LuigiConfigParser): return False try: logging_config = cls.config['logging'] except (TypeError, KeyError, NoSectionError): return False logging.config.dictConfig(logging_config) return True
class DistributionPdf include Prawn::View include ItemsHelper def initialize(organization, distribution) @distribution = distribution
// PendingRewards computes the amount of rewards (in microalgos) that // have yet to be added to the account balance. func PendingRewards(ot *OverflowTracker, proto config.ConsensusParams, microAlgos MicroAlgos, rewardsBase uint64, rewardsLevel uint64) MicroAlgos { rewardsUnits := microAlgos.RewardUnits(proto) rewardsDelta := ot.Sub(rewardsLevel, rewardsBase) return MicroAlgos{Raw: ot.Mul(rewardsUnits, rewardsDelta)}
return opts, done } // HasDockerTestEnvironment returns true when either: // 1) Not on Travis. // 2) On Travis Linux environment, where Docker is available. func HasDockerTestEnvironment() bool { s := os.Getenv("TRAVIS_OS_NAME") return s == "" || s == "linux" }
content_id='Scanner Violations' ) scanner_subject = '{} Complete - {} violation(s) found'.format( email_description, total_violations) self.email_util.send( email_sender=email_sender, email_recipient=email_recipient,
} func (r *Resource) SchemaURL() string { return r.schemaURL }
{ if (!client->fsaccess->mkdirlocal(&localpath)) { da.reset(); LOG_err << "Unable to create folder: " << *path; recursive--;
} // connQueue manages the message queue of a LocalConn. // Messages are pushed and retrieved in a FIFO-queue. // All operations are thread-safe. // The messages are marshalled and stored in the queue as a slice of bytes. type connQueue struct {
*/ public static Address recoverProposerAddress( final BlockHeader header, final CliqueExtraData cliqueExtraData) { if (header.getNumber() == BlockHeader.GENESIS_BLOCK_NUMBER) { return Address.ZERO; } if (!cliqueExtraData.getProposerSeal().isPresent()) { throw new IllegalArgumentException(
#  Slot descriptor for the table of attribute get & set methods. def slot_code(self, scope): if scope.property_entries: return scope.getset_table_cname else: return "0"
cmd := &cobra.Command{ Hidden: true, // TODO: remove when ready for production! Use:    "status", Short:  "Shows the status of a pipeline.", Long:   "Shows the status of each stage of your pipeline.", Example: ` Shows status of the pipeline "pipeline-myapp-myrepo".
if (isset($GLOBALS['TL_LANG'][$this->strTable][$k])) { $v['label'] = &$GLOBALS['TL_LANG'][$this->strTable][$k]; } elseif (isset($GLOBALS['TL_LANG']['DCA'][$k])) { $v['label'] = &$GLOBALS['TL_LANG']['DCA'][$k]; } }
def _count_diff_NG86(codon1, codon2, codon_table=default_codon_table): """Count differences between two codons, three-letter string (PRIVATE). The function will take multiple pathways from codon1 to codon2 into account.
Slice object to check. sequence_len : int, optional Length of the sequence to index with the passed `slc`. If not specified the function won't be able to check whether ``slc.stop`` is equal or greater than the sequence length to consider `slc` to be a full-grab, and so, only slices with ``.stop is None`` are considered to be a full-grab. Returns -------
def __init__(self, graph_name, port): self._graph_name = graph_name self._pid = os.getpid() self.proxy = xmlrpc.client.ServerProxy("http://127.0.0.1:" + str(port) + "/") self._worker_id, self._num_workers = self.proxy.register(graph_name) if self._worker_id < 0: raise Exception('fail to get graph ' + graph_name + ' from the graph store')
@Override public ExpireSnapshotsActionResult execute() { JobGroupInfo info = newJobGroupInfo("EXPIRE", "EXPIRE-SNAPSHOTS"); return withJobGroupInfo(info, this::doExecute); }  private ExpireSnapshotsActionResult doExecute() { SparkContext context = spark().sparkContext(); JobGroupInfo info = JobGroupUtils.getJobGroupInfo(context); return withJobGroupInfo(info, () -> {
dist.broadcast(module.running_var, 0) dist.broadcast(module.running_mean, 0) def after_train_epoch(self, runner): if self.broadcast_bn_buffer: self._broadcast_bn_buffer(runner)  if not self.by_epoch or not self.evaluation_flag(runner): return
} $num_activated = $num_deleted = 0; $users_to_delete = array(); if($mybb->input['delete']) // Delete selected user(s) { require_once MYBB_ROOT.'inc/datahandlers/user.php';
Sensei()->settings->set( 'my_course_page', $new_my_course_page_id ); // Course Completion Page. $new_course_completed_page_id = $this->create_page( esc_sql( _x( 'course-completed', 'page_slug', 'sensei-lms' ) ), __( 'Course Completed', 'sensei-lms' ) ); Sensei()->settings->set( 'course_completed_page', $new_course_completed_page_id ); Sensei()->initiate_rewrite_rules_flush(); }
return cs; } public boolean isSortAudioTracksByAlbumPosition() { return getBoolean(KEY_SORT_AUDIO_TRACKS_BY_ALBUM_POSITION, true); } public boolean isDynamicPls() {
if (not doc.HasMember("prev_hash")) { return nonstd::nullopt; } std::string prev_hash_str = doc["prev_hash"].GetString(); auto prev_hash_bytes = hex2bytes(prev_hash_str); std::copy(prev_hash_bytes.begin(), prev_hash_bytes.end(), block.prev_hash.begin());
viewBinding.subscribeButton.setEnabled(true); viewBinding.subscribeButton.setText(R.string.subscribe_label); if (UserPreferences.isEnableAutodownload()) { viewBinding.autoDownloadCheckBox.setChecked(true); viewBinding.autoDownloadCheckBox.setVisibility(View.VISIBLE); }
default: return errors.New("unsupported packet-in: should be a valid IPv4 or IPv6 packet") }  ob.protocolStr = ip.IPProtocolNumberToString(prot, "UnknownProtocol")  return nil }
if (result.resourceExtensions.length) { result.resourceExtensions = _.filter(result.resourceExtensions, function(ext) { return utils.ignoreCaseEquals(CHEFPUBLISHER, ext.publisher); }); } var version = _.max(result.resourceExtensions, function(stooge){return stooge.version;}).version;
# SPDX - License - Identifier: Apache - 2.0 # Purpose # This code example demonstrates how to upload an encrypted object to an Amazon Simple Storage Service (Amazon S3) bucket. # snippet-start:[s3.ruby.s3_add_cskms_encrypt_item]
// void show(int* arr, const int size); /** * @brief Function to merge two sub-arrays. * * @details * merge() function is called from mergeSort() * to merge the array after it split for sorting * by the mergeSort() funtion. * * In this case the merge fuction will also count and return
#include "lbann/utils/summary.hpp" #include <lbann/utils/image.hpp> namespace lbann {
* Gets the checkbox state for a block * @param {string} blockId The ID of the block in question. * @return {boolean} Whether the block is checked. * @public */ Blockly.VerticalFlyout.getCheckboxState = function(/* blockId */) { return false;
assertTrue(scopes.contains(IteratorScope.majc)); Map<String,String> config = tops.getConfiguration(MetadataTable.NAME); Map<String,String> properties = Map.copyOf(config); for (IteratorScope scope : scopes) { String key = Property.TABLE_ITERATOR_PREFIX.getKey() + scope.name() + "."
class UserManager { /** @var EntityManagerInterface */ protected $em; /** @var string */ private $class; /** @var string */
"use strict"; const {promisify} = require("./utils.js"); const instanceMethods = { logIn(credentials) {
Atlas of all connected graphs with up to 6 nodes. This example uses Graphviz via PyGraphviz.  The image should show 142 graphs. We don't plot the empty graph nor the single node graph. (142 is the sum of values 2 to n=6 in sequence oeis.org/A001349). """ import random
return expression.Expression.AcceptVisitor(this, context); } public override SearchParameterQueryGeneratorContext VisitSortParameter(SortExpression expression, SearchParameterQueryGeneratorContext context) { short searchParamId = context.Model.GetSearchParamId(expression.Parameter.Url); var searchParamIdColumn = VLatest.SearchParam.SearchParamId; context.StringBuilder .Append(searchParamIdColumn, context.TableAlias)
error =0; //constraints are treated 3x3 (friction contact) for (it_c = contact_sequence.begin(); it_c != contact_sequence.end() ; it_c += 3 ) { int constraint = *it_c; c1 = constraint/3;
augment images. Examples: >>> replace = (104, 116, 124) >>> policies = [ >>>     [
script.expects(:run_stage).with(:before_deploy) script.expects(:if).with('($TRAVIS_PULL_REQUEST = false) && ($TRAVIS_BRANCH = master) && ($ENV_2 = 1)').yields(script).once script.expects(:else).yields script.expects(:if).with(' ! $TRAVIS_PULL_REQUEST = false').yields(script) script.expects(:if).with(' ! $TRAVIS_BRANCH = master') script.expects(:if).with(' ! $ENV_2 = 1') script.expects(:cmd).with('rvm 1.9.3 --fuzzy do ruby -S gem install dpl', assert: true, echo: false).once
// log to standard Linux log location if (Platform.isLinux()) if (checkCreateLogFileFolder(DEFAULT_LOG_FOLDER_LINUX)) return defaultLogFileDir; // log to profile directory if it is writable.
return; } for (int i = 0; i < MAX_APPEARANCE_EFFECTS; i++) { Message(Chat::Red, "ID: %i :: App Effect ID %i :: Slot %i", i, appearance_effects_id[i], appearance_effects_slot[i]); } }
if double_stranded: if seq_type == "protein": raise ValueError("protein sequences cannot be double-stranded") elif seq_type == "DNA": seq = complement(seq, inplace=False)  # TODO: remove inplace=False elif seq_type == "RNA":
/// <summary> /// Initializes static members of the LogManager class. /// </summary> static LogFactory() { RegisterEvents(DefaultAppEnvironment);
import ws.com.google.android.mms.pdu.PduPart; public class AttachmentDownloadJob extends MasterSecretJob implements InjectableType { private static final long   serialVersionUID = 1L; private static final String TAG              = AttachmentDownloadJob.class.getSimpleName(); @Inject transient TextSecureMessageReceiver messageReceiver;
* Licensed under the MIT License. See LICENSE file in the project root for license information. */ #include <LightGBM/config.h> #include <LightGBM/utils/common.h> #include <LightGBM/utils/log.h>
shared_model::crypto::Keypair keypair = shared_model::crypto::DefaultCryptoAlgorithmType::generateKeypair(); std::vector<shared_model::interface::types::PubkeyType> signatories = { keypair.publicKey()}; };
const std::string DISCOVERY_QUESTION = "Yo, can I play Free-O here, dog?"; const std::string DISCOVERY_ANSWER = "Word!"; #ifdef FREEORION_OPENBSD // Needs to set shorter linger time on OpenBSD to be able to start the session const int SOCKET_LINGER_TIME = 1 << (sizeof(unsigned short) * 4 - 1); #else const int SOCKET_LINGER_TIME = 1 << (sizeof(unsigned short) * 8 - 1);
this.bootNodes = ethNetworkConfig.bootNodes; } public Builder setGenesisConfig(final String genesisConfig) { this.genesisConfig = genesisConfig; return this;
/** * Purge the search cache * * @deprecated Deprecated since Contao 4.12, to be removed in Contao 5.0. */ public function purgeSearchCache() {
import graphql.schema.DataFetcher; import graphql.schema.DataFetchingEnvironment; import org.openqa.selenium.grid.distributor.Distributor; import org.openqa.selenium.internal.Require; import java.net.URI;
The :class:`~MDAnalysis.core.groups.AtomGroup` or :class:`~MDAnalysis.core.universe.Universe` to write. """ self._update_frame(obj) self._write_pdb_header()
return rel; } if (rowType.getFieldCount() != castRowType.getFieldCount()) { throw new IllegalArgumentException("Field counts are not equal: " + "rowType [" + rowType + "] castRowType [" + castRowType + "]"); } final RexBuilder rexBuilder = rel.getCluster().getRexBuilder();
p = p[:1] + struct.pack(">B", res[1]) + p[2:] if res[0] != 0: p = p[:-res[0]] return p + pay
* @returns index of the minimum element */ template <typename T> uint64_t findMinIndex(const std::vector<T> &in_arr, uint64_t current_position = 0) { if (current_position + 1 == in_arr.size()) { return current_position; }
#   specs, but does not add any additional documentation.  We use this #   in rspec to define `it_should_behave_like` (for backward #   compatibility), but we also add docs for that method. def self.alias_it_behaves_like_to(name, *args, &block) (class << self; self; end).define_nested_shared_group_method name, *args, &block end # Works like `alias_method :name, :example` with the added benefit of # assigning default metadata to the generated example. # # @param name [String] example name alias # @param extra [Hash] metadata for the generated example # # @note Use with caution. This extends the language used in your #   specs, but does not add any additional documentation.  We use this #   in rspec to define methods like `focus` and `xit`, but we also add
if (pfrom->nPingUsecTime < ACCEPTABLE_PING_USEC) return true; // Calculate average ping time of all nodes uint16_t nValidNodes = 0; std::vector<uint64_t> vPingTimes;
"github.com/go-kit/kit/endpoint" ) type handlerFunc func(ctx context.Context, request interface{}, svc fleet.Service) (interface{}, error)  func makeDecoderForType(v interface{}) func(ctx context.Context, r *http.Request) (interface{}, error) { t := reflect.TypeOf(v) return func(ctx context.Context, r *http.Request) (interface{}, error) {
#define PROTO(T)                        \ template class glorot_initializer<T>; \ template class he_initializer<T>;     \ template class lecun_initializer<T> #define LBANN_INSTANTIATE_CPU_HALF #include "lbann/macros/instantiate.hpp"
"github.com/onflow/flow-go/crypto" "github.com/onflow/flow-go/model/flow" "github.com/onflow/flow-go/module" "github.com/onflow/flow-go/module/signature" ) // ControllerFactory is a factory object that creates new Controllers with the
if (IsReturnableEntity(se)) { AddEntityToProjection(queryReturnTypeList.Count, se); } queryReturnTypeList.Add(se.DataType); } } else {
if columns is None: columns = {} for column_name, term in columns.items(): if not isinstance(term, ComputableTerm): raise TypeError( "Column {column_name!r} contains an invalid pipeline term " "({term}). Did you mean to append '.latest'?".format( column_name=column_name, term=term, ) ) self._columns = columns self._screen = screen
LayoutInflater inflater = (LayoutInflater) context .getSystemService(Context.LAYOUT_INFLATER_SERVICE); View convertView; if (UserPreferences.getFeedFilter() != UserPreferences.FEED_FILTER_NONE) { convertView = inflater.inflate(R.layout.nav_section_filter_divider, parent, false); convertView.setEnabled(true); } else { convertView = inflater.inflate(R.layout.nav_section_item, parent, false); convertView.setEnabled(false);
TableParams<T> clientProperties(Properties clientProperties); /** * Set path to DFS location containing accumulo-client.properties file. This setting is more * secure than {@link #clientProperties(Properties)} * * @param clientPropsPath *          DFS path to accumulo-client.properties */ TableParams<T> clientPropertiesPath(String clientPropsPath); }
signer := signerFactory(consumerID) statsSaver := bytescount.NewSessionStatsSaver(statsKeeper)  clientCountry, err := detectCountry(ipResolver, locationDetector) if err != nil { return nil, err }  statsSender := bytescount.NewSessionStatsSender(mysteriumAPIClient, vpnSession.ID, providerID, signer, clientCountry) asyncStatsSender := func(stats bytescount.SessionStats) error { go statsSender(stats)
], 'reference'               => &$GLOBALS['TL_LANG']['MSC']['disposition'], 'eval'                    => ['tl_class' => 'w50'], 'sql'                     => "varchar(32) NOT NULL default ''" ], 'embed' => array (
""" universe = MDAnalysis.Universe(topology_path) for element in elements: assert element in universe._topology[topology_section], \ 'Interaction type "{}" not found'.format(name) def test_all_bonds():
import com.hazelcast.nio.IOUtil; import javax.annotation.Nonnull; import java.util.Map.Entry; import static com.hazelcast.jet.Util.entry;
struct _RpmostreedTransactionPrivate { GDBusMethodInvocation *invocation; gboolean executed; /* TRUE if the transaction has completed (successfully or not) */ GCancellable *cancellable; /* For the duration of the transaction, we hold a ref to a new
template <typename Dtype> void BNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) { CHECK_NE(top[0], bottom[0]) << this->type() << " Layer does not " "allow in-place computation.";  top[0]->Reshape(bottom[0]->num(), bottom[0]->channels(), bottom[0]->height(), bottom[0]->width());
} if ua.Lifecycle != nil { rb.Lifecycle = toRawLifecycle(*ua.Lifecycle) rb.ForceSendFields = append(rb.ForceSendFields, "Lifecycle") } if ua.Logging != nil { if *ua.Logging == (BucketLogging{}) {
$parameters['uid'] = $memprofile['uid']; } }  if($parameters['uid'] > 0) { $uid_list[$parameters['uid']] = $parameters['uid']; }
command.setOldColumnName(columnName); command.setNewColumnName(newColumnName); return command; } else if (readIf("CONVERT") && database.getMode().getEnum() == ModeEnum.MySQL) { readIf("TO"); readIf("CHARACTER"); readIf(SET);
// Reset throughput measurement markers. if len(s.q) > 0 { s.throughputStart = now } else { // Will get set to non-zero value when we receive some messages. s.throughputStart = time.Time{} } s.throughputEnd = time.Time{} s.throughputCount = 0 // Using Ceil guarantees at least one message.
class _KerasModel(model_lib.Model): """Internal wrapper class for tf.keras.Model objects.""" def __init__(self, inner_model, dummy_batch, loss_fns, loss_weights=None, metrics=None): # NOTE: sub-classed `tf.keras.Model`s do not have fully initialized # variables until they are called on input. We forced that here.
.WithHeader("X-Custom", "SomeValue"); }; Get["/user/{name}"] = parameters => { return (string)parameters.name;
$js_files_in_head = ''; $header_files     = array(); $concatenate      = get_rocket_option( 'minify_concatenate_js', false ) ? true : false; if ( $rocket_js_enqueued_in_head && is_array( $rocket_js_enqueued_in_head ) ) { $js_files_in_head = implode( '|', $rocket_js_enqueued_in_head ); }
blocksFetched := uint64(1) // we already got the first block in the previous step. var blk *bookkeeping.Block var client FetcherClient for retryCount := uint64(1); blocksFetched <= lookback; { if err := cs.ctx.Err(); err != nil { return cs.stopOrAbort() }
cmd *exec.Cmd } func startClient(program string, args ...string) (*SFTP, error) { // Connect to a remote host and request the sftp subsystem via the 'ssh' // command.  This assumes that passwordless login is correctly configured.
def as_utf8_string(self): return bytes_literal(self.utf8encode(), 'utf8') def as_c_string_literal(self): # first encodes the string then produces a c string literal if self.encoding is None: s = self.as_utf8_string() else:
return "Failed to create VPN config." } vpnSession := vpn_session.NewVpnSession(config) if err != nil { return "Failed to create session." }
} } } for ( i = 0; strings[i] != NULL; ++i) free(strings[i]); free(strings);  for ( i = 0; dicts[i] != NULL; ++i) free(dicts[i]); free(dicts);  for ( i = 0; fontnames[i] != NULL; ++i) free(fontnames[i]); free(fontnames); return( 1 ); }
self.fc_neigh = nn.Linear(self._in_src_feats, out_feats, bias=False) if bias: self.bias = nn.parameter.Parameter(torch.zeros(self._out_feats)) else: self.register_buffer('bias', None) self.reset_parameters() def reset_parameters(self):
mode_manager = objreg.get('mode-manager', scope='window', window=self._win_id) if result.cmdline[0] not in ['leave-mode', 'command-accept', 'repeat-command']: last_command[mode_manager.mode] = ( self._parse_count(text)[1],
// Authelia only supports salted SHA512 or salted argon2id method, i.e., $6$ mode or $argon2id$ mode. type PasswordHash struct { Algorithm   string Iterations  int Salt        string Key         string Memory      int
* System.out.println(Option.of(1).transform(f)); * * // Prints "3-transformed" * System.out.println(Option.<Integer>none().transform(f)); * }</pre> * * @param f   A transformation
//#issue 3961, update the checkbox aria-label when it changed if(selected.length>=1){ if($('#select-all').prop("checked")){ // $('#button-select-all').attr("aria-label", i18n.msg._("Selected All "+ selected.length +" items")); var msg1 = i18n.msg._("Selected All %d items") $('#button-select-all').attr("aria-label", i18n.msg.sprintf(msg1, selected.length)); } else{ // $('#button-select-all').attr("aria-label", i18n.msg._("Selected, "+ selected.length+" items")); var msg2 = i18n.msg._("Selected, %d items") $('#button-select-all').attr("aria-label", i18n.msg.sprintf(msg2, selected.length)); } } else{
); const AddToCartButton = props => { const { item, urlSuffix } = props; const talonProps = useAddToCartButton({ item, urlSuffix }); const { handleAddToCart, isDisabled, isInStock } = talonProps; const { formatMessage } = useIntl();
* * @param job *          Hadoop job instance to be configured * @param info *          Connection information for Accumulo * @since 2.0.0 */ public static void setConnectionInfo(JobConf job, ConnectionInfo info) throws AccumuloSecurityException { setConnectorInfo(job, info.getPrincipal(), info.getAuthenticationToken()); setZooKeeperInstance(job, ConnectionInfoFactory.getClientConfiguration(info)); } /**
using JetBrains.Annotations; #if !SILVERLIGHT namespace NLog.Targets {
"kaitaistruct>=0.7,<0.9", "ldap3>=2.5,<2.6", "passlib>=1.6.5, <1.8", "ply>=3.6, <3.12", "pyasn1>=0.3.1,<0.5", "pyOpenSSL>=17.5,<18.1", "pyparsing>=2.1.3, <2.3",
FIXTURE_SCOPE(command_tests, fixture) TEST(retrieving data) { auto num = 42; opts.add("true", true); opts.add("false", false);
@Override public String toString() { return "ParameterizedMetricKey{key=" + key.name() + ", options=" + options + '}'; }
? storeBlob.ChangellySettings : null;  var changellyAmountDue = changelly!= null? (accounting.Due.ToDecimal(MoneyUnit.BTC) * (1+(changelly.AmountMarkupPercentage/100))) : (decimal?) null; var model = new PaymentModel() {
@Override protected void onPostExecute(Contribution contribution) { super.onPostExecute(contribution); uploadService.queue(UploadService.ACTION_UPLOAD_FILE, contribution); onComplete.onUploadStarted(contribution); } });
upgrade_message = "{0} Agent upgrade discovered, updating to {1} -- exiting" if is_hotfix_upgrade and next_hotfix_time <= now: raise AgentUpgradeExitException(upgrade_message.format(AgentUpgradeType.Hotfix, available_agent.name)) elif (not is_hotfix_upgrade) and next_normal_time <= now: raise AgentUpgradeExitException(upgrade_message.format(AgentUpgradeType.Normal, available_agent.name)) # Not upgrading the agent as the times don't match for their relevant upgrade, logging it appropriately if is_hotfix_upgrade:
@Override public void setDataSource(String streamUrl, String username, String password) { try { setDataSource(streamUrl); } catch (IllegalArgumentException e) { Log.e(TAG, e.toString()); } catch (IllegalStateException e) { Log.e(TAG, e.toString()); } catch(IOException e) { Log.e(TAG, e.toString()); } } }
} // NewDefinitionGenDocCommand create the `vela def gen-doc` command to generate documentation of definitions func NewDefinitionGenDocCommand(c common.Args) *cobra.Command { cmd := &cobra.Command{ Use:   "gen-doc NAME", Short: "Generate documentation of definitions (Only Terraform typed definitions are supported)",
syncSignal := poolSyncSignal(ctx, targetsUpdateCh) syncPool, err := fanout.NewSyncPool(targetsConifg, buildPoolOptions(env, syncSignal)...) if err != nil { logger.Fatal("Failed to create fanout sync pool", zap.Error(err)) } if _, err := pool.StartSyncPool(ctx, syncPool, syncSignal); err != nil { logger.Fatalw("Failed to start fanout sync pool", zap.Error(err))
- Component properties - Transplant methods """ self._classes['group']._add_prop(attr) try: self._classes[attr.level]._add_prop(attr)
flagDatadir string ) // run with `./remove-execution-fork --datadir /var/flow/data/protocol` var rootCmd = &cobra.Command{ Use:   "remove-execution-fork", Short: "remove execution fork", Run:   run, } func Execute() {
using System.Threading; using System.Threading.Tasks; using MediatR; using Microsoft.Health.Fhir.Core.Features.Persistence; using Microsoft.Health.Fhir.Core.Messages.Upsert;
started=worker.started, state=worker.state, first_task_display_name=self._first_task_display_name(worker), num_unread_rpc_messages=len(worker.rpc_messages), **worker.info ) for worker in self._state.get_active_workers()] workers.sort(key=lambda worker: worker['started'], reverse=True)
func (a *Accounts) getContract(contractName string, address flow.Address) ([]byte, error) { contract, err := a.getValue(address, true, contractKey(contractName))
{ public class NetworkConnection : IDisposable { [EditorBrowsable(EditorBrowsableState.Never), Obsolete("Use playerController.visList instead (=NetworkIdentity.visList")] public HashSet<NetworkIdentity> visList => playerController.visList; Dictionary<int, NetworkMessageDelegate> messageHandlers;
ServiceContainerUtil.registerServiceInstance(componentManager, key, implementation); Disposer.register( parentDisposable, () -> BaseSdkTestCompat.unregisterComponent(componentManager, key.getName())); } }
} break; case NECROMANCY: { const uint32_t necroCount = Skill::GetNecromancyPercent( hero ) - hero.GetSecondaryValues( Skill::Secondary::NECROMANCY ) + count; const std::string tmpDescription( std::string( GetNameWithBonus( hero ) ) + std::string( " allows %{necrocount} percent of the creatures killed in combat to be brought back from the dead as Skeletons." ) );
} public void testParseDateWithForCest() throws Exception { GregorianCalendar exp1 = new GregorianCalendar(2017, 0, 28, 22, 0, 0); exp1.setTimeZone(TimeZone.getTimeZone("UTC")); Date expected1 = new Date(exp1.getTimeInMillis()); Date actual1 = DateUtils.parse("Sun, 29 Jan 2017 00:00:00 CEST"); assertEquals(expected1, actual1); GregorianCalendar exp2 = new GregorianCalendar(2017, 0, 28, 23, 0, 0); exp2.setTimeZone(TimeZone.getTimeZone("UTC")); Date expected2 = new Date(exp2.getTimeInMillis()); Date actual2 = DateUtils.parse("Sun, 29 Jan 2017 00:00:00 CET");
ceil_mode=True, out_indices=(3, 4), out_feature_indices=(22, 34), l2_norm_scale=20), neck=None, bbox_head=dict(
if (value && typeof value==='object') { if (!isString(old)) { for (let i in old) if (value[i] == null || value[i] === false) node.style[i] = ''; } for (let i in value) { node.style[i] = typeof value[i]==='number' && !NON_DIMENSION_PROPS[i] ? (value[i]+'px') : value[i];
@Test public void testPrintHelloWorld() throws Exception { String xpath = "//TermApply/TermName[@Image=\"println\"]"; rule.setXPath(xpath); rule.setVersion(XPathRuleQuery.XPATH_2_0); Report report = getReportForTestString(rule,
async def _create_relationships(self, relationships, operation): for relationship in relationships: await self._save_fact(operation, relationship.source) await self._save_fact(operation, relationship.target) self.relationships.append(relationship) async def _save_fact(self, operation, trait): if all(trait) and not any(f.trait == trait[0] and f.value == trait[1] for f in operation.all_facts()): self.facts.append(Fact(trait=trait[0], value=trait[1], score=1)) async def _update_scores(self, operation, increment):
buffer[Position++] = (byte)((value >> 8) & 0xFF); buffer[Position++] = (byte)((value >> 16) & 0xFF); buffer[Position++] = (byte)((value >> 24) & 0xFF); Length = Mathf.Min(Length, Position); } public void WriteInt32(int value) => WriteUInt32((uint)value);
if title, ok := dashboardTitles[key]; ok { return title } dashboard, err := in.loadDashboardResourceUpdatingCache(namespace, template) if err != nil { log.Errorf("Cannot get dashboard %s in namespace %s", template, namespace) return ""
} func (s *Service) Blocklist(overlay swarm.Address, duration time.Duration) error { s.logger.Tracef("libp2p blocklist: peer %s for %v", overlay.String(), duration) if err := s.blocklist.Add(overlay, duration); err != nil { s.metrics.BlocklistedPeerErrCount.Inc() _ = s.Disconnect(overlay)
@Override protected String operation() { return DataOperations.REPLACE; } @Override
log.Info().Msgf("getting collection by id: %v", collectionID) collection, err := storages.Collections.LightByID(collectionID) if err != nil { log.Error().Err(err).Msgf("could not get collection with id: %v", collectionID) return }
// migrationDriver satisfies the remaining need of the Driver interface, since // the package uses PartialDriver under the hood type migrationDriver struct { dialect string } // Open returns the given "file" func (m *migrationDriver) Open(name string) (http.File, error) { var ff *fakeFile switch m.dialect { case "postgres": ff = postgresMigrations[name] }
if ((matchCreators.size() == 0 || mergerCreators.size() == 0)) { LOG_WARN("Match or merger creators empty.  Setting to defaults."); matchCreators = ConfigOptions::getMatchCreatorsDefaultValue(); mergerCreators = ConfigOptions::getMergerCreatorsDefaultValue(); } //fix matchers/mergers - https://github.com/ngageoint/hootenanny-ui/issues/972
using Microsoft.Diagnostics.Tracing.Parsers; using Microsoft.Diagnostics.Tracing.Session; using System.Collections.Generic; using System.Diagnostics; using System.IO;
@Override default Iterator<T> dropWhile(Predicate<? super T> predicate) { Objects.requireNonNull(predicate, "predicate is null"); if (!hasNext()) { return empty(); } else {
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4478-SEA 1645537672 57516320</p> <hr> <p>Varnish cache server</p> </body>
thread_delay = environment.get_value('THREAD_DELAY') thread_error_occurred = False set_strategy_distribution_in_env() # Reset memory tool options. environment.reset_current_memory_tool_options(redzone_size=redzone)
<Typography variant="display3" align="center" color="textPrimary" gutterBottom> The Iodide Notebook </Typography> <div> <Grid container spacing={16} justify="center"> <Grid item>
"github.com/caddyserver/caddy/v2" "github.com/caddyserver/caddy/v2/caddyconfig/caddyfile" "github.com/caddyserver/certmagic" "github.com/tailscale/tscert" "go.uber.org/zap" ) func init() {
# -*- TRACE -*- try: try: from celery.concurrency.future import ( get_future_executor) except RuntimeError: R = retval = fun(*args, **kwargs) state = SUCCESS
* @param beginLine the linenumber, 1-based. */ public TokenEntry(String image, String tokenSrcID, int beginLine) { this(image, tokenSrcID, beginLine, -1, -1); } /**
public override int GetHashCode() { int result = Object.GetHashCode(); ReadOnlySpan<byte> nameBytes = _name.Bytes; result = result * 19 + (byte)nameBytes[0]; result = result * 19 + (byte)nameBytes[_name.Length - 1]; result = result * 19 + (byte)nameBytes[_name.Length>>2]; return result; }
end # @param [PodTarget] pod_target_name # Name of the pod target used to generate the path of its Xcode project. # # @return [Pathname] the path of the project for a pod target. #
ALTER TABLE enroll_secrets DROP COLUMN active, DROP COLUMN name, ADD PRIMARY KEY (secret) ` if _, err := tx.Exec(sql); err != nil { return errors.Wrap(err, "alter enroll_secrets")
@Override public void setJsonParameters(Map<String, Object> allParameters) throws Exception { Map<String, Object> parameters = (Map<String, Object>)allParameters.get("parameters"); Number bitmask = (Number) parameters.get("type"); type = new ConnectionType(bitmask.intValue()); }
.concat_map(lambda tx: tx['outputs']['public_keys']) .reduce(lambda l, r: l + r), multi=True)) # secondary index on inputs/transaction links (txid, output) connection.run( r.db(dbname) .table('bigchain')
$attributes['alt'] = $alt; } $user_avatar = pods_image( $user_avatar, array( $size, $size, 1 ), 0, $attributes, true ); if ( ! empty( $user_avatar ) ) { $avatar = $user_avatar;
{ } public override string ModelTypeName => Constants.MODEL_NUMBERRANGE; } }
} hasDuplicate := false for _, otherCrt := range otherCrts { if otherCrt.Name != crtCopy.Name && otherCrt.Spec.SecretName == crtCopy.Spec.SecretName { hasDuplicate = true break } } if hasDuplicate { c.Recorder.Eventf(crtCopy, corev1.EventTypeWarning, errorDuplicateSecretName, "Duplicate secretName %v", crtCopy.Spec.SecretName)
} public KPrint(KompileOptions kompileOptions) { this(new KExceptionManager(kompileOptions.global), FileUtil.testFileUtil(), new TTYInfo(false, false, false), new PrintOptions(), kompileOptions); } @Inject
print('Start training...') # train gbm = lgb.LGBMRegressor(objective='regression', num_leaves=31, learning_rate=0.05, n_estimators=20)
// IN THE SOFTWARE. //----------------------------------------------------------------------------- #include "netFileServer.h" #include "netFileUtils.h" #include "console/fileSystemFunctions.h"
@NotNull @JsonProperty private Optional<String> metricsFilePath = Optional.absent(); public SingularityS3UploaderConfiguration() { super(Optional.of("singularity-s3uploader.log"));
if "egg_incubators" in inv_data: for incubator in inv_data.get("egg_incubators", {}).get("egg_incubator", []): if "start_km_walked" not in incubator: incubators.append({"id":incubator.get("id", -1), "used":False}) if "pokemon_data" in inv_data: pokemon = inv_data.get("pokemon_data", {}) if pokemon.get("is_egg", False) and "egg_km_walked_target" in pokemon: eggs.append({"id": pokemon.get("id", -1), "km": pokemon.get("egg_km_walked_target", -1), "used": False}) sorting = self.config.longer_eggs_first
origin = req.identifier op = req.operation try: originRole = self.idrCache.getRole( origin, isCommitted=False) or None
if err := unmountVolume(cephRoot); err != nil { klog.Errorf("failed to unmount %s with error %s", cephRoot, err) } else { if err := os.Remove(cephRoot); err != nil { klog.Errorf("failed to remove %s with error %s", cephRoot, err) } } }
} catch (NeosException $exception) { // TODO: Revisit if we actually need to store a stack trace. $logMessage = $this->throwableStorage->logThrowable($exception); $this->logger->error($logMessage, LogEnvironment::fromMethodName(__METHOD__)); return ''; } }
) const ( envInitAppNameHelpPrompt = "An environment will be created in the selected application." envInitNamePrompt              = "What is your environment's name?" envInitNameHelpPrompt          = "A unique identifier for an environment (e.g. dev, test, prod)."
if (value is TimeSpan time) //For those dialects where DbType.Time means TimeSpan. return time; // Todo: investigate if this convert should be made culture invariant, here and in other NHibernate types, // such as AbstractDateTimeType and TimeType, or even in all other places doing such converts in NHibernate. var dbValue = Convert.ToDateTime(value); return dbValue.TimeOfDay; }
final String topic = ClassUtils.getCanonicalName(subscribeType); EventPublisher eventPublisher = INSTANCE.publisherMap.get(topic); if (eventPublisher != null) { eventPublisher.removeSubscriber(consumer); return true; } return false; } /**
﻿using System; using System.Collections; using System.Linq; using NHibernate.Cfg.MappingSchema; using NHibernate.Mapping.ByCode; using NHibernate.Mapping.ByCode.Conformist;
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4471-SEA 1645550862 4178312481</p> <hr> <p>Varnish cache server</p> </body>
import unittest import warnings from Bio._py3k import StringIO try: import numpy
import ( "context"  "github.com/google/go-cmp/cmp" "github.com/google/go-cmp/cmp/cmpopts" "knative.dev/pkg/apis" )
"strings" "time" "github.com/spf13/cobra" v1 "k8s.io/apimachinery/pkg/apis/meta/v1" "k8s.io/apimachinery/pkg/labels"
def ball_throw_reticle_fail_delay(success_prob=0.95): ''' Chances to skip the reticle could be considered constant, so the wait time before throwing is binomial, given that the pokemon does not interrupt... <- TODO ''' for trial in range(10): if random() < success_prob: break  time.sleep(1.8*(trial+random()))
/// </summary> /// <param name="dimensions"></param> /// <returns></returns> public static int[] GetStrides(int[] dimensions) { int[] strides = new int[dimensions.Length]; int stride = 1; for (int i = strides.Length - 1; i >= 0; i--)
'strcmp', 'strcpy', 'strlen', ] IGNORE_CONTAINS_IF_SYMBOLIZED = [ 'libc.so',
{ internal const string FailedToGenerateLogMessage = "Failed to generate log message"; internal static IMvxLog Instance { get; set; } private readonly Logger _logger;
return greytrack_bgs, greytrack_labels def canvas_angle(self, base): """Given base-pair position, return (angle, cosine, sin) (PRIVATE).""" angle = self.sweep * 2 * pi * (base - self.start) / self.length return (angle, cos(angle), sin(angle))
return std::atoi(id.c_str()); } namespace {  int get_gpu(const InitArguments& args) { int use_gpu           = args.device_id; const int ndevices    = args.ndevices;
return ret return lhex(x) class _MultiEnumField(_EnumField): def __init__(self, name, default, enum, depends_on, fmt = "H"):
Synchronous instruments are managed by a sync.Map containing a *record with the current state for each synchronous instrument.  A bound instrument encapsulates a direct pointer to the record, allowing bound metric events to bypass a sync.Map lookup.  A lock-free algorithm is used to protect against races when adding and removing items from the sync.Map.
"""Add another sequence or string to this sequence. The sequence is first converted to a Bio.Seq object before the addition. The returned object is a Bio.Seq, not a BioSQL.DBSeq """ # Let the Seq object deal with the alphabet issues etc return self.toseq() + other
} __sync_sub_and_fetch(&req->pool->_shared.count, 1); req->sock = NULL; } else { h2o_url_t *target_url = &req->pool->targets.entries[req->selected_target]->url; if (target_url->scheme->is_ssl) {
formattedMessage = string.Format(CultureInfo.InvariantCulture, message, args); } var builder = new StringBuilder(message.Length + 32); if (IncludeTimestamp) {
final HashSet<T> set = (HashSet<T>) elements; return set; } final HashArrayMappedTrie<T, T> that = addAll(tree, elements); if (that.size() == tree.size()) { return this; } else { return new HashSet<>(that); } }
SELECT tables.TABLE_NAME 'table' from information_schema.tables as tables inner join snapshot_cycles as snap ON snap.start_time < DATE_SUB(NOW(), INTERVAL %s DAY) AND tables.TABLE_NAME LIKE CONCAT('%%', snap.cycle_timestamp) WHERE tables.TABLE_SCHEMA = %s; """ DROP_TABLE = "DROP TABLE {0}"
} func newFakeUpstream(name string, insecure bool) *fakeUpstream { if strings.Contains(name,"{") && strings.Contains(name,"}") { ReverseProxy := NewDynamicHostReverseProxy(name, "") } else { uri, _ := url.Parse(name)
if ( System::IsFile( *it ) ) { if ( conf.Read( *it ) ) { isValidConfigurationFile = true; const std::string & externalCommand = conf.externalMusicCommand(); if ( !externalCommand.empty() ) Music::SetExtCommand( externalCommand ); break; }
type: 'array', items: { type: 'string' }, }, autoSave: { type: 'string' }, locallySaved: { type: 'array', items: { type: 'string' },
// // Escaping // // Go CDK supports all UTF-8 strings; to make this work with providers lacking // full UTF-8 support, strings must be escaped (during writes) and unescaped // (during reads). The following escapes are required for gcppubsub: //  - Metadata keys: No escaping required. //  - Metadata values: No escaping required. //
"Cannot cast uninferred numeric literal"); ast_error_continue(opt->check.errors, expr, "To give a numeric literal a specific type, " "use the constructor of that numeric type"); return AST_ERROR; default: break;
parsed = urlparse(url) try: auth = (unquote(parsed.username), unquote(parsed.password)) except (AttributeError, TypeError): auth = ('', '') else: auth = ('', '') return auth def to_native_string(string, encoding='ascii'):
} = networkStatus; const { stakingInfoWasOpen } = staking; const shouldShowTadaIconAnimation = isAlonzoActivated && !stakingInfoWasOpen; const shouldShowTadaIcon = IS_TADA_ICON_AVAILABLE && (isAlonzoPending || isAlonzoActivated); const { active, isWalletRoute, hasAnyWallets, hasRewardsWallets } = wallets; const {
'Updating code for Lambda "%s" from location: %s' % (props["FunctionName"], code) ) code = LambdaFunction.get_lambda_code_param(props) client.update_function_code(FunctionName=props["FunctionName"], **code) if "Environment" in update_props: environment_variables = update_props["Environment"].get("Variables", {})
import ( "github.com/dolthub/go-mysql-server/enginetest" "github.com/dolthub/go-mysql-server/sql" ) var BrokenSystemTableQueries = []enginetest.QueryTest{ { Query: `SELECT myTable.i,
if ( isset( $possible_pods[ $pod_name ] ) ) { $this_pod = $possible_pods[ $pod_name ]; if ( is_singular() || is_single() ) { $filter = pods_v( 'single_filter', $this_pod, $filter, true ); } elseif ( is_archive() || is_post_type_archive() || is_tax() || in_the_loop() ) { $filter = pods_v( 'archive_filter', $this_pod, $filter, true ); } }
yield stream["quality"], FilmOnHLS(self.session, vod_id=vod_id, quality=stream["quality"]) else: if not channel or channel in self._special_case_channels: channel = http.get(self.url, schema=self._channel_id_schema) data = self.api.channel(channel) for stream in data["streams"]:
* * @return Metric */ public function postMetric() { $metric = new Metric(Input::all()); return $this->_saveMetric($metric); }
queue_url = self._queue_url(path, req_data, headers) self._set_queue_attributes(queue_url, req_data) elif action == 'DeleteQueue': QUEUE_ATTRIBUTES.pop(self._queue_url(path, req_data, headers), None) if 'QueueName' in req_data: encoded_data = urlencode(req_data, doseq=True) if method == 'POST' else ''
$this->token = $this->getSessionToken(); //TODO: separate expire time from hash?? osTicketSession::renewCookie($time, $cfg->getClientSessionTimeout()); } function getSession() {
public static readonly Regex RelativeMonthRegex = new Regex(DateTimeDefinitions.RelativeMonthRegex, RegexOptions.Singleline); public static readonly Regex StrictRelativeRegex = new Regex(DateTimeDefinitions.StrictRelativeRegex, RegexOptions.Singleline); public static readonly Regex PrefixArticleRegex =
type Ports []Port type Port struct { Name        string  `json:"name"` Protocol    string  `json:"protocol"` AppProtocol *string `json:"appProtocol,omitempty"` Port        int32   `json:"port"` } func (ports *Ports) Parse(ps []core_v1.ServicePort) {
searchResult = await SearchImpl(searchOptions, false, connection, cancellationToken, transaction); // Perform a second read to get the count. searchOptions.AsCountOnly(true); var countOnlySearchResult = await SearchImpl(searchOptions, false, connection, cancellationToken, transaction); searchResult.TotalCount = countOnlySearchResult.TotalCount;
s.HTTP = &HTTP{} } s.recordStatusCode(resp.StatusCode) s.HTTP.Response = responseData(resp) }
* * @access private * * @param array $styles List of styles that are allowed and considered safe. * @return array */ public function get_allowed_css( $styles ) {
return CollectionHelper.EmptySet<string>(); } return null; // The caller should use all lazy properties as the result } } }
$id   = pods_absint( $row ); if ( ! is_numeric( $row ) || 0 === strpos( $row, '0' ) || $row != preg_replace( '/[^0-9]/', '', $row ) ) { if ( $this->id && is_numeric( $this->id ) ) { $id = $this->id; } else { $mode = 'slug'; $id   = $row; } }
throw new IllegalArgumentException( "Unsupported write ahead log version " + new String(magicBuffer)); } } catch (EOFException e) { // Explicitly catch any exceptions that should be converted to LogHeaderIncompleteException log.info("Got " + e.getClass().getSimpleName() + " trying to read WAL header information," + " assuming the rest of the file has no data."); // A TabletServer might have died before the (complete) header was written throw new LogHeaderIncompleteException(e);
} func (q *Query) UserCalendarSubscription(ctx context.Context, id string) (*calendarsubscription.CalendarSubscription, error) { return q.CalSubStore.FindOne(ctx, id) } // todo: return UserCalendarSubscription with generated url once endpoint has been created
{ public function process(ContainerBuilder $container): void { if ($container->hasDefinition('mailer.transport_factory.native') || !class_exists(NativeTransportFactory::class)) { return; }
for i in range(len(other)): # If the indices are equal we can skip partitioning so long as we are not # forced to repartition. See note above about `force_repartition`. if i != 0 or (left_old_idx.equals(joined_index) and not force_repartition): reindex_left = None else:
* @covers Sensei_Data_Cleaner::cleanup_transients */ public function testSenseiTransientsDeleted() { set_transient( 'sensei_123_none_module_lessons', 'value', current_time( 'timestamp' ) + 3600 ); set_transient( 'sensei_answers_123_456', 'value', current_time( 'timestamp' ) + 3600 ); set_transient( 'sensei_answers_feedback_123_456', 'value', current_time( 'timestamp' ) + 3600 ); set_transient( 'quiz_grades_123_456', 'value', current_time( 'timestamp' ) + 3600 ); set_transient( 'other_transient', 'value', current_time( 'timestamp' ) + 3600 ); Sensei_Data_Cleaner::cleanup_all();
+ "SELECT " + KEY_USERNAME + "," + KEY_PASSWORD + " FROM " + TABLE_NAME_FEED_ITEMS + " INNER JOIN " + TABLE_NAME_FEEDS + " ON " + TABLE_NAME_FEED_ITEMS + "." + KEY_FEED + " = " + TABLE_NAME_FEEDS + "." + KEY_ID + " WHERE " + TABLE_NAME_FEED_ITEMS + "." + KEY_IMAGE_URL + "=" + downloadUrl + " UNION SELECT " + KEY_USERNAME + "," + KEY_PASSWORD + " FROM " + TABLE_NAME_FEEDS + " WHERE " + TABLE_NAME_FEEDS + "." + KEY_IMAGE_URL + "=" + downloadUrl; return db.rawQuery(query, null); }
edge.add("to", e.getDestName()); edge.add("toOrdinal", e.getDestOrdinal()); edge.add("priority", e.getPriority()); edge.add("distributedTo", String.valueOf(e.getDistributedTo())); edge.add("type", e.getRoutingPolicy().toString().toLowerCase()); edges.add(edge); }
} func TestRetryConformance(t *testing.T) { host := os.Getenv("STORAGE_EMULATOR_HOST") if host == "" { // This test is currently skipped in CI as the env variable is not set
suggestions[entry['target']].update(entry) suggestions[entry['target']]['count'] += 1 except DataError as e:  # Catches argument exceeds the maximum length of 255 bytes' Error return HttpResponse('Not Implemented: {error}'.format(error=e), status=501) return JsonResponse( sorted(suggestions.values(), key=lambda e: e['count'], reverse=True)[:max_results],
''' src_data, tgt_data = self.src[mode], self.tgt[mode] n = len(src_data) # make sure all devices have the same number of batch n = n // ndev * ndev # XXX: is partition then shuffle equivalent to shuffle then partition?
if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production') { const initDevTools = require('./devtools').initDevTools; initDevTools(); }
# @param [ true | false ] disconnect Whether to disconnect the servers #   being removed. For internal driver use only. # # @return [ Array<Server> | true | false ] If disconnect is any value other #   than false, including nil, returns whether any servers were removed. #   If disconnect is false, returns an array of servers that were removed #   (and should be disconnected by the caller). # # @note The return value of this method is not part of the driver's #   public API.
Start: values.ConvertTime(s.Bounds.Start.Time(s.Bounds.Now)), Stop:  values.ConvertTime(s.Bounds.Stop.Time(s.Bounds.Now)), } return bounds } return nil
from nose.plugins.attrib import attr from numpy.testing import (assert_equal, assert_almost_equal, dec, assert_array_almost_equal, assert_raises, ) from unittest import TestCase import tempdir
"creationTimestamp": "2017-09-25T12:33:24.312-07:00", "name": "default1", "description": "Default network for the project", "selfLink": "https://www.googleapis.com/compute/v1/projects/project1/global/networks/default1", "autoCreateSubnetworks": true, "subnetworks": [ "https://www.googleapis.com/compute/v1/projects/project1/regions/europe-west1/subnetworks/default",
relevant_facts.append(variable_facts) return relevant_facts @staticmethod def _reward_fact_relationship(combo_set, combo_link, score): if len(combo_set) == 1 and len(combo_link) == 1: score *= 2 return score  @staticmethod async def _build_single_test_variant(copy_test, clean_test, combo): """
// BlockFetcher is an interface that can be passed to ReplayStateLog so that // the output of the replay can be adapted to what the user wants. type BlockFetcher interface { BlockFetcherFunc(sid skipchain.SkipBlockID) (*skipchain.SkipBlock, error) LogNewBlock(sb *skipchain.SkipBlock) LogAppliedBlock(sb *skipchain.SkipBlock, head DataHeader, body DataBody) LogWarn(sb *skipchain.SkipBlock, msg, dump string)
you will need to call :meth:`start_py_workers` before calling :meth:`build` of any of the pipelines. You can find more details and caveats of both methods in Python's ``multiprocessing`` module documentation. `py_callback_pickler` : module or tuple, default = None If `py_start_method` is set to *spawn*, callback passed to parallel ExternalSource must be picklable. If run in Python3.8 or newer with `py_callback_pickler` set to None, DALI uses customized pickle when serializing callbacks to support serialization of local functions and lambdas. However, if you need to serialize more complex objects like local classes or you are running older version of Python you can provide external serialization package such as dill or cloudpickle
The output feature of shape :math:`(N, D_{out})` where :math:`D_{out}` is size of output feature. """ check_eq_shape(feat) if isinstance(feat, tuple): feat_src = self.feat_drop(feat[0]) feat_dst = self.feat_drop(feat[1])
"github.com/onflow/flow-go/model/encodable" ) type BeaconPrivateKeys interface { InsertMyBeaconPrivateKey(epochCounter uint64, key *encodable.RandomBeaconPrivKey) error RetrieveMyBeaconPrivateKey(epochCounter uint64) (*encodable.RandomBeaconPrivKey, error) }
"context" "strings" "github.com/spf13/cobra" "sigs.k8s.io/controller-runtime/pkg/client"
if (numMissingInstances > 0) { schedule(numMissingInstances, matchingTaskIds, request, state, deployStatistics, pendingRequest, maybePendingDeploy); } else if (numMissingInstances < 0) { final long now = System.currentTimeMillis();
@property def branches(self): return [ FlatMapStrategy(strategy=strategy, expand=self.expand) for strategy in self.flatmapped_strategy.branches ]
for _, link := range links { if _, found := indexes[link.Attrs().Index]; found { netdev, err := linkToNetDev(link) if err != nil { return err }
config.Interval = 10 * time.Millisecond config.BrokerOpts = append(config.BrokerOpts, resources.WithBrokerClassForBrokerV1Beta1(v1beta1.BrokerClass)) config.FinishedSleep = 40 * time.Second // This is always relative path from the eventing prober in vendor directory config.ConfigTemplate = "../../../../../../test/upgrade/config.toml" probe = prober.RunEventProber(ctx, c.Log, client, config) },
loop do begin tmp = client(opts).get("#{domain.uri}/users", params: { offset: offset, limit: page_limit }) end tmp['accountSettings']['items'].each do |user_data|
return_inverse=True ) if new_categories[0] is _sortable_sentinel: # f_to_use return _sortable_sentinel for locations that should be # missing values in our output. Since np.unique returns the uniques # in sorted order, and since _sortable_sentinel sorts before any
return self.__it.__length_hint__() def __repr__(self): # override list.__repr__ to avoid consuming the generator if self.__done: return repr(self.__consumed) else: return '[{0}]'.format(', '.join( [repr(x) for x in self.__consumed] + ['...'])) def __iter__(self):
func (a *SingleIPAllocator) AllocateNext() (net.IP, error) { a.mutex.Lock() defer a.mutex.Unlock() if a.count >= (a.max - len(a.reservedIPs)) { return nil, fmt.Errorf("no available IP") } for i := 0; i < a.max; i++ {
branchName: alias('branch.name'), state: attr(), number: attr('number'), message: attr('string'),
TODO: Memory tracking """ try: extension_slice_name = SystemdCgroupsApi.get_extension_slice_name(extension_name) + ".slice" cgroup_relative_path = os.path.join('azure.slice/azure-vmextensions.slice', extension_slice_name) cpu_cgroup_mountpoint, _ = self._cgroups_api.get_cgroup_mount_points() cpu_cgroup_path = os.path.join(cpu_cgroup_mountpoint, cgroup_relative_path)
NegativeNumberTermsRegex = new Regex(NumbersDefinitions.NegativeNumberTermsRegex + '$', RegexFlags); AmbiguousFractionConnectorsRegex = new Regex(NumbersDefinitions.AmbiguousFractionConnectorsRegex, RegexFlags);  RelativeReferenceRegex = new Regex(NumbersDefinitions.RelativeOrdinalRegex, RegexFlags);  var builder = ImmutableDictionary.CreateBuilder<Regex, TypeTag>(); // Add Cardinal
#include <iostream> #include <cstring> using namespace std; int max(int a, int b) { return (a > b) ? a : b; }
long dateValue = fieldDateAndTime[0]; long timeNanosRetrieved = fieldDateAndTime[1]; // Variable used to the time in nanoseconds of the date truncated. long timeNanos;
if s.Limit == 0 { s.Limit = search.DefaultMaxResults } if opts.After != nil && *opts.After != "" { err := search.ParseCursor(*opts.After, &s) if err != nil { return nil, err }
import Navigation from 'src/components/Navigation'; import defaultClasses from './appShell.css'; const renderRoutingError = props => <ErrorView {...props} />; class AppShell extends Component { static propTypes = {
for (int i = 23; i < 46; ++i){ rms_tols2[i] = 0.75; // velocities } for (size_t i = 46; i < rms_tols2.size(); ++i){ rms_tols2[i] = 0.15; // muscle activations and fiber-lengths }
Multiplier. Default: 2 avg_deg : int, optional Average degree. Default: 3 rng : numpy.random.RandomState, optional Random number generator. Default: None Examples -------- >>> data = SBMMixtureDataset(n_graphs=16, n_nodes=10000, n_communities=2)
+ "order by mgr, deptno"; RelNode r = checkPlanning(tester, preProgram, new HepPlanner(program), sql); RelCollation ci = r.getInput(0).getTraitSet().getTrait(RelCollationTraitDef.INSTANCE); assertEquals("Window collation is incorrect", "[3, 7]", ci.toString()); RelCollation co = r.getTraitSet().getTrait(RelCollationTraitDef.INSTANCE); assertEquals("Project collation is incorrect", "[0, 1]", co.toString()); } @Test public void testWindowOnSortedInput1() {
def get_java_opts(port): opts = config.LAMBDA_JAVA_OPTS if opts.find('_debug_port_'): java_opts = opts.replace('_debug_port_', ('%s' % port)) return java_opts return opts
CardInfo *card = addCard(set->getShortName(), cardName, false, cardId, cardCost, cmc, cardType, cardPT, cardLoyalty, cardText, colors, relatedCards, upsideDown); if (!set->contains(card)) { card->addToSet(set); cards++; }
break; case execution_mode::validation: case execution_mode::testing: cb->on_batch_evaluate_begin(this); break; default: LBANN_ERROR("invalid execution mode");
QMessageBox::warning(this, tr("Load sets/cards"), tr("Selected file cannot be found.")); return; }  if (QFileInfo(fileName).suffix() != "xml") { // fileName = *.xml QMessageBox::warning(this, tr("Load sets/cards"), tr("You can only import XML databases at this time.")); return; }
} @Override public void onSetNextValue(Consumer<Value<T>> callback) { this.onSetNextValueCallbacks.add(callback); } @Override
if ( interface ) interface->RedrawActionMove( *b, path ); else if ( bridge ) { for ( Indexes::const_iterator dst = path.begin(); dst != path.end() ; ++dst ) { bool doMovement = false; if ( bridge && bridge->NeedDown( *b, *dst ) )
var TelemetryClient = require('../lib/util/telemetry'); utilsCore.isTelemetryEnabled(function (err, isEnabled) { // err will always be null TelemetryClient.init(isEnabled); if (isEnabled) { TelemetryClient.start(process.argv);
String pathToDelete = path + "/" + createdNodeName; LOG.debug("[{}] Failed to acquire lock in tryLock(), deleting all at path: {}", vmLockPrefix, pathToDelete); recursiveDelete(zooKeeper, pathToDelete, NodeMissingPolicy.SKIP); createdNodeName = null; }
hosts = config.delete(:hosts) opts = config.delete(:options) || {} unless config.empty? default_logger.warn("Unknown config options detected: #{config}.") end if uri Mongo::Client.new(uri, options(opts))
.load(media.getImageLocation()) .apply(RequestOptions.diskCacheStrategyOf(ApGlideSettings.AP_DISK_CACHE_STRATEGY)) .submit(iconSize, iconSize) .get(500, TimeUnit.MILLISECONDS); views.setImageViewBitmap(R.id.imgvCover, icon); } catch (Throwable tr) { Log.e(TAG, "Error loading the media icon for the widget", tr);
>>> from Bio import TogoWS >>> for id in TogoWS.search_iter("pubmed", "diabetes+human", limit=10): ...     print("PubMed ID: %s" %id) # maybe fetch data with entry? PubMed ID: ... Internally this first calls the Bio.TogoWS.search_count() and then uses Bio.TogoWS.search() to get the results in batches.
with open(QemuProcess.LOG_PATH) as f: # Strip non-printable characters at beginning of qemu log qemu_log = ''.join(c for c in f.read() if c in string.printable) logs.log_warn(qemu_log[-undercoat.QEMU_LOG_LIMIT:]) else: logs.log_error('Qemu log not found in {}'.format(QemuProcess.LOG_PATH))
import { useEffect, useRef, useState } from 'react'; import { useAppContext } from '../../context/app'; const GROUP_LOADING_DELAY = 750;  export default () => { const [{ isPageLoading }] = useAppContext(); const doneTimeoutRef = useRef();
} } $context = null;  if ($this->strLogFile !== ContaoContext::EMAIL) { $context = array('contao' => new ContaoContext(__METHOD__, $this->strLogFile)); }  System::getContainer()->get('monolog.logger.contao.email')->info($strMessage, $context); return true; }
// Network private static final String PREF_ENQUEUE_DOWNLOADED = "prefEnqueueDownloaded"; public static final String PREF_UPDATE_INTERVAL = "prefAutoUpdateIntervall"; public static final String PREF_MOBILE_UPDATE = "prefMobileUpdateAllowed"; public static final String PREF_EPISODE_CLEANUP = "prefEpisodeCleanup"; public static final String PREF_PARALLEL_DOWNLOADS = "prefParallelDownloads";
// Message Delivery Semantics // // Azure ServiceBus supports at-least-once semantics in the default Peek-Lock // mode; applications must call Message.Ack after processing a message, or // it will be redelivered. However, it also supports a Receive-Delete mode, // which essentially auto-acks a message when it is delivered, resulting in // at-most-once semantics. See SubscriberOptions.AckFuncForReceiveAndDelete.
protected NancyBootstrapperWithRequestContainerBase() { this.RequestScopedTypes = new TypeRegistration[0]; this.RequestScopedCollectionTypes = new CollectionTypeRegistration[0]; } /// <summary> /// Context key for storing the child container in the context
* 2. It will not produce the same results on little-endian and big-endian *    machines. */ unsigned int flb_hash_generate(const void *key, int len) { /* 'm' and 'r' are mixing constants generated offline. They're not really 'magic', they just happen to work well.  */
text="URL: <b>{}</b>".format( html.escape(url.toDisplayString())), yes_action=functools.partial(QDesktopServices.openUrl, url), url=info.url.toString(QUrl.FullyEncoded)) return True elif (info.domain, info.error) in ignored_errors: log.webview.debug("Ignored error on {}: {} (error domain: {}, "
C chan struct{} closeOnce sync.Once }
rpmostree_origin_set_regenerate_initramfs (origin, self->regenerate, self->args); rpmostree_sysroot_upgrader_set_origin (upgrader, origin); if (!rpmostree_sysroot_upgrader_deploy (upgrader, cancellable, error)) return FALSE;
const std::vector<WeightsType*>& other_layer_weights = dynamic_cast<data_type_layer<TensorDataType>*>(other_layer)->get_data_type_weights(); for (size_t i = 0; i < m_weights.size(); ++i) { if (m_weights[i]) { m_weights[i]->set_values(other_layer_weights[i]->get_values()); } } }
size_t start; size_t end; uint32_t recovery; int32_t input_recovery; bool more = true; while (std::getline(fi, line)) {
// Otherwise exec the sandbox tool args = append([]string{command}, args...) command = e.sandboxTool env = []string{"SHARE_NETWORK=" + boolToString(!sandbox.Network), "SHARE_MOUNT=" + boolToString(!sandbox.Mount)} } } cmd := exec.Command(command, args...)
if (err) { return callback(err); } return self.deduplicateTrash(req, piece, callback); }); } };
ts.exec("createtable twithcolontest"); ts.exec("insert row c:f cq value"); ts.exec("scan -r row -cf c:f", true, "value"); ts.exec("scan -b row -cf c:f  -cq cq -e row", true, "value"); ts.exec("scan -b row -c cf -cf c:f  -cq cq -e row", false, "mutually exclusive"); ts.exec("scan -b row -cq col1 -e row", false, "Option -cf is required when using -cq"); ts.exec("deletetable -f twithcolontest"); }
this.threadChecker = threadChecker; this.threadChecker.start(this); this.tasks = Maps.newConcurrentMap(); this.processBuildingTasks = Maps.newConcurrentMap(); this.processRunningTasks = Maps.newConcurrentMap();
placement_zone_ = std::move(zone); } } // namespace server } // namespace yb
} func (m *stubClient) UploadMetrics(ctx context.Context, protoMetrics *metricpb.ResourceMetrics) error { m.rm = append(m.rm, protoMetrics) return nil }
object[i]._oMissFlag = AllObjects[ot].oMissFlag; object[i]._oLight = AllObjects[ot].oLightFlag; object[i]._oBreak = AllObjects[ot].oBreak; object[i]._oDelFlag = FALSE; object[i]._oSelFlag = AllObjects[ot].oSelFlag; object[i]._oPreFlag = FALSE; object[i]._oTrapFlag = FALSE;
} else { var noLibDescription; if (user['Policy'] && user['Policy']['IsAdministrator']) { noLibDescription = Globalize.translate("NoCreatedLibraries", '<a id="button-createLibrary" class="button-link">', '</a>') } else { noLibDescription = Globalize.translate("AskAdminToCreateLibrary"); }
auto storage = static_cast<MutableStorageImpl *>(mutable_storage.get()); storage->block_storage_->forEach( [this](const auto &block) { this->storeBlock(*block); }); try { *(storage->sql_) << "COMMIT"; storage->committed = true;
#define DELIMITER ", " #define ELEMENT_LONGEST_STR(name) #name "; " SERVER_TIMING_DURATION_LONGEST_STR static void emit_server_timing_element(h2o_req_t *req, h2o_iovec_t *dst, const char *name, int (*compute_func)(h2o_req_t *, int64_t *), size_t max_len)
kms_master_key_id = long_uid() sse_specification = {"Enabled": True, "SSEType": "KMS", "KMSMasterKeyId": kms_master_key_id} kms_master_key_arn = aws_stack.kms_key_arn(kms_master_key_id) result = dynamodb.create_table( TableName=table_name,
if path is infer: path = os.getenv('HYPOTHESIS_DATABASE_FILE') if path is not None:  # pragma: no cover # Note: we should retain an explicit deprecation warning for a # further period after this is removed, to ease debugging for # anyone migrating to a new version. note_deprecation( 'The $HYPOTHESIS_DATABASE_FILE environment variable is ' 'deprecated, and will be ignored by a future version of '
from urwid import BaseScreen from bzt import TaurusInternalException, TaurusNetworkError, ToolError from bzt.six import stream_decode, file_type, etree, parse from bzt.six import string_types, iteritems, binary_type, text_type, b, integer_types, request def sync_run(args, env=None): output = subprocess.check_output(args, env=env, stderr=subprocess.STDOUT) return stream_decode(output).rstrip() def get_full_path(path, default=None, step_up=0):
new Argument( 'order', new TypeCollection( new Type\EnumListType(array('id', 'id_reverse', 'alpha', 'alpha-reverse', 'alpha_reverse', 'manual', 'manual_reverse')) ), 'manual' ),
const char* megaFolderLink = request->getLink(); const char* base64pwkey = request->getPrivateKey(); const char* sessionKey = request->getSessionKey(); if (!megaFolderLink && (!(login && password)) && !sessionKey && (!(login && base64pwkey))) {
public static final CalciteSystemProperty<Boolean> TOPDOWN_OPT = booleanProperty("calcite.planner.topdown.opt", false); /** * Whether to run integration tests. */
self.was_ended = arborted try: self.trigger.release() except (THREAD_EXCEPTION, AttributeError): pass class SelectableSelector(object):
def test_preflow_push_makes_enough_space(): #From ticket #1542 G = nx.DiGraph() G.add_path([0, 1, 3], capacity=1) G.add_path([1, 2, 3], capacity=1) R = preflow_push(G, 0, 3, value_only=False) assert_equal(R.graph['flow_value'], 1) def test_shortest_augmenting_path_two_phase():
shape({ small_image: shape({ url: string.isRequired }).isRequired }) ) }),
, qos_(&qos == &TOPIC_QOS_DEFAULT ? participant_->get_default_topic_qos() : qos) , listener_(listen) , user_topic_(nullptr) , num_refs_(0u) { }
import unittest from os import path from Bio import SeqIO from Bio.SeqFeature import FeatureLocation, AfterPosition, BeforePosition from Bio.SeqFeature import CompoundLocation, UnknownPosition class TestReference(unittest.TestCase):
var adApp = ad.category('app') .description($('Commands to display Active Directory applications')); adApp.command('create [name] [home-page] [identifier-uris]') .description($('Creates a new Active Directory application')) .usage('[options] <name> <home-page> <identifier-uris>') .option('-n --name <name>', $('the display name for the application')) .option('-m --home-page <home-page>', $('the URL to the application homepage')) .option('-a --available', $('indicates if the application will be available to other tenants'))
ctx = refreshCtx(t, ctx, user, ds, nil) session, err := ds.NewSession(&fleet.Session{UserID: user.ID}) require.Nil(t, err) ctx = refreshCtx(t, ctx, user, ds, session)
Json::nextToken(json, index); //Loop through all of the key/value pairs of the object bool done = false; while(!done) { //Get the upcoming token token = Json::lookAhead(json, index);
import java.util.List; public class ASTAnnotationTypeDeclaration extends AbstractAnyTypeDeclaration{ public ASTAnnotationTypeDeclaration(int id) {
for include in self.parse_dependencies(filename)[1]: include_path = join_path(os.path.dirname(filename), include) if not path_exists(include_path): include_path = self.context.find_include_file(include, source_file_path = filename) if include_path: if '.' + os.path.sep in include_path: include_path = os.path.normpath(include_path)
// set manual x bounds to have nice steps graphData.formatAxis(fromTime, endTime); if(SP.getBoolean("showactivity", true)) { graphData.addActivity(fromTime, endTime, graphData.maxY); } // Treatments graphData.addTreatments(fromTime, endTime);
} else if ((option == "-ReadX") || (option == "-RX")) { if (argc < 4) { cout << "Both the directory containing Xsens data files and the reader settings file are necessary to read Xsens data. Please retry with these inputs." << endl; PrintUsage(argv[0], cout); exit(-1); }
if "Boolean" == options[:type].to_s Mongoid::Boolean elsif "StringifiedSymbol" == options[:type].to_s Mongoid::StringifiedSymbol else options[:type] || Object end
if o.ovs == nil { o.ovs, err = NewOverseer(ctx, cfg.GPU()) if err != nil { return nil, err } }
Ipv6Support    bool `config:"bool;true"` IgnoreLooseRPF bool `config:"bool;false"` IptablesRefreshInterval            time.Duration `config:"seconds;10"` IptablesPostWriteCheckIntervalSecs time.Duration `config:"seconds;1"` MetadataAddr string `config:"hostname;127.0.0.1;die-on-fail"`
environment.reset_current_memory_tool_options() # Clear exceptions. utils.exc_clear() # Call python's garbage collector. utils.python_gc()
$field->setName($name); if (isset($preset[$name])) { $field->setValue($preset[$name]); } else { $field->setValue($this->getValuesforFieldType($name, $fieldType)); }
def make_lexicon(): from ..Plex import \ Str, Any, AnyBut, AnyChar, Rep, Rep1, Opt, Bol, Eol, Eof, \ TEXT, IGNORE, Method, State, Lexicon, Range letter = Any("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_") nonzero_digit = Any("123456789")
.WillRepeatedly( Return<shared_model::interface::types::SignatureRangeType>({})); auto prev_hash = Hash("prev hash"); auto current_hash = Hash("current hash"); EXPECT_CALL(*block, prevHash()) .WillRepeatedly(testing::ReturnRefOfCopy(prev_hash)); EXPECT_CALL(*block, hash()) .WillRepeatedly(testing::ReturnRefOfCopy(current_hash)); expected_block = block; auto signature = std::make_shared<MockSignature>();
package Example import "github.com/google/flatbuffers/go" import ( context "golang.org/x/net/context"
from graphite.node import LeafNode, BranchNode from graphite.render.hashing import compactHash from graphite.util import unpickle, logtime, is_local_interface from graphite.future import FetchInProgress, wait_for_result from graphite.finders.utils import BaseFinder from graphite.readers.remote import RemoteReader
use Thelia\Core\Event\Cart\CartEvent; use Thelia\Core\Event\Currency\CurrencyChangeEvent; use Thelia\Core\Event\TheliaEvents; use Thelia\Model\Base\ProductSaleElementsQuery; use Thelia\Model\Currency; use Thelia\Model\CartItem; use Thelia\Model\CartItemQuery; use Thelia\Model\ConfigQuery; use Thelia\Model\Tools\ProductPriceTools; /** *
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4472-SEA 1645523406 1399131315</p> <hr> <p>Varnish cache server</p> </body>
var compactingFiles = compacting.stream().flatMap(job -> job.getFiles().stream()).collect(Collectors.toSet()); Preconditions.checkArgument(this.allFiles.containsAll(compactingFiles), "Compacting files %s not in set of all files: %s", compactingFiles, this.allFiles); Preconditions.checkArgument(Collections.disjoint(compactingFiles, this.candidates), "Compacting and candidates overlap %s %s", compactingFiles, this.candidates);
g_data = json.load(open(graph_file)) self._labels = np.load(label_file) self._feats = np.load(feat_file) self.graph = DGLGraph(nx.DiGraph(json_graph.node_link_graph(g_data))) graph_id = np.load(graph_id_file) # lo, hi means the range of graph ids for different portion of the dataset,
dsess := DSessFromSess(ctx.Session) dsess.dbRoots[db.name] = dbRoot{hashStr, newRoot} err = dsess.dbEditors[db.name].SetRoot(ctx, newRoot) if err != nil { return err
AppConfigProvider      string // config provider EnableDocs             bool   // enable generate docs & server docs API Swagger RouterCaseSensitive    bool   // router case sensitive default is true ) type beegoAppConfig struct {
afterEach(function (done) { suite.teardownTest(done); });  // vms-per-lab-policy describe('set vms per lab policy', function () { it('Set vms per lab policy command should work', function (done) { var vmCount = 10000;
<% when "uninvited" %> <button class="btn btn-xs bg-teal">Uninvited</button> <% when "invited" %> <%= view_button_to approve_partner_partner_path(partner_row), { text: "#{status.humanize}", icon: "check" } %>  <% when "awaiting_review" %> <%= view_button_to approve_partner_partner_path(partner_row), { text: "#{status.humanize}", icon: "check", type: "warning" } %> <% when "approved" %> <%= view_button_to approve_partner_partner_path(partner_row), { text: "#{status.humanize}", icon: "check", type: "success" } %> <% else %> <span class="label label-teal">Errored</span> <% end %>
return conn->session_id_len; } int s2n_connection_set_blinding(struct s2n_connection *conn, s2n_blinding blinding) { conn->blinding = blinding;
{"weight": 118, "value":  229}, {"weight": 120, "value": 240}]), 1458) if __name__ == "__main__": unittest.main()
testNoMigrationOnSync: function() { if (!global.enableSyncTests) { return Promise.resolve(); } const appConfig = require('./support/testConfig').integrationAppConfig;
$this->item['department_id'] = $this->createOrFetchDepartment($item_department); } $item_manager_first_name = $this->findCsvMatch($row, "manager_first_name"); $item_manager_last_name = $this->findCsvMatch($row, "manager_last_name"); if ($this->shouldUpdateField($item_manager_first_name)) { $this->item['manager_id'] = $this->fetchManager($item_manager_first_name, $item_manager_last_name); }
fedRem, fedRemDone := allocStringSet() defer fedRemDone() // Remove records for registration entries that no longer exist for id, record := range c.records { if _, ok := update.RegistrationEntries[id]; !ok {
// Close implements driver.Close. func (w *watcher) Close() error { var err error if w.opener != nil { err = w.opener.decBucketRef(w.bucket) w.opener = nil // Ensure that we don't call multiple times. } return err } // ErrorAs implements driver.ErrorAs.
pass def _matrix(self, options): """Creates a matrix for NEXUS object (PRIVATE)""" if not self.ntax or not self.nchar: raise NexusError('Dimensions must be specified before matrix!') self.matrix = {}
runnable_scanners = scanner_builder.ScannerBuilder( global_configs, scanner_configs, service_config, model_name, None).build() # pylint: disable=bare-except for scanner in runnable_scanners:
private final ObjectMapper objectMapper; private final AsyncSemaphore<Response> webhookSemaphore; @Inject public SingularityWebhookSender(SingularityConfiguration configuration, AsyncHttpClient http, ObjectMapper objectMapper, TaskHistoryHelper taskHistoryHelper, WebhookManager webhookManager) {
if member in self.member_cache and member not in db_members: db_members.append(self.member_cache[member]) continue if (member not in self.member_cache and member not in self.member_cache_policies): try: # This is the default case, e.g. 'group/foobar' m_type, name = member.split('/', 1)
import ( "context" "testing"  _ "github.com/influxdata/flux/builtin" "github.com/influxdata/flux/querytest" "github.com/influxdata/flux/semantic" "github.com/influxdata/flux/stdlib/experimental/geo" "github.com/influxdata/flux/values" ) func TestContainsLatLon_NewQuery(t *testing.T) {
if count: return int(count) query = "SELECT SUM(count) FROM listen_count WHERE user_name = :user_name" try: with timescale.engine.connect() as connection:
// Execute shows the environments through the prompt. func (o *showEnvOpts) Execute() error { if err := o.initEnvDescriber(o); err != nil { return err } env, err := o.describer.Describe() if err != nil { return err }
public IImmutableDictionary<string, long> UnitValueMap { get; } bool IDurationExtractorConfiguration.CheckBothBeforeAfter => DateTimeDefinitions.CheckBothBeforeAfter; Regex IDurationExtractorConfiguration.FollowedUnit => DurationFollowedUnit;
} descriptions = uploadItem.getDescriptions(); showImageWithLocalUri(uploadItem.getMediaUri()); setDescriptionsInAdapter(descriptions); }
if err != nil { return err } return printCACertsPEM(env.stdout, bundle.CaCerts) } stream, err := clients.r.ListFederatedBundles(ctx, &common.Empty{})
errValueBadFormat                     = errors.New("value must start with a letter and contain only lower-case letters, numbers, and hyphens") errValueNotAString                    = errors.New("value must be a string") errValueNotAStringSlice               = errors.New("value must be a string slice") errValueNotAnIPNet                    = errors.New("value must be a valid IP address range (example: 10.0.0.0/16)") errValueNotIPNetSlice                 = errors.New("value must be a valid IP address range slice (example: 10.0.0.0/16,10.0.1.0/16)") errInvalidGitHubRepo                  = errors.New("value must be a valid GitHub repository, e.g. https://github.com/myCompany/myRepo") errPortInvalid                        = errors.New("value must be in range 1-65535") errS3ValueBadSize                     = errors.New("value must be between 3 and 63 characters in length")
keyboard->modifiers.latched = latched; keyboard->modifiers.locked = locked; keyboard->modifiers.group = group;  wl_signal_emit(&keyboard->events.modifiers, keyboard); } static void keyboard_key_update(struct wlr_keyboard *keyboard,
raise cmdexc.CommandError("Quickmark '{}' not found!".format(name)) @cmdutils.register(instance='command-dispatcher', scope='window') def bookmark_add(self, url=None, title=None, toggle=False): """Save the current page as a bookmark, or a specific url.
// and their meanings are identical to the ones in LedgerSynchronousMode. AccountsRebuildSynchronousMode int `version[12]:"1"` // MaxCatchpointDownloadDuration defines the maximum duration a client will be keeping the outgoing connection of a catchpoint download request open for processing before // shutting it down. Networks that have large catchpoint files, slow connection or slow storage could be a good reason to increase this value. Note that this is a client-side only // configuration value, and it's independent of the actual catchpoint file size. MaxCatchpointDownloadDuration time.Duration `version[13]:"7200000000000"` // MinCatchpointFileDownloadBytesPerSecond defines the minimal download speed that would be considered to be "acceptable" by the catchpoint file fetcher, measured in bytes per seconds. If the // provided stream speed drops below this threshold, the connection would be recycled. Note that this field is evaluated per catchpoint "chunk" and not on it's own. If this field is zero,
G_CALLBACK (on_hifstate_percentage_changed), NULL); g_auto(RpmOstreeProgress) progress = { 0, }; rpmostree_output_progress_percent_begin (&progress, "Importing rpm-md"); /* This will check the metadata again, but it *should* hit the cache; down * the line we should really improve the libdnf API around all of this.
return nil }
self.selinux = None self.disable_route_warning = False self.jit_enabled = False self.service_name = self.get_service_name() @staticmethod def get_service_name():
String[] ct = getServerConfig(dataId, group, tenant, 3000L); cacheData.setContent(ct[0]); } int taskId = cacheMap.size() / (int) ParamUtil.getPerTaskConfigSize(); cacheData.setTaskId(taskId); lastCacheData = cacheData; }
// Ask prompts the user for any required or important fields that are not provided. func (o *runTaskOpts) Ask() error { if err := o.askTaskGroupName(); err != nil { return err } if err := o.askEnvName(); err != nil {
ns:   maxNamespace, n:    maxName, uid:  testUID, want: fmt.Sprintf("cre-bkr_%s_%s_%s", maxNamespace, strings.Repeat("n", truncatedNameMax), testUID), }, { ns:   "default", n:    maxName, uid:  testUID, want: fmt.Sprintf("cre-bkr_default_%s_%s", strings.Repeat("n", truncatedNameMax+(k8sNamespaceMax-7)), testUID), }} for _, tc := range testCases {
* For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */ /* * This file will be loaded when SonataAdminBundle is enabled and db_driver has its default value, * not corresponding to real persistence mechanism. */
data = test_pipeline(data) data = collate([data], samples_per_gpu=1) # just get the actual data from DataContainer data['img_metas'] = [img_metas.data[0] for img_metas in data['img_metas']] data['img'] = [img.data[0] for img in data['img']] if next(model.parameters()).is_cuda: # scatter to specified GPU data = scatter(data, [device])[0]
</div> </div> <?php /** * Fires after the Settings Tools page content * * @since 3.6 */ do_action( 'rocket_settings_tools_content' ); ?> <!-- Temporary hide the option. The logger can still be activated by adding the following to the wp-config.php file: define( 'WP_ROCKET_DEBUG', true ); <div class="wpr-tools">
var amountAlertmanagers int32 = 3 alertmanager := &v1alpha1.Alertmanager{ ObjectMeta: metav1.ObjectMeta{ Name: "test", }, Spec: v1alpha1.AlertmanagerSpec{ Replicas: &amountAlertmanagers,
// When you're dealing with local file storage, the paths will be different than S3 if  (env('FILESYSTEM_DISK')!='local') { $config['disks']['public'] = $config['disks'][env('FILESYSTEM_DISK')]; $config['disks']['public']['visibility'] = 'public'; } return $config;
// Make sure we don't have an empty string left. if ($name === '') { $name = 'node-' . strtolower(md5($originalName)); } return $name;
if (return_type.is_pyobject and (self.exception_value or self.exception_check) and self.exception_check != '+'): if self.exception_value is None and self.exception_check is True: # Functions in pure python mode defaults to always check return value for exception # (equivalent to except * declaration in Cython language). In this case exception clause # is silently ignored for functions returning Python object. self.exception_check = False else: error(self.pos, "Exception clause not allowed for function returning Python object") else: if self.exception_value is None and self.exception_check and self.exception_check != '+': # Use an explicit exception return value to speed up exception checks.
Enum for defining the Feature Names for all internal and CRP features """ MultiConfig = "MultipleExtensionsPerHandler" class AgentFeature(object):
}, }} className="gatsby-highlight"> <LiveEditor onChange={this._onChange} /> </div> </div> {error && (
} /** * Connect authenticated user as library card to his account. * * @param \Laminas\Http\PhpEnvironment\Request $request Request object * containing account credentials.
Log.debug( "Unable to get user: no auth token on session." ); return null; } if (authToken instanceof AuthToken.OneTimeAuthToken) { return new User(authToken.getUsername(), "Recovery via One Time Auth Token", null, new Date(), new Date()); } final String username = authToken.getUsername(); if (username == null || username.isEmpty())
inputId++; } this.classList.add('emby-select-withcolor'); if (layoutManager.tv) { this.classList.add('emby-select-focusscale');
package fr.free.nrw.commons; import android.content.Context; public interface ViewHolder<T> { void bindModel(Context context, T model); }
An HDF5 daily pricing file. """ return cls({ country: HDF5DailyBarReader.from_file(h5_file, country) for country in h5_file.keys() })
}, 'sync.3.auth': { value: '', type: Setting.TYPE_STRING, public: false }, 'sync.4.auth': { value: '', type: Setting.TYPE_STRING, public: false }, 'sync.7.auth': { value: '', type: Setting.TYPE_STRING, public: false }, 'sync.1.context': { value: '', type: Setting.TYPE_STRING, public: false }, 'sync.2.context': { value: '', type: Setting.TYPE_STRING, public: false },
}); }); it('should not log an error when setting tracked value to null', () => { const elm = createElement('x-foo-tracked-null', { is: SetTrackedValueToNull }); expect(() => document.body.appendChild(elm)).not.toLogErrorDev();
contextValues.Body = new MemoryStream(bodyBytes); } private Request CreateRequest(string method, Url url, Action<BrowserContext> browserContext) { var context = new BrowserContext();
options.keyboard_manager.enable(); options.keyboard_manager.command_mode(); } if (options.focus_button) { $(options.focus_button).focus(); } }); if (options.keyboard_manager) {
"github.com/onflow/flow-go/model/convert" "github.com/onflow/flow-go/model/flow" storagemodel "github.com/onflow/flow-go/storage/badger/model" ) func GenerateExecutionResultAndChunkDataPacks(
""" self.log("serverdisconnect", "debug", [repr(self.server_conn.address)]) address = self.server_conn.address source_address = self.server_conn.source_address self.server_conn.finish() self.server_conn.close() self.channel.tell("serverdisconnect", self.server_conn)
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4482-SEA 1645548240 2054435844</p> <hr> <p>Varnish cache server</p> </body>
self.assertEqual(basename(test_data[trace]["path"][-1]).replace('.ab1', ''), record.name) self.assertEqual(test_data[trace]['seq'], str(record.seq)) self.assertEqual(test_data[trace]['qual'], record.letter_annotations['phred_quality']) self.assertEqual(test_data[trace]['sample'], record.id) self.assertEqual(test_data[trace]['sample_well'], record.annotations['sample_well']) self.assertEqual(test_data[trace]['machine_model'], record.annotations['machine_model'])
out.append(('pac+https://example.com/proxy.pac', 'Proxy autoconfiguration file URL')) return out class SearchEngineUrl(BaseType):
json_data = [] with open(os.path.join( self._destination_path, self._HASHES_FILENAME), 'w') as write_file: for sha256, paths in self._paths_by_hash.items(): json_data.append({"sha256": sha256, "paths": paths}) json.dump(json_data, write_file)
} } $hook_args = array( 'file_path' => &$file_path, 'real_file_path' => &$real_file_path, 'file_name' => &$file_name, 'uploaded_path' => &$uploaded_path, 'success' => &$success, );  $plugins->run_hooks('copy_file_to_cdn_end', $hook_args); } return $success;
return data; } private void handleClassOrInterface(ApexNode<?> node, Object data) { ApexDocComment comment = getApexDocComment(node); if (comment == null) {
opts := f.Options().(*descriptorpb.FieldOptions) if nameMap := proto.GetExtension(opts, pb.E_MaskMapping).(*pb.MaskMapping); !proto.Equal(nameMap, &pb.MaskMapping{}) && nameMap != nil { if _, ok := mapping[nameMap.GetThis()]; ok { return nil, errors.New(errors.InvalidParameter, op, fmt.Sprintf("duplicate mapping from field %q with the mapping key %q", f.Name(), nameMap.GetThis())) } mapping[nameMap.GetThis()] = nameMap.GetThat()
return err } defer expectedFile.Close() _, err = io.Copy(expectedFile, generatedFile) return err
self.norm_cfg = norm_cfg self.loss_point = build_loss(loss_point) fc_in_channels = in_channels + num_classes self.fcs = nn.ModuleList() for k in range(num_fcs): fc = ConvModule( fc_in_channels, fc_channels, kernel_size=1, stride=1,
""" def _get_new_resampler(key): subset = self._dataframe[key] resampler = type(self)(subset, **self.resample_kwargs) return resampler from .series import Series
Timer::~Timer() { delete static_cast<TimerImp *>( _timer ); } bool Timer::valid() const
) const ( fluxcdNameLabel      = "helm.toolkit.fluxcd.io/name" fluxcdNameSpaceLabel = "helm.toolkit.fluxcd.io/namespace" )
// AsFunc allows providers to expose provider-specific types. // See https://github.com/google/go-cloud/blob/master/internal/docs/design.md#escape-hatches // for more details. // If not set, no provider-specific types are supported. AsFunc func(interface{}) bool }
// Rules defines list of rules to control gc strategy at resource level // if one resource is controlled by multiple rules, first rule will be used Rules []GarbageCollectPolicyRule `json:"rules,omitempty"` } // GarbageCollectPolicyRule defines a single garbage-collect policy rule
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4461-SEA 1645550895 4207687925</p> <hr> <p>Varnish cache server</p> </body>
continue } // We reencode here instead of using rawmsg.Data to avoid broadcasting non-canonical encodings handler.net.Relay(handler.ctx, protocol.TxnTag, protocol.Encode(verifiedTxGroup), false, wi.rawmsg.Sender) // restart the loop so that we could empty out the post verification queue. continue
expectedServiceAccount *corev1.ServiceAccount wantCreates            []runtime.Object wantErrCode            codes.Code }{{ name: "k8s service account doesn't exist, create it", wantCreates: []runtime.Object{ NewServiceAccount(kServiceAccountName, testNS, gServiceAccountName),
base = '%s_%s' % (product.id, stockrecord.id) if not options: return base repr_options = [{'option': repr(option['option']), 'value': repr(option['value'])} for option in options] repr_options.sort(key=itemgetter('option')) return "%s_%s" % (base, zlib.crc32(repr(repr_options).encode('utf8'))) def _get_total(self, property):
peers := bs.net.GetPeers(network.PeersPhonebookArchivers) if len(peers) == 0 { return errorNoRedirectPeers } // Get an http peer
namespace { const std::bitset<256> objMnts1ShadowBitset = fheroes2::makeBitsetFromVector<256>( { 0, 5, 11, 17, 21, 26, 32, 38, 42, 45, 49, 52, 55, 59, 62, 65, 68, 71, 74, 75, 79, 80 } ); const std::bitset<256> objMnts2ShadowBitset = fheroes2::makeBitsetFromVector<256>( { 0, 5, 11, 17, 21, 26, 32, 38, 42, 46, 47, 53, 57, 58, 62, 68, 72, 75, 79, 82, 85, 89, 92, 95, 98, 101, 104, 105, 109, 110 } ); } /*
SQLDO("CREATE UNIQUE INDEX `%1channel_info_id` ON `%1channel_info`(`server_id`, `channel_id`, `key`)"); SQLDO("CREATE TRIGGER `%1channel_info_del_channel` AFTER DELETE on `%1channels` FOR EACH ROW BEGIN DELETE FROM `%1channel_info` WHERE `channel_id` = old.`channel_id` AND `server_id` = old.`server_id`; END;"); SQLDO("CREATE TABLE `%1users` (`server_id` INTEGER NOT NULL, `user_id` INTEGER NOT NULL, `name` TEXT NOT NULL, `pw` TEXT, `salt` TEXT, `kdfiterations` INTEGER, `lastchannel` INTEGER, `texture` BLOB, `last_active` DATE)"); SQLDO("CREATE UNIQUE INDEX `%1users_name` ON `%1users` (`server_id`,`name`)"); SQLDO("CREATE UNIQUE INDEX `%1users_id` ON `%1users` (`server_id`, `user_id`)"); SQLDO("CREATE TRIGGER `%1users_server_del` AFTER DELETE ON `%1servers` FOR EACH ROW BEGIN DELETE FROM `%1users` WHERE `server_id` = old.`server_id`; END;");
if acLastErr != nil { return nil, acLastErr } else if ac == nil { return ds.Datastore.AppConfig(ctx) } return ac, nil
# check that slicing is possible try: self.u.trajectory[0] except Exception: raise_from(ValueError("Trajectory must support slicing"), None) self.h = hydrogens self.a = acceptors
if ($this->save()) { event(new CheckoutableCheckedOut($this, $target, Auth::user(), $note)); $this->increment('checkout_counter', 1); return true;
i := x.NewInbound() i.SetRouter(yarpc.NewMapRouter("foo")) require.NoError(t, i.Start()) require.NoError(t, x.Start()) assert.Equal(t, tchannel.ChannelListening, ch.State())
* * @since 5.8.0 * * @global array $wp_registered_widget_updates The registered widget update functions. * * @param WP_REST_Request $request Full details about the request. * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure. */
import org.junit.jupiter.api.Disabled; import org.kie.kogito.testcontainers.quarkus.InfinispanQuarkusTestResource; @Disabled("KOGITO-3269 NativeJavaFNctxIT not working in native mode (Quarkus 1.8 CR1 + GraalVM 20.2)") @NativeImageTest @QuarkusTestResource(InfinispanQuarkusTestResource.Conditional.class) class NativeJavaFNctxIT extends JavaFNctxTest {
}; } @Deprecated @Override public <M extends Metadata> Multimap<Method, MetadataHandler<M>> handlers( MetadataDef<M> def) { return ImmutableMultimap.of();
import { useState, useMemo } from 'react'; import Field from '@alifd/field'; import { log } from '../util'; import { scrollToFirstError, cloneAndAddKey } from './utils'; class NextField extends Field { static useField(options = {}) {
from django.db.models.functions import Concat from django.conf import settings from pontoon.base.models import Project, Entity, TranslatedResource, Translation from pontoon.pretranslation.pretranslate import ( get_translations, update_changed_instances,
std::string name ) { uint32 errnum = 0; char   errbuf[MYSQL_ERRMSG_SIZE]; if (!Open(
int s2n_stuffer_rewrite(struct s2n_stuffer *stuffer) { stuffer->write_cursor = 0; stuffer->read_cursor = 0; return 0; }
v, err := cur.Value() if err != nil { // Mask underlying errors. return Snapshot{}, fmt.Errorf("watch variable: %v", err) } return Snapshot{Value: v, UpdateTime: cur.UpdateTime()}, nil }
# AppEngine APPENGINE = 'appengine' # KE_CLUSTER KE_CLUSTER = 'ke' resource_types = frozenset([ ORGANIZATION,
Index tensor """ def __init__(self, storage, scheme=None, index=None, device=None): self.storage = storage self.index = index self.scheme = scheme if scheme else infer_scheme(self.storage) self.device = device
iterator_stmt = setgen.new_set_from_set( iterator_view, preserve_scope_ns=True, ctx=scopectx) iterator_type = inference.infer_type(iterator_stmt, ctx.env) anytype = iterator_type.find_any(ctx.env.schema) if anytype is not None: raise errors.QueryError( 'FOR statement has iterator of indeterminate type',
import org.apache.iceberg.io.CloseableIterable; public class FindFiles { private FindFiles() { }  private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS"); public static Builder in(Table table) {
try { dockerUtils.pull(task.getTaskInfo().getContainer().getDocker().getImage()); } catch (DockerException e) { throw new ProcessFailedException("Could not pull docker image", e); } }
"github.com/onflow/flow-go/state/protocol" ) // DefaultEmergencySealingThreshold is the default number of blocks which indicates that ER should be sealed using emergency // sealing. const DefaultEmergencySealingThreshold = 400
'Unable to read artifact definitions from: {0:s} with error: ' '{1!s}').format(custom_artifacts_path, exception)) setattr(configuration_object, '_artifact_definitions_path', artifacts_path) setattr( configuration_object, '_custom_artifacts_path', custom_artifacts_path)
name: "no caller id", reqs: []string{workloadEntry.Id}, code: codes.Internal, err:  "failed to fetch registration entries: missing caller ID", expectLogs: []spiretest.LogEntry{ { Level:   logrus.ErrorLevel, Message: "Failed to fetch registration entries", Data: logrus.Fields{ logrus.ErrorKey: "missing caller ID", }, }, },
} @Override public Value atomize() { if (value == null) { value = SaxonXPathRuleQuery.getAtomicRepresentation(attribute.getValue()); } return value; }
} } func newRemapCRDVersionAction(f client.Factory) veleroplugin.HandlerInitializer { return func(logger logrus.FieldLogger) (interface{}, error) { config, err := f.ClientConfig() if err != nil {
return None def _find_dep_file_path(main_file, file_path, relative_path_search=False): abs_path = os.path.abspath(file_path) if not os.path.exists(abs_path) and (file_path.endswith('.pxi') or relative_path_search): # files are looked up relative to the main source file rel_file_path = os.path.join(os.path.dirname(main_file), file_path) if os.path.exists(rel_file_path):
new_weight = match.new_weight old_weight = old_match.new_weight # Rules that increase weights are expected to take precedence over any that # lower the weight. Issues with new fuzzers may be fixed intraday and other # issues like crashes shouldn't be penalized for them. if old_weight > 1.0: return  # Always update the weight if the previous value is the default. This is # required to deal with specifications that are meant to set the weight above # 1.0. Otherwise, prioritize only the most penalizing match for this pairing.
string: function (req, data, name, object, field, callback) { var test = self.apos.launder.string(data[name]); if (tinycolor(test).isValid()) { object[name] = test; } else { object[name] = null; }
} public static void calculateAllSpeeds() { for (Entry<InetAddress, RendererConfiguration> entry : addressAssociation.entrySet()) { InetAddress sa = entry.getKey(); if (sa.isLoopbackAddress() || sa.isAnyLocalAddress()) { continue; } RendererConfiguration r = entry.getValue(); if (!r.isOffline()) { SpeedStats.getInstance().getSpeedInMBits(sa, r.getRendererName()); }
private final ActionButtonCallback actionButtonCallback; private final ActionButtonUtils actionButtonUtils; private final boolean showOnlyNewEpisodes; private final WeakReference<MainActivity> mainActivityRef; public AllEpisodesRecycleAdapter(Context context, MainActivity mainActivity,
import com.hazelcast.jet.core.ProcessorSupplier; import com.hazelcast.jet.core.processor.Processors; import org.elasticsearch.client.RestClient; import javax.annotation.Nonnull; import java.util.ArrayList; import java.util.Collection; import java.util.HashMap;
sig = ECDSA.sign(hashbuf, privateKey).set({ nhashtype: sighashType }); return sig; } throw new Error("signingMethod not supported ", signingMethod); } /**
.miningParameters(node.getMiningParameters()) .privacyParameters(node.getPrivacyParameters()) .nodePrivateKeyFile(KeyPairUtil.getDefaultKeyFile(node.homeDirectory())) .metricsSystem(metricsSystem) .transactionPoolConfiguration(TransactionPoolConfiguration.builder().build()) .ethProtocolConfiguration(EthProtocolConfiguration.defaultConfig()) .clock(Clock.systemUTC()) .isRevertReasonEnabled(node.isRevertReasonEnabled()) .storageProvider(storageProvider) .gasLimitCalculator((gasLimit) -> gasLimit) .build(); } catch (final IOException e) {
shared_model::interface::TransactionBatch>> &value) { auto cache_presence = tx_presence_cache_->check(*value.value); if (not cache_presence) { // TODO andrei 30.11.18 IR-51 Handle database error async_call_->log_->warn( "Check tx presence database error. Batch: {}", value.value->toString()); return; } auto is_replay = std::any_of(
view.querySelector('.btnAudio').classList.add('hide'); } if (currentItem.Chapters.length > 1) { view.querySelector('.btnPreviousChapter').classList.remove('hide'); view.querySelector('.btnNextChapter').classList.remove('hide'); } else {
// SignMask selects the sign bit of an IEEE 754 floating point // number. SignMask = (1 << (SignificandWidth + ExponentWidth)) // MinNormalExponent is the minimum exponent of a normalized // floating point: -1022
"""Custom astroid checker for config calls.""" import sys import pathlib import yaml import astroid from pylint import interfaces, checkers from pylint.checkers import utils OPTIONS = None
using System; using System.Collections; using UnityEngine; using UnityEngine.Events;
for tab in self.widgets(): self._remove_tab(tab) def close_tab(self, tab, *, add_undo=True): """Close a tab. Args:
*/ TEST_F(ChainValidationTest, ValidWhenValidateChainFromOnePeer) { // Valid previous hash, has supermajority, correct peers subset => valid EXPECT_CALL(*supermajority_checker, hasSupermajority(_, _)) .WillOnce(Return(true));
) const defaultTOTPIssuer = "Authelia" const DefaultTOTPPeriod = 30 const DefaultTOTPSkew = 1 // ValidateTOTP validates and update TOTP configuration. func ValidateTOTP(configuration *schema.TOTPConfiguration, validator *schema.StructValidator) {
<% if @ssl_protocol -%> SSLProtocol           <%= @ssl_protocol %> <% end -%> <% if @ssl_cipher -%> SSLCipherSuite        <%= @ssl_cipher %> <% end -%> <FilesMatch "\.(cgi|shtml|phtml|php)$">
# -*- coding: utf-8 -*- from decimal import Decimal as D from django import template from django.test import TestCase from django.utils import translation def render(template_string, ctx):
# # @param [ Hash ] options # # @option options [ Hash ] :filter A filter on the collections returned. # @option options [ true, false ] :authorized_collections A flag, when #   set to true and used with name_only: true, that allows a user without the #   required privilege to run the command when access control is enforced # #   See https://docs.mongodb.com/manual/reference/command/listCollections/
NetworkBehaviour comp = components[i]; if (comp.IsDirty()) { dirtyComponentsMask |= 1UL << i; } }
LocalRepository localRepo = new LocalRepository(localRepoPath); session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepo)); session.setOffline(this.offline); if (this.mavenProperties != null && this.mavenProperties.getConnectTimeout() != null) { session.setConfigProperty(ConfigurationProperties.CONNECT_TIMEOUT, this.mavenProperties.getConnectTimeout()); } if (this.mavenProperties != null && this.mavenProperties.getRequestTimeout() != null) { session.setConfigProperty(ConfigurationProperties.REQUEST_TIMEOUT, this.mavenProperties.getRequestTimeout()); } if (isProxyEnabled()) { DefaultProxySelector proxySelector = new DefaultProxySelector();
} if (false === $input->getOption('admin') && ($options = $this->getGroups()) && 0 !== \count($options)) { $answer = $this->askMultipleChoice( 'Assign which groups to the user (select multiple comma-separated)?', $options, $input, $output ); $input->setOption('group', array_values(array_intersect_key(array_flip($options), array_flip($answer)))); }
# Options for LaTeX output # ------------------------ # Use a latex engine that allows for unicode characters in docstrings latex_engine = "xelatex" # The paper size ('letter' or 'a4'). latex_paper_size = "letter"
const msgsInReadBufferPerPeer = 10 var networkSentBytesTotal = metrics.MakeCounter(metrics.NetworkSentBytesTotal) var networkSentBytesByTag = metrics.NewTagCounter("algod_network_sent_bytes_{TAG}", "Number of bytes that were sent over the network per message tag") var networkReceivedBytesTotal = metrics.MakeCounter(metrics.NetworkReceivedBytesTotal) var networkReceivedBytesByTag = metrics.NewTagCounter("algod_network_received_bytes_{TAG}", "Number of bytes that were received from the network per message tag")  var networkMessageReceivedTotal = metrics.MakeCounter(metrics.NetworkMessageReceivedTotal) var networkMessageReceivedByTag = metrics.NewTagCounter("algod_network_message_received_{TAG}", "Number of complete messages that were received from the network per message tag") var networkMessageSentTotal = metrics.MakeCounter(metrics.NetworkMessageSentTotal) var networkMessageSentByTag = metrics.NewTagCounter("algod_network_message_sent_{TAG}", "Number of complete messages that were sent to the network per message tag")  var networkConnectionsDroppedTotal = metrics.MakeCounter(metrics.NetworkConnectionsDroppedTotal) var networkMessageQueueMicrosTotal = metrics.MakeCounter(metrics.MetricName{Name: "algod_network_message_sent_queue_micros_total", Description: "Total microseconds message spent waiting in queue to be sent"})
Write another test group for this field (e.g. F is `image` and f is `image.build`, write another test functions named `TestApplyEnv_Image_Build`) Expected Behaviors: - Slice type: override-only. Take `security_groups` (which takes []string) as an example. If original is `[]string{1, 2}`, and environment override is `[]string{3}`, the result should be `[]string{3}`. - Map: override value of existing keys, append non-existing keys. */
/** * @brief Function with test cases for Horspool's algorithm * @returns void */ static void test(){ assert(strings::horspool::horspool("Hello World","World") == true);
$query = $em ->createNativeQuery( 'select nt.* from kuma_node_translations nt join kuma_nodes n on n.id = nt.node_id where n.deleted = :deletedFalse and nt.lang = :lang and locate(nt.url, :url) = 1 order by length(nt.url) desc limit 1',
// If prev is coinbase, check that it's matured if (coin.IsCoinBase()) { // Copy these values here because once we unlock and re-lock cs_utxo we can't count on "coin" // still being valid. CAmount nCoinOutValue = coin.out.nValue; int nCoinHeight = coin.nHeight;
code.putln("/* --- Runtime support code --- */") def initialize_main_h_code(self): # h files can include only include a much smaller list of sections # that are manually created here rootwriter = self.rootwriter for part in self.code_layout: if part in ('h_code', 'utility_code_proto_before_types', 'type_declarations', 'utility_code_proto', 'end'): self.parts[part] = rootwriter.insertion_point() def finalize_main_c_code(self):
// exchange headers if err := sendHeaders(ctx, headers, stream); err != nil { _ = stream.Close() return nil, fmt.Errorf("send headers: %w", err) }
if err != nil { return nil, err } prompt := prompt.New() spin := termprogress.NewSpinner() id := identity.New(sess) deployer := cloudformation.New(sess) cfg, err := profile.NewConfig() if err != nil { return nil, err
bool TxPool::insert(Transaction const& _tx) { h256 tx_hash = _tx.sha3(); if (m_txsHash.find(tx_hash) != m_txsHash.end()) { return true; } TransactionQueue::iterator p_tx = m_txsQueue.emplace(_tx).first; m_txsHash[tx_hash] = p_tx; return true;
mainWindow: BrowserWindow, cardanoNode: ?CardanoNode, locale: string, data: { isUpdateAvailable: boolean, } ) => { const { ABOUT, BLOCK_CONSOLIDATION, DAEDALUS_DIAGNOSTICS } = DIALOGS; const { isUpdateAvailable } = data; const { isMacOS, isBlankScreenFixActive } = environment; const translations = require(`../locales/${locale}`);
->onlyMethods(['getConnector', 'getIdentifier']) ->getMock(); $handlerMap = new HandlerMap(); $client = $client ?? $this->getMockBuilder(\Laminas\Http\Client::class) ->onlyMethods([]) ->getMock(); $mockConnector = $this->getMockBuilder(\VuFindSearch\Backend\Solr\Connector::class) ->setConstructorArgs(['http://localhost:8983/solr/biblio', $handlerMap, $client]) ->onlyMethods(['write'])
release.BannerUrl = new Uri(bannerurl); } release.PublishDate = DateTime.Parse(row.QuerySelector(".box_feltoltve2").InnerHtml.Replace("<br />", " "), CultureInfo.InvariantCulture); var sizeSplit = row.QuerySelector(".box_meret2").TextContent.Split(' '); release.Size = ReleaseInfo.GetBytes(sizeSplit[1].ToLower(), ParseUtil.CoerceFloat(sizeSplit[0])); var catlink = row.QuerySelector("a:has(img[class='categ_link'])").GetAttribute("href"); var cat = ParseUtil.GetArgumentFromQueryString(catlink, "tipus");
return tags, nil } func (e *EnvDescriber) filterDeployedSvcs() ([]*config.Service, error) { allSvcs, err := e.configStore.ListServices(e.app) if err != nil { return nil, fmt.Errorf("list services for app %s: %w", e.app, err)
} } // Create the server int return_value = 0; Participant* pServer = Domain::createParticipant(*att, nullptr);
'--theme-staking-stake-pools-search-icon-color': 'rgba(94, 96, 102, 1)', '--theme-staking-stake-pools-search-clear-button-background-color': 'rgba(68, 91, 124, 0.05)', '--theme-staking-stake-pools-title-color': '#5e6066', }, staking: {
e.message.should.match(/platform .* not compatible/) end it 'excludes dependencies from `Specification#subspec_dependencies` ' \ 'with incompatible platforms without raising' do @podfile = Podfile.new do platform :osx, '10.10' pod 'AFNetworking', '2.4.1' # Has an 'AFNetworking/UIKit' iOS-only default subspec
return ErrNoConnection } m.statusDisconnecting() m.disconnect()
return Float64Measure{commonMetric: common}, err } // Configure is a helper that applies all the options to a Config. func Configure(opts []Option) Config { var config Config for _, o := range opts {
public bool IsCardinalLast(string text) { var trimmedText = text.Trim(); return PreviousPrefixRegex.IsMatch(trimmedText); } public string Normalize(string text)
{ struct s2n_hash_state signature_hash; struct s2n_stuffer *in = &conn->handshake.io; struct s2n_blob signature; uint16_t signature_length; GUARD(s2n_hash_init(&signature_hash, conn->pending.signature_digest_alg));  /* Read server ECDH params and calculate their hash */ GUARD(s2n_ecc_read_ecc_params(&conn->pending.server_ecc_params, in, &signature_hash)); if (conn->actual_protocol_version == S2N_TLS12) { uint8_t hash_algorithm;
], ]; $extensions = isset($markdownSection->extensions) ? array_map('trim', explode(',', $markdownSection->extensions)) : []; foreach ($extensions as $ext) { $extClass = sprintf(
end def perl_version if config[:perl] == 5.1 # this check is needed because safe_yaml parses the string 5.10 to 5.1 return "5.10" elsif config[:perl] == 5.2 # this check is needed because safe_yaml parses the string 5.20 to 5.2 return "5.20" else return config[:perl] end end end end
return keybase1.GetTLFCryptKeysRes{}, err } tlfHandle, err := k.getHandleFromFolderName(ctx, query.TlfName, false) if err != nil { return res, err
def _apply(): if "apply_state" in self._optimizer._sparse_apply_args: train_op = self._optimizer._resource_apply_sparse( accum_gradient, var, indices, apply_state=apply_state, ) else: train_op = self._optimizer._resource_apply_sparse( accum_gradient, var, indices ) reset_op = accum_gradient.assign( tf.zeros_like(accum_gradient),
""" if len(args) <= 0: # pylint: disable=len-as-condition args = sys.argv[1:] command, force, verbose, debug, conf_file_path, log_collector_full_mode = parse_args(args) if command == "version": version() elif command == "help":
return errors.New("proof does not match") } var write calypso.Write err = proof.VerifyAndDecode(cothority.Suite, calypso.ContractWriteID, &write) if err != nil { return errors.New("didn't get a write instance: " + err.Error()) }  var xc kyber.Point key := c.String("key") if key == "" {
run_keras_single_device('cpu', 0) @raises(Exception, "TF device and DALI device mismatch. TF*: CPU, DALI*: GPU for output") def test_keras_wrong_placement_gpu(): with tf.device('cpu:0'): model = keras_model()
search: { indexName: "developers-cloudflare", apiKey: "b23088ab4d346409f9d3ece6606344c3", algoliaOptions: { 'facetFilters': '["project:email-routing"]' } }, siteMetadata: { title: "Cloudflare Email Routing docs",
content.body.stream.close(); response.rejectResponseStream(new Error("client disconnected")); } else { const idx = this.streamingResponseCounter; this.streamingResponseCounter += 1; const streamHandle = content.body.stream; const rawResponseStream = new ResponseStream(
end Then(/^I should see projects with following details:$/) do |table| # table is a Cucumber::Core::Ast::DataTable projects = table.hashes projects.each do | project |
<div class="calendar-text"> <%= @event.next_event_occurrence_with_time[:time].strftime('%A, %B %d, %Y') %><br/> <%= raw show_local_time_range(@event) %> <br/> <small><%= raw show_time_range(@event)  %></small> <% if @event.schedule.recurrence_rules.map { |rule| rule.class.name }.include?('IceCube::WeeklyRule') %> <p class="help-block">Occurs weekly at the specified times</p> <% end %>
rescale (bool): If True, return boxes in original image space. Returns: Tensor: Labeled boxes have the shape of (n,5), where the first 4 columns are bounding box positions (tl_x, tl_y, br_x, br_y) and the 5-th column is a score between 0 and 1. """ cfg = self.test_cfg if cfg is None else cfg cfg = copy.deepcopy(cfg)
VisualNode->addObject(mapping); } else std::cerr << "Visual Mapping creation not possible. Mapping should be Barycentric or Identity. Found MappingType enum: " << mappingT << std::endl; return VisualNode; }
// request from network data, err := s.retrieval.RetrieveChunk(ctx, addr) if err != nil { targets := sctx.GetTargets(ctx) if s.recoveryCallback != nil && targets != "" { go func() { err := s.recoveryCallback(ctx, addr) if err != nil {
} scope :owned_by, lambda { |username| joins(owner: :chef_account).where('accounts.username = ?', username) } # Search
func BenchmarkBrowseWriteJSON(b *testing.B) { fsrv := new(FileServer) listing := browseListing{ Name:     "test", Path:     "test",
} /* add date: if it's missing from the response */ if (h2o_find_header(&req->res.headers, H2O_TOKEN_DATE, 0) == -1) h2o_resp_add_date_header(req); return 0;
// Notify the PeerList that it will stop receiving requests Stop() error // Choose a Peer for the next call, block until a peer is available (or timeout) ChoosePeer(context.Context, *Request) (Peer, error) }
<li><%= link_to 'Learn Chef', learn_chef_url, target: '_blank' %></li> <li><%= link_to 'Docs', chef_docs_url, target: '_blank' %></li> <li><%= link_to 'Training', chef_training_url, target: '_blank' %></li> <li><%= link_to 'Join Chef Community Slack', 'http://community-slack.chef.io/', target: '_blank' %></li> <li><%= link_to 'Login to Chef Commuity Slack', 'https://chefcommunity.slack.com', target: '_blank' %></li> <li><%= link_to 'Read Slack Logs', 'https://chefcommunity.slackarchive.io', target: '_blank' %></li> </ul>
if labels.numel() == 0: return bboxes, labels out_bboxes, keep = batched_nms(bboxes[:, :4].contiguous(), bboxes[:, -1].contiguous(), labels, cfg.nms_cfg) out_labels = labels[keep]
assert len(parts.dml_ctes) == 1 cte = next(iter(parts.dml_ctes.values()))[0] relctx.add_type_rel_overlay( ir_stmt.subject.typeref, 'union', cte, dml_stmts=dml_stack, path_id=ir_stmt.subject.path_id, ctx=ctx) elif isinstance(ir_stmt, irast.DeleteStmt): relctx.add_type_rel_overlay(
* Stores all nearby places found and related users response for * each place while uploading media */ public static HashMap<Place,Boolean> nearbyPopupAnswers; @SuppressLint("CheckResult") @Override
def hey(phrase): pass
*/ package org.kie.kogito; /** * Marker interface to identify a KogitoConfig (i.e. ProcessConfig, ...) */ public interface KogitoConfig { }
export const productsGalleryItemName = '[data-cy="CategoryContent-root"] [data-cy="GalleryItem-name"], [data-cy="SearchPage-root"] [data-cy="GalleryItem-name"]'; export const productsNoProductsFound = '[data-cy="CategoryContent-root"] [data-cy="NoProductsFound-root"], [data-cy="SearchPage-noResult"]';
new ExtensionAttribute(ATTRIBUTE_FORM_FIELD_VALIDATION), new ExtensionAttribute(ATTRIBUTE_TASK_SERVICE_EXTENSIONID), new ExtensionAttribute(ATTRIBUTE_TASK_USER_SKIP_EXPRESSION), new ExtensionAttribute(ATTRIBUTE_TASK_ID_VARIABLE_NAME)); public UserTaskXMLConverter() {
*/ package org.apache.accumulo.test.functional; import static org.apache.accumulo.core.conf.Property.INSTANCE_CRYPTO_PREFIX; import org.apache.accumulo.core.cli.BatchWriterOpts; import org.apache.accumulo.core.cli.ScannerOpts;
# # @since 2.4.0 def changes _changes = {} changed.each do |attr| change = attribute_change(attr) _changes[attr] = change if change end _changes.with_indifferent_access end # Call this method after save, so the changes can be properly switched.
Parameters ---------- G : NetworkX graph A graph source : node in `G` distance : the distance of the wanted nodes from `source`
return selection # Second Legendre polynomial lg2 = lambda self, x: (3*x*x - 1)/2 def run(self, **kwargs): """
c = CacheClass() self.assertEqual(2, c.foo(1)) self.assertEqual(2, c.foo(1)) self.assertEqual(3, c.foo(2)) self.assertListEqual([ (1,), (1,), (2,), ], c.called) def test_name_clash(self):
import java.util.Collections; import java.util.List; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ThreadFactory; import software.amazon.awssdk.annotations.Generated; import software.amazon.awssdk.annotations.SdkInternalApi; import software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler;
} } // View can be used in: MediaType, Response // View adds a new view to a media type. A view has a name and lists attributes that are // rendered when the view is used to produce a response. The attribute names must appear in the // media type definition. If an attribute is itself a media type then the view may specify which
// bultin transport, and instead use a lossy shim layer variant. auto testTransport = std::make_shared<test_UDPv4TransportDescriptor>(); testTransport->sendBufferSize = 1024; testTransport->maxMessageSize = 1024; testTransport->receiveBufferSize = 65536; // We drop 20% of all data frags testTransport->dropDataFragMessagesPercentage = 20;
public const string SpecialDayRegex = @"\b((d?o\s+)?(dia\s+antes\s+de\s+ontem|antes\s+de\s+ontem|anteontem)|((d?o\s+)?(dia\s+|depois\s+|dia\s+depois\s+)?de\s+amanh[aã])|(o\s)?dia\s+seguinte|(o\s)?pr[oó]ximo\s+dia|(o\s+)?[uú]ltimo\s+dia|ontem|amanh[ãa]|hoje)|(do\s+dia$)\b"; public const string SpecialDayWithNumRegex = @"^[.]"; public const string ForTheRegex = @".^"; public static readonly string FlexibleDayRegex = $@"(?<DayOfMonth>([a-z]+\s)?({WrittenDayRegex}|{DayRegex}))"; public static readonly string WeekDayAndDayOfMonthRegex = $@"\b{WeekDayRegex}\s+(dia\s+{FlexibleDayRegex})\b"; public static readonly string WeekDayAndDayRegex = $@"\b{WeekDayRegex}\s+({DayRegex})(?!([-:/]|\.\d|(\s+({AmDescRegex}|{PmDescRegex}|{OclockRegex}))))\b"; public static readonly string WeekDayOfMonthRegex = $@"(?<wom>(n?[ao]\s+)?(?<cardinal>primeir[ao]|1[ao]|segund[ao]|2[ao]|terceir[ao]|3[ao]|[qc]uart[ao]|4[ao]|quint[ao]|5[ao]|[uú]ltim[ao])\s+{WeekDayRegex}\s+{MonthSuffixRegex})";
for (Entry<Class<? extends RelNode>, Collection<RelNode>> e : result.asMap().entrySet()) { resultCount.put(e.getKey(), e.getValue().size()); } assertThat(expected, equalTo(resultCount)); } @Test public void testNodeTypeCountSample() {
package com.hazelcast.jet.core; import com.hazelcast.jet.JetInstance; import com.hazelcast.jet.Job; import com.hazelcast.jet.Observable; import com.hazelcast.jet.function.Observer;
public void ethPeerIsMissingResultInNoUpdate() { when(ethPeers.peer(any())).thenReturn(null); final EthSynchronizerUpdater updater = new EthSynchronizerUpdater(ethPeers); updater.updatePeerChainState(1, createAnonymousPeerConnection());
case pb.ExecutionStage_EXECUTING: c.state.LogBuildResult(tid, target.Label, core.TargetBuilding, "Building...") case pb.ExecutionStage_COMPLETED: c.state.LogBuildResult(tid, target.Label, core.TargetBuilding, "Completed...") } } else { switch metadata.Stage {
def handle_put_rule(data): schedule = data.get('ScheduleExpression') enabled = data.get('State') != 'DISABLED' if schedule: job_func = get_scheduled_rule_func(data)
StreamBase & Skill::operator<<( StreamBase & msg, const Primary & skill ) { return msg << skill.attack << skill.defense << skill.knowledge << skill.power; } StreamBase & Skill::operator>>( StreamBase & msg, Primary & skill ) { return msg >> skill.attack >> skill.defense >> skill.knowledge >> skill.power; } StreamBase & Skill::operator>>( StreamBase & sb, Secondary & st )
// 0 and 2, but block 0 points further than 2. // This needs to be handled correctly. func TestOptimizeMiddle(t *testing.T) { const numBlock = 9 local := onet.NewLocalTest(cothority.Suite) defer local.CloseAll()
"""Mark all notifications of the currently logged in user as read""" request.user.notifications.mark_all_as_read() log_ux_action( action_type="mark_all_notifications_as_read", experiment="Notifications 1.0", data={"utm_source": request.GET.get("utm_source"),}, ) return JsonResponse({"status": True})
for _, opt := range modalOpts { if _, exists := results[opt.Name]; exists { return nil, errors.New("error: multiple values provided for `" + opt.Name + "'") } results[opt.Name] = ""
sym_g.ndata[key] = g.ndata[key] g = sym_g dgl.distributed.partition_graph(g, args.dataset, args.num_parts, 'data', part_method=args.part_method, balance_ntypes=balance_ntypes, balance_edges=args.balance_edges)
*/ public class DBWriter { private static final String TAG = "DBWriter"; private static final ExecutorService dbExec;
* Serializes an AST or a partial AST to JSON. */ public class JavaParserJsonSerializer { public static final String SERIALIZED_CLASS_KEY = "!";  public void serialize(Node node, JsonGenerator generator) { requireNonNull(node); Log.info("Serializing Node to JSON.");
scope = if params[:starred].present? scope.starred elsif params[:archive].present? scope.archived else scope.inbox end @types               = scope.distinct.group(:subject_type).count
startTime = &parsed } if opts.Duration != nil { if endTime == nil { end := parsed.Add(*opts.Duration) endTime = &end }  if parsed.After(*endTime) { break } } entry.TimestampUnix = parsed.Unix()
# Purpose # This code example demonstrates how to upload an object to a bucket in # Amazon Simple Storage Service (Amazon S3), and how to associate specified # metadata with the uploaded object. # snippet-start:[s3.ruby.s3-ruby-example-upload-item-with-metadata]
</div> <div class="card-body p-0"> <div class="row"> <div class="col-sm-4 col-4"> <div class="description-block border-right"> <h1 style="color:purple"><%= total_on_hand(@impact_metrics.dig("agency", "families_served") || 0) %> </h1> <h5>Families served</h5>
}; render() { const { apiBase, children, routerProps, using: Router } = this.props; return ( <Router {...routerProps}>
} /** * @brief Save the current screen to a screen??.PCX (00-99) in file if available, then make the screen red for 200ms.  */ void CaptureScreen() {
}) encoder := zapcore.NewConsoleEncoder(zap.NewDevelopmentEncoderConfig()) core := zapcore.NewCore(encoder, zapcore.Lock(os.Stderr), enabler) l := zap.New(core) Logger = func(ctx context.Context) *zap.Logger { return l } }
{ // Create a committer and recursively delete all the associated LocalNodes, and their associated transfer and file objects. // If any have transactions in progress, the committer will ensure we update the transfer database in an efficient single commit. DBTableTransactionCommitter committer(client->tctable); localroot.reset(); }
"errors" ) // Trie implements the merkle prefix tree described in the coniks paper. type Trie struct { nonce []byte
public function up() { // This artisan call may take a while \Log::info('This could take a while.... '); Artisan::call('snipeit:counter-sync'); $output = Artisan::output(); \Log::info($output);
func (cmd DiffCmd) createArgParser() *argparser.ArgParser { ap := argparser.NewArgParser() ap.SupportsFlag(DataFlag, "d", "Show only the data changes, do not show the schema changes (Both shown by default).") ap.SupportsFlag(SchemaFlag, "s", "Show only the schema changes, do not show the data changes (Both shown by default).") ap.SupportsFlag(SummaryFlag, "", "Show summary of data changes") ap.SupportsString(formatFlag, "r", "result output format", "How to format diff output. Valid values are tabular & sql. Defaults to tabular. ") ap.SupportsString(whereParam, "", "column", "filters columns based on values in the diff.  See {{.EmphasisLeft}}dolt diff --help{{.EmphasisRight}} for details.") ap.SupportsInt(limitParam, "", "record_count", "limits to the first N diffs.") ap.SupportsString(queryFlag, "q", "query", "diffs the results of a query at two commits")
func (b *Broadcast) handleContactNodes(msg struct { *sda.TreeNode ContactNodes }) { dbg.Lvl3(b.Info(), "Received message from", msg.TreeNode.String()) if msg.TreeNode.Id == b.Root().Id { dbg.Lvl3(b.Info(), "Contacting everybody")
private final Schema schema; private final List<PartitionField> fields = Lists.newArrayList(); private final Set<String> partitionNames = Sets.newHashSet(); private Map<Map.Entry<Integer, String>, PartitionField> dedupFields = Maps.newHashMap(); private int specId = 0; private final AtomicInteger lastAssignedFieldId = new AtomicInteger(PARTITION_DATA_ID_START - 1);
//noinspection unchecked NodeList<ImportDeclaration> modifiableList = new NodeList<>(n); modifiableList.sort( comparingInt((ImportDeclaration i) -> i.isStatic() ? 0 : 1) .thenComparing(NodeWithName::getNameAsString)); for (Object node : modifiableList) { ((Node) node).accept(this, arg);
} /** * @ticket 49404 * @dataProvider data_test_wp_is_json_content_type */ public function test_wp_is_json_content_type( $input, $expected ) {
req.Header.Set("Accept", "application/json") rec := httptest.NewRecorder() code, err := b.ServeHTTP(rec, req) if code != http.StatusOK { t.Fatalf("In test %d: Wrong status, expected %d, got %d", i, http.StatusOK, code)
$this->create_authors( $this->config['urls']['authors'] ); require_once WP_ROCKET_PLUGIN_ROOT . 'inc/common/purge.php'; }
if k.PrivateId == "" { return fmt.Errorf("database key vet for write: missing private id: %w", db.ErrInvalidParameter) } switch opType { case db.CreateOp: if k.RootKeyId == "" { return fmt.Errorf("database key vet for write: missing root key id: %w", db.ErrInvalidParameter) } case db.UpdateOp: return fmt.Errorf("database key vet for write: key is immutable: %w", db.ErrInvalidParameter) } return nil }
* * This program uses a more efficient logic to rotate the array as each element * is roated d times in only single iteration. This uses less time for more long * arrays. * * The Algorithm used is: * 1) Input array, size, and no of times to rotate. * 2) Create a new array and save first no_of_rotate elements into it. * 3) Copy the remaining elements from starting index of the input array. * 4) Copy back the elements saved in the new array to the input array. * 5) Print the array. */ void rotateArray(int *a, int size, int no_of_rotate) {    // Rotating the Array int *arr = new int[no_of_rotate];
type SnapshotOptions struct { Host  string Paths []string } var snapshotOptions SnapshotOptions
<form role="search" method="get" class="search-form form-inline" action="<?php echo esc_url(home_url('/')); ?>"> <div class="input-group"> <input type="search" value="<?php echo get_search_query(); ?>" name="s" class="search-field form-control" placeholder="<?php _e('Search', 'roots'); ?> <?php bloginfo('name'); ?>"> <label class="hide"><?php _e('Search for:', 'roots'); ?></label> <span class="input-group-btn"> <button type="submit" class="search-submit btn btn-default"><?php _e('Search', 'roots'); ?></button>
} type testT struct { builder            *testpkg.Builder certificateRequest *v1alpha1.CertificateRequest checkFn     func(*testpkg.Builder, ...interface{}) expectedErr bool
ctx := context.Background() account, err := c.client.GetAccount(ctx, accountAddress) if err != nil { return nil, fmt.Errorf("could not get account: %w", err) } return account, nil
if (IsTileType(tile, MP_STATION) || IsTileType(tile, MP_INDUSTRY)) { const Station *st = nullptr; if (IsTileType(tile, MP_STATION)) { st = Station::GetByTile(tile); } else { const Industry *in = Industry::GetByTile(tile);
Auth: Auth{ Type: AuthTypeNone, }, Enabled:      true, InClusterURL: "http://grafana.istio-system:3000", IsCore:       false, }, Istio: IstioConfig{ ComponentStatuses: ComponentStatuses{
def assertAlmostEqualList(self, list1, list2, **kwargs): self.assertEqual(len(list1), len(list2)) for (v1, v2) in zip(list1, list2): self.assertAlmostEqual(v1, v2, **kwargs) def test_nucleotides(self): filename = "GFF/multi.fna"
var _ tracesdk.SpanExporter = (*Exporter)(nil) var _ metricsdk.Exporter = (*Exporter)(nil) // NewConfig initializes a Config struct with default values and applies // any ExporterOptions provided. func NewConfig(opts ...ExporterOption) Config { cfg := Config{ numWorkers:        DefaultNumWorkers,
'root': { 'level': logging.DEBUG, 'handlers': ['console', 'file', 'errors'], 'port': DEFAULT_SOCKET_LOGGING_PORT }, }
public HttpResponse handleException(RequestContext ctx, HttpRequest req, Throwable cause) { ZipkinHttpCollector.metrics.incrementMessagesDropped(); String message = cause.getMessage() != null ? cause.getMessage() : ""; if (cause instanceof IllegalArgumentException) { return HttpResponse.of(BAD_REQUEST, MediaType.ANY_TEXT_TYPE, message); } else { LOGGER.warn("Unexpected error handling request.", cause);  return HttpResponse.of(INTERNAL_SERVER_ERROR, MediaType.ANY_TEXT_TYPE, message); } }
request = self.client.objects().get_media(bucket=bucket, object=obj) downloader = http.MediaIoBaseDownload(fp, request, chunksize=chunksize) _, done = downloader.next_chunk() return return_fp
def get_commited_votes(self, bigchain, election_pk=None): if election_pk is None: election_pk = self.to_public_key(self.id) txns = list(backend.query.get_asset_tokens_for_public_keys(bigchain.connection, self.id, [election_pk], 'VALIDATOR_ELECTION_VOTE')) return self.count_votes(election_pk, txns) @classmethod
""" Checks iterator stop condition, gets DALI outputs and perform reset in case of StopIteration """ if self._size > 0 and self._counter >= self._size: if self._auto_reset: self.reset() raise StopIteration
class IntervalDomain(dbops.Domain): def __init__(self) -> None: super().__init__( name=('edgedb', 'duration_t'), base='interval', constraints=( dbops.DomainCheckConstraint( domain_name=('edgedb', 'duration_t'), expr=r''' EXTRACT(months from VALUE) = 0 AND EXTRACT(years from VALUE) = 0 AND
} public R startsWith(BoundReference<String> ref, Literal<String> lit) { throw new UnsupportedOperationException("Unsupported operation."); } public <T> R predicate(BoundPredicate<T> pred) {
* @param UserInterface|string|null $user The new user, or user's UUID * @api */ public function setOwner($user): void { // Note: We need to do a bit of uuid juggling here, because we can't bind the workspaces Owner to a specific // implementation, and creating entity relations via interfaces is not supported by Flow. Since the property
if util.verify_vote_signature(block, vote): return block else: raise ImproperVoteError('Block {block_id} already has an incorrectly signed vote ' 'from public key {me}').format(block_id=block['id'], me=self.me) # Run the plugin block validation logic
} func (m *Mutation) UpdateUserContactMethod(ctx context.Context, input graphql2.UpdateUserContactMethodInput) (bool, error) { err := withContextTx(ctx, m.DB, func(ctx context.Context, tx *sql.Tx) error { cm, err := m.CMStore.FindOneTx(ctx, tx, input.ID)
type Headers struct { // This representation allows us to make zero-value valid items map[string]string // original non-canonical headers, foo-bar will be treated as different value than Foo-bar originalItems map[string]string } // NewHeaders builds a new Headers object.
return fr, nil } func fetchFederationRelationship(tx *gorm.DB, trustDomain spiffeid.TrustDomain) (*datastore.FederationRelationship, error) { var model FederatedTrustDomain err := tx.Find(&model, "trust_domain = ?", trustDomain.String()).Error switch { case errors.Is(err, gorm.ErrRecordNotFound): return nil, nil
@classmethod def materialize(cls, future): """ Materialize data matching `future` object. Parameters ----------
private void performMapReadyActions() { if (((MainActivity)getActivity()).activeFragment == ActiveFragment.NEARBY && isMapBoxReady) { if(!applicationKvStore.getBoolean("DoNotAskForLocationPermission", false) || PermissionUtils.hasPermission(getActivity(), Manifest.permission.ACCESS_FINE_LOCATION)){ checkPermissionsAndPerformAction(); }else{
if self._multi_etype: assert isinstance(val, dict), \ 'Current HeteroEdgeDataView has multiple edge types, ' \ 'please pass the edge type and the corresponding data through a dict.' for (etype, data) in val.items(): etid = self._graph.get_etype_id(etype) self._graph._set_e_repr(etid, self._edges, {key : data}) else: assert isinstance(val, dict) is False, \ 'The HeteroEdgeDataView has only one edge type. ' \ 'please pass a tensor directly' self._graph._set_e_repr(self._etid, self._edges, {key : val}) def __delitem__(self, key):
} ] ) _await_stack_completion(stack_name) resp = cfn.describe_stacks(StackName=stack_name) stack_outputs = [stack['Outputs'] for stack in resp['Stacks'] if stack['StackName'] == stack_name]
WriteRelabelConfigs []RelabelConfig `json:"writeRelabelConfigs,omitempty"` //BasicAuth for the URL. BasicAuth *BasicAuth `json:"basicAuth,omitempty"` // Bearer token for remote write. BearerToken string `json:"bearerToken,omitempty"` // File to read bearer token for remote write. BearerTokenFile string `json:"bearerTokenFile,omitempty"`
$oldString = $string; $string = $handler->createBoostQueryString($string); // If a boost was added, we don't want to highlight based on // the boost query, so we should use the non-boosted version: if ($highlight && $oldString != $string) { $params->set('hl.q', $oldString); } } } elseif ($handler->hasDismax()) {
if g.Pkg != "main" { return } pwd, err := os.Getwd() if err != nil { return }
subnetsFlagDescription        = "Optional. The subnet IDs for the task to use. Can be specified multiple times." securityGroupsFlagDescription = "Optional. The security group IDs for the task to use. Can be specified multiple times." envVarsFlagDescription        = "Optional. Environment variables specified by key=value separated with commas." commandFlagDescription        = `Optional. The command that is passed to "docker run" to override the default command.` taskGroupFlagDescription      = "The group name of the task. Tasks with the same group name share the same set of resources." )
->getRepository('WallabagCoreBundle:Entry') ->findByUrlAndUserId($this->url, $this->getLoggedInUserId()); $author = $content->getPublishedBy();  $this->assertInstanceOf('Wallabag\CoreBundle\Entity\Entry', $content); $this->assertEquals($this->url, $content->getUrl()); $this->assertContains('Google', $content->getTitle()); $this->assertEquals('2015-03-28 15:37:39', $content->getPublishedAt()->format('Y-m-d H:i:s')); $this->assertEquals('Morgane Tual', $author[0]); } public function testPostNewOkUrlExist()
/// <param name="logEvent">Logging event.</param> protected override void Append(StringBuilder builder, LogEventInfo logEvent) { builder.Append(MappedDiagnosticsContext.Get(this.Item, logEvent.FormatProvider)); } } }
tablet.computeNumEntries(); lastLocation = tablet.resetLastLocation(); tablet.setLastCompactionID(compactionId); t2 = System.currentTimeMillis();
"Kokkos::Experimental::SYCL::fence: Unnamed Instance Fence"); } void SYCL::impl_static_fence(const std::string& name) { Kokkos::Tools::Experimental::Impl::profile_fence_event< Kokkos::Experimental::SYCL>( name, Kokkos::Tools::Experimental::SpecialSynchronizationCases:: GlobalDeviceSynchronization, [&]() { // guard accessing all_queues std::lock_guard<std::mutex> lock(Impl::SYCLInternal::mutex); for (auto& queue : Impl::SYCLInternal::all_queues) Impl::SYCLInternal::fence(**queue);
var isDozen = false; var isPair = false; char roundNumberZero = '零'; if (Config.DozenRegex.IsMatch(intStr)) {
} /* eslint-enable indent */ export default DirectoryBrowser;
if (auto dirs = caf::get_if<std::vector<std::string>>( // &cfg, "vast.plugin-dirs")) result.insert(dirs->begin(), dirs->end()); return result; }
corev1 "k8s.io/api/core/v1" metav1 "k8s.io/apimachinery/pkg/apis/meta/v1" "k8s.io/apimachinery/pkg/types" "k8s.io/client-go/kubernetes" "knative.dev/eventing/pkg/apis/sources" "knative.dev/pkg/logging" ) const ( // ApiServerSourceCreateProbeEventType is the CloudEvent type of forward // ApiServerSource create probes. ApiServerSourceCreateProbeEventType = "apiserversource-probe-create" // ApiServerSourceUpdateProbeEventType is the CloudEvent type of forward
consumer_to_locate = find_consumer(consumer_arn, consumer_name, stream_arn) if(not consumer_to_locate): error_msg = 'Consumer %s not found.' % (consumer_arn or consumer_name) return simple_error_response(error_msg, 400, 'ResourceNotFoundException')
{ $this->validate($strFile); $filesystem = System::getContainer()->get('filesystem'); $parentDir = \dirname($this->strRootDir . '/' . $strFile);  if (!$filesystem->exists($parentDir)) { $filesystem->mkdir($parentDir); } return fopen($this->strRootDir . '/' . $strFile, $strMode); }
RESULT_GUARD(s2n_pkey_size(pkey, &maximum_signature_length)); RESULT_GUARD_POSIX(s2n_alloc(&sign->signature, maximum_signature_length)); /* If validation mode is S2N_ASYNC_PKEY_VALIDATION_STRICT * then use local hash copy to sign the signature */ if (op->validation_mode == S2N_ASYNC_PKEY_VALIDATION_STRICT) { DEFER_CLEANUP(struct s2n_hash_state hash_state_copy, s2n_hash_free); RESULT_GUARD_POSIX(s2n_hash_new(&hash_state_copy)); RESULT_GUARD_POSIX(s2n_hash_copy(&hash_state_copy, &sign->digest));
func (i *ipset) Create(ipsetName Name, ipsetType Type) error { args := []string{"create", string(ipsetName), string(ipsetType)} if ipsetType == ListSet && i.maxListSize > 0 { args = append(args, "size", fmt.Sprintf("%d", i.maxListSize)) } if i.enableComments { args = append(args, "comment")
# limitations under the License. """Wrapper for Admin Directory  API client.""" from googleapiclient import errors from httplib2 import HttpLib2Error from google.cloud.forseti.common.gcp_api import _base_repository from google.cloud.forseti.common.gcp_api import api_helpers
} func write64(suite abstract.Suite, wc io.WriteCloser, data ...interface{}) error { if err := suite.Write(wc, data); err != nil { return err } return wc.Close() } // WriteSecret64 converts a secret key to a Base64-string
*/ public function getAdminLocale(): string { return 'en'; } /**
} public void saveResult(Optional<Integer> statusCode, Optional<String> responseBody, Optional<String> errorMessage, Optional<Throwable> throwable) { boolean inStartup = throwable.isPresent() && throwable.get() instanceof ConnectException; try { SingularityTaskHealthcheckResult result = new SingularityTaskHealthcheckResult(statusCode, Optional.of(System.currentTimeMillis() - startTime), startTime, responseBody,
if !d.shouldDescend(v1, v2) { return d.sendDiff(ctx, Difference{Path: nil, ChangeType: types.DiffChangeModified, OldValue: v1, NewValue: v2}) } else { d.GoCatchPanic(func() error { return d.diff(ctx, nil, v1, v2) }) return d.Wait()
DialogUtil.showAlertDialog(getActivity(), getString(R.string.upload_problem_image), errorMessageForResult, getString(R.string.upload), getString(R.string.cancel), () -> { uploadItem.setImageQuality(ImageUtils.IMAGE_KEEP); onNextButtonClicked();
dtypes: A `List` of `tf.DType` with the expected output types devices: A `List` with the indexes of the devices to use prefetch_queue_depth: `int` with the amount of prefetched batches num_threads: `int` with the number of reader threads in the pipeline per GPU """ super(DALIDataset, self).__init__()
@pytest.mark.parametrize('task', tasks) @pytest.mark.parametrize('output', data_output) @pytest.mark.parametrize('eval_sizes', [[0.5, 1, 1.5], [0]]) @pytest.mark.parametrize('eval_names_prefix', ['specified', None]) def test_eval_set_no_early_stopping(task, output, eval_sizes, eval_names_prefix, client): if task == 'ranking' and output == 'scipy_csr_matrix': pytest.skip('LGBMRanker is not currently tested on sparse matrices')  # Use larger trainset to prevent premature stopping due to zero loss, causing num_trees() < n_estimators. # Use small chunk_size to avoid single-worker allocation of eval data partitions. n_samples = 1000
double max_applied_impulse = m_use_multi_dof_params ? m_maxAppliedImpulseMultiDof[row % 3] : m_maxAppliedImpulse; fillMultiBodyConstraint(constraintRow, data, 0, 0, constraintNormalAng, btVector3(0,0,0), dummy, dummy, posError, infoGlobal, -max_applied_impulse, max_applied_impulse, true, 1.0, false, 0, 0,
modal_obj.on('shown.bs.modal', function(){ editor.refresh(); }); modal_obj.on('hide.bs.modal', function(){ options.edit_metadata_button ? options.edit_metadata_button.focus() : "";}); }; var edit_attachments = function (options) {
#endif // default actor batch size #define PONY_SCHED_BATCH 100 // Ignore padding at the end of the type. pony_static_assert((offsetof(pony_actor_t, gc) + sizeof(gc_t)) ==
func setGrubCfgAdditional(grubPath string, kernelCommandline configuration.KernelCommandLine) (err error) { const ( extraPattern = "{{.ExtraCommandLine}}" ) err = sed(extraPattern, kernelCommandline.ExtraCommandLine, kernelCommandline.GetSedDelimeter(), grubPath)
*/ #ifdef _WIN32 # include <ws2tcpip.h> #else # include <arpa/inet.h> # include <netdb.h>
const RUNTIME_FLAGS_IDENTIFIER = 'runtimeFlags'; function validate(name, value) { if (!/^[A-Z_]+$/.test(name)) { throw new Error( `Invalid feature flag "${name}". Flag name must only be composed of uppercase letters and underscores.`
QueryString name_editbox;     ///< Client name editbox. QueryString filter_editbox;   ///< Editbox for filter on servers GUITimer requery_timer;       ///< Timer for network requery int lock_offset; ///< Left offset for lock icon. int blot_offset; ///< Left offset for green/yellow/red compatibility icon.
/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0 ABOUT THIS NODE.JS EXAMPLE: This example works with Version 3 (V3) of the AWS JavaScript SDK, which is scheduled for release by September 2020. The pre-release version of the SDK is available at https://github.com/aws/aws-sdk-js-v3. The 'SDK for JavaScript Developer Guide' for V3 is also scheduled for release September 2020, and the topic containing this example will be hosted at https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/ses-examples-receipt-rules.html. Purpose:
try: with timescale.engine.connect() as connection: result = connection.execute(sqlalchemy.text("SELECT SUM(count) FROM listen_count")) count = int(result.fetchone()["sum"]) or 0 except psycopg2.OperationalError as e: self.log.error("Cannot query timescale listen_count: %s" % str(e), exc_info=True) raise
agent_details = { "agent_name": AGENT_NAME, "daemon_version": str(version.get_daemon_version()), "python_version": "Python: {0}.{1}.{2}".format(PY_VERSION_MAJOR, PY_VERSION_MINOR, PY_VERSION_MICRO), "crp_supported_features": [name for name, _ in get_agent_supported_features_list_for_crp().items()], "extension_supported_features": [name for name, _ in
} final LazyKafkaWorkers kafkaWorkers; final Properties properties; AdminClient adminClient; KafkaCollector(Builder builder) { kafkaWorkers = new LazyKafkaWorkers(builder);
} TokenEntry cpdToken = new TokenEntry(token.getImage(), filename, token.getBeginLine(), token.getBeginColumn(), token.getEndColumn()); tokenEntries.add(cpdToken); } } catch (Exception e) {
public static boolean isPrime(long val) { return API.Match(val).of( Case($(2L), true), Case($(n -> n > 2), n -> { final double upperLimitToCheck = Math.sqrt(n); return !primes().takeWhile(d -> d <= upperLimitToCheck).exists(d -> n % d == 0); }), Case($(), false) ); }
import org.flowable.engine.impl.persistence.entity.DeploymentEntity; import org.flowable.engine.impl.repository.AddAsNewDeploymentMergeStrategy; import org.flowable.engine.impl.repository.AddAsOldDeploymentMergeStrategy; import org.flowable.engine.impl.repository.MergeByDateDeploymentMergeStrategy; import org.flowable.engine.impl.repository.VerifyDeploymentMergeStrategy; import org.flowable.engine.impl.util.CommandContextUtil; import org.flowable.engine.impl.util.Flowable5Util; import org.flowable.engine.repository.Deployment; import org.flowable.engine.repository.DeploymentMergeStrategy; import org.flowable.engine.repository.MergeMode; import org.flowable.engine.repository.ProcessDefinition; /**
return RateLimiter(FLAGS.max_admin_api_calls_per_day, self.DEFAULT_QUOTA_TIMESPAN_PER_SECONDS) def get_group_members(self, group_key): """Get all the members for specified groups. Args: group_key: Its unique id assigned by the Admin API. Returns: A list of member objects from the API.
statusReporterStruct: newStatusReporterStruct(), Router:               r, } h.overlay = NewOverlay(h) h.serviceManager = newServiceManager(h, h.overlay) h.statusReporterStruct.RegisterStatusReporter("Status", h)
* * @return array<string,mixed> */ function getForwardParameters($request) { $reservedGetValues = array( 'token',
return model def _tabs(*, win_id_filter=lambda _win_id: True, add_win_id=True, cur_win_id=None): """Helper to get the completion model for tabs/other_tabs. Args:
public static void ingest(AccumuloClient c, Opts opts, BatchWriterOpts batchWriterOpts) throws MutationsRejectedException, IOException, AccumuloException, AccumuloSecurityException, TableNotFoundException, TableExistsException { ClientContext cc = (ClientContext) c; ingest(c, FileSystem.get(cc.getHadoopConf()), opts, batchWriterOpts); } }
if req.GlobalConfig.TrustDomain == "" { return nil, msiError.New("global configuration missing trust domain") } config.trustDomain = req.GlobalConfig.TrustDomain if len(config.Tenants) == 0 { return nil, msiError.New("configuration must have at least one tenant")
private final Logger PROCESS_LOG = LogManager.getLogger("tech.pegasys.pantheon.SubProcessLog"); private final Map<String, Process> pantheonProcesses = new HashMap<>(); private final ExecutorService outputProcessorExecutor = Executors.newCachedThreadPool(); ProcessPantheonNodeRunner() { Runtime.getRuntime().addShutdownHook(new Thread(this::shutdown));
} } // Origin can be used in: Resource, API // Origin defines the CORS policy for a given origin. The origin can use a wildcard prefix // such as "https://*.mydomain.com". The special value "*" defines the policy for all origins // (in which case there should be only one Origin DSL in the parent resource).
package apis import ( operatorsv1 "github.com/operator-framework/api/pkg/operators/v1" operatorsv1alpha1 "github.com/operator-framework/api/pkg/operators/v1alpha1" operatorsv1alpha2 "github.com/operator-framework/api/pkg/operators/v1alpha2" ) func init() { // Register the types with the Scheme so the components can map objects to GroupVersionKinds and back AddToSchemes = append(AddToSchemes, operatorsv1.AddToScheme, operatorsv1alpha1.AddToScheme, operatorsv1alpha2.AddToScheme) }
class RefDict(struct.Struct): local_attr = struct.Field(str, frozen=True) attr = struct.Field(str, frozen=True) non_inheritable_attr = struct.Field(str, default=None, frozen=True) backref_attr = struct.Field(str, default='subject', frozen=True) requires_explicit_inherit = struct.Field(bool, default=False, frozen=True) ref_cls = struct.Field(type, frozen=True) class ObjectMeta(type):
import lightgbm as lgb import numpy as np import pytest from scipy import sparse
for model in model_infos: pwc_model_info = OrderedDict() pwc_model_info['Name'] = osp.split(model['config'])[-1].split('.')[0] pwc_model_info['In Collection'] = 'Please fill in Collection name' # get metadata memory = round(model['results']['memory'] / 1024, 1) epochs = get_real_epoch(model['config']) meta_data = OrderedDict() meta_data['Training Memory (GB)'] = memory meta_data['Epochs'] = epochs
errCh <- err return } log.Trace("entrypoint event received", "event", hclog.Fmt("%#v", req.Event)) // If this is an exit or error event track that so we don't synthesize one. // We synthesize an Error value if this loop is going to returning without
IEnumerable<SearchParameterInfo> AllSearchParameters { get; } /// <summary> /// Represents a mapping of resource type to a hash of the search parameters /// currently supported for that resource type. /// </summary> IReadOnlyDictionary<string, string> SearchParameterHashMap { get; }
* If true, a default {@link OAuth2AuthorizedClient} can be discovered from the current Authentication. It is * recommended to be cautious with this feature since all HTTP requests will receive the access token if it can be * resolved from the current Authentication. * @param defaultOAuth2AuthorizedClient true if a default {@link OAuth2AuthorizedClient} should be used, else false. *                                      Default is false. */
include WebsocketsHelpers include Devise::Test::IntegrationHelpers # driven_by :selenium, using: :chrome, screen_size: [1400, 1400] driven_by :selenium, using: :headless_chrome do |driver_option| # Without this argument, Chrome cannot be started in Docker driver_option.add_argument('no-sandbox') end def sign_in!(user = nil) @current_user = user || create(:user)
self.logger.info("Not a valid room url.") return if room["status"] != STATUS_ONLINE: self.logger.info("Stream currently unavailable.") return hls_url = "http://dlhls.cdn.zhanqi.tv/zqlive/{room[videoId]}_1024/index.m3u8?Dnion_vsnae={room[videoId]}".format(room=room)
""" state = {} status, output = shellutil.run_get_output("ip -a -d -o link") """ 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000\    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity 0 addrgenmode eui64 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000\    link/ether 00:0d:3a:30:c3:5a brd ff:ff:ff:ff:ff:ff promiscuity 0 addrgenmode eui64
{{if not .FavoritesFirst}} lower(svc.name) > lower(:afterName) {{else if .After.IsFavorite}} ((fav IS DISTINCT FROM NULL AND lower(svc.name) > lower(:afterName)) OR fav isnull) {{else}} (fav isnull AND lower(svc.name) > lower(:afterName)) {{end}}
task, self._id, self._task_result_queue, reporter, use_multiprocessing=bool(self.worker_processes > 1), worker_timeout=self._config.timeout, check_unfulfilled_deps=self._config.check_unfulfilled_deps, ) def _purge_children(self):
<ol> <li class="even"> <label>{{ helper:lang line="blog:num_of_entries" }}</label> <?php echo form_input('limit', $options['limit']) ?> </li> <li class="odd"> <label>{{ helper:lang line="blog:num_of_characters" }}</label> <?php echo form_input('characters', $options['characters']) ?> </li> </ol> No newline at end of file
case HPDT_AUTOTRADE_VEND: ret->HPDataSRCPtr = (void**)(&((struct autotrade_vending *)ptr)->hdata); ret->hdatac = &((struct autotrade_vending *)ptr)->hdatac; break; case HPDT_BGDATA: ret->HPDataSRCPtr = (void**)(&((struct battleground_data *)ptr)->hdata); ret->hdatac = &((struct battleground_data *)ptr)->hdatac;
Map<String,String> overrides = CompactableUtils.getOverrides(job.getKind(), tablet, cInfo.localHelper, job.getFiles()); TabletFile compactTmpName = tablet.getNextMapFilenameForMajc(cInfo.propagateDeletes); ExternalCompactionInfo ecInfo = new ExternalCompactionInfo();
$txt['misc'] = 'Other Settings'; $txt['maillist_allow_attachments'] = 'Allow email file attachments to be posted (will not work for PMs)'; $txt['maillist_key_active'] = 'Days to keep keys active in the database'; $txt['maillist_key_active_desc'] = 'i.e. How long after a notification is sent are you willing to accept a response'; $txt['maillist_sig_keys'] = 'Words that signify the start of someones signature'; $txt['maillist_sig_keys_desc'] = 'Separate words with a | character, suggested to use "best|regard|thank". Lines starting with these will be triggered as the start of a signature line'; $txt['maillist_leftover_remove'] = 'Lines that are left over from emails';
return jgrafana.serialize(); } catch (IOException e) { logger.error("Could not serialize the grafana dashboard"); throw new UncheckedIOException("Could not serialize the grafana dashboard.", e); } }
parser: template.New(), } }
m_enc_detail_panel(0), m_layout_panel(0), m_tech_list(0), m_init_flag(initially_hidden) { Sound::TempUISoundDisabler sound_disabler;
namespace Wallabag\CoreBundle\Command; use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Input\InputOption; use Symfony\Component\Console\Output\OutputInterface; use Symfony\Component\Console\Style\SymfonyStyle; use Symfony\Component\Finder\Finder;
if err != ErrSentinel { finalErr = multierror.Append(finalErr, err) } else { didErrSentinel = true } } } if finalErr == nil && didErrSentinel { finalErr = ErrSentinel } return finalErr }
case DateTimeExtractors.Set: return new BaseSetExtractor(new EnglishSetExtractorConfiguration()); case DateTimeExtractors.Merged: return new BaseMergedDateTimeExtractor(new EnglishMergedExtractorConfiguration(DateTimeOptions.None)); case DateTimeExtractors.MergedSkipFromTo: return new BaseMergedDateTimeExtractor(new EnglishMergedExtractorConfiguration(DateTimeOptions.SkipFromToMerge)); } throw new Exception($"Extractor '{extractorName}' for English not supported");
attrs[attrname] = attr(vals) if not 'mass' in attrs: attrs['mass'] = Masses(np.zeros(natoms)) if not 'charge' in attrs: attrs['charge'] = Charges(np.zeros(natoms, dtype=np.float32))
""" if self.metadata or self._try_cache(): if self.metadata_expire < 0 \ and self._check_config_file_age \ and self.repofile \ and dnf.util.file_age(self.repofile) < self.metadata._age:
use Shopsys\FrameworkBundle\Model\Customer\BillingAddressData; use Shopsys\FrameworkBundle\Model\Customer\DeliveryAddressData; class CustomerUserUpdateData {
} else { parent.querySelector('.chkEnableEmbeddedEpisodeInfosContainer').classList.add('hide'); }  parent.querySelector('.chkAutoCollectionContainer').classList.toggle('hide', contentType !== 'movies'); return populateMetadataSettings(parent, contentType); }
StorageComponent delegate() { StorageComponent result = delegate; if (result != null) return delegate; // synchronization is not needed as redundant calls have no ill effects result = factory.getBean(StorageComponent.class); if (result instanceof TracingStorageComponent) { result = ((TracingStorageComponent) result).delegate;
Collectors.toList(), StringUtils.joiningWithLastDelimiter(", ", " and "))); if (!affectedOptions.isEmpty()) { logger.warn("{} will have no effect unless {} is in the command line.", affectedOptions, mainOptionName); } } }
systemd_cmd = [ "systemd-run", "--unit={0}".format(logcollector.CGROUPS_UNIT), "--slice={0}".format(logcollector.CGROUPS_SLICE) ] # More info on resource limits properties in systemd here:
creationLock *sync.Mutex } func (manager *manager) Create(peerID identity.Identity) (sessionInstance session.Session, err error) { manager.creationLock.Lock() defer manager.creationLock.Unlock() sessionInstance.ID = manager.idGenerator.Generate() sessionInstance.ConsumerID = peerID sessionInstance.Config, err = openvpn.ConfigToString(*manager.clientConfig.Config) if err != nil { return
propMerge: Function, }; }  declare module 'glamor/reset' { declare module.exports: any; }
Block:    block, } e.comp.SubmitLocal(synced) } // checkLoop will regularly scan for items that need requesting.
g_autoptr(GOptionContext) context = g_option_context_new (""); glnx_unref_object RPMOSTreeOS *os_proxy = NULL; glnx_unref_object RPMOSTreeSysroot *sysroot_proxy = NULL; g_autoptr(GVariant) new_default_deployment = NULL; g_autofree char *transaction_address = NULL; _cleanup_peer_ GPid peer_pid = 0; const char *const *install_pkgs = NULL;
end raise OperationFailure.new(err, code, doc) elsif doc && (write_concern_error = doc['writeConcernError']) # assignment raise WriteConcernError.new(write_concern_error['errmsg'], write_concern_error['code'], doc) end if @transformer.nil?
// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode // and move the currentComponent away. const comp = currentComponent; let cleanup = hook._cleanup; if (typeof cleanup == 'function') { hook._cleanup = undefined; cleanup(); }
logger.Warningf("cannot continue until there is at least %d BZZ available on %x", neededERC20, overlayEthAddress) } if chainId == 5 { logger.Warningf("learn how to fund your node by visiting our docs at https://docs.ethswarm.org/docs/installation/fund-your-node") } select { case <-time.After(balanceCheckBackoffDuration):
bbox_head=None, mask_roi_extractor=None, mask_head=None, train_cfg=None, test_cfg=None, pretrained=None):
release.Title = qLink.QuerySelector("b").TextContent; release.Description = release.Title; var releaseLink = row.QuerySelector("td:nth-child(4) > a"); if (releaseLink != null) { release.Link = new Uri(SiteLink + releaseLink.GetAttribute("href"));  var dateString = row.QuerySelector("td:nth-child(6) nobr").TextContent.Trim(); //"2015-04-25 23:38:12" //"yyyy-MMM-dd hh:mm:ss"
for (const key of keys) ctx.nodes[key]._targets = null; for (const key of keys) { ctx.nodes[key].detach(); } ctx.nodes = null; },
_ = s.Reset() return err }  // So we don't wait forever _ = s.SetDeadline(time.Now().Add(closeDeadline)) // We *have* to observe the EOF. Otherwise, we leak the stream. // Now, technically, we should do this *before*
def __repr__(self): return "SIDData({0})".format(self.__dict__) def _get_buffer(self, bars, field='price'): """ Gets the result of history for the given number of bars and field.
def gen_base_anchors(self): w = self.base_size h = self.base_size if self.center is None: x_center = self.center_offset * w y_center = self.center_offset * h else: x_center, y_center = self.center h_ratios = torch.sqrt(self.ratios) w_ratios = 1 / h_ratios
} } // whether this object has been spawned with authority // we need hasAuthority and pendingOwner because // we need to wait until all of them spawn before updating hasAuthority internal bool pendingOwner { get; set; }
return } hostSpec.Group = strings.TrimSpace(cloudHost.Group) topology.Hosts = append(topology.Hosts, hostSpec) }
// blocking; it always drains the buffer before writing so that the latest // write is buffered. If writes could block, the background goroutine could be // blocked indefinitely from reading etcd's Watch events. // The background goroutine closes ch during shutdown. ch chan *state // shutdown tells the background goroutine to exit. shutdown func() }
* * @return array A normalized tree of UploadedFile instances. */ private static function parseUploadedFiles(array $uploadedFiles) { $parsed = []; foreach ($uploadedFiles as $field => $uploadedFile) {
self.__dict__.update(d) # TODO: super's setstate not called? if "param" not in self.__dict__: self.__dict__["param"] = type(self.param)(self.__class__, self=self) class Dimensioned(LabelledData):
} const batchSize = 16384 batches := func(hs []hash.Hash) [][]hash.Hash { // Return subslices of a copy, because the caller may // mutate the parameter after the call. copied := make([]hash.Hash, len(hs)) copy(copied, hs) var res [][]hash.Hash i := 0 for ; i+batchSize < len(copied); i += batchSize { res = append(res, copied[i:i+batchSize])
"\r\n" + "dGhpcyBpcyBzb21lIG1vcmUgdGVzdCB0ZXh0Lg==\r\n")); MimeUtility.decodeBody(msg.getBody()); } @Test
if (msgId == null) { msgId = msgExt.getProperty(MessageConst.PROPERTY_ORIGIN_MESSAGE_ID); } dlqLogger.info("[DLQ] topic:{} consumerGroup:{} msgId:{}", retryTopic, requestHeader.getGroup(), msgId); } else { if (0 == delayLevel) { delayLevel = 3 + msgExt.getReconsumeTimes();
PROJECT* p = projects[i]; if (p->possibly_backed_off && now > p->min_rpc_time) { p->possibly_backed_off = false; char buf[1024]; snprintf(buf, sizeof(buf), "Backoff ended for %s", p->get_project_name()); request_work_fetch(buf); } }
logits_in_channel = ( self.conv_out_channels if self.upsample_method == 'deconv' else upsample_in_channels) self.conv_logits = build_conv_layer(self.predictor_cfg, logits_in_channel, out_channels, 1) self.relu = nn.ReLU(inplace=True) self.debug_imgs = None
* @param string $fileName the name of the posted file * @param mixed $customMaxSize maximum file upload size * * @return string|null the error message or null if all checks are ok */ public function getError($fileName, $customMaxSize = null) { if (is_null($customMaxSize)) { $maximumSize = getMaximumFileUploadSize();
) as $location) { $name = $location->discoveryDisplayName ?? $location->name; $code = $location->code; $locationMap[$location->id] = compact('name', 'code'); } } $this->putCachedData($cacheKey, $locationMap);
return global_params.iteritems() class Task(object): __metaclass__ = Register
const Army enemy( tile ); return army.isStrongerThan( enemy, AI::ARMY_STRENGTH_ADVANTAGE_LARGE ); }  return true; } break;
sendErr := s.Network.Broadcast(tag, data) if sendErr != nil { s.log.Warnf("Network was unable to queue votes for broadcast(%v). %d / %d votes for round %d period %d step %d were dropped.", sendErr, len(a.UnauthenticatedVotes)-i, len(a.UnauthenticatedVotes), uv.R.Round, uv.R.Period, uv.R.Step)
const unionAndInterfaceTypes = await getUnionAndInterfaceTypes(); const { clientConfig, serviceWorkerConfig } = await configureWebpack({ context: __dirname, vendor: [
def __repr__(self): """Represent the UniGene Record object as a string for debugging.""" return "<%s> %s %s %s" % ( self.__class__.__name__, self.ID, self.symbol,
test_with_categorical_variable ) for test_with_interaction_constraints in [True, False]: error_msg = ("Model not correctly constrained " f"(test_with_interaction_constraints={test_with_interaction_constraints})") for monotone_constraints_method in ["basic", "intermediate", "advanced"]: params = { "min_data": 20,
width_coef: float = 0.8, xlim: Optional[Tuple[int, int]] = None, ylim: Optional[Tuple[int, int]] = None, title: str = 'Split value histogram for feature with @index/name@ @feature@', xlabel: str = 'Feature split value', ylabel: str = 'Count', figsize: Optional[Tuple[int, int]] = None,
@Test public void descriptionAndBlockTagsAreRetrievable() { Javadoc javadoc = JavaParser.parseJavadoc("first line\nsecond line\n\n@param node a node\n@return result the result"); assertEquals("first line\nsecond line", javadoc.getDescription().toText()); assertEquals(2, javadoc.getBlockTags().size()); } @Test
portResContentionTaskDefinition = "port-80-windows" labelsTaskDefinition            = "labels-windows" dockerEndpoint                  = "npipe:////./pipe/docker_engine" dockerEndpointEnvVariable       = "DOCKER_HOST" ) // TestAWSLogsDriver verifies that container logs are sent to Amazon CloudWatch Logs with awslogs as the log driver func TestAWSLogsDriver(t *testing.T) { RequireDockerVersion(t, ">=1.9.0") // awslogs drivers available from docker 1.9.0
}; prototype.context = function() { return this._context || (this._canvas ? this._canvas.getContext('2d') : null); }; prototype.dirty = function(item) {
// PMD 6.0.0 addFilterRuleMoved("java", "controversial", "unnecessary", "UnnecessaryParentheses"); addFilterRuleRenamed("java", "unnecessary", "UnnecessaryParentheses", "UselessParentheses"); }
} elseif (!in_array(strtolower($sExtension), array('lss', 'txt', 'tsv', 'lsa'))) { $aData['sErrorMessage'] = sprintf(gT("Import failed. You specified an invalid file type '%s'."), CHtml::encode($sExtension)); $aData['bFailed'] = true; }elseif(!in_array($mimeType,['text/tab-separated-values','text/plain','application/xml','application/zip','text/xml'])){ $aData['sErrorMessage'] = sprintf(gT("Import failed. You specified an invalid file type '%s'."), CHtml::encode($mime)); $aData['bFailed'] = true; } elseif ($aData['bFailed'] || !@move_uploaded_file($_FILES['the_file']['tmp_name'], $sFullFilepath)) {
return; } const browserOptions = _super(req); const fields = {}; for (const name in self.fieldTypes) { fields[name] = 'AposInput' + self.apos.util.capitalizeFirst(name); } browserOptions.components = { fields: fields }; return browserOptions; } }; },
plans: planStats, }; record.computeTime = Date.now() - now; if (global.BlackrockPayments && global.BlackrockPayments.getTotalCharges) { // This only exists under Blackrock record.totalCharges = global.BlackrockPayments.getTotalCharges(); } ActivityStats.insert(record);
#define GJK_MAX_ITERATIONS	128 #ifdef BT_USE_DOUBLE_PRECISION #define GJK_ACCURACY		((btScalar)1e-12) #define GJK_MIN_DISTANCE	((btScalar)1e-12) #define GJK_DUPLICATED_EPS	((btScalar)1e-12) #else #define GJK_ACCURACY		((btScalar)0.0001) #define GJK_MIN_DISTANCE	((btScalar)0.0001) #define GJK_DUPLICATED_EPS	((btScalar)0.0001) #endif //BT_USE_DOUBLE_PRECISION
def netrc_content if data.installation? "machine #{data.source_host}\n  login travis-ci\n  password #{data.token}\n" else "machine #{data.source_host}\n  login #{data.token}\n" end end
TESTS.UserTests = require("./user-tests"); TESTS.SessionTests = require("./session-tests"); TESTS.UUIDSyncTests= node_require("./uuid-sync-tests"); TESTS.PartitionValueTests = node_require("./partition-value-tests"); } }
App:         o.appName, Env:         o.envName, ConfigStore: o.store, DeployStore: o.deployStore, }) if err != nil { return fmt.Errorf("create describer for environment %s in application %s: %w", o.envName, o.appName, err) } o.envDescriber = d o.subnetLister = ec2.New(envSession) // ECR client against tools account profile AND target environment region. repoName := fmt.Sprintf("%s/%s", o.appName, o.name)
import java.util.concurrent.CompletableFuture; import com.google.common.annotations.VisibleForTesting; import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; public class DetermineCommonAncestorTask<C> extends AbstractEthTask<BlockHeader> { private static final Logger LOG = LogManager.getLogger(); private final EthContext ethContext; private final ProtocolSchedule<C> protocolSchedule; private final ProtocolContext<C> protocolContext;
return "", false } func (s *httpTestPeerSource) Broadcast(ctx context.Context, tag protocol.Tag, data []byte, wait bool, except network.Peer) error { return nil } func (s *httpTestPeerSource) Relay(ctx context.Context, tag protocol.Tag, data []byte, wait bool, except network.Peer) error { return nil } func (s *httpTestPeerSource) Disconnect(badnode network.Peer) {} func (s *httpTestPeerSource) DisconnectPeers()                {}
class CorpusElement(object): """An element (file) in a corpus.""" def __init__(self, path): self.path = path self.size = os.path.getsize(self.path) class Corpus(object):
* Subscriber for RocketCDN REST API Integration * * @since 3.5 */ class RESTSubscriber implements Subscriber_Interface { const ROUTE_NAMESPACE = 'wp-rocket/v1';
if (result.hasErrors()) { final String errors = result.errors().stream().map(TomlParseError::toString).collect(Collectors.joining("\n")); throw new Exception("Invalid TOML configuration: \n" + errors); } return checkConfigurationValidity(result, toml);
cancelable=False, composed=False): self._check_vanished() log.webelem.debug("Firing event on {!r} via javascript.".format(self)) self._elem.evaluateJavaScript( "this.dispatchEvent(new Event({}, " "{{'bubbles': {}, 'cancelable': {}, 'composed': {}}}))" .format(javascript.convert_js_arg(event), javascript.convert_js_arg(bubbles), javascript.convert_js_arg(cancelable), javascript.convert_js_arg(composed))) def caret_position(self): """Get the text caret position for the current element."""
*/ Blockly.Workspace.prototype.getBlockById = function(id) { var block = this.blockDB_[id]; if (!block && this.getFlyout() && this.getFlyout().getWorkspace()) { block = this.getFlyout().getWorkspace().blockDB_[id]; } return block || null; };
@Test public void leftHandAssignmentCanBeInBraces() { ParseResult<Expression> result = new JavaParser().parse(EXPRESSION, provider("(i) += (i) += 1")); assertNoProblems(result); } }
# @api private PURPOSES = %i(application monitor push_monitor).freeze # Instantiate the new AppMetadata object. # # @api private
backlogPool := execpool.MakeBacklog(nil, 0, execpool.LowPriority, nil) defer backlogPool.Shutdown() initBlocks, initAccounts, _ := testGenerateInitState(t, protocol.ConsensusCurrentVersion) l, err := OpenLedger(logging.Base(), t.Name(), true, initBlocks, initAccounts, crypto.Hash([]byte(t.Name()))) a.NoError(err, "could not open ledger") lastBlock, err := l.Block(l.Latest())
pendingRequest.getSkipHealthchecks(), pendingRequest.getMessage(), pendingRequest.getResources(), pendingRequest.getEnvOverrides(), pendingRequest.getActionId())); nextInstanceNumber++;
* @since 2.7 * * @param array $hosts List of CNAMES. * @param array $zone  Array of CDN zones. */ $hosts = (array) apply_filters( 'rocket_cdn_cnames', $hosts, $zone ); $hosts = array_filter( $hosts );
'fill: red', '}', '.blocklyFlyoutCheckbox.checked {', 'fill: blue', '}',  '' ];
{ var query = context.Request.Query[KnownQueryParameterNames.Summary].FirstOrDefault(); if (!string.IsNullOrWhiteSpace(query) && context.Response.StatusCode == (int)HttpStatusCode.OK && Enum.TryParse<SummaryType>(query, true, out var summary)) { return summary; } return SummaryType.False;
); uksort( $crons, 'strnatcasecmp' ); return _set_cron_array( $crons, $wp_error ); } /**
filters.merge(override) end def mute_button function_button('Mute', 'mute', "mute_selected", 'Mute notification') end def mute_selected_button(hidden=false)
formatted='Server is throttling, reconnecting in {:d} seconds'.format(wait_time) ) time.sleep(wait_time) except PermaBannedException: bot.event_manager.emit( 'api_error',
t << endl << "clean:" << endl << "\trm -f $(CLEAN_FILES)" << endl; } static void writeMakeBat()
'getmypid' => ['int'], 'getmyuid' => ['int'], 'get_object_vars' => ['array', 'obj'=>'object'], 'getopt' => ['array<string,string|false|array<int,string|false>>', 'options'=>'string', 'longopts='=>'array', '&w_optind='=>'int'], 'get_parent_class' => ['string', 'object='=>'mixed'], 'getprotobyname' => ['int|false', 'name'=>'string'], 'getprotobynumber' => ['string', 'proto'=>'int'],
@JsonProperty @NotNull private boolean showTaskDiskResource = false; private boolean hideNewDeployButton = false; private boolean hideNewRequestButton = false;
using namespace iroha::ametsuchi; using PropagationData = GossipPropagationStrategy::PropagationData; /** * Generates peers with empty pub keys * @param ids generated addresses of peers
<div class="tab-content" id="custom-tabs-three-tabContent"> <div class="tab-pane fade show active" id="custom-tabs-inventory" role="tabpanel" aria-labelledby="custom-tabs-one-home-tab"> <%= form_for @storage_location, method: :get do %> Show Inventory at Date: <%= date_field_tag 'version_date', params[:version_date], min: InventoryItem::EARLIEST_VERSION %> <%= filter_button(text: 'View') %> <br/><small>(historical data collected since <%= Date.parse(InventoryItem::EARLIEST_VERSION).strftime("%b %-d, %Y") %>)</small> <% end %> <br/><br/> <table class="table"> <thead>
{ id: 'mapillary-signs',  layer: svgMapillarySigns(projection, context, dispatch) }, { id: 'openstreetcam-images', layer: svgOpenstreetcamImages(projection, context, dispatch) }, { id: 'debug', layer: svgDebug(projection, context, dispatch) }, { id: 'geolocate', layer: svgGeolocate(projection, context, dispatch) }, { id: 'touch', layer: svgTouch(projection, context, dispatch) } ];
""" self.rule_book = BigqueryRuleBook(self._load_rule_definitions()) def find_violations(self, parent_project, bq_acl, force_rebuild=False): """Determine whether Big Query datasets violate rules.
public const string HolidayList2 = @"(?<holiday>(thanks\s*giving|all saint's|white lover|s(?:ain)?t?(\.)?\s+(?:patrick|george)(?:')?(?:s)?|us independence|all hallow|all souls|guy fawkes|cinco de mayo|halloween|qingming|dragon boat|april fools|tomb\s*sweeping)(\s+day)?)"; public const string HolidayList3 = @"(?<holiday>(?:independence|presidents(?:')?|mlk|martin luther king( jr)?|canberra|ascension|columbus|tree( planting)?|arbor|labou?r|((international|int'?l)\s+)?workers'?|mother'?s?|father'?s?|female|women('s)?|single|teacher'?s|youth|children|girls|lovers?|earth|inauguration|groundhog|valentine'?s|baptiste|bastille|veterans(?:')?|memorial|mid[ \-]autumn|moon|spring|lantern)\s+day)"; public const string HolidayList4 = @"(?<holiday>ramad(h)?an|ram(a)?zan|ramathan|eid al(-|\s+)adha|eid al(-|\s+)azha|eidul(-|\s+)azha|feast of the sacrifice|(islamic|arabic|hijri) new year|eid al(-|\s+)fitr|festival of breaking the fast)"; public static readonly string HolidayWeekendRegex = $@"(?<holidayWeekend>(({HolidayList1}|{HolidayList2}|{HolidayList3}|{HolidayList4})(\s+weekend)(\s+((of\s+)?({YearRegex}|{RelativeRegex}\s+year))))|(({HolidayList1}|{HolidayList2}|{HolidayList3}|{HolidayList4})(\s+((of\s+)?({YearRegex}|{RelativeRegex}\s+year)))?(\s+weekend))|(((the\s+)?weekend\s+of\s+)({HolidayList1}|{HolidayList2}|{HolidayList3}|{HolidayList4})(\s+((of\s+)?({YearRegex}|{RelativeRegex}\s+year)))?))"; public static readonly string HolidayRegex = $@"\b({HolidayWeekendRegex}|({StrictRelativeRegex}\s+({HolidayList1}|{HolidayList2}|{HolidayList3}|{HolidayList4}))|(({HolidayList1}|{HolidayList2}|{HolidayList3}|{HolidayList4})(\s+(of\s+)?({YearRegex}|{RelativeRegex}\s+year))?))\b"; public const string AMTimeRegex = @"(?<am>morning)"; public const string PMTimeRegex = @"\b(?<pm>afternoon|evening|night)\b"; public const string NightTimeRegex = @"(night)";
p->path = path; p->uid = 0; p->gid = 0; } static resolverHandle * elektraGetResolverHandle (Plugin * handle, Key * parentKey)
creatorNameFilter = QString(); gameTypeFilter.clear(); maxPlayersFilterMin = 1; maxPlayersFilterMax = DEFAULT_MAX_PLAYERS_MAX; invalidateFilter(); }
| */ 'preflight' => env('WP_ENV', 'production') !== 'production', /* |--------------------------------------------------------------------------
} @Test public void testVerifiedIllegalNumBuckets() { AssertHelpers.assertThrows("Should fail if numBucket is less than or equal to zero", IllegalArgumentException.class, "The number of bucket(s) must be larger than zero", () -> Bucket.get(Types.IntegerType.get(), 0)); }
return S2N_SUCCESS; } int static s2n_client_hello_no_op_cb(struct s2n_connection *conn, void *ctx) { return S2N_SUCCESS; }
if (maybe != null) result.close(); } ActiveMQSpanConsumer doInit() { final ActiveMQConnection connection; try {
importPath:            "cloud.google.com/go/artifactregistry/apiv1beta2", gRPCServiceConfigPath: "google/devtools/artifactregistry/v1beta2/artifactregistry_grpc_service_config.json", apiServiceConfigPath:  "google/devtools/artifactregistry/v1beta2/artifactregistry_v1beta2.yaml", // GA after 2021/01/05 releaseLevel: "beta", },
* This will properly maintain the copyright information. DigitalGlobe * copyrights will be updated automatically. * * @copyright Copyright (C) 2017 DigitalGlobe (http://www.digitalglobe.com/) */ #include "LongIntegerFieldDefinition.h"
('Dataset and results have different sizes: ' f'{self.cumulative_sizes[-1]} v.s. {len(results)}') # Check whether all the datasets support evaluation for dataset in self.datasets: assert hasattr(dataset, 'evaluate'), \ f'{type(dataset)} does not implement evaluate function'  if self.separate_eval: dataset_idx = -1 total_eval_results = dict()
ctx := ootaProp.Extract(bg, ns) sc := trace.SpanContextFromContext(ctx) require.True(t, sc.IsValid(), "oota prop failed sanity check") require.True(t, sc.IsRemote(), "oota prop is remote") } // sanity check for real propagators, ensuring that they // really are not putting any valid span context into an empty
// pingNode pings the given peer and updates the metrics with the result and the additional node information func (e *Engine) pingNode(peer *flow.Identity) { id := peer.ID() pingFailed := false // ping the node resp, rtt, err := e.middleware.Ping(id) // ping will timeout in libp2p.PingTimeoutSecs seconds
self.barrier() shape = list(shape) # One of the clients in each machine will issue requests to the local server. num_clients_per_part = rpc.get_num_client() / part_policy.partition_book.num_partitions() if self._client_id % num_clients_per_part == 0: part_shape = shape.copy() part_shape[0] = part_policy.get_data_size() request = InitDataRequest(name,
iconId = R.drawable.ic_notification_sync_error; intent = ClientConfig.downloadServiceCallbacks.getReportNotificationContentIntent(context); id = R.id.notification_download_report; content = context.getResources() .getQuantityString(R.plurals.download_report_content, successfulDownloads, successfulDownloads, failedDownloads); } NotificationCompat.Builder builder = new NotificationCompat.Builder(context, channelId);
* We're g̶u̶e̶s̶s̶i̶n̶g̶ doing empirical research on which versions of SQLite * support JSON. So far, tests indicate: * https://www.sqlite.org/json1.html --> JSON since SQLite version 3.9.0 (2015-10-14) * Docker uses an outdated version of SQLite/PHP combi with wrong implementation of JSON1 extensions: * https://www.talvbansal.me/blog/unit-tests-with-json-columns-in-sqlite/ * This explains why BOLT is working in stand-alone production/dev envs. but not in unit tests using Docker * We need to replace this with a proper function test, instead of a guestimate. * - 3.32.2 - OK (Wytse's FBSD 12.1 \w PHP 7.2) * - 3.20.1 - Not OK (Travis PHP 7.2) * - 3.27.2 - OK (Bob's Raspberry Pi, running PHP 7.3.11 on Raspbian)
OutputFile encryptingOutputFile(); /** * Metadata about the encryption key that is being used to encrypt the associated * {@link #encryptingOutputFile()}. */ EncryptionKeyMetadata keyMetadata(); }
"github.com/gogo/protobuf/jsonpb" "github.com/gogo/protobuf/proto" "github.com/gogo/protobuf/types" "github.com/stretchr/testify/assert" "github.com/stretchr/testify/require" "go.uber.org/yarpc/api/transport"
var ( testCounterDesc               = metric.NewDescriptor("counter", sdkapi.CounterInstrumentKind, number.Int64Kind) testUpDownCounterDesc         = metric.NewDescriptor("updowncounter", sdkapi.UpDownCounterInstrumentKind, number.Int64Kind) testCounterObserverDesc       = metric.NewDescriptor("counterobserver", sdkapi.CounterObserverInstrumentKind, number.Int64Kind) testUpDownCounterObserverDesc = metric.NewDescriptor("updowncounterobserver", sdkapi.UpDownCounterObserverInstrumentKind, number.Int64Kind) testHistogramDesc             = metric.NewDescriptor("histogram", sdkapi.HistogramInstrumentKind, number.Int64Kind) testGaugeObserverDesc         = metric.NewDescriptor("gauge", sdkapi.GaugeObserverInstrumentKind, number.Int64Kind) ) func oneAgg(sel export.AggregatorSelector, desc *metric.Descriptor) export.Aggregator {
// GetNetTransport returns an http.Transport that limits the number of connection // to comply with connectionsRateLimitingCount. func (wn *WebsocketNetwork) GetNetTransport() *http.Transport { transport := *http.DefaultTransport.(*http.Transport) transport.DialContext = wn.GetDialer().DialContext return &transport }
}); after(function (done) { if (suite.isPlayback()) { setTimeout = originalSetTimeout; } suite.teardownSuite(done);
elif self.typedef_flag: base_code = self.cname else: base_code = "enum %s" % self.cname base_code = public_decl(base_code, dll_linkage) return self.base_declaration_code(base_code, entity_code)
"Archive any files/directories instead of moving to the HDFS trash or deleting."), GC_TRACE_PERCENT("gc.trace.percent", "0.01", PropertyType.FRACTION, "Percent of gc cycles to trace"), GC_USE_FULL_COMPACTION("gc.post.metadata.action", "compact", PropertyType.GC_POST_ACTION, "When the gc runs it can make a lot of changes to the metadata, on completion, " + " to force the changes to be written to disk, the metadata and root tables can be flushed" + " and possibly compacted. Legal values are: compact - which both flushes and compacts the" + " metadata; flush - which flushes only (compactions may be triggered if required); or none"), // properties that are specific to the monitor server behavior MONITOR_PREFIX("monitor.", null, PropertyType.PREFIX,
"reflect" "sync" "github.com/keybase/kbfs/kbfscodec" "golang.org/x/net/context" ) const (
import React, { Component } from 'react'; import { inject, observer } from 'mobx-react'; import { defineMessages } from 'react-intl'; import WalletSettingsActionConfirmationDialog from '../../../../components/wallet/settings/WalletSettingsRemoveConfirmationDialog'; import type { InjectedProps } from '../../../../types/injectedPropsType'; import type { WalletSettingRemoveMessages } from '../../../../components/wallet/settings/WalletSettingsRemoveConfirmationDialog'; type Props = InjectedProps; const messages: WalletSettingRemoveMessages = defineMessages({ dialogTitle: { id: 'wallet.settings.delete.dialog.title', defaultMessage: '!!!Delete Wallet',
url = config.get_edge_url() headers = aws_stack.mock_aws_request_headers("cloudwatch") authorization = aws_stack.mock_aws_request_headers("monitoring")["Authorization"] headers.update( {
void FixPrecessionSpin::setup(int vflag) { if (utils::strmatch(update->integrate_style,"^verlet")) post_force(vflag); else { ((Respa *) update->integrate)->copy_flevel_f(ilevel_respa);
# @attr pending_examples [Array<RSpec::Core::Example>] the pending examples # @attr load_time [Float] the number of seconds taken to boot RSpec #                         and load the spec files # @attr errors_outside_of_examples_count [Integer] the number of errors that #                                                  have occurred processing #                                                  the spec suite SummaryNotification = Struct.new(:duration, :examples, :failed_examples, :pending_examples, :load_time, :errors_outside_of_examples_count) class SummaryNotification # @api # @return [Fixnum] the number of examples run
$params->output = 'ids'; } elseif ( null === $params->output ) { $params->output = apply_filters( 'pods_pods_field_related_output_type', 'arrays', $this->row, $params, $this ); } if ( in_array( $params->output, array( 'id', 'name', 'object', 'array', 'pod' ) ) )
/* Load policy from / if SELinux is enabled, and we haven't already loaded * a policy.  This is mostly for the "compose tree" case. */ if (selinux && !self->sepolicy) { glnx_autofd int host_rootfs_dfd = -1; /* Ensure that the imported packages are labeled with *a* policy if
var folderLoader caddytls.FolderLoader var certSelector caddytls.CustomCertSelectionPolicy var acmeIssuer *caddytls.ACMEIssuer var keyType *string var internalIssuer *caddytls.InternalIssuer var issuers []certmagic.Issuer var onDemand bool
} } @Override public Row getTemplateRow() { return database.createRow(new Value[getColumns().length], Row.MEMORY_CALCULATE); }
url_key: string.isRequired, small_image: shape({ url: string.isRequired }).isRequired, name: string.isRequired, price: object.isRequired, classes: shape({
none: 'none', }, extend: { maxWidth: { xs: '21rem', }, outline: { blue: ['1px auto ' + colors.link, '3px'],
cmd.Wait() quit <- struct{}{} summary, err := getSummaryLine(stdoutBuf.Bytes()) if err != nil {
class _iLocIndexer(_LocationIndexerBase): """An indexer for modin_df.iloc[] functionality""" def __getitem__(self, key): row_loc, col_loc, ndim, self.row_scaler, self.col_scaler = _parse_tuple(key)
// Raw payload object has type name prefixed with endpoint name. No need to // prefix the type name again. if strings.HasPrefix(p, n) { p = svc.Scope.HashedUnique(payload.Type, p) name = fmt.Sprintf("New%s", p) } else { name = fmt.Sprintf("New%s%s", n, p) } desc = fmt.Sprintf("%s builds a %s service %s endpoint payload.", name, svc.Name, e.Name()) isObject = design.IsObject(payload.Type)
Spork.each_run do end
else: return exec_command(logfile) finally: if logfile is not None: logfile.close() def _send_logs(self): msg = None
func (m metricsCollector) ProgramParsed(location common.Location, duration time.Duration) { if m.MetricsCollector != nil { // These checks prevent re-reporting durations, the metrics collection is a bit counter-intuitive: // The three functions (parsing, checking, interpretation) are not called in sequence, but in some cases as part of each other. // We basically only measure the durations reported for the entry-point (the transaction), and not for child locations, // because they might be already part of the duration for the entry-point. if _, ok := location.(common.TransactionLocation); ok { m.parsed = duration }
return start_moto_server('acm', port, name='ACM', asynchronous=asynchronous) # TODO move to es_starter.py? def start_elasticsearch_service(port=None, asynchronous=False): port = port or config.PORT_ES
closeData(); BlockAppender mba = fileWriter.prepareMetaBlock("RFile.index"); mba.writeInt(RINDEX_MAGIC); mba.writeInt(RINDEX_VER_8);
// We update the context config if the server addr has changed between upgrades if originalCfg.Server.Address != contextConfig.Server.Address { // Update the platform here, basically to upgrade an older context that didn't // have platform set. originalCfg.Server.Platform = c.platform
return err } if err := h.recordWorkloadInResourceTracker(ctx); err != nil { return errors.Wrap(err, "fail to add resourceTracker as owner for workload") } klog.InfoS("template rollout target workload", "namespace", h.rollout.Namespace,
throw e; }); } } export default QuickConnectSettings;
private List<Group> groups; private List<Policy> policies; private List<ServiceIdentity> services; private Domain domain = null; public AthenzDomain(String name) {
assert_equal_branchings(x, x_) def test_edge_attribute_preservation_normal_graph(): # Test that edge attributes are preserved when finding an optimum graph # using the Edmonds class for normal graphs. G = nx.Graph() edgelist = [(0, 1, [('weight', 5), ('otherattr', 1), ('otherattr2', 3)]),
from Bio import Alphabet from Bio.Seq import Seq from Bio.SeqIO.Interfaces import SequenceWriter from Bio.SeqRecord import SeqRecord import struct import sys import re
summary='Create a new objective', description='Create a new objective using the format provided in the `ObjectiveSchema`.') @aiohttp_apispec.request_schema(ObjectiveSchema) @aiohttp_apispec.response_schema(ObjectiveSchema, description='Returns single objective in ObjectiveSchema format.') async def create_objective(self, request: web.Request): objective = await self.create_on_disk_object(request) return web.json_response(objective.display)
want:  map[string]interface{}{"a": int64(1)}, want2: map[string]interface{}{"a": int32(1)}, }, {in: map[string][]byte{"a": {1, 2}}, want: map[string]interface{}{"a": []byte{1, 2}}}, } { enc, err := encode(S{test.in}) if err != nil {
""" cls = super(Register, metacls).__new__(metacls, classname, bases, classdict) if cls.task_namespace is None: cls.task_namespace = metacls._default_namespace metacls._reg.append(cls)
# coding=utf-8 import unittest import os import re from time import sleep, time from selenium import webdriver from selenium.common.exceptions import NoSuchElementException from selenium.common.exceptions import NoAlertPresentException
private String password; private String sender; public MailService(KylinConfig config) { this(config.isNotificationEnabled(), config.isStarttlsEnabled(), config.getMailHost(), config.getSmtpPort(), config.getMailUsername(), config.getMailPassword(), config.getMailSender()); } private MailService(boolean enabled, boolean starttlsEnabled, String host, String port, String username, String password, String sender) {
} @Provides @Singleton public AppDatabase provideAppDataBase() { return Room.databaseBuilder(applicationContext, AppDatabase.class, "commons_room.db").build(); }
onClick={handleSignOut} type="button" > <FormattedMessage id={'accountMenu.signOutButtonText'} defaultMessage={'Sign Out'} /> </button> </div> );
places = getFromWikidataQuery(curLatLng, lang, radius); } catch (Exception e) { Timber.d("exception in fetching nearby places", e.getLocalizedMessage()); return places; } Timber.d("%d results at radius: %f", places.size(), radius); if (places.size() >= MIN_RESULTS) {
const fn = onHideAnimationComplete.bind(instance); instance._onHideAnimationComplete = fn; const transitionEvent = await new Promise((resolve) => { dom.addEventListener(elem, transitionEndEventName, resolve, { once: true });
} if (pref instanceof EditTextPreference) { EditTextPreference editTextPref = (EditTextPreference) pref; if (pref.getKey().contains("danar_password")) { pref.setSummary("******"); } else if (editTextPref.getText() != null && !editTextPref.getText().equals("")) { ((EditTextPreference) pref).setDialogMessage(editTextPref.getDialogMessage());
mockDeleteChangeSet: func(t *testing.T, in *cloudformation.DeleteChangeSetInput) (*cloudformation.DeleteChangeSetOutput, error) { return nil, nil }, } }, },
@Override protected void validate(TableMetadata base) { if (base.currentSnapshot() != null) { if (!referencedDataFiles.isEmpty()) { validateDataFilesExist(
} getState(): TransactionState { switch (this.condition) { case 'CPtxApplying': return 'pending'; case 'CPtxWontApply': return 'failed'; default: return 'ok'; // CPtxInBlocks && CPtxNotTracked
stride=1, padding=0, dilation=1, deformable_groups=1, bias=None): assert bias is None super(DeformConv, self).__init__() self.in_channels = in_channels self.out_channels = out_channels
console.log('setting src remote `origin` to ' + config.chromiumRepo) util.run('git', ['-C', config.srcDir, 'remote', 'remove', 'origin'], options) util.run('git', ['-C', config.srcDir, 'remote', 'add', 'origin', config.chromiumRepo], options) } if (fs.existsSync(config.braveCoreDir)) { console.log('setting src/brave remote `origin` to ' + config.braveCoreRepo) util.run('git', ['-C', config.braveCoreDir, 'remote', 'remove', 'origin'], options) util.run('git', ['-C', config.braveCoreDir, 'remote', 'add', 'origin', config.braveCoreRepo], options)
window.scrollTo(0, newScroll); } } } var mousedown = watchFunction(function (event) {
'Install/PerformSecurityFix', 'Install/ShowSQL', 'LibGuides/Home', 'LibGuides/Results', 'LibraryCards/Home', 'LibraryCards/SelectCard', 'LibraryCards/ConnectShibbolethCard', 'LibraryCards/ConnectShibbolethCardLogin', 'LibraryCards/DeleteCard', 'MyResearch/Account', 'MyResearch/ChangeEmail', 'MyResearch/ChangePassword', 'MyResearch/CheckedOut', 'MyResearch/Delete', 'MyResearch/DeleteAccount',
}; var to_absolute_cursor_pos = function (cm, cursor) { console.warn('`utils.to_absolute_cursor_pos(cm, pos)` is deprecated. Use `cm.indexFromPos(cursor)`'); return cm.indexFromPos(cusrsor); }; var from_absolute_cursor_pos = function (cm, cursor_pos) { console.warn('`utils.from_absolute_cursor_pos(cm, pos)` is deprecated. Use `cm.posFromIndex(index)`'); return cm.posFromIndex(cursor_pos); };
t.Run(tt.name, func(t *testing.T) { reqMatcher := NewRequestMatcher(t, &transport.Request{ Transport: tt.transport, Body:      &bytes.Buffer{}, }) req := &transport.Request{ Transport: "foo-transport", Body:      &bytes.Buffer{}, } if tt.wantMatch {
} token := c.config.Token if token == "" { tokenFromFile, err := readTokenFromFile(c.runtime.ServerToken, c.config.DataDir) if err != nil {
# Arguments that are just blank spaces aren't really arguments # We need to get rid of those. If the user intended to pass a sequence # of spaces, it would come between quotes args = [a for a in args if a.strip() != ''] verify_arg_signature(self.func, list(args), {}) remainder: typing.Sequence[str] = []
InsertTx(context.Context, *sql.Tx, *User) (*User, error) Update(context.Context, *User) error UpdateTx(context.Context, *sql.Tx, *User) error SetUserRoleTx(ctx context.Context, tx *sql.Tx, id string, role permission.Role) error Delete(context.Context, string) error DeleteManyTx(context.Context, *sql.Tx, []string) error FindOne(context.Context, string) (*User, error)
import React from 'react'; import { createTestInstance } from '@magento/peregrine'; import Buttons from '../Buttons'; import ShallowRenderer from 'react-test-renderer/shallow'; const renderer = new ShallowRenderer(); jest.mock('../../../../../../classify'); test('renders a Buttons component with stacked appearance', () => { const buttonsProps = { appearance: 'stacked',
* @param nodeName the node on which to do the query */ private void addQueryToNode(final XPath xPath, final String nodeName) { List<XPath> xPathsForNode = nodeNameToXPaths.get(nodeName); if (xPathsForNode == null) { xPathsForNode = new ArrayList<>(); nodeNameToXPaths.put(nodeName, xPathsForNode); } xPathsForNode.add(xPath); } private BaseXPath createXPath(final String xpathQueryString, final Navigator navigator) throws JaxenException {
TokenSystem, TokenText, Uri, } }
import ( "context" "time" "github.com/crossplane/crossplane-runtime/pkg/event" apierrors "k8s.io/apimachinery/pkg/api/errors" metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
import com.esotericsoftware.kryo.io.Input; import com.esotericsoftware.kryo.io.Output; import com.google.common.collect.ImmutableList; import com.google.common.collect.Maps; import java.io.File; import java.io.FileInputStream; import java.io.FileOutputStream; import java.nio.ByteBuffer; import java.nio.ByteOrder; import java.util.Map; import org.apache.iceberg.types.Types; import org.apache.spark.SparkConf;
package startupshutdown import ( "log" "os" "os/exec" "strings" "github.com/mholt/caddy" ) func init() {
return configurationBuilder; } testEnvironmentFilePath = Path.GetFullPath(testEnvironmentFilePath.Replace('\\', Path.DirectorySeparatorChar)); if (!File.Exists(testEnvironmentFilePath)) { return configurationBuilder;
return trim( $string ); } ); Functions\when( 'sanitize_email' )->returnArg(); Functions\when( 'sanitize_text_field' )->returnArg(); Functions\when( 'rocket_valid_key' )->justReturn( true );
for _, p := range paramAndDSL { param, ok = p.(string) if !ok { dslengine.ReportError("invalid CollectionOf argument, must be a string or a DSL function", p) return "", nil } }
for have, want := range mapping { if have != want { t.Fatalf("unexpected bee node mode: have %q; want %q", have, want) } } }
package tech.pegasys.pantheon.consensus.ibftlegacy; import static java.util.Collections.singletonList; import static org.assertj.core.api.Assertions.assertThat; import static tech.pegasys.pantheon.consensus.common.ValidatorVotePolarity.ADD; import static tech.pegasys.pantheon.consensus.common.ValidatorVotePolarity.DROP; import java.util.List; import java.util.Optional; import org.junit.Before; import org.junit.Test; import tech.pegasys.pantheon.consensus.common.CastVote; import tech.pegasys.pantheon.crypto.SECP256K1.KeyPair; import tech.pegasys.pantheon.ethereum.core.Address; import tech.pegasys.pantheon.ethereum.core.AddressHelpers;
// we support is cloneset/statefulset for now. We can easily add more later. supportInplaceUpgrade := false if w.GroupVersionKind().Group == v1alpha1.GroupVersion.Group { if w.GetKind() == reflect.TypeOf(v1alpha1.CloneSet{}).Name() { supportInplaceUpgrade = true } } else if w.GroupVersionKind().Group == appsv1.GroupName {
} mRvAllergens = (RecyclerView) view.findViewById(R.id.alergens_recycle); mAllergensEnabled = Utils.getAppDaoSession(this.getActivity()).getAllergenDao().queryBuilder().where(AllergenDao.Properties.Enable.eq("true")).list(); mAdapter = new AllergensAdapter(mAllergensEnabled, getActivity()); mRvAllergens.setAdapter(mAdapter); mRvAllergens.setLayoutManager(new LinearLayoutManager(view.getContext())); mRvAllergens.setHasFixedSize(true);
<i class="fa fa-dashboard"></i> Home <% end %> </li> <li><%= link_to "Inventory Adjustments", (adjustments_path) %></li> <li class="active"> New Adjustment</li> </ol> </section>
</div> <footer class="footer"> &copy; 2008&thinsp;&ndash;&thinsp;<%= Time.new.year %> Chef Software, Inc. All Rights Reserved. <br><br><%= link_to 'Code of Conduct', chef_docs_url('community_guidelines.html') %> <%= link_to 'Terms and Conditions of Use', chef_www_url('terms-of-service') %> <%= link_to 'Privacy Policy', chef_www_url('privacy-policy') %> <%= link_to 'Trademark Policy', chef_www_url('trademark-policy') %> </footer> <a class="exit-off-canvas"></a>
self.app_svc.application.router.add_route('POST', '/file/upload', self.upload_exfil_http) async def get_endpoint_by_access(self, request, endpoint): access = [p for p in await self.auth_svc.get_permissions(request) if p in self.modules] for module in access: try: return await self.modules[module][endpoint](self, request) except Exception as e: self.log.debug(e) return await self.login(request)
bytes := make([]byte, 32) select { case <-rh.Leader.Done: log.Printf("RandHound - done") bytes = <-rh.Leader.Result case <-time.After(time.Second * 60):
def authenticate_presign_url_signv4(method, path, headers, data, url, query_params, request_dict): # Calculating Signature aws_request = create_request_object(request_dict) ReadOnlyCredentials = namedtuple('ReadOnlyCredentials', ['access_key', 'secret_key', 'token'])
return owned def get_transactions_filtered(self, asset_id, operation=None): """ Get a list of transactions filtered on some criteria """ txids = backend.query.get_txids_filtered(self.connection, asset_id, operation) for txid in txids:
if asset in self.sources_map: # go find this asset in our custom sources try: # TODO: Change to index both dt and column at once. return self.sources_map[asset].loc[dt].loc[column] except: log.error( "Could not find price for asset={0}, current_day={1},"
// assemble a multibody tree according to the PhysicalFrames in the // OpenSim model, which include Ground and Bodies _multibodyTree.addBody(ground.getAbsolutePathName(), 0, false, &ground); auto bodies = getComponentList<Body>();
import os from tensorflow.python.framework import test_util from tensorflow_addons.custom_ops import text from tensorflow_addons.custom_ops.text.python import skip_gram_ops from tensorflow.python.framework import constant_op from tensorflow.python.framework import dtypes
job.suspend(); assertJobStatusEventually(job, SUSPENDED); assertThat(job.getSuspensionCause()).matches(JobSuspensionCause::requestedByUser); assertThat(job.getSuspensionCause().description()).isEqualTo("Requested by user"); assertThatThrownBy(job.getSuspensionCause()::errorCause) .isInstanceOf(IllegalStateException.class) .hasMessage("Suspension not caused by an error"); cancelAndJoin(job);
* * @return a new {@link RewriteManifests} */ RewriteManifests rewriteManifests(); /** * Create a new {@link OverwriteFiles overwrite API} to overwrite files by a filter expression.
var findErr error if v.Name == "DB_PASSWORD" { password, findErr = FindValueFromEnvVar(v, client, namespace) if findErr != nil { return nil, findErr } } else if v.Name == "DB_PORT" { var portStr string portStr, findErr = FindValueFromEnvVar(v, client, namespace) if findErr != nil { return nil, findErr } pPort, err := strconv.ParseUint(portStr, 10, 16) if err != nil { return nil, xerrors.Errorf("error parsing DB_PORT '%s' on pod %s!", v.Value, pod.Name)
* @param array $excluded_files List of excluded CSS files. */ $excluded_files = apply_filters( 'rocket_exclude_css', $excluded_files ); } elseif ( 'js' === $extension ) { global $wp_scripts; $excluded_files = get_rocket_option( 'exclude_js', array() );
// the MissionGroup if not specified. SimGroup* missionGroup = dynamic_cast<SimGroup*>(Sim::findObject("MissionGroup")); SimGroup* group = 0; if (dStrcmp(parentGroup, "") == 0){ if (!Sim::findObject(parentGroup, group)) { // Create the group if it could not be found group = new SimGroup;
// pool is not full yet, add connection for reuse p.pool = append(p.pool, client) p.Unlock()  return nil }  p.Unlock()  // otherwise, close the connection. return client.Close() }
/** * @author Jitendra Singh * @since 4.2 */ public class UsernamePasswordAuthenticationTokenMixinTest extends AbstractMixinTests {
* * <ul> * <li>{@link #existsUnique(Predicate)}</li> * <li>{@link #hasDefiniteSize()}</li> * <li>{@link #isDistinct}</li> * <li>{@link #isOrdered}</li> * <li>{@link #isTraversableAgain()}</li> * </ul> *
<!-- Spam Trap --> <div style="left:-999em; position:absolute;"><label for="trap"><?php esc_html_e( 'Anti-spam', 'sensei-lms' ); ?></label><input type="text" name="email_2" id="trap" tabindex="-1" /></div> <input type="hidden" id="sensei_reg_http_referer" name="sensei_reg_http_referer" value="<?php echo wp_get_referer() ? esc_url( wp_get_referer() ) : ''; ?>"> <?php do_action( 'sensei_register_form_fields' ); ?> <?php do_action( 'register_form' ); ?>
}, nil } func (u *Upstream) fillHost() { host := new(Host) existingHost, loaded := hosts.LoadOrStore(u.String(), host) if loaded {
Call Sphinx command with hard-coded "html" target """ # Copy docs files from Open3D-ML repo OPEN3D_ML_ROOT = os.environ.get( "OPEN3D_ML_ROOT", os.path.join(self.current_file_dir, "../../Open3D-ML")) if os.path.isdir(OPEN3D_ML_ROOT): shutil.copy(os.path.join(OPEN3D_ML_ROOT, "docs", "tensorboard.md"), self.current_file_dir)
NotificationViewModel vm) { var baseStr = $"Invoice {notification.InvoiceId.Substring(0, 5)}.."; vm.Body = $"{baseStr} {TextMapping[notification.Event]}"; vm.ActionLink = _linkGenerator.GetPathByAction(nameof(InvoiceController.Invoice), "Invoice", new {invoiceId = notification.InvoiceId}, _options.RootPath);
*/ static <T> Iterator<T> fill(int n, Supplier<? extends T> s) { Objects.requireNonNull(s, "s is null"); return Collections.fill(n, s); } /**
return; } $transient = 'rocket_renewal_banner_' . get_current_user_id(); if ( false !== get_transient( $transient ) ) { return; } set_transient( $transient, 1, MONTH_IN_SECONDS ); wp_send_json_success(); }
subctx.implicit_tid_in_shapes = False viewgen.compile_view_shapes(ir_set, ctx=subctx) elif (orig_stype.issubclass(ctx.env.schema, json_t) and new_stype.is_enum(ctx.env.schema) and False): # Casts from json to enums need some special handling # here, where we have access to the enum type. Just turn # it into json->str and str->enum. str_typ = ctx.env.get_track_schema_type('std::str') str_ir = compile_cast(ir_expr, str_typ, srcctx=srcctx, ctx=ctx) return compile_cast(str_ir, new_stype, srcctx=srcctx, ctx=ctx)
if not resource['should_notify']: LOGGER.debug('Not notifying for: %s', resource['resource']) continue if notifier_configs.get('email_connector'): notifiers.append(email_violations.EmailViolations( resource['resource'], inventory_index_id, violation_map[resource['resource']], global_configs,
// NullBranchID signals that the folder's current branch ID // should be looked up. arg := keybase1.GetMetadataArg{ FolderHandle:  encodedHandle, BranchID:      NullBranchID.String(), Unmerged:      mStatus == Unmerged, LockBeforeGet: lockBeforeGet, } id, rmdses, err := md.get(ctx, arg)
// This code will even wait on tablets that are assigned to dead tablets servers. This is // intentional because the master may make metadata writes for these tablets. See #587 log.debug( "Still waiting for table({}) to be deleted; Target tablet state: UNASSIGNED, Current tablet state: {}, locationState: {}", tableId, state, locationState); done = false; break;
block *flow.Block, chunks []*flow.Chunk, serviceEvents []flow.Event, ) (*flow.ExecutionResult, error) { // convert Cadence service event representation to flow-go representation
let tsJest = null try { tsJest = require.resolve('ts-jest') } catch (e) { throw new Error('Cannot resolve "ts-jest" module. Typescript preset requires "ts-jest" to be installed.') }
<thead> <tr> <th data-field="icon" data-visible="true" style="width: 40px;" class="hidden-xs" data-formatter="iconFormatter"></th> <th class="col-sm-2" data-visible="false" data-field="created_at" data-formatter="dateDisplayFormatter">{{ trans('general.date') }}</th> <th class="col-sm-1" data-visible="true" data-field="admin" data-formatter="usersLinkObjFormatter">{{ trans('general.admin') }}</th> <th class="col-sm-2" data-visible="true" data-field="item" data-formatter="polymorphicItemFormatter">{{ trans('general.item') }}</th> <th class="col-sm-1" data-visible="true" data-field="action_type">{{ trans('general.action') }}</th> <th class="col-sm-2" data-visible="true" data-field="target" data-formatter="polymorphicItemFormatter">{{ trans('general.target') }}</th> <th class="col-sm-2" data-visible="true" data-field="action_date" data-formatter="dateDisplayFormatter">{{ trans('general.date') }}</th> <th class="col-sm-2" data-field="note">{{ trans('general.notes') }}</th> @if  ($snipeSettings->require_accept_signature=='1') <th class="col-md-3" data-field="signature_file" data-visible="false"  data-formatter="imageFormatter">{{ trans('general.signature') }}</th>
countries, actions: { updateEmails(values) { this.newSubscription.billingInfo.set('billingEmail', values.join(',')); }, }
* @param informationKey contains the statistics in its meta information * @param metaName which statistic to set * @param value which value to set it to, must be a number * @retval 0 on success, 1 otherwise. * * This enforces that a number is set. */
use Thelia\Coupon\CouponFactory; use Thelia\Coupon\CouponManager; use Thelia\Coupon\Type\CouponInterface; use Thelia\Model\Coupon as CouponModel; use Thelia\Model\CouponCountry; use Thelia\Model\CouponCountryQuery; use Thelia\Model\CouponCustomerCount; use Thelia\Model\CouponCustomerCountQuery; use Thelia\Model\CouponModule; use Thelia\Model\CouponModuleQuery; use Thelia\Model\CouponQuery; use Thelia\Model\Map\OrderCouponTableMap; use Thelia\Model\OrderCoupon;
filepath.Join(options.DirectoryConfig, options.LocationDatabase), ) locationCache := location.NewLocationCache(locationDetector) vpnClientFactory := connection.ConfigureVpnClientFactory( mysteriumClient,
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4473-SEA 1645531083 2046476148</p> <hr> <p>Varnish cache server</p> </body>
return true; } /// <summary> /// Gets the set of strides that can be used to calculate the offset of n-dimensions in a 1-dimensional layout /// </summary>
var valid = false; var midStrBegin = extractorResults[secondExtractionIndex - 1].Start + extractorResults[secondExtractionIndex - 1].Length ?? 0; var midStrEnd = extractorResults[secondExtractionIndex].Start ?? 0; if (midStrBegin > midStrEnd) { return extractorResults; }  var midStr = text.Substring(midStrBegin, midStrEnd - midStrBegin); var match = DurationConnectorRegex.Match(midStr); if (match.Success)
from dgl.nn.pytorch import RelGraphConv class RGCN(nn.Module): def __init__(self, in_dim, h_dim, out_dim, num_rels, regularizer="basis", num_bases=-1, dropout=0., self_loop=False, link_pred=False):
wsJobReader } type wsPipelineReader interface { wsServiceLister wsPipelineManifestReader
} } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) {
} fmt::format_to(out, "#{:<3} :: {} :: {}:{:<5} :: {:2} :: {}:{} :: {} :: ({})", zone_server_data->GetID(), is_static_string, addr.c_str(),
﻿using System.Linq; using System.Threading; using System.Transactions; using NHibernate.Engine; using NUnit.Framework; namespace NHibernate.Test.NHSpecificTest.GH1594
andThen(() => { assert.equal(topPage.flashMessage.text, 'The build was successfully restarted.', 'restarted notification should display proper build restarted text');  const logNumbers = buildPage.singleJobLogText.match(/\d+/g); const logContent = buildPage.singleJobLogText.split(/\d+/g).filter(Boolean);  assert.equal(logNumbers.length, 2, 'counts lines of log text of single build job'); assert.equal(logNumbers[0], '1', 'shows number of first line of log text of single build job'); assert.equal(logContent[0], 'Hello log', 'shows content of first line of log text of single build job'); assert.equal(logNumbers[1], '2', 'shows number of second line of log text of single build job'); assert.equal(logContent[1], 'Second line', 'shows content of second line of log text of single build job'); }); });
import java.util.Collection; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ScheduledFuture; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicReference; import java.util.function.Function;
'admin_notices'                      => 'clear_usedcss_result', 'rocket_admin_bar_items'             => 'add_clean_used_css_menu_item', 'rocket_after_settings_checkbox'     => 'display_progress_bar', 'admin_enqueue_scripts'              => 'add_admin_js', ]; }
// OutboundsConfig is the configuration for constructing a set of outbounds. type OutboundsConfig struct { Outbounds map[string]OutboundConfig `yaml:",inline"` } // OutboundConfig is the configuration for constructing a specific outbound.
} else { $queryString = sprintf( "SELECT count(persistence_object_identifier) c FROM neos_media_domain_model_asset WHERE dtype = '%s'", FlowAnnotationDriver::inferDiscriminatorTypeFromClassName($this->entityClassName) ); }
} request = requestMap.at(client->restag); if (!request || ((request->getType() != MegaRequest::TYPE_FETCH_NODES) && (request->getType() != MegaRequest::TYPE_CREATE_ACCOUNT))) { return; }
// New returns new Hub func New(ctx context.Context, cfg *HubConfig, version string) (*Hub, error) { var err error ctx, cancel := context.WithCancel(ctx) defer func() { if err != nil { cancel() } }() ethKey, err := crypto.HexToECDSA(cfg.Eth.PrivateKey) if err != nil { return nil, errors.Wrap(err, "malformed ethereum private key")
// `options.permissions` is set to false, permissions checks // are bypassed. // // If `options.skipAttachments` is true, the operation will be slightly // faster, however this is only safe to use if both the schema of the document // and the schemas of any arrays and widgets within the document and its // areas contain no attachments. This does not include attachments // reached via joins. // // If no callback is supplied, a promise is returned.
{ EnsureArg.IsNotNull(services, nameof(services)); var jsonParser = new FhirJsonParser(DefaultParserSettings.Settings); var jsonSerializer = new FhirJsonSerializer(); var xmlParser = new FhirXmlParser();
"if you use dict, the index should start from 0") if eval_at is not None: self._eval_at = eval_at super(LGBMRanker, self).fit(X, y, sample_weight=sample_weight, init_score=init_score, group=group, eval_set=eval_set, eval_names=eval_names,
name = fullname.name parts = name.split('@', 1) if len(parts) == 2: return name_from_string(unmangle_name(parts[0])) else: return fullname
public static final String STRING = "STRING"; public static final String SUBSTITUTION = "SUBSTITUTION"; public static final String UNIFICATION = "UNIFICATION"; public static final Set<String> namespaces = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(ARRAY, BOOL, BUFFER, BYTES, FFI, FLOAT, INT, IO, KEQUAL, KREFLECTION, LIST, MAP, MINT, SET, STRING, SUBSTITUTION, UNIFICATION))); }
SecretKeyRef: p.Spec.Thanos.ObjectStorageConfig, }, }) }  if p.Spec.Thanos.ObjectStorageConfigFile != nil { container.Args = append(container.Args, "--objstore.config-file="+*p.Spec.Thanos.ObjectStorageConfigFile) }
ConsumeQueue logic = this.findConsumeQueue(topic, queueId); if (logic != null) { long consumeQueueOffset = logic.getMinOffsetInQueue(); long commitLogOffset = 0L; if (realOffset) { long minCommitoffset = this.commitLog.getMinOffset(); long maxOffsetInQueue = getMaxOffsetInQueue(topic,queueId); for (;consumeQueueOffset <= maxOffsetInQueue;consumeQueueOffset++) { commitLogOffset = getCommitLogOffsetInQueue(topic, queueId, consumeQueueOffset); if (commitLogOffset >= minCommitoffset) { return consumeQueueOffset; } }
func convertCoverage(in map[string][]core.LineCoverage, allowedFiles []string) map[string]string { ret := map[string]string{} for k, v := range in { if cli.ContainsString(k, allowedFiles) { ret[k] = core.TestCoverageString(v) } } return ret }
const ( maxBins         = 16 nnLowWatermark  = 2 // the number of peers in consecutive deepest bins that constitute as nearest neighbours maxConnAttempts = 3 // when there is maxConnAttempts failed connect calls for a given peer it is considered non-connectable ) var (
// average out the last few results from Ping public int pingWindowSize = 10; double lastPingTime = 0; int m_HostPort;
public abstract Address[] getRecipients(RecipientType type) throws MessagingException; public abstract void setRecipients(RecipientType type, Address[] addresses) throws MessagingException;
// Dispatch runs the protocol. func (p *CollectTxProtocol) Dispatch() error { defer p.Done() var req structCollectTxRequest
return item; } /** * Set what plan item (index, cost, masks) to use. *
double *T = new double[vT->m_AvailableSteps * readsize[0] * readsize[1]]; // Create a 2D selection for the subset vT->SetSelection(offset, readsize); vT->SetStepSelection(0, vT->m_AvailableSteps); // Arrays are read by scheduling one or more of them
description={description} buttonLabel={buttonLabel} linkLabel={linkLabel} isIncentivizedTestnetTheme={isIncentivizedTestnetTheme} backgroundImage={backgroundImage} /> );
def _apply(self, group): attr = getattr(group, self.field) mask = np.isin(attr, self.values) return group[mask]
$attrs = $this->attributes(); // fix 'true' or 'false' to real bools. if (count($attrs) > 2) { $bool = array_slice($attrs, 2); array_splice($attrs, 2, 1, array_map('str_to_bool', $bool)); } return call_user_func_array('url_title', $attrs);
// the cancel time changes. The cancel time only changes if multiple // cancel requests are made. if job.CancelTime != nil && (lastJob == nil || !lastJob.CancelTime.AsTime().Equal(job.CancelTime.AsTime())) { // The job is forced if we're in an error state. This must be true // because we would've already exited the loop if we naturally // got a terminal event.
{ if(db->hasDetectedFirstRun()) { QMessageBox::information(this, tr("Welcome"), tr("Hi! Its seems like it's the first time you run this version of Cockatrice.\nAll the sets in the card database have been enabled.\nRead more about changing the set order or disabling specific sets in the the \"Edit Sets\" window.")); actEditSets(); } } No newline at end of file
auto tserver = tablet_map->find(desc->permanent_uuid()); bool no_tablets = tserver == tablet_map->end(); if (viewType == TServersViewType::kTServersClocksView) { // Render physical time. const Timestamp p_ts(desc->physical_time()); *output << "    <td>" << p_ts.ToFormattedString() << "</td>";
defer log.AfterTest(t) testType := network.MessageTypeID(uuid.Nil) local := sda.NewLocalTest() _, _, tree := local.GenTree(3, false, false, true) defer local.CloseAll() p, err := local.CreateProtocol(tree, "ProtocolChannels")
wl2.setUpdateTime(Timestamp.fromMillis(123456789123L)); wl2.setHostname("random"); assertNotEquals(wl1, wl2); wl2.setHostname(null); assertNotEquals(wl1, wl2); wl2.setHostname("testhost-1"); assertEquals(wl1, wl2);
type ExecTxnFields struct { _struct struct{} `codec:",omitempty,omitemptyarray"` Input string `codec:"inp` Code string `codec:"cod"` }
# Sanity check: can lock when mentor has less than four existing locks Mentor::Request::Lock.(create(:mentor_request), mentor) 3.times { Mentor::Request::Lock.(create(:mentor_request), mentor) } Mentor::Request::Lock.(create(:mentor_request), mentor) assert_raises MentorSolutionLockLimitReachedError do
} @Test public void setNodeWhiteListPassingNullShouldNotChangeWhitelistSetFlag() { final PermissioningConfiguration configuration = PermissioningConfiguration.createDefault(); configuration.setNodeWhitelist(null); assertThat(configuration.getNodeWhitelist()).isEmpty();
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4475-SEA 1645543197 93235762</p> <hr> <p>Varnish cache server</p> </body>
.getSourceSets() .matching(ss -> hasCompileDependenciesMatching(proj, ss, this::isJunitJupiter)) .forEach(ss -> { String testTaskName = ss.getTaskName(null, "test"); Test testTask = (Test) proj.getTasks().findByName(testTaskName); if (testTask == null) {
void SceneCheckAPIChange::installDefaultChangeSets() { addHookInChangeSet("17.06", [](Base* o){ if(o->getClassName() == "RestShapeSpringsForceField" && o->findLink("external_rest_shape") ) { if( o->findLink("external_rest_shape")->getSize() != 0) msg_warning(o) << "RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315" ; } }) ; addHookInChangeSet("17.06", [](Base* o){
Returns: bool: True if using a composite root, else False. """ return not self.root_resource_id def get_root_resource_id(self): """Return the configured root resource id.
}, afterModel(model) { if (model && !model.error && !this.features.get('enterpriseVersion')) model.fetchBetaMigrationRequests(); } });
return nil, 0, err } transport, err := CreateTransport(auth, &http.Transport{}, timeout, nil) if err != nil { return nil, 0, err }
SqlKind.OTHER_FUNCTION, ReturnTypes.DATE_NULLABLE, null, OperandTypes.CHARACTER_CHARACTER_DATETIME, SqlFunctionCategory.TIMEDATE); @LibraryOperator(libraries = {MYSQL, POSTGRESQL})
logger.info("Deploy ssh key pairs.") self.osutil.deploy_ssh_keypair(ovfenv.username, keypair) def report_event(self, message, is_success=False, duration=0, operation=WALAEventOperation.Provision): add_event(name=AGENT_NAME, message=message, duration=duration, is_success=is_success, op=operation) def report_not_ready(self, sub_status, description): status = ProvisionStatus(status="NotReady", subStatus=sub_status,
if (isAnyDistinct()) { rows = distinctRows.values(); } if (sort != null && limit != 0) { boolean withLimit = limit > 0 && !withTies; if (offset > 0 || withLimit) { sort.sort(rows, offset, withLimit ? limit : rows.size()); } else { sort.sort(rows); }
# @api private def add_txn_opts!(command, read) command.tap do |c| # The read concern should be added to any command that starts a transaction. if starting_transaction? # https://jira.mongodb.org/browse/SPEC-1161: transaction's
key_value['key'] for key_value in source.key_value_pairs]): if self.CheckKeyCompatibility(key_path): find_specs = self.BuildFindSpecsFromRegistryArtifact(key_path) artifact_group = self._find_specs_per_source_type[ artifact_types.TYPE_INDICATOR_WINDOWS_REGISTRY_KEY] artifact_group.extend(find_specs) elif (source.type_indicator == artifact_types.TYPE_INDICATOR_ARTIFACT_GROUP):
import javax.annotation.PostConstruct; import javax.inject.Inject; import com.fasterxml.jackson.databind.ObjectMapper; import io.quarkus.runtime.Startup; import org.kie.kogito.eventdriven.rules.AbstractEventDrivenQueryExecutor; import org.kie.kogito.rules.RuleUnit;
runner.register_training_hooks(cfg.lr_config, optimizer_config, cfg.checkpoint_config, cfg.log_config, cfg.get('momentum_config', None)) if distributed: runner.register_hook(DistSamplerSeedHook())
// Node whitelist errors NODE_WHITELIST_NOT_SET(-32000, "Node whitelist has not been set"), NODE_WHITELIST_DUPLICATED_ENTRY(-32000, "Request can't contain duplicated node entries"), NODE_WHITELIST_EXISTING_ENTRY(-32000, "Node whitelist can't contain duplicated node entries"), NODE_WHITELIST_MISSING_ENTRY(-32000, "Node whitelist does not contain a specified node"), NODE_WHITELIST_INVALID_ENTRY(-32000, "Unable to add invalid node to the node whitelist");
// This shouldn't happen, as the SELECT is bounded by MAXTASKS LogTasks( "[LoadTasks] Error: Task or activity_information ID ([{}], [{}]) out of range while loading activities from database", task_id, activity_id );
""" with debug.log_time(log.completion, 'Setting filter pattern'): self.pattern = val val = re.escape(val) val = val.replace(r'\ ', r'.*') self.pattern_re = re.compile(val, re.IGNORECASE) self.invalidateFilter() sortcol = 0 try:
// See the License for the specific language governing permissions and // limitations under the License. #include <mutex> #include <fstream>
res_handler = result_handler_plist_to_file.PlistToFile( buildaction, report_output, export_plist_path) res_handler.print_steps = args.print_steps
return append(result, c.bundle.Value().([]*x509.Certificate)...) } func (c *cacheImpl) SubscribeToBundleChanges() observer.Stream { return c.bundle.Observe() }
if(node) { // After speculative instant completion removal, this is not needed (always sent via actionpacket code) client->syncs.forEachRunningSyncContainingNode(node, [&](Sync* s) { client->app->syncupdate_remote_rename(s, node, pa.c_str()); }); } }
// Configure TLS // TODO: Pick better options here tlsConfig := &tls.Config{ RootCAs: a.Config.TrustBundle, } dialCreds := grpc.WithTransportCredentials(credentials.NewTLS(tlsConfig)) conn, err := grpc.Dial(a.Config.ServerAddress.String(), dialCreds)
int s2n_extension_supported_iana_value_to_id(const uint16_t iana_value, s2n_extension_type_id *internal_id) { notnull_check(internal_id);  *internal_id = s2n_extension_iana_value_to_id(iana_value); S2N_ERROR_IF(*internal_id == s2n_unsupported_extension, S2N_ERR_UNRECOGNIZED_EXTENSION); return S2N_SUCCESS;
//---------------------------------------------------------------------------- #if defined( KOKKOS_DEBUG )  __device__ void verify_warp_convergence( const char * const where ) {
return success; } std::vector<std::string> UDPv4Transport::GetBindingInterfacesList(const Locator_t& /*locator*/) { std::vector<std::string> vOutputInterfaces; if (IsInterfaceWhiteListEmpty()) { vOutputInterfaces.push_back("0.0.0.0"); }
#include <iostream> bool isPossible(int &mat[][9], int i, int j, int no, int n) { /// Row or col nahin hona chahiye for (int x = 0; x < n; x++) { if (mat[x][j] == no || mat[i][x] == no) {
class MasterProvisioning(Provisioning): def get_rfiles(self): rfiles = [] additional_files = [] for executor in self.executors:
final View layouttoast; LayoutInflater inflater = getLayoutInflater(); layouttoast = inflater.inflate(R.layout.toast_custom, (ViewGroup) findViewById(R.id.toastcustom)); ((TextView) layouttoast.findViewById(R.id.texttoast)).setText(R.string.back_to_exit); Toast mytoast = new Toast(getBaseContext()); mytoast.setView(layouttoast);
.. versionadded:: 0.17.0 .. versionchanged:: 0.19.0 The attached Reader when trajectory=True is now a MemoryReader .. versionchanged:: 0.21.0 Universes can now be created with 0 atoms with an error """ if not n_atoms: n_residues = 0
})); } function dismissNotification(notificationId, callCancel) { var notification = Notifications.findOne({_id: notificationId}); if (notification) { Notifications.remove({_id: notificationId});
"""Get machine ID""" return self._machine_id def barrier(self): """Barrier for all client nodes.
VolumeChooserEnvironment chooserEnv = new VolumeChooserEnvironment(extent.getTableId(), context); Path newDir = new Path(vm.choose(chooserEnv, ServerConstants.getBaseUris(context)) + Path.SEPARATOR + ServerConstants.TABLE_DIR + Path.SEPARATOR + dir.getParent().getName() + Path.SEPARATOR + dir.getName());
this.brokerController.getConfiguration().update(properties); if (properties.containsKey("brokerPermission")) { this.brokerController.getTopicConfigManager().getDataVersion().nextVersion(); this.brokerController.registerBrokerAll(false, false, true); } } else { log.error("string2Properties error");
/** * @returns a new Multisig output script for given public keys, * requiring m of those public keys to spend * @param {PublicKey[]} pubkeys - list of all public keys controlling the output * @param {number} m - amount of required signatures to spend the output */ Script.buildMultisigOut = function(pubkeys, m) { var s = new Script();
listTransformLambda = Expression.Lambda(invoked, listTransformLambda.Parameters); } var isCovariant = typeof(Func<object, object>).IsAssignableFrom(listTransformLambda.Type); if (!isCovariant) { listTransformLambda = Expression.Lambda(Expression.Convert(listTransformLambda.Body, typeof(object)), listTransformLambda.Parameters);
import java.util.List; import java.util.stream.Collectors; import org.drools.compiler.compiler.DecisionTableFactory; import org.drools.compiler.compiler.DecisionTableProvider; import org.junit.jupiter.api.Assertions;
if txResult.ErrorMessage != "" { cadenceErrMessage := txResult.ErrorMessage if !utf8.ValidString(cadenceErrMessage) { h.log.Warn(). Str("block_id", blockID.String()). Str("transaction_id", txID.String()). Str("error_mgs", fmt.Sprintf("%q", cadenceErrMessage)). Msg("invalid character in Cadence error message") // convert non UTF-8 string to a UTF-8 string for safe GRPC marshaling cadenceErrMessage = strings.ToValidUTF8(txResult.ErrorMessage, "?") }
m_is_initialized = true; // FIXME_OPENMPTARGET:  Only fix the number of teams for NVIDIA architectures. #if defined(KOKKOS_ARCH_PASCAL60) || defined(KOKKOS_ARCH_PASCAL61) || \ defined(KOKKOS_ARCH_VOLTA) || defined(KOKKOS_ARCH_VOLTA70) ||     \ defined(KOKKOS_ARCH_VOLTA72) || defined(KOKKOS_ARCH_TURING75) ||  \ defined(KOKKOS_ARCH_AMPERE80) || defined(KOKKOS_ARCH_AMPERE86) #if defined(KOKKOS_COMPILER_CLANG) && (KOKKOS_COMPILER_CLANG >= 1300) omp_set_num_teams(512); #endif
'success', ]; export const IMPORT_WALLET_STEPS: EnumMap<string, ImportWalletStep> = { WALLET_IMPORT_FILE: 'walletImportFile', WALLET_SELECT_IMPORT: 'walletSelectImport', }; export const WALLET_KINDS: EnumMap<string, WalletKind> = isIncentivizedTestnet ? {
// Server runner func runServer(conn *nats.Conn, transportFactory frugal.FTransportFactory, protocolFactory *frugal.FProtocolFactory, port string) error { handler := &FooHandler{} processor := event.NewFFooProcessor(handler) http.HandleFunc("/frugal", frugal.NewFrugalHandlerFunc(processor, protocolFactory, protocolFactory)) go func() { fmt.Printf("Starting the http server... on :%s/frugal\n", port) http.ListenAndServe(fmt.Sprintf(":%s", port), http.DefaultServeMux) }() server := frugal.NewFNatsServerFactory(conn, "foo", 5*time.Second, 2,
assert_eq(s1, s2, atol=0.01) assert_eq(p1_proba, p2_proba, atol=0.8) else: assert_eq(s1, s2) assert_eq(p1, p2) assert_eq(p1, y) assert_eq(p2, y) assert_eq(p1_proba, p2_proba, atol=0.03) assert_eq(p1_local, p2) assert_eq(p1_local, y) # pref_leaf values should have the right shape # and values that look like valid tree nodes
class TestTransTable(object): @pytest.fixture() def tt(self): Ridx = np.array([0, 0, 2, 2, 1, 1, 3, 3, 1, 2]) Sidx = np.array([0, 1, 1, 0]) return TransTable(10, 4, 2, Ridx, Sidx) def test_a2r(self, tt): for aix, rix in zip(
public function get_redirect_url() { if ( ! isset( $_GET['course_id'] ) || ! isset( $_GET['lesson_id'] ) ) { // Try deprecated functionality as a fallback. // phpcs:ignore WordPress.Security.NonceVerification -- No modifications are made here. if ( isset( $_POST['data'] ) ) { _doing_it_wrong( 'get_redirect_url', 'The get_redirect_url AJAX call should be a GET request with parameters "course_id" and "lesson_id".', '1.12.2' ); $this->deprecated_get_redirect_url(); } wp_die(); }
@Override public SMTLibTerm transform(UninterpretedToken uninterpretedToken) { if (uninterpretedToken.sort() == Sort.KVARIABLE) { if (smtlibForallOrExistsBinders.contains(uninterpretedToken)) { return new SMTLibTerm(uninterpretedToken.javaBackendValue()); } else { throw new SMTTranslationFailure("unbounded K variable: " + uninterpretedToken);
} } func Test_configFromURL(t *testing.T) { type args struct { urlStr     string dialerName string } tests := []struct { name    string
line = inf.readline() while not len(line.split()) == 5: line = inf.readline() if line == '': raise EOFError("End of file reached when reading HISTORY.") while line and not line.startswith('timestep'): name = line[:8].strip()
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4460-SEA 1645523378 1850283307</p> <hr> <p>Varnish cache server</p> </body>
nodeNameToXPaths.clear(); addQueryToNode(originalXPath, AST_ROOT); if (LOG.isLoggable(Level.FINE)) { LOG.log(Level.FINE, "Unable to use RuleChain for XPath: " + xpath); } }
require.NoError(t, err) assert.Equal(t, "cacert", string(contents))  os.Remove(fileName) }
vString *name = vStringNew (); /* Found Autocommand Group (augroup) */ const unsigned char *cp = line; if (isspace ((int) *cp)) { while (*cp && isspace ((int) *cp))
'--recv-keys E084DAB9' # Add marutter's c2d4u repository. if r_version_less_than('3.5.0') sh.cmd 'sudo add-apt-repository -y "ppa:marutter/rrutter"' sh.cmd 'sudo add-apt-repository -y "ppa:marutter/c2d4u"' else
name:           "all bundles server fails", count:          2, expectedStderr: "Error: rpc error: code = Internal desc = some error\n", serverErr:      status.Error(codes.Internal, "some error"), }, { name:           "one bundle",
func (r *peerRegistry) isConnected(peerID libp2ppeer.ID, remoteAddr ma.Multiaddr) (swarm.Address, bool) { r.mu.RLock() defer r.mu.RUnlock()  overlay, found := r.overlays[peerID]  if found && remoteAddr != nil { // check connection remote address if conns, ok := r.connections[peerID]; ok {
c.RLock() defer c.RUnlock() result := report.MakeNodeMetadataWith(map[string]string{ ContainerID:      c.ID(), ContainerName:    strings.TrimPrefix(c.container.Name, "/"),
tp.RegisterSpanProcessor(sp) wantCount := 1 err := sp.Shutdown(context.Background()) if err != nil { t.Error("Error shutting the testSpanProcessor down\n") } gotCount := sp.shutdownCount if wantCount != gotCount {
import java.util.Collection; import java.util.Collections; import java.util.List; import java.util.Map; import com.google.common.base.Predicate; import com.google.common.collect.ImmutableList; import com.google.common.collect.Iterables; import com.google.common.collect.Lists; import com.google.inject.Inject; import com.google.inject.Singleton;
files.saveToKompiled("parsed.txt", parsedDef.toString()); checkDefinition(parsedDef, excludedModuleTags); sw.printIntermediate("Validate definition"); Definition kompiledDefinition = pipeline.apply(parsedDef);
const commonJSDirectory = path.resolve(__dirname, '../../dist/commonjs'); const modulesDirectory = path.resolve(__dirname, '../../dist/modules'); const banner = (`/* proxy-compat-disable */`); const footer = `/** version: ${version} */`; function rollupConfig(config) {
@Override public int getTypeParameterCount() { if (typeParameterCount == -1) { try { typeParameterCount = getTypeParameters(clazz).length; } catch (LinkageError | TypeNotPresentException ignored) { typeParameterCount = 0; // don't stay stuck on -1 } } return typeParameterCount; }
# [ v[list_map[i]] for i in range( nmodes) ] )) warnings.warn( "The structure of the `results` list will change in " "MDAnalysis version 2.0.", category=DeprecationWarning )
return ret def for_all_pckg(packages, fun, add_additional_packages=True): """Iterates over all packages, executes a function. Returns all function results as a list""" ret = [] for pckg in all_packages: if pckg.key in packages:
schema_seq = int(tar.extractfile(member).read().strip()) if schema_seq != LISTENS_DUMP_SCHEMA_VERSION: raise SchemaMismatchException('Incorrect schema version! Expected: %d, got: %d.' 'Please ensure that the data dump version matches the code version' 'in order to import the data.' % (LISTENS_DUMP_SCHEMA_VERSION, schema_seq)) elif file_name.endswith('.listens'):
// Carry over the type from the declaration Class<?> nodeType = ((TypeNode) node.getNameDeclaration().getNode()).getType(); // FIXME : generic classes and class with generic super types could have the wrong type assigned here if (nodeType != null) { node.setType(nodeType); return super.visit(node, data); }
// RetryInterval tags some interval for retry logic RetryInterval = "retry_interval" // RevisionNumber tags a registration entry revision number RevisionNumber = "revision_number" // Schema tags database schema version
class TestFont: TESTS = { # (style, weight, pointsize, pixelsize, family '"Foobar Neue"':
if not config.base_configuration_reference config.base_configuration_reference = xcconfig else UI.notice "Using existing base configuration " \ "`#{config.base_configuration_reference.name}`" end end end
import java.util.concurrent.atomic.AtomicInteger; import java.util.stream.Stream; public abstract class NodeDataRequest { private final RequestType requestType; private final Hash hash; private BytesValue data;
plot_opts = Keywords(['plot_opt1', 'plot_opt2']+custom_plot, name) opt_groups = {'plot': Options(allowed_keywords=plot_opts), 'style': Options(allowed_keywords=style_opts), 'output': Options(allowed_keywords=['backend'])} Store._options[backend][name] = opt_groups
return ret def from_networkx(self, nx_graph): """Convert from networkx graph. If 'id' edge attribute exists, the edge will be added follows
) def _wrap_partitions(self, partitions): if not isinstance(partitions, self.instance_type): return [ self.partition_type( partitions[i],
import MDAnalysis as mda class GROReadBench(object): def time_read_GRO_coordinates(self): """Benchmark reading of standard testsuite GRO file.""" GROReader(GRO) def time_parse_GRO_file(self): """Time to create topology from GRO file""" p = GROParser(GRO) top = p.parse() def time_create_GRO_universe(self): """Time to create MDA Universe of GRO"""
for (int i = 0; i < train_data_->num_features(); ++i) { total_histogram_size += sizeof(HistogramBinEntry) * train_data_->FeatureAt(i)->num_bin(); } max_cache_size = static_cast<int>(histogram_pool_size_ * 1024 * 1024 / total_histogram_size); } // at least need 2 leaves max_cache_size = Common::Max(2, max_cache_size);
print('Done saving data into cached files.') def _get_hash(self): """Compute the hash of the input tuple  Example ------- >>> hash_value = self._get_hash((10, False, True)) >>> hash_value 6299899980521991026 """ return abs(hash(self._hash_key)) @property
{ Initialize(); // only start server if we want to listen if (!s_DontListen) {
---------- angle : float Rotation angle in degrees. axis : array_like Rotation axis vector. point : array_like (optional) Center of rotation. If ``None`` then the center of geometry of this group is used. Returns -------
/* * Check that setting FASTDDS_ENVIRONMENT_FILE to an unexisting file issues 1 logWarning */ TEST(PubSubBasic, EnvFileWarningWrongFile) { env_file_warning("unexisting_file", 1); }
Task Navigate<TViewModel>(IMvxBundle presentationBundle = null) where TViewModel : IMvxViewModel; Task Navigate<TViewModel, TParameter>(TParameter param, IMvxBundle presentationBundle = null) where TViewModel : IMvxViewModel<TParameter>; Task<TResult> Navigate<TViewModel, TResult>(IMvxBundle presentationBundle = null, CancellationToken cancellationToken = default(CancellationToken)) where TViewModel : IMvxViewModelResult<TResult>; Task<TResult> Navigate<TViewModel, TParameter, TResult>(TParameter param, IMvxBundle presentationBundle = null, CancellationToken cancellationToken = default(CancellationToken)) where TViewModel : IMvxViewModel<TParameter, TResult>; Task Navigate(IMvxViewModel viewModel, IMvxBundle presentationBundle = null); Task Navigate<TParameter>(IMvxViewModel<TParameter> viewModel, TParameter param, IMvxBundle presentationBundle = null); Task<TResult> Navigate<TResult>(IMvxViewModelResult<TResult> viewModel, IMvxBundle presentationBundle = null, CancellationToken cancellationToken = default(CancellationToken)); Task<TResult> Navigate<TParameter, TResult>(IMvxViewModel<TParameter, TResult> viewModel, TParameter param, IMvxBundle presentationBundle = null, CancellationToken cancellationToken = default(CancellationToken)); /// <summary> /// Translates the provided Uri to a ViewModel request and dispatches it.
end def file_options custom_options_file ? [custom_options] : [global_options, project_options, local_options] end def env_options
Tags:   tagg, }) var ns storage.Storer if o.GlobalPinningEnabled { // create recovery callback for content repair recoverFunc := recovery.NewRecoveryHook(psss)  ns = netstore.New(storer, recoverFunc, retrieve, logger, chunkvalidators) } else { ns = netstore.New(storer, nil, retrieve, logger, chunkvalidators)
# we can set the track's synced git SHA to the HEAD SHA track.update!(synced_to_git_sha: head_git_track.commit.oid) rescue StandardError => e Github::Issue::OpenForSyncFailure.(track, e, head_git_track.commit.oid) end private
} void FreeOrionNode::send_chat_message(godot::String text) { std::string text8 = text.utf8().get_data(); m_app->Networking().SendMessage(PlayerChatMessage(text8, {}, false)); }
} key = pkidh.pkcs11_provider->load_private_key(certificate, file, password, exception); } else {
} } }  // namespace knapsack }  // namespace greedy_algorithms  using greedy_algorithms::knapsack::Item; using greedy_algorithms::knapsack::quickSort;  int main() { std::cout << "\nEnter the capacity of the knapsack : "; float capacity;
assert not host_blocker._is_blocked(url) def blocklist_to_url(path): """Get an example.com-URL with the given filename as path.""" assert not path.is_absolute(), path url = QUrl("http://example.com/") url.setPath("/" + str(path)) assert url.isValid(), url.errorString() return url
#include <stdlib.h> #include <kdberrors.h> #include <kdbextension.h> #include <inih.h> #include "ini.h" #include "contract.h"
{ char path[MAXPATHLEN]; int ret, fd; char *rootfs_path = rootfs->path ? rootfs->mount : ""; if (console->path && !strcmp(console->path, "none")) return 0; ret = snprintf(path, sizeof(path), "%s/dev/console", rootfs_path); if (ret < 0 || (size_t)ret >= sizeof(path)) return -1;
*       to 1.4.196 because 1.4.197 broke audio metadata being *       inserted/updated * - 23: Store aspect ratios as strings again */ private final int latestVersion = 23; // Database column sizes private final int SIZE_CODECV = 32;
case KeyEvent.KEYCODE_DPAD_LEFT: //Go Back onRewind(); showSkipAnimation(false); break; case KeyEvent.KEYCODE_DPAD_RIGHT: //Go Forward onFastForward(); showSkipAnimation(true); break; case KeyEvent.KEYCODE_M: //Mute/Unmute
RouteRefreshInterval               time.Duration `config:"seconds;90"` IptablesRefreshInterval            time.Duration `config:"seconds;90"` IptablesPostWriteCheckIntervalSecs time.Duration `config:"seconds;1"` IptablesLockFilePath               string        `config:"file;/run/xtables.lock"` IptablesLockTimeoutSecs            time.Duration `config:"seconds;0"` IptablesLockProbeIntervalMillis    time.Duration `config:"millis;50"`
end def target_column_of_keyword(*key_names) define_singleton_method(:_grouping_condition) { "#{key_names.map(&:to_s).join("_or_")}_cont_all".to_sym } end private
/* Copyright (C) 2000-2012 by George Williams */ /* Copyright (C) 2012-2013 by Khaled Hosny */ /* Copyright (C) 2013 by Matthew Skala */ /* * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions are met:
/* !!! Bug. Lose device tables here */ if ( isv ) space->u.pair.vr[0].v_adv_off = kp->off; else space->u.pair.vr[0].h_adv_off = kp->off; return( space ); }
} } func (r *Reconciler) makeIngressHPAArgs(bc *intv1alpha1.BrokerCell) resources.AutoscalingArgs { return resources.AutoscalingArgs{ ComponentName:     resources.IngressName, BrokerCell:        bc,
struct st_h2o_http3_server_conn_t *conn = get_conn(stream); if (stream->tunnel->datagram_flow_id != UINT64_MAX) { khiter_t iter = kh_get(stream, conn->datagram_flows, stream->tunnel->datagram_flow_id); /* it's possible the tunnel wasn't established yet */ if (iter != kh_end(conn->datagram_flows)) kh_del(stream, conn->datagram_flows, iter); } }
* are part of a newgrf vehicle set which changes bounding boxes within a * single vehicle direction. * * TODO: this will consider too many false positives, use the bounding box * information or something which better narrows down the candidates. */ v->sprite_cache.is_viewport_candidate = true; } v = v->hash_viewport_next;
public static readonly string MonthEnd = $@"{MonthRegex}(\s+de\s*)?$"; public static readonly string WeekDayEnd = $@"(deze\s+)?{WeekDayRegex}\s*,?\s*$"; public const string WeekDayStart = @"^[\.]"; public const string RangeUnitRegex = @"\b(?<unit>ja(ren|ar)|maand(en)?|we(ken|ek)|dag(en)?)\b"; public const string HourNumRegex = @"\b(?<hournum>nul|een|één|twee|drie|vier|vijf|zes|zeven|acht|negen|tien|elf|elven|twaalf|dertien|veertien|vijftien|zestien|zeventien|achttien|negentien|twintig|eenentwintig|éénentwintig|tweeentwintig|tweeëntwintig|drieëntwintig|vierentwintig)\b"; public const string MinuteNumRegex = @"(?<minnum>nul|een|één|twee|drie|vier|vijf|zes|zeven|acht|negen|tien|elf|elven|twaalf|dertien|veertien|vijftien|zestien|zeventien|achttien|negentien|twintig|eenentwintig|éénentwintig|tweeentwintig|tweeëntwintig|drieëntwintig|vierentwintig|vij[fv]entwintig|ze(s|ven)entwintig|achtentwintig|negenentwintig|dertig|eenendertig|tweeëndertig|drieëndertig|vierendertig|vijfendertig|ze(s|ven)endertig|achtendertig|negenendertig|veertig|eenenveertig|tweeënveertig|drieënveertig|vierenveertig|vijfenveertig|ze(s|ven)enveertig|achtenveertig|negenenveertig|eenenvijftig|vijftig|tweeënvijftig|drieënvijftig|vierenvijftig|vijfenvijftig|ze(s|ven)envijftig|achtenvijftig|negenenvijftig)"; public const string DeltaMinuteNumRegex = @"(?<deltaminnum>nul|een|één|twee|drie|vier|vijf|zes|zeven|acht|negen|tien|elf|elven|twaalf|dertien|veertien|vijftien|zestien|zeventien|achttien|negentien|twintig|eenentwintig|éénentwintig|tweeentwintig|tweeëntwintig|drieëntwintig|vierentwintig|vijfentwintig|vijventwintig|zesentwintig|zevenentwintig|achtentwintig|negenentwintig|dertig|eenendertig|tweeëndertig|drieëndertig|vierendertig|vijfendertig|zesendertig|zevenendertig|achtendertig|negenendertig|veertig|eenenveertig|tweeënveertig|drieënveertig|vierenveertig|vijfenveertig|zesenveertig|zevenenveertig|achtenveertig|negenenveertig|eenenvijftig|vijftig|tweeënvijftig|drieënvijftig|vierenvijftig|vijfenvijftig|zesenvijftig|zevenenvijftig|achtenvijftig|negenenvijftig)(?=\b)";
"method_%s_%s" % (type_name, attr_name), kwargs) if method_handler is None: # in this case we don't need the real directives on the call to get_slot_table if (attr_name in TypeSlots.special_method_names or attr_name in ['__new__', '__class__']): method_handler = self._find_handler( "slot%s" % attr_name, kwargs)
String topic = commandLine.getOptionValue("t").trim(); String timeStampStr = commandLine.getOptionValue("s").trim(); //when the param "timestamp" is set to now,it should return the max offset of this queue long timestamp = timeStampStr.equals("now") ? TIMESTAMP_BY_NOW : 0; try { if (timestamp == 0) {
public async Task<List<Tuple<string, string>>> GetGroupMembers(string groupId, DateTimeOffset groupMembershipTime, CancellationToken cancellationToken) { ResourceWrapper groupResource; using (IScoped<IFhirDataStore> dataStore = _fhirDataStoreFactory.Invoke()) { groupResource = await dataStore.Value.GetAsync(new ResourceKey(KnownResourceTypes.Group, groupId), cancellationToken); }
// NewSubscription spins up a goroutine to gather acks into batches and // periodically send them to the server. // It is for use by provider implementations. func NewSubscription(ctx context.Context, d driver.Subscription, opts *SubscriptionOptions) *Subscription { handler := func(item interface{}) { ms := item.([]*Message) var ids []driver.AckID
// Licensed under the MIT License (MIT). See LICENSE in the repo root for license information. // ------------------------------------------------------------------------------------------------- using EnsureThat; using Microsoft.Health.Fhir.Core.Features.Search; using Microsoft.Health.Fhir.Core.Models; using Microsoft.Health.Fhir.SqlServer.Features.Search.Expressions.Visitors; using Microsoft.Health.Fhir.SqlServer.Features.Storage; namespace Microsoft.Health.Fhir.SqlServer.Features.Search {
return instanceNamePath; } private String getRootUserName(SiteConfiguration siteConfig, Opts opts) { final String keytab = siteConfig.get(Property.GENERAL_KERBEROS_KEYTAB); if (keytab.equals(Property.GENERAL_KERBEROS_KEYTAB.getDefaultValue()) || !siteConfig.getBoolean(Property.INSTANCE_RPC_SASL_ENABLED)) { return DEFAULT_ROOT_USER; } System.out.println("Running against secured HDFS"); if (opts.rootUser != null) {
state := &ConnectionMaker{ router:            router, queryChan:         queryChan, targets: 		   make(map[string]*Target)} go state.queryLoop(queryChan) return state }
OS_ASSERT(usePriceEscalationFile); for (IdfObject object : usePriceEscalationFile->objects()){ std::string name = object.nameString(); if ((name.find(*region) == 0) && (name.find(*sector) != string::npos)){ m_idfObjects.push_back(object);
if (!is_a($resolvedClass, ResizableThumbnailInterface::class, true)) { @trigger_error(sprintf( 'Not implementing %s on a format thumbnail that uses resizers is deprecated since sonata-project/media-bundle 3.x' .' and will not work on 4.0. Please implement the interface on %s', ResizableThumbnailInterface::class, $resolvedClass ), \E_USER_DEPRECATED);
return 0, false case codes.Unknown: // Retry GOAWAY, see https://github.com/googleapis/google-cloud-go/issues/4257. isGoaway := strings.Contains(s.Message(), "error reading from server: EOF") && strings.Contains(s.Message(), "received prior goaway") if isGoaway { return r.bo.Pause(), true
const uint32_t skill = hero.GetLevelSkill( Skill::Secondary::PATHFINDING ); double maxPriority = -1.0 * Maps::Ground::slowestMovePenalty * world.w() * world.h(); int objectID = MP2::OBJ_ZERO; size_t selectedNode = mapObjects.size(); for ( size_t idx = 0; idx < mapObjects.size(); ++idx ) { const MapObjectNode & node = mapObjects[idx]; if ( HeroesValidObject( hero, node.first ) ) {
// THE POSSIBILITY OF SUCH DAMAGE. // #if !NETSTANDARD1_0 && !SILVERLIGHT && !__IOS__ && !__ANDROID__  namespace NLog.LayoutRenderers { using System; using System.Net; using System.Net.NetworkInformation;
TestFile:     e.TestFile, LineNum:      e.LineNum, Query:        e.Query, Duration: 	  fmt.Sprintf("%dms", e.Duration.Milliseconds()), Result:       result, ErrorMessage: e.ErrorMessage, }
// Blob names are escaped using url.PathEscape before writing them // to disk, and unescaped using url.PathUnescape during List. // Exception: "/" is not escaped, so that it can be used as the real file // separator on the filesystem. // Filenames on disk that return an error for url.PathUnescape are not visible // using fileblob. //
collect := func(projected, att *design.AttributeExpr) []*ProjectedTypeData { return collectProjectedTypesR(projected, att, seen, scope, viewspkg) } switch pt := projected.Type.(type) { case design.UserType: // If the attribute type has already been projected (i.e., projected type
}, { test: /\.md$/, use: [ { loader: 'babel-loader',
// @todo Refactor the above condition statement. $size = 'full'; if ( ! wp_attachment_is_image( $item_id ) ) { // No default sizes for non-images. // When a size is defined this will be overwritten. $size = null;
proj_destroy(P); } proj_destroy(epsg27700); proj_destroy(epsg4326); proj_destroy(epsg3857); proj_context_destroy(ctx); }
for iter in range(args.iters): for pipe in pipes: labels, \ image_ssd_crop, image_decode_crop, \ image_slice_cpu, image_slice_gpu, \ boxes_ssd_crop, boxes_random_crop, \
{ _contextAccessor.FhirRequestContext.BundleIssues.Add( new OperationOutcomeIssue( OperationOutcomeConstants.IssueSeverity.Warning, OperationOutcomeConstants.IssueType.NotSupported, string.Format(Core.Resources.InvalidTypeParameter, badTypes.Select(type => $"'{type}'").JoinByOrSeparator()))); if (badTypes.Count != types.Count) { searchParams.Add(KnownQueryParameterNames.Type, types.Except(badTypes).JoinByOrSeparator()); foreach (var badType in badTypes) { unsupportedSearchParameters.Add(new Tuple<string, string>(KnownQueryParameterNames.Type, badType));
int ret; if (is_encrypt) { /* encrypt given data, with the QUIC tag appended if necessary */ uint8_t srcbuf[src.len + sizeof(self->quic_tag)]; if (self->is_quic) { memcpy(srcbuf, src.base, src.len);
{ CheckIfExportIsEnabled(); if (!string.IsNullOrWhiteSpace(anonymizationConfigLocation) || !string.IsNullOrWhiteSpace(anonymizationConfigFileETag)) { CheckIfAnonymizedExportIsEnabled(); }
}). Module("sdk client connection options", func(builder cmd.NodeBuilder, node *cmd.NodeConfig) error { if len(accessNodeIDS) < common.DefaultAccessNodeIDSMinimum { return fmt.Errorf("invalid flag --access-node-ids atleast %d IDs must be provided", common.DefaultAccessNodeIDSMinimum) } flowClientOpts, err = common.PrepareFlowClientOpts(accessNodeIDS, insecureAccessAPI, node.State.Sealed())
// setup cursor const CursorRestorer cursorRestorer( true, Cursor::POINTER ); const u32 min = std::min( 1U, redistributeMax ); const int spacer = 10; const int defaultYPosition = 160;
return node def visit_FuncDefNode(self, node): if not node.doc or (isinstance(node, DefNode) and node.fused_py_func): return node if not self.cdef_docstrings: if isinstance(node, CFuncDefNode) and not node.py_func:
$friendlyusage = get_friendly_size((int)$totalusage); if($mybb->usergroup['attachquota']) { $percent = round(($totalusage/($mybb->usergroup['attachquota']*1024))*100); $percent = $lang->sprintf($lang->attachments_usage_percent, $percent); $attachquota = get_friendly_size($mybb->usergroup['attachquota']*1024); $usagenote = $lang->sprintf($lang->attachments_usage_quota, $friendlyusage, $attachquota, $percent, $totalattachments); }
Kingdom::Kingdom() : color( Color::NONE ) , _lastBattleWinHeroID( 0 ) , lost_town_days( 0 ) , visited_tents_colors( 0 ) { heroes_cond_loss.reserve( 4 ); }
if self.rule_book is None or force_rebuild: self.build_rule_book() violations = itertools.chain() for binding in policy.get('bindings', []): violations = itertools.chain( violations,
sct_list.data = s2n_stuffer_raw_read(extension, sct_list.size); notnull_check(sct_list.data); GUARD(s2n_dup(&sct_list, &conn->ct_response)); return 0; }
@Override public ConnectionType setNetworkConnection( ConnectionType type) { Map<String, ConnectionType> mode = ImmutableMap.of("type", type); return new ConnectionType(((Number) executeMethod.execute(DriverCommand.SET_NETWORK_CONNECTION, ImmutableMap .of("parameters", mode)))
input.typeahead({ emptyTemplate: function(query) { return $('<div>').text("No results found for ").append( $('<code>').text(query) ); }, maxItem: 1e3,
) func (c *Controller) Sync(ctx context.Context, crt *v1alpha1.Certificate) (err error) { c.metrics.IncrementSyncCallCount(ControllerName) log := logf.FromContext(ctx) dbg := log.V(logf.DebugLevel)
var match = Regex.Match(dateString, @"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}"); if (match.Success) release.PublishDate = DateTime.ParseExact(match.Value, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture); var sizeStr = row.QuerySelector(".bSize").Text Content.Trim(); release.Size = ReleaseInfo.GetBytes(sizeStr); release.Seeders = ParseUtil.CoerceInt(row.QuerySelector(".bUping").TextContent.Trim()); release.Peers = release.Seeders + ParseUtil.CoerceInt(row.QuerySelector(".bDowning").TextContent.Trim());
dml_map[typeref] = (dml_cte, dml_rvar) dml_entries = list(dml_map.values())  else_cte = None if ( isinstance(ir_stmt, irast.InsertStmt) and ir_stmt.on_conflict and ir_stmt.on_conflict[1] is not None
private String diskUtil() { double physicRatio = 100; String storePath = this.brokerController.getMessageStoreConfig().getStorePathCommitLog(); String[] paths = storePath.trim().split(MessageStoreConfig.MULTI_PATH_SPLITTER); for (String storePathPhysic : paths) { physicRatio = Math.min(physicRatio, UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic)); } String storePathLogis =
#include "AirflowNetworkDistributionLinkage.hpp" #include "AirflowNetworkDistributionLinkage_Impl.hpp" #include "AirflowNetworkDistributionNode.hpp" #include "AirflowNetworkDistributionNode_Impl.hpp" // TODO: Check the following class names against object getters and setters. #include "AirflowNetworkNode.hpp" #include "AirflowNetworkNode_Impl.hpp" #include "AirflowNetworkComponent.hpp" #include "AirflowNetworkComponent_Impl.hpp" #include "AirflowNetworkFan.hpp" #include "AirflowNetworkFan_Impl.hpp" #include "ThermalZone.hpp" #include "ThermalZone_Impl.hpp"
self.output.nameValue($('Use status'), circuitAuth.authorizationUseStatus); self.output.nameValue($('Authorization Key'), circuitAuth.authorizationKey); self.output.nameValue($('Provisioning state'), circuitAuth.provisioningState); } }); }
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver; import org.junit.Test; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import static org.junit.Assert.assertEquals;
) # normalize  to get smoothed representation if edge_weight is None: degs = graph.in_degrees().float().clamp(min=1) norm = th.pow(degs, -0.5) norm = norm.to(feat.device).unsqueeze(1) else: norm = EdgeWeightNorm('both')(graph, edge_weight) feat = feat * norm graph.ndata["h"] = feat
if (tablet.needsSplit()) { tablet.getTabletServer().executeSplit(tablet); } } catch (Exception e) { log.error("Unknown error during minor compaction for extent: {}", tablet.getExtent(), e); throw e; } finally { tablet.minorCompactionComplete(); }
// `{http.request.tls.client.fingerprint}` | The SHA256 checksum of the client certificate // `{http.request.tls.client.public_key}` | The public key of the client certificate. // `{http.request.tls.client.public_key_sha256}` | The SHA256 checksum of the client's public key. // `{http.request.tls.client.certificate_pem}` | The PEM-encoded value of the certificate. // `{http.request.tls.client.issuer}` | The issuer DN of the client certificate // `{http.request.tls.client.serial}` | The serial number of the client certificate // `{http.request.tls.client.subject}` | The subject DN of the client certificate
required(102, "partition", partitionType), required(103, "record_count", LongType.get()), required(104, "file_size_in_bytes", LongType.get()), // Note that although this field is optional, we need to always write it for older readers optional(105, "block_size_in_bytes", LongType.get()), optional(106, "file_ordinal", IntegerType.get()), optional(107, "sort_columns", ListType.ofRequired(112, IntegerType.get())),
"ibft_getPendingVotes", emptyList(), web3jService, ProposalsResponse.class); } public Request<?, SignersBlockResponse> validatorsAtBlock(final String blockNumber) { return new Request<>( "ibft_getValidatorsByBlockNumber", singletonList(blockNumber),
import com.hazelcast.jet.pipeline.BatchSource; import com.hazelcast.jet.pipeline.SourceBuilder; import com.hazelcast.jet.pipeline.SourceBuilder.SourceBuffer; import com.hazelcast.nio.IOUtil; import javax.annotation.Nonnull; import javax.annotation.Nullable;
// StartImplicitTeamMigration tells mdserver to put a implicit team // migration lock on id, which prevents any rekey MD writes from going // in. Normal classic MD updates can still happen after implicit team // migration has started, until a iTeam-style MD is written. StartImplicitTeamMigration(ctx context.Context, id tlf.ID) (err error) // PruneBranch prunes all unmerged history for the given TLF branch.
@Deprecated public Date getSessionCredentitalsExpiration() { return getSessionCredentialsExpiration(); } public String getIdentityPoolId() {
params = dict(get_param_values(element), kdims=[x, y], datatype=['xarray'], bounds=bounds) if self.vdim_prefix: kdim_list = '_'.join(str(kd) for kd in params['kdims']) vdim_prefix = self.vdim_prefix.format(kdims=kdim_list) else:
if action_data is not None: groupdata.append(action_data) groups.append('\n'.join(groupdata)) options = '\n'.join(groups) # epilog if parser.epilog is not None:
if consistencyCheck() { return } }
public static TextEncoder CreateUtf8Encoder(byte[][] symbols) { return new Utf8TextEncoder(symbols); } public static TextEncoder CreateUtf16Encoder(byte[][] symbols) { return new Utf16TextEncoderLE(symbols); } #endregion Static factory methods
self.bulk_size = self.settings.get("bulk-size", self.bulk_size) self.browser_open = self.settings.get("browser-open", self.browser_open) token = self.settings.get("token", "") proxy_settings = self.engine.config.get("settings").get("proxy") if proxy_settings: if proxy_settings.get("address"): proxy_url = urlsplit(proxy_settings.get("address"))
import software.amazon.awssdk.annotations.SdkPublicApi; import software.amazon.awssdk.utils.ToString; import software.amazon.awssdk.utils.Validate; import software.amazon.awssdk.utils.builder.CopyableBuilder; import software.amazon.awssdk.utils.builder.ToCopyableBuilder; /** * Represents a completed download directory transfer to Amazon S3. It can be used to track
def __init__(self, config): self.config = config self.fort_timeouts = dict() self.pokemon_list = json.load( open(os.path.join('data', 'pokemon.json'))
TEST_P(PubSubBasic, BestEffortTwoWritersConsecutives) { // Pull mode incompatible with best effort if (use_pull_mode) { return;
*/ public function iAmAuthenticatedWithAndForTheBackend($username, $password) { $this->visit('/'); $this->fillField('Username', $username); $this->fillField('Password', $password); $this->pressButton('Login');
return } log.WithError(err).WithField("procPID", procPID).WithField("reqPID", reqPID).WithFields(wbs.Session.OWI()).Error("cannot mount proc") if _, ok := status.FromError(err); !ok { err = status.Error(codes.Internal, "cannot mount proc") }
"github.com/sirupsen/logrus" ) func LoggerFromFieldLogger(fl logrus.FieldLogger) logrus.StdLogger { errWriter := fl.WithFields(logrus.Fields{}).WriterLevel(logrus.ErrorLevel) return log.New(errWriter, "", 0) }
String s = new String(b, StandardCharsets.UTF_8); if (argument.equals("description/fetch")) { s = prepareUmsSpec(s); } return s; } private String prepareUmsSpec(String umsXml) { String result = umsXml.replace("[uuid]", PMS.get().usn()); //.substring(0, PMS.get().usn().length()-2)); if (PMS.get().getServer().getHost() != null) { result = result.replace("[host]", PMS.get().getServer().getHost());
Types.NestedField.optional(icebergID, name, type); } private static class OrcToIcebergVisitor extends OrcSchemaVisitor<Optional<Types.NestedField>> { private final Map<Integer, OrcField> icebergToOrcMapping;
QMenu *Player::getCardMenu() const { if (aCardMenu != nullptr) { return aCardMenu->menu(); } else { return nullptr; } } QString Player::getName() const
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4483-SEA 1645545925 731129331</p> <hr> <p>Varnish cache server</p> </body>
} return; } clearTimeout(interval); Mozilla.UITour.showHighlight("screenshots"); }, 100); } else {
repos_str = repos.collect {|k,v| "#{k} = \"#{v}\""}.join(", ") options_repos = "options(repos = c(#{repos_str}))" sh.cmd %Q{echo '#{options_repos}' > ~/.Rprofile.site} sh.export 'R_PROFILE', "~/.Rprofile.site", echo: false # Set -Wall -pedantic in the site Makevars to catch more issues, # as CRAN runs with -pedantic
def declare_var(self, name, type, pos, cname = None, visibility = 'private', api = 0, in_pxd = 0, is_cdef = True): if type is unspecified_type: # if the outer scope defines a type for this variable, inherit it outer_entry = self.outer_scope.lookup(name)
// The limit menu depends on other panels that may set a filter query, e.g. search and filter. // In order to correctly calculate the total row count, the limit menu must be compiled last. // We insert a placeholder here and compile the limit menu after all other panels. if ($strSubPanel == 'limit') { // Set placeholder to inject compiled limit menu later
walletsDropdownError: { id: 'staking.redeemItnRewards.step1.walletsDropdownError', defaultMessage: '!!!The selected wallet does not have sufficient ada to cover the necessary transaction fees. Please choose another wallet or add more funds to this one.', description: 'walletsDropdownError for Redeem Incentivized Testnet - Step 1', },
response.headers['X-Frame-Options'] = 'deny' return response def render(self, path, values=None, status=200): """Write HTML response.""" if values is None: values = {}
contained = false; List<Instance> instances = service.allIPs(); for (Instance instance : instances) { if (IpUtil.containsPort(containedInstance)) { if (StringUtils.equals(instance.getIp() + ":" + instance.getPort(), containedInstance)) { contained = true; break;
newSucc := make([]PlanNode, 0, len(newRoot.Successors())) for _, succ := range newRoot.Successors() { if succ != root { newSucc = append(newSucc, succ) } }
// Copy options if flag was set if (cl.hasOption(createTableOptCopyConfig.getOpt())) { if (shellState.getAccumuloClient().tableOperations().exists(tableName)) { final Map<String,String> configuration = shellState.getAccumuloClient().tableOperations() .getConfiguration(cl.getOptionValue(createTableOptCopyConfig.getOpt())); for (Entry<String,String> entry : configuration.entrySet()) { if (Property.isValidTablePropertyKey(entry.getKey())) { shellState.getAccumuloClient().tableOperations().setProperty(tableName, entry.getKey(), entry.getValue());
// Load config parameters $types = $this->getTypes($config); $extras = $this->getExtras($config); $rows_before = ctype_digit($config->AlphaBrowse->rows_before ?? '-') ? (int)$config->AlphaBrowse->rows_before : 0; $highlighting = $config->AlphaBrowse->highlighting ?? false; $limit  = ctype_digit($config->AlphaBrowse->page_size ?? '-') ? (int)$config->AlphaBrowse->page_size : 20; // Process incoming parameters:
func (ms *manifestStore) verifyManifest(ctx context.Context, mnfst *schema1.SignedManifest) error { var errs distribution.ErrManifestVerification if len(mnfst.Name) > reference.NameTotalLengthMax { errs = append(errs, fmt.Errorf("manifest name must not be more than %v characters", reference.NameTotalLengthMax)) }  if len(mnfst.History) != len(mnfst.FSLayers) { errs = append(errs, fmt.Errorf("mismatched history and fslayer cardinality %d != %d", len(mnfst.History), len(mnfst.FSLayers)))
'name': 'id', 'schema': {'type': 'string'}, 'required': 'true', 'description': 'UUID of the objective to be retrieved'}]) @aiohttp_apispec.querystring_schema(BaseGetOneQuerySchema) @aiohttp_apispec.response_schema(ObjectiveSchema(partial=True), description='Returns single objective in ObjectiveSchema format.')
} if s.addPeersHandler != nil { if err := s.addPeersHandler(ctx, peers...); err != nil { return err } } return nil
import ( "k8s.io/apimachinery/pkg/runtime/schema" ) var (
} @Test public void whenBothControllersAreNotPresentMethodShouldReturnPermissioningDisabled() { JsonRpcResponse expectedErrorResponse = new JsonRpcErrorResponse(null, JsonRpcError.PERMISSIONING_NOT_ENABLED);  method = new PermReloadPermissionsFromFile(Optional.empty(), Optional.empty()); JsonRpcResponse response = method.response(reloadRequest()); assertThat(response).isEqualToComparingFieldByField(expectedErrorResponse); } @Test
""" # This copes with mixed strand features & all on reverse: parts = [loc.extract(parent_sequence) for loc in self.parts] f_seq = Seq("").join(parts) return f_seq
public GlucoseStatus round() { this.glucose = Round.roundTo(this.glucose, 0.1); this.noise = Round.roundTo(this.noise, 0.01); this.delta = Round.roundTo(this.delta, 0.01); this.avgdelta = Round.roundTo(this.avgdelta, 0.01); this.short_avgdelta = Round.roundTo(this.short_avgdelta, 0.01);
test.Runs(t, test.ExecRun{ Command: "convox apps create", Exit:    0, Dir:     "../../manifest/fixtures/dir-name-with-dots/foo.bar", Stdout:  "Creating app foo-bar... CREATING\n",
'database_revisions'          => [ 'type'              => 'checkbox', 'label'             => __( 'Revisions', 'rocket' ), // translators: %s is the number of revisions found in the database. It's a formatted number, don't use %d. 'description'       => sprintf( _n( '%s revision in your database.', '%s revisions in your database.', $total['revisions'], 'rocket' ), number_format_i18n( $total['revisions'] ) ), 'section'           => 'post_cleanup_section', 'page'              => 'database', 'default'           => 0,
*/ public abstract class FeedPreferenceSkipDialog extends AlertDialog.Builder { public FeedPreferenceSkipDialog(Context context, int skipIntroInitialValue, int skipEndInitialValue) { super(context); setTitle(R.string.pref_feed_skip); View rootView = View.inflate(context, R.layout.feed_pref_skip_dialog, null); setView(rootView);
return &pluginInfo, nil } func (m *memoryPlugin) SignCsr(csrPEM []byte) ([]byte, error) { m.mtx.RLock() defer m.mtx.RUnlock()
void ScalarActuator::constructOutputs() { constructOutput<double>("actuation", &ScalarActuator::getActuation, SimTK::Stage::Velocity); constructOutput<double>("speed", &ScalarActuator::getSpeed, SimTK::Stage::Velocity); }
} if freshData.PlayerRound+1 == vote.R.Round { if (vote.R.Period > 0) { return fmt.Errorf("filtered future vote from bad period: player.Round=%v; vote.(Round,Period,Step)=(%v,%v,%v)", freshData.PlayerRound, vote.R.Round, vote.R.Period, vote.R.Step) } // pipeline votes from next round period 0 return voteStepFresh("from next round", proto, 0, vote.R.Step) } switch vote.R.Period {
apps []*archer.Application store          storeSvc rgClient       resourcegroups.ResourceGroupsClient } // NewEnvDescriber instantiates an environment describer.
// their own interrupt semantics. if signalCmd, ok := cmd.(SignalCommand); !ok || !signalCmd.InstallsSignalHandlers() { var stop context.CancelFunc ctx, stop = signal.NotifyContext(ctx, os.Interrupt, syscall.SIGTERM) defer stop() }
/** * Resolves the SecurityContext * @author Dan Zheng * @since 5.2 */ public class CurrentSecurityContextArgumentResolver extends HandlerMethodArgumentResolverSupport {
b.Run("BenchmarkActionListGet", func(b *testing.B) { benchmarkActionListGet(100, b, coll) }) clearCollection(b, coll) } func benchmarkSingleActionPut(n int, b *testing.B, coll *docstore.Collection) {
if debug: sys.stderr.write("%s\n" % cmdline_str) status = os.system(cmdline_str, shell=True) >> 8 # `status` here will be >1 for error codes >=256 if status > 1: if kbyte != 0:  # possible memory problem; could be None sys.stderr.write("INFO trying again with the linear model\n")
def __init__(self, atomgroup, reference=None, select='all', groupselections=None, weights=None, weights_groupselections=False, tol_mass=0.1, ref_frame=0, **kwargs): r"""Parameters ---------- atomgroup : AtomGroup or Universe
# initialize, if not done yet if not hasattr(plugin, "_initialized"): LOG.debug("Initializing Lambda executor plugin %s", plugin.__class__) plugin.initialize() plugin._initialized = True
self.nickname = self.config.get('nickname','') self.team = self.config.get('team',0) self.tutorial_run = True self.team_run = True def work(self):
} catch (final NotAuthorizedException nae) { clearCachedTokens(); throw new CognitoNotAuthorizedException("User is not authenticated", nae); } catch (final UserNotFoundException unfe) { clearCachedTokens(); throw new CognitoNotAuthorizedException("User does not exist", unfe); }catch (final Exception e) { throw new CognitoInternalErrorException("Failed to authenticate user", e); } }
def cimported_files(self, filename): if filename[-4:] == '.pyx' and path_exists(filename[:-4] + '.pxd'): pxd_list = [filename[:-4] + '.pxd'] elif filename[-3:] == '.py' and path_exists(filename[:-3] + '.pxd'): pxd_list = [filename[:-3] + '.pxd'] else: pxd_list = []
CREATE TABLE IF NOT EXISTS images ( id VARCHAR(200) PRIMARY KEY, shotid VARCHAR(200) NOT NULL REFERENCES data (id) ON DELETE CASCADE, clipid VARCHAR(200) NOT NULL, image BYTEA NOT NULL, contenttype TEXT NOT NULL ); CREATE TABLE IF NOT EXISTS accounts (
private def diaper_drive_participant_params params.require(:diaper_drive_participant). permit(:name, :phone, :email, :business_name, :address) end end
import { storiesOf } from '@storybook/vue'; const field = { required: true, name: 'toppings',
for (auto& c : *concepts) { auto concept_ = caf::get_if<std::string>(&c); if (!concept_) return make_error(ec::convert_error, "concept in", *name, "is not a string:", c); dest.concepts.push_back(*concept_); } } else { return make_error(ec::convert_error, "concepts in", *name, "is not a list:", cs->second); } } auto desc = c->find("description");
return nil, err } s.ProviderMessageID = providerMsgID.String s.State = MessageStateFromStatus(lastStatus, hasNextRetry) if s.State == -1 { return nil, fmt.Errorf("unknown last_status %s", lastStatus) } result = append(result, s) }
config->mfl_code = S2N_TLS_MAX_FRAG_LEN_EXT_NONE; config->accept_mfl = 0; config->session_state_lifetime_in_nanos = S2N_STATE_LIFETIME_IN_NANOS; config->use_tickets = 0; config->ticket_keys = NULL; config->ticket_key_hashes = NULL; config->valid_key_lifetime_in_nanos = S2N_TICKET_VALID_KEY_LIFETIME_IN_NANOS; config->semi_valid_key_lifetime_in_nanos = S2N_TICKET_SEMI_VALID_KEY_LIFETIME_IN_NANOS;
return src_type.is_float and src_type.rank <= dst_type.rank return False def best_match(arg_types, functions, pos=None, env=None, args=None): """ Given a list args of arguments and a list of functions, choose one to call which seems to be the "best" fit for this list of arguments.
* * @param forUpdateRows the rows to lock */ public void lockRows(Iterable<Row> forUpdateRows) { table.lockRows(session, forUpdateRows); }
methodUsage = ((TypeVariableResolutionCapability) methodDeclaration) .resolveTypeVariables(this, argumentsTypes); } else { throw new UnsupportedOperationException(); } return Optional.of(methodUsage);
if err != nil { return } if diff := cmp.Diff(got, &test.wantOpts); diff != "" { t.Errorf("opener.forParams(...) diff (-want +got):\n%s", diff) } })
/** * @var AdapterInterface * * @deprecated since version 3.x, to be removed in 4.0. Use `$primary` instead. */ protected $master;
The platform that the code is running on. By default this will be the string 'zipline'. This can allow algorithms to know if they are running on the Quantopian platform instead. * : dict[str -> any] Returns all of the fields in a dictionary. Returns -------
// 30505 for changing serialization of Joint to create offset frames // 30506 for testing 30505 conversion code // 30507 for changing serialization of Coordinates owned by Joint // 30508 for moving Connector's connectee_name to enclosing Component. const int XMLDocument::LatestVersion = 30508; //============================================================================= // DESTRUCTOR AND CONSTRUCTOR(S) //=============================================================================
public static final String TYPE_RSS2 = "rss"; public static final String TYPE_ATOM1 = "atom"; public static final String PREFIX_LOCAL_FOLDER = "antennapod_local:"; public static final String TAG = "Feed.java"; /* title as defined by the feed */
if self._content_consumed and isinstance(self._content, bool): raise RuntimeError( 'The content for this response was already consumed') # simulate reading small chunks of the content reused_chunks = iter_slices(self._content, chunk_size) stream_chunks = generate()
func (p *ProtocolSkipchain) Start() error { dbg.Lvl3("Starting Skipchain") block := &SkipBlock{Index: 0, X0: p.TreeNode().PublicAggregateSubTree, Nodes: p.Tree().List()} return p.HandleGenesis(StructGenesis{p.TreeNode(), MessageGenesis{Block: block}}) }
package behavior import ( "fmt" "runtime" )
} FakePeer &FakePeer::setProposalStorage( std::shared_ptr<ProposalStorage> proposal_storage) { proposal_storage_ = std::move(proposal_storage); return *this; }
String image = deploy.getContainerInfo().get().getDocker().get().getImage(); checkBadRequest( validDockerRegistries.contains(URI.create(image).getHost()), String.format( "%s does not point to an allowed docker registry. Must be one of: %s", image, validDockerRegistries ) ); } }
return 'VerificationCode {code}'.format(code=verification_code) def _http_request(url, body=None, method=_POST_METHOD, force_reauthorization=False): """Make a POST request to the specified URL.""" authorization = _get_authorization(force_reauthorization) headers = {
import javax.inject.Inject; import javax.inject.Singleton; /** * The repository class for UploadActivity */ @Singleton public class UploadRepository {
"testing" "github.com/google/go-cmp/cmp" duckpubsubv1alpha1 "github.com/google/knative-gcp/pkg/apis/duck/v1alpha1" "github.com/google/knative-gcp/pkg/apis/messaging/v1alpha1" pubsubv1alpha1 "github.com/google/knative-gcp/pkg/apis/pubsub/v1alpha1" corev1 "k8s.io/api/core/v1"
} // IsZero checks if an AccountData value is the same as its zero value. func (u AccountData) IsZero() bool { if u.Currencies != nil && len(u.Currencies) == 0 { u.Currencies = nil } return reflect.DeepEqual(u, AccountData{}) } // BalanceRecord pairs an account's address with its associated data.
Must be of the format '<keyName>:<dataType>'.` storageSortKeyFlagDescription = `Optional. Sort key for the DDB table. Must be of the format '<keyName>:<dataType>'.` storageNoSortFlagDescription    = "Optional. Skip configuring sort keys." storageAttributeFlagDescription = `Optional. Attributes for a DDB table. Must be of the format '<name>:<dataType>'. Can be specified multiple times.` storageNoLsiFlagDescription     = `Optional. Don't ask about configuring alternate sort keys.`
[Fact] public async Task GivenDestinationTypeOrDestinationConnectionSettings_WhenCreatingAnExportJob_ThenItShouldBeRemovedFromRequestUri() { const string baseUrlFormat = "http://localhost/$export?_count=100{0}&_another=123"; var requestUri = new Uri(string.Format(baseUrlFormat, "&_destinationType=type&_destinationConnectionSettings=settings")); var request = new CreateExportRequest(requestUri, DestinationType, ConnectionString);
except OSError: self.log.debug("JMeter check failed.") return False def install(self): dest = os.path.dirname(os.path.dirname(os.path.expanduser(self.tool_path)))
JavadocInlineTag that = (JavadocInlineTag) o; if (type != that.type) return false; return content.equals(that.content); }
/* Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package org.flowable.cmmn.test.runtime; import static org.assertj.core.api.Assertions.assertThat;
prodEnvFlag           = "prod" deployFlag            = "deploy" resourcesFlag         = "resources" githubURLFlag         = "github-url" repoURLFlag           = "url" githubAccessTokenFlag = "github-access-token" gitBranchFlag         = "git-branch"
queue_url = sqs_client.create_queue(QueueName=queue_name)['QueueUrl'] queue_arn = aws_stack.sqs_queue_arn(queue_name) pattern = { 'Source': [{'exists': True}], 'detail-type': [{'prefix': 'core.app'}], 'Detail': json.dumps({
} return }
mask_lower = x < lower mask_upper = upper < x mask = tf.logical_or(mask_lower, mask_upper) mask = tf.cast(mask, x.dtype) return x * mask
objreg.register('message-bridge', message_bridge, scope='window', window=self.win_id) self.setWindowTitle('qutebrowser') self._vbox = QVBoxLayout(self) self._vbox.setContentsMargins(0, 0, 0, 0)
], /** * The property $foo is not defined on the object, but accessed with the magic setter. * This is an error because `@psalm-seal-properties` is specified on the class block. */ 'magicSetterUndefinedProperty' => [ '<?php /** * @psalm-seal-properties */ class A { public function __get(string $name): ?string {
Identifier string `db:"anonymous_identifier"` } func (d *Datastore) ShouldSendStatistics(frequency time.Duration) (fleet.StatisticsPayload, bool, error) { amountEnrolledHosts, err := d.amountEnrolledHosts() if err != nil {
return err }  // Forwarding the received chunk to its closest peer is not as per swarm book section 2.3.2. // but this is up for discussion  // Select the closest peer to forward the received chunk peer, err := ps.peerSuggester.ClosestPeer(chunk.Address()) if err != nil {
public DateTime? StartDate { get; set; } public DateTime? EndDate { get; set; } [Required] [MaxLength(5)] [Display(Name = "Primary currency used for targets and stats. (e.g. BTC, LTC, USD, etc.)")] public string TargetCurrency { get; set; } = "BTC"; [Display(Name = "Set a Target amount ")]
} render(<Foo />, scratch); expect(componentState).to.deep.equal({ value: 1 }); });
_base_ = ['./maskformer_r50_mstrain_64x1_300e_coco.py'] pretrained = 'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_tiny_patch4_window7_224.pth'  # noqa model = dict( type='MaskFormer',
hot: !isProduction, injectClient: false, compress: isProduction, publicPath: options.publicPath, overlay: isProduction // TODO disable this ? false
* - Disables oEmbed discovery. * - Completely removes the related JavaScript. * * @since 3.0 */ function rocket_disable_embeds_init() { /* @var WP $wp */
secretKind = "Secret" ) //for test stubbing and for ensuring standardization of timezones to UTC var timeNow = func() metav1.Time { return metav1.NewTime(time.Now().UTC()) } // Operator represents a Kubernetes operator that executes InstallPlans by // resolving dependencies in a catalog.
use WP_Rocket\Admin\Options_Data; use WP_Rocket\Busting\Busting_Factory; use WP_Rocket\Busting\Facebook_Pickles; use WP_Rocket\Busting\Facebook_SDK; use WP_Rocket\Subscriber\Facebook_Tracking_Cache_Busting_Subscriber; use WPMedia\PHPUnit\Unit\TestCase;
private static final String SQL_LAST_INSERT_ID = "SELECT LAST_INSERT_ID();"; private static final String SQL_INSERT_ROLE_MEMBER = "INSERT INTO role_member (role_id, principal_id, expiration, active) VALUES (?,?,?,?);"; private static final String SQL_DELETE_ROLE_MEMBER = "DELETE FROM role_member WHERE role_id=? AND principal_id=?;"; private static final String SQL_DELETE_INACTIVE_ROLE_MEMBER = "DELETE FROM role_member WHERE role_id=? AND principal_id=? AND active=false;"; private static final String SQL_UPDATE_ROLE_MEMBER = "UPDATE role_member SET expiration=? WHERE role_id=? AND principal_id=?;"; private static final String SQL_APPROVE_ROLE_MEMBER = "UPDATE role_member SET expiration=?,active=true WHERE role_id=? AND principal_id=?;"; private static final String SQL_INSERT_ROLE_AUDIT_LOG = "INSERT INTO role_audit_log " + "(role_id, admin, member, action, audit_ref) VALUES (?,?,?,?,?);"; private static final String SQL_LIST_ROLE_AUDIT_LOGS = "SELECT * FROM role_audit_log WHERE role_id=?;";
return err case "blob": _, blobType, _, length, err := repo.Index().Lookup(id) if err != nil { return err } if blobType != pack.Data { return errors.New("wrong type for blob") }
}: Props) { const [step1, setStep1] = useState(false); const [step2, setStep2] = useState(false); const canRegister = step1 && step2; const castEndDate = formattedDateTime(VOTING_REGISTRATION_END_DATE, { currentLocale, ...mapToLongDateTimeFormat({
flags.StringVar(&accessAddress, "access-address", "", "the address of an access node") flags.StringVar(&secureAccessNodeID, "secure-access-node-id", "", "the node ID of the secure access GRPC server") flags.BoolVar(&insecureAccessAPI, "insecure-access-api", true, "required if insecure GRPC connection should be used") flags.DurationVar(&dkgControllerConfig.BaseStartDelay, "dkg-controller-base-start-delay", dkgmodule.DefaultBaseStartDelay, "used to define the range for jitter prior to DKG start (eg. 500µs) - the base value is scaled quadratically with the # of DKG participants") flags.DurationVar(&dkgControllerConfig.BaseHandleBroadcastDelay, "dkg-controller-base-handle-broadcast-delay", dkgmodule.DefaultBaseHandleBroadcastDelay, "used to define the range for jitter prior to DKG handling broadcast messages (eg. 500µs) - the base value is scaled quadratically with the # of DKG participants") }). Initialize(). Module("consensus node metrics", func(builder cmd.NodeBuilder, node *cmd.NodeConfig) error {
.format(type(train_set).__name__)) train_set.construct() # copy the parameters from train_set params.update(train_set.get_params()) params_str = param_dict_to_str(params) # set network if necessary for alias in _ConfigAliases.get("machines"):
""" Utility to remove a temporary directory during program exit. """ try: shutil.rmtree(dirname) print("Removed temporary directory: %s" % dirname) except OSError: # if the temp dir was removed already by other means pass
$domainChoices[$domainConfig->getId()] = $domainConfig->getName(); } $chosenDomainName = $io->choice( 'There is more than one domain. Which domain do you want to use?', $domainChoices, $firstDomainConfig->getName() );
def index @owner = Member.find_by(slug: params[:member_slug]) @show_all = params[:all] == '1' @show_jump_to = params[:member_slug].present? ? true : false @gardens = @gardens.includes(:owner) @gardens = @gardens.active unless @show_all
Matcher m = re.matcher(page); while (m.find()) { LOGGER.debug("found subtitle " + m.group(2) + " name " + m.group(1) + " zip " + m.group(3)); res.put(m.group(2) + ":" + m.group(1), m.group(3)); if (res.size() > PMS.getConfiguration().openSubsLimit()) { // limit the number of hits somewhat break;
err      error ) if g.Resource == "" || g.Resource == r.Name { filename, err = genmain.GenerateController(g.Force, g.Regen, g.AppPkg, g.OutDir, g.Pkg, r.Name, r) }
/* compile code (must be done for each thread) */ int arena = mrb_gc_arena_save(handler_ctx->mrb); mrb_value proc = h2o_mruby_compile_code(handler_ctx->mrb, &handler->config, NULL); handler_ctx->proc = mrb_funcall_argv(handler_ctx->mrb, mrb_ary_entry(handler_ctx->constants, H2O_MRUBY_PROC_APP_TO_FIBER), handler_ctx->symbols.sym_call, 1, &proc);
} } // @todo Consider changing this to `null`, but it will require work in the Vue parts, since they expect an array return []; }
// Indexes block ID by chunk ID IndexByChunkID(headerID, chunkID flow.Identifier) error // Finds the ID of the block corresponding to given chunk ID IDByChunkID(chunkID flow.Identifier) (flow.Identifier, error) }
if e.Config.SMTPSettings.SMTPAuthenticationMethod == fleet.AuthMethodNameCramMD5 { err = smtp.SendMail(smtpHost, auth, e.Config.SMTPSettings.SMTPSenderAddress, e.To, msg) if err != nil { return fmt.Errorf("failed to send mail. crammd5 auth method: %w", err) } return nil }
} if($mybb->input['filesize'] && $mybb->request_method == "post") { $direction_fields['filesize'] *= 1024; } foreach($direction_fields as $field_name => $field_content)
class ZigbeeClusterLibrary(Packet): name = "Zigbee Cluster Library (ZCL) Frame" deprecated_fields = { "direction": ("command_direction", "2.5.0"), } fields_desc = [ # Frame control (8 bits) BitField("reserved", 0, 3),
public override void Deserialize(NetworkReader reader) { netId = reader.ReadPackedUInt32(); payload = reader.ReadBytesAndSizeSegment(); } public override void Serialize(NetworkWriter writer)
Parameters ---------- nbunch : single node, container, or all nodes (default= all nodes) The view will only report edges incident to these nodes. data : string or bool, optional (default=False) The edge attribute returned in 3-tuple (u, v, ddict[data]). If True, return edge attribute dict in 3-tuple (u, v, ddict).
var compactingFiles = compacting.stream().flatMap(job -> job.getFiles().stream()).collect(Collectors.toSet()); Preconditions.checkArgument(this.allFiles.containsAll(compactingFiles), "Compacting not in set of all files: %s, compacting files: %s", this.allFiles, compactingFiles); Preconditions.checkArgument(Collections.disjoint(compactingFiles, this.candidates), "Compacting and candidates overlap %s %s", compactingFiles, this.candidates);
if ( config.Exists( "vita_keep_aspect_ratio" ) ) { vita_keep_aspect_ratio = config.IntParams( "vita_keep_aspect_ratio" ); fheroes2::Display::instance().engine()->SetVitaKeepAspectRatio( vita_keep_aspect_ratio ); } #endif
echo ' data-target="_blank"'; } ?> > <div class="panel-heading"> <div class="panel-title h4"><?php eT($title); ?></div> </div> <div class="panel-body"> <div class="panel-body-ico">
import json import tqdm import pickle from gluoncv.utils import download, makedirs _TARGET_DIR = os.path.expanduser('~/.mxnet/datasets/visualgenome')
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4457-SEA 1645533465 1139404654</p> <hr> <p>Varnish cache server</p> </body>
} }() return manager.startConnection(consumerID, providerID) } func (manager *connectionManager) startConnection(consumerID, providerID identity.Identity) (err error) {
count, skip, reverse, NoOpMetricsSystem.NO_OP_LABELLED_TIMER); final AtomicReference<AbstractPeerTask.PeerTaskResult<List<BlockHeader>>> actualResult = new AtomicReference<>(); final AtomicBoolean done = new AtomicBoolean(false);
if (client && client.postMessage) { client.postMessage({ type, payload }, [channel.port2]); } else { reject(`Unable to send message to ${client}`); } });
template <typename TensorDataType> bool adam<TensorDataType>::load_from_checkpoint_shared(persist& p, std::string name_prefix) { load_from_shared_cereal_archive(*this, p, this->get_comm(), "adam.xml"); char l_name[512]; sprintf(l_name, "%s_optimizer_adam_moment1_%lldx%lld.bin", name_prefix.c_str(), m_moment1->Height(), m_moment2->Width());
REJECT_INVALID, "bad-txns-nonfinal"); } nFees += view.GetValueIn(tx) - tx.GetValueOut(); uint256 hash = tx.GetHash();
contents += tabtabtab + "with self._lock:\n" contents += tabtabtabtab + fmt.Sprintf("_write_application_exception(ctx, oprot, \"%s\", ex_code=TApplicationExceptionType.INTERNAL_ERROR, message=e.message)\n", methodLower) } contents += tabtabtab + "raise\n" if !method.Oneway { contents += tabtab + "with self._lock:\n" contents += tabtabtab + "try:\n"
} var errUnsupportedTLD *route53domains.UnsupportedTLD if errors.As(err, &errUnsupportedTLD) { // The TLD isn't supported by Route53, hence it can't have been registered with Route53. return &ErrDomainNotFound{ domainName: domainName, }
* * @param ResponseInterface $response */ public function respond(ResponseInterface $response) { // Send response if (!headers_sent()) {
} } void trimNonResidentQueue() { Entry<V> e; int maxQueue2Size = nonResidentQueueSize * (mapSize - queue2Size); if (maxQueue2Size >= 0) {
} private static int killLoadData(String stmt, int offset) { if (stmt.length() > offset + "oadData".length()) { char c1 = stmt.charAt(++offset); char c2 = stmt.charAt(++offset); char c3 = stmt.charAt(++offset);
int numTasksToShutDown = Math.max(otherActiveTasks.size() - (request.getInstancesSafe() - deployProgress.getTargetActiveInstances()), 0); List<SingularityTaskId> sortedOtherTasks = new ArrayList<>(otherActiveTasks); Collections.sort(sortedOtherTasks, SingularityTaskId.INSTANCE_NO_COMPARATOR); return sortedOtherTasks.isEmpty() ? sortedOtherTasks : sortedOtherTasks.subList(0, Math.min(numTasksToShutDown, sortedOtherTasks.size())); } private boolean canMoveToNextStep(SingularityDeployProgress deployProgress) {
package com.hazelcast.jet.examples.cdc; import com.hazelcast.jet.Jet; import com.hazelcast.jet.JetInstance; import com.hazelcast.jet.cdc.CdcSinks; import com.hazelcast.jet.cdc.ChangeRecord; import com.hazelcast.jet.cdc.mysql.MySqlCdcSources;
log.init.debug("Initializing cookies...") cookies.init(q_app) log.init.debug("Initializing cache...") cache.init(q_app)
// } // ``` // where M is a struct type and T is any type. func NewCommit(ctx context.Context, value types.Value, parentsList types.List, meta types.Struct) (types.Struct, error) { parentsSet, err := parentsList.ToSet(ctx) if err != nil { return types.EmptyStruct(meta.Format()), err } return commitTemplate.NewStruct(meta.Format(), []types.Value{meta, parentsSet, parentsList, value}) } // FindCommonAncestor returns the most recent common ancestor of c1 and c2, if
end def self.contributing_file_metric QualityMetric.where(name: 'Contributing File').first_or_create!(admin_only: true) end end
// the time of the put, and optionally (if specified in lockContext) // releases the lock on the lock ID if the put is successful. Releasing the // lock in mdserver is idempotent. // // The priority parameter specifies the priority of this particular MD put // operation. When conflict happens, mdserver tries to prioritize writes // with higher priorities. Caller should use pre-defined (or define new) // constants in keybase1 package, such as keybase1.MDPriorityNormal. Put(ctx context.Context, rmd *RootMetadata, verifyingKey kbfscrypto.VerifyingKey, lockContext *keybase1.LockContext, priority keybase1.MDPriority) (
} // netId changed? if (newNetId != netIdField) { if (LogFilter.Debug) { Debug.Log("SetSyncVar GameObject " + GetType().Name + " bit [" + dirtyBit + "] netfieldId:" + netIdField + "->" + newNetId); } SetDirtyBit(dirtyBit); gameObjectField = newGameObject; // this is not really needed because we only access it via netId get/set anyway netIdField = newNetId; } }
bool clFree(void* virtualPtr) { if ( ! gpu->isValidPtr(virtualPtr) ) { LOG(ERROR) << gpu->name() << "> not a valid memory pointer @ " << virtualPtr; return false;
for line in data: for team, result in parse_game(line): table[team][result] += 1 return format_table(table)
return err } if o.cpu <= 0 { return errCPUNotPositive } if o.memory <= 0 { return errMemNotPositive }
var createdResources = []; describe('arm', function () { describe('resource', function () { var suite; var testApiVersion = '2014-04-01'; var testGroupLocation;
/** Local index value for when the class is not local. */ static final int NOTLOCAL_PLACEHOLDER = -1; private static ClassLoader classLoader = PMDASMClassLoader.getInstance(JavaTypeQualifiedName.class.getClassLoader()); // since we prepend each time, these lists are in the reversed order (innermost elem first). // we use ImmutableList.reverse() to get them in their usual, user-friendly order
:returns tuple (number_of_files_copied, total_size_copied_in_bytes) """ # don't allow threads to be less than 3 threads = 3 if threads < 3 else threads from boto3.s3.transfer import TransferConfig
/** * Registers a theme feature for use in {@see add_theme_support}. * * This does not indicate that the current theme supports the feature, it only describes the feature's contents. * * @since 5.5.0 *
use Symfony\Component\HttpFoundation\Request; /** * Class RequestParamNormalizer. * * This class provides public static functions to normalize different HTTP * request types into valid JSON data. Provides type casting from a JSON Schema
// ContainerTimeout specifies the amount time before a SIGKILL is issued to // containers managed by ECS DockerStopTimeoutSeconds time.Duration // AvailableLoggingDrivers specifies the logging drivers available for use // with Docker.  If not set, it defaults to ["json-file"].
private TableMetadata base; private long expireOlderThan; private int minNumSnapshots; private Consumer<String> deleteFunc = defaultDelete; private ExecutorService deleteExecutorService = DEFAULT_DELETE_EXECUTOR_SERVICE; RemoveSnapshots(TableOperations ops) { this.ops = ops; this.base = ops.current();
return value; }; // We only want to display breadcrumbs for one category on a PDP even if a // product has multiple related categories. This function filters and selects // one category id for that purpose. const getBreadcrumbCategoryId = categories => { const breadcrumbSet = new Set(); categories.forEach(({ breadcrumbs }) => {
for _ in range(3): pipe.run() def test_affine_translate_cpu(): check_no_input(fn.translate_transform, offset=(2, 3))  def test_affine_scale_cpu(): check_no_input(fn.scale_transform, scale=(2, 3))  def test_affine_rotate_cpu(): check_no_input(fn.rotate_transform, angle=30.0)  def test_affine_shear_cpu(): check_no_input(fn.shear_transform, shear=(2., 1.)) # ToDo add tests for DLTensorPythonFunction if easily possible
*/ package tech.pegasys.pantheon.metrics; import java.util.Optional;  public interface MetricCategory { String getName(); Optional<String> getAppliationPrefix(); }
TSERV_SUMMARY_RETRIEVAL_THREADS("tserver.summary.retrieval.threads", "10", PropertyType.COUNT, "The number of threads on each tablet server available to retrieve" + " summary data, that is not currently in cache, from RFiles."), // accumulo garbage collector properties GC_PREFIX("gc.", null, PropertyType.PREFIX,
return $menu; }  public function getMenuJson(?string $name = '', bool $jsonPrettyPrint = false): string { $menu = $this->getMenu($name); $options = $jsonPrettyPrint ? JSON_PRETTY_PRINT : 0;  return json_encode($menu, $options); } }
return nil, containerNotInPod } func getPodImageIdentifiers(containerStatusArray []corev1.ContainerStatus) map[string]bool { // Map is used purely to exclude duplicate selectors, value is unused. podImages := make(map[string]bool) // Note that for each pod image we generate *2* matching selectors. // This is to support matching against ImageID, which has a SHA // docker.io/envoyproxy/envoy-alpine@sha256:bf862e5f5eca0a73e7e538224578c5cf867ce2be91b5eaed22afc153c00363eb
public SqlType[] GetParametersTypeArray() { return new SafetyEnumerable<SqlType>(columns.Values).ToArray(); } } }
void PictureLoaderWorker::picDownloadFailed() { /* Take advantage of short circuiting here to call the nextUrl until one is not available.  Only once nextUrl evaluates to false will this move on to nextSet.  If the Urls for a particular card are empty, this will effectively go through the sets for that card. */ if (cardBeingDownloaded.nextUrl() || cardBeingDownloaded.nextSet()) { mutex.lock(); loadQueue.prepend(cardBeingDownloaded);
walk = &((*walk)->nextNameObject); } #else const char* name = obj->objectName; if (root.find(name) != root.end()) root.erase(name); #endif Mutex::unlockMutex(mutex);
ClearOptimizerWhenUsingCustomAccessors(); } public override System.Type MappedClass { get { return componentClass; } } public override object[] GetPropertyValues(object component) {
self._read_next_timestep() def _read_trz_header(self): """Reads the header of the trz trajectory""" self._headerdtype = np.dtype([
@qutescheme.add_handler('testdata') def handler(url):  # pylint: disable=unused-variable file_abs = os.path.abspath(os.path.dirname(__file__)) filename = os.path.join(file_abs, os.pardir, 'end2end', url.path().lstrip('/')) with open(filename, 'rb') as f: data = f.read()
package utils import ( "fmt" "testing" "github.com/google/go-cmp/cmp"
final Throwable originalErr = error; executionService.schedule(() -> { try { // We should not handle pendingOps getting to 0 here, it will be increased again by // the retry operations. pendingOps.decrementAndGet(); if (!tryRetry(partitions, entries, pendingOps, completionFuture)) { completionFuture.completeExceptionally(originalErr); } } catch (Exception e) { logger.severe("Exception during retry", e); completionFuture.completeExceptionally(originalErr);
print("Current version: %s. Latest released version: %s" % ( tools.__version__, last_release )) if not tools.on_master(): print("Not deploying due to not being on master") sys.exit(0)  if not tools.has_source_changes(last_release): print("Not deploying due to no source changes") sys.exit(0) start_time = time()
# @!group Helpers # @return [Pathname] the path as declared in the podspec # def declared_path Pathname.new params[:path] || params[:local] end # @return [Pathname] the path of the podspec.
@Override public void onCreatePreferences(Bundle savedInstanceState, String rootKey) { addPreferencesFromResource(R.xml.preferences_notifications); setUpScreen(); }
# coding: utf-8 # pylint: disable = C0103 """Plotting library.""" from __future__ import absolute_import, division import warnings from copy import deepcopy
"time" "github.com/andres-erbsen/clock" observer "github.com/imkira/go-observer" "github.com/spiffe/spire/pkg/agent/client" "github.com/spiffe/spire/pkg/agent/common/backoff" "github.com/spiffe/spire/pkg/agent/manager/cache" "github.com/spiffe/spire/pkg/agent/svid" "github.com/spiffe/spire/pkg/common/bundleutil"
@Override public void addObserver(@Nonnull Observer<T> observer) { observers.add(observer); } @Override public void addObserver(@Nonnull Consumer<? super T> onNext, @Nonnull Consumer<? super Throwable> onError, @Nonnull Runnable onComplete) { observers.add(Observer.of(onNext, onError, onComplete)); } @Override
class Admin::HelpController < ApplicationController def help @bank_questions = Question.questions_for_banks(Question.all) @partner_questions = Question.questions_for_partners end end
_configure_logging(inventory_flags.get('loglevel')) config_path = inventory_flags.get('config_path') if config_path is None: LOGGER.error('Path to pipeline config needs to be specified.') sys.exit()
oidcRepoFn common.OidcAuthRepoFactory } // NewService returns a managed group service which handles managed group related requests to boundary. func NewService(oidcRepo common.OidcAuthRepoFactory) (Service, error) { const op = "managed_groups.NewService" if oidcRepo == nil {
'Paths', ] for name, path in _path_info().items(): lines += ['{}: {}'.format(name, path)] return '\n'.join(lines)
template <typename TensorDataType> bool adam<TensorDataType>::save_to_checkpoint_shared(persist& p, std::string name_prefix) { if (this->get_comm().am_trainer_master()) { write_cereal_archive(*this, p, "adam.xml"); } char l_name[512];
return result def raise_if_exception(result): """ If "result" is an exception then raise the "result". Unless "result" is an exception then return the "result".
struct s2n_stuffer *out = &conn->handshake.io; const int total_size = s2n_encrypted_extensions_send_size(conn); inclusive_range_check(0, total_size, 65535); /* Write length of extensions */ GUARD(s2n_stuffer_write_uint16(out, total_size));
* * @since 3.8 * * @param int $old_lifespan      Old value in minutes. * @param int $old_lifespan_unit Old value of unit. * * @return void */
if (dest < recipients) || (proc.current < recipients && dest < recipients+1) || (proc.malicious == invalidComplaintAnswerBroadcast && dest == proc.dkg.Size()-1) { // choose a random reason for an invalid share coin := mrand.Intn(5) gt.Logf("%d maliciously sending to %d, coin is %d\n", proc.current, dest, coin) switch coin { case 0: // value doesn't match the verification vector newMsg.data[8]++
'Please check your path and filename and try ' 'again. Error: %s', err) # Setting up configurations forseti_inventory_config = forseti_config.get('inventory', {}) inventory_config = InventoryConfig(
constructProperty_ProbeSet(probeSet); } //------------------------------------------------------------------------------ //                                BUILD SYSTEM
return element @staticmethod def _get_csv_config_random(path, delimiter, loop, variable_names, random_order): """ :type path: str
type Token struct { EntityListID EntityListID TreeID       TreeID ProtoID      ProtocolID RoundID      RoundID TreeNodeID   TreeNodeID cacheId      TokenID } // Global mutex when we're working on Tokens. Needed because we
public Vector4 DivideBenchmark() => Vector4.Divide(VectorTests.Vector4Value, VectorTests.Vector4Delta); [Benchmark] public Vector4 DivideByScalarBenchmark() => Vector4.Divide(VectorTests.Vector4Value, 0.5f); [Benchmark] public float DotBenchmark() => Vector4.Dot(VectorTests.Vector4Value, VectorTests.Vector4ValueInverted);
AccountSID string AuthToken  string `password:"true" info:"The primary Auth Token for Twilio. Must be primary (not secondary) for request valiation."` FromNumber string `displayName:"From Number or Twilio Messaging Service SID" public:"true" info:"The Twilio number or Messaging Service SID to use for outgoing notifications."` DisableTwoWaySMS      bool     `info:"Disables SMS reply codes for alert messages."` SMSCarrierLookup      bool     `info:"Perform carrier lookup of SMS contact methods (required for SMSFromNumberOverride). Extra charges may apply."`
NRStore:           app.NotificationRuleStore, NCStore:           app.NCStore, AlertStore:        app.AlertStore, AlertLogStore:     app.AlertLogStore, ServiceStore:      app.ServiceStore, FavoriteStore:     app.FavoriteStore, PolicyStore:       app.EscalationStore,
).collect(joining("\n"))); } private boolean isSplitLocalForMember(InputSplit split, Address memberAddr) { try { final InetAddress inetAddr = memberAddr.getInetAddress(); return Arrays.stream(split.getLocations())
new_db_name = db_name + '_new' old_path = os.path.join(db_dir, db_name) new_path = os.path.join(db_dir, new_db_name) new_seqno_db_name = config.seqNoDbName + '_new' try: dest_seq_no_db_storage = initKeyValueStorage(config.reqIdToTxnStorage, db_dir,
template <typename TensorDataType> bool adagrad<TensorDataType>::save_to_checkpoint_shared(persist& p, std::string name_prefix) { if (this->get_comm().am_trainer_master()) { write_cereal_archive(*this, p, "adagrad.xml"); } char l_name[512];
* */ int partition(vector<int> arr, int low, int high) { int pivot = arr[high];  // taking the last element as pivot int i = (low - 1);      // Index of smaller element
// When BatchStage<String> mapped = stage.mapUsingService(bidirectionalStreaming(port), (service, key, item) -> { HelloRequest req = HelloRequest.newBuilder().setName(item).build(); return service.call(req).thenApply(HelloReply::getMessage).get(); }); // Then
@javax.inject.Inject public ApplicationConfig( Instance<org.kie.kogito.KogitoConfig> configs) { super($Addons$, configs); } } No newline at end of file
if ( ! Sensei_Dependency_Checker::check_assets() ) { add_action( 'admin_notices', array( 'Sensei_Dependency_Checker', 'add_assets_notice' ) ); } require_once dirname( __FILE__ ) . '/includes/class-sensei-bootstrap.php';
rpn_outs = self.rpn_head(x) rpn_loss_inputs = rpn_outs + (gt_bboxes, img_meta, self.train_cfg.rpn) rpn_losses = self.rpn_head.loss( *rpn_loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore) losses.update(rpn_losses) proposal_inputs = rpn_outs + (img_meta, self.test_cfg.rpn)
dockerTest := exec.Command("docker", "images") err = dockerTest.Run() if err != nil { stdcli.Error(errors.New("could not connect to docker daemon, is it installed and running?")) return } cache := !c.Bool("no-cache")
from panopticapi.evaluation import OFFSET, VOID, PQStat from panopticapi.utils import IdGenerator, rgb2id from .api_wrappers import COCO from .builder import DATASETS from .coco import CocoDataset
if (privacy.isDisplayMessage()) { setTicker(getStyledMessage(recipient, message)); } else if (privacy.isDisplayContact()) { setTicker(getStyledMessage(recipient, context.getString(R.string.SingleRecipientNotificationBuilder_new_message))); } else { setTicker(context.getString(R.string.SingleRecipientNotificationBuilder_new_message)); } }
$product = $this->productRepository->getById($productId); $orderDomainConfig = $this->domain->getDomainConfigById($order->getDomainId()); $productPrice = $this->productPriceCalculationForCustomerUser->calculatePriceForCustomerUserAndDomainId( $product, $order->getDomainId(), $order->getCustomerUser()
private readonly IRequestTracing sessionProvider; /// <summary> /// Initializes an instance of the <see cref="TraceModule"/> class, with /// the provided <paramref name="sessionProvider"/>. /// </summary> /// <param name="sessionProvider">The session provider.</param>
else: LOG.info('Unsupported Events rule target ARN "%s"' % arn) def create_sqs_queue(queue_name, env=None):
// Start playback immediately if continuous playback is enabled // Repeat episode implementation if (UserPreferences.getShouldRepeatEpisode() && !wasSkipped) { nextMedia = currentMedia; nextMedia.setPosition(0); } else {
} private T getSessionCatalog() { Preconditions.checkNotNull(sessionCatalog, "Delegated SessionCatalog is missing. " + "Please make sure your are replacing Spark's default catalog, named 'spark_catalog'."); return sessionCatalog; } }
__version__ = '0.2.0' No newline at end of file __short_version__ = '0.2' No newline at end of file
//  - file://localhost/c:/foo/bar //    -> Also passes "c:\foo\bar". // // As // // fileblob exposes the following types for As:
public static bool ProcessMethodsValidateTargetRpc(TypeDefinition td, MethodDefinition md, CustomAttribute ca) { if (!md.Name.StartsWith("Target")) { Weaver.Error("Target Rpc function [" + td.FullName + ":" + md.Name + "] doesnt have 'Target' prefix"); return false;
if (predictor_ != nullptr) { delete predictor_; } bool is_predict_leaf = false; bool is_raw_score = false; if (predict_type == C_API_PREDICT_LEAF_INDEX) { is_predict_leaf = true; } else if (predict_type == C_API_PREDICT_RAW_SCORE) { is_raw_score = true; } else { is_raw_score = false; } predictor_ = new Predictor(boosting_, is_raw_score, is_predict_leaf); }
# -*- coding: utf-8 -*- import time import json import random from pgoapi.utilities import f2i from pokemongo_bot import logger
<div class="error"><?php echo $errors['max_file_size']; ?></div> </td> </tr> <?php if (CompressionFileAdapter::isSupported()) { ?> <tr> <td width="180"><?php echo __('Compress Attachments'); ?>:</td> </td>
@Override public boolean saveToSnapshot() { if (inComplete) { // If we are in completing phase, we can have a half-emitted item. Instead of finishing it and // writing a snapshot, we finish the final items and save no state. return complete(); } if (snapshotTraverser == null) {
# Nonetheless we test that the query is built correctly when # a user supplies more than one text condition. it 'merges conditions' do expect(Mongoid.logger).to receive(:warn) expect(selection.selector).to eq('$and' => [ {'$text' => {'$search' => 'one'}} ],
return false; } else { HashMap<String, BrokerData> brokers = clusterInfo.getBrokerAddrTable(); for (Entry<String, BrokerData> brokerEntry : brokers.entrySet()) { HashMap<Long, String> brokerIps = brokerEntry.getValue().getBrokerAddrs(); for (Entry<Long, String> brokerIdEntry : brokerIps.entrySet()) { if (brokerIdEntry.getValue().contains(ip)) return true;
MetricsListenAddr string             `yaml:"metrics_listen_addr" default:"127.0.0.1:14000"` } func (c *Config) LogLevel() zapcore.Level { return c.Logging.parsedLevel } // NewConfig loads a hub config from the specified YAML file.
$template_type = $post->post_type; if ( 'wp_template' !== $template_type ) { return new WP_Error( 'template_wrong_post_type', __( 'An invalid post was provided for this template.' ) ); } $ids    = get_theme_mod( $template_type, array() );
* Instantiates an action to remove all the files reachable from given metadata location. */ default RemoveReachableFiles removeReachableFiles(String metadataLocation) { throw new UnsupportedOperationException(this.getClass().getName() + " does not implement removeReachableFiles"); } }
# SPDX - License - Identifier: Apache - 2.0 # Purpose # This code example demonstrates how to deny uploads of unencrypted objects to an Amazon Simple Storage Service (Amazon S3) bucket. # snippet-start:[s3.ruby.s3_add_bucket_ssekms_encryption_policy]
import org.apache.accumulo.harness.AccumuloClusterHarness; import org.junit.After; import org.junit.Test; import com.google.common.collect.Iterables; public class AccumuloClientIT extends AccumuloClusterHarness { @After public void deleteUsers() throws Exception { try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {
$responseContext = System::getContainer()->get(ResponseContextAccessor::class)->getResponseContext(); if ($responseContext instanceof WebpageResponseContext) { switch ($strKey) {
if err != nil { return types.Capability{}, err } cueTemplate = string(b) } else { if tmp.CueTemplate == "" { return types.Capability{}, errors.New("template not exist in definition")
// such as memory and cpu. Resources map[string]string `hcl:"resources,optional"` // An array of paths to directories that will be mounted as EmptyDirVolumes in the pod // to store temporary data. ScratchSpace []string `hcl:"scratch_path,optional"` // ServiceAccount is the name of the Kubernetes service account to apply to the
} } Dictionary<string, string> envVariables = null; if (!String.IsNullOrEmpty(environmentVariables)) { envVariables = ParseStringToDictionary(environmentVariables); } bool failed = false;
}; } __attribute__((aligned(4))); struct uchar2Holder { union { unsigned int ui[2]; unsigned char c[8]; }; } __attribute__((aligned(8)));  __device__ unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s) { struct uchar2Holder cHoldVal; struct ucharHolder cHoldKey;
$type = null; if (!$hint->types) { throw new UnexpectedValueException('Intersection type should not be empty'); } if ($analysis_php_version_id < 8_01_00) {
*/ public function update() { $current_version = get_option( 'sensei-version' ); $is_new_install  = ! $current_version && $this->course_exists(); $is_upgrade      = $current_version && version_compare( $this->version, $current_version, '>' ); // Make sure the current version is up-to-date.
* @throws \Psr\Container\ContainerExceptionInterface * @throws RuntimeException If named route does not exist or Request not initialized */ public function fullUrlFor($name, array $data = [], array $queryParams = []) { // Check if container['request'] is initialized. if (!$this->container->has('request')) {
* overloaded to accommodate (mathematical) field operations. */ #include <cassert> #include <cmath> #include <complex> #include <iostream> #include <stdexcept> /** * Class Complex to represent complex numbers as a field.
#endif #include <iostream> #include <chrono> #include <algorithm> #define NUM_GROUPS 1 #define GROUP_SIZE 1
* This will properly maintain the copyright information. DigitalGlobe * copyrights will be updated automatically. * * @copyright Copyright (C) 2015, 2017, 2018 DigitalGlobe (http://www.digitalglobe.com/) */ #include "AddBboxVisitor.h"
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4422-SEA 1645547163 1550135911</p> <hr> <p>Varnish cache server</p> </body>
const ( mArrayTmpl = `{{$tmp := tempvar}}{{tabs .depth}}{{$tmp}} := make([]{{gonative .elemType.Type}}, len({{.source}})) {{$tmpIndex := tempvar}}{{$tmpElement := tempvar}}{{tabs .depth}}for {{$tmpIndex}}, {{$tmpElement}} := range {{.source}} { {{marshalAttribute .elemType (printf "%s[*]" .context) $tmpElement (printf "%s[%s]" $tmp $tmpIndex) (add .depth 1)}} {{tabs .depth}}} {{tabs .depth}}{{.target}} = {{$tmp}}`
func TestMultipleAcksCanGoIntoASingleBatch(t *testing.T) { ctx := context.Background() var wg sync.WaitGroup var mu sync.Mutex sentAcks := make(map[driver.AckID]int) ids := []int{1, 2} ds := &ackingDriverSub{ q: []*driver.Message{{AckID: ids[0]}, {AckID: ids[1]}}, sendAcks: func(_ context.Context, ackIDs []driver.AckID) error { mu.Lock() defer mu.Unlock() for _, id := range ackIDs { sentAcks[id]++ wg.Done()
) if a.Validation.ExclusiveMaximum != nil { max = *a.Validation.ExclusiveMaximum } else if a.Validation.Maximum != nil { max = *a.Validation.Maximum } if a.Validation.ExclusiveMinimum != nil { min = *a.Validation.ExclusiveMinimum } else if a.Validation.Minimum != nil { min = *a.Validation.Minimum } else { sign = -1
flags.StringVar(&opts.blobCache, "blob-cache", "", "store copies of pulled image blobs in the specified directory") flags.StringVar(&opts.certDir, "cert-dir", "", "use certificates at the specified path to access the registry") flags.StringVar(&opts.creds, "creds", "", "use `[username[:password]]` for accessing the registry") flags.BoolVarP(&opts.removeSignatures, "remove-signatures", "", false, "don't copy signatures when pulling image") flags.StringVar(&opts.signaturePolicy, "signature-policy", "", "`pathname` of signature policy file (not usually used)") flags.StringSliceVar(&opts.decryptionKeys, "decryption-key", nil, "key needed to decrypt the image")
if check_exception_type: assert isinstance( md_e.value, type(pd_e) ), "Got Modin Exception type {}, but pandas Exception type {} was expected".format( type(md_e.value), type(pd_e) ) if raising_exceptions:
* @return */ public static boolean isMonumentsEnabled(final Date date) { if (date.getMonth() == 8) { return true; } return false;
_referenceToElementResolver = referenceToElementResolver; } public async Task<List<Tuple<string, string>>> GetGroupMembers(string groupId, CancellationToken cancellationToken, bool includeInactiveMembers = false) { var groupResource = await _fhirDataStore.Value.GetAsync(new ResourceKey(KnownResourceTypes.Group, groupId), cancellationToken);
//If the aspect ratio is less than 16/9 (1.77), set the height as if it were pillerboxed. // 4:3 1440x1080 -> 1920x1080 if (videoWidth / videoHeight < 16 / 9) { videoWidth = videoHeight * (16 / 9); } var maxAllowedWidth = videoWidth || 4096;
self.description = <<-DESC Creates a new Pod with the given name from the template in the working directory. Creates a scaffold for the development of a new Pod according to the CocoaPods best practices. If a `TEMPLATE_URL`, pointing to a git repo containing a compatible template, is specified, it will be used in place of the default one. DESC self.arguments = 'NAME [TEMPLATE_URL]' def initialize(argv) @name = argv.shift_argument
public const string PHONE_NUMBER_REGEX_IT = "ITPhoneNumber"; public const string PHONE_NUMBER_REGEX_NL = "NLPhoneNumber"; public const string PHONE_NUMBER_REGEX_SPECIAL = "SpecialPhoneNumber";
is_bn ? context.m_damping_bn_act : context.m_damping_act, is_bn ? context.m_damping_bn_err : context.m_damping_err, is_gru ? m_learning_rate_factor_gru : m_learning_rate_factor, m_use_eigen_decomposition, m_print_matrix, m_print_matrix_summary, m_print_time); prof_region_end(("kfac-inverse/" + block->get_name()).c_str(), prof_sync);
if err := oprot.WriteStructBegin(ctx, "thing"); err != nil { return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) } if err := frugal.WriteI32WithContext(ctx, oprot, p.AnID, "an_id", 1); err != nil { return thrift.PrependError(fmt.Sprintf("%T::an_id:1 ", p), err) } if err := frugal.WriteStringWithContext(ctx, oprot, p.AString, "a_string", 2); err != nil { return thrift.PrependError(fmt.Sprintf("%T::a_string:2 ", p), err) } if err := oprot.WriteFieldStop(ctx); err != nil {
// FIX: "type" is already used to define the type of object to instanciate, any Data with // the same name cannot be extracted from BaseObjectDescription if (attrName == std::string("type")) continue; if (!hasField(attrName)) continue; parseField(attrName, it.second);
# there is one, otherwise returns a message including the location of the # example. def description description = metadata[:description].to_s.empty? ? "example at #{location}" : metadata[:description] RSpec.configuration.format_docstrings_block.call(description) end # @attr_reader
* participating - note that the proc would not * have been added to any collective tracker until * after it successfully connected */ PMIX_LIST_FOREACH_SAFE(trk, tnxt, &pmix_server_globals.collectives, pmix_server_trkr_t) { /* see if this proc is participating in this tracker */ PMIX_LIST_FOREACH_SAFE(rinfo, rnext, &trk->local_cbs, pmix_server_caddy_t) { if (!PMIX_CHECK_PROCID(&rinfo->peer->info->pname, &peer->info->pname)) {
self.coords = coords n = reference_coords.shape m = coords.shape if n != m or n[1] != 3 or m[1] != 3: raise Exception("Coordinate number/dimension mismatch.") self.n = n[0]
// CDN. if ( ! isset( $hosts ) ) { $hosts = $this->cdn_subscriber->get_cdn_hosts( [], [ 'all', 'images' ] ); $hosts = array_flip( $hosts ); }
def test_refit(self): X, y = load_breast_cancer(True) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42) params = { 'objective': 'binary', 'metric': 'binary_logloss',
/** * Configuration constants for Closure's tree UI. * @type {Object.<string,*>} * @private */ this.config_ = { indentWidth: 19, cssRoot: 'blocklyTreeRoot', cssHideRoot: 'blocklyHidden',
// Balance returns the current balance for the given peer func (a *Accounting) Balance(peer swarm.Address) (balance int64, err error) { err = a.store.Get(peerBalanceKey(peer), &balance) if err != nil { if errors.Is(err, storage.ErrNotFound) { return 0, nil } return 0, err } return balance, nil
// Overrides the table's read.split.open-file-cost public static final String FILE_OPEN_COST = "file-open-cost";  // Overrides the table's read.split.open-file-cost public static final String VECTORIZATION_ENABLED = "vectorization-enabled";  // Overrides the table's read.parquet.vectorization.batch-size public static final String VECTORIZATION_BATCH_SIZE = "batch-size"; }
// Inject tracing system baggage reqHeaders := tchannel.InjectOutboundSpan(call.Response(), req.Headers.Items()) if err := writeRequestHeaders(ctx, format, reqHeaders, call.Arg2Writer, o.transport.exactCaseHeader); err != nil { // TODO(abg): This will wrap IO errors while writing headers as encode // errors. We should fix that. return nil, errors.RequestHeadersEncodeError(req, err)
mux.HandleFunc("/health", app.healthCheck) mux.HandleFunc("/health/engine", app.engineStatus) webH, err := web.NewHandler(app.cfg.UIURL, app.cfg.HTTPPrefix, app.ConfigStore.Config().ApplicationName()) if err != nil { return err }
resourcestatus "github.com/aws/amazon-ecs-agent/agent/taskresource/status" "github.com/aws/aws-sdk-go/aws" docker "github.com/fsouza/go-dockerclient" ) const (
batch_queue_set_option(remote_queue, "mesos-path", mesos_path); batch_queue_set_option(remote_queue, "mesos-master", mesos_master); batch_queue_set_option(remote_queue, "mesos-preload", mesos_preload); } if(batch_queue_type == BATCH_QUEUE_TYPE_DRYRUN) {
code.putln("new((void*)&(p->%s)) %s();" % ( entry.cname, decl_code)) if scope.internal_mode == 2 and py_attrs: # create a hybrid "optional initialization" where the kwds # argument is used to signal that initialization happens. # This is needed for pickleable closures, where the attributes
// called for situations less dire than // `apos.util.error`. warn(msg) { self.logger.warn.apply(self.logger, arguments); }, // Identical to `apos.util.warn`, except that the warning is
@property def is_unique(self): """Check if Series has no duplicate values.  Returns ------- bool True if there is no duplicates in Series, False otherwise.  """ return self.nunique(dropna=False) == len(self) @property
return (currentTimeMs - programStartDateMs) / programRuntimeMs * 100; } function updateTimeDisplay(positionTicks, runtimeTicks, playbackStartTimeTicks, playbackRate, bufferedRanges) { if (enableProgressByTimeOfDay) { if (nowPlayingPositionSlider && !nowPlayingPositionSlider.dragging) { if (programStartDateMs && programEndDateMs) {
package org.openqa.selenium; /** * Thrown to indicate that a click was attempted on an element but was intercepted by another * element on top of it */
def self.from_config(config) if ENV.include?(ENVIRONMENT_VAR) begin # rubocop:disable YAMLLoad data = YAML.load(ENV[ENVIRONMENT_VAR]) # In older releases of psych SyntaxError is not a subclass of Exception rescue Psych::SyntaxError raise Bolt::CLIError, "Could not parse inventory from $#{ENVIRONMENT_VAR}" rescue Psych::Exception raise Bolt::CLIError, "Could not parse inventory from $#{ENVIRONMENT_VAR}" end
def index @hangouts = (params[:live] == 'true') ? Hangout.live : Hangout.latest render partial: 'hangouts' if request.xhr? end private
ZooReader zr = context.getZooReaderWriter(); String zPath = propPathPrefix + "/" + prop.getKey(); try { if (zr.exists(zPath)) { return true; } } catch (KeeperException|InterruptedException e) {
if known_scope?(args.first) normalized_scope_for(args.shift) elsif args.any? { |a| a.is_a?(Symbol) } error_message = "You must explicitly give a scope (#{SCOPES.join(", ")}) or scope alias (#{scope_aliases.keys.join(", ")}) when using symbols as metadata for a hook." raise ArgumentError.new error_message else :each end
import { toggleDrawer, closeDrawer } from 'src/actions/app'; import { RestApi } from '@magento/peregrine'; const { Magento2: { request } } = RestApi; const getGuestCartId = getState => { const { cart } = getState();
) ); $allowed_statuses = array( 'active', 'inactive', 'recently_activated', 'upgrade', 'mustuse', 'dropins', 'search', 'paused', 'auto-update-enabled', 'auto-update-disabled' ); $status = 'all'; if ( isset( $_REQUEST['plugin_status'] ) && in_array( $_REQUEST['plugin_status'], $allowed_statuses, true ) ) { $status = $_REQUEST['plugin_status']; }
"""Check whether the anchors are inside the border Args: flat_anchors (torch.Tensor): Flatten anchors, shape (n, 4). valid_flags (torch.Tensor): An existing valid flags of anchors. img_shape (tuple(int)): Shape of current image. allowed_border (int, optional): The border to allow the valid anchor. Defaults to 0.
*/ function recurse_dirsize( $directory, $exclude = null, $max_execution_time = null, &$directory_cache = null ) { $directory  = untrailingslashit( $directory ); $save_cache = false; if ( ! isset( $directory_cache ) ) {
end it 'returns all fields and _id' do actual = church.as_json(compact: true) expect(actual).to eq('_id' => church.id, 'name' => 'St. Basil', 'location' => {}) end
delete stringMap; } void MegaApiImpl::getUserAlias(MegaHandle uh, MegaRequestListener *listener) { MegaRequestPrivate *request = new MegaRequestPrivate(MegaRequest::TYPE_GET_ATTR_USER, listener);
/// </summary> public class ByteBuffer { private byte[] _buffer; private int _pos;  // Must track start of the buffer. private readonly int _off; // Parent's position if sliced public int Length { get { return _buffer.Length - _off; } } public ByteBuffer(int size) : this(new byte[size]) { } public ByteBuffer(byte[] buffer) : this(buffer, 0) { }
*/ private String getTemplatizedCreatedDate() { if (dateCreated != null) { java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd"); if (UploadableFile.DateTimeWithSource.EXIF_SOURCE.equals(dateCreatedSource)) { return String.format(Locale.ENGLISH, TEMPLATE_DATE_ACC_TO_EXIF, dateFormat.format(dateCreated)) + "\n"; } else { return String.format(Locale.ENGLISH, TEMPLATE_DATA_OTHER_SOURCE, dateFormat.format(dateCreated)) + "\n"; } }
public void Take(int size, int iteration, Perf_LinqTestBase.WrapperType wrapType) => Perf_LinqTestBase.Measure(_sizeToPreallocatedArray[size], wrapType, col => col.Take(size - 1), _consumer); #if !NETFRAMEWORK [Benchmark] [ArgumentsSource(nameof(IterationSizeWrapperData))] public void TakeLast(int size, int iteration, Perf_LinqTestBase.WrapperType wrapType)
var formatter = new StringFormatter(pool); formatter.Format(format, 1); Assert.Equal(string.Format(CultureInfo.InvariantCulture, format, 1), formatter.ToString()); } [Fact]
var configObject = { options: { solc: { "optimize": true, "optimize-runs": 200 } }
*/ #include <utils/s2n_socket.h> #include <cbmc_proof/make_common_datastructures.h> void s2n_socket_read_snapshot_harness() { /* Non-deterministic inputs. */ struct s2n_connection *s2n_connection = malloc(sizeof(*s2n_connection)); if (s2n_connection != NULL) {
// we're accessing the file and get the sync label for multiplexing let parsedRealmUrl = url_parse(realmUrl); const url = append_url(user.server, 'realms/files/' + encodeURIComponent(parsedRealmUrl.pathname)); performFetch(url, {method: 'GET', timeout: 10000.0, headers: {Authorization: user.token}}) .then((response) => response.json().then((json) => { return { response, json }; })) .then((responseAndJson) => { const response = responseAndJson.response;
return http.StatusServiceUnavailable } totalConnections := wn.connectedForIP(remoteHost) if totalConnections >= wn.config.MaxConnectionsPerIP { networkConnectionsDroppedTotal.Inc(map[string]string{"reason": "incoming_connection_per_ip_limit"}) wn.log.EventWithDetails(telemetryspec.Network, telemetryspec.ConnectPeerFailEvent,
def back_transcribe(rna): """Return the RNA sequence back-transcribed into DNA. If given a string, returns a new string object.
// check if we have sufficient threshold signature shares enoughShares, err := signature.EnoughThresholdShares(int(dkg.Size()), len(votes)) if err != nil { return nil, fmt.Errorf("failed to check if shares are enough: %w", err) } if !enoughShares { return nil, ErrInsufficientShares
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4465-SEA 1645545158 345716483</p> <hr> <p>Varnish cache server</p> </body>
// Disable UBLA and reset PAP to default. Confirm that the IAM config is set // to nil in the proto. attrs.UniformBucketLevelAccess = UniformBucketLevelAccess{Enabled: false} attrs.PublicAccessPrevention = PublicAccessPreventionUnknown got = attrs.toRawBucket() want.IamConfiguration = nil if msg := testutil.Diff(got, want); msg != "" {
void UpdatePreferredDownload(CNode *node, CNodeState *state) { nPreferredDownload.fetch_sub(state->fPreferredDownload); // Whether this node should be marked as a preferred download node. state->fPreferredDownload = !node->fOneShot && !node->fClient;
public int SchemaVersion { get; private set; } [JsonProperty(JobRecordProperties.Output)] public IDictionary<string, ExportFileInfo> Output { get; private set; } = new Dictionary<string, ExportFileInfo>(); [JsonProperty(JobRecordProperties.Error)] public IList<ExportFileInfo> Error { get; private set; } = new List<ExportFileInfo>(); [JsonProperty(JobRecordProperties.Status)] public OperationStatus Status { get; set; }
// } function foo() { __callKey(arguments[0], 'foo', 'string'); }  // function foo() { //     arguments.length; // } function foo() { arguments.length; } No newline at end of file
TableScan scan, int numRowsPerRoot, int expectedTotalRows, int numExtraCallsToHasNext, List<String> columns) throws IOException { Set<String> columnSet = ImmutableSet.copyOf(columns); int rowIndex = 0; int totalRows = 0; try (VectorizedTableScanIterable itr = new VectorizedTableScanIterable(scan, numRowsPerRoot, false)) { CloseableIterator<ColumnarBatch> iterator = itr.iterator();
* * @since 5.9.0 * * @param array $data      A theme.json like structure. * @param array $node_path The path to inspect. It's 'settings' by default. * @return array */ private static function get_default_slugs( $data, $node_path ) {
) var ( // Used to manipulate time in unit tests clk = clock.New() )
"time" ) func ensureInterface(ifaceName string, wait bool) (iface *net.Interface, err error) { iface, err = findInterface(ifaceName) if err == nil || !wait {
if (useSkipper) { streamDeploymentProperties.put(SKIPPER_ENABLED_PROPERTY_KEY, "true"); } this.streamService.deployStream(name, streamDeploymentProperties); } return new Assembler(new PageImpl<>(Collections.singletonList(stream))).toResource(stream); }
author: 'Author' }, visitType: 'Visit Type', examiner: 'Examiner', location: 'Visit Location', primaryDiagnosis: 'Primary Diagnosis',
var joinFragment = new ANSIJoinFragment(); var on = withClauseFragment ?? SqlString.Empty; //Note: filters logic commented due to following issues //1) Original code is non functional as SqlString is immutable and so all Append results are lost. Correct code would look like: on = on.Append(filters); //2) Also it seems GetOnCondition always returns empty string for entity join (as IsReferenceToPrimaryKey is always true). //   So if filters for entity join really make sense we need to inline GetOnCondition part that retrieves filters //			var filters = _entityType.GetOnCondition(_tableAlias, Factory, enabledFilters); //			if (!string.IsNullOrEmpty(filters)) //			{ //				on.Append(" and ").Append(filters); //			} joinFragment.AddJoin(_tableName, _tableAlias, Array.Empty<string>(), Array.Empty<string>(), _joinType, on); return joinFragment;
return "", fmt.Errorf("error getting Kubernetes Service Account: %w", err) } else if email := kServiceAccount.Annotations[resources.WorkloadIdentityKey]; email != "" { // Check if email is a valid google service account email. if match := emailRegexp.FindString(email); match == "" { return "", fmt.Errorf("%s is not a valid Google Service Account as the value of Kubernetes Service Account %s for annotation %s", email, args.ServiceAccountName, resources.WorkloadIdentityKey) }
}); }); it('handles compat mode', async () => { const { code, metadata } = await compile( fixturePath('class_and_template/class_and_template.js'), {
type Interface interface { GetPutter Overlays() ([]swarm.Address, error) Multiaddresses() ([]ma.Multiaddr, error) } type GetPutter interface {
// NodeConfig represents the configuration settings to apply to a single node running on a host type NodeConfig struct { Name               string `json:",omitempty"` Wallets            []NodeWalletData NetAddress         string `json:",omitempty"` APIEndpoint        string `json:",omitempty"`
elif (num_first_testcase_hangs == self.MAX_FIRST_HANGS_WITH_DEFERRED_FORKSERVER): environment.set_value(constants.DONT_DEFER_ENV_VAR, 1) print('Instructing AFL not to defer forkserver.\nIf this fixes the ' 'fuzzer, you should add this to the .options file:\n' '[env]\n'
}) }) Context("defined with a collection identifier", func() { var col *MediaTypeDefinition BeforeEach(func() { dslengine.Reset()
size_t offset = 0; UA_Connection *c = UA_NULL; UA_SecureChannel *sc = session->channel; if(sc) // FIXME: sc does not exist c = session->sc; if(!c) { response->responseHeader.serviceResult = UA_STATUSCODE_BADINTERNALERROR; return; }
out_shape, inds, device='cpu', interpolation='bilinear', binarize=True): """See :func:`BaseInstanceMasks.crop_and_resize`.""" if len(self.masks) == 0: empty_masks = np.empty((0, *out_shape), dtype=np.uint8)
const static iroha::protocol::GrantablePermission invalid_grantable_permission = static_cast<iroha::protocol::GrantablePermission>(-1); iroha::protocol::Transaction generateCreateRoleTransaction( iroha::protocol::RolePermission permission) { auto tx = iroha::protocol::Transaction(); auto cr = tx.mutable_payload() ->mutable_reduced_payload()
before do metadata = {:shared_group_name => 'double shared group'} allow(example).to receive(:example_group) { class_double(RSpec::Core::ExampleGroup, :metadata => metadata, :parent_groups => [], :location => "#{__FILE__}:#{__LINE__}") } end it 'should return failure_lines without color' do
*/ public function parseSetting($current) { // TODO: replace this method with a deprecation warning when all configs // have been converted to arrays $parts = explode(':', $current); // Special case: don't explode URLs: if (($parts[0] === 'http' || $parts[0] === 'https')
public void startLdapServer() throws Exception { UnboundIdContainer server = new UnboundIdContainer( validRootDn, validLdifClassPath); createAndRunServer(server); }
// rule //   #Ceil(MapItem(K1, K2, ..., Kn) Rest:Map) // => //  {(@K1 in_keys(@Rest)) #Equals false} #And #Ceil(@K2) #And ... #And #Ceil(@Kn) // Note: The {_ in_keys(_) #Equals false} condition implies // #Ceil(@K1) and #Ceil(@Rest). // [anywhere, simplification]
(u'negative_probability', u'subnormal_probability') ) def __init__(self, allow_nan=True, allow_infinity=True): super(FullRangeFloats, self).__init__() self.allow_nan = allow_nan self.allow_infinity = allow_infinity def draw_parameter(self, random): return self.Parameter(
<div className={className}> <Icon src={LoaderIcon} size={64} classes={{ icon: classes.indicator }} /> <span className={classes.message}>{props.children}</span>
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4421-SEA 1645541457 1505623368</p> <hr> <p>Varnish cache server</p> </body>
* @return <tt>true</tt>, if one address belongs to a contact. *         <tt>false</tt>, otherwise. */ public boolean isAnyInContacts(final Address[] addresses) { if (addresses == null) { return false; }
from networkx.algorithms.assortativity import * from networkx.algorithms.block import * from networkx.algorithms.boundary import *
uint8_t protocol_version = 0; uint16_t fragment_length = 0; /* First two bytes are the fragment length */ uint8_t header_bytes[] = { 0x00, 0x00, 0x00, 0x00, 0x00 }; EXPECT_SUCCESS(s2n_stuffer_write_bytes(&conn->header_in, header_bytes, sizeof(header_bytes))); EXPECT_FAILURE_WITH_ERRNO(s2n_sslv2_record_header_parse(conn, &record_type, &protocol_version, &fragment_length), S2N_ERR_SAFETY);  /* Check the rest of the stuffer has not been read yet */ EXPECT_EQUAL(s2n_stuffer_data_available(&conn->header_in), 3); } EXPECT_SUCCESS(s2n_hmac_free(&check_mac));
use App\Services\LdapAd; use Illuminate\Http\Request; use Illuminate\Support\Facades\Artisan; use App\Models\User; // Note that this is awful close to 'Users' the namespace above; be careful class LDAPImportController extends Controller {
public class TimeOfDayResolutionResult { public string Timex { get; set; }  public int BeginHour { get; set; } public int EndHour { get; set; }
} func mergeMaps(new map[string]string, old map[string]string) map[string]string { if old == nil { old = make(map[string]string, len(new)) } for k, v := range new { old[k] = v }
h.handler.ServeHTTP(rww, r.WithContext(ctx)) setAfterServeAttributes(span, bw.read, rww.written, rww.statusCode, bw.err, rww.err) span.SetStatus(standard.SpanStatusFromHTTPStatusCode(rww.statusCode)) } func setAfterServeAttributes(span trace.Span, read, wrote int64, statusCode int, rerr, werr error) {
require 'rails_helper' describe Section do subject(:section) { Section.new( :title => "test section", :title_url => "testsection.url.com",
Color fg = g->state==gs_disabled?g->box->disabled_foreground: g->box->main_foreground==COLOR_DEFAULT?GDrawGetDefaultForeground(GDrawGetDisplayOfWindow(pixmap)): g->box->main_foreground; for (c=0, i=0; c<=6; c++, i++) { angle=(30+c/6.*120)*M_PI/180; pts[i].x=.5*w*cos(angle)+x+w/2; pts[i].y=.5*h*sin(angle)+y+h/4; /* draw lashes */ if (i>0 && i<6) GDrawDrawLine(pixmap, pts[i].x,pts[i].y, .75*w*cos(angle)+x+w/2, .75*h*sin(angle)+y+h/4, fg); } GDrawDrawPoly(pixmap, pts, i, fg); }
RegisterModel(Culture.English, options.ToString(), new Dictionary<Type, IModel> { [typeof(PhoneNumberModel)] = new PhoneNumberModel(new PhoneNumberParser(), new PhoneNumberExtractor()), [typeof(IpAddressModel)] = new IpAddressModel(new IpParser(), new IpExtractor()) }); }
if fuzz_target: engine_impl = engine.get(fuzz_target.engine) if not engine_impl: raise RuntimeError('Could not find engine ' + engine_impl.name) self._is_black_box = False self._engine_impl = engine_impl
batch_id=get_work_response['batch_id'], ) return task.task_id else: return None def _get_work(self): if self._stop_requesting_work: return GetWorkResponse(None, 0, 0, 0, 0, WORKER_STATE_DISABLED) if self.worker_processes > 0: logger.debug("Asking scheduler for work...")
return false; } // URLs are always considered to be case-sensitive (https://www.hl7.org/fhir/references.html#literal) return string.Equals(ToString(), uriSearchValueOther.ToString(), StringComparison.Ordinal); } /// <inheritdoc />
to: redirect('/paths/full-stack-ruby-on-rails/courses/ruby-on-rails/lessons/%{id}') # redirect old js pathroutes get '/courses/nodejs', to: redirect('/paths/full-stack-javascript/courses/nodejs') get '/courses/nodejs/lessons/:id', to: redirect('/paths/full-stack-javascript/courses/nodejs/lessons/%{id}') # redirect old shared course routes to rails path if the user is on that path authenticated :user, ->(user) { user.path.title == 'Full Stack Ruby on Rails' } do
}); @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) { View rootView = inflater.inflate(R.layout.fragment_browse_image, container, false); boolean currentThemeIsDark = PreferenceManager.getDefaultSharedPreferences(getContext()).getBoolean("theme", false); ButterKnife.bind(this, rootView); categoryName = getArguments().getString("categoryName"); isParentCategory = getArguments().getBoolean("isParentCategory");
} const { products } = data; const { filters, total_count, items } = products; if (items.length === 0) { return <div className={classes.noResult}>No results found!</div>;
import torch  from .registry import IOU_CALCULATOR
display_name=None, parent=None, lifecycle_state=BucketLifecycleState.UNSPECIFIED, retentions=None): """Initialize. Args:
apply(t, [&account_ids, &asset_ids, &balances]( auto &account_id, auto &asset_id, auto &amount) { account_ids.push_back(std::move(account_id)); asset_ids.push_back(std::move(asset_id)); balances.push_back( shared_model::interface::Amount(amount)); });
} // processAuthenticatedMessage processes a message and a source (indicated by its peer ID) and eventually passes it to the overlay // In particular, it populates the `OriginID` field of the message with a Flow ID translated from this source. // The assumption is that the message has been authenticated at the network level (libp2p) to originate from the peer with ID `peerID` // this requirement is fulfilled by e.g. the output of readConnection and readSubscription func (m *Middleware) processAuthenticatedMessage(msg *message.Message, peerID peer.ID) {
Thread.Sleep(1000); // Leave a small gap in the timestamp var before = DateTime.UtcNow; var sinceUriString = HttpUtility.UrlEncode(since.ToString("o")); var beforeUriString = HttpUtility.UrlEncode(before.ToString("o")); bool historyHas10Entries = false; // wait for above values to be represented in history results for (int i = 0; i < 5; i++) { FhirResponse<Bundle> readResponse = Client.SearchAsync("_history?_since=" + sinceUriString).Result; if (readResponse.Resource.Entry.Count == 10)
func (o *deleteAppOpts) sourceProjectEnvironments() error { if o.EnvName != "" { env, err := o.targetEnv() if err != nil { return err } o.projectEnvironments = append(o.projectEnvironments, env) } else { envs, err := o.projectService.ListEnvironments(o.ProjectName())
BACKBONES = Registry('backbone') NECKS = Registry('neck') SHARED_HEADS = Registry('shared_head') ROI_EXTRACTORS = Registry('roi_extractor') HEADS = Registry('head') DETECTORS = Registry('detector')
end configure do use Sentry unless Travis::Build.config.sentry_dsn.to_s.empty? use Metriks unless Travis::Build.config.librato.email.to_s.empty? || Travis::Build.config.librato.token.to_s.empty? || Travis::Build.config.librato.source.to_s.empty? use Rack::Deflater end
for _, regEntry := range fetchedRegisteredEntries { var selectors []*common.Selector var fetchedSelectors []*selector if err = ds.db.Model(&regEntry).Related(&fetchedSelectors).Error;err!=nil{ return nil,err }  for _, selector := range fetchedSelectors { selectors = append(selectors, &common.Selector{ Type:  selector.Type,
applied. """, deprecation_message=""" The timeout setting is deprecated and will be removed in a future version of Hypothesis. To get the future behaviour set ``timeout=hypothesis.unlimited`` instead (which will remain valid for a further deprecation period after this setting has gone away). """, future_default=unlimited, validator=_validate_timeout
clearUserDefinedVars(state.userDefinedVariables) try { nextState = JSON.parse(window.localStorage.getItem(action.title)) console.warn(`"${nextState.title}" is currently saved in localStorage as JSON. --- Saving as JSON is deprecated!!! --- Please take a minute open any saved notebooks you care about and resave them with ctrl+s. This will update them to jsmd.
asset.sid, dt, column ) if column == "volume": if result == 0: return 0 elif not ffill and np.isnan(result): return np.nan # we are looking for price, and didn't find one. have to go hunting. last_traded_dt = \
const ServiceAccountPrivateKeyHex = "e3a08ae3d0461cfed6d6f49bfc25fa899351c39d1bd21fdba8c87595b6c49bb4cc430201" // Pre-calculated state commitment with root account with the above private key const GenesisStateCommitmentHex = "3ddf2ee1501114a16eeefb820898f11c59de2715bfec30db2bebc7b467c2f6fa" var GenesisStateCommitment flow.StateCommitment
} exports.setCache = function (res, options) { if (config.setCache) { options = options || {}; let pub = options.private ? "private" : "public";
def remote_shutdown(self): udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) udp_sock.sendto(b"Shutdown", ("127.0.0.1", self.management_port)) self.log.debug("Shutdown command sent") time.sleep(10) udp_sock.sendto(b"StopTestNow", ("127.0.0.1", self.management_port)) self.log.debug("StopTestNow command sent") @staticmethod
if (dup (pipe_stdin[0]) < 0) { ELEKTRA_SET_ERROR (ELEKTRA_ERROR_CRYPTO_GPG, errorKey, "failed to redirect stdin."); exit (42); } } close (pipe_stdin[0]);
cls: Type[NameT], name: Union[SchemaName, str], module: Optional[str] = None, ) -> NameT: if not name: raise NameError('name must not be empty')
</div> )} {sortedRewards.length > 0 && ( <table> <thead> <tr>
// when we insert verbiage on top of terraform. c := exec.CommandContext(ctx, "terraform", "apply") c.Dir = biomePath c.Stdin = pctx.stdin c.Stdout = pctx.stdout c.Stderr = pctx.stderr if err := c.Run(); err != nil {
case HEROFL04: case HEROFL05: case HEROFL06: return ticket % 5; case TWNBDOCK: case TWNKDOCK:
public const string NextPrefixRegex = @"(pr[oó]xim[oa]|siguiente)\b"; public const string PastPrefixRegex = @"([uú]ltim[oa])\b"; public const string ThisPrefixRegex = @"(est[ea])\b"; public const string RelativeDayRegex = @"^[\.]"; public const string RestOfDateRegex = @"^[\.]"; public const string RelativeDurationUnitRegex = @"^[\.]"; public const string FromToRegex = @"\b(from).+(to)\b.+"; public const string SingleAmbiguousMonthRegex = @"^(the\s+)?(may|march)$";
assert_text "コメント（\n2\n）" end test 'watching is automatically displayed when admin create new announcement' do visit_with_auth new_announcement_path, 'komagata' fill_in 'announcement[title]', with: 'Watch中になるかのテスト'
Command::Repo::Add.new(CLAide::ARGV.new([name, url])).run source = source_with_url(url) end unless source raise Informative, "Unable to add a source with url `#{url}` named " \ "`#{name}`.\nYou can add it manually via `pod repo add NAME " \ "#{url}`.\n\n#{output}" end source end
fbo.mdWriterLock.Lock(lState) defer fbo.mdWriterLock.Unlock(lState) fbo.fbm.archiveUnrefBlocks(rmd.ReadOnly()) }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4476-SEA 1645549161 1913411145</p> <hr> <p>Varnish cache server</p> </body>
if not isinstance(self._client_stat, ClientStatistic): raise RuntimeError("Bad Statistic obj") random.seed() self._data_file = None if file_name is not None: self._data_file = open(check_fs(is_dir=False, fs_name=file_name), "rt") # Copied from Plenum def random_string(self, sz: int) -> str:
} return u.Path, nil }
// Result type can't be an interface type; use wire.InterfaceValue for that. argType := info.TypeOf(call.Args[0]) if _, isInterfaceType := argType.Underlying().(*types.Interface); isInterfaceType { return nil, notePosition(fset.Position(call.Pos()), fmt.Errorf("argument to Value may not be an interface value (found %s); use InterfaceValue instead", types.TypeString(argType, nil))) } return &Value{ Pos:  call.Args[0].Pos(),
inds = torch.nonzero(labels >= 1).squeeze() if inds.numel() > 0: bin_labels[inds, labels[inds] - 1] = 1 bin_label_weights = label_weights.view(-1, 1).expand(label_weights.size(0), label_channels) return bin_labels, bin_label_weights
getProcessor(inputProtocol, outputProtocol, client), inputProtocol, outputProtocol, eventHandler_, client)); threadManager_->add( boost::make_shared<TConnectedClient>( "TThreadPoolServer", getProcessor(inputProtocol, outputProtocol, client), inputProtocol, outputProtocol, eventHandler_, client), timeout_, taskExpiration_); } catch (TTransportException& ttx) { if (inputTransport) {
import net.pms.formats.Format; import net.pms.formats.v2.SubtitleType; import net.pms.image.ImageFormat; import net.pms.image.ImagesUtil; import net.pms.image.ImagesUtil.ScaleType; import net.pms.util.FileUtil;
root.debug("Already set up logging") setup_test_logging() logging.info("Bootstrapped test")
public function getMediaTypes(): Collection { return collect($this->get('general/accept_media_types')); } }
/// Fetch the entity and its lazy properties. /// </summary> FetchLazyProperties, /// <summary> /// Only identifier columns are added to select statement. Use it for fetching child objects for already loaded
} func (u *staticUpstream) healthCheck() { for _, host := range u.Hosts { hostURL := host.Name + u.HealthCheck.Path if r, err := u.HealthCheck.Client.Get(hostURL); err == nil { io.Copy(ioutil.Discard, r.Body) r.Body.Close() host.Unhealthy = r.StatusCode < 200 || r.StatusCode >= 400
Node *n = client->nodebyhandle(h); if (n) { n->setpubliclink(ph, time(nullptr), ets, false); n->changed.publiclink = true; client->notifynode(n); }
return drawerLayout != null && navDrawer != null && drawerLayout.isDrawerOpen(navDrawer); } public interface AudioplayerContentFragment { public void onDataSetChanged(Playable media); }
return fmt.Errorf("%s: %s\n", strings.TrimSpace(string(out)), err.Error()) } defer func() { if err := os.Remove(file); err != nil { log.Error(err) } }()  stat, err := os.Stat(file) if err != nil { log.Error(err)
"com.palantir.baseline:baseline-error-prone:" + version); project.getDependencies().add( "refasterCompiler", "com.palantir.baseline:baseline-refaster-javac-plugin:" + version); Provider<File> refasterRulesFile = project.getLayout().getBuildDirectory() .file("refaster/rules.refaster") .map(RegularFile::getAsFile); Task compileRefaster = project.getTasks().create("compileRefaster", RefasterCompileTask.class, task -> { task.setSource(refasterSources);
import java.io.IOException; import java.io.InputStream; import java.lang.reflect.Constructor; import java.util.Arrays; import java.util.List; import java.util.Map; import java.util.function.Function; import static com.hazelcast.jet.Traversers.traverseIterable; import static com.hazelcast.jet.hadoop.HdfsSources.COPY_ON_READ; import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow; import static java.util.Collections.emptyList; import static java.util.stream.Collectors.toList;
return nil } final := e.state.Final()  // don't propagate collection guarantees if we are not currently staked staked, err := protocol.IsNodeStakedAt(final, e.me.NodeID()) if err != nil { return fmt.Errorf("could not check my staked status: %w", err) }
def init_stylesheet(self, css_file="green.css"): """Initialize the stylesheet with a provided css file.""" css_path = pathlib.Path(__file__).parent / css_file self.config_stub.val.content.user_stylesheets = str(css_path) def set_css(self, css): """Set document style to `css` via stylesheet.js."""
movefileWriteThrough    = 0x8 ) // AtomicWriteFile writes data out.  It writes to a temp file first, fsyncs that file, // then swaps the file in. Rename file using a custom MoveFileEx that uses 'MOVEFILE_WRITE_THROUGH' witch waits until // file is synced to disk.
Stage stageOne = (Stage) cmmnModel.getPrimaryCase().getPlanModel().findPlanItemDefinitionInStageOrDownwards("stageOne"); List<PlanItem> planItems1 = stageOne.getPlanItems(); assertThat(planItems1).hasSize(1); PlanItem planItem = planItems1.get(0); assertThat(planItem.getItemControl()).isNotNull(); assertThat(planItem.getItemControl().getParentCompletionRule()).isNotNull(); assertThat(planItem.getItemControl().getParentCompletionRule().getType()).isEqualTo(ParentCompletionRule.IGNORE_AFTER_FIRST_COMPLETION); } }
const id = match; if (!id) { console.error( 'Run yarn fix-headings to generate headings.' ); process.exit(1); }
h.tableName = n } func allocHost() *Host { return &Host{ Host: &store.Host{}, } }
if !allPorts { for _, npProtocolPort := range egressRule.Ports { if _, err := strconv.Atoi(port(npProtocolPort.Port)); err != nil { return nil, nil, nil, nil, fmt.Errorf("named ports in network policies is not supported yet. "+ "Rejecting network policy: %s with named port: %s from further processing ", policy.Name, port(npProtocolPort.Port)) } } }
return v } // Validate runs the validations defined on AddRequestBody. func (body *AddRequestBody) Validate() (err error) { if body.Name == nil { err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
import org.flowable.bpmn.converter.export.FieldExtensionExport; import org.flowable.bpmn.converter.export.MapExceptionExport; import org.flowable.bpmn.converter.util.BpmnXMLUtil; import org.flowable.bpmn.model.AbstractFlowableHttpHandler; import org.flowable.bpmn.model.BaseElement; import org.flowable.bpmn.model.BpmnModel; import org.flowable.bpmn.model.CaseServiceTask; import org.flowable.bpmn.model.CustomProperty; import org.flowable.bpmn.model.HttpServiceTask; import org.flowable.bpmn.model.ImplementationType; import org.flowable.bpmn.model.ServiceTask; import javax.xml.stream.XMLStreamReader; import javax.xml.stream.XMLStreamWriter;
blobService.deleteContainer(containerName, function(){done();}); }); it('should upload a basic file to azure storage', function(done) { var buf = new Buffer('HelloWord', 'utf8'); var fileName = 'hello.tmp.txt'; var fd = fs.openSync(fileName, 'w');
images, bb, labels = self.input(name="Reader") return self.base_define_graph(images, labels, bb) test_data = { COCOReaderPipeline: [["/data/coco/coco-2017/coco2017/train2017", "/data/coco/coco-2017/coco2017/annotations/instances_train2017.json"], ["/data/coco/coco-2017/coco2017/val2017", "/data/coco/coco-2017/coco2017/annotations/instances_val2017.json"]] }
sql << queries.second; } template <typename QueryArgsCallable> iroha::expected::Error<iroha::ametsuchi::CommandError> makeCommandError( std::string &&command_name, const iroha::ametsuchi::CommandError::ErrorCodeType code, QueryArgsCallable &&query_args) noexcept { return iroha::expected::makeError(iroha::ametsuchi::CommandError{ std::move(command_name), code, query_args()}); }
func RenameColumn(ctx context.Context, commandStr string, args []string, dEnv *env.DoltEnv) int { ap := argparser.NewArgParser() ap.ArgListHelp["table"] = "table being modified." help, usage := cli.HelpAndUsagePrinters(commandStr, schRenameColShortDesc, schRenameColLongDesc, schRenameColSynopsis, ap) apr := cli.ParseArgs(ap, args, help)
CoinAccessor::CoinAccessor(const CCoinsViewCache &view, const uint256 &txid) : cache(&view), lock(cache->csCacheInsert) { EnterCritical("CCoinsViewCache.cs_utxo", __FILE__, __LINE__, (void *)(&cache->cs_utxo)); cache->cs_utxo.lock_shared(); COutPoint iter(txid, 0); coin = &emptyCoin; while (iter.n < nMaxOutputsPerBlock)
h[:], edges[:] = np.histogramdd(coord, bins=bins, range=arange, normed=False) grid += h  # accumulate average histogram  n_frames = len(range(start, stop, step)) grid /= float(n_frames)
public class Quotes { /** * Convert strings with both quotes and ticks into a valid xpath component "concat(...)" * * For example, foo'"bar will be converted to concat("foo'", '"', "bar") * * @param toEscape a text to escape quotes in, e.g. "f'oo" * @return the same text with escaped quoted, e.g. "\"f'oo\""
avg(t.average_exec_per_sec) as avg_exec_per_sec, avg(t.fuzzing_time_percent) as fuzzing_time_percent, sum(t.new_units_added) as new_tests_added, sum(t.new_features) as new_features, avg(t.crash_count*100) as regular_crash_percent, avg(t.oom_count*100) as oom_percent, avg(t.leak_count*100) as leak_percent,
var result = await pipe.Reader.ReadAsync(); var input = result.Buffer; if (input.Length == 0) break; // We are able to cast because test arguments are in range of int Assert.True(input.EqualsTo(new Span<byte>(data, (int) offset, (int) input.Length))); offset += input.Length; pipe.Advance(input.End);
private BrowserResponse HandleRequest(string method, string path, Action<BrowserContext> browserContext) { var url = Uri.IsWellFormedUriString(path, UriKind.Absolute) ? (Url)new Uri(path) : new Url { Path = path }; return HandleRequest(method, url, browserContext); }
* Contact information: contact@sofa-framework.org                             * ******************************************************************************/ #include <sofa/config.h> namespace sofa {
{ if (!key || !strcmp(keyName(key), "")) return handle->defaultBackend; Backend *ret = elektraTrieLookup(handle->trie, key); if (!ret) return handle->defaultBackend; return ret;
// castle name text.set( castle.GetName(), smallWhiteFont ); dst_pt.x = cur_rt.x + ( cur_rt.width - text.width() ) / 2; dst_pt.y = cur_rt.y + 3; text.draw( dst_pt.x, dst_pt.y, display ); // castle icon
current_app.logger.error("Error while getting artist_country_codes, {}".format(err), exc_info=True) error_msg = ("An error occurred while calculating artist_map data, " "try setting 'force_recalculate' to 'false' to get a cached copy if available" "Payload: {}. Response: {}".format(request_data, result.text)) raise APIInternalServerError(error_msg) return country_codes
if email: try: ProductAlert.objects.get( product=self.product, email=email, status=ProductAlert.ACTIVE) except ProductAlert.DoesNotExist: pass else: raise forms.ValidationError(_( "There is already an active stock alert for %s") % email) elif self.user.is_authenticated(): try: ProductAlert.objects.get(product=self.product, user=self.user,
// RuleMetadata is the metadata attached to this build rule. It can be accessed through the "get_rule_metadata" BIF. RuleMetadata interface{} `name:"config"` // EntryPoints represent named binaries within the rules output that can be targeted via //package:rule|entry_point_name EntryPoints map[string]string `name:"entry_points"` } // BuildMetadata is temporary metadata that's stored around a build target - we don't
); $jump_to_form = '<form class="nv-page-nav-form" action="' . esc_url( get_pagenum_link() ) . '" method="get" autocomplete="off"> <input class="page-input" type="number" min="1" step="1" value="' . absint( $current_page ) . '" placeholder="1" size="3" name="paged" /> ' . wp_kses( $has_id . $has_search, $allowed_tags ) . ' <input value="»" type="submit" > </form>'; $links = str_replace(
"`Learner` support for computer vision" from ..torch_core import * from ..basic_train import *
#include <algorithm>  // for std::swap #include <array>      // for std::array #include <cassert>    // for assertions #include <iostream>   // for io operations /**
dofs->resize(nbrDofs); /// Add PointSetTopology auto tCon = sofa::core::objectmodel::New<sofa::component::topology::PointSetTopologyContainer>(); auto tMod = sofa::core::objectmodel::New<sofa::component::topology::PointSetTopologyModifier>(); tCon->setNbPoints(nbrDofs); node->addObject(tCon); node->addObject(tMod);
trailingPunctRegExp = regexp.MustCompile(`[\-\.]$`)            // Check for trailing dash or dot. ) // Options for SQS Queues. var ( resourceNameFormat      = "%s-%s-%s-%s" // Format for copilot resource names of form app-env-svc-name deadLetterTriesMaxValue = 1000
async_call_->log_->info( "Receive votes[size={}] from {}", state.size(), context->peer()); if (auto notifications = handler_.lock()) { notifications->onState(std::move(state)); } else { async_call_->log_->error("Unable to lock the subscriber"); } return grpc::Status::OK; }
void testStateChangesBetweenIntegration() { cout << "Running testStateChangesBetweenIntegration" << endl;  using SimTK::Vec3; Model model;
/** * @return string */ abstract protected function getBranchName(): string; /** * @param \PharIo\Version\Version $version
elsif cluster.sharded? near_servers(cluster.servers).each { |server| validate_max_staleness_support!(server) } else validate_max_staleness_value!(cluster) unless cluster.unknown? select(cluster.servers) end end
else: cmd = "pw useradd {0} -m".format(username) if comment is not None: cmd += " -c {0}".format(comment) retcode, out = shellutil.run_get_output(cmd) if retcode != 0: raise OSUtilError(("Failed to create user account:{0}, "
func (config *Configuration) ShouldLinkGeneratedSources() bool { isTruthy, _ := gcfgtypes.ParseBool(config.Build.LinkGeneratedSources) return config.Build.LinkGeneratedSources == "hard" || config.Build.LinkGeneratedSources == "soft" || isTruthy } func (config Configuration) copyConfig() *Configuration {
) // Function called during Agent start up to expose metrics on a local endpoint func PublishMetrics() { if MetricsEngineGlobal.collection { MetricsEngineGlobal.publishMetrics() MetricsEngineGlobal.collection = true }
def _enable_amqheartbeats(timer, connection, rate=2.0): heartbeat_error = None if not connection: return heartbeat_error
LOG.fine("Adding host: " + host.asSummary()); hosts.add(host); LOG.info(String.format("Added node %s.", node.getId().toString())); host.runHealthCheck(); Runnable runnable = host::runHealthCheck;
char* aws_secret_access_key; char* aws_region; char* aws_email; char* env_prefix; }initialized_data; static unsigned int gen_guid(){
private final AuthenticationManagerResolver<String> issuerAuthenticationManagerResolver; private Converter<HttpServletRequest, String> issuerConverter; /** * Construct a {@link JwtIssuerAuthenticationManagerResolver} using the provided
self, type1, type2) def py_operation_function(self, code): language_level = code.globalstate.directives['language_level'] or '3str' unicode_types = ((unicode_type,) if language_level in ('2', '3str') else (unicode_type, str_type)) type1, type2 = self.operand1.type, self.operand2.type is_unicode_concat = type1 in unicode_types and type2 in unicode_types if is_unicode_concat: if self.operand1.may_be_none() or self.operand2.may_be_none():
} // parseCaddyfileURI sets up a handler for manipulating (but not "rewriting") the // URI from Caddyfile tokens. Syntax: // //     uri [<matcher>] strip_prefix|strip_suffix|replace <target> [<replacement> [<limit>]] //
// TODO(liu-cong) configurable timeout decoupleSinkTimeout = 30 * time.Second // Limit for request payload in bytes (10Mb -- corresponds to message size limit on PubSub as of 09/2020) maxRequestBodyBytes = 10000000 // EventArrivalTime is used to access the metadata stored on a // CloudEvent to measure the time difference between when an event is
videoAudioCodecs.push('mp2'); } let supportsDts = browser.tizen || options.supportsDts || videoTestElement.canPlayType('video/mp4; codecs="dts-"').replace(/no/, '') || videoTestElement.canPlayType('video/mp4; codecs="dts+"').replace(/no/, ''); // DTS audio not supported in 2018 models (Tizen 4.0) if (browser.tizenVersion >= 4) {
expect_node_error(Bolt::Node::ConnectError, 'CONNECT_ERROR', /Failed to connect to/) do ssh.with_connection(make_target(h: hostname, p: 65535)) {} end exec_time = Time.now - exec_time expect(exec_time).to be < 1
learn.fit(cyc_len, max_lr, wd=wd, callbacks=callbacks) def fit_fc(learn:Learner, tot_epochs:int=None, lr:float=defaults.lr,  moms:Tuple[float,float]=(0.95,0.85), start_pct:float=0.72, callbacks:Optional[CallbackList]=None)->None: "Fit a model with Flat Cosine Annealing" max_lr = learn.lr_range(lr) callbacks = listify(callbacks)
reconnectOften = !config.memory && config.big; testScript("testScript.sql"); testScript("comments.sql"); testScript("derived-column-names.sql"); testScript("dual.sql"); testScript("indexes.sql");
$services = parent::getSubscribedServices(); $services['contao.picker.builder'] = PickerBuilderInterface::class; $services['uri_signer'] = 'uri_signer'; // FIXME: adjust this once https://github.com/symfony/symfony/pull/35298 has been merged return $services; }
spinner progress sel     wsSelector } func newJobDeployOpts(vars deployJobVars) (*deployJobOpts, error) {
// FilterMonitorFunc is default monitor filter when admin module is enable. // if this func returns, admin module records qbs for this request by condition of this function logic. // usage: // 	func MyFilterMonitor(method, requestPath string, t time.Duration, pattern string, statusCode int) bool { //	 	if method == "POST" { //			return false //	 	}
StoredTabletFile metaFile = null; long startTime = System.currentTimeMillis(); // create an empty stats object to be populated by CompactableUtils.compact() CompactionStats stats = new CompactionStats(); try {
return false; } const struct wlr_gles2_pixel_format *fmt = get_gles2_format_from_wl(texture->wl_format); assert(fmt); // TODO: what if the unpack subimage extension isn't supported?
* @author Shane Bryzak * */ @RequestScoped @Named public class LoginAction { @Inject Identity identity;
Filters:     instanceFilters, }) if err != nil { return status.Errorf(codes.Internal, "failed to describe instance: %v", err) } // Ideally we wouldn't do this work at all if the agent has already attested
init_dist(args.launcher, **cfg.dist_params) # build the dataloader samples_per_gpu = 1 if 'samples_per_gpu' in cfg.data.test: samples_per_gpu = cfg.data.test.pop('samples_per_gpu')
return s->lookup(xs_); } caf::expected<segment_store_ptr> segment_store::make(std::filesystem::path dir, size_t max_segment_size, size_t in_memory_segments) {
return joinClause; } @Nonnull @SuppressWarnings("unchecked") public <T, T1, R> DistributedBiFunction<?, ? super T1, ?> adaptHashJoinOutputFn( @Nonnull DistributedBiFunction<? super T, ? super T1, ? extends R> mapToOutputFn
assert self._tempdir is not None    # for mypy modified_src = self._tempdir / src.name shutil.copy(str(REPO_ROOT / 'www' / 'header.asciidoc'), modified_src) outfp = io.StringIO()
std::string readData; detail::loggerStatus(detail::db->Get(leveldb::ReadOptions(), key, &readData)); if (!readData.empty()) { return readData; } else { return "";
Group.url: '[src], [href]', Group.prevnext: 'a, area, button, link, [role=button]', Group.focus: '*:focus', Group.inputs: ('input[type=text], input[type=email], input[type=url], ' 'input[type=tel], input[type=number], input[type=password], ' 'input[type=search], textarea'), }
package com.hazelcast.jet.elasticsearch; import com.hazelcast.jet.JetInstance; import com.hazelcast.jet.JetTestInstanceFactory; import com.hazelcast.jet.config.JetConfig; import org.junit.After; /**
return; } // call method using named method arguments. If bundle is null, the null-check makes sure that Init still is called. var invokeWith = bundle?.CreateArgumentList(parameters, viewModel.GetType().Name) .ToArray(); methodInfo.Invoke(viewModel, invokeWith);
auto before = maybe_parse(caf::get_if<std::string>(&options, "explore.before")); auto after = maybe_parse(caf::get_if<std::string>(&options, "explore.after")); auto by = to_std(caf::get_if<std::string>(&options, "explore.by")); explorer_state::event_limits limits; limits.total = caf::get_or(options, "explore.max-events", defaults::explore::max_events); limits.per_result = caf::get_or(options, "explore.max-events-context", defaults::explore::max_events_context); return self->spawn(explorer, self, limits, before, after, by); }
let js = `${ruleOptions.postMessageSyntax}(${JSON.stringify(href)}); return false;`; if (hrefAttr.indexOf('#') === 0 && href.indexOf('#') === 0) js = ''; // If it's an internal anchor, don't add any JS since the webview is going to handle navigating to the right place return `<a data-from-md ${resourceIdAttr} title='${htmlentities(title)}' href='${hrefAttr}' onclick='${js}' type='${htmlentities(mime)}'>${icon}`; }; }
return readOnlyGroups; } public Optional<Boolean> getBounceAfterScale() { return bounceAfterScale; } @Override
} else { syncs.removeSelectedSyncs([](SyncConfig&, Sync* s) { return s != nullptr; }); syncs.truncate(); }
def __init__(self, elements): SearchStrategy.__init__(self) self.elements = d.check_sample(elements, 'sampled_from') assert self.elements def calc_has_reusable_values(self, recur):
@property def _pubsub(self): if getattr(self._thread, "_pubsub", None) is None: self._thread._pubsub = self.backend._create_client( **self.backend.connparams ).pubsub(ignore_subscribe_messages=True)  return self._thread._pubsub @_pubsub.setter def _pubsub(self, value):
try (JarFile jarFile = new JarFile(jar)) { if (StringUtil.isNullOrEmpty(mainClass)) { if (jarFile.getManifest() == null) { error("No manifest file in " + jar + ". The -c option can be used to provide a main class."); } mainClass = jarFile.getManifest().getMainAttributes().getValue("Main-Class"); if (mainClass == null) { error("No Main-Class found in manifest. The -c option can be used to provide a main class."); } }
mockError := errors.New("mockError") mockManifest := []byte(`name: appA type: 'Load Balanced Web Service' image: build: appA/Dockerfile `)
try (Writer w = Util.printWriter(logFile)) { write(doc, w, indent); } } catch (IOException e) { throw Util.throwAsRuntime("error while writing test reference log '" + logFile + "'", e);
view_name = "Unknown Image" return view_name, base.format_dict(multidict.MultiDict(image_metadata)) def render_priority(self, data: bytes, *, content_type: Optional[str] = None, **metadata) -> float: return float( content_type and content_type.startswith("image/") and content_type != "image/svg+xml" )
using namespace iroha::network; using namespace shared_model::crypto; using namespace shared_model::interface; namespace { const char *kPeerNotFound = "Cannot find peer";
d := c.config.AllSettings() ym, err := yaml.Marshal(d) if err != nil { return err } cmd.Println(string(ym)) return nil
} @Ignore @Test @Ignore // TODO FINERACT-852 public void testSavingsAccount_DormancyTracking() throws InterruptedException { this.savingsAccountHelper = new SavingsAccountHelper(this.requestSpec, this.responseSpec);
} ViewingLayerPtr Layer::get_parent_layer_pointer(size_t index) const { if (index >= m_parent_layers.size()) { LBANN_ERROR( "attempted to get pointer to parent ",index," of ", get_type()," layer \"",get_name(),"\", ",
deleteNode = true; } std::thread thread([this, deleteNode, node]() { LocalPath path; if (transfer->getParentPath()) {
blacklist ${PATH}/roxterm blacklist ${PATH}/roxterm-config blacklist ${PATH}/terminix blacklist ${PATH}/urxvtc blacklist ${PATH}/urxvtcd
return false, err } if n == 0 { return false, fmt.Errorf("commit %s is missing from the commit history of at least one rebase head", sh) } return true, nil
MystAddress:        "0x4Cf89ca06ad997bC732Dc876ed2A7F26a9E7f361", EtherClientRPC: []string{ "https://ethereum1.mysterium.network/", "https://cloudflare-eth.com/", }, }, Chain2: ChainDefinition{
[Fact] [Trait(Traits.Priority, Priority.One)] public async Task GivenATransactionBundleReferencesInResourceBody_WhenSuccessfulExecution_ReferencesAreResolvedCorrectlyAsync() { var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry");
if not mapping_uuid: return jsonify({}) function_name = data.get('FunctionName') or '' enabled = data.get('Enabled', True) batch_size = data.get('BatchSize') or 100 mapping = update_event_source(mapping_uuid, function_name, enabled, batch_size) return jsonify(mapping)
/** * Copyright (c) 2013-present, Facebook, Inc. * * @emails react-core * @flow */  import React from 'react'; import {Link} from 'gatsby';
} } void launchKernel(float* C, float* A, float* B, bool manual){ hipDeviceProp_t devProp; HIP_CHECK(hipGetDeviceProperties(&devProp, 0));
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4439-SEA 1645542011 3077614076</p> <hr> <p>Varnish cache server</p> </body>
or "REPORT" in raw_message # necessary until tail is updated in docker images. See this PR: # http://git.savannah.gnu.org/gitweb/?p=coreutils.git;a=commitdiff;h=v8.24-111-g1118f32 or "tail: unrecognized file system type" in raw_message or regex_filter and not re.search(regex_filter, raw_message) ):
// Use the transport to make a new CloudEvents client. return cloudevents.NewClient(t) }
class Coin(object): def __init__(self, p): self.probability = p assert 0 < p < 1 n_bits = 1
return } // createCycle records the cycle between startID and endID in metaData.cycle. func createCycle(g *PkgGraph, metaData *dfsData, startID, endID int64) { // Construct a cycle that starts and ends with the same node id by backtracking // from startID to endID
tc, err := NewTestConn(remoteIPAddr, remotePort, sourceIPAddr, sourcePort, protocol, time.Duration(seconds)*time.Second, sendLen, recvLen) if err != nil { tc.sendErrorResp(err) log.WithError(err).Fatal("Failed to create TestConn") } defer func() {
@pytest.mark.skipif(executable_not_found("hole"), reason="Test skipped because HOLE not found") class TestHOLE(object): @staticmethod @pytest.fixture() def H(tmpdir): # keep tempdir around for the whole lifetime of the class with tmpdir.as_cwd(): filename = PDB_HOLE H = HOLE(filename, raseed=31415) H.run() H.collect() return H
throw e; } catch (Exception e) { if (e.getCause().getClass().equals(ThriftTableOperationException.class) && (e.getMessage().equals(TableOperationsImpl.compCanceledMsg) || e.getMessage().equals(TableOperationsImpl.tableDeletedMsg))) { // acceptable } else { throw new RuntimeException(e);
self.loss_cls = build_loss(loss_cls) self.loss_bbox = build_loss(loss_bbox) self.fp16_enabled = False self._init_layers()
* * @return ElkArte\Theme\TemplateLayers instance of the class */ public static function instance($error_safe = false) { if (self::$_instance === null) {
def get_names( infos: List[List[Dict[str, Any]]] ) -> List[str]: """Get names of all parameters. Parameters
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4435-SEA 1645537652 586526013</p> <hr> <p>Varnish cache server</p> </body>
public List<RoleInfo> getRoles(String username) { List<RoleInfo> roleInfoList = roleInfoMap.get(username); if (!authConfigs.isCachingEnabled()) { Page<RoleInfo> roleInfoPage = getRolesFromDatabase(username, DEFAULT_PAGE_NO, Integer.MAX_VALUE); if (roleInfoPage != null) { roleInfoList = roleInfoPage.getPageItems();
#define IfFailRet(EXPR) do { Status = (EXPR); if(FAILED(Status)) { return (Status); } } while (0) #endif #ifdef FEATURE_PAL #define MINIDUMP_NOT_SUPPORTED()
if (length <= back.length()) { return this; } final StringBuilder sb = new StringBuilder(back).append(padding(element, length - back.length())); return new CharSeq(sb.toString()); }
} private static TomlParseResult readToml(final String filepath) throws Exception { TomlParseResult toml; try { toml = TomlConfigFileParser.loadConfigurationFromFile(filepath); } catch (Exception e) { throw new Exception( "Unable to read permissioning TOML config file : " + filepath + " " + e.getMessage()); } return toml; } }
} [Fact] public void Should_bind_multiple_Form_properties_to_list() { //Given var typeConverters = new ITypeConverter[] { new CollectionConverter(), new FallbackConverter(), }; var binder = this.GetBinder(typeConverters);
wg        sync.WaitGroup startTime time.Time } // Ping should be used as Healthcheck for Hub
""" Return Series as ndarray or ndarray-like depending on the dtype. """ return self.to_numpy() def add(self, other, level=None, fill_value=None, axis=0):  # noqa: PR01, RT01, D200 """
{ if (force->bond == NULL) error->all(FLERR,"No bond style is defined for compute bond/local"); // do initial memory allocation so that memory_usage() is correct
self.comm = comm self._force = False self._updated = False # Whether the plot should be marked as updated params = {k: v for k, v in params.items() if k in self.params()} super(DimensionedPlot, self).__init__(**params)
end def attempt_login_with_auth(authentication, path) end def create_new_authentication_for_current_user(omniauth, path)
fmt.Printf("Located Source Account: %s -> %v\n", cfg.SrcAccount, accounts[cfg.SrcAccount]) } // Only reuse existing accounts for not asset testing. // For asset testing, new participant accounts will be created since accounts are limited to 1000 assets. if cfg.NumAsset == 0 { // If we have more accounts than requested, pick the top N (not including src) if len(accounts) > int(cfg.NumPartAccounts+1) {
try { return classLoader.loadClass(mainClass); } catch (ClassNotFoundException e) { System.err.println("Cannot find or load main class: " + mainClass); throw e; } }
int backupType = static_cast<int>(request->getTotalBytes()); if (backupType < MegaApi::BACKUP_TYPE_CAMERA_UPLOADS || backupType > MegaApi::BACKUP_TYPE_MEDIA_UPLOADS) { if (isNew || (!isNew && backupType != MegaApi::BACKUP_TYPE_INVALID)) { e = API_EARGS; break; } } BackupType bType = static_cast<BackupType>(backupType);
foreach ($productsForRecalculations as $productForRecalculations) { $this->productPriceRecalculationScheduler->scheduleProductForImmediateRecalculation($productForRecalculations); $productForRecalculations->markForVisibilityRecalculation(); $this->productAvailabilityRecalculationScheduler->scheduleProductForImmediateRecalculation($productForRecalculations); }
} } else if (classType.getName().equals("org.apache.logging.slf4j.Log4jLoggerFactory")) { Log4j2Helper.addClientLogger(clientLogRoot, clientLogLevel, clientLogMaxIndex, true); } } catch (Exception e) { System.err.println(e);
securePasswordConfirmed: false, }; onSecurePasswordConfirmation = () => { this.setState(prevState => ({ securePasswordConfirmed: !prevState.securePasswordConfirmed, })); }; onSecurePasswordConfirmationChange = this.onSecurePasswordConfirmation.bind( this );
}; function resizeHandler() { if (document.contains(el)) { resizeVideo(el.querySelector('[data-apos-video-canvas]')); } else { window.removeEventListener('resize', resizeHandler); }
.inc(); } else { outboundMessagesCounter .labels( "Wire", WireMessageCodes.messageName(message.getCode()), Integer.toString(message.getCode())) .inc(); }
* @param {string} options.provider - The provider type * @param {string} options.providerToken - The access token for the given provider * @param {object} [options.userInfo] - A map containing additional data required by the provider * @param {function(error, User)} [callback] - an optional callback called with the following arguments: *   - `error` - an Error object is provided on failure *   - `user` - a valid User object on success * @return {void|Promise<User>} Returns a promise with a user if the callback was not specified */ static registerWithProvider(server, options, callback) {}
def _from_file_str_data(self, file_str): req_json = super()._from_file_str_data(file_str) return self.get_txnid_field(req_json) class RGGetEntryRevoc(RGEntryRevoc):
import ( "time" "github.com/keybase/kbfs/kbfsblock" "github.com/keybase/kbfs/kbfscrypto" "github.com/keybase/kbfs/tlf"
public ChatWindow chatWindow => ((ChatNetworkManager)FindObjectOfType<NetworkManager>()).chatWindow; public static event Action<Player, string> OnMessage;  [Command] public void CmdSend(string message) {
selection = trans_u.residues[0].atoms center_pos = selection.center_of_mass() matrix = rotation_matrix(np.deg2rad(angle), vector, center_pos) ref_u.atoms.transform(matrix) transformed = rotateby(angle, vector, ag=selection, center_of='mass')(trans) assert_array_almost_equal(transformed.positions, ref.positions, decimal=6) def test_rotateby_atomgroup_cog_pbc(rotate_universes):
import org.apache.iceberg.actions.Actions; import org.apache.iceberg.actions.RemoveOrphanFilesAction; import org.apache.iceberg.spark.procedures.SparkProcedures.ProcedureBuilder; import org.apache.spark.sql.SparkSession; import org.apache.spark.sql.catalyst.InternalRow; import org.apache.spark.sql.catalyst.util.DateTimeUtils; import org.apache.spark.sql.connector.catalog.TableCatalog;
/** * @var string * * @ORM\Column(type="binary_string", length=32, nullable=false, options={"fixed"=true}) */ protected $series; /** * @var string * * @ORM\Column(type="binary_string", length=64, nullable=false, options={"fixed"=true}) */ protected $value;
confirmButton: classes.confirmButton }; const maybeError = hasError ? ( <p className={classes.errorMessage}> <FormattedMessage id={'wishlistConfirmRemoveProductDialog.errorMessage'} defaultMessage={ 'There was an error deleting this product. Please try again later.' } /> </p> ) : null; return (
// +k8s:openapi-gen=true // +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object // +kubebuilder:subresource:status // +kubebuilder:resource:path=clusterissuers,scope=Cluster type ClusterIssuer struct {
/// <summary> /// Inserts NLog Config Variable without overriding NLog Config Variable assigned from API /// </summary> internal void InsertParsedConfigVariable(string key, Layout value) { _variables.InsertParsedConfigVariable(key, value, LogFactory.KeepVariablesOnReload); } /// <summary>
start: FloatTensorLike = 0, limit: FloatTensorLike = -1, emit_self_as_target: bool = False, vocab_freq_table: tf.lookup.KeyValueTensorInitializer = None, vocab_min_count: Optional[FloatTensorLike] = None, vocab_subsampling: Optional[FloatTensorLike] = None, corpus_size: Optional[FloatTensorLike] = None,
s3_dest = 's3://mybucket/copydir_new/' response = s3_client.copy(s3_dir, s3_dest, threads=10, part_size=copy_part_size) self._run_copy_response_test(response, expected_num=n, expected_size=(n * file_size)) for i in range(n): original_size = s3_client.get_key(s3_dir + str(i)).size
function onKeyDown(e) { // Don't submit form on enter // Real (non-emulator) Tizen does nothing on Space if (e.keyCode === 13 || (e.keyCode === 32 && browser.tizen)) { e.preventDefault(); this.checked = !this.checked;
// @formatter:off /** * Returns the type of the declared variable. The type of a declarator ID is * <ul> *   <li>1. not necessarily the same as the type written out at the *          start of the declaration, e.g. {@code int a[];}
foreach (SearchParameter searchParameter in searchParameters) { if (searchParameter.Name == SearchParameterNames.ResourceType) { // We don't index the resource type value. We just use the property on the root document.
is visible and bar is a single non-computed property, which we know will be stored as NULL in the database. """ return ( ir_set.expr is None and not ir_set.path_id.is_objtype_path() and ir_set.rptr
config = copy.deepcopy(self.engine.config) provisioning = config.get(Provisioning.PROV) self._filter_unused_modules(config, provisioning)
Args: parent: The parent to pass to QObjects which get initialized. """ _init_main_config(parent) _init_key_config(parent) _init_misc()
using namespace iroha::consensus::yac; // TODO mboldyrev 14.02.2019 IR-324 Use supermajority checker mock static const iroha::consensus::yac::ConsistencyModel kConsistencyModel = iroha::consensus::yac::ConsistencyModel::kBft;
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4462-SEA 1645547908 1735848135</p> <hr> <p>Varnish cache server</p> </body>
"""Checks and updates the necessary symbolizer options such as `external_symbolizer_path` and `symbolize_inline_frames`.""" if 'external_symbolizer_path' not in tool_options: llvm_symbolizer_path = get_llvm_symbolizer_path() if llvm_symbolizer_path: tool_options.update({ 'external_symbolizer_path': _quote_value_if_needed(llvm_symbolizer_path) }) if 'symbolize_inline_frames' not in tool_options: tool_options.update({
import ( "encoding/json" "fmt" "io/ioutil" "os" "time" ) const (
private function beacon_identify_data() { global $wp_version; $options_to_send = [ 'cache_mobile'            => 'Mobile Cache', 'do_caching_mobile_files' => 'Specific Cache for Mobile',
} // cleanUpTable delete all documents from this collection after test. func cleanUpTable(fataler interface{ Fatalf(string, ...interface{}) }, coll *docstore.Collection) { if err := coll.Query().Delete(context.Background()); err != nil { fataler.Fatalf("%+v", err) } } func forEach(ctx context.Context, iter *ds.DocumentIterator, create func() interface{}, handle func(interface{}) error) error {
pokemon.get('individual_stamina', 0) ]}) matched_pokemon.append(pokemon) continue if "player_stats" in inv_data: self.km_walked = inv_data.get("player_stats", {}).get("km_walked", 0)
* extra file descriptor, the poll(2) call is straightforward * for this use case. */ pfd_read.fd = fd + 1; pfd_read.events = POLLIN;
'create', help='Start a new inventory') create_inventory_parser.add_argument( '--import_as', metavar=('MODEL_NAME',), help='Import the inventory when complete, requires a model name') create_inventory_parser.add_argument( '--background',
mountPointDevPathMap = make(map[string]string) mountPointToFsTypeMap = make(map[string]string) mountPointToMountArgsMap = make(map[string]string) // Go through each PartitionSetting for _, partitionSetting := range config.PartitionSettings {
"}} ~~~~"; String creator = media.getCreator(); if (creator == null || creator.isEmpty()) { throw new RuntimeException("Failed to nominate for deletion"); } String creatorName = creator.replace(" (page does not exist)", ""); return pageEditClient.prependEdit(media.filename, fileDeleteString + "\n", summary)
return fmt.Errorf("get application: %w", err) } svcs, err := o.store.ListServices(o.appName) if err != nil { return err }
bool EDPServer2::createSEDPEndpoints() { // Assert that there is PDP SERVER assert(dynamic_cast<PDPServer2*>(mp_PDP)); bool created = true;  // Return code
logger.info("Starting to compile the library.") cmake_cmd = ["cmake", "../compile/"] if integrated_opencl: use_gpu = False cmake_cmd.append("-D__INTEGRATE_OPENCL=ON") if use_gpu: cmake_cmd.append("-DUSE_GPU=ON") if boost_root:
def serialize_pipeline(pipeline): try: return pipeline.serialize() except RuntimeError as e: raise RuntimeError("Error during pipeline initialization. Note that some operators " "(e.g. Python Operators) cannot be used with " "tensorflow data set API and DALIIterator.") from e  def DALIIteratorWrapper(pipeline = None, serialized_pipeline = None, sparse = [], shapes = [], dtypes = [], batch_size = -1, prefetch_queue_depth = 2, **kwargs):
err_msg = "Frechet distances did not increase after path reversal" assert_(self.frech_matrix[1,2] >= self.frech_matrix[0,1], err_msg) def test_dendrogram_produced(self): err_msg = "Dendrogram dictionary object was not produced" assert_(type(self.plot_data[1]) is dict, err_msg)
.observeOn(AndroidSchedulers.mainThread()) .subscribe(this::populatePlaces, throwable -> { Timber.d(throwable); showErrorMessage(getString(R.string.error_fetching_nearby_places)); progressBar.setVisibility(View.GONE); }); nearbyMapFragment.setBundleForUpdtes(bundle);
((lambda x, y: x ** y), "**")] def test_bool_disallowed(): error_msg = "Input[s]? to arithmetic operator `[\S]*` cannot be [a]?[ ]?boolean[s]?. Consider using bitwise operator[s]?" for kinds in unary_input_kinds: for (op, _, op_desc, _, _) in math_function_operations: yield check_raises_re, kinds, np.bool_, op, shape_small, op_desc, error_msg
* * @return string HTML content. */ private function add_used_css_to_html( string $html, UsedCSS_Row $used_css ): string { $replace = preg_replace( '#</title>#iU', '</title>' . $this->get_used_css_markup( $used_css ),
bool PosixFileSystemAccess::mkdirlocal(LocalPath& name, bool) { #ifdef USE_IOS const string nameStr = adjustBasePath(name); #else // use the existing string if it's not iOS, no need for a copy const string& nameStr = adjustBasePath(name); #endif  mode_t mode = umask(0); bool r = !mkdir(nameStr.c_str(), defaultfolderpermissions); umask(mode); if (!r)
} // LoadAppConfig allow developer to apply a config file func LoadAppConfig(adapterName string, configPath string) error { absConfigPath, err := filepath.Abs(configPath) if err != nil { return err
self.stage_type = stage_type self.scales = scales self.width = width delattr(self, 'conv2') delattr(self, self.norm2_name) def forward(self, x):
case hotstuff.VoteCollectorStatusVerifying: verifyingProc, ok := proc.(hotstuff.VerifyingVoteProcessor) if !ok { return fmt.Errorf("while processing block %v, found that VoteProcessor reports status %s but has an incompatible implementation type %T", proposal.Block.BlockID, proc.Status(), verifyingProc) } if verifyingProc.Block().BlockID != proposal.Block.BlockID { m.terminateVoteProcessing()
hashObj = computeNameSpec if len(cr.Name) >= 52 { // Pass a unique struct for hashing so that names at or longer than 52 characters // receive a unique hash. Otherwise, orders will have truncated names with colliding // hashes, possibly leading to non-renewal. hashObj = struct { CRName string            `json:"certificateRequestName"`
@SuppressWarnings("unchecked") static <T> Bucket<T> get(Type type, int numBuckets) { Preconditions.checkArgument(numBuckets > 0, "The number of bucket(s) must be larger than zero, but is %s", numBuckets); switch (type.typeId()) { case DATE:
const ( // ReconcilerName is the name of the reconciler ReconcilerName = "Deployment" // controllerAgentName is the string used by this controller to identify // itself when creating events.
credential, _ := azblob.NewSharedKeyCredential(accountName, accountKey) pipeline := azblob.NewPipeline(credential, azblob.PipelineOptions{ Telemetry: azblob.TelemetryOptions{ Value: useragent.AzureUserAgentPrefix("blob"), }, }) blobURL := makeBlobStorageURL(accountName)
gym_latitude=fort.get('latitude'), gym_longitude=fort.get('longitude')) response_gym_details = self.api.call() fort['gym_details'] = response_gym_details.get('responses', {}).get('GET_GYM_DETAILS', None) user_data_cells = "data/cells-%s.json" % (self.config.username) with open(user_data_cells, 'w') as outfile:
uint64_t nSigOps = 0; uint64_t nTx = 0;  // BU: count the number of transactions in case the CheckExcessive function wants to use this as criteria BOOST_FOREACH(const CTransaction& tx, block.vtx) { nTx++; nSigOps += GetLegacySigOpCount(tx); } if (fConservative && (nSigOps > BLOCKSTREAM_CORE_MAX_BLOCK_SIGOPS))  // BU only enforce sigops during block generation not acceptance
} from 'preact'; import { applyEventNormalization } from './events'; const CAMEL_PROPS = /^(?:accent|alignment|arabic|baseline|cap|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vector|vert|word|writing|x)[A-Z]/; // Some libraries like `react-virtualized` explicitly check for this. Component.prototype.isReactComponent = {};
if b.IsInd { numBlocks, isTail = p.prefetchIndirectFileBlock( pre.ctx, req.ptr.ID, b, req.kmd, req.lifetime, isPrefetchNew, childAction, req.priority) } else { isTail = true }
[EditorBrowsable(EditorBrowsableState.Never), Obsolete("Use InvokeHandler<T> instead")] public bool InvokeHandlerNoData(int msgType) { return InvokeHandler(msgType, null); } internal bool InvokeHandler(int msgType, NetworkReader reader) { if (messageHandlers.TryGetValue(msgType, out NetworkMessageDelegate msgDelegate)) {
) const ( externalIdSentinel = "\ufffenone" // UnknownCredentialStatus represents a credential that has an unknown
else: gt_bboxes_ignore = np.zeros((0, 4), dtype=np.float32) seg_map = img_info['filename'].rsplit(".", 1)[0]+ ".png" ann = dict( bboxes=gt_bboxes,
package org.apache.rocketmq.common.protocol.body; import org.apache.rocketmq.common.message.MessageQueue; import org.apache.rocketmq.remoting.protocol.RemotingSerializable; import org.junit.Test;
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4448-SEA 1645535463 2350060748</p> <hr> <p>Varnish cache server</p> </body>
type CardanoNodeIpcMessage = { Started?: Array<any>, ReplyPort?: number, } type NodeArgs = Array<string>;
// We don't have to look into the synopses for type queries, just // at the layout names. result_type result; for (auto& [part_id, part_syn] : synopses_) { for (auto& pair : part_syn) { // TODO: provide an overload for view of evaluate() so that // we can use string_view here. Fortunately type names are
} @pytest.mark.usefixtures("maybe_run_functions_eagerly") @pytest.mark.parametrize("dtype", _DTYPES) def test_translate(dtype):
out.writeObject(lastSnapshotFailure); out.writeObject(snapshotStats); out.writeObject(exportedSnapshotMapName); out.writeObject(suspensionCause); out.writeBoolean(executed); out.writeLong(timestamp.get()); }
"The amount of time since the last UpdateConsensus request from the " "leader."); METRIC_DEFINE_gauge_int64(tablet, is_raft_leader, "Is tablet raft leader", yb::MetricUnit::kUnits, "Keeps track whether tablet is raft leader" "1 indicates that the tablet is raft leader"); METRIC_DEFINE_histogram( tablet, dns_resolve_latency_during_update_raft_config,
else: format_string = '{fn}(' + prev if fn_name in dir(np): format_string = self._namespaces['numpy']+format_string else: format_string = prev+', {fn}' if args:
/// <returns>Number of bytes written to the destination.</returns> public static int Encode(ReadOnlySpan<byte> source, Span<byte> destination) { if (destination.Length < ComputeEncodedLength(source.Length)) { return -1; } ref byte srcBytes = ref source.DangerousGetPinnableReference(); ref byte destBytes = ref destination.DangerousGetPinnableReference();
use Symfony\Component\Lock\Store\FlockStore; /** * @deprecated Deprecated since Contao 4.7, to be removed in Contao 5.0; use *             the Symfony Lock component instead */ abstract class AbstractLockedCommand extends ContainerAwareCommand {
for i, r in enumerate(rest_results):  # user-added return values rest_results[i] = images_to_levels(r, num_level_anchors) return res + tuple(rest_results) def loss_single(self, cls_score, bbox_pred, anchors, labels, label_weights, bbox_targets, bbox_weights, num_total_samples):
:param obj: :rtype: bool """ dumpable_types = tuple(cls.TYPES + (JSONDumpable,)) return isinstance(obj, dumpable_types) @staticmethod
break; } } }
var array = new byte[1024]; OwnedBuffer<byte> owned = array; var span = owned.Span; Assert.Equal(array.Length, span.Length); owned.Dispose(); Assert.Throws<ObjectDisposedException>(() => { var spanDisposed = owned.Span; }); } [Fact(Skip = "This needs to be fixed and re-enabled or removed.")]
public function matchesSubject(PrivilegeSubjectInterface $subject) { if ($subject instanceof NodePrivilegeSubject === false && $subject instanceof MethodPrivilegeSubject === false) { throw new InvalidPrivilegeTypeException(sprintf('Privileges of type "%s" only support subjects of type "%s" or "%s", but we got a subject of type: "%s".', AbstractNodePrivilege::class, NodePrivilegeSubject::class, MethodPrivilegeSubject::class, get_class($subject)), 1417014368); } $this->initialize();
return this.waitAndClick('.WalletRecoveryPhraseEntryDialog .dialog_button'); }); this.Then(/^I should not see the create wallet recovery phrase entry dialog anymore$/, function () { return this.client.waitForVisible('.WalletRecoveryPhraseEntryDialog', null, true); });  this.Then(/^I should have newly created "Test" wallet loaded$/, async function () { const result = await this.client.executeAsync(function(done) { daedalus.stores.wallets.walletsRequest.invalidate().execute().then(done); });
const proxiesByHostId = {}; function parsePowerboxDescriptorList(list) { return list.map(packedDescriptor => Capnp.parse(Powerbox.PowerboxDescriptor, new Buffer(packedDescriptor, "base64"), { packed: true }));
RedirectURL = model.BrowserRedirect, FullNotifications = true }, store, HttpContext.Request.GetAbsoluteRoot(), cancellationToken: cancellationToken); if (string.IsNullOrEmpty(model.CheckoutQueryString)) { return Redirect(invoice.Data.Url); }  var additionalParamValues = HttpUtility.ParseQueryString(model.CheckoutQueryString); var uriBuilder = new UriBuilder(invoice.Data.Url); var paramValues = HttpUtility.ParseQueryString(uriBuilder.Query); paramValues.Add(additionalParamValues); uriBuilder.Query = paramValues.ToString(); return Redirect(uriBuilder.Uri.AbsoluteUri); }
} private Optional<String> determineKind(String optionContext) { return Arrays.stream(optionContext.split("\\s+")) .filter(s -> s.startsWith("existing")) .map(s -> s.substring("existing-".length())) .findFirst();
render() { const { value, currencyCode, classes, locale } = this.props; // If the optional locale prop is not provided or is undefined, // the runtime's default locale is used in the Intl.NumberFormat() constructor. const parts = patches.toParts.call( new Intl.NumberFormat(locale, { style: 'currency',
} return result; } } class PlayableException extends Exception {
[MethodImpl(MethodImplOptions.AggressiveInlining)] internal void Increment(object obj) { if (_first == 0) { // No space left, we must grow the table. var oldLength = _items.Length;
new ThreeColumnRecord(1, "b c", "data"), new ThreeColumnRecord(2, "ab", "data")); String tableName = "external_table"; spark.createDataFrame(records, ThreeColumnRecord.class)
// Parse the search parameters. try { // Basic format checking (e.g. integer value for _count key etc.). searchParams.Add(query.Item1, query.Item2); } catch (Exception ex)
capping_ace = resource_filename(__name__, "data/capping/ace.pdb") capping_nma = resource_filename(__name__, "data/capping/nma.pdb") contacts_villin_folded = resource_filename(__name__, "data/contacts/villin_folded.gro.bz2") contacts_villin_unfolded = resource_filename(__name__, "data/contacts/villin_unfolded.gro.bz2") contacts_file = resource_filename(__name__, "data/contacts/2F4K_qlist5_remap.dat") trz4data = resource_filename(__name__, "data/lammps/datatest.trz")
<?php $course_id = Sensei()->lesson->get_course_id( get_the_ID() ); if ( Sensei_Utils::is_preview_lesson( get_the_ID() ) && ! Sensei_Utils::user_started_course( $course_id, get_current_user_id() ) ) { echo Sensei()->frontend->sensei_lesson_preview_title_tag( $course_id ); } ?> </a>
* @author Remy Perona * * @param string $file Absolute path to the file. * @param string $url  URL of the asset. */ $file = apply_filters( 'rocket_url_to_path', $file, $url ); if ( ! rocket_direct_filesystem()->is_readable( $file ) ) { return false;
else: self[self.SUCCESSES] += 1 self[self.RESP_TIMES_HDR].record_value(int(round(r_time * 1000, 3))) if byte_count is not None: self[self.BYTE_COUNT] += byte_count
// -> returns serialized data of everything dirty,  null if nothing was dirty internal byte[] OnSerializeAllSafely(bool initialState) { if (networkBehavioursCache.Length > 64) { Debug.LogError("Only 64 NetworkBehaviour components are allowed for NetworkIdentity: " + name + " because of the dirtyComponentMask");
} func (repo *nodeAttestorRepository) Versions() []catalog.Version { return []catalog.Version{ nodeAttestorV1{}, // TODO: remove v0 once all of the built-ins have been migrated to v1 nodeAttestorV0{}, } } func (repo *nodeAttestorRepository) LegacyVersion() (catalog.Version, bool) {
// See the License for the specific language governing permissions and // limitations under the License. package paramstore import (
Args: index: The index of the tab to get a size hint for. ellipsis: Whether to use ellipsis to calculate width instead of the tab's text. Forced to False for pinned tabs. Return: A QSize of the smallest tab size we can make. """
* Check wiped instead of s2n_stuffer_data_available to differentiate between the initial call * to s2n_handshake_write_io and a repeated call after an EWOULDBLOCK. */ const bool handshake_io_wiped = s2n_stuffer_is_wiped(&conn->handshake.io); if (handshake_io_wiped && record_type == TLS_HANDSHAKE) { GUARD(s2n_handshake_write_header(&conn->handshake.io, ACTIVE_STATE(conn).message_type)); }
void completeJob(MasterContext masterContext, long completionTime, Throwable error) { // the order of operations is important. long jobId = masterContext.jobId(); String coordinator = nodeEngine.getNode().getThisUuid(); jobRepository.completeJob(jobId, coordinator, completionTime, error); if (masterContexts.remove(masterContext.jobId(), masterContext)) { logger.fine(masterContext.jobIdString() + " is completed"); } else { MasterContext existing = masterContexts.get(jobId);
*/ /* HIT_START * BUILD: %t %s ../../test_common.cpp NVCC_OPTIONS -std=c++11 * TEST: %t * HIT_END */
class GardensController < ApplicationController before_action :authenticate_member!, except: %i(index show) after_action :expire_homepage, only: %i(create delete) load_and_authorize_resource respond_to :html, :json
locale=locale, entity=t.entity, translation=t, project=project, ) for t in Translation.objects.filter(pk__in=changed_translation_pks).prefetch_related('entity__resource')] TranslationMemoryEntry.objects.bulk_create(memory_entries)
class DistOptimizerHook(OptimizerHook): """Deprecated optimizer hook for distributed training"""  def __init__(self, *args, **kwargs): warnings.warn( '"DistOptimizerHook" is deprecated, please switch to' '"mmcv.runner.OptimizerHook".', DeprecationWarning) super().__init__(*args, **kwargs)
} if _type == TypeNoNotificationSent { // no CMID for no notification sent r.subject.classifier = "no immediate rule" break } var cmType contactmethod.Type
private string GetFullPath(string path) { var relativePath = (path ?? string.Empty).Trim('/'); var parentPath = (this.parentModule.ModulePath ?? string.Empty).Trim('/'); if (string.IsNullOrEmpty(parentPath)) {
Testnet  bool Localnet bool ExperimentIdentityCheck bool DiscoveryAPIAddress string BrokerAddress       string
// Projection defines the set of properties to return. It will default to ProjectionFull, // which returns all properties. Passing ProjectionNoACL will omit Owner and ACL, // which may improve performance when listing many objects. Projection Projection } // attrToFieldMap maps the field names of ObjectAttrs to the underlying field
user.mentor_discussions.update_all(mentor_id: User::GHOST_USER_ID) user.mentor_discussion_posts.update_all(user_id: User::GHOST_USER_ID) user.mentor_testimonials.update_all(mentor_id: User::GHOST_USER_ID) end def reset_associations!
// exchange headers if err := sendHeaders(ctx, headers, stream); err != nil { _ = stream.Reset() return nil, fmt.Errorf("send headers: %w", err) }
default_ip = '192.168.1.1' altern8_ip = '10.1.2.3' default_port = 80 altern8_port = 8008 context "RHEL 6 with only required facts and default parameters" do
Perm string `json:"perm"` RotatePerm string `json:"rotateperm"` fileNameOnly, suffix string // like "project.log", project is fileNameOnly and .log is suffix }
expected = assumed_iteration + (params_fit['early_stopping_rounds'] if eval_set_name != 'training' and assumed_iteration != gbm.n_estimators else 0) if eval_set_name != 'training': assert assumed_iteration == gbm.best_iteration_ else: assert gbm.n_estimators == gbm.best_iteration_ X, y = load_boston(return_X_y=True) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
} if (proposedBlock.getHeader().getNumber() != signedPayload.getPayload().getRoundIdentifier().getSequenceNumber()) { LOG.info("Invalid proposal/block - message sequence does not align with block number."); return false; }
// this works because value types cannot be derived // if it is a reference type (for example IMessageBase), // ask the message for the real type int msgType = MessagePacker.GetId(typeof(T).IsValueType ? typeof(T) : msg.GetType()); MessagePacker.Pack(msg, writer); ArraySegment<byte> segment = writer.ToArraySegment();
svc.BackendServiceConfig.ImageConfig.Build.BuildArgs.Dockerfile = stringP(props.Dockerfile) svc.BackendServiceConfig.ImageConfig.Port = uint16P(props.Port) svc.BackendServiceConfig.ImageConfig.HealthCheck = props.HealthCheck svc.BackendServiceConfig.Platform = props.Platform svc.parser = template.New() return svc }
protected $code = 404; protected $message = 'Not found.'; protected $title = '404 Not Found'; protected $description = 'The requested resource could not be found. Please verify the URI and try again.'; }
if self.orig_bases: # update __orig_bases__ if needed code.putln("if (%s != %s) {" % (self.bases.result(), self.orig_bases.result())) code.putln( code.error_goto_if('PyDict_SetItemString(%s, "__orig_bases__", %s) == -1' % ( self.dict.result(), self.orig_bases.result()), self.pos )) code.putln("}") self.orig_bases.generate_disposal_code(code) self.orig_bases.free_temps(code)
void Neighbor::print_pairwise_info() { int i,m; NeighRequest *rq; FILE *out;
}, Format: DefaultLogFormat, }) case 2: // Path scope, output file format := DefaultLogFormat if len(args) > 2 {
// Not checking resource as the underlying map of our Resource makes // ordering impossible to guarantee on the output. The Resource // transform function has unit tests that should suffice. expectedSpan := &tracepb.Span{ TraceId:                []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F}, SpanId:                 []byte{0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8}, ParentSpanId:           []byte{0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8},
return newSystemErrorWithCause(err, "init seccomp") } } if err := syscall.Exec(name, l.config.Args[0:], os.Environ()); err != nil { return newSystemErrorWithCause(err, "exec user process") }
componentErrs = append(componentErrs, field.Invalid(field.NewPath("schematic"), app, err.Error())) } if v := app.GetAnnotations()[oam.AnnotationAppRollout]; len(v) != 0 && v != "true" { componentErrs = append(componentErrs, field.Invalid(field.NewPath("annotation:app.oam.dev/rollout-template"), app, "the annotation value of rollout-template must be true")) } return componentErrs }
if field.Modifier == parser.Required && g.isDartPrimitive(field.Type) { fName := toFieldName(field.Name) contents += fmt.Sprintf(tabtab+"if(!__isset_%s) {\n", fName) contents += fmt.Sprintf(tabtabtab+"throw new thrift.TProtocolError(thrift.TProtocolErrorType.UNKNOWN, \"Required field '%s' is not present in struct '%s'\");\n", fName, s.Name) contents += tabtab + "}\n" } }
*/ public function hasAllAllowed(): bool { return $this->assetType === static::TYPE_ALL; } /**
// It calls the callback right away with "false" even if the document hasn't be print yet. cleanup(); if (!success && reason !== 'cancelled') reject(new Error('Could not print: '.concat(reason))); resolve(); }); }
* Helper to check all permissions defined on a plugin and see the state of each. * * @since 3.0.0 * @return A mapping of permission aliases to the associated granted status. */ public Map<String, PermissionState> getPermissionStates() { return bridge.getPermissionStates(this);
try { return LOCAL_DATE_OF_YEAR_MONTH_DAY.invoke(null, year, month, day); } catch (InvocationTargetException e) { if (year <= 1500 && (year & 3) == 0 && month == 2 && day == 29) { // If proleptic Gregorian doesn't have such date use the next day return LOCAL_DATE_OF_YEAR_MONTH_DAY.invoke(null, year, 3, 1); }
} } // Get the value of a discrete variable allocated by this Component by name. double Component:: getDiscreteVariable(const SimTK::State& s, const std::string& name) const {
'mysql' => [ 'driver'    => 'mysql', 'host'      => env('DB_HOST', 'localhost'), 'database'  => env('DB_DATABASE', 'forge'), 'username'  => env('DB_USERNAME', 'forge'), 'password'  => env('DB_PASSWORD', ''), 'charset'   => 'utf8', 'collation' => 'utf8_unicode_ci',
$id = $article->pid; } /** @var PageModel $adapter */ $adapter = $this->framework->getAdapter(PageModel::class); if (null !== $adapter->findByPk($id)) {
if # Driver 2.13.0+ defined?(Mongo::Error::SessionsNotSupported) && Mongo::Error::SessionsNotSupported === ex || # Legacy drivers ex.message == Mongo::Session::SESSIONS_NOT_SUPPORTED then
setHint(ellipsizeToWidth(hint)); } } if (refreshLayout) {  refreshLayout = false; } } private CharSequence ellipsizeToWidth(CharSequence text) {
app.on('ready', async () => { // Make sure this is the only Daedalus instance running per cluster before doing anything else try { await acquireDaedalusInstanceLock(); } catch (e) { const dialogTitle = 'Daedalus is unable to start!'; const dialogMessage = 'Another Daedalus instance is already running.';
if(o->type==JX_OP_CALL && jx_istype(o->left,JX_SYMBOL)) { const char *name = o->left->u.symbol_name; if(!strcmp("select",name) || !strcmp("project",name)) { struct jx *r = jx_array_shift(o->right); r = jx_string(jx_print_string((r))); jx_array_insert(o->right, r);
using System.Linq; using System.Text.Json; using System.Threading.Tasks; using Hl7.Fhir.Utility; using Microsoft.Health.Fhir.Shared.Core.Features.Search; namespace Microsoft.Health.Fhir.Api.Features.Resources.Bundle
// Service handles identities type Service struct { *sda.ServiceProcessor identities      map[string]*storage identitiesMutex sync.Mutex skipchain       *skipchain.Client path            string } // Storage stores one identity together with the skipblocks type storage struct { sync.Mutex Latest   *Config Proposed *Config
httpMethod.initEntity(requestHttpEntity.getBody(), headers.getValue(HttpHeaderConsts.CONTENT_TYPE)); } HttpRequestBase requestBase = httpMethod.getRequestBase(); replaceDefaultConfig(requestBase, requestHttpEntity.getHttpClientConfig()); return requestBase; }
Address     string Mux         *http.ServeMux MuxPattern  string GrabHeaders map[string]struct{} } type inboundTest struct {
}, }, wantedError: fmt.Errorf("invalid override path segment \"ContainerDefinition[0][0]\": segments must be of the form \"array[0]\", \"array[-]\" or \"key\""), }, "error when invalid rule path with bad sequence index": { inRules: []Rule{
stateOffPolResult      int16 = 16 stateOffSrcPort        int16 = 20 stateOffDstPort        int16 = 22 stateOffICMPType       int16 = 22 stateOffICMPCode       int16 = 23 _                            = stateOffDstPort stateOffPostNATDstPort int16 = 24 stateOffIPProto        int16 = 26 // Compile-time check that IPSetEntrySize hasn't changed; if it changes, the code will need to change. _ = [1]struct{}{{}}[20-ipsets.IPSetEntrySize]
flags.mark_flag_as_required('organization_id') def main(_): """Run the scanner.""" logger = LogUtil.setup_logging(__name__)
super.onStart(); EventBus.getDefault().register(this); //      autoDownload = SubscriptionFilterDialog.AutoDownload.valueOf(prefs.getString(PREF_AUTO_DOWNLOAD,STRING_NO_FILTER)); //        keepUpdated = SubscriptionFilterDialog.KeepUpdated.valueOf(prefs.getString(PREF_KEEP_UPDATED,STRING_NO_FILTER)); //    autoDelete =SubscriptionFilterDialog.AutoDelete.valueOf(prefs.getString(PREF_AUTO_DELETE,STRING_NO_FILTER)); loadSubscriptions(); }
"""A superclass for reading [f]ixed-column type [f]lat-[f]ile records.""" __docformat__ = "restructuredtext en"
io_thread_pool->launch_pinned_threads(1, 1); std::set<std::string> active_data_fields = {"samples"}; active_data_fields.insert(GENERATE(std::string("labels"), std::string("responses"))); auto s = GENERATE(range(1, 11)); El::Int num_samples = s; std::vector<int> dims = {s,s};;
if (address != null) { this._refreshAddresses(); runInAction('set last generated address and reset error', () => { this.lastGeneratedAddress = address; this.error = null; }); }
USER = 4 WILDCARD_STRING = '[USER INPUT THIS UNBOUNDED FACT/RELATIONSHIP]' wildcard_string = '' class FactSchema(ma.Schema):
// Execute displays the status of the pipeline. func (o *pipelineStatusOpts) Execute() error { err := o.initDescriber(o) if err != nil { return fmt.Errorf("describe status of pipeline: %w", err)
//         uid: 7d3897c2-ce27-4144-883a-e1b5f89bd65a func certificateDeleted(queue workqueue.RateLimitingInterface) func(obj interface{}) { return func(obj interface{}) { cert, ok := obj.(*cmapi.Certificate) if !ok { runtime.HandleError(fmt.Errorf("not a Certificate object: %#v", obj)) return } ingress := metav1.GetControllerOf(cert) if ingress == nil { // No controller should care about orphans being deleted or // updated. return
*/ public function init() { add_action( 'add_meta_boxes', array( $this, 'add' ) ); add_action( 'admin_init', array( $this, 'define_controls' ) ); add_action( 'admin_init', array( $this, 'load_controls' ) ); add_action( 'admin_enqueue_scripts', array( $this, 'enqueue' ) ); add_action( 'save_post', array( $this, 'save' ) );
self.dbutils.execute(self.cursor, sql, args) def executemany(self, sql, args): """Execute many sql commands. """ if os.name == "java": sql = sql.replace("%s", "?")
func (c *collection) RunActions(ctx context.Context, actions []*driver.Action, opts *driver.RunActionsOptions) driver.ActionListError { errs := make([]error, len(actions)) // Run the actions concurrently with each other. run := func(as []*driver.Action) { t := driver.NewThrottle(c.opts.MaxOutstandingActions) for _, a := range as { a := a t.Acquire()
self._widget.page().findText(text, flags, wrapped_callback) def _on_find_finished(self, find_text_result): """Unwrap the result, store it, and pass it along.""" self.current_match = find_text_result.activeMatch() self.total_match_count = find_text_result.numberOfMatches() log.webview.debug("Active search match: {}/{}" .format(self.current_match, self.total_match_count)) self.search_match_changed.emit(self.current_match, self.total_match_count) def search(self, text, *, ignore_case=usertypes.IgnoreCase.never, reverse=False, wrap=True, result_cb=None):
Set<Module> modules = kompile.parseModules(compiledDefinition, defModuleNameUpdated, specModuleNameUpdated, absSpecFile, backend.excludedModuleTags(), readOnlyCache); // avoid the module duplication bug #1838 Map<String, Module> modulesMap = modules.stream().collect(Collectors.toMap(Module::name, m -> m)); //Map<String, List<Module>> group = modules.stream().collect(Collectors.groupingBy(Module::name)); //Map<String, Module> modulesMap = group.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, x -> x.getValue().get(0))); Definition parsedDefinition = compiledDefinition.getParsedDefinition(); Module specModule = getModule(specModuleNameUpdated, modulesMap, parsedDefinition);
ConsumeQueue logicQueue = this.findConsumeQueue(topic, queueId); if (logicQueue != null) { SelectMappedBufferResult result = logicQueue.getIndexBuffer(consumeQueueOffset); return getStoreTime(result); } return -1;
_exportJobConfiguration = exportJobConfiguration.Value; _exportJobTaskFactory = exportJobTaskFactory; _logger = logger; } public async Task ExecuteAsync(CancellationToken cancellationToken) { var runningTasks = new List<Task>(); TimeSpan delayBeforeNextPoll = _exportJobConfiguration.JobPollingFrequency; while (!cancellationToken.IsCancellationRequested) {
from argparse import ArgumentParser import numpy as np import requests from mmdet.apis import inference_detector, init_detector, show_result_pyplot def parse_args():
{ endpoint: Exercism::Routes.api_solution_url(solution.uuid, sideload: [:iterations]), options: { initial_data: { iterations: solution. iterations. includes(:track, :exercise, :files, :submission). order(id: :desc). map { |iteration| SerializeIteration.(iteration, sideload: %i[files automated_feedback]) } }, initial_data_updated_at: Time.current.to_i } } end
} @Override public List<String> struct(Types.StructType readStruct, Iterable<List<String>> fieldErrorLists) { Preconditions.checkNotNull(readStruct, "Evaluation must start with a schema."); if (!currentType.isStructType()) {
@foreach ($assets as $asset) @php if($snipeSettings->show_archived_in_list != 1 && $asset->assetstatus->archived == 1){ continue; } @endphp
var client = webappUtils.createWebappManagementClient(subscription); var progress = cli.interaction.progress(util.format($('Stopping webapp %s'), name)); try { if (options.slot) { client.sites.stopSiteSlot(resourceGroup, name, options.slot, _); log.info('Webapp slot ' + name + '/' + options.slot + ' has been stopped '); } else { client.sites.stopSite(resourceGroup, name, _); log.info('Webapp ' + name + ' has been stopped');
$built = $this->generate_select_box($name.'_day', $days, (int)$day, array('id' => $name.'_day'))." &nbsp; "; $built .= $this->generate_select_box($name.'_month', $months, (int)$month, array('id' => $name.'_month'))." &nbsp; "; $built .= $this->generate_numeric_field($name.'_year', $year, array('id' => $name.'_year', 'style' => 'width: 100px;', 'min' => 0)); return $built; }
#include <fstream> //Boost #include <boost/shared_ptr.hpp> #include "HdfsConnection.h" #include "HdfsDevice.hpp"
<< "DefaultPipeline::doCollisionReset" ; // clear all contacts if (contactManager != nullptr) { const helper::vector<Contact::SPtr>& contacts = contactManager->getContacts(); for (const auto& contact : contacts)
{ "Sid":"AuthorizeAccount", "Effect":"Allow", "Resource":"$identity ", "Principal":{ "AWS":[ " $other_aws_account " ] }, "Action":[ "SES:SendEmail",
if (node->data.scalar[0] == '\0') { self->vars->mruby_handler_path = h2o_iovec_init(NULL, 0); } else { self->vars->mruby_handler_path = h2o_iovec_init(node->data.scalar, strlen(node->data.scalar)); h2o_mruby_register(ctx->pathconf, self->vars); } return 0;
.catch((e) => assertIsError(e)); }, testLoginTowardsMisbehavingServer() { const username = uuid(); // Try authenticating towards a server thats clearly not ROS
Parameters ---------- row_labels : list, optional Row labels to select. row_positions : list-like of ints, optional Numeric indices of rows to select. col_labels : list, optional Column labels to select. col_positions : list-like of ints, optional Numeric indices of columns to select.
ERR_ENTRY(S2N_ERR_INVALID_X509_EXTENSION_TYPE, "Invalid X509 extension type") \ ERR_ENTRY(S2N_ERR_INSUFFICIENT_MEM_SIZE, "The provided buffer size is not large enough to contain the output data. Try increasing the allocation size.") \ ERR_ENTRY(S2N_ERR_KEYING_MATERIAL_EXPIRED, "The lifetime of the connection keying material has exceeded the limit. Perform a new full handshake.") \ ERR_ENTRY(S2N_ERR_EARLY_DATA_TRIAL_DECRYT, "Unable to decrypt rejected early data") \ /* clang-format on */
) @click.option( '--blotter', default='default', help="The blotter to use.", show_default=True,
return err } if addr.PortRangeSize() != 1 { return fmt.Errorf("multiple addresses (upstream must map to only one address): %v", addr) } // create or get the host representation for this upstream
return nil, err } if length > uint(cap(plaintextBuf))+crypto.Extension { return nil, fmt.Errorf("buf is too small, need %d more bytes", length-uint(cap(plaintextBuf))-crypto.Extension) } if tpe != t {
/* UDP multicast network layer specific internal data */ typedef struct { int ai_family;                    /* Protocol family for socket. IPv4/IPv6 */ struct sockaddr_storage ai_addr; /* https://msdn.microsoft.com/de-de/library/windows/desktop/ms740496(v=vs.85).aspx */ struct sockaddr_storage intf_addr; UA_UInt32 messageTTL; UA_Boolean enableLoopback; UA_Boolean enableReuse;
{ bool res = false; for (int i = 0; i < InnerIterationCount; i++) { res = myObj is ICollection<MyClass2>; FakeSideEffects(); } return res; }
// before attempting to write a new value. And it does the normal optimistic locking that Commit does, assuming the // pessimistic locking passes. After this method runs, the two datasets given in |commitDS and |workingSetDS| are both // updated in the new root, or neither of them are. CommitWithWorkingSet(ctx context.Context, commitDS, workingSetDS Dataset, commit types.Value, workingSetSpec WorkingSetSpec, prevWsHash hash.Hash, opts CommitOptions) (Dataset, Dataset, error) // Delete removes the Dataset named ds.ID() from the map at the root of // the Database. The Dataset data is not necessarily cleaned up at this
Args: message (str): error message """ super(Error, self).__init__(message)
* the multiples. */ void sieve(uint32_t N, bool *isprime) { isprime[0] = true; isprime[1] = true; for (uint32_t i = 2; i * i <= N; i++) { if (!isprime[i]) { for (uint32_t j = i * i; j <= N; j = j + i) { isprime[j] = true; } } }
}).catch(err => err); }; __embarkENS.lookup = function (address, cb) { const self = this; if (!self.ens) { console.log("ENS provider not set. Exitting."); return; } if (address.startsWith("0x")) address = address.slice(2); let node = namehash.hash(address.toLowerCase() + ".addr.reverse");
// Options are optional arguments to the OpenCollection functions. type Options struct { // The name of the field holding the document revision. // Defaults to docstore.RevisionField. RevisionField string }
// NewSubscription creates a Subscription from a driver.Subscription // and a function to make a batcher that sends batches of acks to the provider. // NewSubscription is for use by provider implementations. func NewSubscription(d driver.Subscription, newAckBatcher func(context.Context, *Subscription) driver.Batcher) *Subscription { ctx, cancel := context.WithCancel(context.Background()) s := &Subscription{ driver: d,
mediaAdapter.notifyItemChanged(toggleSelectPhoto(m)); editMode = true; } else selectAllPhotosUpTo(getImagePosition(m.getPath()),mediaAdapter); } else if (fav_photos && !all_photos) { if (!editMode) { mediaAdapter.notifyItemChanged(toggleSelectPhoto(m));
*/ private function array_filter_walker( $values = array() ) { $values = (array) $values;  foreach ( $values as $k => $v ){ if ( is_object( $v ) ) { // Skip objects
}); } async setupEmbarkJS() { this.events.request("embarkjs:plugin:register", 'storage', 'swarm', 'embarkjs-swarm'); await this.events.request2("embarkjs:console:register", 'storage', 'swarm', 'embarkjs-swarm'); this.events.on("storage:started", () => { let config = this.embark.config.storageConfig.dappConnection || [];
* @param \Closure $callback a closure to be invoked when the corresponding event was triggered * @return void */ public function on(string $eventIdentifier, \Closure $callback): void; }
Parameters ----------- obj : AtomGroup or Universe """ try: from rdkit import Chem
return SUPPORTED_TOKENS; } @Override public boolean validTokenClass(String tokenClass) { return SUPPORTED_TOKEN_NAMES.contains(tokenClass); }  }
msg_deprecated("SofaComponentAllCommonComponents") << "This plugin was renamed into SofaComponentAll. Backward compatiblity will be stopped at SOFA v20.06"; #endif sofa::component::initSofaBase(); sofa::component::initSofaCommon(); sofa::component::initSofaGeneral(); sofa::component::initSofaAdvanced(); sofa::component::initSofaMisc(); } const char* getModuleName()
if err != nil { return err } if err := storageClient.Create(ctx, storageKey(c.config.Token), data); err != nil { if err.Error() == "key exists" { logrus.Warnln("Bootstrap key exists. Please follow documentation to on updating a node after restore.") return nil
>>> idx = torch.Tensor([0,1,2]).to('cuda') >>> output = feats[idx] For the multi-GPU operation, to allow multiple GPUs to access the original CPU tensor ``feats`` using UnifiedTensor, one can do the following: >>> feats = torch.rand((128,128))
# common profile for archiver/compression tools blacklist ${RUNUSER}/wayland-* blacklist ${RUNUSER} include disable-common.inc include disable-devel.inc
# Skip the current resource if it's in the excluded_resources list. excluded_resources = visitor.config.variables.get( 'excluded_resources', {}) cur_resource_repr = set() resource_name = '{}/{}'.format(self.type(), self.key()) cur_resource_repr.add(resource_name) if self.type() == 'project': # Supports matching on projectNumber. project_number = '{}/{}'.format(self.type(), self['projectNumber']) cur_resource_repr.add(project_number) if cur_resource_repr.intersection(excluded_resources): return self._visitor = visitor
$csrfOk = true; } if (substr($ip, -1) === "*") { // ip range $ip = substr($ip, 0, -1) . '%'; $userlist = $psdb->query("SELECT `username`, `userid`, `banstate` FROM `ntbb_users` WHERE `ip` LIKE ?", [$ip]); } else { $userlist = $psdb->query("SELECT `username`, `userid`, `banstate` FROM `ntbb_users` WHERE `ip` = ?", [$ip]);
// Append the containing dir to the PATH auto current_path = std::getenv("PATH"); std::string new_path = toString(dummy_dir) + getPlatformDelimiterForPath() + current_path; setenv("PATH", new_path.c_str(), 1); setenv("PathWhenSymlinkInPathUnixOnly_Setup", "true", 1); // Locate the file with only its name absolute_path_to_dummy = findInSystemPath(dummy_file_path.filename()); EXPECT_TRUE(exists(absolute_path_to_dummy)) << "Tried to find " << dummy_file_path.filename() << "in path: " << current_path; EXPECT_EQ(dummy_file_path, absolute_path_to_dummy); // Put it back
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4480-SEA 1645521449 2587643999</p> <hr> <p>Varnish cache server</p> </body>
shard_outputs = [] for pipeline in pipelines: pipe_outputs = pipeline.run() shard_outputs.append(tuple(to_array(result) for result in pipe_outputs)) results.append(tuple(shard_outputs)) return results
bool transactions = (numDetails & 0x08) != 0; bool purchases = (numDetails & 0x10) != 0; bool sessions = (numDetails & 0x20) != 0; int numReqs = int(storage || transfer || pro) + int(transactions) + int(purchases) + int(sessions); request->setNumber(numReqs); client->getaccountdetails(request->getAccountDetails(), storage, transfer, pro, transactions, purchases, sessions); break;
static class PositionReader implements ParquetValueReader<Long> { private long rowOffsetInCurrentRowGroup = -1; private long rowGroupRowOffsetInFile; @Override public Long read(Long reuse) { rowOffsetInCurrentRowGroup = rowOffsetInCurrentRowGroup + 1; return rowGroupRowOffsetInFile + rowOffsetInCurrentRowGroup; } @Override
raise errors.SchemaError(f'unsupported collection type {t!r}') elif isinstance(t, s_objtypes.ObjectType): # This is a view self.schema, mt = t.material_type(self.schema) base_type_id = mt.id
{ private readonly Memory<T> memory; internal DenseTensor(Array fromArray, bool reverseStride = false) : base(fromArray, reverseStride) { // copy initial array var backingArray = new T[fromArray.Length];
Claims claims = Jwts.claims().setSubject(userName); return Jwts.builder().setClaims(claims).setExpiration(validity) .signWith(Keys.hmacShaKeyFor(authConfigs.getSecretKeyBytes()), SignatureAlgorithm.HS256).compact(); } /**
file """ if "TTS" not in raw_audio_settings: return AudioSettings().text_to_speech_settings return [ TextToSpeechSettings(tts["Provider"], tts["Voice"], tts["Engine"])
## Load our local_settings try: SETTINGS_MODULE = os.environ['GRAPHITE_SETTINGS_MODULE'] except KeyError: SETTINGS_MODULE = 'graphite.local_settings' try:
"but got a vote for %d", c.view, vote.View) } // TODO: at this point we don't have any way to ensure vote validity since we don't // check signature, we can only collect votes and make decisions about double votes // and protocol violations once we check signature. In current version it has to happen after // we have received a block proposal. It's a potential optimization to check signature as soon as we // receive the vote but it requires knowledge about identity table which might not be up to date // without actually receiving proposal. _ = c.pendingVotes.AddVote(vote)
} return res.IterateActions(func(action *design.ActionDefinition) error { name := codegen.Goify(action.Name, false) if as, ok := actions[name]; ok { actions[name] = append(as, action) } else {
expected = append(expected, `valuerecorder_sum{A="B",C="D",R="V"} 19.6`) compareExport(t, exporter, expected) compareExport(t, exporter, expected) }
using UnityEditor; using UnityEngine; namespace Mirror { public static class EditorHelper {
if( !strmatch(tok,"ImageX:")) { enum MIME mime = SFDGetImageMIME(sfd); if (mime == false) exit(1); #ifndef _NO_LIBPNG ImageList *img = SFDGetImagePNG(sfd); if ( !u->u.state.images )
hasher := sha256.New() _, err := hasher.Write([]byte(suffix)) if err != nil { log.Panic("failed to write hash suffix") } hash := base64.RawURLEncoding.EncodeToString(hasher.Sum(nil)) charsLeftForHash := maxLength - 1 - prefixLen
return this.set('disableCustomCss', val.toString(), false); } return this.get('disableCustomCss', false) === 'true'; } /**
close  func() } func (h *harness) MakeDriver(ctx context.Context) (driver.Keeper, error) { return &keeper{ keyID: &KeyID{ ProjectID: projectID, Location:  location,
init_func=init_zero_func) kvclient.register_push_handler('data_3', add_push) kvclient.map_shared_data(partition_book=gpb) data_tensor = F.tensor([[6.,6.],[6.,6.],[6.,6.]], F.float32) time.sleep(kvclient.client_id + 1) print("add...")
HTTPProxy            cli.URL      `help:"A URL to use as a proxy server for downloads. Only applies to internal ones - e.g. self-updates or remote_file rules."` HashFunction         string       `help:"The hash function to use internally for build actions." options:"sha1,sha256"` ExitOnError          bool         `help:"True to have build actions automatically fail on error (essentially passing -e to the shell they run in)." var:"EXIT_ON_ERROR"` LinkGeneratedSources string       `help:"If set, supported build definitions will link generated sources back into the source tree. The list of generated files can be generated for the .gitignore through 'plz query print --label gitignore: //...'. The available options are: 'hard' (hardlinks), 'soft' (symlinks), 'true' (symlinks) and 'false' (default)" var:"LINK_GEN_SOURCES"` UpdateGitignore      bool         `help:"Whether to automatically update the nearest gitignore with generated sources"` } `help:"A config section describing general settings related to building targets in Please.\nSince Please is by nature about building things, this only has the most generic properties; most of the more esoteric properties are configured in their own sections."` BuildConfig map[string]string `help:"A section of arbitrary key-value properties that are made available in the BUILD language. These are often useful for writing custom rules that need some configurable property.\n\n[buildconfig]\nandroid-tools-version = 23.0.2\n\nFor example, the above can be accessed as CONFIG.ANDROID_TOOLS_VERSION."`
np_t[0:2, 1:3, 0:4][0:1, 0:2, 2:3]) # Slice a zero-dim tensor with pytest.raises(RuntimeError, match=r"Cannot slice a scalar \(0-dim\) tensor."): o3c.Tensor.ones((), device=device)[:] with pytest.raises(RuntimeError, match=r"Cannot slice a scalar \(0-dim\) tensor."): o3c.Tensor.ones((), device=device)[0:1]
} // Add a junk file, should be ignored FSDataOutputStream out = fs.create(new Path(dir, "junk")); out.writeChars("ABCDEFG\n"); out.close();
} if md.TypeForKeying() == tlf.TeamKeying { return nil, kbfscrypto.VerifyingKey{}, false, nil } session, err := fbo.config.KBPKI().GetCurrentSession(ctx)
} node.getPermissioningConfiguration() .flatMap(PermissioningConfiguration::getLocalConfig) .ifPresent( permissioningConfiguration -> { if (permissioningConfiguration.isNodeWhitelistEnabled()) {
return console_handler, ram_handler def _init_formatters(level, color, force_color, json_logging): """Init log formatters.
] ]) async def test_edgeql_scope_tuple_09(self): await self.assert_query_result(r''' # compare to test_edgeql_scope_filter_03 to see how it # works out without tuples
else { notRelevantChanges.add_sequence_number(seq_num, remoteReader); } }; remoteReader->for_each_unsent_change(max_sequence, unsent_change_process); } if (m_pushMode)
{ $awaitingusers = $cache->read('awaitingactivation'); if(isset($awaitingusers['time']) && $awaitingusers['time'] < TIME_NOW + 86400) { $cache->update_awaitingactivation(); $awaitingusers = $cache->read('awaitingactivation');
The time difference between frames (ps).  If :attr:`time` is set, then `dt` will be ignored. filename: string, optional The name of the file from which this instance is created. Set to None when created from an array """ super(MemoryReader, self).__init__()
# @since 2.2.6 def read_with_one_retry yield rescue Error::SocketError, Error::SocketTimeoutError yield end
* <p>Nested transactions such as creating a new table may fail. Those failures alone do * not necessarily result in a failure of the catalog-level transaction. * * <p>Implementations of {@code TransactionalCatalog} are responsible for monitoring all * table level operations that are spawned from this catalog and ensure that all nested * transactions that are completed successfully are either exposed atomically or not. * */ public interface TransactionalCatalog extends Catalog, AutoCloseable {
{ LogManager.Configuration = CreateConfigurationFromString(@" <nlog> <targets><target name='debug' type='Debug' layout='${message:padding=-3:padcharacter=x:fixedlength=true}' /></targets> <rules> <logger name='*' minlevel='Debug' writeTo='debug' /> </rules>
`num_outputs` : int, optional If specified, denotes the number of TensorLists that are produced by the source function. If set, the operator returns a list of ``DataNode`` objects, otherwise a single ``DataNode`` object is returned. Keyword Args ------------
please use format(motif, format_spec). """ warnings.warn( "Motif.format has been deprecated, and we intend to remove it in a " "future release of Biopython. Instead of motif.format(format_spec), " "please use format(motif, format_spec).", BiopythonDeprecationWarning, ) return self.__format__(format_spec)
user_id, limit=min(_parse_int_arg("count", DEFAULT_ITEMS_PER_GET), MAX_ITEMS_PER_GET), from_id=min_ts, to_id=max_ts ) listen_data = [] for listen in listens:
} } bool ArtifactsBar::ActionBarLeftMouseSingleClick( const fheroes2::Point & /*unused*/, Artifact & art, const fheroes2::Rect &  /*unused*/) { if ( isMagicBook( art ) ) { const bool isMbSelected = ( !isSelected() || isMagicBook( *GetSelectedItem() ) );
} func (g Graph) UpdateDrive(w http.ResponseWriter, r *http.Request) { driveID, err := url.PathUnescape(chi.URLParam(r, "driveID")) if err != nil { errorcode.InvalidRequest.Render(w, r, http.StatusBadRequest, "unescaping drive id failed") return } if driveID == "" {
// eventMessage protected int eventMessageLength = 163; protected int eventMessageSubLength = 160; /** postprocessor for a task builder */ protected TaskPostProcessor taskPostProcessor = null;
public function up() { Schema::table('settings', function (Blueprint $table) { $table->boolean('labels_display_company_name')->default(0); }); }
} private void check(@Nullable StatementTree tree, VisitorState state) { if (tree != null && tree.getKind() != Tree.Kind.BLOCK && tree.getKind() != Tree.Kind.EMPTY_STATEMENT) { state.reportMatch(buildDescription(tree) .addFix(SuggestedFix.replace(tree, "{" + state.getSourceForNode(tree) + "}")) .build());
# out/<build_dir>/ at time of build generation (chromium only). path = utils.remove_prefix(path, '../../') # Remove /proc/self/cwd prefix added by Bazel. path = utils.remove_prefix(path, '/proc/self/cwd/') # Cross-platform way to determine path absoluteness.
_base_ = 'deformable_detr_r50_8x2_50e_coco.py' model = dict(bbox_head=dict(with_box_refine=True))
# Get the display name. # # @return [ String ] The display name. def display_name self.class.name.gsub(/.*::/, '')
query = QueryResult([hit11]) self.assertEqual(hit11, query["hit1"]) self.assertEqual(hit11, query["alt1"]) self.assertNotEqual(hit11.id, "alt1") hit11._id_alt = [] def test_delitem_string_ok(self):
// RuntimePlatform configuration. linuxOS = "LINUX" x86Arch = "X86_64" )
TARGET_DEVICE_ARGS="--target-device mac" ;; esac find "${PWD}" -name "*.xcassets" -print0 | xargs -0 actool --output-format human-readable-text --notices --warnings --platform "${PLATFORM_NAME}" --minimum-deployment-target "${IPHONEOS_DEPLOYMENT_TARGET}" ${TARGET_DEVICE_ARGS} --compress-pngs --compile "${BUILT_PRODUCTS_DIR}/"${BUILT_PRODUCTS_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}" fi EOS end
using NLog.Internal; using NLog.LayoutRenderers; public class FileTargetTests : NLogTestBase { private readonly ILogger logger = LogManager.GetLogger("NLog.UnitTests.Targets.FileTargetTests");
/// </summary> public partial class GenericBatchingBatcher : AbstractBatcher { private readonly int? _maxNumberOfParameters; private readonly BatchingCommandSet _currentBatch; private int _totalExpectedRowsAffected; private StringBuilder _currentBatchCommandsLog;
def tick(self): self.health_record.heartbeat() self.cell = self.get_meta_cell() inventory.update_web_inventory() now = time.time() * 1000
{ $transList = []; foreach ($list as $current) { $transList[] = $this->translateWithPrefix($transPrefix, $current); } return $transList; }
} // RecordError will record err as a span event for this span. This will // not set an error status to span. If this span is not being recorded or // err is nil than this method does nothing. func (s *span) RecordError(err error, opts ...trace.EventOption) { if s == nil || err == nil || !s.IsRecording() {
import tech.pegasys.pantheon.util.ExceptionUtils; import java.time.Duration; import java.util.Collection; import java.util.concurrent.CompletableFuture; import org.apache.logging.log4j.LogManager;
long currentLogicOffset = mappedFile.getWrotePosition() + mappedFile.getFileFromOffset(); if (expectLogicOffset < currentLogicOffset) { //commit's log repeat build consume queue. log.warn("build consume queue idempotent, expectLogicOffset: {} currentLogicOffset: {} Topic: {} QID: {} Diff: {}", expectLogicOffset, currentLogicOffset, this.topic, this.queueId, expectLogicOffset - currentLogicOffset); return true;
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4481-SEA 1645547197 992781406</p> <hr> <p>Varnish cache server</p> </body>
frame.replace_nas_in_column(icol, replacement_value) def sort_column(self, frame): if frame.ncols == 0: return icol = random.randint(0, frame.ncols - 1) print("[10] Sorting column %d ASC" % icol) if python_output:
*/ void destroy(); }
System.exit(1); } String name = args[0]; AthenaClient athenaClient = AthenaClient.builder() .region(Region.US_WEST_2) .build();
if (\Config::get('autologin') > 0 && ($strCookie = \Input::cookie('FE_AUTO_LOGIN'))) { // Try to find the user by his auto login cookie if ($this->findBy('autologin', hash_hmac('sha256', $strCookie, \System::getContainer()->getParameter('kernel.secret'))) !== false) { // Check the auto login period if ($this->createdOn >= (time() - \Config::get('autologin')))
def _to_int(value): """Transforms a value into a database integer (or None).""" # pylint: disable=no-else-return # TODO: Investigate adding a try around this and simplifying. if value is None: return None elif not value:
(*appInstance).Workloads = make([]models.WorkloadSvc, len(appWkd)) for i, wkd := range appWkd { wkdSvc := &models.WorkloadSvc{WorkloadName: wkd.Workload} services, _ := in.k8s.GetServices(namespace, wkd.Deployment.Spec.Template.Labels) if err != nil { return *appInstance, err }
}; public static readonly Dictionary<string, string> SpecialYearPrefixesMap = new Dictionary<string, string> { { @"fiscal", @"FY" }, { @"school", @"SY" }, { @"fy", @"FY" }, { @"sy", @"SY" } };
if distro_name == "debian": if "sid" in distro_version or Version(distro_version) > Version("7"): return DebianOSModernUtil() else: return DebianOSBaseUtil() if distro_name == "redhat" \ or distro_name == "centos" \
}) _, err = handshakeService.Handle(stream1, node2AddrInfo.ID) if err != ErrHandshakeDuplicate { t.Fatalf("expected %s, got %s", ErrHandshakeDuplicate, err) } }) t.Run("Error - invalid ack", func(t *testing.T) { handshakeService, err := New(node1Info.Overlay, string(node1Info.Underlay), signer1, 0, logger) if err != nil { t.Fatal(err) }
ThreeBytesField("seq", RandShort()), ConditionalField(BitField("msg_priority", 0, 4), lambda pkt:pkt.MP == 1), ConditionalField( MultipleTypeField( [(BitField("SPARE3", 0, 4), lambda pkt: pkt.MP == 1)], ByteField("SPARE3", 0) ), lambda pkt: pkt.MP in [0, 1] ) ]
return msg; } float Monster::GetUpgradeRatio(void) { return GameStatic::GetMonsterUpgradeRatio();
var Must = metric.Must type correctnessBatcher struct { newAggCount int64 t *testing.T  records []export.Record }
public static final SqlFunction CURRENT_TIMESTAMP = new SqlAbstractTimeFunction("CURRENT_TIMESTAMP", SqlTypeName.TIMESTAMP); /** * The <code>CURRENT_DATE</code> function. */
// Coburn: We shouldn't blurt out the Mirror thank you if we're running in a standalone build // or a server (headless) build. While it's nice to advertise the library, I don't think having // it pop its head up outside of the Editor is a good idea. #if UNITY_EDITOR Debug.Log("Thank you for using Mirror! https://mirror-networking.com"); #endif
raise CorpusPruningException('Failed to sync corpus to disk.') if not self.quarantine_corpus.rsync_to_disk(self.quarantine_corpus_path): logs.log_error('Failed to sync quarantine corpus to disk.', fuzz_target=self.fuzz_target) if not self.shared_corpus.rsync_to_disk(self.shared_corpus_path): logs.log_error('Failed to sync shared corpus to disk.', fuzz_target=self.fuzz_target) self._cross_pollinate_other_fuzzer_corpuses()
let vnode = c._prevVNode = coerceToVNode(c.render(c.props, c.state, c.context)); c._dirty = false; if (c.getChildContext!=null) { context = assign(assign({}, context), c.getChildContext()); }
assertEquals("00000000-0000-4000-8000-000000000000", min.getString()); // Test conversion from ValueJavaObject to ValueUuid UUID origUUID = UUID.fromString("12345678-1234-4321-8765-123456789012"); ValueJavaObject valObj = ValueJavaObject.getNoCopy(origUUID, null, null); Value valUUID = valObj.convertTo(Value.UUID); assertTrue(valUUID instanceof ValueUuid); assertTrue((valUUID.getString().equals("12345678-1234-4321-8765-123456789012"))); assertTrue(valUUID.getObject().equals(origUUID)); ValueJavaObject vo_string = ValueJavaObject.getNoCopy(new String("This is not a ValueUuid object"), null, null); assertThrows(DbException.class, vo_string).convertTo(Value.UUID);
import queue from data_generator.resource import RESOURCE_DEPENDENCY_MAP from data_generator.resource import RESOURCE_GENERATOR_FACTORY from data_generator.file_handler import create_file_and_writer_listener
* @return boolean true if the passed $nodeType is allowed as child node * @throws NodeTypeNotFoundException */ public function isNodeTypeAllowedAsChildNode(NodeType $nodeType): bool { if ($this->isAutoCreated()) { return $this->getParent()->getNodeType()->allowsGrandchildNodeType($this->getName(), $nodeType);
BLACKBOXTEST(BlackBox, ReqRepVolatileHelloworldRequesterCheckWriteParams) { ReqRepAsReliableHelloWorldRequester requester; requester.durability_kind(eprosima::fastrtps::VOLATILE_DURABILITY_QOS).init(); ASSERT_TRUE(requester.isInitialized()); requester.send(1); }
# @since 2.1.0 attr_reader :fs # @return [ Object ] file_id The id of the file being uploaded. # # @since 2.1.0 attr_reader :file_id
import pytest from requests.exceptions import RequestException  pytestmark = pytest.mark.tendermint VALIDATORS_ENDPOINT = '/api/v1/validators/'
else { queryCollection.Add("options", "0"); queryCollection.Add("search", query.GetQueryString()); } var response = await RequestStringWithCookiesAndRetry(SearchUrl + queryCollection.GetQueryString());
caffe_set(top_count, Dtype(-1), top_mask); } else { mask = max_idx_->mutable_cpu_data(); caffe_set(top_count, -1, mask); } caffe_set(top_count, Dtype(-FLT_MAX), top_data); // The main loop
// slug built from normalized (by provider) owner and repo name vcsSlug: computed('ownerName', 'vcsName', function () { return `${this.ownerName}/${this.vcsName}`; }), formattedSlug: computed('owner.login', 'name', function () {
var Logger otellog.Logger = otellog.NewDefaultLogger(os.Stdout, otellog.LogLevelInfo) func Tracef(format string, args ...interface{}) { Logger.Log(otellog.LogLevelTrace, printfArgs{format, args}) }  func Trace(args ...interface{}) { Logger.Log(otellog.LogLevelTrace, printArgs(args)) }  func Debugf(format string, args ...interface{}) { Logger.Log(otellog.LogLevelDebug, printfArgs{format, args}) }
st, err := s.host.NewStream(ctx, peerID, protocol.ID(swarmStreamName)) if err != nil { if st != nil { s.logger.Warningf("Stream experienced unexpected early close") _ = st.Close() } if err == multistream.ErrNotSupported || err == multistream.ErrIncorrectVersion {
$this->routeCollection->add( '_redirect_route_' . $redirect->getId(), new Route($redirect->getOrigin(), [ '_controller' => 'FrameworkBundle:Redirect:urlRedirect', 'path' => $redirect->getTarget(), 'permanent' => $redirect->isPermanent(), ], [], ['utf8' => $needsUtf8]) ); } }
outputStream = fs.create(new Path(file), false, bufferSize, (short) rep, block); } BCFile.Writer _cbw = new BCFile.Writer(outputStream, options.getRateLimiter(), compression, conf, acuconf); return new RFile.Writer(_cbw, (int) blockSize, (int) indexBlockSize, samplerConfig, sampler); }
} $events = [ 'rocket_purge_time_event'                      => __( 'Scheduled Cache Purge', 'rocket' ), 'rocket_database_optimization_time_event'      => __( 'Scheduled Database Optimization', 'rocket' ), 'rocket_database_optimization_cron_interval'   => __( 'Database Optimization Process', 'rocket' ), 'rocket_preload_cron_interval'                 => _x( 'Preload', 'noun', 'rocket' ), 'rocket_critical_css_generation_cron_interval' => __( 'Critical Path CSS Generation Process', 'rocket' ), ]; $delay = rocket_get_constant( 'DISABLE_WP_CRON' ) ? HOUR_IN_SECONDS : 5 * MINUTE_IN_SECONDS;
Verbosef("the repository. Losing your password means that your data is\n") Verbosef("irrecoverably lost.\n") } else { Verbosef("Please note that you need the masterkey %s to access the repository.\n", gopts.MasterKeyFile) Verbosef("Losing your masterkey file means that your data is irrecoverably lost.\n") }
return AbstractBlock::operator==(rhs); } BlockVariant *BlockVariant::clone() const { return new BlockVariant(*this); }
'memory://thisshouldntbethebroker') assert self.app.conf.broker_url == prepatch_broker_url def test_broker_dynamic_setting(self): prepatch_broker_url = 'memory://thisshouldbethebroker' self.app.conf.broker_url = prepatch_broker_url assert self.app.conf.broker_url == prepatch_broker_url  def test_table(self): assert self.app.conf.table(with_defaults=True) assert self.app.conf.table(with_defaults=False)
* @param string $function Function (box) name. */ function rocket_dismiss_box( $function ) { $actual = get_user_meta( get_current_user_id(), 'rocket_boxes', true ); $actual = array_merge( (array) $actual, [ $function ] ); $actual = array_filter( $actual ); $actual = array_unique( $actual ); update_user_meta( get_current_user_id(), 'rocket_boxes', $actual ); delete_transient( $function ); }
{ return tokenJson["access_token"].Value<string>(); } return null; }
else: context['summary'] = _("Products matching '%(query)s'") % {'query': q} context['search_term'] = q return context
return false; } public boolean supportsFunction(SqlOperator operator, RelDataType type, List<RelDataType> paramsList) { return true; }
} from 'preact'; import { applyEventNormalization } from './events'; const CAMEL_PROPS = /^(?:accent|alignment|arabic|baseline|cap|clip|color|fill|flood|font|glyph|horiz|marker|overline|paint|stop|strikethrough|stroke|text|underline|unicode|units|v|vector|vert|word|writing|x)[clipPathUnits][A-Z]/; // Some libraries like `react-virtualized` explicitly check for this. Component.prototype.isReactComponent = {};
// THE POSSIBILITY OF SUCH DAMAGE. // namespace NLog.UnitTests.LayoutRenderers { using System; using System.Reflection; using System.Threading; using System.IO; using System.Threading.Tasks; using Xunit; public class CallSiteTests : NLogTestBase
networkSceneName = newSceneName; //This should probably not change if additive is used } void OnSceneLoaded(Scene scene, LoadSceneMode sceneMode = LoadSceneMode.Single) { // NOTE: this cannot use NetworkClient.allClients[0] - that client may be for a completely different purpose.
// No validation is performed on the returned SpanConfig (e.g. no uniqueness // checking or bounding of data), it is left to the SDK to perform this // action. func NewSpanStartConfig(options ...SpanStartOption) *SpanConfig { c := new(SpanConfig) for _, option := range options { option.applySpanStart(c)
if (sgv.getMills() > latestDateInReceivedData) latestDateInReceivedData = sgv.getMills(); } // Was that sgv more less 15 mins ago ? boolean lessThan15MinAgo = false; if((System.currentTimeMillis()-latestDateInReceivedData)/(60 * 1000L) < 15L ) lessThan15MinAgo = true; if(Notification.isAlarmForStaleData() && lessThan15MinAgo){ MainApp.bus().post(new EventDismissNotification(Notification.NSALARM)); } BroadcastSgvs.handleNewSgv(sgvs, MainApp.instance().getApplicationContext(), isDelta);
return nil, fmt.Errorf("%s: failed to register json node: %w", op, err) } // serializedStderr will be shared among all StderrSinks so their output is not // interwoven serializedStderr := serializedWriter{ w: os.Stderr, l: serializationLock, } // we need to keep track of all the Sink filenames to ensure they aren't
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4444-SEA 1645549731 1667987635</p> <hr> <p>Varnish cache server</p> </body>
def test_percentchange(self, seed_value, window_length): pct_change = PercentChange( inputs=[EquityPricing.close, ], window_length=window_length, )
// default network option // Then we have no control over genesis default value here. @CommandLine.Option( names = {"--genesis-file"}, paramLabel = MANDATORY_FILE_FORMAT_HELP, description = "The path to genesis file. Setting this option makes --network option ignored and requires --network-id to be set." ) final File genesisFile = null; }
Returns: An encoded list of integers representing code points. """ if sys.version_info.major == 3: return list(string_data)  result = list(map(ord, string_data)) def decode_to_text(encoded_list):
TEST_F(SimulatorTest, ValidWhenPreviousBlock) { // proposal with height 2 => height 1 block present => new block generated std::vector<shared_model::proto::Transaction> txs = {makeTx(), makeTx()}; auto validation_result = std::make_unique<iroha::validation::VerifiedProposalAndErrors>();
<%= render 'shared/bottom_cta', button: create_new_account_button, heading: "Haven't signed up yet?", sub_heading: '' %>
return true; } s2n_cert_auth_type client_auth_status = S2N_CERT_AUTH_NONE; s2n_connection_get_client_auth_type(conn, &client_auth_status);  if ((conn->mode == S2N_SERVER) && (client_auth_status != S2N_CERT_AUTH_NONE) && !s2n_is_tls13_fully_supported()) { /* If we're a Server that is going to request a client certificate, and we don't support RSA PSS, then * downgrade to TLS 1.2 in case the client attempts to send an RSA PSS Certificate. */ return true; }  if ((conn->mode == S2N_CLIENT) && !s2n_is_tls13_fully_supported()) { /* There are some TLS Servers in the wild that will always choose RSA PSS if the client claims to support TLS 1.3 * even if the client does not advertise support for RSA PSS in the SignatureScheme extension. In order to work
const char *kPeerFindFail = "Failed to find requested peer"; struct TimerWrapper : public val::FieldValidator { explicit TimerWrapper(iroha::ts64_t t) : FieldValidator(val::FieldValidator::kDefaultFutureGap, [=] { return t; }) {} };
anonymous_mode: discussion&.anonymous_mode? ), mentor_solution: mentor_solution, exemplar_files: exemplar_files, notes: exercise.mentoring_notes_content, out_of_date: solution.out_of_date?, download_command: solution.mentor_download_cmd, scratchpad: {
} // Show the loading indicator until data has been fetched. if (totalPagesFromData === null) { return fullPageLoadingIndicator; }
self.unCommitted[0][1].items()]) self.unCommitted = self.unCommitted[1:] else: logger.warning('{} is trying to commit a batch with state root {} ' 'but no uncommitted found'.format(self, stateRoot)) def setVerkey(self, idr, verkey): # This method acts as if guardianship is being terminated.
addr, err := s.addressBook.Get(p) if err != nil { if errors.Is(err, storage.ErrNotFound) { s.logger.Debugf("Peer not found %s", p) continue } return err
edge_shuffled = edge_mapping.shape != (0,) use_bcast = op not in ['copy_lhs', 'copy_rhs'] and u_shp[1:] != e_shp[1:] # pass edge_mapping to tvm only when array packing will be used use_idx = num_feat_partitions > 1 and not use_bcast and use_e f_input = [indptr, indices] key = (num_rows, num_cols, nnz, op, reduce_op, u_shp, e_shp, use_idx, \ num_feat_partitions, num_col_partitions, indice_type, feat_type, target)
return tokenSignature; } String getCustomAuthorizerName() { return customAuthorizerName; } String getCustomAuthorizerLamdbaArn() { return customAuthorizerLambdaArn; }
return dh @classmethod def from_store(cls, path, basename, key_size, passphrase: typing.Optional[bytes] = None): ca_path = os.path.join(path, basename + "-ca.pem") if not os.path.exists(ca_path): key, ca = cls.create_store(path, basename, key_size)
if(!$mybb->input['action_type']) { $errors[] = $lang->error_missing_action_type; } if(!$errors)
logCxt := logCxt.WithField("dest", dest) // Check if we should remove routes not added by us if !r.removeExternalRoutes && route.Protocol != r.deviceRouteProtocol { logCxt.Debug("Syncing routes: not removing route as it is not marked as Felix route") continue }
}; }; // Debounce compilation since it's expensive. // This also avoids prematurely warning the user about invalid syntax, // eg when in the middle of typing a variable name. _compileToState = debounce((code: string) => { this.setState(state => this._compile(code, state), this._persistState); }, DEBOUNCE_DELAY); _onEnvPresetSettingChange = (name: string, value: any) => { this.setState(
self._proc.error.connect(self.on_proc_error) editor = config.get('general', 'editor') executable = editor[0] args = [arg.replace('{}', self._filename) for arg in editor[1:]] log.procs.debug("Calling \"{}\" with args {}".format(executable, args)) self._proc.start(executable, args)
import AriaStatic from 'x/ariaStatic'; import AriaDynamic from 'x/ariaDynamic'; // https://github.com/salesforce/lwc/blob/67512dfea33ef529836d3fd483f56f72d3debc5c/packages/%40lwc/template-compiler/src/parser/constants.ts#L18-L28 const ID_REFERENCING_ARIA_ATTRS = new Set([ 'aria-activedescendant', 'aria-controls',
import ( "fmt" "context"  cloudevents "github.com/cloudevents/sdk-go" cepubsub "github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub" "github.com/GoogleCloudPlatform/cloud-run-events/pkg/kncloudevents" )
[](mega::UnifiedSync* us, const SyncError&, error e){ if (us && us->mSync) { cout << "Sync added and running. backupId = " << toHandle(us->mConfig.getBackupId()); } else if (us) {
} }() err = cmd.communicationChannel.Send(communication.NODE_REGISTER, options.NodeKey) if err != nil { return err }
#include <OpenSim/Common/Storage.h> #include "ControlSet.h" #include "ControlLinear.h"
private int index; private int dataSize = 0; private long lastDispatchTime = 0L;
// Attest invokes all workload attestor plugins against the provided PID. If an error // is encountered, it is logged and selectors from the failing plugin are discarded. func (wla *attestor) Attest(ctx context.Context, pid int32) []*common.Selector { counter := telemetry_workload.StartAttestationCall(wla.c.Metrics) defer counter.Done(nil)  log := wla.c.Log.WithField(telemetry.PID, pid) plugins := wla.c.Catalog.GetWorkloadAttestors()
from .sklearn import LGBMModel def _check_not_tuple_of_2_elements(obj: Any, obj_name: str = 'obj') -> None: """Check object is not tuple or does not have 2 elements.""" if not isinstance(obj, tuple) or len(obj) != 2: raise TypeError(f"{obj_name} must be a tuple of 2 elements.")
A list of transactions containing related to the asset. If no transaction exists for that asset it returns an empty list `[]` """ cursor = self.backend.get_transactions_by_asset_id(asset_id) return [Transaction.from_dict(tx) for tx in cursor] def get_asset_by_id(self, asset_id):
} public double getQueueFullness() { LOG.info( "Queue size: {}, queue limit: {}, queue fullness: {}", statusUpdatesExecutor.getQueue().size(), statusUpdatesExecutor.getQueueLimit(), (double) statusUpdatesExecutor.getQueue().size() / statusUpdatesExecutor.getQueueLimit() ); return ( (double) statusUpdatesExecutor.getQueue().size() / statusUpdatesExecutor.getQueueLimit()
group : array-like or None, optional (default=None) Group data of training data. eval_set : list or None, optional (default=None) A list of (X, y) tuple pairs to use as validation sets. eval_names : list of strings or None, optional (default=None) Names of eval_set. eval_sample_weight : list of arrays or None, optional (default=None)
{ if (empty($GLOBALS['TL_DCA'][$strTable]['config']['ptable'])) { $tags[] = 'contao.db.' . $strTable;  return; }
annotations. """ raise ImportError( "Bio.Alphabet has been removed from Biopython. In many cases, the alphabet can simply be ignored and removed from scripts. In a few cases, you may need to specify the ``molecule_type`` as an annotation on a SeqRecord for your script to work correctly. Please see https://github.com/biopython/biopython/issues/3156 for more information." )
return this.storage.billingStep || STEPS.ONE; }), billingInfoExists: computed('existingBillingInfo.{firstName,lastName,billingEmail,city,zipCode,country}', function () { const billingInfo = this.existingBillingInfo; if (billingInfo) return billingInfo.firstName && billingInfo.lastName && billingInfo.billingEmail && billingInfo.address
bool RTPSParticipantImpl::update_attributes( const RTPSParticipantAttributes& patt) { static_cast<void>(patt); return false; }
assert aggregate == EXPECTED_AGGREGATE; return aggregate; } } /** Randomized update of every element */
} public Object visit(ASTFieldDeclaration node, Object data) { Set<Modifier> unnecessary = EnumSet.noneOf(Modifier.class); if (node.isSyntacticallyPublic()) { unnecessary.add(Modifier.PUBLIC); }
access_key_id: ENV['S3_ACCESS_KEY_ID'], secret_access_key: ENV['S3_SECRET_ACCESS_KEY'] }, path: path, bucket: ENV['S3_BUCKET'], s3_protocol: ENV['PROTOCOL'] }
func CopyContents(srcDir, dstDir string) (err error) { const squashErrors = false isSrcDir, err := file.IsDir(srcDir) if err != nil { return err }  if !isSrcDir { return fmt.Errorf("source (%s) must be a directory", srcDir) }  err = os.MkdirAll(dstDir, os.ModePerm) if err != nil { return
def test_can_send_bytes_bytearray_objects_with_files(self): # Test bytes: data = {'a': 'this is a string'} files = {'b': b'foo'} r = requests.Request('POST', httpbin('post'), data=data, files=files) p = r.prepare()
*/ public void setCurrentGroupExprData(Expression expr, Object obj) { if (cachedLookup == expr) { assert currentGroupByExprData[cachedLookupIndex] == null; currentGroupByExprData[cachedLookupIndex] = obj; } Integer index = exprToIndexInGroupByData.get(expr); if (index != null) { assert currentGroupByExprData[index] == null; currentGroupByExprData[index] = obj; return; }
end parser.on('--parallel-test NUMBER', 'Run the tests with the specified number of parallel threads') do |n| options[:thread_maximum] = if !n.nil? begin Integer(n) rescue ArgumentError
return rules .stream() .filter(filter) .allMatch(rule -> rule.validate(header, parent, protocolContext)); } private Optional<BlockHeader> getParent(
if c.direction != _directionInbound { msg = _errorOutbound } if info != nil { if info.Name != "" { msg = msg + ": " + info.Name } if info.Message != "" { msg = msg + ": " + info.Message } } ce = c.edge.logger.Check(zap.ErrorLevel, msg) }
data = self.form.cleaned_data if data.get('upc'): # If there's an exact UPC match, it returns just the matched # product. Otherwise does a broader icontains search. qs_match = queryset.filter(Q(upc=data['upc']) | Q(parent__upc=data['upc']))  if qs_match.exists(): queryset = qs_match else: queryset = queryset.filter(Q(upc__icontains=data['upc']) | Q(parent__upc__icontains=data['upc'])) if data.get('title'): queryset = queryset.filter(title__icontains=data['title'])
InitQTextMsg(TEXT_MUSH12); quests[Q_MUSHROOM]._qactive = QUEST_DONE; towner[t]._tMsgSaid = TRUE; AllItemsList[Item->IDidx].iUsable = TRUE; /// BUGFIX: This will cause the elixir to be usable in the next game  } else if (PlrHasItem(p, IDI_BRAIN, i) != NULL && quests[Q_MUSHROOM]._qvar2 != TEXT_MUSH11) { towner[t]._tbtcnt = 150; towner[t]._tVar1 = p;
self.props_file = None self.class_path = [] self._tools = [] def install_required_tools(self): self._check_tools(self._tools) def _add_jar_tool(self, req_tool): self._tools.append(req_tool) self.class_path.append(req_tool.tool_path)  def prepare(self): self.script = self.get_script_path(required=True)
o.logger.Debug("new submission found", zap.Any("event", *event)) if !o.transactionValid(ctx, value.TransactionId) { o.logger.Warn("failed to confirm transaction, transaction invalid", zap.Stringer("transaction_id", value.TransactionId)) continue }
mp_err(log, "Failed to retrieve the Prime Handle from handle %d (%d).\n", object, descriptor->objects[object].fd); goto fail; } if(object == 0) { modifiers[object] = descriptor->objects[object].format_modifier; } }
EXPECT_SUCCESS(s2n_connection_set_io_pair(server_conn, &io_pair)); EXPECT_SUCCESS(try_handshake(server_conn, client_conn, async_handler_sign_with_different_pkey_and_apply)); /* Free the data */ EXPECT_SUCCESS(s2n_connection_free(server_conn));
JetPlanExecutor( MappingCatalog catalog, AbstractJetInstance jetInstance, Map<Long, JetQueryResultProducer> resultConsumerRegistry ) { this.catalog = catalog; this.jetInstance = jetInstance; this.resultConsumerRegistry = resultConsumerRegistry; }
class AddVisibleToPartnersToItems < ActiveRecord::Migration[6.0] def change add_column :items, :visible_to_partners, :boolean, default: true, null: false end end
private final BiConsumer<? super A, ? super T> accumulateF; private final Function<A, R> finishAccumulationF; private final BinaryOperator<A> combineAccF; private final FlatMapper<Punctuation, Session<K, R>> expiredSessionFlatmapper; SessionWindowP( long sessionTimeout,
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4431-SEA 1645537648 3787109307</p> <hr> <p>Varnish cache server</p> </body>
config := NewConfigLocal() if params.CleanBlockCacheCapacity > 0 { log.Debug("overriding default clean block cache capacity from %d to %d", config.BlockCache().GetCleanBytesCapacity(), params.CleanBlockCacheCapacity) config.BlockCache().SetCleanBytesCapacity(params.CleanBlockCacheCapacity) } config.SetBlockOps(NewBlockOpsStandard(config, defaultBlockRetrievalWorkerQueueSize))
ModelCalibrator::ModelCalibrator() { constructProperties(); _calibrated = false; }
return err } commitsInfo = append(commitsInfo, logNode{meta, prevHash, ph}) numLines--
evts = self.phyloxml.phylogenies[4].clade.events # Container behavior: __len__, __contains__ self.assertEqual(len(evts), 1) self.assertIn("speciations", evts) self.assertNotIn("duplications", evts) # Attribute access: __get/set/delitem__ self.assertEqual(evts["speciations"], 1) self.assertRaises(KeyError, lambda k: evts[k], "duplications")  # noqa: E731
except shellutil.CommandError as cmd_err: if chk_err: msg = "Failed to eject dvd: ret={0}\n[stdout]\n{1}\n\n[stderr]\n{2}"\ .format(cmd_err.returncode, cmd_err.stdout, cmd_err.stderr) raise OSUtilError(msg)
/// Available type converters - user converters followed by any defaults /// </summary> public IEnumerable<ITypeConverter> TypeConverters { get; set; } } } No newline at end of file
committee hotstuff.Committee, signerID flow.Identifier, stakingPriv crypto.PrivateKey, beaconKey crypto.PrivateKey) *CombinedSigner { local, err := local.New(nil, stakingPriv) require.NoError(t, err)
* client (and a local Realm file on disk), and the server (and a remote Realm at a given URL stored on a Realm Object Server). * Sessions are always created by the SDK and vended out through various APIs. The lifespans of sessions * associated with Realms are managed automatically. * @memberof Realm.Sync */ class Session { /**
protected virtual bool IsUpToDate(ISet<string> spaces, long timestamp) { if (spaces.Count == 0) return true;  return _updateTimestampsCache.IsUpToDate(spaces, timestamp); } } }
type test_context struct { suite.Suite connManager         *connectionManager fakeDiscoveryClient *server.ClientFake fakeOpenVpn         *fake_openvpn_client fakeDialog          *fake_dialog } func (tc *test_context) SetupTest() {
network.Notifiee // handhsake service can be the receiver for network.Notify } func New(overlay swarm.Address, underlay string, signer crypto.SignRecoverer, networkID uint64, logger logging.Logger) (*Service, error) { toSign := []byte(underlay + strconv.FormatUint(networkID, 10)) signature, err := signer.Sign(toSign) if err != nil { return nil, err
<< LOG_KV("nodeID", nodeID.substr(0, 4)); return false; } /// return early when the certificate is invalid if (!preverified) { return false;
$this->currentCustomerUser->getPricingGroup() ); return $queryBuilder ->select('count(p.id)') ->getQuery()
if err != nil { return nil, err } vres := newViewedViewtype(res, view) if err := vres.Validate(); err != nil { return nil, err }
if ( false === $args['single'] && ! wp_is_numeric_array( $args['default'] ) ) { $args['default'] = array( $args['default'] ); } if ( ! has_filter( "default_{$object_type}_metadata", 'filter_default_metadata' ) ) { add_filter( "default_{$object_type}_metadata", 'filter_default_metadata', 10, 5 ); } } // Global registry only contains meta keys registered with the array of arguments added in 4.6.0.
// note that we don't include the keys here as they are already included in the path func HashLeaf(path []byte, value []byte) []byte { // TODO: this is a sanity check and should be removed soon if len(path) != HashLen { hasher := hash.NewSHA3_256() _, _ = hasher.Write(path) _, _ = hasher.Write(value) return hasher.SumHash() } var out [HashLen]byte hasher := new256() hasher.hash256Plus(&out, path, value) // path is always 256 bits return out[:]
private static final int NODE_ID_SIZE = 64; private static final Pattern DISCPORT_QUERY_STRING_REGEX = Pattern.compile("^discport=([0-9]{1,5})$"); private static final Pattern NODE_ID_PATTERN = Pattern.compile("^[0-9a-fA-F]{128}$"); private final BytesValue nodeId;
db.execSQL("ALTER TABLE " + PodDBAdapter.TABLE_NAME_FEEDS + " ADD COLUMN " + PodDBAdapter.KEY_FEED_PLAYBACK_SPEED + " TEXT"); db.execSQL("ALTER TABLE " + PodDBAdapter.TABLE_NAME_FEED_MEDIA + " ADD COLUMN " + PodDBAdapter.KEY_MEDIA_LAST_PLAYBACK_SPEED + " REAL DEFAULT " + LAST_PLAYBACK_SPEED_UNSET); } }
throws AccumuloSecurityException, AccumuloException, NamespaceNotFoundException { if (!exists(namespace)) throw new NamespaceNotFoundException(null, namespace, null); Map<String,String> copy = Map.copyOf(this.getConfiguration(namespace)); for (IteratorScope scope : scopes) { String root = String.format("%s%s.%s", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase(), name);
fastrtps::rtps::RTPSParticipantAttributes patt; set_attributes_from_qos(patt, qos_); rtps_participant_->update_attributes(patt);  // Reset flag qos_.user_data().hasChanged = false; } return ReturnCode_t::RETCODE_OK;
} } func (cache *httpCache) Retrieve(target *core.BuildTarget, key []byte, files []string) *core.BuildMetadata { // We can't tell from outside if this works or not (as we can for the dir cache) // so we must assume that a target with no artifacts can't be retrieved. It's a weird // case but a test already exists in the plz test suite so... var metadata *core.BuildMetadata for _, out := range files { if !cache.retrieveOne(target, key, out) { return nil }
try { Model model("arm26.osim"); // all subcomponents are accounted for since Model constructor invokes // finalizeFromProperties(). ASSERT(model.countNumComponents() > 0); // model must be up-to-date with its properties
use Slim\Routing\RouteCollector; use Slim\Tests\Mocks\MockPsr17FactoryWithoutStreamFactory; use Slim\Tests\TestCase; use Zend\Diactoros\ResponseFactory as ZendDiactorosResponseFactory; class AppFactoryTest extends TestCase {
private static string GetResourceExtension(string resourceName) { var extension = Path.GetExtension(resourceName); return extension != null ? extension.Substring(1) : string.Empty; } } } No newline at end of file
# This file add snake case alias for coco api from pycocotools.coco import COCO as _COCO from pycocotools.cocoeval import COCOeval as _COCOeval class COCO(_COCO): """This class is almost the same as official pycocotools package.  It implements some snake case function aliases. So that the COCO class has the same interface as LVIS class. """ def __init__(self, annotation_file=None): super().__init__(annotation_file=annotation_file)
ostree_progress, NULL, &error)) { g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_FAILED, "Error pulling from repo: %s", error->message); return TRUE; }
$value = call_user_func_array( 'apply_filters', $args ); } elseif( isset( $field ) && isset( $item ) && 'permalink' == $field && 'taxonomy' == $object_type && is_array( $item ) && isset( $item[ 'taxonomy' ] ) && isset( $item[ 'term_id' ] )  ) { $value = get_term_link( (int) $item[ 'term_id' ], $item[ 'taxonomy' ] ); } elseif ( 1 == pods_v( 'display_process', $field_data[ 'options' ], 1 ) ) {
var execCommand = cli.Command{ Name:  "exec", Usage: "execute new process inside the container", Flags: []cli.Flag{ cli.StringFlag{ Name:  "console",
// In case there is more than one page, // it loops through them and adds to the `history` array if (totalPages > 1 && limit > 50) { for (let page = 2; page < totalPages + 1; page++) { const { data: pageHistory }: AdaTransactionsV1 = await getAdaHistoryByWallet(this.config, Object.assign(params, { page }));
x_seg = x_size[0] * [x_size[1]] else: x_seg = [F.shape(x)[0]] out = knn(k, x, x_seg, algorithm=algorithm, dist=dist) row, col = out[1], out[0] return convert.graph((row, col)) def _knn_graph_blas(x, k, dist='euclidean'): r"""Construct a graph from a set of points according to k-nearest-neighbor (KNN).
handleClose, handlePaymentSuccess, handleDropinReady, shouldRequestPaymentNonce, handlePaymentError } = talonProps; const actionButtons = !isLoading ? (
return graph_data if readonly: # FIXME(zhengda): we should construct a C graph index before constructing GraphIndex. gidx = GraphIndex(None, multigraph, readonly) else: handle = _CAPI_DGLGraphCreateMutable(multigraph)
receiptValidator module.ReceiptValidator sigTag           string publicKey        *fmock.PublicKey } func (s *ReceiptValidationSuite) SetupTest() { s.SetupChain() s.publicKey = &fmock.PublicKey{} s.Identities[s.ExeID].StakingPubKey = s.publicKey s.sigTag = "test_tag" s.receiptValidator = NewReceiptValidator(s.State, s.HeadersDB, s.IndexDB, s.ResultsDB, s.SealsDB, s.sigTag)
if (o-> pargc == 0 && o->fargc > 0) { /* Assume we got a auth:code combination */ std::string input(o->fargv[0]); auto n = input.find(":"); if (n > 0) { std::string auth = input.substr(0,n); std::string code = input.substr(n+1, input.length());
intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); intent.putExtra(Intent.EXTRA_STREAM, fileUri); intent.setType("image/png"); startActivity(Intent.createChooser(intent, getString(R.string.share_image_via))); } catch (IOException e) { e.printStackTrace(); }
} // Start the next batch. req = newReq() n = 0 } } if err := g.Wait(); err != nil {
/// <summary> /// Gets or sets a value indicating whether anonymized export is enabled or not. /// </summary> public bool SupportsAnonymizedExport { get; set; } } }
int result = s2n_hmac_free(state); /* Post-conditions. */ assert(result == S2N_SUCCESS); if (state != NULL) { assert(state->inner.hash_impl->free != NULL); assert(state->inner_just_key.hash_impl->free != NULL);
func (h *Host) sendSDAData(e *network.Entity, sdaMsg *SDAData) error { b, err := network.MarshalRegisteredType(sdaMsg.Msg) if err != nil { return fmt.Errorf("Error marshaling  message: %s", err.Error()) } sdaMsg.MsgSlice = b sdaMsg.MsgType = network.TypeFromData(sdaMsg.Msg)
let oldVNode = replaceNode && replaceNode._children || parentDom._children; let isHydrating = false; if (replaceNode === null) { isHydrating = true; } vnode = createElement(Fragment, null, [vnode]);
[Trait(Traits.Priority, Priority.One)] public async Task GivenABundleWithVersionedReference_WhenSubmittingATransaction_ThenResolvedReferenceIsVersionSpecific() { var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithVersionSpecificReference").ToPoco<Bundle>(); var fullUrlBeforeTransaction = requestBundle.Entry[0].FullUrl; var referenceBeforeTransaction = requestBundle.Entry[1].Resource.GetAllChildren<ResourceReference>().ToList()[0].Reference;
) time.sleep(36000) except NoPlayerPositionSetException: bot.event_manager.emit( 'api_error', sender=bot,
self._built = True def feed_input(self, data_node, data, layout="", cuda_stream = None): """Pass a mutlidimensional array (or a list thereof) to an output of ExternalSource. In the case of the GPU input, the data must be modified on the same stream as the one used by feed_input. See ``cuda_stream`` parameter for details. Parameters ----------
{ public virtual async Task<ApiHealthData> GetHealth(CancellationToken token = default) { var response = await _httpClient.SendAsync(CreateHttpRequest("api/v1/health"), token); return await HandleResponse<ApiHealthData>(response); } }
->example('develop') ->defaultValue('') ->end() ->scalarNode('route_prefix') ->info('Defines the path of the Contao backend.') ->validate() ->ifTrue(static fn (string $prefix) => 1 !== preg_match('/^\/\S*[^\/]$/', $prefix)) ->thenInvalid('The backend path must begin but not end with a slash. Invalid path configured: %s') ->end() ->example('/admin') ->defaultValue('/contao') ->end() ->end() ; }
// The .NET Foundation licenses this file to you under the MIT license. // See the LICENSE file in the project root for more information. // following benchmarks consume .NET Core 2.1 APIs and are disabled for other frameworks in .csproj file using System.Runtime.CompilerServices; using System.Threading;
use Neos\Flow\Mvc\Controller\MvcPropertyMappingConfigurationService; use Neos\Flow\Mvc\FlashMessage\FlashMessageService; use Neos\Flow\Mvc\View\JsonView; use Neos\Flow\Mvc\View\ViewInterface; use Neos\Flow\Security\Authentication\Controller\AbstractAuthenticationController; use Neos\Flow\Security\Exception\AuthenticationRequiredException; use Neos\Flow\Session\SessionInterface; use Neos\Flow\Session\SessionManagerInterface; use Neos\Fusion\View\FusionView; use Neos\Neos\Domain\Repository\DomainRepository; use Neos\Neos\Domain\Repository\SiteRepository; use Neos\Neos\Service\BackendRedirectionService; /** * A controller which allows for logging into the backend
private final Object executionLock = new Object(); private final ILogger logger; private String jobName;  // key: resource identifier private ConcurrentMap<String, File> localFiles = new ConcurrentHashMap<>(); // dest vertex id --> dest ordinal --> sender addr --> receiver tasklet private Map<Integer, Map<Integer, Map<Address, ReceiverTasklet>>> receiverMap = emptyMap();
func (in *TLSService) hasMeshPolicyEnabled(namespaces []string) (bool, error) { if len(namespaces) < 1 { return false, fmt.Errorf("Unable to determine mesh-wide mTLS status without access to any namespace") } // MeshPolicies are not namespaced. So any namespace user has access to
q->long_timeout = 3600; q->stats->time_when_started = timestamp_get(); q->last_time_tasks_fit_check = timestamp_get(); q->task_reports = list_create(); q->time_last_wait = 0;
"cache" end private def check_config
const { code: configCode } = config; return stores.reduce((map, store) => { const { category_url_suffix, code,
private static final String COPYRIGHT_LINE = "Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved."; private final Node node; private final ILogger logger; private volatile JetService jetService; NodeExtensionCommon(Node node) { this.node = node; this.logger = node.getLogger(getClass().getName()); } void afterStart() { jetService().getJobCoordinationService().startScanningForJobs(); }
FAKE_ORG_IAM_POLICY_MAP = [{ 'org_id': 666666, 'iam_policy': { 'bindings': [ {'role': 'roles/billing.creator', 'members': [
"context" "fmt" cpv1alpha1 "github.com/crossplane/crossplane-runtime/apis/core/v1alpha1" "github.com/crossplane/crossplane-runtime/pkg/event" "github.com/crossplane/crossplane-runtime/pkg/logging" kerrors "k8s.io/apimachinery/pkg/api/errors" "k8s.io/apimachinery/pkg/runtime" "k8s.io/klog/v2" ctrl "sigs.k8s.io/controller-runtime"
tab = append(tab, 1) } } cipherVect := *libmedco.EncryptIntVector(clientPublic, tab) testGAMap[groupAttributes.Key()] = groupAttributes testCVMap[groupAttributes.Key()] = cipherVect
}, } } filter2 = func() *universe.FilterProcedureSpec { return &universe.FilterProcedureSpec{ Fn: interpreter.ResolvedFunction{ Fn: executetest.FunctionExpression(t, `(r) => r._measurement == "cpu"`), }, } } groupBy = &universe.GroupProcedureSpec{ GroupMode: flux.GroupModeBy, GroupKeys: []string{"foo", "bar", "buz"},
return Key(k).Bool(v) } // Int creates a KeyValue with an INT64 Value type. func Int(k string, v int) KeyValue { return Key(k).Int(v) }
public const string LangMarker = @"Dut"; public const bool CheckBothBeforeAfter = false; public static readonly string TillRegex = $@"(?<till>\b(tot(dat|\s+en\s+met)?|gedurende|tijdens|ten tijde van)\b|{BaseDateTime.RangeConnectorSymbolRegex})"; public static readonly string RangeConnectorRegex = $@"(?<and>\b(en|t/m|tot(\s+(aan|en\s+met))?)\b|{BaseDateTime.RangeConnectorSymbolRegex})"; public const string ArticleRegex = @"\b(de|het|een)\b"; public const string RelativeRegex = @"\b(?<order>dit|deze|volgende?|komende?|aankomende?|aanstaande?|huidige?|vorige?|verleden|voorgaande?|vorige?|laatste|afgelopen|de|het)\b"; public const string StrictRelativeRegex = @"\b(?<order>dit|deze|volgende?|komende?|aankomende?|aanstaande?|huidige?|vorige?|verleden|voorgaande?|vorige?|laatste|afgelopen)\b";
// Set the log file, which will only create the needed directories InternalLogger.LogFile = tempFile; Assert.Equal(Directory.Exists(randomSubDirectory), shouldCreateDirectory); try {
var common_config = new configmod.ConfigSection('common', common_options); common_config.load(); // This makes the 'logout' button in the top right work. var login_widget = new loginwidget.LoginWidget('span#login_widget', common_options);  var base_url = utils.get_body_data('baseUrl').replace(/\/?$/, '/'); var ws_path = utils.get_body_data('wsPath'); var ws_url = utils.get_body_data('wsUrl');
""" @tb.must_fail(errors.EdgeQLSyntaxError, "Unexpected token.*AT", line=6, col=29) def test_edgeql_syntax_shape_20(self): """ INSERT Foo{ bar: { @weight, # this syntax may be valid in the future [IS BarLink]@special, } }; """
# Ensure coordinates are regularly sampled rtol = config.image_rtol if rtol is None else rtol validate_regular_sampling(self, 0, rtol) validate_regular_sampling(self, 1, rtol) def __setstate__(self, state):
// If the specified code is not CodeUnknown, this will not set the name field. // // This function should not be used by server implementations, use the individual // error constructors instead. This should only be used by transport implementations. func FromHeaders(code Code, name string, message string) error { switch code { case CodeOK:
} const results = await this.search(options); this.handleTitleNaturalSorting(results, options); return results; }
def test_parse_upstream_auth(): tutils.raises("Invalid upstream auth specification", cmdline.parse_upstream_auth, "") tutils.raises("Invalid upstream auth specification", cmdline.parse_upstream_auth, ":") tutils.raises("Invalid upstream auth specification", cmdline.parse_upstream_auth, ":test") assert cmdline.parse_upstream_auth( "test:test") == "Basic" + " " + base64.b64encode("test:test") assert cmdline.parse_upstream_auth( "test:") == "Basic" + " " + base64.b64encode("test:") def test_parse_setheaders():
self.phases_enabled = False while not await self.is_closeable(): await asyncio.sleep(10) await self._run_phases(services, planner) await self._cleanup_operation(services) await self.close()
const defaultMaxNumTxs = 100 // RollupTxProtocol is a protocol for collecting pending transactions. type RollupTxProtocol struct { *onet.TreeNodeInstance TxsChan chan []ClientTransaction NewTx   *AddTxRequest CtxChan chan ClientTransaction CommonVersionChan chan Version SkipchainID       skipchain.SkipBlockID LatestID          skipchain.SkipBlockID
# @since 2.1.0 def empty? if _loaded? in_memory.empty? else _added.empty? && !_unloaded.exists? end end
{ $new_badword = array( "badword" => $db->escape_string($mybb->input['badword']), "regex" => $mybb->get_input('regex', MyBB::INPUT_INT), "replacement" => $db->escape_string($mybb->input['replacement']) );
m_Socket = zmq_socket(m_Context, ZMQ_REP); const std::string fullIP("tcp://" + m_IPAddress + ":" + m_Port); zmq_bind(m_Socket, fullIP.c_str()); if (m_Profiler.IsActive)
mockExpect                      func(mock *mock_aws.MockClient) expectID                        string expectSelectors                 []*common.Selector expectCode                      codes.Code expectMessage                   string replacementTemplate             string allowList                       []string skipBlockDev                    bool
$entry = new Entries(); $entry->setUserId(1); $entry->setUrl($url); $entry->setTitle($request->request->get('title') ?: $content->getTitle()); $entry->setContent($content->getBody()); $em = $this->getDoctrine()->getManager(); $em->persist($entry);
func (rw *responseWriter) Close(httpStatusCode int) { rw.w.Header().Set(ApplicationStatusHeader, applicationStatusValue(rw.isApplicationError)) rw.w.Header().Set(AcceptsBothResponseErrorHeader, acceptValue(rw.features.AcceptsBothResponseError)) rw.w.WriteHeader(httpStatusCode) if rw.buffer != nil { // TODO: what to do with error?
std::ostringstream pt; pt << "LatencyTest_"; if (hostname) pt << asio::ip::host_name() << "_"; pt << pid << "_PUB2SUB"; PubDataparam.topic.topicName = pt.str(); PubDataparam.times.heartbeatPeriod.seconds = 0;
in_channels=256, fc_out_channels=1024, roi_feat_size=7, num_classes=4, target_means=[0., 0., 0., 0.], target_stds=[0.1, 0.1, 0.2, 0.2], reg_class_agnostic=False,
this.exportedSnapshotDetailsCache = instance.getMap(EXPORTED_SNAPSHOTS_DETAIL_CACHE); } // for tests void setResourcesExpirationMillis(long resourcesExpirationMillis) { this.resourcesExpirationMillis = resourcesExpirationMillis;
) BeforeEach(func() { felixes, etcd, client = containers.StartTwoNodeEtcdTopology() // Install a default profile that allows all ingress and egress, in the absence of any Policy. defaultProfile := api.NewProfile()
/* Should throw an error if rewriting would require an invalid stuffer state. * ( A write cursor being greater than the high water mark is an invalid stuffer state.) */ reservation.write_cursor = stuffer.high_water_mark + 1; EXPECT_FAILURE_WITH_ERRNO(s2n_stuffer_write_reservation(reservation, 0), S2N_ERR_PRECONDITION_VIOLATION); EXPECT_EQUAL(stuffer.write_cursor, expected_write_cursor); /* Happy case: successfully rewrites a uint16_t */
amrex::LoopOnCpu(section, [&](int i, int j, int k) { amrex::Dim3 si = dtos(amrex::Dim3{i,j,k}); int value = si.x + si.y*nx + si.z*nx*xy; fails += (array(i,j,k) != value);  AMREX_ASSERT(fails);  // If DEBUG, crash on first error. }); } return fails == 0;
# BSD License import networkx as nx from networkx.utils import reverse_cuthill_mckee_ordering import numpy as np # build low-bandwidth numpy matrix G = nx.grid_2d_graph(3, 3)
//go:generate dbgen -i agree.sql -p agreement -n agree -o agreeInstall.go -h ../scripts/LICENSE_HEADER import ( "context" "time" "github.com/algorand/go-algorand/config" "github.com/algorand/go-algorand/logging" "github.com/algorand/go-algorand/protocol" "github.com/algorand/go-algorand/util/db" "github.com/algorand/go-algorand/util/execpool" "github.com/algorand/go-algorand/util/timers"
sent := &testpb.TestMessage{Value: "echo"} received, err := client.Unary(ctx, sent) require.NoError(t, err) assert.Equal(t, sent, received) }) } }
namespace WP_Rocket\Engine\Activation; use League\Container\Container; /** * Plugin activation controller * * @since 3.6.3 */ class Activation { /** * Aliases in the container for each class that needs to call its activate method
void MegaApiImpl::startUploadForSupport(const char *localPath, MegaTransferListener *listener) { return startUpload(true, localPath, nullptr, nullptr, "supportdrop@mega.nz", -1, 0, false, nullptr, false, false, listener); } void MegaApiImpl::startDownload(bool startFirst, MegaNode *node, const char* localPath, int folderTransferTag, const char *appData, MegaTransferListener *listener)
def _cmp_key(self): """Unique key for the object to be used to generate the object hash""" # This key must be equal for two object considered as equal by __eq__ return self.__class__, tuple(sorted(self.indices)) def __hash__(self): """Makes the object hashable"""
$meta_input['_enable_quiz_reset'] = true === $quiz_options['allow_retakes'] ? 'on' : ''; } if ( array_key_exists( 'show_questions', $quiz_options ) ) { $meta_input['_show_questions'] = $quiz_options['show_questions']; } else { $meta_input['_show_questions'] = '';
/ std::accumulate(num_samples_list.begin(), num_samples_list.end(), 0)); std::cout << m->get_name() << " global average " << mode_string << " " << "objective function : " << avg_obj_fn << std::endl; }
end sh.echo "Build id: #{Shellwords.escape(data.build[:id])}" sh.echo "Job id: #{Shellwords.escape(data.job[:id])}" sh.echo "Runtime kernel version: #{`uname -r`.strip.untaint}" end def show_travis_build_version
except ( expat.ExpatError, SocketServer.socket.error, xmlrpclib.Fault) as exception: logger.warning('Unable to make RPC call with error: {0!s}'.format( exception)) return None def Close(self):
updated_goal = Goal(target='updated target', value='complete') objective_data.update(dict(name='an updated test objective', description='a test objective that has been updated', goals=[updated_goal.schema.dump(updated_goal)])) return objective_data
INSTALL_DIR_ES = '%s/elasticsearch' % INSTALL_DIR_INFRA TMP_ARCHIVE_ES = '/tmp/localstack.es.zip' # set up logger LOGGER = logging.getLogger(__name__)
class BigqueryDaoTest(ForsetiTestCase): """Tests for the BigqueryDao.""" @mock.patch.object(_db_connector.DbConnector, '__init__', autospec=True) def setUp(self, mock_db_connector): mock_db_connector.return_value = None
set last_status = 'failed', last_status_at = now(), status_details = 'contact method disabled', cycle_id = null, next_retry_at = null from user_contact_methods cm
if (tree.isLeaf()) { return value; } else { final String children = tree.getChildren().map(Node::toLispString).mkString(" "); return "(" + value + " " + children + ")"; } }
) // ProceduresParams contains the parameters for constructing Procedures. // This is used to construct a slice of yarpc.Procedures from the context // of a protoc plugin, i.e. protoc-gen-yarpc-go. type ProceduresParams struct { Service string Unary   []UnaryProceduresParams
if (config.networked && config.big) { return; } reconnectOften = !config.memory && config.big; testScript("testScript.sql"); testScript("comments.sql");
sb.append(","); } if (MESSAGE_DIGEST_LOCAL.get() != null) { checksum = new BigInteger(1, MESSAGE_DIGEST_LOCAL.get().digest((sb.toString()).getBytes(Charset.forName("UTF-8")))) .toString(16); } else { checksum = RandomStringUtils.randomAscii(32); }
private long id; private long distance; public long getId() { return id; } public void setId(long id) { this.id = id; } public long getDistance() { return distance; } public void setDistance(long distance) { this.distance = distance; }
# if det_bboxes is rescaled to the original image size, we need to # rescale it back to the testing scale to obtain RoIs. det_bboxes = det_bboxes[..., :4] if rescale: if not isinstance(scale_factors[0], float): scale_factors = det_bboxes.new_tensor(scale_factors) det_bboxes = det_bboxes * scale_factors.unsqueeze(1) batch_index = torch.arange( det_bboxes.size(0), device=det_bboxes.device).float().view(
vrange = vrange or ( 0 if len(v) == 0 else (int(F.asnumpy(F.max(v.tousertensor(), dim=0))) + 1)) if utype == vtype: urange = vrange = max(urange, vrange) num_ntypes = 1
* SPDX-License-Identifier: Apache-2.0 */ #include "model/sha3_hash.hpp" #include "module/irohad/ametsuchi/ametsuchi_mocks.hpp" #include "module/irohad/multi_sig_transactions/mst_mocks.hpp"
AlertDialog alert = alertDialogBuilder.create(); alert.show(); }else{ Toast.makeText(CropImage.this,"GPS is enabled",Toast.LENGTH_SHORT).show(); } }
row.cell('URL', s.applicationUrl); }); } else { log.info("No mobile services created yet. You can create new mobile services using the 'azure mobile create' command."); } callback();
var bundleResource = bundleRequest.Bundle.ToPoco<Hl7.Fhir.Model.Bundle>(); _bundleType = bundleResource.Type; if (_bundleType == BundleType.Batch) { await FillRequestLists(bundleResource.Entry, cancellationToken);  var responseBundle = new Hl7.Fhir.Model.Bundle { Type = BundleType.BatchResponse,
[Trait(Traits.Priority, Priority.One)] public async Task WhenCreatingAResource_GivenAUserWithNoCreatePermissions_TheServerShouldReturnForbidden() { await Client.RunAsUser(TestUsers.ReadOnlyUser, TestApplications.NativeClient); FhirException fhirException = await Assert.ThrowsAsync<FhirException>(async () => await Client.CreateAsync(Samples.GetDefaultObservation())); Assert.Equal(ForbiddenMessage, fhirException.Message); Assert.Equal(HttpStatusCode.Forbidden, fhirException.StatusCode);
parent::setUp(); $this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' ); } public function test_should_register_query_using_name_param_by_default() {
// the deprecated config and will be removed in 1.1.0. endpointID = idutil.ServerID(config.TrustDomain) } else { return nil, fmt.Errorf("no SPIFFE ID specified for federation with %q", config.TrustDomain.String()) } }
"time" cloudevents "github.com/cloudevents/sdk-go" cepubsubcontext "github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub/context" "go.uber.org/zap" "knative.dev/pkg/logging" )
return err } num, ok := checked.NewUInt256("2") if !ok { return ErrBadValue
beforeUpdatingBalancesTime := time.Now() var trieBalancesHash crypto.Digest // The lockTaken variable would help us to ensure that we take the lock before commiting the transaction to the database. // Since the function within the "Atomic" migth be re-attempted, and since we want to have the lock only on the "commit" // part of the operation, we need to release the lock at the beginning of the Atomic function if it was already taken, // and re-aquire it just before a successfull completion of the function. // Note that there is no concurrently issue within this function around testing the variable value. lockTaken := false err := au.dbs.wdb.Atomic(func(tx *sql.Tx) (err error) {
} func (pricer *FixedPricer) MostExpensive() *big.Int { poPrice := new(big.Int).SetUint64(pricer.poPrice) maxPO := new(big.Int).SetUint64(uint64(swarm.MaxPO)) tenTimeMaxPO := new(big.Int).Mul(big.NewInt(10), maxPO) return new(big.Int).Mul(tenTimeMaxPO, poPrice) }
@cached_method def cimported_files(self, filename): filename_root, filename_ext = os.path.splitext(filename) if filename_ext in ('.pyx', '.py') and path_exists(filename_root + '.pxd'): pxd_list = [filename_root + '.pxd'] else: pxd_list = [] # Cimports generates all possible combinations package.module
def now(self): """Return the current time and date as a datetime.""" now_in_utc = to_utc(datetime.utcnow()) return now_in_utc.astimezone(self.timezone)
------ NetworkXNotImplemented The algorithm does not support DiGraph, MultiGraph and MultiDiGraph. Examples --------
aboutContentDaedalusMembers: { id: 'static.about.content.daedalus.members', defaultMessage: '!!!Alan McNicholas, Aleksandar Djordjevic, Alexander Rukin, Amit Sagar, Brian McKenna, Charles Hoskinson, Daniel Main, Danilo Prates, Darko Mijić, Dmitrii Gaico, Dominik Guzei, Elin Liu, Gabriela Ponce, Jane Wild, Jeremy Wood, Juli Sudi, Junko Oda, Laurie Wang, Lucas Araujo, Manus McCole, Marcin Mazurek, Michael Bishop, Michael Chappell, Mior Sufian, Nikola Glumac, Piotr Stachyra, Przemysław Włodek, Renan Ferreira, Rhys Bartels-Waller, Richard Wild, Robert Moore, Rodney Lorrimar, Sam Jeston, Samuel Leathers, Serge Kosyrev, Szymon Masłowski, Tatyana Valkevych, Tomas Vrana, Tomislav Horaček, Yakov Karavelov', description: 'About page daedalus team members', }, aboutContentCardanoMembers: {
*/ public static function cleanUpSchemas(OpenApiSpec $spec) { $specArr = $spec->{"$"}; if (empty($specArr["components"]) || empty($specArr["components"]["schemas"])) { return $spec; } foreach (array_keys($specArr['components']['schemas']) as $schemaKey) {
package net.sourceforge.pmd.lang.java.typeresolution; import java.lang.reflect.Method; import java.util.ArrayList; import java.util.Collections; import java.util.List; import net.sourceforge.pmd.lang.java.typeresolution.typedefinition.JavaTypeDefinition;
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4421-SEA 1645522606 1375859326</p> <hr> <p>Varnish cache server</p> </body>
package, alt_package = package try: locals()[package] = __import__(alt_package) except ImportError: locals()[package] = __import__(package) else: locals()[package] = __import__(package)
returnIndexBytes := func(w http.ResponseWriter, r *http.Request) { _, file := filepath.Split(r.URL.Path) rw := newIndexResponseWriter() http.ServeContent(rw, r, file, modTime, bytes.NewReader(indexBytes)) for k, v := range rw.header { for _, i := range v { w.Header().Add(k, i) } } w.Header().Set("content-type", "text/html; charset=utf-8") w.WriteHeader(rw.statusCode) w.Write(rw.body.Bytes()) } return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
errCode := func(err error) int { var err2 *googleapi.Error if ok := xerrors.As(err, &err2); !ok { return -1 } return err2.Code
for(const auto key: m_scalar_keys) { std::string conduit_field = m_output_scalar_prefix + key; std::string conduit_obj = '/' + LBANN_DATA_ID_STR(sample_id) + '/' + conduit_field; if(sample[conduit_obj].schema().dtype().is_empty()) { if (data_store_active()) { LBANN_ERROR("Unable to find field " + conduit_obj
if (iarg+3 > narg) error->all(FLERR,"Illegal pair_style mliap command"); descriptor = new MLIAPDescriptorSNAP(lmp,arg[iarg+2]); iarg += 3; } else if (strcmp(arg[iarg+1],"so3") == 0) { if (iarg+3 > narg) error->all(FLERR,"Illegal pair_style mliap command"); descriptor = new MLIAPDescriptorSO3(lmp,arg[iarg+2]); iarg += 3; } else error->all(FLERR,"Illegal pair_style mliap command"); descriptorflag = 1;
return false, errors.New("bad kmd data dir") } if (dataDirStat.Mode() & 0077) != 0 { logging.Base().Errorf("%s: kmd data dir exists but is too permissive (%o), change to (%o)", kc.kmdDataDir, dataDirStat.Mode()&0777, dataDirStat.Mode()^0077) return false, errors.New("kmd data dir not secure") } } else {
@Option( names = {"--nodes-whitelist"}, paramLabel = "<enode://id@host:port>", description = "Comma separated enode URLs for permissioned networks. Default is an empty list.", split = ",", arity = "0..*" ) private final Collection<String> nodesWhitelist = null;
parsed = new ExpandMacros(compiledMod, files, def.kompileOptions, false).expand(parsed); } if (options.kore) { ModuleToKORE converter = new ModuleToKORE(compiledMod, files, def.topCellInitializer); parsed = new AddSortInjections(compiledMod).addInjections(parsed, sort); converter.convert(parsed); System.out.println(converter.toString());
} } // IsRunning returns whether the peer list is running. func (pl *List) IsRunning() bool { return pl.once.IsRunning()
func (command *kitCreateCommand) validateArgs(_ *cobra.Command, args []string) error { if len(args) != 1 { return errors.New("create expects a single name argument.") } return nil
sc core.SpanContext, remote bool, traceID core.TraceID, spanID core.SpanID, spanName string, spanKind SpanKind, attributes []core.KeyValue,
return err } if !exists { return errChunkNotPresent } // retrieve the chunk from the local store
id := m.ackID ids = append(ids, id) } // TODO(#695): Do something sensible if SendAcks returns an error. _ = d.SendAcks(ctx, ids) } ab := bundler.NewBundler(&Message{}, handler) if opts == nil {
std::shared_ptr<shared_model::interface::Account> account_test = clone( shared_model::proto::AccountBuilder().accountId("test@test").build()); EXPECT_CALL(*wsv_query, hasAccountGrantablePermission( "admin@test", "test@test", can_get_my_acc_detail))
config.Please.DownloadLocation = "https://get.please.build" config.Please.NumOldVersions = 10 config.Parse.BuiltinPleasings = true config.Build.Arch = cli.NewArch(runtime.GOOS, runtime.GOARCH) config.Build.Lang = "en_GB.UTF-8" // Not the language of the UI, the language passed to rules. config.Build.Nonce = "1402"       // Arbitrary nonce to invalidate config when needed.
err = registerVoterTx.AddArgument(cadence.NewString(nodeID.String())) require.NoError(s.T(), err) err = registerVoterTx.AddArgument(cadence.NewString(publicStakingKey.EncodedHexRepresentation())) require.NoError(s.T(), err) s.SignAndSubmit(registerVoterTx,
def union(G, H, rename=(None, None)): """Return the union of graphs G and H. Graphs G and H must be disjoint after the renaming takes place, otherwise an exception is raised. Parameters ----------
var path = require('path'); var minifyCSS = require('gulp-minify-css'); var rename = require('gulp-rename'); var sourcemaps = require('gulp-sourcemaps'); gulp.task('css', function () { return gulp.src('./jupyter_notebook/static/style/*.less') .pipe(sourcemaps.init()) .pipe(less({ paths: [ path.join(__dirname, 'less', 'includes') ] }))
[11.5000, -4.5000, 20.5000,  4.5000], [-4.5000, 11.5000,  4.5000, 20.5000], [11.5000, 11.5000, 20.5000, 20.5000]]) """ def __init__(self,
bool MegaClient::loggedIntoWritableFolder() const { return loggedIntoFolder() && !publichandleWriteAuth.empty(); } void MegaClient::userfeedbackstore(const char *message)
</tr> <tr> <th>{intl.formatMessage(messages.systemTimeIgnored)}:</th> <td className={this.getClassName(!isSystemTimeIgnored)}> {isSystemTimeIgnored ? intl.formatMessage(messages.statusOn) : intl.formatMessage(messages.statusOff)}
{ slocalname = new string(); } if (sync->client->fsaccess->getsname(newlocalpath, slocalname) && *slocalname != localname) { parent->schildren[slocalname] = this; }
# TODO: Reactor LIMITED_API struct decl closer to the static decl code.putln("#if CYTHON_COMPILING_IN_LIMITED_API") code.putln('typedef struct {') code.putln('PyObject *%s;' % Naming.builtins_cname) code.putln('PyObject *%s;' % Naming.cython_runtime_cname) code.putln('PyObject *%s;' % Naming.empty_tuple)
log.Fatal().Err(err).Msg("invalid random source") } epochConfig := epochs.EpochConfig{ EpochTokenPayout:             cadence.UFix64(0), RewardCut:                    cadence.UFix64(0),
CPPUNIT_TEST(runAccessPublicMapWithoutEmailTest); CPPUNIT_TEST(runAccessPrivateMapWithoutEmailTest); CPPUNIT_TEST(runInvalidUserTest); CPPUNIT_TEST(runMultipleMapsSameNameDifferentUsersPrivateTest); CPPUNIT_TEST(runMultipleMapsSameNameDifferentUsersPublicTest); //TODO: fix //CPPUNIT_TEST(runMultipleMapsSameNameNoUserPublicTest); CPPUNIT_TEST_SUITE_END(); public:
{ if (ex != null) { DoInvokeCompleted(continuation, ex); return; }
public static class OptionsDefinitions { public const string LangMarker = "Jpn"; public const string TokenizerRegex = @"[^\w\d]"; public const string TrueRegex = @"\b(はい|そうです|そう|よい)\b|(\uD83D\uDC4D|\uD83D\uDC4C)"; public const string FalseRegex = @"\b(いいえ|ではありません|ではない|じゃない|じゃありません)\b|(\uD83D\uDC4E|\u270B|\uD83D\uDD90)";
{{end}} {{ if .Search }} AND ( CAST(a.id AS TEXT) = substring(:search FROM '\%(.*?)\%') OR a.summary ilike :search OR svc.name ilike :search )
return i.ch } func (i *inbound) Start(h transport.Handler, d transport.Deps) error { sc := i.ch.GetSubChannel(i.ch.ServiceName()) existing := sc.GetHandlers() sc.SetHandler(handler{existing, h})
if (countDownLatch.await(2, TimeUnit.SECONDS)) { // Compare sessionPresent flag from AWSIotMqttManager with the actual one assertEquals(testSessionPresentFlag.getSessionPresent(), actualSessionPresent); } else { fail("CountDownLatch timed out."); } }
namespace Slim; use Psr\Container\ContainerInterface; use Psr\Http\Server\RequestHandlerInterface; use RuntimeException; use Slim\Interfaces\CallableResolverInterface; /**
refpos = positions.mean(axis=0) refpos = refpos.astype(np.float32, copy=False)  target = distances.minimize_periodic_vector(reference_point=target_position, center_position=refpos, box=self.dimensions) positions += target - refpos
"com.fsck.k9.activity.MessageCompose.quotedTextFormat"; private static final String STATE_KEY_NUM_ATTACHMENTS_LOADING = "numAttachmentsLoading"; private static final String STATE_KEY_WAITING_FOR_ATTACHMENTS = "waitingForAttachments"; private static final String STATE_FIRST_TIME_EMPTY_SUBJECT = "firstTimeEmptySubject"; private static final String LOADER_ARG_ATTACHMENT = "attachment"; private static final String FRAGMENT_WAITING_FOR_ATTACHMENT = "waitingForAttachment";
throw new UnsupportedOperationException("Cannot rename Hadoop tables"); } @Override public void close() throws IOException { }
# mongocrypt_t object and raise an exception if the operation fails def set_kms_providers_aws(kms_providers) unless kms_providers[:aws] raise ArgumentError.new('The :aws KMS provider must not be nil') end access_key_id = kms_providers[:aws][:access_key_id]
const menu = menuItems.map(item => { return ( <Link className={classes.link} key={item.name} to={item.url}> <FormattedMessage id={item.id} defaultMessage={item.name} /> </Link> ); });
if (!s.isGoogleChromeAvailable()) { htmlClass += "browserNotAvailable "; imgSrc = imgSrc.split(".png")[0].concat("_unavailable.png"); title = "browser not installed / found"; } else { htmlClass += "browserAvailable "; } else if (browserName.contains(BrowserType.IE) || browserName.contains(BrowserType.IEXPLORE)) if (!s.isInternetExplorerAvailable()) { htmlClass += "browserNotAvailable "; imgSrc = imgSrc.split(".png")[0].concat("_unavailable.png"); title = "browser not installed / found"; } else { htmlClass += "browserAvailable "; } else if (browserName.contains(BrowserType.FIREFOX) || browserName.contains(BrowserType.FIREFOX_2)
return result, err } var spaceRegex = regexp.MustCompile(`\s+`)  func (in *devSQLInterceptor) logQuery(start time.Time, query string, args []driver.NamedValue, err error) { logLevel := level.Debug if err != nil { logLevel = level.Error } query = strings.TrimSpace(spaceRegex.ReplaceAllString(query, " ")) logLevel(in.logger).Log("duration", time.Since(start), "query", query, "args", argsToString(args), "err", err) }
#ifdef ENABLE_SYNC p->Add(exec_sync, sequence(text("sync"), opt(either(sequence(localFSPath(), remoteFSPath(client, &cwd, "dst")), param("cancelslot"))))); p->Add(exec_syncconfig, sequence(text("syncconfig"), opt(sequence(param("type (TWOWAY/UP/DOWN)"), opt(sequence(param("syncDeletions (ON/OFF)"), param("forceOverwrite (ON/OFF)"))))))); p->Add(exec_backupcentre, sequence(text("backupcentre"), opt(sequence(flag("-del"), param("backup_id"))))); #endif p->Add(exec_export, sequence(text("export"), remoteFSPath(client, &cwd), opt(either(flag("-writable"), param("expiretime"), text("del"))))); p->Add(exec_share, sequence(text("share"), opt(sequence(remoteFSPath(client, &cwd), opt(sequence(contactEmail(client), opt(either(text("r"), text("rw"), text("full"))), opt(param("origemail"))))))));
V value = this.zkValues.get().get(key); if (value == null) { LOG.trace("ApiCache returned null for {}", key); } return value;
* source code. */ use Neos\Flow\Annotations as Flow; use Neos\Eel\ProtectedContextAwareInterface; use Neos\Neos\Exception;
@NECKS.register_module() class ChannelMapper(nn.Module): r"""Channel Mapper to unify channels of backbone features. This is used to unify channels of backbone features. Args: in_channels (List[int]): Number of input channels per scale.
self.__add_result_listeners(jmx) if not is_jmx_generated: self.__force_tran_parent_sample(jmx) if self.settings.get('version', self.JMETER_VER) >= '3.2': self.__force_hc4_cookie_handler(jmx) self.__fill_empty_delimiters(jmx) return jmx
election := &lib.Election{} _, err := s.Open(&evoting.Open{Token: token, ID: master.ID, Election: election}) assert.NotNil(t, err) assert.Equal(t, "election cannot end before current time", err.Error()) } func TestOpen_Full(t *testing.T) {
# this is important for some web applications that store authentication-related info in cookies (it took a long time to figure out) if response2.headers.get('set-cookie'): response2.headers['Cookie'] = response2.headers.get('set-cookie') # get the challenge auth_header_value = response2.headers[auth_header_field]
void testSameType() { validator() .addInputLines( "Test.java", // "public class Test {", "  public void badMethod(Integer a, Integer b) {}", "}") .expectUnchanged() .doTestExpectingFailure(TEST_MODE); }
var rootCmd = &cobra.Command{ Use:   "epochs", Short: "This tool encapsulates all commands required to interact with Epochs, from recovery to deployment.", } var RootCmd = rootCmd
} listenToCommands() { this.events.setCommandHandler('start-webserver', (callback) => this.server.start(callback)); this.events.setCommandHandler('stop-webserver',  (callback) => this.server.stop(callback)); } registerConsoleCommands() {
PartitionField existingField = nameToField.get(newName); if (existingField != null && isVoidTransform(existingField)) { // rename the old deleted field that is being replaced by the new field renameField(existingField.name(), existingField.name() + "_" + existingField.fieldId()); } PartitionField added = nameToAddedField.get(name);
byte[] exp; if (byteBuffer.hasArray()) { exp = byteBuffer.array(); pos = byteBuffer.arrayOffset()  + compressStart; } else { exp = Utils.newBytes(expLen); buff.position(compressStart).get(exp);
/// </summary> [Tooltip("Should the server auto-start when 'Server Build' is checked in build settings")] [FormerlySerializedAs("startOnHeadless")] public bool autoStartServerBuild = true; [Obsolete("Use autoStartServerBuild instead.")] public bool startOnHeadless { get => autoStartServerBuild; set => autoStartServerBuild = value; } /// <summary> /// Enables verbose debug messages in the console
flag.DurationVar(&flags.probe.publishInterval, "probe.publish.interval", 3*time.Second, "publish (output) interval") flag.DurationVar(&flags.probe.spyInterval, "probe.spy.interval", time.Second, "spy (scan) interval") flag.StringVar(&flags.probe.pluginsRoot, "probe.plugins.root", "/var/run/scope/plugins", "Root directory to search for plugins") flag.BoolVar(&flags.probe.noControls, "probe.no-controls", false, "Disable controls (e.g. start/stop containers, terminals, logs ...)") flag.BoolVar(&flags.probe.insecure, "probe.insecure", false, "(SSL) explicitly allow \"insecure\" SSL connections and transfers") flag.StringVar(&flags.probe.resolver, "probe.resolver", "", "IP address & port of resolver to use.  Default is to use system resolver.")
else { viewModel = Mvx.IocConstruct(viewModelType) as IMvxViewModel; if (viewModel == null) throw new MvxException($"The ViewModel '{viewModel}' doesn't implement {nameof(IMvxViewModel)}");  request = new MvxViewModelInstanceRequest(viewModel) { ParameterValues = new MvxBundle(paramDict).SafeGetData() }; } _viewDispatcher.ShowViewModel(request);
} // update peer connections if this middleware also does peer management m.peerManagerUpdate() return nil }
ReasonsGroupType reason; reason.first = "Transaction list"; for (const auto &tx : transactions) { auto answer = SignedTransactionsCollectionValidator::transaction_validator_ .validate(tx); if (answer.hasErrors()) { auto message = (boost::format("Tx %s : %s") % tx.hash().hex() % answer.reason())
Protocol: protocol, }, } if e.Metadata[graph.DestPrincipal] != nil { ed.DestPrincipal = e.Metadata[graph.DestPrincipal].(string) } if e.Metadata[graph.SourcePrincipal] != nil { ed.SourcePrincipal = e.Metadata[graph.SourcePrincipal].(string) } addEdgeTelemetry(e, &ed) ew := EdgeWrapper{
import pandas from pandas.api.types import is_scalar from pandas.compat import to_str, string_types, numpy as numpy_compat, cPickle as pkl import pandas.core.common as com from pandas.core.dtypes.common import ( _get_dtype_from_object,
premium=premium, ) elif given_module == 'uniswap': self.eth_modules['uniswap'] = Uniswap( ethereum_manager=ethereum_manager, database=self.database, premium=premium, msg_aggregator=msg_aggregator, ) elif given_module == 'yearn_vaults': self.eth_modules['yearn_vaults'] = YearnVaults(
requestsDropped.increment(); delegate.onDropped(); }  @Override public String toString() { return "LimiterMetrics{" + delegate + "}"; } }; }
Ω(mtdAttribute.Metadata).To(Equal(expected)) }) }) Context("with unicode metadata string", func() { BeforeEach(func() { metadataKey = "abc123一二三" metadataValue = "˜µ≤≈ç√"
- email        Set the Entrez email parameter (default is not set). - tool         Set the Entrez tool parameter (default is ``biopython``). - api_key      Personal API key from NCBI. If not set, only 3 queries per second are allowed. 10 queries per seconds otherwise with a valid API key. - max_tries    Configures how many times failed requests will be automatically retried on error (default is 3). - sleep_between_tries   The delay, in seconds, before retrying a request on error (default is 15). Functions:
// ack is a closure that queues this message for acknowledgement. ack func() // mu guards isAcked in case Ack() is called concurrently. mu sync.Mutex  // isAcked tells whether this message has already had its Ack method // called. isAcked bool
// TopicOptions will contain configuration for topics. type TopicOptions struct{} // OpenTopic returns a *pubsub.Topic backed by an existing GCP PubSub topic // topicName in the given projectID. See the package documentation for an // example. func OpenTopic(ctx context.Context, client *raw.PublisherClient, proj gcp.ProjectID, topicName string, opts *TopicOptions) *pubsub.Topic { dt := openTopic(ctx, client, proj, topicName) return pubsub.NewTopic(dt)
* * @since 2.11 */ $should_add_skip_lazy = apply_filters( 'neve_skip_lazy', true ); if ( $should_add_skip_lazy ) { $logo_settings['class'] = isset( $logo_settings['class'] ) ? $logo_settings['class'] . ' skip-lazy' : 'skip-lazy'; } $image = wp_get_attachment_image( $custom_logo_id, apply_filters( 'hfg_logo_image_size', 'full' ), false, $logo_settings ); do_action( 'hfg_after_wp_get_attachment_image', $custom_logo_id, $image );
const karmaPluginHydrationTests = require('../../karma-plugins/hydration-tests'); const karmaPluginEnv = require('../../karma-plugins/env'); const { GREP, COVERAGE } = require('../../shared/options'); const { createPattern } = require('../utils'); const BASE_DIR = path.resolve(__dirname, '../../../test-hydration'); const COVERAGE_DIR = path.resolve(__dirname, '../../../coverage');
return ihipLogStatus(hipErrorLaunchFailure); } size_t impCoopArg = 1; void* impCoopParams[1]; impCoopParams[0] = &impCoopArg;
var adminClient = await admin.CreateClient(Policies.CanModifyStoreSettings); var admin2Client = await admin2.CreateClient(Policies.CanModifyStoreSettings, Policies.CanModifyServerSettings); var viewOnlyClient = await admin.CreateClient(Policies.CanViewStoreSettings); var store = await adminClient.GetStore(admin.StoreId); Assert.Empty(await adminClient.GetStoreLightningNetworkPaymentMethods(store.Id));
return diskInUseScore; } void addEstimatedCpuUsage(double estimatedAddedCpus) { this.estimatedAddedCpusUsage += estimatedAddedCpus; }
// Map of supported protocols. // HTTP/2 only supports TLS 1.2 and higher. // If updating this map, also update tlsProtocolStringToMap in caddyhttp/fastcgi/fastcgi.go var SupportedProtocols = map[string]uint16{ "tls1.0": tls.VersionTLS10, "tls1.1": tls.VersionTLS11, "tls1.2": tls.VersionTLS12, } // Map of supported ciphers, used only for parsing config. // // Note that, at time of writing, HTTP/2 blacklists 276 cipher suites,
if c.storageRoot == "" { return errors.New("empty storageRoot specified for non-test run") } ldb, err := c.openConfigLevelDB() if err != nil { return err }
if tx_dict['operation'] in [Transaction.CREATE, Transaction.GENESIS]: # TODO: Maybe replace this call to a call to get_asset_by_id asset = list(bigchain.get_assets([tx_dict['id']]))[0] del asset['id'] tx_dict.update({'asset': asset}) return cls.from_dict(tx_dict)
func (o *CreateOptions) BindFlags(flags *pflag.FlagSet) { o.BackupOptions.BindFlags(flags) flags.StringVar(&o.Schedule, "schedule", o.Schedule, "a cron expression specifying a recurring schedule for this backup to run") }
func newOrderHandler(ctx context.Context, loc string, o *pb.Order) (*orderHandler, error) { ctx, cancel := context.WithCancel(ctx) var err error defer func() { // cancel context in we cannot create handler if err != nil { cancel() } }() cc, err := util.MakeGrpcClient(ctx, loc, nil) if err != nil {
ws.localSSHListener, err = b.establishSSHTunnel(ws) if err != nil { handleError(ws.WorkspaceID, "cannot establish SSH tunnel", err) } }() }
upsample_ratio=2, num_classes=81, class_agnostic=False, upsample_cfg=None, conv_cfg=None, norm_cfg=None, loss_mask=dict(
"/foo/{org_name}/Bar":    "foo_org_name_bar", "/foo/{org__name}/Bar":   "foo_org_name_bar", "/foo/{org___name}/_Bar": "foo_org_name_bar", "/foo.bar/baz.qux/":      "foo_bar_baz_qux", } { if have := middleware.MakeLabelValue(input); want != have { t.Errorf("%q: want %q, have %q", input, want, have)
r.Status.Phase = velerov1api.PodVolumeBackupPhaseCompleted r.Status.SnapshotID = snapshotID if emptySnapshot { r.Status.Message = "volume was empty so no snapshot was taken" } }) if err != nil {
// Get implements the merklearray.Array interface. func (tma *txnMerkleArray) GetHash(pos uint64) (crypto.Digest, error) { if pos >= uint64(len(tma.block.Payset)) { return crypto.Digest{}, fmt.Errorf("txnMerkleArray.Get(%d): out of bounds, payset size %d", pos, len(tma.block.Payset)) } var elem txnMerkleElem
from system import environment LIST_FILE_BASENAME = 'file_list.txt' TESTCASES_PER_DAY = 1000 def upload_testcases_if_needed(fuzzer_name, testcase_list, testcase_directory,
content_type='text/html') LOGGER.debug('Inventory summary sent successfully by email.') except util_errors.EmailSendError: LOGGER.exception('Unable to send Inventory summary email') @staticmethod def transform_to_template(data):
break; } } } catch (MessagingException e) { /* * Let the user continue composing their message even if we have a problem processing * the source message. Log it as an error, though.
public ItalianHolidayParserConfiguration(IOptionsConfiguration config) : base(config) { ThisPrefixRegex = new Regex(DateTimeDefinitions.ThisPrefixRegex, RegexFlags); NextPrefixRegex = new Regex(DateTimeDefinitions.NextPrefixRegex, RegexFlags); PreviousPrefixRegex = new Regex(DateTimeDefinitions.PreviousPrefixRegex, RegexFlags); this.HolidayRegexList = ItalianHolidayExtractorConfiguration.HolidayRegexList; this.HolidayNames = DateTimeDefinitions.HolidayNames.ToImmutableDictionary(); }
extern const struct batch_queue_module batch_queue_mesos; extern const struct batch_queue_module batch_queue_k8s; extern const struct batch_queue_module batch_queue_dryrun; #ifdef CCTOOLS_WITH_MPI extern const struct batch_queue_module batch_queue_mpi; #endif
// client event Action ClientConnected; event Action<byte[]> ClientDataReceived; event Action<Exception> ClientErrored; event Action ClientDisconnected; bool IsClientConnected();
dependent_targets = recursive_dependent_targets dependent_targets += recursive_test_dependent_targets if include_test_dependent_targets dependent_targets.each do |dependent_target| header_search_paths.concat(sandbox.public_headers.search_paths(platform, dependent_target.pod_name, defines_module? && dependent_target.uses_modular_headers?(false))) end header_search_paths.uniq end
if (!isFlight || (isFlight && areTermsAccepted)) { const walletWarning = ( <div className={styles.flightCandidateWarning}> <FormattedHTMLMessage {...messages.emptyingWarning} tagName="p" /> </div> );
icon_changed = pyqtSignal(QIcon) #: Signal emitted when a page's title changed (new title as str) title_changed = pyqtSignal(str) #: Signal emitted when this tab was pinned/unpinned (new pinned state as bool) pinned_changed = pyqtSignal(bool) #: Signal emitted when a new tab should be opened (url as QUrl)
return result; } static void on_context_init(h2o_handler_t *_handler, h2o_context_t *ctx) { h2o_mruby_handler_t *handler = (void *)_handler; h2o_mruby_context_t *handler_ctx = h2o_mem_alloc(sizeof(*handler_ctx)); handler_ctx->handler = handler; handler_ctx->shared = get_shared_context(ctx); mrb_state *mrb = handler_ctx->shared->mrb;
""" def replace_text_elements(node): """Perform find and replace on text values only""" if type(node) == ast.TextElement: node.value = node.value.replace(find, replace) return node
ir_set: irast.Set, orig_stype: s_types.Type, new_stype: s_types.Type, *, cardinality_mod: Optional[qlast.CardinalityModifier], ctx: context.ContextLevel) -> irast.Set: orig_typeref = typegen.type_to_typeref(orig_stype, env=ctx.env)
class CreateStatuses < ActiveRecord::Migration def change create_table :statuses do |t| t.string :status t.integer :user_id t.timestamps end
stubService('auth', authStub); }); test('it shows the priority action modal and loading indicator if task is in running state', async function (assert) { this.set('build', EmberObject.create()); this.set('job', EmberObject.create()); this.set('priority', EmberObject.create({ isRunning: true }));
// Run again if we have a release version as well if releaseSubstring != "" { rawComponents = componentRegex.FindAllString(releaseSubstring, -1) v.releaseComponents = make([]uint64, len(rawComponents)) for i := range rawComponents { // Base36 to support lowercase characters
$command[] = $verbose; } // Backwards compatibility with symfony/process <3.3 (see #1964) if (method_exists(Process::class, 'setCommandline')) { $command = implode(' ', $command); }  $process = new Process($command); // Increase the timeout according to terminal42/background-process (see #54) $process->setTimeout(500);
* @throws NodeConfigurationException * @throws NodeTypeNotFoundException */ public function createVariantForContext($context): NodeInterface { $autoCreatedChildNodes = []; $nodeType = $this->getNodeType();
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4433-SEA 1645526574 484973071</p> <hr> <p>Varnish cache server</p> </body>
throw new UnknownFormatException("Unable to read image format", e); } if (inputResult.bufferedImage == null || inputResult.imageFormat == null) { // ImageIO doesn't support the image format throw new UnknownFormatException("Failed to transform image because the source format is unknown"); }
"Usage:\n" + "    <functionName> \n\n" + "Where:\n" + "    functionName - the name of the function to describe. \n"; if (args.length != 1) { System.out.println(USAGE);
} break; case EOO: if (v) {
import org.apache.zookeeper.KeeperException; import org.apache.zookeeper.KeeperException.NoNodeException; import org.apache.zookeeper.KeeperException.NotEmptyException; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class ZooQueueLock implements QueueLock { private static final Logger log = LoggerFactory.getLogger(ZooQueueLock.class); private static final String PREFIX = "lock-"; private ZooReaderWriter zoo; private String path;
} defer archiveFile.Close() // nolint: errcheck var log = log.WithField("archive", archivePath) log.Info("creating") var a = archive.New(archiveFile) defer a.Close() // nolint: errcheck
if (score == 0) { const char *app_id = as_app_get_id_filename (app); if (strcasestr (app_id, search_text) != NULL) score = 50; else continue;
""" update cpp11 extensions that will run on versions of gcc >4.8 """ gcc_version = get_gcc_version(ext.language) if gcc_version is not None: if float(gcc_version) > 4.8: compile_flags, link_flags = flags
self->state.self = self; self->state.path = path; self->state.archive = legacy_archive; self->state.name = "partition-" + id_string; VAST_TRACEPOINT(passive_partition_spawned, id_string.c_str()); self->set_exit_handler([=](const caf::exit_msg& msg) {
EXPECT_SUCCESS(s2n_client_hello_send(client_conn)); EXPECT_SUCCESS(s2n_stuffer_copy(&client_conn->handshake.io, &server_conn->handshake.io, s2n_stuffer_data_available(&client_conn->handshake.io)));  EXPECT_SUCCESS(s2n_client_hello_recv(server_conn));  s2n_connection_free(client_conn); s2n_connection_free(server_conn);
"""Tests for google.services.inventory.cai_temporary_storage.""" from future import standard_library standard_library.install_aliases()
} }); } LOG.trace("Children nodes (size: {}): {}", validChildren.size(), validChildren); return validChildren; }
"userscripts", cmd) log.misc.debug("Userscript to run: {}".format(cmd_path)) runner.run(cmd_path, *args, env=env, verbose=verbose) runner.finished.connect(commandrunner.deleteLater) runner.finished.connect(runner.deleteLater)
public function scopes() { return array( // 'base' themes are the ones that don't extend any question type/theme. 'base' => array( 'condition' => 'core_theme = :true AND extends = :extends', 'params' => array(':true' => 1, ':extends' => '') ),
end env = Puppet.lookup(:environments).get('production').override_with(modulepath: [moduledir]) report = if Puppet::Util::Package.versioncmp(Puppet.version, '5.0.0') > 0 Puppet::Transaction::Report.new
break; } if (ers[i].Type.Equals(Constants.SYS_DATETIME_DATE, StringComparison.Ordinal) && ers[j].Type.Equals(Constants.SYS_DATETIME_TIME, StringComparison.Ordinal)) { var middleBegin = ers[i].Start + ers[i].Length ?? 0; var middleEnd = ers[j].Start ?? 0;
class StackWidget(urwid.Frame): def __init__(self, window, widget, title, focus): self.is_focus = focus self.window = window if title:
nowPlayingPositionSlider.value = 0; } if (runtimeTicks && positionTicks != null && currentRuntimeTicks && !enableProgressByTimeOfDay && currentItem.RunTimeTicks && currentItem.Type !== 'Recording' && playbackRate !== null) { endsAtText.innerHTML = '&nbsp;&nbsp;&nbsp;&nbsp;' + mediaInfo.getEndsAtFromPosition(runtimeTicks, positionTicks, playbackRate, true); } else { endsAtText.innerHTML = ''; }
} $extra = array(); if($installed != false && $configure_link == false) { $extra['colspan'] = 2; }
return data @ma.post_load def build_operation(self, data, **kwargs): return None if kwargs.get('partial') is True else Operation(**data)
/** * TODO to be improved by loading only if required and only in the user language * Load ingredients from (the server or) local database * If SharedPreferences lastDownloadIngredients is set try this : *  if file from the server is newer than last download delete database, load the file and fill database, *  else if database is empty, download the file and fill database, *  else return the content from the local database.
printf("Application protocol: %s\n", s2n_get_application_protocol(conn)); } printf("Curve: %s\n", s2n_connection_get_curve(conn)); uint32_t length; const uint8_t *status = s2n_connection_get_ocsp_response(conn, &length);
sClient := c.kclient.CoreV1().Secrets(am.Namespace) if err := sSecret.StoreSecrets(ctx, sClient); err != nil { return nil, errors.Wrapf(err, "failed to create TLS assets secret for Alertmanager") } level.Debug(c.logger).Log("msg", "tls-asset secret: stored")
mode = os.fstat(file_obj.fileno()).st_mode return stat.S_ISFIFO(mode) or stat.S_ISREG(mode)
"Please Report this as a bug, and send in data file." def _translate(self, options): """Translates a Nexus file (PRIVATE).""" self.translate = {} opts = CharBuffer(options) while True:
package org.apache.fineract.notification; import org.apache.fineract.notification.domain.Notification; import org.apache.fineract.notification.domain.NotificationMapper; import org.apache.fineract.notification.service.NotificationGeneratorReadRepositoryWrapper;
private final EnumSet<MetricCategory> enabledCategories = EnumSet.allOf(MetricCategory.class); PrometheusMetricsSystem() {} public static MetricsSystem init(final MetricsConfiguration metricsConfiguration) { if (!metricsConfiguration.isEnabled()) {
public void pendingTransactionRetentionPeriod() { final int pendingTxRetentionHours = 999; parseCommand("--tx-pool-retention-hours", String.valueOf(pendingTxRetentionHours)); verify(mockControllerBuilder) .transactionPoolConfiguration(transactionPoolConfigurationArgumentCaptor.capture()); assertThat(transactionPoolConfigurationArgumentCaptor.getValue().getPendingTxRetentionPeriod()) .isEqualTo(pendingTxRetentionHours); assertThat(commandOutput.toString()).isEmpty(); assertThat(commandErrorOutput.toString()).isEmpty(); }
#include <set> #ifdef VITA #include <vita2d.h> #endif namespace
res.Error = handlers.NotFoundError() return res } case action.Read, action.Cancel: repo, err := s.repoFn() if err != nil {
} } // GetEnvironment returns the Environment metadata from the CloudFormation stack. func (cf CloudFormation) GetEnvironment(projectName, envName string) (*archer.Environment, error) { conf := stack.NewEnvStackConfig(&deploy.CreateEnvironmentInput{ Project: projectName, Name:    envName,
cmd.Flags().String(optionNameTracingServiceName, "bee", "service name identifier for tracing") cmd.Flags().String(optionNameVerbosity, "info", "log verbosity level 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=trace") cmd.Flags().String(optionWelcomeMessage, "", "send a welcome message string during handshakes") cmd.Flags().Uint64(optionNamePaymentThreshold, 100000, "threshold in BZZ where you expect to get paid from your peers") cmd.Flags().Uint64(optionNamePaymentTolerance, 10000, "excess debt above payment threshold in BZZ where you disconnect from your peer") c.root.AddCommand(cmd) return nil
) # Get the molecule type mol_type = self._get_annotation_str(record, "molecule_type", None) if mol_type is None: raise ValueError("missing molecule_type in annotations") if mol_type and len(mol_type) > 7: # Deal with common cases from EMBL to GenBank mol_type = mol_type.replace("unassigned ", "").replace("genomic ", "")
func BuildCreate(rw http.ResponseWriter, r *http.Request) *httperr.Error { build := models.NewBuild(mux.Vars(r)["app"]) if build.IsRunning() { return httperr.Errorf(403, "another build is currently running. Please try again later.") }
end=kwargs.pop('end', None), trading_calendar=self.trading_calendar, ) self.perf_tracker = None # Pull in the environment's new AssetFinder for quick reference
<div class="tablenav <?php echo esc_attr( $which ); ?>"> <?php if ( 'bottom' === $which ) : ?> <div class="alignright"> <?php printf( '<button type="button" name="revoke-all-application-passwords" id="revoke-all-application-passwords" class="button delete">%s</button>', __( 'Revoke all application passwords' ) ); ?> </div> <?php endif; ?> <div class="alignleft actions bulkactions">
void setBottomSheetDetailsSmaller(); } interface NearbyListView { void updateListFragment(List<Place> placeList); }
}; getNetworkParameters = async ( epochId: number ): Promise<GetNetworkParametersResponse> => { logger.debug('AdaApi::getNetworkParameters called'); try {
import java.util.concurrent.FutureTask; import java.util.concurrent.TimeUnit; import com.google.inject.Inject; import com.hubspot.singularity.executor.config.SingularityExecutorConfiguration; import com.spotify.docker.client.DockerClient;
// Create implements the fs.NodeCreater interface for TLF. func (tlf *TLF) Create(ctx context.Context, req *fuse.CreateRequest, resp *fuse.CreateResponse) (_ fs.Node, _ fs.Handle, err error) { dir, err := tlf.loadDir(ctx) if err != nil { return nil, nil, err
const { email, subject, description: body } = this; try { return yield this.ajax.request(createRequestEndpoint, 'POST', { host: apiHost, data: { request: {
/** * Props for {@link ProductImageCarousel} * * @typedef props * * @property {Object} classes An object containing the class names for the * ProductImageCarousel component
return Sets.union(scopesConfiguration.getRead(), scopesConfiguration.getWrite()); case WRITE: return scopesConfiguration.getWrite(); case ADMIN: default: return scopesConfiguration.getAdmin();
logger:       logging.FromContext(ctx), pubsub:       client, brokerConfig: brokerConfig, // TODO(#1118): remove Topic when broker config is removed topics: make(map[types.NamespacedName]*pubsub.Topic), } }
'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush') def load_annotations(self, ann_file): """Load annotation from COCO style annotation file. Args: ann_file (str): Path of annotation file.
using namespace sofa::defaulttype; // Register in the Factory int SPHFluidSurfaceMappingClass = core::RegisterObject("SPHFluidSurfaceMappingClass") .addAlias("MarchingCubeMapping") .add< SPHFluidSurfaceMapping< Vec3Types, Vec3Types > >() ;
'scripts/enable_bls', 'scripts/create_dirs.sh', 'scripts/indy_old_cli_export_dids', 'scripts/setup_indy_node_iptables'] )
[](iroha::expected::Error<std::string> &error) { FAIL() << "MutableStorage: " << error.error; }); auto old_block = shared_model::proto::from_old(block1); ms->apply(old_block, [](const auto &blk, auto &query, const auto &top_hash) { return true; }); storage->commit(std::move(ms));
return removed; } private boolean noneRunning(CompactionKind kind) { return runningJobs.stream().noneMatch(job -> job.getKind() == kind); }  void initiateChop() { Set<StoredTabletFile> allFiles = tablet.getDatafiles().keySet(); FileManager.ChopSelector chopSelector; synchronized (this) { if (fileMgr.getChopStatus() == FileSelectionStatus.NOT_ACTIVE) {
$ptable = $GLOBALS['TL_DCA'][$this->strTable]['config']['ptable']; $ctable = $GLOBALS['TL_DCA'][$this->strTable]['config']['ctable']; if ($ptable === null && ($GLOBALS['TL_DCA'][$this->strTable]['list']['sorting']['mode'] ?? null) == 5) { $ptable = $this->strTable; }
@request_params[:cookies].merge! cookies end def process_response(options = {}, &block) retries = options[:tries] || 3 opts = { tries: retries, refresh_token: proc { refresh_token unless options[:dont_reauth] } }.merge(options) response = GoodData::Rest::Connection.retryable(opts) do block.call end
return value }() // DefaultTransactionFees are the default transaction fees if transaction fees are on. // If they are off (which is the default behaviour) that means the transaction fees are 0.0. var DefaultTransactionFees = func() cadence.UFix64 { value, err := cadence.NewUFix64("0.0001") if err != nil {
} ctx := context.Background() capabilityName := args[0] velaEnv, err := GetEnv(cmd) if err != nil { return err } if webSite { return startReferenceDocsSite(ctx, c, ioStreams, capabilityName) } return ShowReferenceConsole(ctx, c, ioStreams, capabilityName, velaEnv.Namespace) }, Annotations: map[string]string{ types.TagCommandType: types.TypeStart,
public void sendBeat() throws IOException, InterruptedException { RaftPeer local = peers.local(); if (ApplicationUtils.getStandaloneMode() || local.state != RaftPeer.State.LEADER) { return; } if (Loggers.RAFT.isDebugEnabled()) {
$link_styles   = $this->find( '<noscript[^>]*>.*' . '<link\s+([^>]+[\s"\'])?href\s*=\s*[\'"]\s*?([^\'"]+\.css(?:\?[^\'"]*)?)\s*?[\'"]([^>]+)?\/?>' . '.*<\/noscript>(*SKIP)(*FAIL)|' . $link_style_pattern, $html_nocomments );
{ Attributes = { new JsonAttribute("date", "${longdate}"), new JsonAttribute("level", "${level}"), new JsonAttribute("message", "${message}"), } };
settingsInstance = null; } }); }; });
{ S2N_ERR_ECDHE_GEN_KEY, "Failed to generate an ECDHE key" }, { S2N_ERR_ECDHE_SHARED_SECRET, "Error computing ECDHE shared secret" }, { S2N_ERR_ECDHE_UNSUPPORTED_CURVE, "Unsupported EC curve was presented during an ECDHE handshake" }, { S2N_ERR_ECDHE_SERIALIZING, "Error serializing ECDHE public" }, }; const char *s2n_strerror(int error, const char *lang)
:param content: what gets written into the file :return: None """ with open(filename, 'w') as f: f.write(content) def print_stdout(line):
{ QPixmap resizedPixmap = avatarPixmap.scaled(avatarLabel.size(), Qt::KeepAspectRatio, Qt::SmoothTransformation); avatarLabel.setPixmap(resizedPixmap); QWidget::resizeEvent(event); }
no_cmd_split: If true, ';;' to split sub-commands is ignored. backend: Which backend the command works with (or None if it works with both) no_replace_variables: Don't replace variables like {url} _qute_args: The saved data from @cmdutils.argument _needs_js: Whether the command needs javascript enabled _modes: The modes the command can be executed in.
Topic *string `json:"topic,omitempty"` } // CloudBuildSourceEventSource returns the Cloud Build CloudEvent source value. func CloudBuildSourceEventSource(googleCloudProject, buildId string) string { return fmt.Sprintf("//cloudbuild.googleapis.com/projects/%s/builds/%s", googleCloudProject, buildId)
dynamicFactory             client.DynamicFactory fileSystem                 filesystem.Interface namespaceClient            corev1.NamespaceInterface restoreItemActions         []framework.RestoreItemResolvedAction itemSnapshotterActions     []framework.ItemSnapshotterResolvedAction volumeSnapshotterGetter    VolumeSnapshotterGetter resticRestorer             restic.Restorer
} byte[] bytes = createGIFFromImages(bitmaps); File file = new File(Environment.getExternalStorageDirectory() + "/" + "Phimpme_gifs"); DateFormat dateFormat = new SimpleDateFormat("ddMMyy_HHmm"); String date = dateFormat.format(Calendar.getInstance().getTime()); if(file.exists() && file.isDirectory()){ FileOutputStream outStream = null;
def _assert_in(output, string): assert string in output  def test_default_ProgressMeter(buffer, n=101, interval=10): format = "Step {step:5d}/{numsteps} [{percentage:5.1f}%]"
} } // refresh other kerning input boxes if they are the same characters static int MV_ChangeKerning_Nested = 0; int refreshOtherPairEntries = true;
type SinkFormat string // SinkFormat defines the formatting for a sink in a config file stanza (json) func (f SinkFormat) Validate() error { const op = "event.(SinkFormat).Validate" switch f { case JSONSinkFormat: return nil
) ) # Automatic installation of exact versions *only*. if version =~ /^(\d+\.\d+\.\d+|head)$/ && cabal_version =~ /^(\d+\.\d+|head)$/ sh.raw "if ! travis_ghc_find '#{version}' &>/dev/null; then" sh.raw 'travis_fold start ghc.install' sh.echo "ghc-#{version} is not installed; attempting installation", ansi: :yellow
const htmlDataset = document.querySelector('html').dataset; const { imageOptimizingOrigin } = htmlDataset; // Protect against potential falsy values for `mediaBackend`. const storeCode = storage.getItem('store_view_code') || STORE_VIEW_CODE; const storeSecureBaseMediaUrl = {};  AVAILABLE_STORE_VIEWS.forEach(store => { storeSecureBaseMediaUrl[store.code] = store.secure_base_media_url; });  let mediaBackend = storage.getItem('store_view_secure_base_media_url') || storeSecureBaseMediaUrl[storeCode]; if (!mediaBackend) { console.warn('A media backend URL should be defined in your config.'); mediaBackend = 'https://backend.test/media/';
def get_dhcp_pid(self): return self._get_dhcp_pid(["pidof", "dhcpcd"]) def restart_if(self, ifname, retries=None, wait=None): logger.info('restarting {} (sort of, actually SIGHUPing dhcpcd)'.format(ifname)) pid = self.get_dhcp_pid() if pid != None: # pylint: disable=C0121
} // Plan if (this.params.plan) { vmProfile.plan = this.params.plan; }
namespace Microsoft.Health.Fhir.SqlServer.Features.Operations.Import.DataGenerator { internal abstract class TableBulkCopyDataGenerator { internal abstract string TableName { get; }
* @flow */ // $FlowExpectedError import React, {useState} from 'react'; import {trackCustomEvent} from 'gatsby-plugin-google-analytics'; import {sharedStyles} from 'theme';
group.add_argument( "--keep-host-header", action="store_true", dest="keep_host_header", help="Reverse Proxy: Keep the original host header instead of rewriting it to the reverse proxy target." )
html += '<div class="' + cssClass + '">'; const moreIcon = 'more_horiz'; html += getTextLinesHtml(textlines, isLargeStyle);
self.max_pokemon_storage = inventory.get_pokemon_inventory_size() self.last_pokemon_count = 0 self.config_transfer = self.config.get("transfer", False) self.config_evolve = self.config.get("evolve", False) self.config_evolve_time = self.config.get("evolve_time", 20) self.config_evolve_for_xp = self.config.get("evolve_for_xp", True) self.config_evolve_only_with_lucky_egg = self.config.get("evolve_only_with_lucky_egg", False)
>>> target = LocalTarget('~/some_file.txt') >>> target = LocalTarget(pathlib.Path('~') / 'some_file.txt') >>> LocalTarget('lol.txt').exists() False """
/** * Returns the identifier of this node with additional context information (such as the workspace name). * * Example: 661369c8-826a-63db-ad24-23a61a6800fe@user-admin * * @return string Node identifier with context information * @api
} function keyChange(d) { var kOld = d.key, kNew = this.value.trim(), tag = {}; if (kNew && kNew !== kOld) { var a = _.compact(kNew.split(/^(.*)_(\d+)$/)), base = a[0], suffix = (a.length > 1) ? parseInt(a[1]): 1; while (tags[kNew]) {  // rename key if already in use
// org.jivesoftware.util.cache.CacheFactory.joinedCluster). This means that they now hold data that's // available on all other cluster nodes. Data that's available on the local node needs to be added again. restoreCacheContent();  // It does not appear to be needed to invoke any kind of event listeners for the data that was gained by joining // the cluster (eg: sessions connected to other cluster nodes, now suddenly available to the local cluster node): // There are six caches in play here, but only the content of one of them goes accompanied by firing off event // listeners (sessionInfoCache). However, when already running in a clustered environment, those events are // never broadcasted over the cluster, so there shouldn't be a need to do so for all sessions that were // gained/lost when joining or leaving a cluster either. } @Override
const ( DefaultFormat = "" JSONFormat    = "JSON" TextFormat    = "TEXT" ) func NewLogger(logLevel, format, fileName string) (logrus.FieldLogger, error) {
* * Filters the columns that are displayed in learner management * * @param {array}   $columns              The default columns. * @param {object}  $sensei_learners_main Sensei_Learners_Main instance. * * @return {array} The modified default columns */
return if packages.empty? packages = Array(packages) if config[:os] == 'linux' if !config[:sudo] or config[:dist] == 'precise' sh.echo "R binary packages not supported with 'sudo: false' or 'dist: precise', "\ ' falling back to source install' return r_install packages end
Parameters ---------- edges : Int Tensor Each element is an ID. The tensor must have the same device type and ID data type as the graph's.
get isInTransaction() {} /** * Indicates if this Realm has been closed. * @type {boolean} * @readonly * @since 2.1.0
/** * We use map because there can be nested, anonymous etc classes. */ Map<String, JavaClassObject> classObjectsByName = new HashMap<>(); private SecureClassLoader classLoader = new SecureClassLoader() {
pre_doc = "This is " + ", ".join(op_dev) + " operator\n\n" schema = b.GetSchema(op_name) # insert tag to easily link to the operator ret = '.. _' + op_name + ':\n\n' ret += pre_doc ret += schema.Dox() ret += '\n' if schema.AllowsSequences():
This matrix is symmetric with zeros on the diagonal. .. versionchanged:: 1.0.0 ``save()`` method has been removed. You can use ``np.save()`` on :attr:`DistanceMatrix.dist_matrix` instead. """ def __init__(self, u, select='all', metric=rmsd, cutoff=1E0-5,
allowed_border=-1, pos_weight=-1, debug=False), test_cfg=dict(nms_pre=1000))
# def self.add_language_specific_settings(target, xcconfig) if target.uses_swift? other_swift_flags = ['$(inherited)', quote(%w(-D COCOAPODS))] other_swift_flags += [quote(%w(-suppress-warnings))] if target.try(:inhibit_warnings?) || false build_settings = { 'OTHER_SWIFT_FLAGS' => other_swift_flags.join(' ') } xcconfig.merge!(build_settings) end end
TableMetadata updated = table.ops().current(); Integer updatedVersion = TestTables.metadataVersion("test"); Assert.assertEquals(current, updated); currentVersion += 1; Assert.assertEquals(currentVersion, updatedVersion.intValue()); // no-op commit due to no-op rename table.updateSpec()
symbol_column=None, special_params_checker=None, **kwargs): """Fetch a csv from a remote url and register the data so that it is queryable from the ``data`` object. Parameters ----------
throw new RuntimeException(e); } } return new PasswordToken(pass.value); } @Parameter(names = {"-z", "--keepers"}, description = "Comma separated list of zookeeper hosts (host:port,host:port)")
Number of pixels to spread on all sides.""") def _apply_spreading(self, array): return tf.spread(array, px=self.p.px, how=self.p.how, shape=self.p.shape) class dynspread(SpreadingOperation):
Count:     o.count, GroupName: o.groupName, Cluster:        o.cluster, Subnets:        o.subnets, SecurityGroups: o.securityGroups,
Public  string Private string Address network.Address TLSCert network.TLSCertPEM TLSKey  network.TLSKeyPEM } // Save will save this CothoritydConfig to the given file name. It
break; case ELEMENT_TYPE_ENV_VAR:  /* %{..}e */  { h2o_iovec_t *env_var = h2o_req_getenv(req, element->data.name.base, element->data.name.len, 0); if (env_var == NULL || env_var->len < 0) goto EmitNull; RESERVE(env_var->len * unsafe_factor); pos = append_safe_string(pos, env_var->base, env_var->len);
return c.CreateCustomResource(&unstructured.Unstructured{Object: csvUnst}) } func fetchInstallPlan(t *testing.T, c opClient.Interface, name string, checker installPlanConditionChecker) (*installplanv1alpha1.InstallPlan, error) { var fetchedInstallPlan *installplanv1alpha1.InstallPlan var err error
if err != nil { return err } file, err := os.OpenFile( filepath.Join(ctx.Config.Dist, checksums), os.O_APPEND|os.O_WRONLY|os.O_CREATE|os.O_TRUNC,
GROUP, POLICY, SERVICE, ENTITY } private String domainName;
package main import ( "github.com/stretchr/testify/require" "io/fs" "os" "path/filepath" "testing" ) func TestPackage(t *testing.T) {
docstring_arborescence.format(kind='maximum', style='spanning arborescence') minimum_spanning_arborescence.__doc__ = \ No newline at end of file docstring_arborescence.format(kind='minimum', style='spanning arborescence')
*/ public function setCategory($category = null) { if (null !== $category && $category instanceof CategoryInterface) { throw new UnexpectedTypeException(); } $this->category = $category; } }
} catch (FileNotFoundException e) { //ignored } catch (IOException | ClassNotFoundException e) { kem.registerInternalHiddenWarning("Invalidating serialized cache due to corruption.", e); } catch (InterruptedException e) { throw KEMException.criticalError("Interrupted while locking to read " + file.getAbsolutePath(), e); }
var packages = []string{ "github.com/google/knative-gcp/test/cmd/target", "github.com/google/knative-gcp/test/cmd/storage_target", } var packageToImageConfig = map[string]string{}
return self.get_urls(), self.label, self.namespace class OscarConfig(OscarConfigMixin, AppConfig): """ Base Oscar app configuration.
import React, { Fragment, useCallback, useMemo } from 'react'; import { useIntl } from 'react-intl'; import { Relevant } from 'informed';  import { useWishlistDialog } from '@magento/peregrine/lib/talons/Wishlist/WishlistDialog/useWishlistDialog'; import Dialog from '@magento/venia-ui/lib/components/Dialog';
* Call with the user's response to the sign-in challenge. * * @param signInChallengeResponse obtained from user * @param clientMetaData Meta data for lambda triggers * @return the result containing next steps or done. * @throws Exception */
* @param bool|WP_Error $result  Result from install_package(). * @param array         $options Array of data for plugin/theme being updated. */ $result = apply_filters( 'upgrader_install_package_result', $result, $options ); $this->skin->set_result( $result ); if ( is_wp_error( $result ) ) {
return self.text else: try: return self.translations.get(locale=locale).text except (AttributeError, TermTranslation.DoesNotExist): return None def __str__(self):
if not self.is_sig_count_accepted(request, auth_constraint): return False, "Not enough signatures" if not self.is_owner_accepted(auth_constraint, auth_action): if auth_action.field != '*': return False, "{} can not touch {} field since only the owner can modify it".\ format(self.get_named_role_from_req(request), auth_action.field) else: return False, "{} can not edit {} txn since only owner can modify it".\ format(self.get_named_role_from_req(request),
import org.apache.iceberg.types.Types.StringType; import org.apache.iceberg.types.Types.StructType; import static org.apache.iceberg.types.Types.NestedField.optional; import static org.apache.iceberg.types.Types.NestedField.required;
Name:        "jwt-secret", Value:       "Pive-Fumkiu4", Usage:       "Used to dismantle the access token, should equal reva's jwt-secret", EnvVars:     []string{"OCIS_JWT_SECRET"}, Destination: &cfg.TokenManager.JWTSecret, }, }
template <typename TensorDataType> bool rmsprop<TensorDataType>::load_from_checkpoint_shared(persist& p, std::string name_prefix) { load_from_shared_cereal_archive(*this, p, this->get_comm(), "rmsprop.xml"); char l_name[512]; sprintf(l_name, "%s_optimizer_cache_%lldx%lld.bin", name_prefix.c_str(), m_cache->Height(), m_cache->Width());
} func TestSmallData(t *testing.T) { key, err := NewRandomKey() if err != nil { t.Fatal(err)
setContentView(getContentViewResourceId()); sbPosition = findViewById(R.id.sbPosition); txtvPosition = findViewById(R.id.txtvPosition); SharedPreferences prefs = getSharedPreferences(PREFS, MODE_PRIVATE); showTimeLeft = prefs.getBoolean(PREF_SHOW_TIME_LEFT, false);
QPixmap UserLevelPixmapGenerator::generatePixmap(int height, UserLevelFlags userLevel, bool isBuddy, QString privLevel) { QString key = QString::number(height * 10000 + (int)userLevel + (int)isBuddy) + privLevel; if (pmCache.contains(key)) return pmCache.value(key);
SpringDmnEngineConfigurator dmnConfigurator = context.getBean(SpringDmnEngineConfigurator.class); SpringFormEngineConfigurator formConfigurator = context.getBean(SpringFormEngineConfigurator.class); SpringIdmEngineConfigurator idmConfigurator = context.getBean(SpringIdmEngineConfigurator.class); SpringEventRegistryConfigurator eventConfigurator = context.getBean(SpringEventRegistryConfigurator.class); SpringProcessEngineConfigurator processConfigurator = context.getBean(SpringProcessEngineConfigurator.class); assertThat(appEngineConfiguration.getConfigurators()) .as("AppEngineConfiguration configurators")
username VARCHAR(255), groupname VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, removed_at TIMESTAMP NULL, user_type VARCHAR(255), UNIQUE KEY idx_uid_username (host_id, uid, username), FOREIGN KEY (host_id) REFERENCES hosts (id) ON DELETE CASCADE )` if _, err := tx.Exec(sqlStatement); err != nil {
var err error reader, err = ghost.Subscribe(context.Background()) if err != nil { t.Logf("error subscribing to ghost: %v", err) } else { retry = false }
redirect_to events_path end private def transform_params
# log encounter self.emit_event( 'pokemon_appeared', formatted='A wild {} appeared! (CP: {} IV: {} A/D/S {} NCP: {}'.format(pokemon.name, pokemon.cp,  pokemon.iv, pokemon.iv_display, round(pokemon.cp_percent, 2),), data={ 'pokemon': pokemon.name, 'ncp': round(pokemon.cp_percent, 2),
export default Component.extend({ flashes: service(), classNameBindings: ['className'], tagName: 'ul', messages: alias('flashes.messages'), className: computed('messages.@each.className', function () { const classes = this.messages.uniqBy('className').mapBy('className').join(' '); return `flash ${classes}`; }),
// If the deployer implementation handles the deployment request synchronously, log warning message if // any exception is thrown out of the deployment and proceed to the next deployment. catch (Exception e) { loggger.warn(String.format("Exception when deploying the app %s: %s", currentModule, e.getMessage())); } } }
else: raise DGLError('Unsupported graph data type:', type(data)) def hetero_from_relations(rel_graphs, num_nodes_per_type=None): """Create a heterograph from graphs representing connections of each relation. The input is a list of heterographs where the ``i``th graph contains edges of type
documentClient, configuration, namedCosmosCollectionConfigurationAccessor, Constants.CollectionConfigurationName, testProvider, logger) { } } }
* @return RoleAccess object on success. ZTSClientException will be thrown in case of failure */ public RoleAccess getRoleAccess(String domainName, String principal) { updateServicePrincipal(); // Try to fetch from cache. ZTSClientCache.DomainAndPrincipal cacheKey = null; Cache<ZTSClientCache.DomainAndPrincipal, RoleAccess> cache = ztsClientCache.getRoleAccessCache(); if (cache != null) { cacheKey = new ZTSClientCache.DomainAndPrincipal(domainName, principal); RoleAccess cachedValue = cache.get(cacheKey);
this->ResetEngine(); try { this->engine->LoadScript(filename); } catch (Script_FatalError &e) { DEBUG(script, 0, "Fatal error '%s' when trying to load the script '%s'.", e.GetErrorMessage(), filename); return false; }
public const string TillRegex = @"(?<till>\b(at[eé]h?|[aà]s|ao?)\b|--|-|—|——)(\s+\b(o|[aà](s)?)\b)?"; public static readonly string RangeConnectorRegex = $@"(?<and>(e\s*(([àa]s?)|o)?)|{BaseDateTime.RangeConnectorSymbolRegex})"; public const string DayRegex = @"(?<day>(?:3[0-1]|[1-2]\d|0?[1-9]))(?=\b|t)"; public const string WrittenDayRegex = @"(?<day>(vinte\s+e\s+)?(um|dois|tr[eê]s|quatro|cinco|seis|sete|oito|nove)|dez|onze|doze|treze|(c|qu)atorze|quinze|dez[ae](s(seis|sete)|nove)|dezoito|vinte|trinta(\s+e\s+um)?)"; public const string MonthNumRegex = @"(?<month>1[0-2]|(0)?[1-9])\b"; public static readonly string AmDescRegex = $@"({BaseDateTime.BaseAmDescRegex})"; public static readonly string PmDescRegex = $@"({BaseDateTime.BasePmDescRegex})";
$url   = add_query_arg( array( 'package' => $file_upload->id ), 'update.php?action=upload-plugin' ); $type  = 'upload'; // Install plugin type, From Web or an Upload. $overwrite = isset( $_GET['overwrite'] ) ? sanitize_text_field( $_GET['overwrite'] ) : ''; $overwrite = $overwrite === 'uploaded-plugin'; $upgrader = new Plugin_Upgrader( new Plugin_Installer_Skin( compact( 'type', 'title', 'nonce', 'url', 'overwrite' ) ) ); $result   = $upgrader->install( $file_upload->package, [ 'overwrite_package' => $overwrite ] ); if ( $result || is_wp_error( $result ) ) { $file_upload->cleanup();
mChooseIdentityButton = (TextView) findViewById(R.id.identity); mChooseIdentityButton.setOnClickListener(this); RecipientView recipientView = new RecipientView(this); recipientPresenter = new RecipientPresenter(this, recipientView, mAccount);
CanCachePlan = CanCachePlan && // If some constants do not have matching HQL parameters, their values from first query will // be embedded in the plan and reused for subsequent queries: do not cache the plan. !ParameterValuesByName .Keys .Except(requiredHqlParameters.Select(p => p.Name)) .Any();
"crypto/rand" "crypto/x509" "errors" "testing" "time" "github.com/golang/mock/gomock" "github.com/sirupsen/logrus/hooks/test" "github.com/spiffe/spire/pkg/agent/manager/cache" common_catalog "github.com/spiffe/spire/pkg/common/catalog" "github.com/spiffe/spire/pkg/common/selector" "github.com/spiffe/spire/proto/agent/workloadattestor"
type dockerPluginConfig struct { // DockerSocketPath is the location of the docker daemon socket (default: "unix:///var/run/docker.sock" on unix). DockerSocketPath string `hcl:"docker_socket_path"` // DockerVersion is the API version of the docker daemon. If not specified, the version is negotiated by the client. DockerVersion string `hcl:"docker_version"` // CgroupPrefix (DEPRECATED) is the cgroup prefix to look for in the cgroup entries (default: "/docker"). CgroupPrefix string `hcl:"cgroup_prefix"`
$this->setArgument($k, $v, false); } // Add middleware from Groups $inner = $this->middlewareDispatcher; $this->middlewareDispatcher = new MiddlewareDispatcher($inner, $this->container);
#include "rev.h" #include "video/video_driver.hpp" #include "music/music_driver.hpp" #include "gui.h" #include <vector> #include <iterator>
conv_cfg=None, norm_cfg=dict(type='BN'), dcn=None, plugins=None): super(BasicBlock, self).__init__() assert dcn is None, 'Not implemented yet.' assert plugins is None, 'Not implemented yet.' self.norm1_name, norm1 = build_norm_layer(norm_cfg, planes, postfix=1)
it('non-shadow roots should have instanceof ShadowRoot === false', () => { expect(document.createElement('div') instanceof ShadowRoot).toEqual(false); expect(document.createDocumentFragment() instanceof ShadowRoot).toEqual(false); expect({} instanceof ShadowRoot).toEqual(false); expect(undefined instanceof ShadowRoot).toEqual(false); expect(null instanceof ShadowRoot).toEqual(false); });
return ''; } return '/' . esc_html( ltrim( wp_unslash( $_SERVER['REQUEST_URI'] ), '/' ) ); } }
stub += f" : {self.target.name}({self.target.value})" return stub def __init__(self, source, edge=None, target=None, score=1, origin=None): super().__init__() self.source = source self.edge = edge
static int s2n_connection_new_hashes(struct s2n_connection *conn) { /* Allocate long-term memory for the Connection's hash states */ POSIX_GUARD(s2n_hash_new(&conn->prf_space.ssl3.md5)); POSIX_GUARD(s2n_hash_new(&conn->prf_space.ssl3.sha1));
fields_desc = [ ShortEnumField("type", 0x8002, sctpchunkparamtypes), FieldLenField("len", None, length_of="random", adjust = lambda pkt,x:x+4), PadField(StrLenField("random", RandBin(32), length_from=lambda pkt: pkt.len-4), 4, padwith=b"\x00"),]
_AssertBoosterHandleNotNull(handle); R_API_BEGIN(); CHECK_CALL(LGBM_BoosterAddValidData(R_ExternalPtrAddr(handle), R_ExternalPtrAddr(valid_data))); return R_NilValue; R_API_END(); } SEXP LGBM_BoosterResetTrainingData_R(SEXP handle,
mp_edpXML->loadXMLParticipantEndpoint(titleElement, pdata); EXPECT_EQ(pdata->m_RTPSParticipantName, "HelloWorldSubscriber"); EXPECT_EQ(pdata->m_readers.size(), (size_t)1);  // Delete the ReaderProxyData created inside loadXMLParticipantEndpoint delete pdata->m_readers[0];  // Then delete StaticRTPSParticipantInfo delete pdata; }
await accessAsync(path + '/LOCK' || path + 'LOCK', fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK); await accessAsync(path + '/LOG' || path + 'LOG', fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK); } catch (err) { return new Error('Invalid wallet path'); } const storage = params.storage || new Storage({ path, errorIfExists: false, createIfMissing: false }); const loadedWallet = await storage.loadWallet();
if role not in accepted_roles: raise ValueError("Role {} is not acceptable".format(role)) if not need_to_be_on_ledger and role != "*": raise ValueError("'need_to_be_on_ledger' can be set to False only if any role is accepted (role='*'). " "Got {} role instead.".format(role)) def __str__(self): role = get_named_role(self.role) if self.role != '*' else 'ALL'
} int ret; if (ctx->use_gso) { mess.msg_iov = datagrams; mess.msg_iovlen = num_datagrams; while ((ret = (int)sendmsg(h2o_socket_get_fd(ctx->sock.sock), &mess, 0)) == -1 && errno == EINTR)
false, (res) -> { if (res.failed()) { LOG.error("Request for metrics failed", res.cause()); response.setStatusCode(HttpResponseStatus.INTERNAL_SERVER_ERROR.code()).end(); } else if (response.closed()) { LOG.trace("Request for metrics closed before response was generated");
public float lastMessageTime; public NetworkIdentity playerController { get; internal set; } public readonly HashSet<uint> clientOwnedObjects = new HashSet<uint>(); public bool logNetworkMessages; // this is always true for regular connections, false for local // connections because it's set in the constructor and never reset.
# degree bucketing degrees, v_buckets = scheduler.degree_bucketing(self.msg_graph, v) null_v_bucket = None non_null_v_buckets = [] reduced_msgs = [] for deg, v_bkt in zip(degrees, v_buckets):
type: 'join', name: '_tags', label: 'Tags', withType: '@apostrophecms/image-tag' } ].concat(options.addFields || []); options.arrangeFields = [
blk, cert, err0 = blockGetCert(tx, r) return err0 }) ledger_getblockcert_micros.AddMicrosecondsSince(start, nil) err = updateErrNoEntry(err, lastCommitted, latest) return } var ledger_init_count = metrics.NewCounter("ledger_init_count", "calls to init block queue") var ledger_init_micros = metrics.NewCounter("ledger_init_micros", "ms spent to init block queue") var ledger_sync_blockput_count = metrics.NewCounter("ledger_sync_blockput_count", "calls to sync block queue")
@pytest.mark.parametrize( "fn", ["max", "min", "median", "mean", "skew", "kurt", "sem", "std", "var"] ) @pytest.mark.parametrize( "numeric_only", bool_arg_values, ids=arg_keys("numeric_only", bool_arg_keys)
) except Exception, e: current_app.logger.error("Redis rpush playing_now write error: " + str(e)) raise ServiceUnavailable("Cannot record playing_now at this time.") else: submit.append(listen)
} let pluginCompilers = self.plugins.getPluginsProperty('compilers', 'compilers'); pluginCompilers.forEach(function (compilerObject) { available_compilers[compilerObject.extension] = compilerObject.cb; });
Func:    "kube", }, nil }, "connect postgres": func() (cli.Command, error) { return &connect.Command{ Command: base.NewCommand(ui),
final Condition atLeastLighterForkBlockNumber = blockchain.blockNumberMustBeLatest(minerNode); cluster.stop(); // Create the heavy fork final PantheonNode minerNodeTwo = pantheon.createMinerNode("miner-node2");
{ /** * @var AdapterInterface * @deprecated use $primary instead */ protected $master;
props.merge(self._get_load_props()) props.merge(self._get_scenario_props()) for key in sorted(props.keys()): self.env.add_java_param({"JAVA_OPTS": "-D%s=%r" % (key, props[key])}) self.env.set({"NO_PAUSE": "TRUE"}) self.env.add_java_param({"JAVA_OPTS": self.settings.get("java-opts", None)})
} nb.isRowDf = function(obj,rowsToCheck = 100){ if (!_.isArray(obj) || obj.length==0 || (obj.length === 1 && !_.isPlainObject(obj[0]))) {return false} rowsToCheck = Math.min(rowsToCheck,_.size(obj)) for (let i=1; i<rowsToCheck; i++){ if (! _.isPlainObject(obj[i])) {return false}
* @details * ### Case 1: The given node has the right node/subtree * *      * In this case, the left-most deepest node in the right subtree will * come just after the given node as we go to left deep in inorder. *      - Go deep to left most node in right subtree. *        OR, we can also say in case if BST, find the minimum of the subtree * for a given node.
with self.assertRaisesRegex(ValueError, err): FeatureLocation(42, 23, 1) with self.assertRaisesRegex(ValueError, err): FeatureLocation(42, 0, 1)  with self.assertRaisesRegex(ValueError, err): FeatureLocation(BeforePosition(42), AfterPosition(23), -1) # Features with UnknownPositions should pass check FeatureLocation(42, UnknownPosition()) FeatureLocation(UnknownPosition(), 42)
} func NewCounter(name, desc string) *Counter { return MakeCounter(MetricName{Name: name, Description: desc}) } // Register registers the counter with the default/specific registry
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4436-SEA 1645533493 996820350</p> <hr> <p>Varnish cache server</p> </body>
"  void f(Optional<String> in, String out) {", "    assertThat(in).hasValue(out);", "    assertThat(in).hasValue(out);", "  }", "  void g(Optional<String> in, String out) {", "    assertThat(in).hasValue(out);", "    ", "  }", "}"); }
} }).to_dict() # Precompute pair so lat/lon, easting/northing, mapbox coord values self.lon_range1, self.lat_range1 = (10, 30), (20, 40) self.easting_range1, self.northing_range1 = Tiles.lon_lat_to_easting_northing( self.lon_range1, self.lat_range1
) func TestDeterministicSwitching(t *testing.T) { // Issue with deadlock occurences in the medco protocol // see https://github.com/dedis/cothority/issues/479 t.Skip() defer log.AfterTest(t)
size_t size = 0; std::ostringstream strs; strs << (int) latitude << (int) longitude; size = strs.str().length() + 1 + 7 * 2 + 1; char coords[size];     // <lat>;<lon> snprintf(coords, size, "%.6f;%.6f", latitude, longitude); request->setText(coords); request->setFlag(true);     // is official attribute? requestQueue.push(request);
////////////////////////// // PERFORM A SIMULATION // ///////////////////////// const char* env_p = std::getenv("OPENSIM_USE_VISUALIZER"); // if environment variable OPENSIM_USE_VISUALIZER is unset or not 0 // then turn on visualization if (!env_p || *env_p!='0') osimModel.setUseVisualizer(true); // Initialize the system and get the default state SimTK::State& si = osimModel.initSystem();
// then dismisses the modal via `hide`. self.saveArray = function() { options.save(_.map(self.arrayItems, function(item) { return _.omit(item, '_ordinal'); })); self.hide(); };
if (cipher_preferences == NULL) { return false; } for (uint8_t i = 0; i < cipher_preferences->count; i++) { if (s2n_cipher_suite_requires_ecc_extension(cipher_preferences->suites[i])) { return true; } }
} switch ts.PropagationPolicy { case TopicPolicyCreateDelete, TopicPolicyCreateNoDelete, TopicPolicyNoCreateNoDelete: // Valid value. default:
for pos, line in enumerate(grofile, start=-2): # 2 header lines, 1 box line at end if pos == n_atoms: unitcell = np.float32(line.split()) continue if pos < 0: continue
} default Tuple2<Seq<K>, Seq<V>> unzip() { return unzip(Function.identity()); } default <T1, T2> Tuple2<Seq<T1>, Seq<T2>> unzip(BiFunction<? super K, ? super V, Tuple2<? extends T1, ? extends T2>> unzipper) {
cctools_version_debug(D_MAKEFLOW_RUN, argv[0]); #ifdef CCTOOLS_WITH_MPI //the code assumes sizeof(void*) == uint64_t int need_mpi_finalize = 0; if (batch_queue_type == BATCH_QUEUE_TYPE_MPI) { MPI_Init(NULL, NULL);
dockerfile = ''' FROM {container_image}:{container_version} {container_environment} RUN bash -c 'if [ -x "$(command -v apt-get)" ]; then apt-get update && apt-get install -y python sudo; fi' RUN bash -c 'if [ -x "$(command -v yum)" ]; then yum makecache fast && yum update -y && yum install -y python sudo which; fi' RUN bash -c 'if [ -x "$(command -v zypper)" ]; then zypper refresh && zypper update -y && zypper install -y python sudo; fi' '''  # noqa
return GetFhirClient(format, TestApplications.ServiceClient, null, reusable); } public FhirClient GetFhirClient(ResourceFormat format, TestApplication clientApplication, TestUser user, bool reusable = true) { if (!reusable) { return CreateFhirClient(format, clientApplication, user); }
) async def test_edgeql_select_subshape_filter_01(self): # TODO: produce a better error message with a hint here? async with self.assertRaisesRegexTx( edgedb.QueryError, "possibly an empty set returned",
s.Driver.FindElement(By.Id("Email")).SendKeys(email); s.Driver.FindElement(By.Id("Password")).SendKeys("123456"); s.Driver.FindElement(By.Id("LoginButton")).Click(); s.Driver.AssertNoError(); } public static void AssertNoError(this IWebDriver driver)
signupButton.setOnClickListener(view -> signUp()); if(BuildConfig.FLAVOR == "beta"){ loginCredentials.setText(getString(R.string.login_credentials)); } else { loginCredentials.setVisibility(View.GONE); }
tagMetaEmailKey     = "email" tagMetaDescKey      = "desc" tagMetaTimestampKey = "timestamp" tagMetaUserTSKey    = "user_timestamp" tagMetaVersionKey   = "metaversion" tagMetaStName  = "metadata"
click_button 'Save' current_path.should eq account_type_path(a) page.should have_content 'Account type was successfully updated' page.should have_content 'Something else' end scenario 'deleting account type' do
t.Fatal(err) } _, gotErr = mux.OpenVariableURL(ctx, parsed) if gotErr != nil { t.Fatalf("got err %v, want nil", gotErr) } if got := fake.u.String(); got != tc.want { t.Errorf("got %q want %q", got, tc.want)
* This will properly maintain the copyright information. DigitalGlobe * copyrights will be updated automatically. * * @copyright Copyright (C) 2019 DigitalGlobe (http://www.digitalglobe.com/) */ #include "HighwayTagOnlyMerger.h"
$target = null; if ($externalLinkTarget !== '' && is_string($uriHost) && $uriHost !== $host) { $target = $externalLinkTarget; } if ($resourceLinkTarget !== '' && strpos($linkHref, '_Resources') !== false) { $target = $resourceLinkTarget;
return get_model(app_label, model_name) def get_model(app_label, model_name): """ Fetches a Django model using the app registry.
constRetry, err := retry.NewConstant(waitForSealedRetryInterval) if err != nil { c.Log.Fatal().Err(err).Msg("failed to create retry mechanism") } maxedConstRetry := retry.WithMaxDuration(waitForSealedMaxDuration, constRetry)
} // AllocateStorageAddress allocates new storage address under the owner accounts to store a new register func (e *TransactionEnv) AllocateStorageAddress(owner common.Address) (uint64, error) { v, err := e.accounts.AllocateStorageAddress(flow.BytesToAddress(owner.Bytes())) if err != nil { return 0, fmt.Errorf("storage address allocation failed: %w", err) }
Namespace: "scheduler-namespace", Name:      "scheduler-name", Labels: map[string]string{ "receive-adapter": "scheduler.events.cloud.google.com", "source":          "scheduler-name", }, OwnerReferences: []metav1.OwnerReference{{
public static final int WHITE = 8; public static final int JELLIE = 9; public static final int ALL_BLACK = 10;  private CatTypes() { } }
return ihipLogStatus(hipErrorInvalidSymbol); } if (kind == hipMemcpyHostToDevice || kind == hipMemcpyHostToHost) { return ihipLogStatus(hipErrorInvalidMemcpyDirection); } else if (kind == hipMemcpyDeviceToDevice) { return ihipLogStatus(hipErrorInvalidValue); }  return ihipLogStatus(hip_internal::memcpySync(dst, static_cast<const char*>(src)+offset, count, kind, hipStreamNull)); }
fileCount++ } fileIsSymlink := isSymlink(f) size := f.Size() if fileIsSymlink { info, err := os.Stat(name) if err != nil { return browseTemplateContext{}, err
module.exports = { extend: '@apostrophecms/piece-type', options: { label: 'Files Tag', fields: { add: { title: {
import { initDebug } from './debug'; import { initDevTools } from './devtools';  if (process.env.NODE_ENV==='development') { initDebug() initDevTools(); }
self.next_update = datetime.now() + timedelta(seconds=self.min_interval) def _get_stats_title(self, player_stats): """
// This happens when a previous widget was animating out, // but Blockly is hiding the widget to create a new one. // So, short-circuit the animation and clear the timer. window.clearTimeout(Blockly.WidgetDiv.disposeAnimationTimer_); Blockly.WidgetDiv.disposeAnimationFinished_ && Blockly.WidgetDiv.disposeAnimationFinished_(); Blockly.WidgetDiv.disposeAnimationFinished_ = null; Blockly.WidgetDiv.disposeAnimationTimer_ = null;
this.master = master; existenceCache = CacheBuilder.newBuilder().expireAfterWrite(timeToCacheExistsInMillis, TimeUnit.MILLISECONDS) .maximumWeight(10_000_000).weigher(new Weigher<Path,Boolean>() { @Override public int weigh(Path path, Boolean exist) { return path.toString().length();
* The StakePoolsList either renders a loading spinner when there are * more than PRELOADER_THRESHOLD stake pools to be loaded (to increase * initial rendering performance) or StakePoolTiles (if there are only * a few stake pools OR if the simulated "preloading" is done) */ export const StakePoolsList = observer((props: StakePoolsListProps) => { const [isLoading, setIsLoading] = useState(true);
stages := make([]PipelineStage, 0, len(stageNames)) for _, name := range stageNames { stages = append(stages, PipelineStage{Name: name}) } return &PipelineManifest{
// TODO: Test that alice's favorites are updated. // TODO: Test that the three folders are resolved with // conflict markers. This will require changes to // MDServerLocal. ) }
# there was only one exact match return options[0] # there is more than one exact match for this fuzzy symbol raise MultipleSymbolsFoundForFuzzySymbol( symbol=symbol, options=self.retrieve_all(owner.sid for owner in owners),
if (req->proxy_stats.ssl.cipher_bits == 0) goto EmitNull; RESERVE(sizeof(H2O_INT16_LONGEST_STR)); pos += sprintf(pos, "%" PRIu16, (uint16_t) req->proxy_stats.ssl.cipher_bits); break; case ELEMENT_TYPE_PROXY_SSL_PROTOCOL_VERSION: APPEND_SAFE_STRING(pos, req->proxy_stats.ssl.protocol_version);
// MaxOutstandingBytes is the maximum size of unprocessed messages (unacknowledged but not yet expired). // Default is 800Mb (~763Mi) MaxOutstandingBytes int `envconfig:"MAX_OUTSTANDING_BYTES" default:"800000000"` // Max to 10m. TimeoutPerEvent time.Duration `envconfig:"TIMEOUT_PER_EVENT"`
got := b.String() expectedOutput := `{"SpanContext":{` + `"TraceID":"0102030405060708090a0b0c0d0e0f10",` + `"SpanID":"0102030405060708","TraceFlags":0},` + `"ParentSpanID":0,` + `"SpanKind":0,` + `"Name":"/foo",` +
import de.danoeh.antennapod.core.storage.DBReader; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.mockito.MockedStatic; import org.mockito.Mockito; import org.robolectric.RobolectricTestRunner;
const shared_model::crypto::Hash &hash, std::function<void(const shared_model::proto::TransactionResponse &)> validation) { iroha::protocol::TxStatusRequest request; request.set_tx_hash(shared_model::crypto::toBinaryString(hash)); iroha::protocol::ToriiResponse response; iroha_instance_->getIrohaInstance()->getCommandServiceTransport()->Status( nullptr, &request, &response); validation(shared_model::proto::TransactionResponse(std::move(response))); return *this; }
delete [] set; if (group) { group->assign(std::string(master_group) + " delete"); if (stabilization_flag == 1) { group->assign(std::string(exclude_group) + " delete"); delete [] exclude_group; } }
) # Check that disallowed things are indeed absent if not allow_newaxis: if isinstance(indexer, tuple): assert 0 <= len(indexer) <= len(shape) + int(allow_ellipsis) else: assert 1 <= len(shape) + int(allow_ellipsis)
const items = []; // The delta API might return things that happens in subdirectories and outside of the joplin directory. // We don't want to deal with these since all the files we're interested in are at the root of the joplin directory // (The .resource dir is special since it's managed directly by the clients and resources never change - only the // associated .md file at the root is synced). So in the loop below we check that the parent is indeed the joplin // directory, otherwise the item is skipped. // At OneDrive for Business delta requests can only make at the root of OneDrive.  Not sure but it's possible that // the delta API also returns events for files that are copied outside of the app directory and later deleted or // modified when using OneDrive Personal). for (let i = 0; i < response.value.length; i++) { const v = response.value[i];
type HTTPFetcher struct { peer    network.HTTPPeer rootURL string net     network.GossipNode client *http.Client
if registry, err := docker.NewRegistry(*dockerInterval); err == nil { defer registry.Stop() p.AddTagger(docker.NewTagger(registry, processCache)) p.AddReporter(docker.NewReporter(registry, hostID, p)) } else { log.Printf("Docker: failed to start registry: %v", err) }
add_filter( 'xmlrpc_pingback_error', 'xmlrpc_pingback_error' ); add_filter( 'title_save_pre', 'trim' ); // Add lazy loading attributes to content. foreach ( array( 'the_content', 'the_excerpt', 'comment_text', 'widget_text_content' ) as $filter ) { add_filter( $filter, 'wp_lazy_load_content_media' ); }
} } }
import ( "context" "github.com/kelseyhightower/envconfig" "go.uber.org/zap"
*/ void setVariable( String variableName, Object value ); @Deprecated KieRuntime getKieRuntime();  KogitoProcessRuntime getKogitoProcessRuntime(); } No newline at end of file
testScript("testScript.sql"); testScript("derived-column-names.sql"); testScript("information_schema.sql"); if (config.mvStore) { // we get slightly different explain plan stuff here in PageStore mode testScript("joins.sql"); }
$threshold = Setting::getSettings()->alert_interval; // Expiring Assets $assets = Asset::getExpiringWarrantee(Setting::getSettings()->alert_interval); $this->info(trans_choice('mail.assets_warrantee_alert', $assets->count(), ['count'=>$assets->count(), 'threshold' => $threshold])); // Expiring licenses $licenses = License::getExpiringLicenses($threshold); $this->info(trans_choice('mail.license_expiring_alert', $licenses->count(), ['count'=>$licenses->count(), 'threshold' => $threshold])); $recipient = new \App\Models\Recipients\AlertRecipient(); if ((Setting::getSettings()->alert_email!='')  && (Setting::getSettings()->alerts_enabled==1)) {
import java.io.File; import java.net.URI; import java.util.ArrayList; import java.util.List; import java.util.stream.Collectors;
Returns: str: A string representation of FirewallAction. """ return 'FirewallAction(action=%s, rules=%s)' % (self.action, self.rules) def json_dict(self): """Gets the JSON key and values for the firewall action.
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4449-SEA 1645537666 1452900445</p> <hr> <p>Varnish cache server</p> </body>
if (request->getType() == MegaRequest::TYPE_FETCH_NODES) { if (e == API_OK) { // check if we fetched a folder link and the key is invalid
} } #ifndef OSX template<typename Dtype> void DataTransformer<Dtype>::Transform(const vector<cv::Mat> & mat_vector, Blob<Dtype>* transformed_blob) {
}) t.Run("is not a member", func(t *testing.T) { _, err := MemberFromString(td, "spiffe://otherdomain.test/foo") assert.EqualError(t, err, `SPIFFE ID "spiffe://otherdomain.test/foo" is not a member of trust domain "domain.test"`) }) t.Run("empty trust domain", func(t *testing.T) { _, err := MemberFromString(spiffeid.TrustDomain{}, "spiffe://domain.test/foo") assert.EqualError(t, err, `SPIFFE ID "spiffe://domain.test/foo" is not a member of trust domain ""`) }) t.Run("invalid id", func(t *testing.T) { _, err := MemberFromString(td, "spiffe:///foo") assert.EqualError(t, err, "trust domain is missing") }) }
// Disable minification options if they're active in Autoptimize. if ( version_compare( $actual_version, '2.9.5', '<' ) ) { if ( is_plugin_active( 'autoptimize/autoptimize.php' ) ) { if ( 'on' === get_option( 'autoptimize_css' ) ) { update_rocket_option( 'minify_css', 0 ); }
} @Test public void testShutdown() { Properties properties = new Properties(); properties.put(PropertyKeyConst.SERVER_ADDR, "127.0.0.1:8848"); final ServerListManager serverListManager = new ServerListManager(properties); try { serverListManager.shutdown(); } catch (Exception e) { Assert.fail(); } } }
opts = opts.replace('_debug_port_', ('%s' % cls.debug_java_port)) elif 'address=' in opts: if not cls.debug_java_port: cls.debug_java_port = ops.split('address=')[1] return opts
hwloc_topology_destroy(topo); #endif #ifdef LBANN_HAS_SHMEM // Initialize SHMEM {
*/ QVariantMap resultMap = array.at(0).toObject().toVariantMap(); if (array.size() == 0 || resultMap.size() == 0) { qWarning() << "No reply received from the release update server:" << QString(jsonData); emit error(tr("No reply received from the release update server.")); return;
$uri = $baseUri . ltrim($uri, '/'); } } elseif ($absolute === true) { if (strncmp($uri, 'http://', 7) !== 0 && strncmp($uri, 'https://', 8) !== 0) { $uri = $baseUri . ltrim($uri, '/'); } }
assert xs == [] @checks_deprecated_behaviour @given(data=data(), xs=sets(integers())) def test_non_sequence_types_are_deprecated(data, xs): p = data.draw(permutations(xs)) assert xs == set(p)
bp::with_custodian_and_ward<1, 2, bp::with_custodian_and_ward<1, 3> >()) .def("save", &Net_Save) .def("save_hdf5", &Net_SaveHDF5) .def("load_hdf5", &Net_LoadHDF5); BP_REGISTER_SHARED_PTR_TO_PYTHON(Net<Dtype>); bp::class_<Blob<Dtype>, shared_ptr<Blob<Dtype> >, boost::noncopyable>(
} elseif (\in_array('getInstance', get_class_methods($strClass))) { $this->arrObjects[$strKey] = static::$arrSingletons[$strClass] = \call_user_func(array($strClass, 'getInstance')); } else {
'use strict'; var Realm = require('realm'); var TestCase = require('./asserts'); var schemas = require('./schemas');
#   will be sent # # There will be more arguemnts to this method once automatic encryption is introduced. def initialize(kms_providers, schema_map: nil, options: {}) @logger = options[:logger] # FFI::AutoPointer uses a custom release strategy to automatically free
} func (rs *RedisSessionStore) SessionRelease(w http.ResponseWriter) { // if rs.values is empty, return directly if len(rs.values) < 1 { return }  c := rs.p.Get() defer c.Close()
var numberStr1 = match.Groups["number1"].Value; var numberStr2 = match.Groups["number2"].Value; if (type.Contains(NumberRangeConstants.TWONUM)) { var extractNumList1 = ExtractNumberAndOrdinalFromStr(numberStr1); var extractNumList2 = ExtractNumberAndOrdinalFromStr(numberStr2); if (extractNumList1 != null && extractNumList2 != null) {
if ((uint) start > (uint) textLength) throw new ArgumentOutOfRangeException(nameof(start)); if (textLength - start == 0) return ReadOnlySpan<char>.Empty; fixed (char* charPointer = text) {
train=dict(classes=classes), val=dict(classes=classes), test=dict(classes=classes)) # TODO: Update model url after bumping to V2.0 load_from = 'https://s3.ap-northeast-2.amazonaws.com/open-mmlab/mmdetection/models/faster_rcnn_r50_fpn_1x_20181010-3d1b3351.pth'  # noqa
if ( hero ) { Interface::RedrawHeroesIcon( *hero, dstx + 82, dsty + 19 ); text.Set( GetString( hero->GetAttack() ) + sep + GetString( hero->GetDefense() ) + sep + GetString( hero->GetPower() ) + sep + GetString( hero->GetKnowledge() ) ); text.Blit( dstx + 104 - text.w() / 2, dsty + 43 ); } else {
contents += tabtab + fmt.Sprintf("super(_%s, self).__init__(handler, lock)\n", method.Name) contents += "\n" if _, ok := method.Annotations.Deprecated(); ok { contents += tab + "@deprecated\n" } contents += tab + "async def process(self, ctx, iprot, oprot):\n"
end def example_group_finished(_notification) @group_level -= 1 if @group_level > 0 end def example_passed(passed)
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.  package describe import (
} else { const char *const p[] = { NULL }; g_variant_builder_add (&metadata_builder, "{sv}", "rpmostree.packages", g_variant_new_strv (p, -1));
from platforms.fuchsia.util.device import Device from platforms.fuchsia.util.fuzzer import Fuzzer from platforms.fuchsia.util.host import Host from system import archive from system import environment from system import minijail from system import new_process from system import shell # Maximum length of a random chosen length for `-max_len`. MAX_VALUE_FOR_MAX_LENGTH = 10000
viewBinding.subscribeButton.setEnabled(true); viewBinding.subscribeButton.setText(R.string.subscribe_label); if (UserPreferences.isEnableAutodownload()) { viewBinding.autoDownloadCheckBox.setVisibility(View.VISIBLE); } }
request = Request(data=encoded_data, headers=headers, method=method) return request elif req_data.get('Action', [None])[0] == 'SendMessage': queue_url = req_data.get('QueueUrl', [path])[0] queue_name = queue_url[queue_url.rindex('/') + 1:] message_body = req_data.get('MessageBody', [None])[0] if lambda_api.process_sqs_message(message_body, queue_name):
if opts.withTokenValue { databaseWrapper, err := r.kms.GetWrapper(ctx, at.GetScopeId(), kms.KeyPurposeDatabase, kms.WithKeyId(at.GetKeyId())) if err != nil { return nil, errors.Wrap(err, op, errors.WithMsg("unable to get database wrapper")) } if err := at.decrypt(ctx, databaseWrapper); err != nil { return nil, errors.Wrap(err, op)
}; } else if (map instanceof ClientMapProxy) { // TODO: add strategy/unify after https://github.com/hazelcast/hazelcast/issues/13950 is fixed addToBuffer = item -> { Data key = serializationService.toData(key(item)); Data value = serializationService.toData(value(item)); buffer.add(new SimpleEntry<>(key, value)); }; } else {
return TRUE; if ( a1 && gbMaxPlayers > 1 ) mpqapi_update_multi_creation_time(save_num); return FALSE; }
package com.hazelcast.jet.impl.exception; import com.hazelcast.jet.JetException; public class EventLimitExceededException extends JetException { }
#cleanup phase rescue => e #cleanup on error if @options[:preserve_hosts].to_s =~ /(never)|(onpass)/ @logger.notify "Cleanup: cleaning up after failed run" if @network_manager @network_manager.cleanup
} for _, ingress := range toDelete { if ingress != "" { // It is safe to access pSvcInfo here. If this is a new Service, // then toDelete will be an empty slice. if err := p.uninstallLoadBalancerServiceFlows(net.ParseIP(ingress), uint16(pSvcInfo.Port()), pSvcInfo.OFProtocol); err != nil { klog.Errorf("Error when removing LoadBalancer Service flows: %v", err) continue }
if sys.version_info >= (3, 0): from io import BytesIO as StringIO else: from cStringIO import StringIO INFINITY = float('inf')
\System::getContainer() ->get('contao.image.image_factory') ->create(TL_ROOT . '/' . $this->strFile, array($width, $height, $mode), TL_ROOT . '/' . $this->strFile) ; $this->arrPathinfo = array();
const defaultNumGoRoutines = 100 defaultReceiveProfile := func(_ bool, maxMessages int) (int, time.Duration) { return maxMessages, 0 } defaultProcessProfile := func(bool) time.Duration { return 0 } tests := []struct { description string
// route requests through YARPC. The http.Handler returned by this function // may delegate requests to the provided YARPC handler to route them through // YARPC. // If more than one Interception is provided, they will be invoked in the same // order as they are passed in. func Interceptor(interceptor func(yarpcHandler http.Handler) http.Handler) InboundOption { return func(i *Inbound) { i.interceptors = append(i.interceptors, interceptor)
Callable, Mapping, cookielib, urlunparse, urlsplit, urlencode, str, bytes, is_py2, chardet, builtin_str, basestring) from .compat import json as complexjson from .status_codes import codes #: The set of HTTP status codes that indicate an automatically
metricsSystem.createCounter( MetricCategory.SYNCHRONIZER, "inboundQueueCounter", "count of queue items that started processing"); this.outboundQueueCounter = metricsSystem.createCounter( MetricCategory.SYNCHRONIZER, "outboundQueueCounter", "count of queue items that finished processing"); } @Override
// By default, no function is called. func (srv *Server) SetErrorFunc(f func(error)) { srv.errFunc = f srv.healthHandler.SetErrorFunc(f) } func (srv *Server) init() {
public function __invoke() { $html = ''; foreach ($this->namespaces as $ns) { $messages = array_merge( $this->fm->getMessages($ns), $this->fm->getCurrentMessages($ns) );
output, _ = docker_client.exec_in_container( container_info.container_id, env_vars=env, command=["env"] ) output = output.decode(config.DEFAULT_ENCODING) assert "MYVAR" not in output
if self.gt_unique_best: assigned_gt_inds[gt_argmax_overlaps[i]] = i + 1 else: assigned_gt_inds[overlaps[:, i] == gt_max_overlaps[i]] = i + 1 if gt_labels is not None: assigned_labels = assigned_gt_inds.new_zeros((num_bboxes, ))
* Because the data is of an unknown length, we cannot know the block size. To avoid corrupt RFiles, we throw an exception. This should be addressed by * whatever object is putting data into the stream to ensure this condition is never reached. */ if (size() >= Integer.MAX_VALUE) { throw new IOException("Unknown block size of at least " + Integer.MAX_VALUE + " bytes."); } return size() & 0x00000000ffffffffL;
gem 'timecop' gem 'rspec-retry' gem 'benchmark-ips' gem 'rspec-expectations', '~> 3.9' gem 'rspec-mocks-diag', '~> 3.9' gem 'fuubar' gem 'rfc' gem 'childprocess'
++freeSlots; const uint32_t maxCount = saveLastTroop ? troopFrom.GetCount() - 1 : troopFrom.GetCount(); uint32_t redistributeCount = isSameTroopType ? 1 : troopFrom.GetCount() / 2; // if splitting to the same troop type, use this bool to turn off fast split option at the beginning of the dialog bool useFastSplit = !isSameTroopType;
{ string text = s_UInt32TextArray[index]; byte[] utf8ByteArray = Encoding.UTF8.GetBytes(text); var utf8ByteSpan = new ReadOnlySpan<byte>(utf8ByteArray); foreach (var iteration in Benchmark.Iterations) { using (iteration.StartMeasurement())
return put(entry._1, entry._2); } @Override public LinkedHashMap<K, V> remove(K key) { if (containsKey(key)) {
var testRecvDelay time.Duration func (r *Runner) accept(ctx context.Context, id string) error { r.runningCond.L.Lock() shutdown := r.shutdown r.runningCond.L.Unlock() if shutdown { return ErrClosed
/* run code and generate handler */ mrb_value result = mrb_funcall(mrb, mrb_obj_value(mrb->kernel_module), "_h2o_prepare_app", 1, conf); h2o_mruby_assert(mrb); assert(mrb_array_p(result)); return result;
MapsIndexes vec_eyes = Maps::GetObjectPositions( MP2::OBJ_EYEMAGI, false ); if ( vec_eyes.size() ) { Interface::Basic & I = Interface::Basic::Get(); for ( MapsIndexes::const_iterator it = vec_eyes.begin(); it != vec_eyes.end(); ++it ) { Maps::ClearFog( *it, Game::GetViewDistance( Game::VIEW_MAGI_EYES ), hero.GetColor() ); I.GetGameArea().SetCenter( Maps::GetPoint( *it ) ); I.RedrawFocus(); I.Redraw();
self.excl_tax = excl_tax if incl_tax is not None: self.incl_tax = incl_tax self.tax = incl_tax - excl_tax self.is_tax_known = True elif tax is not None: self.incl_tax = excl_tax + tax self.tax = tax self.is_tax_known = True else: self.incl_tax = None
# is 'No' then we need to prepare suitable subgraph view. partition_nodes = set().union(*partition) if len(partition_nodes) != len(G): G = G.subgraph(partition_nodes) return _quotient_graph(G, partition, edge_relation, node_data, edge_data, relabel, create_using)
cols = ['Column_' + str(i) for i in range(X.shape[1])] imptcs = [] for col in cols: imptcs.append(impcts_dict.get(col, 0.)) return np.array(imptcs) X, y = load_breast_cancer(True)
auto omp_threads = omp_get_max_threads(); auto processes_on_node = comm->get_procs_per_node(); auto aluminum_threads = 0; #ifdef LBANN_HAS_ALUMINUM aluminum_threads = 1; #endif // LBANN_HAS_ALUMINUM  auto io_threads_per_process = std::max(1, static_cast<int>((max_threads / processes_on_node) - omp_threads - aluminum_threads)); return io_threads_per_process; }
/** * MediaSource based on local image files. Currently, this MediaSource expects * a series of H264 frames located within an Android Assets folder. * See https://github.com/awslabs/aws-sdk-android-samples/tree/main/AmazonKinesisVideoDemoApp/src/main/assets/sample_frames */ public class ImageFileMediaSource implements MediaSource { // Codec private data could be extracted using gstreamer plugin
} func (e *Endpoints) createTCPServer(ctx context.Context, unaryInterceptor grpc.UnaryServerInterceptor, streamInterceptor grpc.StreamServerInterceptor) *grpc.Server { tlsConfig := &tls.Config{ //nolint: gosec // False positive, getTLSConfig is setting MinVersion GetConfigForClient: e.getTLSConfig(ctx), }
{ double spellValue = 0; std::vector<Spell> guildSpells = mageguild.GetSpells( GetLevelMageGuild(), isLibraryBuild() ); for ( const Spell & spell : guildSpells ) { if ( spell.isAdventure() ) { // AI is stupid to use Adventure spells. continue;
if (_owner != null) { _owner.Retain(); } bufferHandle = new BufferHandle(_owner); } return bufferHandle; }
return nil } // Sink is required. if source.Spec.Sink != nil { sinkURI, err := c.resolveDestination(ctx, source.Spec.Sink, source.Namespace) if err != nil {
) => { return value !== values[passwordKey] ? SUCCESS : 'New password cannot be current password.'; };
// The .NET Foundation licenses this file to you under the MIT license. // See the LICENSE file in the project root for more information. using System.Buffers; using System.Text.Encodings.Web.Internal;
final Optional<BlockHeader> optionalParentHeader = protocolContext.getBlockchain().getBlockHeader(sealableBlockHeader.getParentHash()); final CliqueContext cliqueContext = protocolContext.getConsensusState(); final VoteTally voteTally = cliqueContext.getVoteTallyCache().getVoteTallyAtBlock(parentHeader);
}; describe('cli', function(){ describe('site domain', function() { before(function (done) { suiteUtil = new MockedTestUtils(testPrefix);
public void showDuplicatePicturePopup() { String uploadTitleFormat = getString(R.string.upload_title_duplicate); DialogUtil.showAlertDialog(getActivity(), getString(R.string.duplicate_image_found), String.format(Locale.getDefault(), uploadTitleFormat, uploadItem.getFileName()), getString(R.string.cancel), getString(R.string.upload_proceed), () -> { },
metav1.ListMeta `json:"metadata,omitempty"` Items           []DeviceModel `json:"items"` }
} // add the method declaration of the superclass to the candidates, if present String superclassFQN = getSuperclassFQN(); if (superclassFQN != null) { SymbolReference<ResolvedMethodDeclaration> superClassMethodRef = MethodResolutionLogic.solveMethodInFQN (superclassFQN, name, argumentsTypes, staticOnly, typeSolver); if (superClassMethodRef.isSolved()) { candidates.add(superClassMethodRef.getCorrespondingDeclaration()); } } // add the method declaration of the interfaces to the candidates, if present
name = "UnclosedFilesStreamUsage", category = Category.ONE_OFF, severity = SeverityLevel.ERROR, summary = "Ensure a stream returned by java.nio.file.Files#{list,walk} " + "is closed to prevent leaking file descriptors.") public final class UnclosedFilesStreamUsage extends BugChecker implements BugChecker.MethodInvocationTreeMatcher { private static final long serialVersionUID = 1L;
Name:           "mailer", Type:           "Scheduled Job", DockerfilePath: "./Dockerfile", Platform:       &manifest.PlatformArgsOrString{}, }, Schedule: "@hourly", HealthCheck: &manifest.ContainerHealthCheck{
this.snsClient = AmazonSNSClientBuilder.defaultClient(); } this.webhookManager = webhookManager; this.publishExecutor = threadPoolFactory.get("webhook-publish", configuration.getMaxConcurrentWebhooks()); this.typeToArn = new ConcurrentHashMap<>(); }
TestCase.assertEqual(1, objs.length, "One MixedObject"); TestCase.assertEqual(values.length, objs[0].s.size, `${values.length} values in set`); for (let i = 0; i < values.length; i++) { TestCase.assertTrue(objs[0].s.has(values[i]), `the set has "${values[i]}"`); } },
'c': iD.Node({id: 'c'}), 'd': iD.Node({id: 'd'}), 'w-1': iD.Way({id: 'w-1', nodes: ['a', 'b']}), 'w1': iD.Way({id: 'w1', nodes: ['b', 'c']}), 'w-2': iD.Way({id: 'w-2', nodes: ['c', 'd']}) }); graph = iD.actions.Join(['w-1', 'w1', 'w-2'])(graph); expect(graph.entity('w1').nodes).to.eql(['a', 'b', 'c', 'd']); expect(graph.hasEntity('w-1')).to.be.undefined; expect(graph.hasEntity('w-2')).to.be.undefined; });
class IterationChannel < ApplicationCable::Channel class UnauthorizedConnectionError < RuntimeError end  def subscribed # Assert that the user owns this iteration iteration = Iteration.find_by!(uuid: params[:uuid]) raise UnauthorizedConnectionError unless iteration.viewable_by?(current_user) # Don't use persisted objects for stream_for stream_for iteration.id
if ( get_query_var( 'post_type' ) ) { if ( is_array( get_query_var( 'post_type' ) ) ) { // phpcs:ignore WordPress.DB.PreparedSQLPlaceholders.UnfinishedPrepare $where .= " AND post_type IN ('" . join( "', '", esc_sql( get_query_var( 'post_type' ) ) ) . "')"; } else { $where .= $wpdb->prepare( ' AND post_type = %s', get_query_var( 'post_type' ) ); }
Destination: &cfg.Reva.Gateway.GRPCNetwork, }, &cli.StringFlag{ Name:        "addr", Value:       flags.OverrideDefaultString(cfg.Reva.Gateway.GRPCAddr, "0.0.0.0:9142"), Usage:       "Address to bind REVA service", EnvVars:     []string{"STORAGE_GATEWAY_GRPC_ADDR"}, Destination: &cfg.Reva.Gateway.GRPCAddr, }, &cli.StringFlag{
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4454-SEA 1645533468 2069384590</p> <hr> <p>Varnish cache server</p> </body>
var err error entries, err := s.Client.FetchEntries(context.TODO(), &common.Empty{}) if err != nil { return err } s.Entries = entries.Entries
return data1.get(attr, default) == data2.get(attr, default) else: attrs = list(zip(attr, default)) # Python 3  def match(data1, data2): return all(data1.get(attr, d) == data2.get(attr, d) for attr, d in attrs) return match try:
} if err := b.tagsCloser.Close(); err != nil { errs.add(fmt.Errorf("tag persistence: %w", err)) } if err := b.stateStoreCloser.Close(); err != nil {
action="store_true", help=_("enables dnf's obsoletes processing logic " "for upgrade or display capabilities that " "the package obsoletes for info, list and repoquery")) main_parser.add_argument("--rpmverbosity", default=None, help=_("debugging output level for rpm"), metavar='[debug level name]')
public abstract T CreateBlock(); [IterationSetup] public void BlockSetup() { block = CreateBlock();
editText.setHint(text); editText.setId(position); editText.setKeyListener(keyListener); lastEditText.setNextFocusDownId(editText.getId()); lastEditText.setImeOptions(EditorInfo.IME_ACTION_NEXT); lastEditText = editText; editText.setImeOptions(EditorInfo.IME_ACTION_DONE); editText.setSingleLine(); editText.setPadding(dpsToPixels(10), 0, dpsToPixels(10), 0);
<%= numbered_lesson_title(lesson, lesson_index) %> <% end %> <% if user_signed_in? %> <div id="section-lessons__<%= lesson.id %>"> <%= render 'courses/course/lesson_completion_button', lesson: lesson, user: @user %> </div> <% end %> </div> <% end %>
default: md.log.CInfof(ctx, "MDServerRemote: error refreshing auth token: %v", err) err = md.reconnect() if err != nil { md.log.CWarningf(ctx, "MDServerRemote: error calling md.reconnect(): %v", err) } } }
) var ( envInitAppNamePrompt = fmt.Sprintf("In which %s would you like to create the environment?", color.Emphasize("application")) envInitDefaultConfigSelectOption      = "Yes, use default." envInitAdjustEnvResourcesSelectOption = "Yes, but I'd like configure the default resources (CIDR ranges)." envInitImportEnvResourcesSelectOption = "No, I'd like to import existing resources (VPC, subnets)."
public class AliyunProperties implements Serializable { /** * Location to put staging files for uploading to OSS, defaults to the directory value of java.io.tmpdir. */ public static final String OSS_STAGING_DIRECTORY = "oss.staging-dir"; private final String ossStagingDirectory;
dialOpts = append(dialOpts, e.c.grpcDialOptions...) } ctx := e.contextWithMetadata(context.Background()) return grpc.DialContext(ctx, addr, dialOpts...) }
List<String> lines = IOUtils.readLines(new StringReader(result.content)); List<String> ips = new ArrayList<String>(lines.size()); for (String serverAddr : lines) { if (StringUtils.isNotBlank(serverAddr)) { ips.add(getFormatServerAddr(serverAddr)); } }
out_file.open(file_name.c_str(), std::ofstream::out | std::ofstream::trunc); // If there is any problem in opening file if(!out_file.is_open()) { std::cerr << "ERROR (" << __func__ << ") : "; std::cerr << "Unable to open file: "<< file_name << std::endl; std::exit(EXIT_FAILURE); } /**
input_ = InputCell(1) output = ComputeCell([input_], lambda inputs: inputs[0] + 1) observer = [] callback1 = self.callback_factory(observer) output.add_callback(callback1) input_.value = 3 self.assertEqual(observer[-1], 4) def test_callbacks_only_fire_on_change(self): input_ = InputCell(1)
->get() ->reject(function ($subscriber) use ($notified) { return in_array($subscriber->id, $notified); })->each(function ($subscriber) use ($incident) { $subscriber->notify(new NewIncidentNotification($incident)); }); }
func (d *Datastore) ApplyEnrollSecrets(teamID *uint, secrets []*fleet.EnrollSecret) error { return d.withRetryTxx(func(tx *sqlx.Tx) error { return applyEnrollSecretsDB(tx, teamID, secrets) }) } func applyEnrollSecretsDB(exec sqlx.Execer, teamID *uint, secrets []*fleet.EnrollSecret) error { if teamID != nil { sql := `DELETE FROM enroll_secrets WHERE team_id = ?` if _, err := exec.Exec(sql, teamID); err != nil {
delete[] buf; } void MegaClient::makeattr(SymmCipher* key, const std::unique_ptr<string>& attrstring, const char* json, int l) const { makeattr(key, attrstring.get(), json, l); }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4483-SEA 1645532586 620075258</p> <hr> <p>Varnish cache server</p> </body>
if (ctx->req_insert_count == 0) return H2O_HTTP3_ERROR_QPACK_DECOMPRESSION_FAILED; } if (ctx->req_insert_count > PTLS_QUICINT_MAX) { return H2O_HTTP3_ERROR_QPACK_DECOMPRESSION_FAILED; } /* sign and delta base */ if (*src >= src_end)
while i < len(self.shrink_target.blocks): j = min(i + 4, len(self.shrink_target.blocks) - 2) while j >= i: u, _ = self.shrink_target.blocks[i] _, v = self.shrink_target.blocks[j] if self.incorporate_new_buffer( self.shrink_target.buffer[:u] + self.shrink_target.buffer[v:] ): break j -= 1
if env.TimeoutPerEvent > 0 { opts = append(opts, handler.WithTimeoutPerEvent(env.TimeoutPerEvent)) } opts = append(opts, handler.WithRetryPolicy(handler.RetryPolicy{ MinBackoff: env.MinRetryBackoff, MaxBackoff: env.MaxRetryBackoff, })) opts = append(opts, handler.WithPubsubReceiveSettings(rs)) // The default CeClient is good? return opts
return TransformationStatus.InvalidData; } sealed class FromBase64 : Transformation { public override TransformationStatus Transform(ReadOnlySpan<byte> source, Span<byte> destination, out int bytesConsumed, out int bytesWritten) => Decode(source, destination, out bytesConsumed, out bytesWritten);
"github.com/kiali/kiali/models" ) func buildJaegerServiceName(namespace, app string) string { conf := config.Get() if conf.ExternalServices.Tracing.NamespaceSelector && namespace != conf.IstioNamespace { return app + "." + namespace
// the following menu items will be available for all OS under Tools const toolsItemsAll = [{ label: `${_('Note attachments')}..`, click: () => { this.dispatch({ type: 'NAV_GO',
// Mark bits for endpoint mark. Currently Felix takes the rest bits from mask available for use. markEndpointMark, allocated := markBitsManager.NextBlockBitsMark(markBitsManager.AvailableMarkBitCount()) if kubeIPVSSupportEnabled { if allocated == 0 { log.WithFields(log.Fields{ "Name":     "felix-iptables",
{ if (client->json.isnumeric()) { client->app->resendverificationemail_result((error)client->json.getint()); } else { client->json.storeobject(); client->app->resendverificationemail_result((error)API_EINTERNAL); } }
*/ @Nonnull public static <T> ProcessorMetaSupplier writeJmsQueueP( @Nonnull String queueName, @Nonnull SupplierEx<? extends Connection> newConnectionFn, @Nonnull BiFunctionEx<? super Session, ? super T, ? extends Message> messageFn ) { return WriteJmsP.supplier(queueName, newConnectionFn, messageFn, false); } /**
end def copy redirect_to new_report_path(id: params[:id]), notice: "日報をコピーしました。" end def edit
logger.Fatal("Failed to create BrokerCell reconciler", zap.Error(err)) } impl := v1alpha1brokercell.NewImpl(ctx, r)  var latencyReporter *metrics.BrokerCellLatencyReporter if r.env.InternalMetricsEnabled { latencyReporter, err = metrics.NewBrokerCellLatencyReporter() if err != nil { logger.Error("Failed to create latency reporter", zap.Error(err)) } } logger.Info("Setting up event handlers.")
internal class SqlServerStatusRegistryDataStore : IStatusRegistryDataStore { private readonly SqlConnectionWrapperFactory _sqlConnectionWrapperFactory; private readonly VLatest.UpsertSearchParamStatusesTvpGenerator<List<ResourceSearchParameterStatus>> _updateSearchParamRegistryTvpGenerator; public SqlServerStatusRegistryDataStore( SqlConnectionWrapperFactory sqlConnectionWrapperFactory, VLatest.UpsertSearchParamStatusesTvpGenerator<List<ResourceSearchParameterStatus>> updateSearchParamRegistryTvpGenerator) { EnsureArg.IsNotNull(sqlConnectionWrapperFactory, nameof(sqlConnectionWrapperFactory)); EnsureArg.IsNotNull(updateSearchParamRegistryTvpGenerator, nameof(updateSearchParamRegistryTvpGenerator));
) } func TestSigningWithTags(t *testing.T) { t.Run("Signing Transactions without tag doesn't work", newVMTest(). run( func(t *testing.T, vm *fvm.VirtualMachine, chain flow.Chain, ctx fvm.Context, view state.View, programs *programs.Programs) { // Create an account private key.
@cmdutils.register() @cmdutils.argument('tab', value=cmdutils.Value.cur_tab) def reverse_selection(tab: apitypes.Tab) -> None: """Switch the stationary end of the current selection with the moving end.""" tab.caret.reverse_selection()
enum State { ACTIVE(0x00), AUTHORITY_FILTER_DISABLED(0x01), AUTHORITY_SYSTEM_SUSPENDED(0x02); private final int principalState; State(int state) {
"session closed"); } Command command; if (queryCacheSize > 0) { if (queryCache == null) { queryCache = SmallLRUCache.newInstance(queryCacheSize); modificationMetaID = database.getModificationMetaId(); } else { long newModificationMetaID = database.getModificationMetaId(); if (newModificationMetaID != modificationMetaID) { queryCache.clear();
} err := s.client.Acknowledge(ctx, req) if err != nil { return fmt.Errorf("gcppubsub: making RPC to acknowledge messages: %v", err) } return nil }
*/ if (!c->may_control(c)) { /* We're done with this container */ if (lxc_container_put(c) > 0) containers[i] = NULL; continue;
colArg = fmt.Sprintf("%sId", strcase.ToLowerCamel(strings.ReplaceAll(strToReplace, "-", "_"))) colPath = in[len(in)-1] // append s at the end only if it isn't already present if colPath[len(colPath)-1] != 's' { colPath = fmt.Sprintf("%ss", colPath) }
[Fact] [Trait(Traits.Priority, Priority.One)] public async Task WhenGettingMetadata_GivenInvalidFormatParameter_TheServerShouldReturnNotAcceptable() { FhirException ex = await Assert.ThrowsAsync<FhirException>(async () => await Client.ReadAsync<CapabilityStatement>("metadata?_format=blah")); Assert.Equal(HttpStatusCode.NotAcceptable, ex.StatusCode);
//Object.setPrototypeOf(PersonObject, Realm.Object); //Object.setPrototypeOf(PersonObject.prototype, Realm.Object.prototype); PersonObject.__proto__ = Realm.Object; PersonObject.prototype.__proto__ = Realm.Object.prototype; exports.PersonObject = PersonObject;
func (client *clientRest) NodeSendStats(nodeKey string) (err error) { response, err := client.doPostRequest("node_send_stats", dto.NodeStatsRequest{ NodeKey: nodeKey, // TODO Refactor Node statistics with new `SessionStats` DTO Sessions: []dto.SessionStats{}, }) if err == nil {
if err2 != nil { return nil, crypto.Digest{}, err2 } return algod.Compile(program) }
reduction='mean', avg_factor=None, class_weight=None, ignore_index=-100): """Calculate the binary CrossEntropy loss. Args:
# Requires Python 2.6+ and Openssl 1.0+ # import os import mock import azurelinuxagent.common.dhcp as dhcp import azurelinuxagent.common.osutil.default as osutil from tests.tools import AgentTestCase, open_patch, patch, skip_if_predicate_true class TestDHCP(AgentTestCase):
elif 'streams' not in kwargs: kwargs['streams'] = self.p.streams kwargs['per_element'] = self._per_element kwargs['link_dataset'] = self._propagate_dataset kwargs['link_inputs'] = self.p.link_inputs
h2o_multithread_receiver_t receiver; }; struct st_status_ctx_t { int active; void *ctx; };
* * @psalm-pure */ public static function parse(string $docblock, ?int $line_number = null, bool $preserve_format = false): array { // Strip off comments. $docblock = trim($docblock);
$lang['widgets.widget_area_slug'] = 'Fält kortnamn'; $lang['widgets.view_code'] = 'Visa kod'; $lang['widgets.instance_title'] = 'Titel'; $lang['widgets.show_title'] = 'Visa widget titel?'; $lang['widgets.tag_title'] = 'Tagg'; $lang['widgets.no_available_widgets'] = 'Det finns inga widgetar tillgängliga.';
// Setup remote source configuration templateSrcConfig.sourceURL = *sourceURL templateSrcConfig.caCerts, err = x509.SystemCertPool() logger.PanicOnError(err, "Received error calling x509.SystemCertPool(). Error: %v", err) if *caCertFile != "" { newCACert, err := ioutil.ReadFile(*caCertFile) if err != nil {
return; } $context = $this->router->getContext(); $context->setBaseUrl('');  $url = $this->router->generate( 'contao_backend_login', ['redirect' => $request->getUri()], UrlGeneratorInterface::ABSOLUTE_URL ); $event->setResponse(new RedirectResponse($this->uriSigner->sign($url))); } }
"github.com/drud/ddev/pkg/plugins/platform" "github.com/drud/drud-go/utils/dockerutil" "github.com/spf13/cobra" )
const projectEnvKey = "PROJECT_ID" // NewMultiTopicDecoupleSink creates a new multiTopicDecoupleSink. func NewMultiTopicDecoupleSink(ctx context.Context, options ...MultiTopicDecoupleSinkOption) (*multiTopicDecoupleSink, error) { var err error opts := new(multiTopicDecoupleSinkOptions) for _, opt := range options { opt(opts)
// ======= WALLET ACTIONS ======= export default class WalletsActions { createWallet: Action<{ name: string, currency: string, password: ?string }> = new Action(); restoreWallet: Action<{ recoveryPhrase: string, walletName: string }> = new Action(); importWalletFromKey: Action<{ filePath: string }> = new Action(); deleteWallet: Action<{ walletId: string }> = new Action();
EncryptHeader     = "swarm-encrypt" ) type targetsContextKey struct{} // fileUploadResponse is returned when an HTTP request to upload a file is successful type fileUploadResponse struct {
requiredApprovalsForSealConstruction uint                            // number of approvals that are required for each chunk to be sealed } // AssignmentCollector has three different states. During state transition, there are some // common dependencies and immutable values to shared: // - `base` holds common dependencies // - `AssignmentCollectorBase` in addition holds extra immutable values. type AssignmentCollectorBase struct { base result        *flow.ExecutionResult // execution result
case FLOAT: case DOUBLE: Expression condition = operand; if (operand instanceof MethodCallExpression) { condition = ((MethodCallExpression) operand).targetExpression; } operand = Expressions.call(BuiltInMethod.STRING_VALUEOF.method, operand);
return $buffer; } if ( empty( $this->critical_css->get_current_page_critical_css() ) && empty( $this->options->get( 'critical_css', '' ) ) ) { return $buffer; }
TaskConfig: TaskConfig{ Count: Count{ Autoscaling: Autoscaling{ CPU: aws.Int(70), }, }, CPU: aws.Int(512),
from mmdet.core import bbox2result from ..builder import DETECTORS from .single_stage import SingleStageDetector
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4437-SEA 1645547164 1704735867</p> <hr> <p>Varnish cache server</p> </body>
opts = &Options{} } if opts.RevisionField == "" { opts.RevisionField = docstore.DefaultRevisionField } return &collection{ db:           db,
// Overwrite the page meta data (see #2853, #4955 and #87) $responseContext = System::getContainer()->get(ResponseContextAccessor::class)->getResponseContext(); if ($responseContext instanceof WebpageResponseContext) { if ($objArticle->pageTitle) {
actions = append(actions, action) } } actions = append(account.MergeSpendAction(spendActions), actions...) ttl := req.TTL.Duration if ttl == 0 {
end describe '#createtopic' do it 'creates the topic with the desired topic name and AWS Region and displays the resulting topic ARN' createtopic_client.stub_responses( create_topic, :topics => [ { :topic_arn => "arn:aws:sqs:*:444455556666:queue1",
`y_pred`, and returns the loss. If the model has multiple outputs, you can use a different loss on each output by passing a dictionary or a list of losses. The loss value that will be minimized by the model will then be the sum of all individual losses, each weighted by `loss_weights`. loss_weights: (Optional) a list or dictionary specifying scalar coefficients (Python floats) to weight the loss contributions of different model outputs. The loss value that will be minimized by the model will then
DebugLogger(combat) << "Attacker: " << attacker->Name(); // Set launching carrier as at least basically visible to other empires. if (!launches_event->AreSubEventsEmpty(ALL_EMPIRES)) { for (auto detector_empire_id : combat_info.empire_ids) { Visibility initial_vis = combat_info.empire_object_visibility[detector_empire_id][attacker_id]; TraceLogger(combat) << "Pre-attack visibility of launching carrier id: " << attacker_id
result : Dict[str, int] Dictionary where keys are worker addresses and values are an open port for LightGBM to use. """ lightgbm_ports: Set[int] = set() worker_ip_to_port = {} for worker_address in worker_addresses: port = client.submit(
// DdevSequelproCmd represents the sequelpro command var DdevSequelproCmd = &cobra.Command{ Use:   "sequelpro", Short: "Connect sequelpro to a project database", Long:  `A helper command for using sequelpro (macOS database browser) with a running DDEV-Local project's database'.`, Run: func(cmd *cobra.Command, args []string) { if len(args) != 0 { output.UserOut.Fatalf("invalid arguments to sequelpro command: %v", args)
// Check if the best chain has changed while we were disconnecting or processing blocks. // If so then we need to return and continue processing the newer chain. pindexNewMostWork = FindMostWorkChain(); if (!pindexMostWork) return false;  if (pindexNewMostWork->nChainWork > pindexMostWork->nChainWork) { LogPrint("parallel", "Returning because chain work has changed while connecting blocks\n");
const char * origTrueValue; const char * origFalseValue; bool restore = data->booleanRestore >= 0; if (value[0] == '1' && value[1] == '\0') { if (restore) { keySetMeta (key, "origvalue", data->booleans[data->booleanRestore].trueValue); }
category_torch_type[category] = to_torch_type[np.dtype(category_tensors[category].dtype())] if type(category_tensors[category]) is TensorGPU: if not torch_gpu_device: torch_gpu_device = torch.device('cuda', dev_id) category_device[category] = torch_gpu_device else: category_device[category] = torch_cpu_device
listResult, err = sfs.SimpleFSReadList(ctx, opid) require.NoError(t, err) assert.Len(t, listResult.Entries, 1, "Expected 1 directory entries in listing") // Assume we've exhausted the list now, so expect error _, err = sfs.SimpleFSReadList(ctx, opid)
} /** * @brief Self-test implementations to * test the `integral_approx` function. * * @returns `void` */
import { ELEMENT_NODE, DOCUMENT_NODE, DOCUMENT_FRAGMENT_NODE } from './constants'; function getClosestDomNodeParent(parent) { if (!parent) return {}; if (typeof parent.type === 'function') { return getClosestDomNodeParent(parent._parent); } return parent; } export function initDebug() {
handleOnProductOpen = () => this.props.updateAutocompleteVisible(false); // map Magento 2.3.1 schema changes to Venia 2.0.0 proptype shape to maintain backwards compatibility mapProducts(products) { return products.map(product => { if (typeof product.small_image === 'object') {
// DispatchMsg takes a message and puts it into a queue for later processing. // This allows a protocol to have a backlog of messages. func (n *Node) DispatchMsg(msg *SDAData) { dbg.Lvl3(n.Myself(), "Received message") n.msgDispatchQueueMutex.Lock() n.msgDispatchQueue = append(n.msgDispatchQueue, msg) dbg.Lvl3(n.Myself(), "DispatchQueue-length is", len(n.msgDispatchQueue)) if len(n.msgDispatchQueue) == 1 { n.msgDispatchQueueWait <- true }
Blockly.Variables.renameVariable = function(workspace, variable, opt_callback) { // Validation and modal message/title depends on the variable type var promptMsg, modalTitle; var varType = variable.type; if (varType == Blockly.LIST_VARIABLE_TYPE) { promptMsg = Blockly.Msg.RENAME_LIST_TITLE;
final String deployId = getAndCheckDeployId(requestId); checkConflict(!(requestManager.markAsBouncing(requestId) == SingularityCreateResult.EXISTED), "%s is already bouncing", requestId); requestManager.createCleanupRequest( new SingularityRequestCleanup(JavaUtils.getUserEmail(user), isIncrementalBounce ? RequestCleanupType.INCREMENTAL_BOUNCE : RequestCleanupType.BOUNCE, System.currentTimeMillis(), Optional.<Boolean> absent(), Optional.absent(), requestId, Optional.of(deployId), skipHealthchecks, message, actionId, runBeforeKill)); requestManager.bounce(requestWithState.getRequest(), System.currentTimeMillis(), JavaUtils.getUserEmail(user), message);
// Add sync methods if (realmConstructor.Sync) { realmConstructor.Sync.User = require('./sync').User; realmConstructor.Sync.AuthError = require('./errors').AuthError; } // TODO: Remove this now useless object.
*/ package org.flowable.engine.impl.bpmn.behavior; import static java.util.stream.Collectors.toList; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.Date; import java.util.List; import java.util.stream.Stream; import org.apache.commons.lang3.StringUtils;
g_hash_table_replace (metadata_hash, g_strdup ("rpmostree.inputhash"), g_variant_ref_sink (g_variant_new_string (new_inputhash))); const char *gpgkey = NULL; if (!_rpmostree_jsonutil_object_get_optional_string_member (treefile, "gpg_key", &gpgkey, error)) goto out;
opcodetype opcode; if (!GetOp(pc, opcode)) break; if (opcode == OP_CHECKSIG || opcode == OP_CHECKSIGVERIFY || (enableDataSigVerify && (opcode == OP_DATASIGVERIFY))) n++; else if (opcode == OP_CHECKMULTISIG || opcode == OP_CHECKMULTISIGVERIFY) {
buf.Append(StringHelper.CommaSpace).Append(PrimaryKey.SqlConstraintString(dialect, defaultSchema)); } foreach (UniqueKey uk in UniqueKeyIterator) { string ukSql = uk.SqlConstraintString(dialect); if (!string.IsNullOrEmpty(ukSql)) { buf.Append(',').Append(ukSql); } }
$critical_css_content = str_replace( '\\', '\\\\', $critical_css_content ); $buffer = preg_replace( '#</title>#iU', '</title><style id="rocket-critical-css">' . wp_strip_all_tags( $critical_css_content ) . '</style>', $buffer, 1 ); return preg_replace( '#</body>#iU', $this->return_remove_cpcss_script() . '</body>', $buffer, 1 ); } /**
if (total_data_recv > 0) { fprintf(stdout, "Early Data received: "); for (ssize_t i = 0; i < total_data_recv; i++) { fprintf(stdout, "%c", early_data_received[i]); } fprintf(stdout, "\n");
namespace { shared_model::interface::types::TimestampType oldestTimestamp( const iroha::BatchPtr &batch) { const bool batch_is_empty = boost::empty(batch->transactions()); assert(not batch_is_empty); if (batch_is_empty) { return 0; } auto timestamps = batch->transactions() | boost::adaptors::transformed(
forgotPassword = () => {}; /* * When the ForgotPassword component is mounted, its email input will be set to * the value of the SignIn component's email input. * Our common Input component handles initialValue only when component is mounted. */ setForgotPasswordForm = () => { this.forgotPassword = className => { return (
G2 = nx.barbell_graph(3, 0) # There is only one cut edge, and each set has volume seven. S2 = {0, 1, 2} assert nx.conductance(G2, S2) == 1 / 7 class TestEdgeExpansion:
if err != nil { return err } } else if len(def) > 0 && def[0].ForwardConfig != nil && len(def[0].ForwardConfig.TargetGroups) > 1 { // Multiple target groups means we can keep the listener var active bool
return current; } /** * Return a {@link Pair} of {@link Schema} and {@link Iterator} over records of type T that include the identity * partition columns being projected. */ abstract Pair<Schema, Iterator<T>> getJoinedSchemaAndIteratorWithIdentityPartition( DataFile file, FileScanTask task, Schema requiredSchema, Set<Integer> idColumns, PartitionSpec spec);
void HIPInternal::print_configuration(std::ostream &s) const { const HIPInternalDevices &dev_info = HIPInternalDevices::singleton(); s << "macro  KOKKOS_ENABLE_HIP : defined" << '\n'; #if defined(HIP_VERSION) s << "macro  HIP_VERSION = " << HIP_VERSION << " = version " << HIP_VERSION / 100 << "." << HIP_VERSION % 100 << '\n'; #endif for (int i = 0; i < dev_info.m_hipDevCount; ++i) {
sofa::core::topology::BaseMeshTopology* topoCon; firstBody.body->getContext()->get(topoCon); if (!topoCon || topoCon->getTopologyType() != sofa::core::topology::TopologyElementType::TRIANGLE) return; // Output declarations
return true; } bool python_reader::fetch_label(CPUMat& Y, int data_id, int col) { return true; }
ResourceClusterBlockProposalQueue = "cluster_compliance_proposal_queue" // collection node, compliance engine ResourceClusterBlockVoteQueue     = "cluster_compliance_vote_queue"     // collection node, compliance engine ResourceBeaconKey                 = "beacon-key"                        // consensus node, DKG engine ResourceApprovalQueue             = "sealing_approval_queue"            // consensus node, sealing engine ResourceReceiptQueue              = "sealing_receipt_queue"             // consensus node, sealing engine ResourceApprovalResponseQueue     = "sealing_approval_response_queue"   // consensus node, sealing engine
state, err := c.EnsureSubscription(ctx, source, source.Spec.Project, source.Spec.Topic, source.Status.SubscriptionID) switch state { case pubsub.OpsJobGetFailed: logger.Error("Failed to get subscription ops job.", zap.Any("state", state), zap.Error(err)) return err case pubsub.OpsJobCreated: // If we created a job to make a subscription, then add the finalizer and update the status. addFinalizer(source) source.Status.MarkSubscriptionOperation("Creating",
browser.browserAction.onClicked.addListener(catcher.watchFunction((tab) => { if (shouldOpenMyShots(tab.url)) { if (! hasSeenOnboarding) { catcher.watchPromise(analytics.refreshTelemetryPref().then(() => { sendEvent("goto-onboarding", "selection-button"); return forceOnboarding(); })); return; } catcher.watchPromise(analytics.refreshTelemetryPref().then(() => {
def _is_generator_function(x): """Checks whether x is a generator function or a callable object where __call__ is a generator function""" if inspect.isgeneratorfunction(x): return True if x is None or inspect.isfunction(x):
const pkg = fs.readFileSync(`${MOCK_TEMPLATE_BUILD_PATH}/package.json`, 'utf8') try { var validData = JSON.parse(pkg) expect(validData.author).to.equal(escapedAnswers.author) done() } catch (err) { done(err)
@Override public Capabilities getCanonicalCapabilities() { return new ImmutableCapabilities(CapabilityType.BROWSER_NAME, BrowserType.CHROME); } @Override
(re.compile(r'^download-remove --all$'), r'download-clear'), (re.compile(r'^hint links fill "([^"]*)"$'), r'hint links fill \1'), ]
// This file is generated via a gradle task and should not be edited directly. public final class PantheonInfo { private static final String CLIENT_IDENTITY = "pantheon"; private static final String VERSION = CLIENT_IDENTITY + "/v" + PantheonInfo.class.getPackage().getImplementationVersion() + "/"
else: raise NoDataError("Provide at least a position, velocity" " or force group in the h5md file.") except (ValueError, IndexError): raise IOError from None self._frame = frame
@Override protected void configure() { } @Provides
Map<String, Object> data = objectMapper.readValue(entry.getData(), new TypeReference<HashMap<String, Object>>() { }); assertThat(data) .containsKeys( Fields.PROCESS_DEFINITION_ID, Fields.PROCESS_INSTANCE_ID, Fields.VALUE_STRING, Fields.TENANT_ID ); assertThat(data.get(Fields.TENANT_ID)).isEqualTo(testTenant); }
topicCondSet.Manage(ts).MarkTrue(TopicConditionAddressable) } else { ts.Address.URL = nil topicCondSet.Manage(ts).MarkFalse(TopicConditionAddressable, "emptyUrl", "url is the empty string") } }
$l['purgespammer'] = "Purge Spammer"; $l['purgespammer_purge'] = "Purge spammer {1}"; $l['purgespammer_purge_desc'] = "This will delete user's whole content (posts, private messages, events, etc.) and {1} him."; $l['purgespammer_ban'] = "ban"; $l['purgespammer_delete'] = "delete"; $l['purgespammer_submit'] = "Purge Spammer";
return true; } logInfo(RTPS_HISTORY, "Reader Proxy doesn't exist in this writer"); return false; }
/* Package migration enables you to generate migrations back and forth. It generates both migrations.
} if (f != 0.0) Q->xy_factor *= f; } if ((name = pj_param (P->ctx, P->params, "sxy_out").s) != nullptr) {
} #ifdef ENABLE_CHAT CommandChatCreate::CommandChatCreate(MegaClient *client, bool group, const userpriv_vector *upl) { this->client = client; this->chatPeers = new userpriv_vector(*upl); cmd("mcc"); arg("g", (group) ? 1 : 0);
filesMatch(Lists.newArrayList("C", "D", "E"), appendsBetweenScan(2, 5)); Assert.assertTrue(listener1.event().fromSnapshotId() == 2); Assert.assertTrue(listener1.event().toSnapshotId() == 5); Assert.assertEquals(table.schema(), listener1.event().projection()); Assert.assertEquals(Expressions.alwaysTrue(), listener1.event().filter()); Assert.assertEquals("test", listener1.event().tableName()); } @Test
return m_state.getNonce(_addr); } h256 MPTState::rootHash(bool) const { return m_state.rootHash(); }
from MDAnalysis.tests.datafiles import PDB import pickle @pytest.fixture(params=[
stream(modules).forEach(m -> stream(m.localSentences()).forEach(new CheckHOLE(errors, m)::check)); if (!(isSymbolic && isKast)) { stream(modules).forEach(m -> stream(m.localSentences()).forEach(new CheckTokens(errors, m)::check)); } stream(modules).forEach(m -> stream(m.localSentences()).forEach(new CheckK(errors)::check));
QStringList ptDbSplit = db->getCard(name)->getPowTough().split("/"); QStringList ptSplit = pt.split("/"); if (getFaceDown() || ptDbSplit.at(0) != ptSplit.at(0) || ptDbSplit.at(1) != ptSplit.at(1)) painter->setPen(QColor(255, 150, 0)); else painter->setPen(Qt::white);
<img src="<?php echo esc_url( PODS_URL . 'ui/images/pods-logo-green.svg' ); ?>" alt="<?php esc_attr_e( 'Pods logo', 'pods' ); ?>" class="pods-logo"> <div class="pods-block-placeholder_content"> <h2 class="pods-block-placeholder_title"><?php esc_html_e( 'View', 'pods' ); ?></h2> <p><?php esc_html_e( 'No preview is available for this Pods Form, you will see it when you view or preview this post on the front of your site.', 'pods' ); ?></p> </div> </div> <img src="<?php echo esc_url( PODS_URL . 'ui/images/pods-view-placeholder.svg' ); ?>" alt="<?php esc_attr_e( 'Generic placeholder image depicting a common view layout', 'pods' ); ?>" class="pods-block-placeholder_image">
* @return the number of elements actually drained */ @SuppressWarnings("unchecked") default <E> int drainTo(@Nonnull Collection<E> target) { for (Object o : this) { target.add((E) o); }
"github.com/aws/copilot-cli/internal/pkg/manifest" ) const ( fmtInvalidRepo = "unable to locate the repository URL from the properties: %+v" )
bool image_data_reader::fetch_label(CPUMat& Y, int data_id, int mb_idx) { const label_t label = m_image_list[data_id].second; if (label < label_t{0} || label >= static_cast<label_t>(m_num_labels)) { LBANN_ERROR( "\"",this->get_type(),"\" data reader ", "expects data with ",m_num_labels," labels, ", "but data sample ",data_id," has a label of ",label); } Y.Set(label, mb_idx, 1); return true; }
if os.path.isfile(ovf_file_path): try: ovf_env = OvfEnv(fileutil.read_file(ovf_file_path)) self.report_event(message=ovf_env.provision_guest_agent, is_success=True, duration=0, operation=WALAEventOperation.ProvisionGuestAgent)
$args = [ 'post_type'        => 'question', 'posts_per_page'   => $number, 'orderby'          => 'title', 'tax_query'        => [ // phpcs:ignore WordPress.DB.SlowDBQuery.slow_db_query_tax_query -- Query limited by the number of questions. [ 'taxonomy' => 'question-category',
if ( $files ) { foreach ( $files as $file ) { if ( preg_match( '#/index(?:-.+\.|\.)html(?:_gzip)?$#', $file ) ) { rocket_direct_filesystem()->delete( $file ); } }
} var interceptor = FieldInterceptionHelper.ExtractFieldInterceptor(entity); if (interceptor == null) { return CollectionHelper.EmptySet<string>(); }  return interceptor.GetUninitializedLazyProperties() ?? lazyPropertyNames; } public override bool IsLifecycleImplementor
if (bl>contained.getBeginLine()) return false; if (bl==contained.getBeginLine() && bc>contained.getBeginColumn()) return false; if (container.getEndLine()<contained.getEndLine()) return false; // TODO < or <= ? return !(container.getEndLine() == contained.getEndLine() && container.getEndColumn() < contained.getEndColumn()); } return true;
wp_die( esc_html__( 'Invalid post type. Can duplicate only lessons and courses', 'sensei-lms' ) ); } $event = false; if ( 'course' === $post_type ) { $event = 'course_duplicate'; } elseif ( 'lesson' === $post_type ) { $event = 'lesson_duplicate'; }  $event_properties = [ $post_type . '_id' => $post_id, ];
Parameters ---------- applier: Callable Function object to register `funcs` *funcs: list List of functions to register in `applier` Returns -------
char errmsg[256]; snprintf(errmsg, 256, "step%d-hbondchk failed: H=%d end(H)=%d str(H+1)=%d\n", step, Hindex, End_Index(Hindex,hbonds), comp ); system->error_ptr->one(FLERR, errmsg); } } }
}); const perSince = getPerSince(); const disallowed = userSafe.attempts && userSafe.attempts .filter(attempt => (attempt >= perSince)).length >= allowedAttempts; if (!disallowed) { return false; }
$advancedSettings = $oQuestion->getAdvancedSettingsWithValues(null, $sQuestionTheme); // Group the array in categories $questionAttributeHelper = new LimeSurvey\Models\Services\QuestionAttributeHelper(); $advancedSettings = $questionAttributeHelper->groupAttributesByCategory($advancedSettings); // This category is "general setting". unset($advancedSettings['Attribute']);
* @param n number * @return Sum of binomial coefficients of number */ uint64_t binomialCoeffSum(uint64_t n) { // Calculating 2^n return (1 << n);
''.format(attrname)) vals = cur.fetchall() except sqlite3.DatabaseError: errmsg = "Failed reading the atoms from DMS Database" raise IOError(errmsg) from None else: attrs[attrname] = np.array(vals, dtype=dt)
def multi_gpu_test(model, data_loader, tmpdir=None, gpu_collect=False): """ When gpu_collect=True, it will use GPU communication to collect results from different workers. Otherwise it will saves the results to tmpdir first and collect it by CPU. """ model.eval() results = [] dataset = data_loader.dataset
*/ protected $factories = [ 'VuFind\Hierarchy\TreeRenderer\JSTree' => 'VuFind\Hierarchy\TreeRenderer\JSTreeFactory' ]; /**
"github.com/fxamacker/cbor/v2" "github.com/onflow/cadence" "github.com/onflow/cadence/runtime" "github.com/stretchr/testify/assert" "github.com/stretchr/testify/require"  "github.com/onflow/flow-go/crypto" "github.com/onflow/flow-go/crypto/hash" "github.com/onflow/flow-go/model/flow" ) func TestAddEncodedAccountKey_error_handling_produces_valid_utf8(t *testing.T) {
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4449-SEA 1645540621 1476532598</p> <hr> <p>Varnish cache server</p> </body>
"""Redis result store backend.""" from __future__ import absolute_import, unicode_literals from functools import partial from ssl import CERT_NONE, CERT_OPTIONAL, CERT_REQUIRED import threading from kombu.utils.functional import retry_over_time from kombu.utils.objects import cached_property
return fmt.Errorf("unmarshal pipeline manifest: %w", err) } if len(pipeline.Name) > 100 { return fmt.Errorf(`pipeline name '%s' must be shorter than 100 characters`, pipeline.Name) } o.pipelineName = pipeline.Name
combiners = new ColumnSet(Lists.newArrayList(Splitter.on(",").split(encodedColumns))); isPartialCompaction = ((env.getIteratorScope() == IteratorScope.majc) && !env.isFullMajorCompaction());  String dhaOpt = options.get(DELETE_HANDLING_ACTION_OPTION); if (dhaOpt != null) { try{ deleteHandlingAction = DeleteHandlingAction.valueOf(dhaOpt); } catch(IllegalArgumentException iae) { throw new IllegalAccessError(dhaOpt+" is not a legal option for "+DELETE_HANDLING_ACTION_OPTION); } } else { deleteHandlingAction = DeleteHandlingAction.LOG_ERROR; }
pD = &sgLevels[currlevel].item[i]; if (pD->bCmd == 0xFF) { pD->bCmd = CMD_STAND; sgbDeltaChanged = TRUE; pD->x = item[ii]._ix; pD->y = item[ii]._iy; pD->wIndx = item[ii].IDidx;
v_file = "Vagrant.configure(\"2\") do |c|\n" hosts.each do |host| host['ip'] ||= randip #use the existing ip, otherwise default to a random ip host['ssh_port'] = randport if options['vagrant_ssh_port_random'] == true v_file << "  c.vm.define '#{host.name}' do |v|\n" v_file << "    v.vm.hostname = '#{host.name}'\n" v_file << "    v.vm.box = '#{host['box']}'\n" v_file << "    v.vm.box_url = '#{host['box_url']}'\n" unless host['box_url'].nil? v_file << "    v.vm.base_mac = '#{randmac}'\n" v_file << "    v.vm.network :private_network, ip: \"#{host['ip'].to_s}\", :netmask => \"#{host['netmask'] ||= "255.255.0.0"}\"\n" v_file << "    v.vm.network :forwarded_port, guest: 22, host: #{host['ssh_port']}, id: \"ssh\", auto_correct: true" if options['vagrant_ssh_port_random'] == true v_file << "  end\n" @logger.debug "created Vagrantfile for VagrantHost #{host.name}" end
defer func() { if panicked || err != nil { e := _txOrm.Rollback() if e != nil { logs.Error("rollback transaction failed: %v,%v", e, panicked) } } else { e := _txOrm.Commit() if e != nil { logs.Error("commit transaction failed: %v,%v", e, panicked) } } }()
checkForFailures(); if (startTime == 0) { startTime = System.currentTimeMillis(); List<GarbageCollectorMXBean> gcmBeans = ManagementFactory.getGarbageCollectorMXBeans(); for (GarbageCollectorMXBean garbageCollectorMXBean : gcmBeans) {
} } @Override public void remove(SessionId id) { Require.nonNull("Session ID", id);
// save current page ( a page is an image file inside the archive ) this.swiperInstance.on('slideChange', () => { this.currentPage = this.swiperInstance.activeIndex; Events.trigger(this, 'pause'); }); });
string commonNamespace; if (!RootNamespaces.TryGetValue(assembly, out commonNamespace)) { commonNamespace = ExtractAssemblyRootNamespace(assembly); } if (string.IsNullOrWhiteSpace(commonNamespace)) {
this.slaveDiskTotal = slaveDiskTotal; } public double getCpusUsed() { return cpusUsed; }
run.PrivateId = runId _, err := r.writer.DoTx(ctx, db.StdRetryCnt, db.ExpBackoff{}, func(r db.Reader, w db.Writer) error { // TODO (lcr 07/2021) this can potentially overwrite completed and total values // persisted by the scheduler's monitor jobs loop. // Add an on update sql trigger to protect the job_run table, once progress // values are used in the critical path. rows, err := w.Query(ctx, completeRunQuery, []interface{}{completed, total, runId}) if err != nil { return errors.Wrap(err, op) }
} hit = random(68, 100); hper = 90 - (BYTE)monster[m].mArmorClass - dist; if (hper < 5) hper = 5; if (hper > 95)
proxy.normalisedAddrs = append(proxy.normalisedAddrs, addr) } if len(froms) == 0 { return } env := []string{
<div css={sharedStyles.articleLayout.content}> <Header>Languages</Header> <TitleAndMetaTags canonicalUrl={`${urlRoot}/languages/`} title="React - Languages" />
{ use JobTrait; protected function getObjectAndParams() { $params = [];
private static final String PANTHEON_PREFIX = "pantheon_"; private final Map<MetricCategory, Collection<Collector>> collectors = new ConcurrentHashMap<>(); PrometheusMetricsSystem() {} public static MetricsSystem init() { final PrometheusMetricsSystem metricsSystem = new PrometheusMetricsSystem(); metricsSystem.collectors.put(MetricCategory.PROCESS, singleton(new StandardExports())); metricsSystem.collectors.put(
#   RSpec.configure do |config| #     config.format_docstrings false #   end def format_docstrings(&block) @format_docstrings_block = block_given? ? block : DEFAULT_FORMATTER end
TcpClient client = kvp.Value.client; // close the stream if not closed yet. it may have been closed // by a disconnect already, so use try/catch try { client.GetStream().Close(); } catch {} client.Close(); }
it('log ' + servicename + ' -c ' + "existingContinuationToken" + ' --json (get logs by Continuation Token)', function (done) { var cmd = ('node cli.js mobile log ' + servicename + ' -c ' + existingContinuationToken + ' --json').split(' '); var scopes = setupNock(cmd); executeCmd(cmd, function (result) { result.exitStatus.should.equal(0); var response = JSON.parse(result.text); Array.isArray(response.results).should.be.ok; response.results.length.should.equal(6); response.results.forEach(function (item) { item.timeCreated.should.not.be.empty; item.type.should.not.be.empty;
main_parser = argparse.ArgumentParser(dnf.const.PROGRAM_NAME, add_help=False) main_parser._optionals.title = _("Optional arguments") main_parser.add_argument("-c", "--config", dest="config_file_path", default=None, metavar='[config file]', help=_("config file location"))
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4470-SEA 1645550874 2916412405</p> <hr> <p>Varnish cache server</p> </body>
sub *Subscription } // Ack acknowledges the message, telling the server that it does not need to be // sent again to the associated Subscription. It returns immediately, but the // actual ack is sent in the background, and is not guaranteed to succeed. func (m *Message) Ack() { // Send the message back to the subscription for ack batching. // size is an estimate of the size of a single AckID in bytes.
fieldT := objT.Field(i) label, name, fType, id, class, ignored, required := parseFormTag(fieldT) if ignored { continue }
if ( event->type==et_close ) { SD_DoCancel( sd ); } else if ( event->type==et_charup ) { sd->fv->script_unsaved = !GTextFieldIsEmpty(GWidgetGetControl(sd->gw,CID_Script)); } else if ( event->type==et_save ) { sd->fv->script_unsaved = false; } else if ( event->type==et_char ) {
def get(self, k, d=None): """Return the value in the dictionary.  If the key (k) is not found, this returns None unless a specified default (d) is specified. """ try: return self.__getitem__(k)
public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()) { case android.R.id.home: prepareToFinish(true); break; case R.id.send: checkToSendMessage();
} func (h handler) ServeHTTP(w http.ResponseWriter, req *http.Request) { defer req.Body.Close() if req.Method != "POST" { http.NotFound(w, req) return } caller := req.Header.Get(CallerHeader) if len(caller) == 0 { http.Error(w, "caller name is required", http.StatusBadRequest)
uint all_sum = 0; for (int i = 0; i < numDevices; ++i) { mg_info *mg_info_temp = nullptr; result = hip_internal::ihipHostMalloc(tls, (void **)&mg_info_temp, sizeof(mg_info), hipHostMallocDefault); if (result != hipSuccess) { hip_internal::ihipHostFree(tls, mg_sync_ptr);
} // EachByPack returns a channel that yields all blobs known to the index // grouped by packID but ignoring blobs with a packID in packPlacklist. // When the  context is cancelled, the background goroutine // terminates. This blocks any modification of the index. func (idx *Index) EachByPack(ctx context.Context, packBlacklist restic.IDSet) <-chan EachByPackResult {
if (tableRef instanceof SqlBasicCall && ((SqlBasicCall) tableRef).getOperator() instanceof SqlAsOperator) { SqlBasicCall basicCall = (SqlBasicCall) tableRef; basicCall.operand(0).unparse(writer, 0, 0); writer.setNeedWhitespace(true); writeKeywordAndPeriod(writer, snapshot); writer.keyword("AS"); basicCall.operand(1).unparse(writer, 0, 0); } else { tableRef.unparse(writer, 0, 0); writeKeywordAndPeriod(writer, snapshot);
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4421-SEA 1645530273 1424808615</p> <hr> <p>Varnish cache server</p> </body>
return fmt.Errorf("missing sort key %q", c.sortKey) } if av.M[docstore.RevisionField], err = encodeValue(driver.UniqueString()); err != nil { return err } in := &dyn.PutItemInput{
if set_tasks["ever_failed"]: if not set_tasks["failed"]: smiley = ":)" reason = "there were failed tasks but they all suceeded in a retry" else: smiley = ":(" reason = "there were failed tasks"
Script::ObjectiveC when 'bash', 'sh', 'shell', 'minimal' then Script::Generic else name = lang.split('_').map { |w| w.capitalize }.join Script.const_get(name, false) rescue Script::Ruby
storiesOf('Inputs (Checkbox)', module) .add('Checkbox', () => ({ data () { return { field,
func main() { flag.Usage = Usage var ( server   = flag.Bool("server", false, "Run server") protocol = flag.String("P", "binary", "Specify the protocol (binary, compact, json, simplejson)") addr     = flag.String("addr", nats.DefaultURL, "NATS address") secure   = flag.Bool("secure", false, "Use tls secure transport") port     = flag.String("port", "8090", "Port for http transport") ) flag.Parse()
return nil, err } if p.config.ContainerPort < 1 { p.config.ContainerPort = 3000 }
-------- >>> G = nx.Graph() >>> G.add_path([0,1,2,3,4]) >>> list(nx.dfs_postorder_nodes(G,0)) [4, 3, 2, 1, 0] >>> list(nx.dfs_postorder_nodes(G,0,2)) [1, 0] Notes
for directed in [False, True]: edge_counts = [[0] * 5 for row in range(5)] for i in range(runs): G = generator( n, p, directed=directed ) for (v, w) in G.edges:
// +build go1.10  package net import (
"""Initialize sids and other state variables. :Arguments: data_frequency : str (daily, hourly or minutely) The duration of the bars. annualizer : int <optional> Which constant to use for annualizing risk metrics. If not provided, will extract from data_frequency. capital_base : float <default: 1.0e5> How much capital to start with. """
nodeMetaModel.getTypeNameGenerified(), nodeMetaModel.getTypeNameGenerified() )); addOrReplaceWhenSameSignature(nodeCoid, cloneMethod); } }
'''Cython - Command Line Parsing''' from Cython import __version__ as version  import Cython.Compiler.Options as Options menu = { 'default' : {
unique.setTableName(tableName); command.addConstraintCommand(unique); } if (NullConstraintType.NULL_IS_NOT_ALLOWED == parseNotNullConstraint()) { column.setNullable(false); } if (readIf("CHECK")) { Expression expr = readExpression();
}); Selection selection = selector.select(new CompactionSelector.SelectionParameters() { @Override public PluginEnvironment getEnvironment() { return senv;
target.Log = "application"; // set the source explicitly to prevent random AppDomain name being used as the source name target.Source = sourceName; //Be able to check message length and content, the Layout is intentionally only ${message}. target.Layout = new SimpleLayout("${message}"); if (entryType != null) {
def clear_keystring(self): """Clear the currently entered key sequence.""" if self._keystring: self._debug_log("discarding keystring '{}'.".format( self._keystring)) self._keystring = '' self.keystring_updated.emit(self._keystring)
// node update sc_updatenode(); #ifdef ENABLE_SYNC if (!fetchingnodes) { // run syncdown() before continuing applykeys(); return false; } #endif break;
_DaskPart = Union[np.ndarray, pd_DataFrame, pd_Series, ss.spmatrix] _PredictionDtype = Union[Type[np.float32], Type[np.float64], Type[np.int32], Type[np.int64]] _HostWorkers = namedtuple('HostWorkers', ['default', 'all']) class _DatasetNames(Enum):
return result; } @Nullable static InetAddress inetAddressOrNull(@Nullable String string, @Nullable byte[] bytes) { try { return bytes == null ? null : InetAddress.getByAddress(bytes); } catch (UnknownHostException e) {
command_add("tattoo", "- Change the tattoo of your target (Drakkin Only)", AccountStatus::QuestTroupe, command_tattoo) || command_add("tempname", "[newname] - Temporarily renames your target. Leave name blank to restore the original name.", AccountStatus::GMAdmin, command_tempname) || command_add("petname", "[newname] - Temporarily renames your pet. Leave name blank to restore the original name.", AccountStatus::GMAdmin, command_petname) || command_add("texture", "[Texture] [Helmet Texture] - Change your or your target's texture (Helmet Texture defaults to 0 if not used)", AccountStatus::Steward, command_texture) || command_add("time", "[HH] [MM] - Set EQ time", AccountStatus::EQSupport, command_time) || command_add("timers", "- Display persistent timers for target", AccountStatus::GMMgmt, command_timers) || command_add("timezone", "[HH] [MM] - Set timezone. Minutes are optional", AccountStatus::EQSupport, command_timezone) ||
package org.springframework.cloud.dataflow.core.dsl; /** * After parsing a task definition from a DSL string, the validation visitor may optionally run. * Even though it parses successfully there may be issues with how the definition is constructed. The * {@link TaskValidatorVisitor} will find those problems and report them as instances of * {@link TaskValidationProblem}.
os << std::endl << "# auto combat spell casting: on/off" << std::endl; os << "auto spell casting = " << ( opt_global.Modes( GLOBAL_BATTLE_AUTO_SPELLCAST ) ? "on" : "off" ) << std::endl; os << std::endl << "# game language (an empty value means English)" << std::endl; os << "lang = " << force_lang << std::endl; os << std::endl << "# controller pointer speed: 0 - 100" << std::endl;
* This class was copied from Guava release 23.0 to replace the older Guava 14 version that had been used in Accumulo. * It was annotated as Beta by Google, therefore unstable to use in a core Accumulo library.  We learned this the hard * way when Guava version 20 deprecated the getHostText method and then removed the method all together in version 22. * See ACCUMULO-4702 * * Unused methods and annotations were removed to reduce maintenance costs. *
buts[2] = _("_No"); buts[3] = NULL; ret = gwwv_ask( _("Unsaved script"),(const char **) buts,0,2,_("You have an unsaved script in the «Execute Script» dialog. Do you intend to discard it?")); if (ret == 1) { warn_script_unsaved = false; SavePrefs(true); } return( ret ); }
JsonNode responseNode = objectMapper.readTree(response.getEntity().getContent()); closeResponse(response); assertThatJson(responseNode) .when(Option.IGNORING_EXTRA_FIELDS, Option.IGNORING_ARRAY_ORDER) .isEqualTo("{" + " id: '" + formDefinition.getId() + "'," + " key: '" + formDefinition.getKey() + "',"
for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { require.NoError(t, tt.service.Start(t)) defer func() { assert.NoError(t, tt.service.Stop(t)) }() tt.request.Run(t) }) }
public override bool Release() { int newRefCount = Interlocked.Decrement(ref _referenceCount); if (newRefCount < 0)  BufferPrimitivesThrowHelper.ThrowInvalidOperationException(); if (newRefCount == 0) { OnNoReferences(); return false; } return true; } protected virtual void OnNoReferences()
desktop->server = server; desktop->config = config; desktop->xcursor_manager = wlr_xcursor_manager_create(NULL, ROOTS_XCURSOR_SIZE); if (desktop->xcursor_manager == NULL) { wlr_log(L_ERROR, "Cannot create XCursor manager"); wlr_list_free(desktop->views); free(desktop); return NULL;
// todo remove allocation // msg byte[] buffer = new byte[HeaderLength + header.readLength]; // copy header as it might contain mask Buffer.BlockCopy(headerBuffer, 0, buffer, 0, HeaderLength); ReadHelper.SafeRead(stream, buffer, HeaderLength, header.readLength);
std::string topic_name = TEST_TOPIC_NAME; for (uint32_t len : array_lengths) { test_big_message_corner_case(topic_name, len); } }
return nil } // LoadGroup loads a group via cs3 by id and writes it to the provided group func (r CS3Repo) LoadGroup(ctx context.Context, id string, g *proto.Group) (err error) { t, err := r.authenticate(ctx) if err != nil {
class DeprecateXcode64 < Base def apply if config[:osx_image] == 'xcode6.4' sh.echo "" sh.echo "Running builds with Xcode 6.4 in Travis CI is deprecated and will be removed in January 2019.", ansi: :yellow sh.echo "If Xcode 6.4 is critical to your builds, please contact our support team at support@travis-ci.com to discuss options.", ansi: :yellow end
public function up() { Schema::table('metrics', function (Blueprint $table) { $table->integer('component_id')->after('order')->default(0); }); }
if err != nil { return nil, false, err } else if !ok { panic("Name '" + exactName + "'had already been verified... This is a bug") } sch, err := tbl.GetSchema(ctx)
new BaseNumberOptionsConfiguration(Culture.Arabic, options))), new Arabic.PercentageExtractor(options))); RegisterModel<NumberRangeModel>( Culture.Arabic, options => new NumberRangeModel( new BaseNumberRangeParser(new ArabicNumberRangeParserConfiguration( new BaseNumberOptionsConfiguration(Culture.Arabic, options))), new Arabic.NumberRangeExtractor(new BaseNumberOptionsConfiguration(Culture.Arabic, options))));  RegisterModel<NumberModel>( Culture.English, options => new NumberModel(
# Note: MrBayes may choke on large alignments if not interleaved if interleave is None: interleave = (columns > 1000) n.write_nexus_data(self.handle, interleave=interleave) def _classify_alphabet_for_nexus(self, alphabet):
* @function * * @param {Object} props * @param {function} props.setIsCartUpdating Function for setting the updating state of the shopping cart * @param {String} props.selectedShippingMethod A serialized string of <carrier-code>|<method-code>, eg. usps|priority. * @param {Array<Object>} props.shippingMethods An array of available shipping methods * @param {ShippingRadiosMutations} props.mutations GraphQL mutations for a shipping radio selector component. *
def changes {}.tap do |hash| changed.each do |name| change = attribute_change(name) hash[name] = change if change[0] != change[1] end end
return sitrep; } SitRepEntry CreatePlanetDepopulatedSitRep(int planet_id) { SitRepEntry sitrep(UserStringNop("SITREP_PLANET_DEPOPULATED"), "icons/sitrep/colony_destroyed.png"); sitrep.AddVariable(VarText::PLANET_ID_TAG,     boost::lexical_cast<std::string>(planet_id)); return sitrep;
# perform the analysis iteratively? # # To address the evolution of the graphs, you generate a variety of graph samples. In other words, you need # **generative models** of graphs. In-addition to learning # node and edge features, you would need to model the distribution of arbitrary graphs. # While general generative models can model the density function explicitly and # implicitly and generate samples at once or sequentially, you only focus
// Scope has two uses: in JWTSecurity or OAuth2Security it defines a scope // supported by the scheme. In Security it lists required scopes. // // Scope must appear in Security, BasicSecurity, APIKeySecurity, JWTSecurity or OAuth2Security. // // Scope accepts one or two arguments: the first argument is the scope name and // when used in JWTSecurity or OAuth2Security the second argument is a
if (EnvironmentVariables != null) { foreach (var pair in EnvironmentVariables) { psi.EnvironmentVariables[pair.Key] = pair.Value; Logger.Log($"Added environment variable: {pair.Key}={pair.Value}");
} if err != nil { if err == ErrTimeout { log.Lvlf5("%s drops %s connection: timeout", r.ServerIdentity.Address, remote.Address) return } if err == ErrClosed || err == ErrEOF { // Connection got closed. log.Lvlf5("%s drops %s connection: closed", r.ServerIdentity.Address, remote.Address) return } // Temporary error, continue.
return &identity } func identityToAccount(identityString string) accounts.Account { return accounts.Account{ Address: common.HexToAddress(identityString), } } func (idm *IdentityManager) CreateNewIdentity(passphrase string) (*dto.Identity, error) { account, err := idm.keystoreManager.NewAccount(passphrase) if err != nil { return nil, err }
# See the License for the specific language governing permissions and # limitations under the License. """Tests the LocationRulesEngine.""" import copy import itertools
stopEvent->attachToCompletionFuture(&cf, hStream, hipEventTypeStopCommand); } ihipPostLaunchKernel(f->_name.c_str(), hStream, lp, isStreamLocked); }
// fillAttr sets attributes based on the entry info. It only handles fields // common to all entryinfo types. func fillAttr(ei *libkbfs.EntryInfo, a *fuse.Attr) { a.Valid = 1 * time.Minute a.Size = ei.Size
/// <returns>Number of bytes written to the destination.</returns> public static int Decode(ReadOnlySpan<byte> source, Span<byte> destination) { /*if (destination.Length < ComputeDecodedLength(source.Length)) { return -1; }*/ ref byte srcBytes = ref source.DangerousGetPinnableReference(); ref byte destBytes = ref destination.DangerousGetPinnableReference();
client_ctx->websocket_timeout = NULL; } client_ctx->ssl_ctx = self->config.ssl_ctx; if (self->config.session_cache.capacity != 0 && self->config.session_cache.lifetime != 0) { client_ctx->ssl_session_cache = h2o_cache_create(0, self->config.session_cache.capacity, self->config.session_cache.lifetime * 1000, h2o_socket_ssl_destroy_session_cache_entry); } else { client_ctx->ssl_session_cache = NULL; } h2o_context_set_handler_context(ctx, &self->super, client_ctx); }
SingleMemberAnnotationExpr retrieved = retrievedOpt.get(); assertEquals("Path", retrieved.getName().asString()); pmmlRestResourceGenerator.setPathValue(TEMPLATE); String classPrefix = getSanitizedClassName(KIE_PMML_MODEL.getName()); String expected = URLEncoder.encode(classPrefix).replaceAll("\\+", " "); assertEquals(expected, retrieved.getMemberValue().asStringLiteralExpr().asString()); } @Test
seedMinLength := 48 seed := make([]byte, seedMinLength) input := make([]byte, 100) r := time.Now().UnixNano() mrand.Seed(r) t.Logf("math rand seed is %d", r) loops := 50 for j := 0; j < loops; j++ { n, err := mrand.Read(seed) require.Equal(t, n, seedMinLength)
if ((!field.label) && (!field.contextual)) { field.label = _.startCase(field.name.replace(/^_/, '')); } if (fieldType.validate) { fieldType.validate(field, options, warn, fail); }
device = d.split(':')[1] break break except OSError as oe: logger.warn('Could not obtain device for IDE port {0}: {1}', port_id, ustr(oe)) return device def set_hostname_record(self, hostname):
position: lesson_counter, section_id: section.id, is_project: true, url: "/web_development_101/project_pairing.md" ) # +++++++++++
request.setAttribute(QNetworkRequest.CacheLoadControlAttribute, QNetworkRequest.AlwaysNetwork) if suggested_fn is not None: pass elif request.url().scheme().lower() != 'data': suggested_fn = urlutils.filename_from_url(request.url()) else: # We might be downloading a binary blob embedded on a page or even # generated dynamically via javascript. We try to figure out a more
var numberFormatInfo = _AppService.Currencies.GetNumberFormatInfo(settings.Currency) ?? _AppService.Currencies.GetNumberFormatInfo("USD"); double step = Math.Pow(10, -(numberFormatInfo.CurrencyDecimalDigits)); return View("PointOfSale/" + viewType, new ViewPointOfSaleViewModel() { Title = settings.Title, Step = step.ToString(CultureInfo.InvariantCulture),
case P128_modetype::Wipe: return F("wipe"); case P128_modetype::Dualwipe: return F("dualwipe"); case P128_modetype::FakeTV: return F("faketv"); case P128_modetype::SimpleClock: return F("simpleclock"); } return F("*unknown*"); }
if (owner && owner->IsClient()) { if (!(owner->CastToClient()->ClientVersionBit() & EQ::versions::maskUFAndLater)) { if ((typeofpet != petFamiliar && typeofpet != petAnimation) || aabonuses.PetCommands[PET_TAUNT]) { taunting=true; } }
"github.com/aws/copilot-cli/internal/pkg/deploy/cloudformation/stack" ) // DeployTask deploys a task stack and waits until the deployment is done. // If the task stack doesn't exist, then it creates the stack. // If the task stack already exists, it updates the stack.
} @Override public boolean shouldRebalanceInput(int ordinal) { return upstreamRebalancingFlags[ordinal]; } @Override public void setPartitionKeyFnForInput(int ordinal, FunctionEx<?, ?> keyFn) { upstreamPartitionKeyFns[ordinal] = keyFn; } @Override
_, err := bs.build.BuildOn(bs.parentID, bs.setter) bs.Require().NoError(err) bs.Assert().Empty(bs.assembled.Receipts, "should have no receipts in payload when pending receipts are for unknown blocks") } // Receipts for blocks that are not on the fork should be skipped func (bs *BuilderSuite) TestPayloadReceiptForBlockNotInFork() { // create a valid receipt for a known, unsealed block, not on the fork
bootstrap = Flag( doc="Debug server catalog bootstrap.") bootstrap_cache_yolo = Flag( doc="Disable bootstrap cache consistency check.") edgeql_parser = Flag( doc="Debug EdgeQL parser (rebuild grammar verbosly).")
{ public class CoreRunPublisher : IBuilder { public CoreRunPublisher(FileInfo coreRun, FileInfo customDotNetCliPath = null) { CoreRun = coreRun; DotNetCliPublisher = new DotNetCliPublisher(customDotNetCliPath?.FullName); } private FileInfo CoreRun { get; } private DotNetCliPublisher DotNetCliPublisher { get; }
int The number of bits needed """ if self.number_of_edges() >= 0x80000000 or self.number_of_nodes() >= 0x80000000: return 64 else: return 32
conn->server_protocol_version = server_version; return S2N_SUCCESS; } static int s2n_server_supported_versions_recv(struct s2n_connection *conn, struct s2n_stuffer *in)
namespace lbann { namespace callback { void print_statistics::setup(model *m, const std::string&) { #ifdef LBANN_VERSION lbann_comm *comm = m->get_comm(); if (comm->am_world_master()) {
fastrtps::rtps::RTPSWriter* /*writer*/, const fastrtps::LivelinessLostStatus& status) { if (data_writer_->listener_ != nullptr) { data_writer_->listener_->on_liveliness_lost(data_writer_->user_datawriter_, status); } data_writer_->publisher_->publisher_listener_.on_liveliness_lost(data_writer_->user_datawriter_, status); } bool DataWriterImpl::wait_for_acknowledgments(
auto type_registry = caf::actor_cast<type_registry_actor>( self->state.registry.find_by_label("type-registry")); if (!type_registry) return caf::make_message(make_error(ec::missing_component, // "type-registry")); caf::error request_error = caf::none; auto rp = self->make_response_promise(); // The overload for 'request(...)' taking a 'std::chrono::duration' does not
"strings" "time" "go.uber.org/yarpc/internal/examples/protobuf/example" "go.uber.org/yarpc/internal/examples/protobuf/examplepb" "go.uber.org/yarpc/internal/testutils"  "google.golang.org/grpc" ) var flagOutbound = flag.String("outbound", "tchannel", "The outbound to use for unary calls")
} $plugins = get_site_option( 'active_sitewide_plugins' ); return isset( $plugins[ $plugin ] ); } /**
""" COVERAGE_UNCHANGED_SPECIFICATION = QuerySpecification( adjusted_weight=0.70, threshold=1.0, query_format=COVERAGE_UNCHANGED_FORMAT, formatter=_coverage_formatter,
return &p, nil } // IsUserFavorite returns true if this policy is a favorite of the current user. func (p Policy) IsUserFavorite() bool { return p.isUserFavorite }
$view = $this->getView(); $translate = $view->plugin('translate'); foreach ($strings as $key => &$translation) { $translateFunc = substr($key, -5) === '_html' || substr($key, -10) === '_unescaped' ? $translate : $this->transEsc; $translation = is_array($translation) ? call_user_func_array([$translateFunc, '__invoke'], $translation)
jobMetrics.delete(id); JobResult jobResult = jobResults.get(id); if (jobResult != null) { destroyObservables(jobResult.getOwnedObservables()); jobResults.delete(id); } });
} List<SingularityMesosArtifact> combinedArtifacts = task.getDeploy().getUris().or(Collections.<SingularityMesosArtifact> emptyList()); combinedArtifacts.addAll(task.getPendingTask().getExtraArtifacts()); for (SingularityMesosArtifact artifact : combinedArtifacts) { commandBldr.addUris(URI.newBuilder()
/** * Set focus on a suitable element, taking into account the previously selected. * @param {HTMLElement} [container] - Element to limit scope. * @returns {HTMLElement} Focused element. */ export function autoFocus(container) { if (!isEnabled()) {
if *conf == "" { location := path.Join(dir, file) // check that the location is valid if _, err := os.Stat(location); err == nil { *conf = location } }
CHECK(test_hipDeviceGetAttribute(deviceId, hipDeviceAttributeMaxTexture3DWidth, props.maxTexture3D[0])); CHECK(test_hipDeviceGetAttribute(deviceId, hipDeviceAttributeMaxTexture3DHeight, props.maxTexture3D[1])); CHECK(test_hipDeviceGetAttribute(deviceId, hipDeviceAttributeMaxTexture3DDepth, props.maxTexture3D[2])); #ifndef __HIP_PLATFORM_NVCC__ CHECK(test_hipDeviceGetHdpAddress(deviceId, hipDeviceAttributeHdpMemFlushCntl, props.hdpMemFlushCntl)); CHECK(test_hipDeviceGetHdpAddress(deviceId, hipDeviceAttributeHdpRegFlushCntl, props.hdpRegFlushCntl)); #endif passed(); };
@JsonProperty("gcsCredentials") Map<String, Object> gcsCredentials, @JsonProperty("gcsStorageClass") Optional<String> gcsStorageClass, @JsonProperty("encryptionKey") Optional<String> encryptionKey, @JsonProperty("useS3ServerSideEncryption") Optional<Boolean> useS3ServerSideEncryption) { Preconditions.checkNotNull(directory); Preconditions.checkNotNull(fileGlob); Preconditions.checkNotNull(s3Bucket);
class LeafNode(Node): __slots__ = ('reader', ) def __init__(self, path, reader): Node.__init__(self, path)
TEST(StatusConditionImplTests, notify_trigger) { ::testing::StrictMock<ConditionNotifier> notifier; StatusConditionImpl uut(&notifier); StatusMask mask_all = StatusMask::all();
if len(self.nlabel_dict) > 1: self.nlabels_flag = True assert g.number_of_nodes() == n_nodes # update statistics of graphs self.n += n_nodes
git.highlightjs_language || slug end def average_test_duration git.average_test_duration + INFRASTRUCTURE_DURATION_S end # TODO: Set this properly
} message := "The CertificateRequest was denied by an approval controller" apiutil.SetCertificateRequestCondition(cr, cmapi.CertificateRequestConditionReady, cmmeta.ConditionFalse, cmapi.CertificateRequestReasonDenied, message) }
picsPathEdit->setReadOnly(true); QPushButton *picsPathButton = new QPushButton("..."); connect(picsPathButton, SIGNAL(clicked()), this, SLOT(picsPathButtonClicked())); cardDatabasePathLabel = new QLabel; cardDatabasePathEdit = new QLineEdit(settingsCache->getCardDatabasePath());
class OptimScheduler(LossRecorder): '''Learning rate Scheduler for training involving multiple phases.''' def __init__(self, layer_opt, phases, nb_batches, stop_div = False): self.phases, self.nb_batches, self.stop_div = phases, nb_batches, stop_div
<div class="post_date"> <span class="date"> {{ theme:image file="date.png" }} About {{ helper:timespan timestamp=created_on }} ago. </span> </div>
if (rdevices > 0) { if (skip_device > 0 && rdevices == 1) Impl::throw_runtime_exception( "Error: cannot KOKKOS_SKIP_DEVICE the only KOKKOS_RAND_DEVICE. " "Raised by Kokkos::initialize(int narg, char* argc[])."); std::srand(getpid()); while (device < 0) {
// Get list of available jobs. if (runningTasks.Count < _exportJobConfiguration.MaximumNumberOfConcurrentJobsAllowed) { IReadOnlyCollection<ExportJobOutcome> jobs = await _fhirOperationDataStore.AcquireExportJobsAsync( _exportJobConfiguration.MaximumNumberOfConcurrentJobsAllowed, _exportJobConfiguration.JobHeartbeatTimeoutThreshold, cancellationToken);
def show @member = User.find(params[:id]) @updates = @member.updates # The garden form partial is called from the "New Garden" tab; # it requires a garden to be passed in @garden. # The new garden is not persisted unless Garden#save is called. @garden = Garden.new respond_to do |format| format.html # show.html.haml
``p_components``, ``cumulated_variance`` will not sum to 1. ``align=True`` now correctly aligns the trajectory and computes the correct means and covariance matrix. .. versionchanged:: 2.0.0 :attr:`p_components`, :attr:`variance`, :attr:`cumulated_variance` and :attr:`mean_atoms` are now stored in a :class:`MDAnalysis.analysis.base.Results` instance. """ def __init__(self, universe, select='all', align=False, mean=None,
// CreateTable creates a table with the name and schema given. func (db *Database) CreateTable(ctx *sql.Context, tableName string, schema sql.Schema) error { if !doltdb.IsValidTableName(tableName) || HasDoltPrefix(tableName) { return fmt.Errorf("Invalid table name: '%v'", tableName) }
// +build linux  package auth import (
<html> <head> <title>{{.Doc.title}}</title> <meta charset="utf-8"> {{- range .Styles}} <link rel="stylesheet" href="{{.}}"> {{- end}} {{- range .Scripts}} <script src="{{.}}"></script> {{- end}} </head> <body> {{.Doc.body}}
ub = ub.Set(expression.Name(fp), expression.Value(m.Value)) } } ub = ub.Set(expression.Name(docstore.RevisionField), expression.Value(driver.UniqueString())) ce, err := expression.NewBuilder().WithCondition(*condition).WithUpdate(ub).Build() if err != nil { return err
remover.skipOnCompletion = true; int playerStatus = PlaybackPreferences.getCurrentPlayerStatus(); if(playerStatus == PlaybackPreferences.PLAYER_STATUS_PLAYING) { IntentUtils.sendLocalBroadcast(MainActivity.this, PlaybackService.ACTION_PAUSE_PLAY_CURRENT_EPISODE); } } remover.executeAsync();
} else { // The current user has no credentials, let it fail naturally at the RPC layer (no ticket) // We know this won't work, but we can't do anything else log.warn("The current user is a proxy user but there is no underlying real user (likely that RPCs will fail): {}", currentUser); userForRpc = currentUser; } } else {
{ if (write (fd, buffer, sizeof (buffer)) != sizeof (buffer)) { goto error; } } return 1; error:
def test_smooth(self): seriesList = [ TimeSeries('collectd.test-db1.load.value',0,1,1,range(20)), ] def mock_evaluateTokens(reqCtx, tokens, replacements=None): seriesList = [ TimeSeries('collectd.test-db1.load.value',0,1,1,range(20)), ] for series in seriesList: series.pathExpression = series.name
/* GT: English (possibly translating it in parentheses). I believe there */ /* GT: are legal reasons for this. */ /* GT: So "Añadir SIL Open Font License (licencia de fuentes libres)" */ tnlabel[5].text = (unichar_t *) S_("Add OFL"); tnlabel[5].image_precedes = false; tnlabel[5].image = &OFL_logo; tnlabel[5].text_is_1byte = true;
OUTPUT_RESULTS_FILE_PATH = os.path.join(_LOG_COLLECTOR_DIR, "results.txt") COMPRESSED_ARCHIVE_PATH = os.path.join(_LOG_COLLECTOR_DIR, "logs.zip") CGROUPS_UNIT = "collect-logs.scope" INVALID_CGROUPS_ERRCODE = 2
set("parquet.avro.write-old-list-structure", "false"); MessageType type = ParquetSchemaUtil.convert(schema, name); if (createWriterFunc != null) { Preconditions.checkArgument(writeSupport == null, "Cannot write with both write support and Parquet value writer");
class ConnectionPool include Loggable # @return [ Hash ] options The pool options. attr_reader :options
shared_ptr<const Element> e1 = map->getElement(it->first); shared_ptr<const Element> e2 = map->getElement(it->second); //LOG_INFO(e1->getTags()["note"] << " <=> " << e2->getTags()["note"]); HOOT_STR_EQUALS(e1->getTags()["note"], e2->getTags()["note"]) } }
internal SessionImpl(SessionFactoryImpl factory, ISessionCreationOptions options) : base(factory, options) { // This context is disposed only on session own disposal. This greatly reduces the number of context switches // for most usual session usages. It may cause an irrelevant session id to be set back on disposal, but since all // session entry points are supposed to set it, it should not have any consequences. _context = SessionIdLoggingContext.CreateOrNull(SessionId); try {
void DLBus::attachDLBusInterrupt(void) { ISR_Receiving = false; IsISRset = true; IsNoData = false; attachInterrupt(digitalPinToInterrupt(ISR_DLB_Pin), ISR, CHANGE); }
ldapfilter.substring(ldapfilter.indexOf("=", ldapfilter.indexOf(searchRangeStr)+searchRangeStr.length())); }  Log.debug("Trying to find group names using query: {}", ldapfilter); // Perform the LDAP query return manager.retrieveList(
switch (nodesWhitelistResult.result()) { case SUCCESS: return new JsonRpcSuccessResponse(req.getId(), true); case ERROR_EXISTING_ENTRY: return new JsonRpcErrorResponse(req.getId(), JsonRpcError.NODE_WHITELIST_EXISTING_ENTRY); case ERROR_DUPLICATED_ENTRY: return new JsonRpcErrorResponse(
} else if (profile.service === "demo") { profile.intrinsicName = "demo on " + user.createdAt.toISOString().substring(0, 10); } else if (profile.service === "ldap") { profile.intrinsicName = user.services.ldap.username; } else { throw new Error("unrecognized identity service: ", profile.service); }
else: """change non-float data to float data, need to copy""" data = np.array(mat.reshape(mat.size), dtype=np.float32) ptr_data, type_ptr_data, _ = c_float_array(data) n_preds = self.__get_num_preds(num_iteration, mat.shape[0], predict_type) preds = np.zeros(n_preds, dtype=np.float64)
@pyqtSlot(str) def _on_config_changed(self, option: str) -> None: if option.startswith('fonts.tabs.'): self.ensurePolished() self._set_icon_size() elif option == 'tabs.favicons.scale':
"bytes" "encoding/json" "fmt" "io" "os" "reflect"
elif len(transform_or_transforms.get_shape()) == 2: transforms = transform_or_transforms else: transforms = transform_or_transforms raise ValueError( "Transforms should have rank 1 or 2, but got rank %d" % len(transforms.get_shape())) # Invert transformations transforms = flat_transforms_to_matrices(transforms=transforms)
// PingProposal pings service proposal as being alive func (mApi *mysteriumAPI) PingProposal(proposal dto_discovery.ServiceProposal, signer identity.Signer) error { versionInfo := version.GetInfo() statsDto := dto.NodeStatsRequest{ NodeKey: proposal.ProviderID, NodeVersion: fmt.Sprintf("%s(%s)", versionInfo.Branch, versionInfo.BuildNumber), } req, err := requests.NewSignedPostRequest(mApi.discoveryAPIAddress, "ping_proposal", statsDto, signer)
<div className={classes.root}> <h3 className={classes.editingHeading}> <FormattedMessage id={'shippingMethod.heading'} defaultMessage={'Shipping Method'} /> </h3>
public class CdcJsonDataSerializerHook implements DataSerializerHook { public static final int RECORD = 1; public static final int PART = 2; public static final int FACTORY_ID = FactoryIdHelper.getFactoryId(JET_CDC_JSON_DS_FACTORY, JET_CDC_JSON_DS_FACTORY_ID);
import collections import os import time import tempfile import paramiko import shade  from molecule import util from molecule.driver import basedriver
} }, runPlayer() { if (this.playerEl && !this.playerEl.played) { this.playerOpts.player(this.playerEl); this.playerEl.played = true; } }, clicked(e) {
NvidiaRuntime:                       os.Getenv("ECS_NVIDIA_RUNTIME"), TaskMetadataAZDisabled:              utils.ParseBool(os.Getenv("ECS_DISABLE_TASK_METADATA_AZ"), false), CgroupCPUPeriod:                     parseCgroupCPUPeriod(), SpotInstanceDrainingEnabled:         utils.ParseBool(os.Getenv("ECS_ENABLE_SPOT_INSTANCE_DRAINING"), false), }, err }
// noop } const isUsingNpm = process.env.npm_config_user_agent?.startsWith("npm") /* Adapted from https://github.com/prisma/prisma/blob/974cbeff4a7f616137ce540d0ec88a2a86365892/src/packages/client/scripts/postinstall.js
// on non-relay, all the outgoing connections are throttled. wn.throttledOutgoingConnections = int32(wn.config.GossipFanout) } if wn.config.DisableOutgoingConnectionThrottling { wn.throttledOutgoingConnections = 0 } if wn.config.TLSCertFile != "" && wn.config.TLSKeyFile != "" { wn.scheme = "https" } else {
</li> <% end %> <% if presenter.display_hire_me?(current_user) %> <li> <%= link_to 'Hire me', user_path(presenter.user), {remote: true, class: 'user-profile-btn',
cmd.AddCommand(BuildEnvInitCmd()) cmd.AddCommand(BuildEnvListCmd()) cmd.AddCommand(BuildEnvDeleteCmd()) //cmd.AddCommand(BuildEnvShowCmd()) cmd.SetUsageTemplate(template.Usage) cmd.Annotations = map[string]string{ "group": group.Develop,
// Use define from require.js not webpack's define var _define = window.define; // document-register-element var docRegister = require("document-register-element"); _define("document-register-element", function() { return docRegister; });  // fetch var fetch = require("whatwg-fetch"); _define("fetch", function() {
return nil } func basicNameValidation(val interface{}) error { s, ok := val.(string) if !ok {
Booster* ref_booster = reinterpret_cast<Booster*>(handle); auto get_row_fun = RowFunctionFromCSR(indptr, indptr_type, indices, data, data_type, nindptr, nelem); int nrow = static_cast<int>(nindptr - 1); int ncol = static_cast<int>(num_col); if (ncol <= 0) { ncol = GuessNumColFromCSR(indptr, indptr_type, indices, nindptr); } ref_booster->Predict(num_iteration, predict_type, nrow, ncol, get_row_fun, config, out_result, out_len); API_END(); }
progressBar.setVisibility(View.GONE); }, error -> Log.e(TAG, Log.getStackTraceString(error))); if (UserPreferences.getSubscriptionsFilter().isEnabled()) { feedsFilteredMsg.setText("{md-info-outline} " + getString(R.string.subscriptions_are_filtered)); Iconify.addIcons(feedsFilteredMsg); feedsFilteredMsg.setVisibility(View.VISIBLE);
HealthCheck.large_base_example ) # If the language starts with writes of length >= cap then there is # only one string in it: Everything after cap is forced to be zero (or # to be whatever value is written there). That means that once we've # tried the zero value, there's nothing left for us to do, so we # exit early here. for i in hrange(self.cap): if i not in zero_data.forced_indices: break
static const char *get_ext(h2o_configurator_command_t *cmd, yoml_t *node) { if (strcmp(node->data.scalar, "default") == 0) { /* empty string means default */ return ""; } else if  (assert_is_extension(cmd, node) == 0) { return node->data.scalar + 1; } else {
timeDistinct = make(map[execute.Time]bool) }  j := execute.ColIdx(t.column, tbl.Cols()) return tbl.Do(func(cr flux.ColReader) error { l := cr.Len()  for i := 0; i < l; i++ { // Check distinct switch col.Type {
* Tests playback permission. Grabs the permission when called inside a click event (or any other valid user interaction). * @returns {Promise} Promise that resolves succesfully if playback permission is allowed. */ check () { if (appHost.supports('htmlaudioautoplay')) { return Promise.resolve(true); } return new Promise((resolve, reject) => { const media = createTestMediaElement(); media.play().then(() => { resolve();
module Beaker class Platform < String #supported platforms PLATFORMS = /^(centos|fedora|debian|oracle|redhat|scientific|sles|ubuntu|windows|solaris|aix|el)\-.+\-.+$/ PLATFORM_VERSION_CODES = { :debian => { "wheezy"  => "7",
#include "ElectricEquipmentITEAirCooled.hpp" #include "ElectricEquipmentITEAirCooled_Impl.hpp" #include "ElectricEquipmentITEAirCooledDefinition.hpp" #include "ElectricEquipmentITEAirCooledDefinition_Impl.hpp" #include "Schedule.hpp"
APIGroups() []metav1.APIGroup } type serverResourcesInterface interface { ServerPreferredResources() ([]*metav1.APIResourceList, error) }
std::vector<std::function<std::string()>> message_gen = { [&] { // TODO(@l4l) 26/06/18 need to be simplified at IR-1479 const auto str = perm_converter_->toString(permissions); const auto perm_debug_str = std::accumulate(str.begin(), str.end(), std::string()); return (boost::format("failed to insert role permissions, role "
// When updating the database, please also run ./bin/dumpschema --record // This updates schema.sql with the latest full database schema const MAX_DB_LEVEL = exports.MAX_DB_LEVEL = 20; exports.forceDbVersion = function(version) { mozlog.info("forcing-db-version", {db: db.constr, version});
JsonNode rootNode = objectMapper.readTree(response.getEntity().getContent()); closeResponse(response); assertThatJson(rootNode) .when(Option.IGNORING_EXTRA_FIELDS) .isEqualTo("{" + "data: [ {" + "         id: '" + processInstance3.getId() + "'"
var objects = realm.objects(schemas.PersonObject); TestCase.assertTrue(objects[0] instanceof schemas.PersonObject); function InvalidPerson() {} InvalidPerson.schema = schemas.PersonObject.schema; TestCase.assertThrows(function() { realm.objects();
if bins or normalize: raise NotImplementedError( "OmniSci's 'value_counts' does not support 'bins' and 'normalize' parameters." ) new_frame = self._modin_frame.value_counts(
* <b>Sample Spring XML for Hazelcast Jet Client:</b> * <pre>{@code *   <jet:client id="client"> *      <jet:group name="jet"/> *      <jet:network connection-attempt-limit="3" *          connection-attempt-period="3000" *          connection-timeout="1000"
'this API client') def iter_kubernetes_nodes(self, project_id, zone, cluster): """Iterate k8s nodes in a cluster from GCP API. Args: project_id (str): id of the project to query. zone (str): The zone the cluster is in.
if tfm_y is not None: self.tfm_y=tfm_y self.tfms_y=tfms self.tfmargs_y = kwargs return self def transform_labels(self, tfms:TfmList=None, **kwargs):
private void checkImports(JavaNode node, Object data) { String name = node.getImage(); List<ASTImportDeclaration> matches = new ArrayList<>(); // Find all "matching" import declarations for (ASTImportDeclaration importDeclaration : imports) {
} } }
// more boilerplate, but there's not much else we need from those. So // override os.Stderr temporarily as a hack to inject stderr to the zap // logger. // TODO: replace this hack when we get logstash forwarding to work. originalStderr := os.Stderr os.Stderr = stderr defer func() { os.Stderr = originalStderr }()
SimTK_TEST(b->getStateVariableValue(s, "../subState") == 20); SimTK_TEST(b->getStateVariableValue(s, "../../internalSub/subState") == 10); SimTK_TEST_MUST_THROW_EXC( top.getStateVariableValue(s, "typo/b/subState"), OpenSim::Exception);
TableMetadata lastMetadata = ops.current(); try { if (lastMetadata == null) { LOG.debug("Not an iceberg table: %s", identifier); return false; } else { if (purge) {
} } if (node instanceof MethodCallExpr) { Optional<ResolvedMethodDeclaration> methodDeclaration = JavaParserFacade.get(typeSolver) .solve((MethodCallExpr) node) .getCorrespondingDeclaration(); if (methodDeclaration.isPresent()) { return resultClass.cast(methodDeclaration.get()); } else { throw new UnsolvedSymbolException("We are unable to find the method declaration corresponding to " + node); }
it '#shows metadata which includes data and the owner of document' do @document = mock_model(Document, user: "John", created_at: (Date.new(2015,1,1))) expect(document).to match / "Created #{time_ago_in_words(@document.created_at)} ago by #{@document.user.display_name}/ end it '#shows the date of a document' do @document = mock_model(Document, user: "John", created_at: (Date.new(2015,1,1))) expect(document).to match / "Created #{time_ago_in_words(@document.created_at)} ago/
highQualityURLLabel.setText(tr("Custom Card Download URL:")); highQualityURLLinkLabel.setText(QString("<a href='%1'>%2</a>").arg(LINKING_FAQ_URL).arg(tr("Linking FAQ"))); clearDownloadedPicsButton.setText(tr("Reset/Clear Downloaded Pictures")); } void GeneralSettingsPage::setEnabledStatus(bool status)
} /** * Returns true if user is logged in * * @return true if user is logged in; false otherwise */ public boolean isLogged() { return authentication.getCurrentUser() != null;
return matches[1], matches[2], nil } func getSpannerHost() string { return os.Getenv("GCLOUD_TESTS_GOLANG_SPANNER_HOST") }
@Override public void onConfigurationChanged(@NonNull final Configuration newConfig) { super.onConfigurationChanged(newConfig); ViewGroup.LayoutParams rlBottomSheetLayoutParams = rlBottomSheet.getLayoutParams(); rlBottomSheetLayoutParams.height = getActivity().getWindowManager().getDefaultDisplay().getHeight() / 16 * 9; rlBottomSheet.setLayoutParams(rlBottomSheetLayoutParams); }
def auto_fp16_wrapper(old_func): def new_func(*args, **kwargs): if not args[0].fp16_enabled: return old_func(*args, **kwargs) args_info = getfullargspec(old_func) num_args = len(args) num_kwargs = len(kwargs)
if md.metricsClient == nil { return errNoClient }  return md.connection.doRequest(ctx, func(ctx context.Context) error { _, err := md.metricsClient.Export(ctx, &colmetricpb.ExportMetricsServiceRequest{ ResourceMetrics: protoMetrics, }) return err }) }() if err != nil { md.connection.setStateDisconnected(err)
$l['no_attachments_selected'] = "You did not select any attachments to delete."; $l['attachments_deleted'] = "The selected attachments have been successfully deleted.<br />You will be now redirected to the attachments manager."; $l['attachments_usage_quota'] = "- Using {1} of {2} in {3} Attachments"; $l['attachments_usage_percent'] = " ({1}%)"; $l['attachments_usage'] = "- {1} in {2} Attachments"; $l['attachments_stats'] = "Your Attachment Statistics"; $l['attachstats_attachs'] = "Number of Attachments";
private bool BindingValueIsValid(string bindingValue, object existingValue, BindingMemberInfo modelProperty, BindingContext bindingContext) { var passedValueContainsSomething = !String.IsNullOrEmpty(bindingValue); var passedValueNotNull = bindingValue != null; var doNotConvertEmptyStringsToNull = !bindingContext.Configuration.ConvertEmptyStringToNull && passedValueNotNull; var passedValueIsTheDefaultValue = IsDefaultValue(existingValue, modelProperty.PropertyType); var overwriteValuesThatDoNotHaveADefaultValue = bindingContext.Configuration.Overwrite;  return ((passedValueContainsSomething || doNotConvertEmptyStringsToNull) && (passedValueIsTheDefaultValue || overwriteValuesThatDoNotHaveADefaultValue)); } /// <summary>
if err := (Placement)(p).Validate(); err != nil { return err } if string(p) == string(PrivateSubnetPlacement) { return nil } return fmt.Errorf(`placement "%s" is not supported for %s`, string(p), RequestDrivenWebServiceType) } // Validate returns nil if Placement is configured correctly.
from __future__ import division from __future__ import print_function from tensorflow_addons.losses.python.lifted import lifted_struct_loss from tensorflow_addons.losses.python.triplet import triplet_semihard_loss
targetNewSyntax := "@unittest_cpp" pkg, name, subrepo := parseBuildLabelParts(target1, "/", nil) pkg2, name2, subrepo2 := parseBuildLabelParts(targetNewSyntax, "/", nil) assert.Equal(t, pkg, "") assert.Equal(t, pkg, pkg2) assert.Equal(t, name, "unittest_cpp") assert.Equal(t, name, name2) assert.Equal(t, subrepo, "unittest_cpp") assert.Equal(t, subrepo, subrepo2) }
/** * Sensei_Customizer constructor. * * @param Sensei_Main $sensei Main Sensei instance. */ public function __construct( Sensei_Main $sensei ) {  if ( ! $sensei->feature_flags->is_enabled( 'course_theme' ) ) { return; } add_action( 'customize_register', [ $this, 'add_customizer_settings' ] ); add_action( 'customize_preview_init', [ $this, 'enqueue_customizer_helper' ] );
return BuildIfAvailable( castle, BUILD_WELL ); } const bool castleOnIsland = world.getRegion( world.GetTiles( castle.GetIndex() ).GetRegion() ).getNeighbours().size() < 2; if ( castleOnIsland && BuildIfEnoughResources( castle, BUILD_SHIPYARD, 2 ) ) { return true; }
import org.flowable.common.engine.impl.util.CollectionUtil; import org.flowable.engine.ProcessEngineConfiguration; import org.flowable.engine.history.HistoricActivityInstance; import org.flowable.engine.impl.test.HistoryTestHelper; import org.flowable.engine.impl.test.PluggableFlowableTestCase; import org.flowable.engine.repository.Deployment; import org.flowable.engine.repository.MergeMode; import org.flowable.engine.repository.Model; import org.flowable.engine.repository.ProcessDefinition; import org.flowable.engine.runtime.ProcessInstance;
rubyInterpreter.evalString(embedded_extensions_string); } catch (const std::exception& e) { rubyInterpreter.evalString(R"(STDOUT.flush)"); std::cout << "Exception in embedded_help: " << e.what() << std::endl;  // endl will flush return ruby_cleanup(1); } catch (...) { rubyInterpreter.evalString(R"(STDOUT.flush)"); std::cout << "Unknown Exception in embedded_help" << std::endl;  // endl will flush return ruby_cleanup(1); }
_collectionUri = cosmosDataStoreConfiguration.GetRelativeCollectionUri(collectionConfig.CollectionId); _retryExceptionPolicyFactory = retryExceptionPolicyFactory; _cosmosDocumentQueryFactory = cosmosDocumentQueryFactory; _logger = logger; _hardDeleteIdentityProvider = new HardDeleteIdentityProvider(); _hardDeleteRole = new HardDeleteRole();
} /* ---------------------------------------------------------------------- write a flag and a C-style char string (including the terminating null byte) into the restart file ------------------------------------------------------------------------- */ void WriteRestart::write_string(int flag, const char *value)
Args: times: How many times to repeat. command: The command to run, with optional args. count: Multiplies with 'times' when given. """ if count is not None: times *= count
#print "rc: "+str(rc) def mqtt_on_message(self, mqttc, obj, msg): #msg.topic+" "+str(msg.qos)+" "+str(msg.payload) pokemon = json.loads(msg.payload) if pokemon and 'encounter_id' in pokemon: new_list = [x for x in self.bot.mqtt_pokemon_list if x['encounter_id'] is pokemon['encounter_id']] if not (new_list and len(new_list) > 0): self.bot.mqtt_pokemon_list.append(pokemon) #def mqtt_on_publish(self, mqttc, obj, mid): #print "mid: "+str(mid) #def mqtt_on_subscribe(self, mqttc, obj, mid, granted_qos):
{ EnsureArg.IsNotNull(request, nameof(request)); IReadOnlyCollection<KeyValuePair<string, string>> requestorClaims = _claimsExtractor.Extract()? .OrderBy(claim => claim.Key, StringComparer.Ordinal).ToList(); // Compute the hash of the job. var hashObject = new
return details.rewards.at(index).award_id; } return -1; } long long MegaAchievementsDetailsPrivate::getRewardStorage(unsigned int index)
def init_weights(self): for m in self.modules(): if isinstance(m, nn.Conv2d): if self.caffe2_xavier_initialize: caffe2_xavier_init(m) else: xavier_init(m, distribution='uniform')
# This file should contain all the record creation needed to seed the database # with its default values.  # The data can then be loaded with the rake db:seed (or created alongside the # db with db:setup). # ******* NOTE ******** # You will have problems if you try to change the titles of
return {'last_metrics': last_metrics + mets} def try_save(state:Dict, path:Path=None, file:PathLikeOrBinaryStream=None): target = open(path/file, 'wb') if is_pathlike(file) else file try: torch.save(state, target) except OSError as e: raise Exception(f"{e}\n Can't write {path/file}. Pass an absolute writable pathlib obj `fname`.")
#include <s2n.h> #include "utils/s2n_random.h"  #include "tls/s2n_connection.h" #include "tls/s2n_handshake.h"
coordinates ``reference[pairs[k, 0]]`` and ``configuration[pairs[k, 1]]``. """ # Default return values (will be overwritten only if pairs are found): pairs = np.empty((0, 2), dtype=np.int64) distances = np.empty((0,), dtype=np.float64)
private HttpResponseHandler<? extends Throwable> exceptionResponseHandler; private Executor executor; private CompletableFuture<Void> future; private String serviceName; private Builder() { }
func addPasswordFlags(c *PasswordCommand, f *base.FlagSet) { f.StringVar(&base.StringVar{ Name:   "min-login-name-length", Target: &c.flagMinLoginNameLength, Usage:  "The minimum length of login names", }) f.StringVar(&base.StringVar{ Name:   "min-password-length", Target: &c.flagMinPasswordLength, Usage:  "The minimum length of passwords", }) }
It("iptables should succeed in getting the lock after 3s", func() { iptCmd := cmdInContainer("iptables", "-w", "3", "-A", "FORWARD") out, err := iptCmd.CombinedOutput() log.Infof("iptables output='%s'", out) Expect(err).NotTo(HaveOccurred()) })
/** * Redirect the customer to the failure payment page. if $message is null, a generic message is displayed. * * @param int         $orderId the order ID * @param string|null $message  an error message. */ public function redirectToFailurePage($orderId, $message) { $this->getLog()->addInfo("Redirecting customer to payment failure page");
/** * Retrieves the member declarations (fields, methods, classes, etc.) from the body of this type declaration. * * @return The member declarations declared in this type declaration */ List<ASTAnyTypeBodyDeclaration> getDeclarations();
type EventLoopV2 interface { // SubmitProposal accepts proposal for processing. Proposal will be dispatched on worker thread. SubmitProposal(proposalHeader *flow.Header, parentView uint64)  // SubmitTrustedQC accepts QC for processing. QC will be dispatched on worker thread. // CAUTION: QC is trusted (_not_ validated again) SubmitTrustedQC(qc *flow.QuorumCertificate) }
um_map::iterator mit = umindex.find(nuid); if (mit != umindex.end() && mit->second != hit->second) { // duplicated user: one by email, one by handle assert(!users[mit->second].sharing.size()); users.erase(mit->second); } // if mapping a different email, remove old index if (strcmp(u->email, email)) { umindex.erase(u->email); } Node::copystring(&u->email, email); umindex[nuid] = hit->second;
return Promise.resolve(); }; @action _onReceiveStateDirectoryPath = (stateDirectoryPath: string) => { this.stateDirectoryPath = stateDirectoryPath; }; // DEFINE COMPUTED VALUES
'plugin:', 'issues:', 'list-supported-issues', 'php-version:', 'dry-run', 'safe-types', 'find-unused-code', 'threads:', 'codeowner:', 'allow-backwards-incompatible-changes:', 'add-newline-between-docblock-annotations:', ]; // get options from command line
kube.GetConfig(cmdutil.GetKubeConfig(), "", types.DefaultOAMNS), types.DefaultOAMNS, os.Getenv("HELM_DRIVER"), debug, ); err != nil { return nil, err }
// Write conn log slices (as record batches) to the stream. for (auto& slice : zeek_conn_log) writer.write(slice);  // closing the stream so we can start reading back the data. REQUIRE_OK(stream->Close());  // Deserialize record batches, store them in arrow_table_slice objects, and // compare to the original slices. std::shared_ptr<arrow::Buffer> buf;
return } patch = val & 0xffff val >>= 16 minor = val & 0xffff val >>= 16 major = val return
if err != nil { switch { case errors.Is(err, signature.ErrInvalidFormat): return newInvalidBlockError(block, fmt.Errorf("QC's  signature data has an invalid structure: %w", err)) case errors.Is(err, model.ErrInvalidSignature): return newInvalidBlockError(block, fmt.Errorf("QC contains invalid signature(s): %w", err)) default: return fmt.Errorf("cannot verify qc's aggregated signature (qc.BlockID: %x): %w", qc.BlockID, err) }
func (c *Client) DeleteBuildOrFail(name string) { c.T.Helper() builds := c.KnativeGCP.EventsV1beta1().CloudBuildSources(c.Namespace) err := builds.Delete(name, &metav1.DeleteOptions{}) if err != nil { c.T.Fatalf("Failed to delete build %s/%s: %v", c.Namespace, name, err)
email = models.EmailField(_("Email"), db_index=True, blank=True) # This key are used to confirm and cancel alerts for anon users key = models.CharField(_("Key"), max_length=128, blank=True, null=True, unique=True, db_index=True) # An alert can have two different statuses for authenticated # users ``ACTIVE`` and ``CANCELLED`` and anonymous users have an
sc, ok := s.schemas[req.Name] if !ok { return nil, status.Errorf(codes.NotFound, "schema(%q) not found", req.Name) } return sc, nil }
""" # ensure we get a 200 resp = restutil.http_get(self.instance_url, headers=self._health_headers) if restutil.request_failed(resp): return False, "{0}".format(restutil.read_response_error(resp))
var ( // Mapping of GCS eventTypes to CloudEvent types. storageEventTypes = map[string]string{ "OBJECT_FINALIZE":        storageFinalize, "OBJECT_ARCHIVE":         storageArchive, "OBJECT_DELETE":          storageDelete, "OBJECT_METADATA_UPDATE": storageMetadataUpdate, } )
import argparse import os import os.path as osp from mmcv import Config
const std::vector<image_data_reader::sample_t> &image_list = image_reader->get_image_list(); for (auto t : sizes) { int data_id = t.first; int label = image_list[data_id].second; if (m_image_offsets.find(data_id) == m_image_offsets.end()) { LBANN_ERROR("m_image_offsets.find(data_id) == m_image_offsets.end() for data_id: ", data_id); }
By("pause app in middle of rollout and verify status") plan.Paused = true updateAppWithCpuAndPlan(app, "2", plan) By("verify update rolloutPlan shouldn't create new revision") Expect(k8sClient.Get(ctx, ctypes.NamespacedName{Name: appName, Namespace: namespaceName}, checkApp)).Should(BeNil()) Expect(checkApp.Status.LatestRevision.Name).Should(BeEquivalentTo(utils.ConstructRevisionName(appName, 2))) By("Verify that the app rollout pauses") Eventually(func() error { if err := k8sClient.Get(ctx, ctypes.NamespacedName{Name: appName, Namespace: namespaceName}, checkApp); err != nil {
wlr_log(L_DEBUG, "got shell surface toplevel"); struct wlr_wl_shell_surface *surface = wl_resource_get_user_data(resource); if (surface->role != WLR_WL_SHELL_SURFACE_ROLE_NONE) { return; } surface->role = WLR_WL_SHELL_SURFACE_ROLE_TOPLEVEL; wl_signal_emit(&surface->events.set_role, surface); } static void shell_surface_set_transient(struct wl_client *client,
disk_cache = cache.DiskCache(str(tmpdir)) assert disk_cache.maximumCacheSize() == max_cache_size config_stub.set('storage', 'cache-size', max_cache_size * 2) assert disk_cache.maximumCacheSize() == max_cache_size * 2
def csv type = params[:type] if DataExport.supported_types.include? type respond_to do |format| format.csv { send_data data(type), filename: "#{type}-#{Time.zone.today}.csv" } end end end
public class GenerateCoverage implements AutoCloseable { private final boolean cover; private final FileUtil files; private final PrintWriter allRulesFile; public GenerateCoverage(boolean cover, FileUtil files) { this.cover = cover; this.files = files; files.resolveKompiled(".").mkdirs(); try { allRulesFile = new PrintWriter(new BufferedWriter(new FileWriter(files.resolveKompiled("allRules.txt").getAbsolutePath()))); } catch (IOException e) { throw KEMException.internalError("Could not write list of rules to coverage document.", e); }
return } if err != nil { // The error merr (from discarding the subMeter) will be hidden by err (transaction fee deduction error) // as it has priority. So log merr. i.logger.Error().Err(merr). Msg("error discarding computation meter in deductTransactionFees (while also handling a deductTransactionFees error)") return } err = merr
# Purpose: # ec2-ruby-example-create-key-pair.rb demonstrates how to # create a key pair in Amazon Elastic Compute Cloud (Amazon EC2) and # saves the resulting RSA private key file locally in the calling # user's home directory.
import logging import os from bulk_update.helper import bulk_update from datetime import datetime  from django.conf import settings from django.contrib import messages from django.contrib.auth.decorators import login_required
} HashSet<String> filteredGroups = new HashSet<String>(); if (requestHeader.isIgnoreDeteled()) { for (String group : groups) { if (this.brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable().containsKey(group)) { filteredGroups.add(group); } } } else { filteredGroups = groups; } GroupList groupList = new GroupList();
log_->info("check proposal"); // fetch first proposal from proposal queue ProposalType proposal; fetchFromQueue( proposal_queue_, proposal, proposal_waiting, "missed proposal"); validation(proposal); return *this; }
DefaultStopColLabel  = "_stop" DefaultTimeColLabel  = "_time" DefaultValueColLabel = "_value" ) func GroupKeyForRowOn(i int, cr flux.ColReader, on map[string]bool) flux.GroupKey {
rp.Transport = &http.Transport{ Dial: socketDial(target.String()), } } else if keepalive != http.DefaultMaxIdleConnsPerHost { // if keepalive is equal to the default, // just use default transport, to avoid creating // a brand new transport rp.Transport = &http.Transport{ Proxy: http.ProxyFromEnvironment, Dial: (&net.Dialer{
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4448-SEA 1645531086 2319476361</p> <hr> <p>Varnish cache server</p> </body>
ProxyPreserveHost On <%- end -%> <%- [@proxy_pass].flatten.compact.each do |proxy| -%> ProxyPass <%= proxy['path'] %> <%= proxy['url'] %>   <%- if !proxy['params'].nil? -%> <%= proxy['params'] %> <%- end -%> <Location <%= proxy['path']%>> <%- if proxy['reverse_urls'].nil? -%>
mean = self.sum / self.count total = self.squared_sum - self.sum * mean raw_scores = 1 - (self.res / total) scores = ( _calculate_adjr2(raw_scores, self.num_examples, self.num_preds) if self.penalize else raw_scores ) if self.multioutput == "raw_values": return scores
wl_keyboard_send_keymap(handle->keyboard, WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1, state->keymap_fd, state->keymap_size); if (wl_resource_get_version(handle->keyboard) >= 2) { wl_keyboard_send_repeat_info(handle->keyboard, 25, 600); } } int main() {
} private int countEntries(Iterable<Entry<Key,Value>> scanner) { return Iterables.size(scanner); } private void setRange(Range range, List<? extends ScannerBase> scanners) {
doEnqueue(awaitableCallback); if (!await(awaitableCallback.countDown)) throw new InterruptedIOException(); Throwable t = awaitableCallback.throwable; if (t != null) { if (t instanceof Error) throw (Error) t; if (t instanceof IOException) throw (IOException) t;
// benchmarks helpers static int32_t * getRandomSeed (int32_t * seed); static FILE * openOutFileWithRPartitepostfix (const char * name); static const char * elektraGetString (void * data); static size_t getPower (size_t p, size_t q); size_t getNCount (void);
export default TravisRoute.extend({ setupController() { this._super(...arguments); return this.controllerFor('repo').activate('requests');
before(:all) do @client = ConnectionHelper.create_default_connection @blueprint = GoodData::Model::ProjectBlueprint.from_json('./spec/data/blueprints/test_project_model_spec.json') @project = @client.create_project_from_blueprint(@blueprint, token: ConnectionHelper::GD_PROJECT_TOKEN) end after(:all) do
// When re-building the Trie from the sequence of nodes, one can build the trie on the fly, // as for each node, the children have been previously encountered. func NewNodeIterator(mTrie *trie.MTrie) *NodeIterator { // for a Trie with height H (measured by number of edges), the longest possible path contains H+1 vertices stackSize := hash.TreeMaxHeight + 1 i := &NodeIterator{ stack: make([]*node.Node, 0, stackSize),
t.string   "name" t.string   "category" t.text     "description" t.date     "event_date",                                null: false t.time     "start_time",                                null: false t.time     "end_time",                                  null: false t.string   "repeats" t.integer  "repeats_every_n_weeks" t.integer  "repeats_weekly_each_days_of_the_week_mask"
self.logger.info("Update extension [{0}]".format(update_cmd)) self.launch_command(update_cmd, timeout=900, extension_error_code=ExtensionErrorCodes.PluginUpdateProcessingFailed, env={'VERSION': version}, handler_configuration=handler_configuration) except ExtensionError:
SUBSCRIBER_NAME = "bq" KEYSPACE_NAME_INCOMING = "ilisten" KEYSPACE_NAME_UNIQUE = "ulisten" APP_CREDENTIALS_FILE = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS') # TODO: #   Big query hardcoded data set ids
#include <caf/actor_system.hpp> #include <caf/actor_system_config.hpp> #include <caf/binary_deserializer.hpp> #include <caf/deserializer.hpp> #include <caf/error.hpp> #include <caf/execution_unit.hpp>
}, overrides: [ { files: ['**/*.gql*.js'], processor: '@graphql-eslint/graphql' }, {
} else { flb_warn("[in_syslog] error parsing log message " "on \"%s\" with parser '%s')", flb_input_name(ctx->i_ins), ctx->parser->name); flb_debug("[in_syslog] unparsed log message: %.*s", size, buf); return -1; }
np.ndarray: The image with bboxes drawn on it. """ if kwargs is not None: kwargs.pop('score_thr', None) kwargs.pop('text_color', None) kwargs['colors'] = kwargs.pop('bbox_color', 'green') mmcv.imshow_bboxes(data, result, top_k=top_k, **kwargs)
namespace { // kernel for initializing GWS // nwm1 is the total number of workgroups minus 1 and rid is the GWS resource id __global__ void init_gws(uint nwm1, uint rid) { __ockl_gws_init(nwm1, rid); }
centers=centers ) params = { "n_estimators": 10, "num_leaves": 10
string result = string.Empty; var platformOption = Array.Find(args, element => element.StartsWith("/platform")); var platformOptionSpecicifcation = "x64";
fatalException = new TableDeletedException(tableId.canonical()); } catch (SampleNotPresentException e) { fatalException = e; } catch (Exception t) { if (queryThreadPool.isShutdown()) log.debug("Caught exception, but queryThreadPool is shutdown", t); else log.warn("Caught exception, but queryThreadPool is not shutdown", t); fatalException = t; } catch (Throwable t) { fatalException = t; log.error("QueryTask::run encountered throwable: {}", t.getMessage()); throw t; // let uncaught exception handler deal with the Error } finally { semaphore.release(); Thread.currentThread().setName(threadName);
const lwcMap = lwcNpmResolver.resolveLwcNpmModules(); // This logic is somewhat the same in the compiler resolution system // We should try to consolidate it at some point. function isImplicitHTMLImport(importee, { basedir }) { const ext = extname(importee); const isHTML = ext === '.html';
private final BlockTimer blockTimer; private final IbftMessageTransmitter transmitter; private final MessageFactory messageFactory; private final Map<Integer, RoundState> futureRoundStateBuffer = Maps.newHashMap(); private final NewRoundMessageValidator newRoundMessageValidator; private final Clock clock; private final Function<ConsensusRoundIdentifier, RoundState> roundStateCreator;
} type queryFilterAction struct { // `replace` to replace the value(s) associated with the parameter(s), `hash` to replace them with the 4 initial bytes of the SHA-256 of their content or `delete` to remove them entirely. Type filterAction `json:"type"` // The name of the query parameter.
/// <returns>true if a type was found, false if not</returns> bool TryToType(string propertyName, out IType type); /// <summary> /// Given a query alias and a property path, return the qualified column name /// </summary>
ClientScene.DestroyAllClientObjects(); if (!string.IsNullOrEmpty(offlineScene)) { // Must pass true or offlineScene will not be loaded ClientChangeScene(offlineScene, true); }
* @param file a DataFile to remove from the table * @return this for method chaining */ default DeleteFiles deleteFile(DataFile file) { deleteFile(file.path()); return this; } /** * Delete files that match an {@link Expression} on data rows from the table.
require(["playerSelectionMenu", "components/playback/remotecontrolautoplay"]); } if (!appHost.supports("physicalvolumecontrol") || browser.touch) { require(["components/playback/volumeosd"]); }
func NewClientConfig( remote string, caCertPath, tlsCryptKeyPath string, ) *ClientConfig { config := ClientConfig{NewConfig()} config.SetClientMode(remote, 1194) config.SetTLSCACertificate(caCertPath) config.SetTlsCrypt(tlsCryptKeyPath) config.SetDevice("tun") config.setParam("cipher", "AES-256-GCM")
vpnServerFactory func(sessionManager session.Manager, serviceLocation dto_discovery.Location, providerID identity.Identity, callback state.Callback) *openvpn.Server vpnServer    *openvpn.Server checkOpenvpn func() error } // Start starts server - does not block func (cmd *Command) Start() (err error) { err = cmd.checkOpenvpn() if err != nil { return err }
style_opts = line_properties + ['level'] apply_ranges = param.Boolean(default=False, doc=""" Whether to include the annotation in axis range calculations.""")  _plot_methods = dict(single='Span') def get_data(self, element, ranges, style):
const Actions & plannedActions = _battlePlanner.planUnitTurn( arena, currentUnit ); actions.insert( actions.end(), plannedActions.begin(), plannedActions.end() ); // Do not end the turn if we only cast a spell if ( plannedActions.size() != 1 || !plannedActions.front().isType( MSG_BATTLE_CAST ) ) actions.emplace_back( MSG_BATTLE_END_TURN, currentUnit.GetUID() ); } }
}; get miniCartInner() { const { checkout, productConfirm, productList, props, state } = this; const { classes, isCartEmpty, isMiniCartMaskOpen } = props; const { isEditPanelOpen } = state;
Column c = cols[j]; DataType dataType = c.getDataType(); String precision = Integer.toString(c.getPrecisionAsInt()); Sequence sequence = c.getSequence(); add(rows, // TABLE_CATALOG
'Characters %r are present in both whitelist_characters=%r, and ' 'blacklist_characters=%r' % ( sorted(overlap), whitelist_characters, blacklist_characters)) blacklist_categories = as_general_categories( blacklist_categories, 'blacklist_categories') whitelist_categories = as_general_categories( whitelist_categories, 'whitelist_categories') both_cats = set( blacklist_categories or ()).intersection(whitelist_categories or ()) if both_cats:
} // ExportKindFor reports back to the OpenTelemetry SDK sending this Exporter // metric telemetry that it needs to be provided in a pass-through format. func (e *Exporter) ExportKindFor(*metric.Descriptor, aggregation.Kind) metricsdk.ExportKind { return metricsdk.PassThroughExporter }
// Get LCCN from Index $raw = isset($this->fields['lccn']) ? $this->fields['lccn'] : ''; // Remove all blanks. $raw = preg_replace('{[ \t]+}', '', $raw);
* </pre> */ public class ImapStore extends RemoteStore { private static final int IDLE_READ_TIMEOUT_INCREMENT = 5 * 60 * 1000; private static final int IDLE_FAILURE_COUNT_LIMIT = 10;
from kombu.utils.encoding import bytes_to_str, str_to_bytes from celery.five import (bytes_if_py2, items, python_2_unicode_compatible, reraise, string_t)  from .encoding import safe_repr try:
} func (p *AWSProvider) cloudwatch() *cloudwatch.CloudWatch { return cloudwatch.New(session.New(), p.config()) } func (p *AWSProvider) cloudwatchlogs() *cloudwatchlogs.CloudWatchLogs { return cloudwatchlogs.New(session.New(), p.config().WithLogLevel(aws.LogOff)) } func (p *AWSProvider) dynamodb() *dynamodb.DynamoDB {
buckets = ab.pop('buckets', [tactic]) ab.pop('access', None) plugin_path = pathlib.PurePath(filename).parts plugin = plugin_path[1] if 'plugins' in plugin_path else '' ab.pop('plugin', plugin) if tactic and tactic not in filename: self.log.error('Ability=%s has wrong tactic' % id)
def order_processes(delays, args_for_script): assert len(delays) == len(args_for_script), 'Can not order the processes as a list of delays length is not equal ' \ 'to a list of arguments length.' unique_delays = set(delays) processes_dictionary = {} for delay in unique_delays: delays_indices = [i for i, e in enumerate(delays) if e == delay] args_list = [] for index in delays_indices:
shutil.rmtree(self.tmp_dir, ignore_errors=True) def _get_backups(self): files = [os.path.join(self.backup_dir, bk_file) for bk_file in os.listdir(self.backup_dir)] files = [bk_file for bk_file in files if os.path.isfile( bk_file) and self.backup_name_prefix in bk_file] return sorted(files, key=os.path.getmtime, reverse=True) def _remove_old_backups(self):
if (arguments.length > 2) { normalizedProps.children = arguments.length > 3 ? slice.call(arguments, 2) : children; } return createVNode(
{ logInfo(RTPS_EDP,"Adding SEDP Pub Writer to my Pub Reader"); temp_writer_proxy_data_.guid().entityId = c_EntityId_SEDPPubWriter; temp_writer_proxy_data_.set_persistence_entity_id(c_EntityId_SEDPPubWriter); publications_reader_.first->matched_writer_add(temp_writer_proxy_data_); } auxendp = endp;
// This confirms that each program compiles to the same bytes // (except the leading version indicator), when compiled under // original and max versions. That doesn't *have* to be true, // as we can introduce optimizations in later versions that // change the bytecode emitted. But currently it is, so we // test it for now to catch any suprises.
* @param Container $container * @return Container|mixed */ function sage($abstract = null, $parameters = [], Container $container = null) { $container = $container ?: Container::getInstance(); if (!$abstract) {
import ( _ "github.com/bufbuild/buf/cmd/buf" _ "github.com/favadi/protoc-go-inject-tag" _ "github.com/go-swagger/go-swagger/cmd/swagger" // use this instead of google.golang.org/protobuf/cmd/protoc-gen-go since this supports grpc plugin while the other does not. // see https://github.com/golang/protobuf/releases#v1.4-generated-code and // https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.20.0#v1.20-grpc-support _ "github.com/golang/protobuf/protoc-gen-go" _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway" _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger" )
public function testShouldSanitizeExcludeCSS( $original, $sanitized ) { $this->stubWpParseUrl(); Functions\when( 'rocket_validate_css' )->alias( function( $url ) { $file_host = parse_url( $url, PHP_URL_HOST ); if ( 'example.org' === $file_host ) { return parse_url( trim( $url ), PHP_URL_PATH ); }  return str_replace( [ 'http://', 'https://' ], '', strtok( $url, '?' ) ); } ); Functions\when( 'sanitize_text_field' )->returnArg(); Functions\when( 'rocket_valid_key' )->justReturn( true );
return descriptions; } void HeroesIndicator::SetHero( const Heroes * h ) { hero = h; } void HeroesIndicator::SetPos( const Point & pt )
// exit messages this.exitLogs = [] // load all the other plugins this.allPluginIds = Object.keys(this.pkg.dependencies || {}) .concat(Object.keys(this.pkg.devDependencies || {})) .filter(isPlugin)  const cliService = plugins.find(p => p.id === '@vue/cli-service') const rootOptions = cliService ? cliService.options
t.Fatal("Did not expect errors.") } for _, s := range test.wantErrorStrings { if !errorListContains(errs, s) { t.Errorf("Errors did not contain %q", s) } } return
$command = $container->hasDefinition('contao.command.debug_fragments') ? $container->findDefinition('contao.command.debug_fragments') : null; foreach ($this->findAndSortTaggedServices($tag, $container) as $reference) { // If a controller has multiple methods for different fragment types (e.g. a content // element and a front end module), the first pass creates a child definition that // inherits all tags from the original. On the next run, the pass would pick up the // child definition and try to create duplicate fragments. if (0 === strpos((string) $reference, 'contao.fragment._')) { continue; }
{ public SchemaInformation() { MinimumSupportedVersion = SchemaVersion.V1; MaximumSupportedVersion = SchemaVersion.V1; } public SchemaVersion MinimumSupportedVersion { get; } public SchemaVersion MaximumSupportedVersion { get; } public SchemaVersion? Current { get; set; } }
const int numWorkers() const { return m_threadSupportInterface->getNumWorkerThreads(); } void runTask(int threadIdx, btThreadSupportInterface::ThreadFunc func, void *arg) { FunctionContext& ctx = m_functionContexts[threadIdx]; ctx.func = func; ctx.arg = arg; m_threadSupportInterface->runTask(threadIdx, (void *)&ctx);
$this->is_started   = $json_arr['i']; $this->percentage   = $json_arr['p']; $this->files        = $json_arr['f']; $this->user_id      = $json_arr['u']; } /**
// these provider-specific subpackages and use its exported function(s) to // create a *Variable; do not use the New function in this package. For example: // //  var v *runtimevar.Variable //  var err error //  v, err = etcdvar.New("my variable", etcdClient, runtimevar.JSONDecode, nil) //  ... // // Then, write your application code using the *Variable type. You can
long cachedUidValidity = localFolder.getUidValidity(); long currentUidValidity = imapFolder.getUidValidity(); if (localFolder.hasCachedUidValidity() && cachedUidValidity != currentUidValidity) { Timber.v("SYNC: Deleting all local messages in folder %s due to UIDVALIDITY change", localFolder); Set<String> localUids = localFolder.getAllMessagesAndEffectiveDates().keySet();
} /// <summary> /// Gets the Coding collection. /// </summary> public ICollection<Coding> Coding { get; } }
public function setExtraData(array $data): void { // Not implemented in the base class if (!empty($data)) { error_log(get_class($this) . ': Extra data passed but not handled'); } } /**
$this->disableRenewals = $this->config['Catalog']['disableRenewals'] ?? false; $this->useOAuth2 = ($this->config['Catalog']['tokenEndpoint'] ?? false) && ($this->config['Catalog']['clientId'] ?? false) && ($this->config['Catalog']['clientSecret'] ?? false); $this->tokenBasicAuth = $this->config['Catalog']['tokenBasicAuth'] ?? false; } /**
protected void onDraw(Canvas canvas) { if (GRID_ENABLED) { int screenWidth = Utils.getScreenWidth(getContext()); int screenHeight = Utils.getScreenHeight(getContext()); canvas.drawLine(2 * (screenWidth / 3), 0, 2 * (screenWidth / 3), screenHeight, paint); canvas.drawLine((screenWidth / 3), 0, (screenWidth / 3), screenHeight, paint);
nnodes = 10; break; default: msg_warning() << "Elements of type 1, 2, 3, 4, 5, or 6 expected. Element of type " << etype << " found."; nnodes = 0; } }
func NewTrieWithUpdatedRegisters(parentTrie *MTrie, updatedPaths []ledger.Path, updatedPayloads []ledger.Payload) (*MTrie, error) { parentRoot := parentTrie.root updatedRoot := parentTrie.update(parentRoot.Height(), parentRoot, updatedPaths, updatedPayloads, nil) updatedTrie, err := NewMTrie(updatedRoot) if err != nil { return nil, fmt.Errorf("constructing updated trie failed: %w", err)
}); }); class IpRemoteHostImpl { constructor(address, tls) { this.address = address; this.tls = tls; }
import { useCallback } from 'react'; import { useHistory } from 'react-router-dom'; import { useDropdown } from '../../hooks/useDropdown';
area.DrawTile( dst, fheroes2::AGG::GetTIL( TIL::STON, 32 + ( mp.y % 4 ), 0 ), mp ); } else { #if ( __GNUC__ == 6 ) //workaround for gcc 6, which uses abs( double ) overload for short arg area.DrawTile( dst, fheroes2::AGG::GetTIL( TIL::STON, ( std::abs( static_cast<int>( mp.y ) ) % 4 ) * 4 + std::abs( static_cast<int>( mp.x ) ) % 4, 0 ), mp ); #else area.DrawTile( dst, fheroes2::AGG::GetTIL( TIL::STON, ( std::abs( mp.y ) % 4 ) * 4 + std::abs( mp.x ) % 4, 0 ), mp ); #endif } } }
'sanitize_callback' => 'absint', ), 'discover'  => array( 'description' => __( 'Whether to perform an oEmbed discovery request for unsanctioned providers.' ), 'type'        => 'boolean', 'default'     => true, ),
j++ } } out = append(out, n.entries[j:]...) return StringLatestMap{out} }
// pause records to prevent double logging trie removals w.PauseRecord() defer w.UnpauseRecord()  err = w.ReplayOnForest(forest) if err != nil { return nil, fmt.Errorf("cannot restore LedgerWAL: %w", err)
// Relay represents the configuration data necessary for a single Relay type Relay struct { ID             int64  // db key injected when loaded Address        string // ip or dns name; use to be called IPOrDNSName. MetricsEnabled bool CheckSuccess   bool   // true if check was successful DNSAlias       string // DNS Alias name used
* @author Glenn Renfro */ @RunWith(SpringRunner.class) @SpringBootTest(classes = { TaskServiceDependencies.class }, properties = { "spring.main.allow-bean-definition-overriding=true" }) @DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) @AutoConfigureTestDatabase(replace = Replace.ANY)
} if !resData.OK { return nil, fmt.Errorf("list Slack channels: %w", &apiError{msg: resData.Error, header: resp.Header}) } channels = append(channels, resData.Channels...)
animator.Play(stateHash, layerId, normalizedTime); } animator.SetLayerWeight(layerId, weight); ReadParameters(reader); }
is_internal=False, log_event=True): if (not is_success) and log_event: _log_event(name, op, message, duration, is_success=is_success) self._add_event(duration, evt_type, is_internal, is_success, message, name, op, version, eventId=1)
from __future__ import absolute_import, division, print_function from django import forms from django.forms import widgets from tests.django.toystore.models import ( CouldBeCharming,
else: res = http.get(self.url) status = _status_re.search(res.text) if not status: return  if status.group(1) != 'true': self.logger.info("Stream currently unavailable.") return
JID searchJID = new JID(originatingResource.getNode(), originatingResource.getDomain(), null); List<JID> addresses = routingTable.getRoutes(searchJID, null); for (JID address : addresses) { if (!originatingResource.equals(address)) { // Send the presence of the session whose presence has changed to // this user's other session(s) presence.setTo(address);
} if !success { return errors.New("At least one of the tests failed") } return nil
uint8_t session_id_from_client[MAX_KEY_LEN]; /* aes keys. Used for session ticket/session data encryption. Taken from test vectors in https://tools.ietf.org/html/rfc5869 */ char ticket_key_name[] = "2018.07.26.15\0"; uint8_t ticket_key[32] = {0x19, 0xef, 0x24, 0xa3, 0x2c, 0x71, 0x7b, 0x16, 0x7f, 0x33, 0xa9, 0x1d, 0x6f, 0x64, 0x8b, 0xdf, 0x96, 0x59, 0x67, 0x76, 0xaf, 0xdb, 0x63, 0x77, 0xac, 0x43, 0x4c, 0x1c, 0x29, 0x3c,
} // Coverage struct for writing to xml file type coverageType struct { XMLName         xml.Name  `xml:"coverage"` LineRate        float64   `xml:"line-rate,attr"` BranchRate      float64   `xml:"branch-rate,attr"`
} glob := s.globber.Glob(s.pkg.SourceRoot(), include, exclude, hidden, includeSymlinks) if CONFIG.FF_PANIC_ON_BAD_GLOB && len(glob) == 0 { panic(fmt.Errorf("No matches found for this glob")) } return fromStringList(glob)
return o.loadError() } // WaitUntilRunning blocks until the instance enters the running state, or the // context times out. func (o *Once) WaitUntilRunning(ctx context.Context) error { state := State(o.state.Load()) if state == Running { return nil
(initial_finished, initial_inputs) = sampler.initialize(input_tensors) cell_input = initial_inputs cell_state = cell.get_initial_state(...) for time_step in tf.range(max_output_length): cell_output, cell_state = cell(cell_input, cell_state) sample_ids = sampler.sample(time_step, cell_output, cell_state) (finished, cell_input, cell_state) = sampler.next_inputs( time_step, cell_output, cell_state, sample_ids) if tf.reduce_all(finished): break ```
// that indicates database contention that warrants a retry. // Sends warnings and errors to log. func LoggedRetry(fn func() error, log logging.Logger) (err error) { for i := 0; (i == 0) || dbretry(err); i++ { if i > 0 { if i < infoTxRetries { log.Infof("db.LoggedRetry: %d retries (last err: %v)", i, err)
use WP_Rocket\Tests\Integration\FilesystemTestCase; use WP_Rocket\ThirdParty\Themes\Divi; use WP_Theme; /** * @covers \WP_Rocket\ThirdParty\Divi::maybe_disable_youtube_preview
* Returns a sink constructed directly from the given Core API processor * meta-supplier. * <p> * The default local parallelism for this source is specified by the given * {@link ProcessorMetaSupplier#preferredLocalParallelism() metaSupplier}. * * @param sinkName user-friendly sink name
if not conv: raise configexc.ValidationError( value, '{} not in {}'.format(kind, list(sorted(converters)))) if len(kind) != len(vals): raise configexc.ValidationError(
<div id="admincenter"> <h2 class="category_header">', $txt['package_examine_file'], ' : ' , $context['package'], '</h2> <h3 class="category_header">', $txt['package_file_contents'], ' ', $context['filename'], ':</h3> <div class="content largetext"> <code><pre class="file_content prettyprint">', $context['filedata'], '</pre></code> <a href="', $scripturl, '?action=admin;area=packages;sa=list;package=', $context['package'], '" class="linkbutton_right">', $txt['list_files'], '</a> </div>
writeEvent        bool filters           []Filter spanNameFormatter func(string, *http.Request) string counters          map[string]metric.Int64Counter valueRecorders    map[string]metric.Int64ValueRecorder } func defaultHandlerFormatter(operation string, _ *http.Request) string {
.. autofunction:: Merge """ import six  import errno import numpy as np import logging import copy import uuid import MDAnalysis import sys
use Symfony\Component\HttpFoundation\ParameterBag; /** * Controller providing functionality used to perform paged datastore queries. * * @package Drupal\datastore */
/** @var bool */ private $overwriteLiipImagine; /** @var bool */ private $overwriteFosHttpCache;  /** * @param string $rootDir */
# # Used internally to print deprecation warnings def warn_deprecation(message) RSpec.configuration.deprecation_io.puts(message) end  end end
static RpmOstreeCommand override_subcommands[] = { { "replace", RPM_OSTREE_BUILTIN_FLAG_SUPPORTS_PKG_INSTALLS, "Replace packages in the base layer", rpmostree_override_builtin_replace }, { "remove", RPM_OSTREE_BUILTIN_FLAG_SUPPORTS_PKG_INSTALLS, "Remove packages from the base layer",
52, 53, 54, 55, 56, 57, 43, 47          //4..9, +, / }; const byte s_encodingPad = (byte)'=';              // '=', for padding [MethodImpl(MethodImplOptions.AggressiveInlining)] public static int ComputeEncodedLength(int sourceLength)
*/ private function getDeprecationArgs(string $package, string $version, string $message): array { /** @phpstan-ignore-next-line */ if (method_exists('root', TreeBuilder::class)) { return [$message]; }
`gt_bboxes` corresponds to `gt_labels` and `gt_masks`, and `gt_bboxes_ignore` corresponds to `gt_labels_ignore` and `gt_masks_ignore`. - If the crop does not contain any gt-bbox region and `allow_negative_crop` is set to False, skip this image. """ def __init__(self, crop_size, allow_negative_crop=False):
import ( "context" "github.com/golang/glog" "google.golang.org/grpc/codes"
tensor The destination node ID array. """ return dist_find_edges(self, edges) def get_partition_book(self): """Get the partition information.
* */ export default function hasErrorWithStatus(errorResponse, status) { const { errors = [] } = errorResponse || {}; return errors.isAny('status', status); }
return } if !has { jsonhttp.NotFound(w, nil) return } jsonhttp.OK(w, nil) }
cmpctBlock->vTxHashes.insert(it, iterShortID, shorttxids.end()); } // Create a map of all short tx hashes pointing to their full tx hash counterpart // We need to check all transaction sources (orphan list, mempool, and new (incoming) transactions in this block) int missingCount = 0; int unnecessaryCount = 0;
*        OpenSSL erroneously rejects valid certificates possibly because OpenSSL doesn't have access to the *        proper trust certificates. *   - `partial` - Whether this Realm should be opened in 'partial synchronization' mode. *        Partial synchronisation only synchronizes those objects that match the query specified in contrast *        to the normal mode of operation that synchronises all objects in a remote Realm. *        **Partial synchronization is a tech preview. Its APIs are subject to change.** */
type: "POST", url: url, data: user, dataType: "json" }) }, ApiClient.prototype.updateUser = function(user) {
if (LaunchIntent != null) { startActivity(LaunchIntent); }else{ Toast.makeText(this, R.string.app_disabled_text, Toast.LENGTH_SHORT).show(); } } else { try {
if ($nodeIdentifiers === array()) { $nodes = $this->nodeSearchService->findByProperties($searchTerm, $searchableNodeTypeNames, $contentContext, $contextNode); } else { $nodes = array_map(function($identifier) use ($contentContext) { return $contentContext->getNodeByIdentifier($identifier); }, $nodeIdentifiers); } $this->view->assign('nodes', $nodes);
TOutput VisitInclude(IncludeExpression expression, TContext context); /// <summary> /// Visits the <see cref="SortExpression"/>. /// </summary> /// <param name="expression">The expression to visit.</param> /// <param name="context">The input</param> TOutput VisitSortParameter(SortExpression expression, TContext context); } }
package com.alibaba.nacos.naming.push; import com.alibaba.nacos.common.utils.StringUtils; import org.codehaus.jackson.Version; import org.codehaus.jackson.util.VersionUtil;
} String provider = ipAddressAttributes[0]; String[] providerAddr; try { providerAddr = IpUtil.splitIpPortStr(provider); } catch (Exception ex) { return null; }
let alphaFocusedElement; let alphaFocusTimeout; function onAlphaFocusTimeout(instance) { alphaFocusTimeout = null; if (document.activeElement === alphaFocusedElement) { const value = alphaFocusedElement.getAttribute('data-value'); instance.value(value, true); } }
GetOptionsDB().Get<bool>("verbose-combat-logging"); m_wnd.DeleteChildren(); GG::Layout* layout = new GG::DeferredLayout(m_wnd.UpperLeft().x, m_wnd.UpperLeft().y, m_wnd.Width(), m_wnd.Height(), 1, 1, ///< numrows, numcols 0, 0 ///< wnd margin, cell margin ); m_wnd.SetLayout(layout); int client_empire_id = HumanClientApp::GetApp()->EmpireID();
('colors', 'tab.indicator.stop'): 'tabs.indicator.stop', ('colors', 'tab.indicator.error'): 'tabs.indicator.error', ('colors', 'tab.indicator.system'): 'tabs.indicator.system', ('tabs', 'auto-hide'): 'hide-auto', } DELETED_OPTIONS = [
* binary number of an integer value it is formed as the combination of 0’s and * 1’s. So digit 1 is known as a set bit in computer terms. Time Complexity :- * O(log n) Space complexity :- O(1) * @author [Swastika Gupta](https://github.com/Swastyy) */ #include <cassert>   /// for assert
import ( "fmt" "github.com/algorand/go-algorand/components/mocks" "math/rand" "testing" "github.com/stretchr/testify/require" "github.com/algorand/go-algorand/crypto" "github.com/algorand/go-algorand/data/basics" "github.com/algorand/go-algorand/data/pools"
} private void useRequestSlot(final EthPeer peer) throws PeerNotConnected { peer.getNodeData(singletonList(Hash.ZERO)); } @SuppressWarnings("unchecked") private void assertRequestSuccessful(final PendingPeerRequest pendingRequest) { final Consumer<ResponseStream> onSuccess = mock(Consumer.class); pendingRequest.then(onSuccess, error -> fail("Request should have executed", error)); verify(onSuccess).accept(any()); }
if isinstance(offline, Packet): tempfile_written, offline = _write_to_pcap([offline]) elif isinstance(offline, (list, PacketList)) and \ all(isinstance(elt, Packet) for elt in offline): tempfile_written, offline = _write_to_pcap(offline)
if (otherPlayerId != -1) cmd.set_player_id(otherPlayerId); cmd.set_zone_name("grave"); cmd.set_card_id(RANDOM_CARD_FROM_ZONE); sendGameCommand(cmd); }
* Delete segment path */ public static boolean deleteSegmentParquetStoragePath(CubeInstance cube, String segmentName, String identifier) throws IOException { if (cube == null || StringUtils.isNoneBlank(segmentName)|| StringUtils.isNoneBlank(identifier)) { return false; } String path = getSegmentParquetStoragePath(cube, segmentName, identifier);
{ notifyAboutUpdates = _notifyaboutupdate; settings->setValue("personal/updatenotification", notifyAboutUpdates); } No newline at end of file
// check if the underlay is usable by doing a raw ping using libp2p if _, err = s.streamer.Ping(ctx, multiUnderlay); err != nil { s.metrics.PingFailureTime.Observe(float64(time.Since(start).Milliseconds())) s.metrics.UnreachablePeers.Inc() s.logger.Debugf("hive: peer %s: underlay %s not reachable", hex.EncodeToString(newPeer.Overlay), multiUnderlay) return
auto current_time = time_provider_->getCurrentTime(); auto size = data.size(); std::for_each( data.begin(), data.end(), [this, &current_time, size](const auto &peer) { auto diff = storage_->getDiffState(peer, current_time); if (not diff.isEmpty()) { log_->info("Propagate new data[{}]", size);
package ppsi import ( "github.com/dedis/cothority/sda"
_base_ = '../fcos/fcos_r50_caffe_fpn_gn-head_4x4_1x_coco.py' model = dict( pretrained='open-mmlab://msra/hrnetv2_w32', backbone=dict(
) // ContextEventKey key used for storing and retrieving an event from the context. const ContextEventKey = "client_metric_event" // NewContextForEvent creates a new context with the event provided func NewContextForEvent(ctx context.Context, evt *Event) context.Context {
(renamed as appropriate) to be updated in an event. """ stream_params = set(util.stream_parameters(self.streams)) for k in stream_params - set(kwargs.keys()): raise KeyError('Key %r does not correspond to any stream parameter')  updated_streams = [] for stream in self.streams: applicable_kws = {k:v for k,v in kwargs.items() if k in set(stream.contents.keys())} rkwargs = util.rename_stream_kwargs(stream, applicable_kws, reverse=True) stream.update(**dict(rkwargs, trigger=False)) updated_streams.append(stream)
wg.Add(1) go func() { defer wg.Done() c.worker(ctx) }() }
handler := jsonHandler{reader: ifaceEmptyReader{}, handler: reflect.ValueOf(h)} reqBuf := yarpc.NewBufferString(`["a", "b", "c"]`) _, resBuf, err := handler.Handle(context.Background(), &yarpc.Request{ Procedure: "foo", Encoding:  "json", }, reqBuf) require.NoError(t, err) assert.JSONEq(t, `["a", "b", "c"]`, resBuf.String()) } func TestHandleSuccessWithResponseHeaders(t *testing.T) {
using Nancy.Bootstrapper; /// <summary> /// Defines the functionality for Nancy diagnostics. /// </summary> public interface IDiagnostics { /// <summary> /// Initializes diagnostics /// </summary> /// <param name="pipelines">Application pipelines</param> void Initialize(IPipelines pipelines);
testPackage, err := parser.Parse(bytes.NewReader(data), "") if err != nil { return core.TestSuite{}, fmt.Errorf("Failed to parse go test output: %w", err) } results := fromGoJunitReport(testPackage)
else: segm_results = self.simple_test_mask( x, img_metas, det_bboxes, det_labels, rescale=rescale) return list(zip(bbox_results, segm_results)) def aug_test(self, x, proposal_list, img_metas, rescale=False): """Test with augmentations.
if !exists { // when the block no longer exists in the queue, it means there was a race condition that // two onBlockExecuted was called for the same block, and one process has already removed the // block from the queue, so we will print an error here return fmt.Errorf("block has been executed already, no long exists in the queue") } // dismount the executed block and all its children
} // If first run, set to RR if (settingsCache->servers().getPrevioushostName().isEmpty() && previousHosts->count() >= 2) { previousHosts->setCurrentIndex(1); }
// visible (not private) for testing VolumeChooser getDelegateChooser(VolumeChooserEnvironment env) { if (env.getScope() == ChooserScope.TABLE) { return getVolumeChooserForTable(env); } return getVolumeChooserForScope(env); } private VolumeChooser getVolumeChooserForTable(VolumeChooserEnvironment env) {
return False def get_status(self, bigchain): election = self.get_election(self.id, bigchain) if election and election['is_concluded']: return self.CONCLUDED return self.INCONCLUSIVE if self.has_validator_set_changed(bigchain) else self.ONGOING
} func TestInternalParse(t *testing.T) { tests := []struct { inputInternalPaths    string shouldErr             bool
# Code based on # https://bitbucket.org/bedwards/networkx-community/src/370bd69fc02f/networkx/algorithms/community/ @require('numpy') @not_implemented_for('undirected') @not_implemented_for('multigraph') def directed_laplacian(G, nodelist=None, weight='weight', walk_type=None, alpha=0.95): r"""Return the directed Laplacian matrix of G.
public void startReloader() { if (isEnabled) { reloadZkValues(); reloadingFuture = executor.scheduleAtFixedRate(this::reloadZkValues, 0, cacheTtl, TimeUnit.SECONDS); }
attrs = append(attrs, HTTPRouteKey.String(route)) } if values, ok := request.Header["X-Forwarded-For"]; ok && len(values) > 0 { if addresses := strings.SplitN(values[0], ",", 2); len(addresses) > 0 { attrs = append(attrs, HTTPClientIPKey.String(addresses[0])) } }
g_return_val_if_fail (repo != NULL, FALSE); g_return_val_if_fail (ref != NULL, FALSE); g_return_val_if_fail (out_rev != NULL, FALSE); g_return_val_if_fail (*out_rev == NULL, FALSE); if (ostree_repo_resolve_rev (repo, ref, FALSE, out_rev, &my_error)) return TRUE;
func decode(v reflect.Value, d Decoder) error { if !v.CanSet() { return fmt.Errorf("while decoding: cannot set %+v", v) } // A Null value sets anything nullable to nil. // If the value isn't nullable, we keep going.
namespace vast { void factory_traits<table_slice_builder>::initialize() { using f = factory<table_slice_builder>; f::add<default_table_slice_builder>(default_table_slice::class_id); } } // namespace vast
break; } } } catch (MessagingException me) { /** * Let the user continue composing their message even if we have a problem processing
import org.junit.Test; import software.amazon.awssdk.core.internal.batchutilities.BatchAndSendFunction; import software.amazon.awssdk.core.internal.batchutilities.BatchManager; import software.amazon.awssdk.core.internal.batchutilities.BatchOverrideConfiguration; import software.amazon.awssdk.core.internal.batchutilities.BatchResponseMapperFunction; import software.amazon.awssdk.core.internal.batchutilities.GetBatchGroupIdFunction; import software.amazon.awssdk.core.internal.batchutilities.IdentifiableResponse;
cmd = (cmd % creator_account_id_ % role_id % perm_str); auto str_args = [&role_id, &perm_str] { // TODO [IR-1889] Akvinikym 21.11.18: integrate // PermissionSet::toString() instead of bit string, when it is created return (boost::format("role_id: %s, perm_str: %s") % role_id % perm_str) .str(); };
isContributionsFragmentVisible = false; updateMenuItem(); // Do all permission and GPS related tasks on tab selected, not on create NearbyParentFragmentPresenter.getInstance().onTabSelected(); break; default: tabLayout.getTabAt(CONTRIBUTIONS_TAB_POSITION).select();
return pt; } virtual void OnPlaceMouseUp(ViewportPlaceMethod select_method, ViewportDragDropSelectionProcess select_proc, Point pt, TileIndex start_tile, TileIndex end_tile) { if (pt.x != -1) {
} struct wlr_renderer *wlr_renderer_autocreate_with_drm_fd(int drm_fd) { struct gbm_device *gbm_device = gbm_create_device(drm_fd); if (!gbm_device) { wlr_log(WLR_ERROR, "Failed to create GBM device");
<div class="learning-goal-wrapper"> <p class="camel bold learning-goal-title">Learning Goal</p> <p class="learning-goal"> <%= user.learning_goal || set_learning_goal  %> </p> </div> </div>
} public static Option startRowOpt() { final Option o = new Option(START_ROW_OPT, "begin-row", true, "begin row (exclusive)"); o.setArgName("begin-row"); return o; }
response.append(HTTPXMLHelper.SOAP_ENCODING_FOOTER); response.append(CRLF); } else { LOGGER.debug("Unsupported action received: " + content); } } else if (method.equals("SUBSCRIBE")) { output.headers().set("SID", PMS.get().usn());
@Subscribe public void onStatusEvent(final EventTempTargetChange ev) { new Thread(() -> invoke("EventTempTargetChange", true)).start(); FabricPrivacy.getInstance().logCustom(new CustomEvent("TT_Loop_Run")); }
"github.com/rs/zerolog" "github.com/onflow/flow-go/module" flownetwork "github.com/onflow/flow-go/network" ) const (
private final AllocateMappedFileService allocateMappedFileService; /** * 'Flushed' position within the queue. */ private long flushedPosition = 0; private long committedPosition = 0; private volatile long storeTimestamp = 0;
// Windows requires a slightly different language code identifier (LCID). // https://msdn.microsoft.com/en-us/library/cc233982.aspx if ($is_win) { $txt['lang_locale'] = strtr($txt['lang_locale'], '_', '-'); } if (setlocale(LC_TIME, $txt['lang_locale'])) {
func normalizeToken(token string) (string, error) { _, password, ok := clientaccess.ParseUsernamePassword(token) if !ok { return password, errors.New("failed to normalize token; must be in format K10<CA-HASH>::<USERNAME>:<PASSWORD> or <PASSWORD>") } return password, nil }
public JsonLayout() { this.Attributes = new List<JsonAttribute>(); this.RenderEmptyObject = true; } /// <summary>
return false; } bool SecondarySkillsBar::ActionBarCursor( const fheroes2::Point & /*unused*/, Skill::Secondary & skill, const fheroes2::Rect &  /*unused*/) { if ( skill.isValid() ) { msg = _( "View %{skill} Info" );
return os.ErrClosed } if epoch != rb.epoch { return ErrWrongEpoch } rb.items[rb.headSlice][rb.headPos] = item
/// <summary> /// Gets or sets default singleton instance of <see cref="ConfigurationItemFactory"/>. /// </summary> /// <remarks> /// This property implements lazy instantiation so that the <see cref="ConfigurationItemFactory"/> is not built before /// the internal logger is configured. /// </remarks> public static ConfigurationItemFactory Default { get
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4453-SEA 1645544077 772882475</p> <hr> <p>Varnish cache server</p> </body>
copy(k[4:8], addr) binary.LittleEndian.PutUint16(k[8:10], port) k[10] = protocol copy(k[11:15], cidr.Addr().AsNetIP().To4()) return k }
public const string BenchI = "BenchI"; public const string Inlining = "Inlining"; public const string V8 = "V8"; public const string Perflab = "Perflab"; public const string Virtual = "Virtual"; public const string ByteMark = "ByteMark";
hwDeviceStatus, sendMoneyRequest, selectCoinsRequest, checkIsTrezorByWalletId, } = hardwareWallets; const { stakePools,
import React from 'react'; import { createTestInstance } from '@magento/peregrine'; import { useQuery } from '@apollo/client'; import { useBreadcrumbs } from '../useBreadcrumbs';
// NewLocalConnWithManager is similar to NewLocalConn but takes a specific // LocalManager. func NewLocalConnWithManager(lm *LocalManager, local, remote Address) (*LocalConn, error) { return lm.connect(local, remote) } // Send implements the Conn interface. func (lc *LocalConn) Send(lm context.Context, msg Body) error { buff, err := MarshalRegisteredType(msg) if err != nil { return err
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4421-SEA 1645530207 1424410250</p> <hr> <p>Varnish cache server</p> </body>
arrowsize : int or list (default=10) For directed graphs, choose the size of the arrow head's length and width. A list of values can be passed in to assign a different size for arrow head's length and width. See `matplotlib.patches.FancyArrowPatch` for attribute `mutation_scale` for more info.
# No need to pad. return if pd.isnull(last_date): # If there is no data, determine how many days to add so that # desired days are written to the correct slots. days_to_zerofill = tds[tds.slice_indexer(end=date)]
def ping(self, **kwargs): worker_id = kwargs['worker'] worker = self._update_worker(worker_id) return {"rpc_messages": worker.fetch_rpc_messages()} def _upstream_status(self, task_id, upstream_status_table): if task_id in upstream_status_table:
(['redhat', '7.7.1908', 'Core'], False), (['bigip', '15.0.1', 'Final'], False), (['gaia', '273.562', 'R80.30'], False), (['debian', '9.1', ''], False), ] for (distro, supported) in test_cases:
$object->upload(__DIR__ . '/../../Resources/assets/', __DIR__ . '/../../Resources/assets/', $filesystem); } /** * @group legacy * @expectedDeprecation Not passing a valid value for the "$filesystem" argument of "Kunstmaan\FormBundle\Entity\FormSubmissionFieldTypes\FileFormSubmissionField::upload" is deprecated since KunstmaanFormBundle 5.8 and will be required in KunstmaanFormBundle 6.0. */ public function testUploadWithoutFilesystemService() { $object = $this->object; $this->assertNull($object->upload('..', '..'));
"--output", koreOutputFile.getAbsolutePath())); if (depth.isPresent()) { args.add("--depth"); args.add(Integer.toString(depth.get())); } if (smtOptions.smtPrelude != null) { args.add("--smt-prelude");
return; } msgtable[msgcnt] = e; // BUGFIX: missing out-of-bounds check if (msgcnt < (BYTE)sizeof(msgtable)) msgcnt++;
) func TrustDomainMemberIDFromProto(td spiffeid.TrustDomain, protoID *types.SPIFFEID) (spiffeid.ID, error) { id, err := idFromProto(protoID) if err != nil { return spiffeid.ID{}, err }
int max = security_policy->signature_preferences->signature_schemes[i]->maximum_protocol_version; s2n_signature_algorithm sig_alg = security_policy->signature_preferences->signature_schemes[i]->sig_alg; if (min == S2N_TLS13 || max >= S2N_TLS13) { has_tls_13_sig_alg = 1; }
wantError: yarpcerror.WrapHandlerError( &atomic.KeyDoesNotExist{Key: ptr.String("foo")}, "roundtrip-server", "ReadOnlyStore::integer", ), }, { desc:          "readonly store: integer with readonly client",
results['ori_shape'] = img.shape # Set initial values for default meta_keys results['pad_shape'] = img.shape results['scale_factor'] = 1.0 num_channels = 1 if len(img.shape) < 3 else img.shape[2] results['img_norm_cfg'] = dict(
exit(EXIT_FAILURE); } if (!*my_args.argv) { ERROR("A command to execute in the new namespace is required"); exit(EXIT_FAILURE); }
let widthWindow = $(window).width(); popbox = $(".pop-box"); headerpop = $(".header-pop"); sizeevent = $(".sizeevent"); tracktime = $(".sizeevent span"); speakerinfo = $(".speaker-info");
private final TaskSanitizer taskSanitizer = new TaskSanitizer(); private static final List<String> allowedSorts = Arrays.asList("task_execution_id", "task_name", "start_time", "end_time", "exit_code"); /** * Creates a {@code TaskExecutionController} that retrieves Task Execution information
return errors.WithMessage(err, "Failed to ensure Kubernetes cluster exists") } veleroInstallOptions, err := getProviderVeleroInstallOptions(objectStoreProvider, cloudCredentialsFile, bslBucket, bslPrefix, bslConfig, vslConfig, providerPlugins, features) if err != nil {
def #{method_name} without_autobuild do relation = __send__(:#{name}) relation.touch(#{extra_field ? ":#{extra_field}" : 'nil' }, callers: [self]) if relation end end TOUCH
def update_kinesis(method, path, data, headers, response=None, return_forward_info=False): if return_forward_info: if constants.KINESIS_RETURN_ERRORS: return 500 else: return True
this.suggestions = new Suggestions(embark, options); } registerApi() { let plugin = this.plugins.createPlugin('consoleApi', {}); plugin.registerAPICall('post', '/embark-api/command', (req, res) => {
* @see Authentication */ public final class InMemoryOAuth2AuthorizedClientService implements OAuth2AuthorizedClientService { private final Map<OAuth2AuthorizedClientId, OAuth2AuthorizedClient> authorizedClients = new ConcurrentHashMap<>(); private final ClientRegistrationRepository clientRegistrationRepository; /** * Constructs an {@code InMemoryOAuth2AuthorizedClientService} using the provided parameters.
// Continue digit deduction score -= Math.Max(Regex.Matches(phoneNumberText, continueDigitRegex).Count - 1, 0) * continueDigitDeductionScore; // Special award for USphonenumber without area code, i.e. 223-4567 or 223 - 4567 if (NoAreaCodeUSphonenumbeRegex.IsMatch(phoneNumberText)) { score += (phoneNumberLengthBase - Regex.Matches(phoneNumberText, digitRegex).Count) * lengthAward * 1.5; } return Math.Max(Math.Min(score, scoreUpperLimit), scoreLowerLimit) / (scoreUpperLimit - scoreLowerLimit);
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License.  // Package drivertest provides a conformance test for implementations of // driver. package drivertest
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4478-SEA 1645548010 156553977</p> <hr> <p>Varnish cache server</p> </body>
import java.util.Properties; import java.util.concurrent.TimeUnit; /** * Created by wangtong.wt on 2018/6/20. *
""" Purpose Shows how to use the AWS SDK for Python (Boto3) with the Amazon Elastic Compute Cloud (Amazon EC2) API to terminate an instance and clean up additional resources. """
__tablename__ = violations_tablename id = Column(Integer, primary_key=True) inventory_index_id = Column(String(256)) resource_id = Column(String(256), nullable=False) resource_type = Column(String(256), nullable=False) full_name = Column(String(1024)) rule_name = Column(String(256)) rule_index = Column(Integer, default=0) violation_type = Column(String(256), nullable=False) data = Column(Text) inventory_data = Column(Text) def __repr__(self): """String representation.
int TryAddRawGroupKern(struct splinefont *sf, int isv, struct glif_name_index *class_name_pair_hash, int *current_groupkern_index_p, struct ff_rawoffsets **current_groupkern_p, const char *left, const char *right, int offset) { char *pairtext; int success = 0; if (left && right && ((pairtext = smprintf("%s %s", left, right)) != NULL)) { if (!glif_name_search_glif_name(class_name_pair_hash, pairtext)) { glif_name_track_new(class_name_pair_hash, (*current_groupkern_index_p)++, pairtext); struct ff_rawoffsets *tmp_groupkern = calloc(1, sizeof(struct ff_rawoffsets));
* This method should be called while committing non-idempotent overwrite operations. * If a concurrent operation commits a new file after the data was read and that file might * contain rows matching the specified conflict detection filter, the overwrite operation * will detect this and fail. * <p> * Calling this method with a correct conflict detection filter is required to maintain * serializable isolation for overwrite operations. Otherwise, the isolation level
} } func GetResultFormat(format string) (resultFormat, errhand.VerboseError) { switch strings.ToLower(format) { case "tabular": return formatTabular, nil
import ( "fmt" asmfactory "github.com/aws/amazon-ecs-agent/agent/asm/factory" "github.com/aws/amazon-ecs-agent/agent/config" "github.com/aws/amazon-ecs-agent/agent/credentials"
public boolean isPrimitive() { return clazz.isPrimitive(); }  public boolean equivalent(JavaTypeDefinition def) { // TODO: JavaTypeDefinition generic equality return clazz.equals(def.clazz) && getTypeParameterCount() == def.getTypeParameterCount(); }
// This is a weird type that only exists to satisify the interface required by // grpc.WithPerRPCCredentials. That api is designed to incorporate things like OAuth // but in our case, we really just want to send this static token through, but we still // need to do the dance. type staticToken string func (t staticToken) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {
JavaTypeDefinition previousType; if (node.getType() != null) { // static field or method // node.getType() has been set by the call to searchNodeNameForClass above // node.getType() will have the value equal to the Class found by that method previousType = JavaTypeDefinition.forClass(node.getType()); } else { // non-static field or method if (dotSplitImage.length == 1 && astArguments != null) { // method
code.mark_pos(self.pos) self.expr.result_is_used = False  # hint that .result() may safely be left empty self.expr.generate_evaluation_code(code) if not self.expr.is_temp and self.expr.result(): result = self.expr.result() if not self.expr.type.is_void: result = "(void)(%s)" % result code.putln("%s;" % result)
return } // Create an edge for the dependency of newNode on parentNode. parentEdge := g.NewEdge(newNode, parentNode) g.SetEdge(parentEdge)
// The URL's host is the name of the collection. // The URL's path is used as the keyField. // // The following query parameters are supported: // //  - revision_field (optional): the name of the revision field. //  - filename (optional): the filename to store the collection in. type URLOpener struct { mu          sync.Mutex collections map[string]urlColl
def is_paired(input_string): pass
<Wishlist key={wishlist.id} data={wishlist} shouldRenderVisibilityToggle={shouldRenderVisibilityToggle} /> )); }, [shouldRenderVisibilityToggle, wishlists]); if (loading && !error) { return fullPageLoadingIndicator;
import static org.assertj.core.api.Assertions.assertThat; import static tech.pegasys.pantheon.tests.acceptance.dsl.WaitUtils.waitFor; import static tech.pegasys.pantheon.tests.acceptance.dsl.transaction.ibft.IbftTransactions.LATEST; import tech.pegasys.pantheon.ethereum.core.Address; import tech.pegasys.pantheon.tests.acceptance.dsl.condition.Condition;
root = etree.Element("FinalStatus") report_info = get_bza_report_info(self.engine, self.log) if report_info: link, _ = report_info[0] report_element = etree.Element("ReportURL") report_element.text = link root.append(report_element) if self.last_sec: for label, kpiset in iteritems(self.last_sec[DataPoint.CUMULATIVE]):
ipv6deactivationtime = Waiter::ds; // for IPv6 errors, try IPv4 before sending an error to the engine if ((dnsEntry.ipv4.size() && !dnsEntry.isIPv4Expired()) || (!httpctx->isCachedIp && httpctx->ares_pending)) { numconnections[httpctx->d]--; pausedrequests[httpctx->d].erase(msg->easy_handle);
delete chat->userpriv;  // discard any existing `userpriv` chat->userpriv = this->chatPeers; chat->group = group; chat->ts = (ts != -1) ? ts : 0; chat->setTag(tag ? tag : -1); client->notifychat(chat);
('graph vc', 'brown', 'brown'), ('graph rps', 'dark green', 'dark green'), ('graph fail', 'dark red', 'dark red'), ('graph rt', 'dark blue', 'dark blue'), ('graph lt', 'dark cyan', 'dark cyan'), ('graph cn', 'dark magenta', 'dark magenta'), ('stat-hdr', 'light gray', 'dark blue'),
goto out; old_path = g_file_resolve_relative_path (root, commit_filepath); /* Note this one can't be ported to glnx_file_get_contents_utf8_at() because * we're loading from ostree via `OstreeRepoFile`. */ if (!g_file_load_contents (old_path, cancellable, &old_contents, NULL, NULL, error)) goto out; }
}) t.Run("unstaked (0 stake) origin", func(t *testing.T) { ps := new(mockprotocol.State) ss := new(mockprotocol.Snapshot) execState := new(state.ExecutionState)
public async Task GivenAValidConfigurationWithETag_WhenExportingAnonymizedData_ResourceShouldBeAnonymized(string path) { _metricHandler?.ResetCount(); var dateTime = DateTimeOffset.UtcNow; var resourceToCreate = Samples.GetDefaultPatient().ToPoco<Patient>(); resourceToCreate.Id = Guid.NewGuid().ToString(); await _testFhirClient.UpdateAsync(resourceToCreate);
std::string classname = arg->getAttribute( "type", ""); std::string templatename = arg->getAttribute( "template", ""); templatename = sofa::defaulttype::TemplateAliases::resolveAlias(templatename); // Resolve template aliases ClassEntry::SPtr entry ; ClassEntryMap::iterator it = registry.find(classname); if (it == registry.end())
processed.totalCredits += addon.current_usage.addon_quantity; processed.usedCredits += addon.current_usage.addon_usage; processed.remainingCredits += addon.current_usage.remaining; const validDate = Date.parse(addon.current_usage.valid_to); const purchaseDate = Date.parse(addon.current_usage.purchase_date); processed.validDate = validDate < processed.validDate ? validDate : processed.validDate; processed.purchaseDate = purchaseDate > processed.purchaseDate ? purchaseDate : processed.purchaseDate; } return processed;
errs := make([]error, len(actions)) beforeGets, gets, writes, afterGets := driver.GroupActions(actions) c.runGets(ctx, beforeGets, errs, opts) ch := make(chan struct{}) go func() { defer close(ch); c.runWrites(ctx, writes, errs, opts) }() c.runGets(ctx, gets, errs, opts) <-ch c.runGets(ctx, afterGets, errs, opts) return driver.NewActionListError(errs) }
) const ( reasonDomainVerified  = "DomainVerified" challengeCleanUpError = "CleanUpError" challengePresentError = "PresentError" statusPresented       = "Presented" statusFailed          = "Failed" ) // solver solves ACME challenges by presenting the given token and key in an
def p_c_class_options(s): objstruct_name = None typeobj_name = None check_size = 'min' s.expect('[') while 1: if s.sy != 'IDENT':
_icnId = icnId; _releasedIndex = releasedIndex; _pressedIndex = pressedIndex; } const Sprite & Button::_getPressed() const
return; } let image = clip.imageBinary(); let analyticsUrl = `/clip/${encodeURIComponent(req.params.id)}/${encodeURIComponent(req.params.domain)}/${encodeURIComponent(req.params.clipId)}`; if (req.userAnalytics) { req.userAnalytics.pageview(analyticsUrl).send(); } else { let anonAnalytics = ua(config.gaId); anonAnalytics.pageview(analyticsUrl).send(); } res.header("Content-Type", image.contentType); res.send(image.data);
model_name (str): Model name. progress_queue (Queue): Progress queue. """ try: self.scanner.run(model_name, progress_queue, self.service_config) except Exception as e: # pylint: disable=broad-except LOGGER.error(e) progress_queue.put('Error occurred during the scanning process.') progress_queue.put(None)
self.disconnect() """ def __init__(self, server_address=None): super(ServerConnectionMixin, self).__init__() self.server_conn = ServerConnection(server_address) self.__check_self_connect() def __check_self_connect(self):
} func toChunk(at uint64, payload []byte) (swarm.Chunk, error) { ts := make([]byte, 8) binary.BigEndian.PutUint64(ts, at) return cac.New(append(ts, payload...)) }
if (!dev::stringCmpIgnoreCase(m_param->mutableStorageParam().type, "External")) { initSQLStorage(); } else if (!dev::stringCmpIgnoreCase(m_param->mutableStorageParam().type, "LevelDB")) {
}; } private static final Schema SUPPORTED_PRIMITIVES = new Schema( required(100, "id", Types.LongType.get()), required(101, "data", Types.StringType.get()), required(102, "b", Types.BooleanType.get()),
// SimpleFSSyncStatus - Get sync status. func (k *SimpleFS) SimpleFSSyncStatus(ctx context.Context) (keybase1.FSSyncStatus, error) { ctx = k.makeContext(ctx) jServer, err := libkbfs.GetJournalServer(k.config) if err != nil { k.log.CDebugf(ctx, "No journal server, sending empty response")
from google.cloud.forseti.common.util import logger from google.cloud.forseti.common.util import string_formats from google.cloud.forseti.notifier.notifiers import findings from google.cloud.forseti.notifier.notifiers.gcs_inv_summary import GcsInvSummary from google.cloud.forseti.notifier.notifiers.base_notification import BaseNotification from google.cloud.forseti.services.inventory.storage import DataAccess from google.cloud.forseti.services.inventory.storage import InventoryIndex
isHistoryMigrated: equal('historyMigrationStatus', HISTORY_MIGRATION_STATUS.MIGRATED), isMigratable: computed('migrationStatus', 'permissions.migrate', function () { const isMigrated = !!this.migrationStatus; const isFailed = this.isMigrationFailed; const hasPermissions = this.permissions.migrate;
else if (strCommand == NetMsgType::XPEDITEDBLK) { // ignore the expedited message unless we are at the chain tip... if (!fImporting && !fReindex && !IsInitialBlockDownload()) { if (!HandleExpeditedBlock(vRecv, pfrom)) {
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4472-SEA 1645530275 1443779666</p> <hr> <p>Varnish cache server</p> </body>
for key, value in query.items(): if key in redis.connection.URL_QUERY_ARGUMENT_PARSERS: query[key] = redis.connection.URL_QUERY_ARGUMENT_PARSERS[key]( value ) # Query parameters override other parameters connparams.update(query)
ASSERT_TRUE(account_asset); ASSERT_EQ((*account_asset)->accountId(), account); ASSERT_EQ((*account_asset)->assetId(), asset); ASSERT_EQ((*account_asset)->balance(), amount); } /**
if err != nil { return "", fmt.Errorf("parse worker service template: %w", err) } overridenTpl, err := s.taskDefOverrideFunc(convertTaskDefOverrideRules(s.manifest.TaskDefOverrides), content.Bytes()) if err != nil { return "", fmt.Errorf("apply task definition overrides: %w", err) } return string(overridenTpl), nil } // Parameters returns the list of CloudFormation parameters used by the template.
var dialect = Session.Factory.Dialect; var hydratedObjects = new List<object>[_queryInfos.Count]; using (Session.SwitchCacheMode(CacheMode.Get)) { var rowCount = 0; for (var i = 0; i < _queryInfos.Count; i++)
del othercid['spam'] assert cid != othercid assert cid == {'spam': 'blueval', 'eggs': 'redval'} assert cid != object() def test_setdefault(self): cid = CaseInsensitiveDict({'Spam': 'blueval'})
class ZKSecurityTool { private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class); private static final int SALT_LENGTH = 8; // Generates a byte array salt of length SALT_LENGTH private static byte[] generateSalt() {
len(fact['relationships']) > 0] # list of used facts uf = link.get('used', []) requirement = await self.load_module('Requirement', requirements_info) if not requirement.enforce(combo[0], uf, operation['facts']): return False return True
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4454-SEA 1645543045 2148018107</p> <hr> <p>Varnish cache server</p> </body>
def test_select_slice(self): cube = Dataset(self.cube) self.assertEqual(cube.select(longitude=(0, 1+self.epsilon)).data.data, np.array([[1,  2], [5,  6], [9, 10]], dtype=np.int32)) def test_select_set(self):
} /** * Removes all nodes with a specific path and their children in the given workspace. * * @param string $nodePath * @param string $workspaceName
private final HashMap<String/* topic */, List<QueueData>> topicQueueTable; private final HashMap<String/* brokerName */, BrokerData> brokerAddrTable; private final HashMap<String/* clusterName */, Set<String/* brokerName */>> clusterAddrTable; private final HashMap<String/* brokerAddr */, BrokerLiveInfo> brokerLiveTable; private final HashMap<String/* brokerAddr */, List<String>/* Filter Server */> filterServerTable; public RouteInfoManager() { this.topicQueueTable = new HashMap<String, List<QueueData>>(1024); this.brokerAddrTable = new HashMap<String, BrokerData>(128); this.clusterAddrTable = new HashMap<String, Set<String>>(32); this.brokerLiveTable = new HashMap<String, BrokerLiveInfo>(256); this.filterServerTable = new HashMap<String, List<String>>(256); }
os.remove(jmeter_dist.name) if self.check_if_installed(): return self.tool_path else: raise RuntimeError("Unable to run %s after installation!" % self.tool_name) class JMeterPlugins(RequiredTool): """ JMeter plugins
if source == target: if source not in G: raise nx.NodeNotFound(nx.NodeNotFound(f"Node {source} not found in graph")) return 0 weight = _weight_function(G, weight) length = _dijkstra(G, source, weight, target=target)
} public void updateHeightEstimate(final long blockNumber) { synchronized (this) { estimatedHeightKnown = true; if (blockNumber > estimatedHeight) { estimatedHeight = blockNumber; estimatedHeightListeners.forEach(e -> e.onEstimatedHeightChanged(estimatedHeight)); } } }
# # from stp_core.loop.eventually import eventually # from plenum.common.util import randomString # from plenum.test import waits as plenumWaits # from plenum.test.test_node import checkNodesConnected # from plenum.test.node_catchup.helper import checkNodeLedgersForEquality #
'ssl_cert_reqs': ssl.CERT_REQUIRED, 'ssl_ca_certs': '/path/to/ca.crt', 'ssl_certfile': '/path/to/client.crt', 'ssl_keyfile': '/path/to/client.key'}, redis_backend_use_ssl={ 'ssl_cert_reqs': ssl.CERT_REQUIRED, 'ssl_ca_certs': '/path/to/ca.crt', 'ssl_certfile': '/path/to/client.crt',
:Author: Zhiyi Wu :Year: 2017-2018 :Copyright: GNU Public License v3 :Maintainer: Zhiyi Wu <zhiyi.wu@bioch.ox.ac.uk>,  `@xiki-tempula`_ on GitHub .. _`@xiki-tempula`: https://github.com/xiki-tempula
return $this->generateOrderPdf($order_id, ConfigQuery::read('pdf_delivery_file', 'delivery')); } public function downloadVirtualProduct($order_product_id) { if (null !== $orderProduct = OrderProductQuery::create()->findPk($order_product_id)) {
if not os.path.exists(FLAGS.output_path): os.makedirs(output_path) output_path = os.path.abspath(output_path) _upload_csv(output_path, now_utc, csv_file.name) # Send summary email. if FLAGS.email_recipient is not None: resource_counts = kwargs.get('resource_counts', {}) _send_email(csv_file.name, now_utc, all_violations, resource_counts) def _upload_csv(output_path, now_utc, csv_name): """Upload CSV to Cloud Storage. Args:
LOG(NET, "more getheaders (%d) to end to peer=%s (startheight:%d)\n", pindexLast->nHeight, pfrom->GetLogName(), pfrom->nStartingHeight); pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256());  CNodeState *state = State(pfrom->GetId()); DbgAssert(state != nullptr, ); if (state) state->nSyncStartTime = GetTime(); // reset the time because more headers needed  // During the process of IBD we need to update block availability for every connected peer. To do that we // request, from each NODE_NETWORK peer, a header that matches the last blockhash found in this recent set // of headers. Once the reqeusted header is received then the block availability for this peer will get
import tech.pegasys.pantheon.tests.acceptance.dsl.transaction.eth.EthTransactions; public class ExpectBeneficiary implements Condition { private final EthTransactions eth; private final String beneficiary; public ExpectBeneficiary(final EthTransactions eth, final PantheonNode node) { this.eth = eth;
false !== strpos( $tag[0], 'data-minify=' ) || false !== strpos( $tag[0], 'data-no-minify=' ) ) { return true; }
n_tags = potentials.shape[-1] transition_params = tf.random.normal([n_tags, n_tags]) backpointers, _ = text.crf_decode_forward( inputs, initial_state, transition_params, sequence_length_less_one )
rowBuilder.set(i, Double.NaN); break; } //fallthrough default: rowBuilder.set(i, s); break;
//////////////////////////////////////////////////////////////////////////// // // Copyright 2016 Realm Inc.
private static Set<String> ownedObservables(DAG dag) { return StreamSupport.stream(Spliterators.spliteratorUnknownSize(dag.iterator(), 0), false) .map(vertex -> (String) vertex.getMetaSupplier().getTags().get(ObservableRepository.OWNED_OBSERVABLE)) .filter(Objects::nonNull) .collect(Collectors.toSet()); }
consumer = file_accessor.spec_consumer flags = compiler_flags_for_consumer(consumer) source_files = file_accessor.source_files file_refs = source_files.map { |sf| project.reference_for_path(sf) } target.add_file_references(file_refs, flags) end end end
* @param <T>      value type * @return A new Stream */ static <T> Stream<T> gen(T seed, Function<T, T> supplier) { Objects.requireNonNull(supplier, "supplier is null"); return new Stream.Cons<>(seed, () -> gen(supplier.apply(seed), supplier)); }
self.cloudsql_instance = '{}-{}'.format( 'forseti-security', self.datetimestamp) self.cloudsql_region = kwargs.get('cloudsql_region') # forseti_conf_server.yaml.in properties self.sendgrid_api_key = kwargs.get('sendgrid_api_key')
* {@link NullPointerException}s for reasons that still require further investigation, but are assumed to be due to a * bug in the JDK. Propagating such NPEs is confusing for users and are not subject to being retried on by the default * retry policy configuration, so instead we bias towards propagating these as {@link IOException}s. * <p> * TODO: Determine precise root cause of intermittent NPEs, submit JDK bug report if applicable, and consider applying * this behavior only on unpatched JVM runtime versions. */ private static int getResponseCodeSafely(HttpURLConnection connection) throws IOException { Validate.paramNotNull(connection, "connection");
raise Bolt::CLIError, "Unsupported format: '#{self[:format]}'" end self[:transports].each_value do |v| timeout_value = v[:connect_timeout] unless timeout_value.is_a?(Integer) || timeout_value.nil?
El::Matrix<TensorDataType, Device>& mat) { El::EntrywiseMap( mat, {[](TensorDataType const& a) { return El::Sqrt(a); }}); } template <typename TensorDataType, data_layout Layout, El::Device Device>
import tech.pegasys.pantheon.ethereum.core.Address; import tech.pegasys.pantheon.ethereum.core.Hash; import tech.pegasys.pantheon.tests.acceptance.dsl.transaction.JsonRequestFactories; import tech.pegasys.pantheon.tests.acceptance.dsl.transaction.PantheonWeb3j.SignersBlockResponse; import tech.pegasys.pantheon.tests.acceptance.dsl.transaction.Transaction;
return 1 for kind, name in self.read_dependency_file(source_path): if kind == "cimport": dep_path = self.find_pxd_file(name, pos) elif kind == "include": dep_path = self.search_include_directories(name, pos) else: continue
opt.setRequired(true); options.addOption(opt); opt = new Option("q", "queue", true, "set the queue, eg: 0,1"); opt.setRequired(false); options.addOption(opt);
*/ public enum AuditOperationType { STREAM   ( 100L, "Streams"), TASK     ( 200L, "Task"), APP      ( 300L, "App"), SCHEDULE ( 400L, "Schedule"); private Long id; private String name;
); uksort( $crons, 'strnatcasecmp' ); return _set_cron_array( $crons, $wp_error ); } /**
elif isinstance(data, str):  # TODO - What about unicode? self._data = array.array("u", data) elif isinstance(data, MutableSeq): self._data = data._data[:]  # Take a copy elif isinstance(data, Seq): # Make no assumptions about the Seq subclass internal storage self._data = array.array("u", str(data)) else:
func (c *container) getBaseNode() report.Node { result := report.MakeNodeWith(report.MakeContainerNodeID(c.ID()), map[string]string{ ContainerID:       c.ID(), ContainerCreated:  c.container.Created.Format(time.RFC822), ContainerCommand:  c.container.Path + " " + strings.Join(c.container.Args, " "), ImageID:           c.Image(),
* code related to the symbol table. */ typedef enum { /* parser private items */ K_IGNORE = -16,	/* Verilog/SystemVerilog keywords to be ignored */ K_DEFINE, K_IFDEF, K_BEGIN, K_END, K_END_DE,	/* End of Design Elements */ K_UNDEFINED = KEYWORD_NONE, /* the followings items are also used as indices for VerilogKinds[] and SystemVerilogKinds[] */
} protected JobGroupInfo newJobGroupInfo(String groupId, String desc) { return new JobGroupInfo(groupId + "-" + jobCounter.incrementAndGet(), desc, false); } /** * Returns all the path locations of all Manifest Lists for a given list of snapshots
public class Kafka8MessageTimestamp implements KafkaMessageTimestamp { @Override public long getTimestamp(MessageAndMetadata<byte[], byte[]> kafkaMessage) { return 0l; } @Override public long getTimestamp(MessageAndOffset messageAndOffset) { return 0l; } }
*          deselected (false) */ private void setSelected(WebElement option, boolean select) { boolean isSelected=option.isSelected(); if ((!isSelected && select) || (isSelected && !select)) { option.click(); } }
machine_id = 0 lines = [line.rstrip('\n') for line in open(filename)] for line in lines: result = line.split() if len(result) == 2: port = int(result[1]) elif len(result) == 1:
# Always record the affected head version. start_revision, end_revision = get_start_and_end_revision( testcase.regression, testcase.job_type) build_revision_mappings = revisions.get_build_to_revision_mappings() impacts.head = get_head_impact(build_revision_mappings, start_revision, end_revision)
writer_two{write_two}; writer_one.join(); reader.join(); releaser.join(); }
$notallowed = true; } if($notallowed == true) { if(!$mybb->get_input('modal')) {
void GenericConstraintProblem::freeConstraintResolutions() { for(auto*& constraintsResolution : constraintsResolutions) { delete constraintsResolution; constraintsResolution = nullptr; } }
gr.Add(func() error { return server.Run() }, func(err error) { logger.Info(). Err(err). Str("transport", "http"). Msg("Shutting down server")
help="File to write a ticket to (for TLS 1.3)") parser.add_argument("--res_master", help="Resumption master secret (for TLS 1.3)") parser.add_argument("--sni", help="Server Name Indication") parser.add_argument("--debug", action="store_const", const=5, default=0, help="Enter debug mode") parser.add_argument("server", nargs="?", default="127.0.0.1",
.map(AccountManagerFuture::getResult) .doOnEvent((bundle, throwable) -> { if (bundle.containsKey(AccountManager.KEY_ACCOUNT_NAME)) { throw new RuntimeException("Bundle doesn't contain account-name key: " + AccountManager.KEY_ACCOUNT_NAME); } }) .map(bundle -> bundle.getString(AccountManager.KEY_ACCOUNT_NAME))
func getDogStatsdMetricImpl(b *testing.B) Metrics { m, err := NewMetrics(testDogStatsdConfig()) if err != nil { b.Log(err) b.FailNow() } return m }
} const AccountResponse::AccountRolesIdType &AccountResponse::roles() const { return account_roles_; } }  // namespace proto
} // Normalize size if ($size instanceof PictureConfiguration) { return array($size, $margin); } $size = StringUtil::deserialize($size);  if (is_numeric($size)) { $size = array(0, 0, (int) $size);
from .packages.urllib3.poolmanager import PoolManager, proxy_from_url from .packages.urllib3.response import HTTPResponse from .packages.urllib3.util import Timeout as TimeoutSauce from .compat import urlparse, basestring from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers, prepend_scheme_if_needed, get_auth_from_url, urldefragauth) from .structures import CaseInsensitiveDict
return formatted_msg return msg
module Rest # Wrapper of low-level HTTP/REST client/library class Connection DEFAULT_URL = ENV['GD_SERVER'] || 'https://secure.gooddata.com' LOGIN_PATH = '/gdc/account/login' TOKEN_PATH = '/gdc/account/token' KEYS_TO_SCRUB = [:password, :verifyPassword, :authorizationToken]
if ( hero.HasArtifact( Artifact::BALLISTA ) ) catShots += Artifact( Artifact::BALLISTA ).ExtraValue(); } u32 Battle::Catapult::GetDamage() const
{ $userTable = $schema->getTable($this->getTable('user')); $this->skipIf(false === $userTable->hasColumn('expired') || false === $userTable->hasColumn('credentials_expired'), 'It seems that you already played this migration.'); $userTable->dropColumn('expired'); $userTable->dropColumn('credentials_expired'); }
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4438-SEA 1645530232 3081343992</p> <hr> <p>Varnish cache server</p> </body>
t.Helper() logger := logging.New(ioutil.Discard, 0) store := statestore.NewStateStore() s := api.New(tags.NewTags(store, logger), storer, nil, logger, nil) ts := httptest.NewServer(s) srvUrl, err := url.Parse(ts.URL) if err != nil {
self.evaluate(tf.compat.v1.global_variables_initializer()) with tf.control_dependencies([wn_output]): wn_removed_layer = wn_layer.remove() if wn_layer.is_rnn: kernel = wn_layer.layer.cell.recurrent_kernel
#include <climits> #include <iostream> /** * @brief description * @param n description
if (result.isPresent()) { Result toReturn = result.get(); LOG.info(String.format("Detected dialect: %s", toReturn.dialect)); return toReturn; }
} field.withType = withType; } if (!field.withType) { fail('withType property is missing. Hint: it must match the "name" property of a doc type.'); }
logs.log_error('Unable to determine build parameters.') return if check_symbols_cached(symbols_directory, build_params): return build_id = build_params.get('build_id')
// Ask for a number of messages that will give us the desired queue length. // Unless we don't have information about process time (at the beginning), in // which case just get one message. nMessages := 1 if s.dynamicBatchSizes && s.avgProcessTime > 0 { // Using Ceil guarantees at least one message. n := math.Ceil(desiredQueueDuration.Seconds() / s.avgProcessTime)
// CTC interacts with the OVM CTC contract type CTC struct { Address common.Address Client  *ethclient.Client } func (ctc *CTC) GetTotalElements(ctx context.Context) (*big.Int, error) { contract, err := bindings.NewCanonicalTransactionChainCaller(ctc.Address, ctc.Client) if err != nil {
'second-child-node-name' => $secondChildNodeType ])); $mockNode->method('getIdentifier')->willReturn(Algorithms::generateUUID()); $mockNode->expects(self::once()) ->method('getNodeType')
public void addHostedFeedData() throws IOException { if (feedDataHosted) throw new IllegalStateException("addHostedFeedData was called twice on the same instance"); for (int i = 0; i < NUM_FEEDS; i++) { Feed feed = new Feed(0, null, "Title " + i, "http://example.com/" + i, "Description of feed " + i, "http://example.com/pay/feed" + i, "author " + i, "en", Feed.TYPE_RSS2, "feed" + i, null, null, "http://example.com/feed/src/" + i, false); // create items List<FeedItem> items = new ArrayList<>();
*/ package tech.pegasys.pantheon.metrics; public interface Counter { void inc(); }
# def podspec_path declared_path = (params[:path] || params[:local]).to_s path_with_ext = inferred_spec_path(declared_path) podfile_dir   = File.dirname(podfile_path || '') absolute_path = File.expand_path(path_with_ext, podfile_dir) pathname      = Pathname.new(absolute_path)
config: config, type: 'api' }; return this.request('/configs', 'POST', { data }); }, parse(configs) {
'force': 'kcal/(mol*Angstrom)'} _Timestep = Timestep def __init__(self, filename, n_atoms=None, mmap=None, **kwargs): self._mmap = mmap super(NCDFReader, self).__init__(filename, **kwargs)
if (e == API_EOVERQUOTA) { assert((type == PUT && !timeleft) || (type == GET && timeleft)); // overstorage only possible for uploads, overbandwidth for downloads if (!slot) { bt.backoff(timeleft ? timeleft : NEVER);
"errors" "fmt" "reflect" "cloud.google.com/go/internal/trace" bq "google.golang.org/api/bigquery/v2" ) // NoDedupeID indicates a streaming insert row wants to opt out of best-effort
Expression expressionObject = CommandContextUtil.getCmmnEngineConfiguration(commandContext).getExpressionManager().createExpression(expression); value = expressionObject.getValue(planItemInstanceEntity); if (resultVariable != null) { if (storeResultVariableAsTransient) { planItemInstanceEntity.setTransientVariable(resultVariable, value); } else { planItemInstanceEntity.setVariable(resultVariable, value);
IndexNames []string `json:"index_names,omitempty"` Browse     *Browse  `json:"browse,omitempty"` // TODO: Content negotiation }
GUARD(s2n_stuffer_write_uint16(out, total_size)); /* Write server name extension */ if (s2n_server_can_send_server_name(conn)) { GUARD(s2n_stuffer_write_uint16(out, TLS_EXTENSION_SERVER_NAME)); GUARD(s2n_stuffer_write_uint16(out, 0)); }
private static String getCause(Exception e) { StringBuilder sb = new StringBuilder(); if (e.getMessage() != null) { sb.append(": ").append(e.getMessage()); } if (e.getCause() != null && e.getCause().getMessage() != null) { sb.append(": ").append(e.getCause().getMessage()); } return sb.toString(); }
m_network_Factory.RegisterTransport(&descriptor); } // Workaround TCP discovery issues when register switch (PParam.builtin.discoveryProtocol) {
attrs = attrs.to_a added_purchases = if attrs.any? inserted = attrs.all { |attr| GamePurchase.find_or_create_by(attr) } GamePurchase.where(id: inserted.map { |e| e['id'] }) else GamePurchase.none
defined( 'ABSPATH' ) || exit; ?> <script>!function(e,t,n){function a(){var e=t.getElementsByTagName("script")[0],n=t.createElement("script");n.type="text/javascript",n.async=!0,n.src="https://beacon-v2.helpscout.net",e.parentNode.insertBefore(n,e)}if(e.Beacon=n=function(t,n,a){e.Beacon.readyQueue.push({method:t,options:n,data:a})},n.readyQueue=[],"complete"===t.readyState)return a();e.attachEvent?e.attachEvent("onload",a):e.addEventListener("load",a,!1)}(window,document,window.Beacon||function(){}); window.Beacon('init', '<?php echo esc_js( $data['form_id'] ); ?>') window.Beacon("identify", <?php echo $data['identify']; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>); window.Beacon("session-data", <?php echo $data['session']; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>); window.Beacon("prefill", <?php echo $data['prefill']; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>); window.addEventListener("hashchange", function () { window.Beacon("suggest"); }, false);</script>
/** * Converts this collection to a {@link SortedMap}. * * @param keyComparator  A comparator that induces an order of the Map keys. * @param keyMapper   A function that maps an element to a key * @param valueMapper A function that maps an element to a value * @param merge A function that merges values that are associated with the same key
*/ #include "mega/utils.h" namespace mega { Cachable::Cachable()
template <typename TensorDataType> bool sgd<TensorDataType>::save_to_checkpoint_shared(persist& p, std::string name_prefix) { if (this->get_comm().am_trainer_master()) { write_cereal_archive(*this, p, "sgd.xml"); } char l_name[512];
} type FileConfig struct { Prometheus *PrometheusConfig `hcl:"Prometheus"` DogStatsd  []DogStatsdConfig `hcl:"DogStatsd"` Statsd     []StatsdConfig    `hcl:"Statsd"` M3         []M3Config        `hcl:"M3"` InMem      *InMem            `hcl:"InMem"` } type DogStatsdConfig struct {
resIndex := -1 for i := 0; i < v.NumField(); i++ { if f := t.Field(i); p.fieldName(f) == fieldName { if !v.Field(i).IsZero() { return t.Field(i), true } else if resIndex == -1 { resIndex = i } } }
final JsonObject respBody = new JsonObject(body); final String token = respBody.getString("token"); assertThat(token).isNotNull(); websocketService .authenticationService
FCMoveContent(temp_objects, matches); } // No operand condition was selected. Objects in matches input set do not match, so move those to non_matches input set. non_matches.reserve(matches.size() + non_matches.size()); FCMoveContent(matches, non_matches); } } bool OrderedAlternativesOf::RootCandidateInvariant() const {
} InputFile getInputFile(String location) { return inputFiles.get(location); } @Override
"one hundred and twenty-three")) def test_number_too_large(self): with self.assertRaisesWithMessage(ValueError): say(1e12) def test_number_negative(self): with self.assertRaisesWithMessage(ValueError): say(-1) # Utility functions def setUp(self):
// Expiration sets the Backup's expiration. func (b *BackupBuilder) Expiration(val time.Time) *BackupBuilder { b.object.Status.Expiration = &metav1.Time{Time: val} return b } // StartTimestamp sets the Backup's start timestamp. func (b *BackupBuilder) StartTimestamp(val time.Time) *BackupBuilder { b.object.Status.StartTimestamp = &metav1.Time{Time: val} return b }
@classmethod def get_root(cls, session, inventory_index_id): """Get the resource root from the inventory. Args: session (object): Database session.
tx = b.create_transaction(b.me, user_vk, None, 'CREATE', payload=payload) payload_uuid = tx['transaction']['data']['uuid'] block = b.create_block([tx]) b.write_block(block, durability='hard')  matches = b.get_tx_by_payload_uuid(payload_uuid) assert len(matches) == 1 assert matches[0]['id'] == tx['id']
from six.moves import range import six import itertools import os.path import warnings
"""Initialize layers of the head.""" self.cls_convs = nn.ModuleList() self.reg_convs = nn.ModuleList() # TODO: Use registry to choose ConvModule type conv = DepthwiseSeparableConvModule \ if self.use_depthwise else ConvModule
// telemetry the destination_service_name label will be set to the service entry host, // which is required to have the form <name>.<namespace>.global where name and namespace // correspond to the remote service’s name and namespace respectively. In this situation // we alter the request in two ways: // // First, we reset destSvcName to <name> in order to unify remote and local requests to the // service. By doing this the graph will show only one <service> node instead of having a
convertOps.setProgress( Progress( ConfigOptions().getJobId(), JOB_SOURCE, Progress::JobState::Running, (float)(_currentTaskNum - 1) / (float)_numTotalTasks, 1.0f / (float)_numTotalTasks));  convertOps.apply(fullMap); // get back into wgs84 in case some op changed the proj MapProjector::projectToWgs84(fullMap);
return false; } supports(feature) { if (!supportedFeatures) { supportedFeatures = getSupportedFeatures();
FormInfo formInfo = repositoryService.getFormModelByKey("form1"); SimpleFormModel formModel = (SimpleFormModel) formInfo.getFormModel(); assertThat(formModel.getFields()).hasSize(1); assertThat(formModel.getFields()) .extracting(FormField::getId, FormField::getName) .containsExactly(tuple("input1", "Input1")); FormDeployment redeployment = repositoryService.createDeployment() .addClasspathResource("org/flowable/form/engine/test/deployment/simple2.form")
} } return nil }
import org.apache.arrow.vector.ValueVector; public class ArrowVectorAccessor<DecimalT, Utf8StringT, ArrayT, ChildVectorT extends AutoCloseable> implements AutoCloseable { private final ValueVector vector; private final ChildVectorT[] childColumns;
// - Configures routes between the hosts, giving each host 10.65.x.0/24, where x is the //   index in the returned array.  When creating workloads, use IPs from the relevant block. // - Configures the Tunnel IP for each host as 10.65.x.1. func StartNNodeEtcdTopology(n int, opts TopologyOptions) (felixes []*Felix, etcd *Container, client client.Interface) { log.Infof("Starting a %d-node etcd topology.", n) success := false var err error defer func() {
fullOutputFilename); if (get_report_errors()) { STOFileAdapter_<double>::write(*modelOrientationErrors, outName + "_orientationErrors.sto"); } } else log_info("IMUInverseKinematicsTool: No output files were generated, " "set output_motion_file to generate output files."); // Results written to file, clear in case we run again ikReporter->clearTable(); }
require.NoError(t, err) require.Equal(t, ops2.Program, ops.Program) testProg(t, "#pragma unk", assemblerNoVersion, expect{1, `unsupported pragma directive: "unk"`}) } func TestAssembleConstants(t *testing.T) {
.add<std::string>("aging-query", "query for aging out obsolete data") .add<std::string>("shutdown-grace-period", "time to wait until component shutdown " "finishes cleanly before inducing a hard kill"); return std::make_unique<command>(path, "", documentation::vast, add_index_opts(std::move(ob))); }
def hausdorff_avg(P, Q): r"""Calculate the average Hausdorff distance between two paths. *P* (*Q*) is a :class:`numpy.ndarray` of :math:`N_p` (:math:`N_q`) time steps, :math:`N` atoms, and :math:`3N` coordinates (e.g.,
// Browsing navigation gets messed up if browsing a directory // that doesn't end in "/" (which it should, anyway) u := *r.URL if u.Path == "" { u.Path = "/" }
return self.request_dict.get('group') @cached_property def _context(self): request = self.request_dict # pylint: disable=unpacking-non-sequence #    payload is a property, so pylint doesn't think it's a tuple.
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4454-SEA 1645530262 2047664489</p> <hr> <p>Varnish cache server</p> </body>
"""Upload inventory summary to GCS.""" from google.cloud.forseti.common.gcp_api import file_uploader from google.cloud.forseti.common.util import date_time from google.cloud.forseti.common.util import logger from google.cloud.forseti.common.util import string_formats
func (h *errorHandler) Handle(ctx context.Context, err error) { // get the request path path, _ := ctx.Value(kithttp.ContextKeyRequestPath).(string) logger := level.Info(kitlog.With(h.logger, "path", path))
Returns ------- dict with ``str`` keys and ``tensor`` values Features of the source nodes. """ return self._src_data
cmdutils.check_overflow(new_idx, 'int') self._tabbed_browser.tabBar().moveTab(cur_idx, new_idx) @cmdutils.register(instance='command-dispatcher', scope='window') @cmdutils.argument('choice', completion=miscmodels.suggest) def suggest(self, command: str, suggestions: str, choice: str):
if (context.Request.Cookies.ContainsKey(CsrfToken.DEFAULT_CSRF_KEY)) { var cookieValue = context.Request.Cookies[CsrfToken.DEFAULT_CSRF_KEY]; var cookieToken = CsrfApplicationStartup.ObjectSerializer.Deserialize(cookieValue) as CsrfToken; if (CsrfApplicationStartup.TokenValidator.CookieTokenStillValid(cookieToken)) { context.Items[CsrfToken.DEFAULT_CSRF_KEY] = cookieValue; return; } }
"""Return a tuple of exceptions meaning 'skip this test', to re-raise. This is intended to cover most common test runners; if you would like another to be added please open an issue or pull request adding it to this function and to tests/cover/test_lazy_import.py """ # This is a set because nose may simply re-export unittest.SkipTest exceptions = set()
// Do not index or cache the page with the confirmation message if ($_SESSION['TL_COMMENT_ADDED']) { /** @var PageModel $objPage */ global $objPage;  $objPage->noSearch = 1; $objPage->cache = 0;  $objTemplate->confirm = $GLOBALS['TL_LANG']['MSC']['com_confirm']; unset($_SESSION['TL_COMMENT_ADDED']); }
lgb_train, num_boost_round=100, valid_sets=lgb_eval, early_stopping_rounds=10) # save model to file
bolt "github.com/coreos/bbolt" ) var errDryRun = errors.New("this is a dry-run")  // diskDB is the DB implementation for boltdb. type diskDB struct { db     *bolt.DB
# limitations under the License. # import os import os.path import warnings from .cfg_parser import LuigiConfigParser from .toml_parser import LuigiTomlParser
def hausdorff(P, Q): r"""Calculate the Hausdorff distance between two paths. *P* (*Q*) is a :class:`numpy.ndarray` of :math:`N_p` (:math:`N_q`) time steps, :math:`N` atoms, and :math:`3N` coordinates (e.g.,
@reply_link = reply_link(@notification) # Encrypting message = { member_id: @notification.recipient.id, type: :send_notification_email } @signed_message = verifier.generate(message) mail(to: @notification.recipient.email, subject: @notification.subject)
} if (strProjectPlanClass.Find(_T("nvidia")) != wxNOT_FOUND) { pProjectInfo->m_bProjectSupportsCUDA = true; if (!pDoc->state.host_info.coprocs.have_nvidia()) continue; }
tp.RegisterSpanProcessor(ssp) tr := tp.Tracer("BatchSpanProcessorWithOptions") generateSpan(t, option.parallel, tr, option) time.Sleep(option.waitTime)
return false; } log_->debug("status written, {}", client_id); if (last_tx_status_received) { // force stream to end because no more tx statuses will arrive. // it is thread safe because of synchronization on current_thread return false; } return true; }) .subscribe(subscription,
﻿//------------------------------------------------------------------------------ // <auto-generated> //     This code was generated by a tool. //     Changes to this file may cause incorrect behavior and will be lost if
public class RequestEntityTooLargeException : FhirException { public RequestEntityTooLargeException() { Issues.Add(new OperationOutcomeIssue( OperationOutcomeConstants.IssueSeverity.Error,
) const ( numRekeyWorkers = 64 ) type rekeyQueueEntry struct {
# WORKAROUND for https://github.com/PyCQA/pylint/issues/574 # pylint: disable=superfluous-parens if 'magenta' in (old_config or ''): # pylint: enable=superfluous-parens assert '  colors.hints.fg: magenta' in lines if insert: assert '  tabs.show: never' in lines def test_init_save_manager(self, yaml, fake_save_manager): yaml.init_save_manager(fake_save_manager)
delete(data.Brokers["ns2/broker2"].Targets, "name4") b, _ = proto.Marshal(data) atomicWriteFile(t, tmp.Name(), b) <-ch
@Override public PriorityQueue read(ObjectDataInput in) throws IOException { int size = in.readInt(); PriorityQueue res = new PriorityQueue(Math.min(1, size), in.readObject()); for (int i = 0; i < size; i++) { res.add(in.readObject()); }
flag.StringVar(&conf.MetricsPath, "metricspath", "/metrics", "path of prometheus endpoint where metrics will be available") flag.DurationVar(&conf.PollTime, "polltime", time.Second*pollTime, "time interval in seconds between each poll") flag.DurationVar(&conf.ProbeTimeout, "timeout", time.Second*probeTimeout, "probe timeout in seconds") flag.StringVar(&conf.HealthzPort, "healthzport", "9808", "TCP ports for listening healthz requests") flag.StringVar(&conf.HealthzPath, "healthzpath", "/healthz", "path of liveness endpoint where health status will be available") flag.BoolVar(&conf.EnableGRPCMetrics, "enablegrpcmetrics", false, "[DEPRECATED] enable grpc metrics") flag.StringVar(&conf.HistogramOption, "histogramoption", "0.5,2,6",
* * @return Request * * NEXT_MAJOR : Return $this->get('request_stack')->getCurrentRequest() only * */ public function getRequest()
binding.role: bigquery_acl.role, } return regular_exp.all_match(rule_regex_to_val)
def spiral(size): pass
return comp; } bool MegaApiImpl::nodeNaturalComparatorASC(Node *i, Node *j) { int r = naturalsorting_compare(i->displayname(), j->displayname()); if (r < 0 || (!r && i < j))
metrics_set, local_namespace, environ, blotter_class): """Run a backtest for the given algorithm. This is shared between the cli and :func:`zipline.run_algo`.
import $ from 'jQuery'; import globalize from 'globalize'; import taskButton from 'scripts/taskbutton';
} scanner.setRange(rangeSplit.getRange()); scannerBase = scanner; } else if (split instanceof BatchInputSplit) {
} else if (sit > min_seq_in_history) { assert(sit > changes_low_mark_); gap_builder.add(sit); } });
return( true ); } static int GFD_Format(GGadget *g, GEvent *e) { if ( e->type==et_controlevent && e->u.control.subtype == et_listselected ) { struct gfc_data *d = GDrawGetUserData(GGadgetGetWindow(g));
slow_step_size: A floating point value. The ratio for updating the slow weights. name: Optional name for the operations created when applying gradients. Defaults to "Lookahead". **kwargs: keyword arguments. Allowed to be {`clipnorm`, `clipvalue`, `lr`, `decay`}. `clipnorm` is clip gradients by norm; `clipvalue` is clip gradients by value, `decay` is
row = result.fetchone() if row: users = {} for user in row['similar_users']: # first element of array is similarity, second is global_similarity users[user] = row['similar_users'][user][0] return SimilarUsers(user_id=row['user_id'], similar_users=users) return None
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4434-SEA 1645541665 2024615590</p> <hr> <p>Varnish cache server</p> </body>
// +build android /* * Copyright (C) 2021 The "MysteriumNetwork/node" Authors. * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by
* @deprecated since 2.0.0, replaced by {@link Accumulo#newClient()} */ @Deprecated public class ClientConfiguration { private static final Logger log = LoggerFactory.getLogger(ClientConfiguration.class); public static final String USER_ACCUMULO_DIR_NAME = ".accumulo";
with ctx.new() as orderctx: orderctx.expr_exposed = False # In ORDER BY we compile ir.Set as a subquery: #    SELECT SetRel.value FROM SetRel) subq = relgen.set_as_subquery( expr.expr, as_value=True, ctx=orderctx)
functools.partial(self._on_title_changed, tab)) tab.icon_changed.connect( functools.partial(self._on_icon_changed, tab)) tab.pinned_changed.connect( functools.partial(self._on_pinned_changed, tab)) tab.load_progress.connect(
plugin.UpdateChainAndProcess(parser_mediator, registry_key) except (IOError, dfwinreg_errors.WinRegistryValueError) as exception: parser_mediator.ProduceExtractionError( 'in key: {0:s} error: {1!s}'.format(registry_key.path, exception)) def _NormalizeKeyPath(self, key_path): """Normalizes a Windows Registry key path.
g.edata[EID] = eid_tensor return g LocalSampledGraph = namedtuple('LocalSampledGraph', 'global_src global_dst global_eids') def sample_neighbors(dist_graph, nodes, fanout, edge_dir='in', prob=None, replace=False): """Sample from the neighbors of the given nodes from a distributed graph.
$widget_key = $wp_widget_factory->get_widget_key( $attributes['idBase'] ); if ( '' === $widget_key ) { return ''; }
if ($this->allLocales === null) { $this->allLocales = []; foreach ($this->domain->getAll() as $domainConfig) { $this->allLocales[$domainConfig->getLocale()] = $domainConfig->getLocale(); } }
// Add browser classes. // We have to do this here since admin bar shows on the front end. $class = 'nojq nojs'; if ( $is_IE && false !== strpos( $_SERVER['HTTP_USER_AGENT'], 'MSIE 9' ) ) { $class .= ' ie9'; } elseif ( wp_is_mobile() ) { $class .= ' mobile'; }
return this; } public ConfigBuilder select(List<String> columns) { conf.setStrings(SELECTED_COLUMNS, columns.toArray(new String[0])); return this; }  public ConfigBuilder select(String... columns) { conf.setStrings(SELECTED_COLUMNS, columns); return this; }
if err != nil { _ = p2ps.Disconnect(overlay) logger.Debugf("addressboook error persisting %s %s: %v", aa, overlay, err) logger.Errorf("persisting node %s", aa) return }
if o.err != nil { return nil, o.err } return fakeAck{}, nil } func stubTime() func() {
f"'{text_non_ascii_str}' != '{ref_text_non_ascii_literal[idx]}'" batch_size_alias_test=64 @pipeline_def(batch_size=batch_size_alias_test, device_id=0, num_threads=4) def nemo_pipe(nemo_op, path, read_text, read_sample_rate, dtype, downmix): if read_sample_rate: audio, sr = nemo_op(manifest_filepaths=path, read_sample_rate=read_sample_rate,
* @since 2.0.0 */ public interface IteratorConfiguration { String getIteratorClass(); String getName(); int getPriority(); Map<String,String> getOptions(); }
storageResult.match( [&](expected::Value<std::unique_ptr<ametsuchi::MutableStorage>> &_storage) { storage = std::move(_storage.value); }, [&](expected::Error<std::string> &error) { storage = nullptr; log_->error(error.error); } ); if (not storage) { return; } auto chain = blockLoader_->retrieveBlocks(signature.pubkey);
} candies = inventory.candies().get(pokemon.pokemon_id).quantity threshold = pokemon_config.get('candy_threshold', False) if( threshold > 0 and candies > threshold  ): self.emit_event( 'ignore_candy_above_thresold', level='info',
Project        string                    `json:"project"` // HostedZoneName is an optional field that tells cert-manager in which // Cloud DNS zone the challenge record has to be created. // If left empty cert-manager will automatically choose a zone. // +optional HostedZoneName string `json:"hostedZoneName,omitempty"` }
label = 'order' name = 'oscar.apps.order' verbose_name = _('Order')
{ $token = Yii::app()->securityManager->generateRandomString($iTokenLength); if ($token === false) { throw new CHttpException(500, gT('Failed to generate random string for token. Please check your configuration and ensure that the openssl or mcrypt extension is enabled.')); } $token = str_replace(array('~', '_'), array('a', 'z'), $token); $event = new PluginEvent('afterGenerateToken');
$parameters['referer'] = base64_encode($request->getRequestUri()); } throw new RedirectResponseException(\System::getContainer()->get('router')->generate('contao_backend_login', $parameters, UrlGeneratorInterface::ABSOLUTE_URL)); } /**
self.client.timeout = dehumanize_time(self.settings.get("timeout", self.client.timeout)) self.send_interval = dehumanize_time(self.settings.get("send-interval", self.send_interval)) self.send_monitoring = self.settings.get("send-monitoring", self.send_monitoring) self.monitoring_buffer_limit = self.settings.get("monitoring-buffer-limit", self.monitoring_buffer_limit) self.browser_open = self.settings.get("browser-open", self.browser_open) token = self.settings.get("token", "") if not token:
var referencesToInclude = matches.SelectMany(m => m.ReferencesToInclude).Distinct().ToList(); // partition the references to avoid creating an excessively large query foreach (IEnumerable<ResourceTypeAndId> batchOfReferencesToInclude in referencesToInclude.TakeBatch(100)) { // construct the expression typeAndId = <Include1Type, Include1Id> OR  typeAndId = <Include2Type, Include2Id> OR ... SearchParameterExpression expression = Expression.SearchParameter( _typeIdCompositeSearchParameter, Expression.Or(batchOfReferencesToInclude.Select(r => Expression.And( Expression.Equals(FieldName.TokenCode, 0, r.ResourceTypeName), Expression.Equals(FieldName.TokenCode, 1, r.ResourceId))).ToList()));
const response = await this.localTimeDifferenceRequest.execute().promise; runInAction('update time difference', () => (this.localTimeDifference = response)); } catch (error) { runInAction('update time difference', () => (this.localTimeDifference = 0)); } } }
obj_type = TRACER_TO_REAL_TYPE_MAP[type(obj)] real_type = TRACER_TO_REAL_TYPE_MAP[tracer_type] raise errors.InvalidReferenceError( f'{str(refname)!r} exists, but is ' f'{english.add_a(obj_type.get_schema_class_displayname())}, ' f'not {english.add_a(real_type.get_schema_class_displayname())}', context=sourcectx, )
DefaultLdflags     string     `help:"Linker flags passed to all C++ rules.\nBy default this is empty." var:"DEFAULT_LDFLAGS"` PkgConfigPath      string     `help:"Custom PKG_CONFIG_PATH for pkg-config.\nBy default this is empty." var:"PKG_CONFIG_PATH"` Coverage           bool       `help:"If true (the default), coverage will be available for C and C++ build rules.\nThis is still a little experimental but should work for GCC. Right now it does not work for Clang (it likely will in Clang 4.0 which will likely support --fprofile-dir) and so this can be useful to disable it.\nIt's also useful in some cases for CI systems etc if you'd prefer to avoid the overhead, since the tests have to be compiled with extra instrumentation and without optimisation." var:"CPP_COVERAGE"` TestMain           *BuildLabel `help:"The build target to use for the default main for C++ test rules." example:"///pleasings//cc:unittest_main" var:"CC_TEST_MAIN"` ClangModules       bool       `help:"Uses Clang-style arguments for compiling cc_module rules. If disabled gcc-style arguments will be used instead. Experimental, expected to be removed at some point once module compilation methods are more consistent." var:"CC_MODULES_CLANG"` DsymTool           string     `help:"Set this to dsymutil or equivalent on macOS to use this tool to generate xcode symbol information for debug builds." var:"DSYM_TOOL"` } `help:"Please has built-in support for compiling C and C++ code. We don't support every possible nuance of compilation for these languages, but aim to provide something fairly straightforward.\nTypically there is little problem compiling & linking against system libraries although Please has no insight into those libraries and when they change, so cannot rebuild targets appropriately.\n\nThe C and C++ rules are very similar and simply take a different set of tools and flags to facilitate side-by-side usage."`
it('config set should work', function (done) { suite.execute('webapp config set %s %s --phpversion %s --json', groupName, sitename, updatedPHPValue, function (result) { var output = JSON.parse(result.text); (output.phpVersion).should.equal(updatedPHPValue); result.exitStatus.should.equal(0); done(); });
// snippet-sourcetype:[snippet] // snippet-sourcedate:[2019-01-10] // snippet-sourceauthor:[AWS] // snippet-start:[transcribe.java-streaming-client-behavior-imp] /** * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
logCtx.Info("Finding TC program ID") key := ap.Iface + "_" + string(ap.Hook) if optsMap != nil { val, ok := GetTCOpts(key) if ok { progId, err := libbpf.GetProgID(ap.Iface, string(ap.Hook), val) if err != nil { return "", errors.New("failed to find TC program")
'FUCHSIA_DIR', os.path.join(self.build_dir, self.FUCHSIA_DIR_REL_PATH)) environment.set_value('FUCHSIA_RESOURCES_DIR', self.build_dir) assert environment.get_value('UNPACK_ALL_FUZZ_TARGETS_AND_FILES'), \ 'Fuchsia does not support partial unpacks' result = super(FuchsiaBuild, self).setup() if not result: return result
﻿using System.Collections.ObjectModel; using System.Linq; using System.Linq.Expressions; using System.Reflection;
cout << cmd << endl; if (!env.empty()) { #ifdef __HIP_PLATFORM_HCC__ setenv("HIP_VISIBLE_DEVICES", env.c_str(), 1); #else setenv("CUDA_VISIBLE_DEVICES", env.c_str(), 1); #endif cout << "set env HIP_VISIBLE_DEVICES = " << env.c_str() << endl; // verify if the environment variable is set
// https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-rpc.md import ( "context" "go.opentelemetry.io/otel/plugin/grpctrace"
try { log.debug("Basal profile " + profile + ": " + String.format("%02d", index) + "h: " + pump.pumpProfiles[profile][index]); } catch (Exception e){ log.error("Unhandled exception" , e); } } }
return nil, err } err = a.AuthBasicStore.CreateTx(ctx, tx, newUser.ID, input.Username, input.Password) if err != nil { return nil, err }
settings, _ = crypt.Argon2idSettings(memory, iterations, parallelism, keyLength, salt) } else if algorithm == HashingAlgorithmSHA512 { settings = fmt.Sprintf("$6$rounds=%d$%s", iterations, salt) } else { panic("invalid password hashing algorithm provided") } return settings }
# Internal Cell @Normalize def setups(self, to:Tabular): store_attr(but='to', means=dict(getattr(to, 'train', to).conts.mean()), stds=dict(getattr(to, 'train', to).conts.std(ddof=0)+1e-7)) return self(to) @Normalize
for k in range(K)] B = [experiment('xentropy', label_type='binary', data=DATA)['time'] for k in range(K)] print(f"Best `binary` time: {min(A)}") print(f"Best `xentropy` time: {min(B)}")
cmd("spt"); arg("p", deviceType); arg("t", token);  tag = client->reqtag; }
end # Wire up all pod target dependencies to aggregate target. aggregate_target.pod_targets.each do |pod_target| if pod_target_installation_result = pod_target_installation_results[pod_target.name] pod_target_native_target = pod_target_installation_result.native_target aggregate_native_target.add_dependency(pod_target_native_target) configure_app_extension_api_only_to_native_target(pod_target_native_target) if is_app_extension else # Hit the cache is_local = sandbox.local?(pod_target.pod_name) cached_dependency = metadata_cache.target_label_by_metadata[pod_target.label] project.add_cached_pod_subproject(cached_dependency, is_local) Project.add_cached_dependency(aggregate_native_target, cached_dependency)
* * @param bool $do_preload_links Whether to enable preload links. Default is true. */ if ( ! (bool) apply_filters( 'rocket_do_preload_links', true ) ) { return; }
mgr *lifecycle.Manager db     *sql.DB l      net.Listener events *sqlutil.Listener cooldown *cooldown
} // getBlocks uses ProtocolGetBlocks to return up to n blocks, traversing the // skiplist forward from id. It contacts a random subgroup of some of the nodes // in the roster, in order to find an answer, even in the case that a few // nodes in the network are down. func (s *Service) getBlocks(roster *onet.Roster, id SkipBlockID, n int) ([]*SkipBlock, error) { subCount := (len(roster.List)-1)/3 + 1 t := roster.RandomSubset(s.ServerIdentity(), subCount).GenerateStar() pi, err := s.CreateProtocol(ProtocolGetBlocks, t) if err != nil { return nil, err
} @Override protected Long sequenceNumberOverride() { return replaceSequenceNumber; }
return glnx_throw (error, "Checksum mismatch for package %s", nevra); } return get_header_variant (pkgcache, cache_branch, out_header, cancellable, error); } static gboolean
restrictedSigner := darc.NewSignerEd25519(nil, nil) unrestrictedSigner := darc.NewSignerEd25519(nil, nil) invokeEvolve := darc.Action("invoke:" + ContractSecureDarcID + "." + cmdDarcEvolve) invokeEvolveUnrestricted := darc.Action("invoke:" + ContractSecureDarcID + "." + cmdDarcEvolveUnrestriction) log.Info("spawn a new secure darc with spawn:insecure_darc - fail") secDarc := gDarc.Copy()
require 'travis/build/script/csharp' require 'travis/build/script/d' require 'travis/build/script/dart' require 'travis/build/script/erlang' require 'travis/build/script/elixir' require 'travis/build/script/go'
PropagationData peers; std::transform( ids.begin(), ids.end(), std::back_inserter(peers), [](auto &s) { return makePeer(s, shared_model::interface::types::PubkeyType("")); }); return peers; }
* @return object                 class instance object */ public function load_data_object( $name = '', $data = 0, $optional_data = null ) { // Use constructors directly. _deprecated_function( __METHOD__, '3.3.0', 'new Sensei_Grading_{$name}' ); // Load Analysis data $object_name = 'Sensei_Grading_' . $name;
return (RET) attach( flatMapUsingServiceAsyncBatchedTransform( transform, operationName, serviceFactory, MAX_CONCURRENT_ASYNC_BATCHES, maxBatchSize, flattenedFn), fnAdapter); }
wl_container_of(listener, roots_xdg_surface, commit); struct roots_view *view = roots_xdg_surface->view; if (!roots_xdg_surface->initialized) { bool centered = view_center(view); if (centered) { roots_xdg_surface->initialized = true; } } }
parent::__construct($controller, $id); Yii::app()->loadHelper('export'); Yii::import('application.controllers.admin.printablesurvey',1); } public function survey()
maximum_matching = hopcroft_karp_matching def minimum_weight_full_matching(G, top_nodes=None, weight="weight"): r"""Returns a minimum weight full matching of the bipartite graph `G`. Let :math:`G = ((U, V), E)` be a weighted bipartite graph with real weights
return fmt.Errorf("start height must be less than or equal to end height") } // check if range exceeds maximum but only if end is not equal to special value which is not known yet if g.EndHeight-g.StartHeight >= MaxAllowedHeights && g.EndHeight != FinalHeight && g.EndHeight != SealedHeight { return fmt.Errorf("height range %d exceeds maximum allowed of %d", g.EndHeight-g.StartHeight, MaxAllowedHeights) }
# explicit relative cimport # error of going beyond top-level is handled in cimport node relative_to = self while relative_level > 0 and relative_to and not self.is_package: relative_to = relative_to.parent_module relative_level -= 1 elif relative_level != 0:
self.nodeMsgRouter.routes[Request] = self.processNodeRequest self.nodeAuthNr = self.defaultNodeAuthNr() def getPoolConfig(self): return PoolConfig(self.configLedger)
return entry.getValue(); } // We did not find any non-virtual interfaces, so choose the first virtual one if it exists if (!virtualInterfaces.isEmpty()) { for (Entry<String, InterfaceAssociation> entry : virtualInterfaces.entrySet()) { return entry.getValue();
public const string PeriodDescRegex = @"(?<desc>pm|am|p\.m\.|a\.m\.|p|a)"; public const string PeriodPmRegex = @"(?<pm>afternoon|evening|in the afternoon|in the evening|in the night)s?"; public const string PeriodAmRegex = @"(?<am>morning|in the morning)s?"; public static readonly string PureNumFromTo = $@"(from\s+)?({HourRegex}|{PeriodHourNumRegex})(\s*(?<leftDesc>{PeriodDescRegex}))?\s*{TillRegex}\s*({HourRegex}|{PeriodHourNumRegex})\s*(?<rightDesc>{PmRegex}|{AmRegex}|{PeriodDescRegex})?"; public static readonly string PureNumBetweenAnd = $@"(between\s+)({HourRegex}|{PeriodHourNumRegex})(\s*(?<leftDesc>{PeriodDescRegex}))?\s*and\s*({HourRegex}|{PeriodHourNumRegex})\s*(?<rightDesc>{PmRegex}|{AmRegex}|{PeriodDescRegex})?"; public const string PrepositionRegex = @"(?<prep>^(at|on|of)(\s+the)?$)"; public const string NightRegex = @"\b(?<night>daytime|morning|afternoon|(late\s+)?night|evening)s?\b"; public static readonly string SpecificNightRegex = $@"\b(((this|next|last)\s+{NightRegex})\b|\btonight)s?\b";
} #endif double GetAngle( const Point & start, const Point & target ) { const int dx = target.x - start.x; const int dy = target.y - start.y;
movePointsLeft = _remainingMovePoints - consumedMovePoints; } else { movePointsLeft = _maxMovePoints - ( ( consumedMovePoints - _remainingMovePoints ) % _maxMovePoints ); } lastMove = movePointsLeft >= srcTilePenalty && movePointsLeft <= dstTilePenalty;
if self.selection_expr is None: return data if not isinstance(data, Dataset): data = Dataset(data) return data[self.selection_expr.apply(Dataset(data))]
from scapy.arch.consts import LOOPBACK_NAME from scapy.config import conf,ConfClass from scapy.base_classes import Gen, SetGen from scapy import plist as plist from scapy.utils import PcapReader from scapy.data import MTU, ETH_P_ARP def sndrcv(pks, pkt, timeout = 2, inter = 0, verbose=None, chainCC=0, retry=0, multi=0): if not isinstance(pkt, Gen):
module.exports = { isLocalPath: function (templatePath) { return /^[./]|(^[a-zA-Z]:)/.test(templatePath) }, getTemplatePath: function (templatePath) {
*/ public function buildRelations() { $this->addRelation('Export', '\\Thelia\\Model\\Export', RelationMap::ONE_TO_MANY, array('id' => 'export_category_id', ), 'RESTRICT', 'CASCADE', 'Exports'); $this->addRelation('ExportCategoryI18n', '\\Thelia\\Model\\ExportCategoryI18n', RelationMap::ONE_TO_MANY, array('id' => 'id', ), 'CASCADE', null, 'ExportCategoryI18ns'); } // buildRelations()
.title(R.string.title_clear_history_dialog) .content(R.string.text_clear_history_dialog) .onPositive((dialog, which) -> { mHistoryProductDao.deleteAll();; productItems.clear(); recyclerHistoryScanView.getAdapter().notifyDataSetChanged(); })
@partner.invited! end private  def partner_attributes(partner) partner.attributes.merge({ organization_email: partner.organization.email }).with_indifferent_access end
* v5. */ void switchToV5Framing() { assert factory.protocolVersion.compareTo(ProtocolVersion.V5) >= 0; // We want to do this on the event loop, to make sure it doesn't race with incoming requests assert channel.eventLoop().inEventLoop();
from . import carafe_cuda, carafe_naive_cuda class CARAFENaiveFunction(Function): @staticmethod def forward(ctx, features, masks, kernel_size, group_size, scale_factor):
return "KeybaseDaemonRPC" } func (k *KeybaseDaemonRPC) registerProtocol(server *rpc.Server, p rpc.Protocol) error { k.log.Debug("registering protocol %q", p.Name) err := server.Register(p) switch err.(type) { case nil, rpc.AlreadyRegisteredError: return nil
_logger.LogWarning(ex, "Failed to delete the secret."); } } catch (Exception ex) { // The job has encountered an error it cannot recover from.
parent (Resource): The parent Resource. lifecycle_state (LifecycleState): The lifecycle state of the bucket. retentions (list): A list of RetentionInfo """ super(Bucket, self).__init__( resource_id=bucket_id,
"sortable" => true, "switchable" => true, "title" => $field->name, "formatter"=> 'customFieldsFormatter', "escape" => true, "class" => ($field->field_encrypted=='1') ? 'css-padlock' : '', "visible" => true, ]; }
# TODO Consider not installing the db drivers, or putting them in extras. 'rethinkdb~=2.3',  # i.e. a version between 2.3 and 3.0 'pymongo~=3.4', 'pysha3==1.0.0', 'cryptoconditions>=0.5.0', 'statsd>=3.2.1', 'python-rapidjson>=0.0.8',
# extensions on incarnation change, we need to maintain its state. # Setting the status as Initialize here. This would be overridden as soon as the first GoalState is processed # (once self._extension_processing_allowed() is True). self.__gs_aggregate_status = GoalStateAggregateStatus(status=GoalStateStatus.Initialize, seq_no="-1", code=GoalStateAggregateStatusCodes.Success, message="Initializing new GoalState")
throw new InvalidOperationException("Current does not exist"); } ReadOnlySpan<byte> buffer = new ReadOnlySpan<byte>(_buffer, 0, _index).ToArray(); bool succeeded = Utf8Helper.TryDecodeCodePointBackwards(buffer, out uint ret, out _currentLenCache); if (!succeeded || _currentLenCache == 0) {
case string: idArg = sqlutil.UUIDArray{t} case int: idArg = sqlutil.IntArray{t} case []int: idArg = make(sqlutil.IntArray, len(t)) default: return errors.Errorf("invalid id type %T", t) }
// This handler is registered for tests in which the only authorized user is // "okuser" upstreamHandler := func(w http.ResponseWriter, r *http.Request) (int, error) { remoteUser, _ := r.Context().Value(httpserver.CtxKey("remote_user")).(string) if remoteUser != "okuser" { t.Errorf("Test %d: expecting remote user 'okuser', got '%s'", i, remoteUser) }
for _, r := range results { id, err := r.Get(ctx) if err != nil { // Prints the fatal error that caused the publisher to terminate. fmt.Printf("Publisher client stopped due to error: %v\n", publisher.Error())  // TODO: Handle error. // NOTE: The publisher will terminate upon first error. Create a new // publisher to republish failed messages. } fmt.Printf("Published a message with a message ID: %s\n", id) }
if (StringUtils.isNotBlank(sparkUploadFiles)) { sb.append("--files ").append(sparkUploadFiles).append(" "); } if (config.isKerberosEnabled()) { sb.append("--principal ").append(config.getKerberosPrincipal()).append(" "); sb.append("--keytab ").append(config.getKerberosKeytabPath()).append(" "); } sb.append("--name job_step_%s "); sb.append("--jars %s %s %s"); String cmd = String.format(Locale.ROOT, sb.toString(), hadoopConf, sparkSubmitCmd, getId(), jars, kylinJobJar,
'page' . $this->num, 'post_type', 'taxonomy', 'action' . $this->num, ), $this->exclusion() );
foreach ( $files as $file ) { rocket_rrmdir( $file, get_rocket_i18n_to_preserve( $lang ) ); } } catch ( InvalidArgumentException $e ) { // No logging yet. return; }
// Return true when all valid troops have the same ID, or when there are no troops bool Troops::AllTroopsAreTheSame( void ) const { int firstMonsterId = Monster::UNKNOWN; for ( const Troop * troop : *this ) { if ( troop->isValid() ) { if ( firstMonsterId == Monster::UNKNOWN ) { firstMonsterId = troop->GetID(); } else if ( troop->GetID() != firstMonsterId ) { return false; } }
#if defined(_WIN32) bool read, write; if (info.checkEvent(read, write)) // if checkEvent returns true, both `read` and `write` have been set. { curl_multi_socket_action(curlm[d], info.fd, (read ? CURL_CSELECT_IN : 0)
} memset(&listener->ssl, 0, sizeof(listener->ssl)); memset(&listener->quic, 0, sizeof(listener->quic)); listener->timestamping = timestamping; listener->quic.qpack = (h2o_http3_qpack_context_t){.encoder_table_capacity = 4096 /* our default */}; listener->proxy_protocol = proxy_protocol; listener->tcp_congestion_controller = h2o_iovec_init(NULL, 0);
return true; } private boolean hasDuplicateAuthors( final Collection<SignedData<RoundChangePayload>> roundChangeMsgs) { final long distinctAuthorCount = roundChangeMsgs.stream().map(SignedData::getAuthor).distinct().count();
return reflectiveSource(handler, handler.getDef().methods, handlerClass); } @Deprecated // to be removed before 2.0 private static RelMetadataProvider reflectiveSource( final MetadataHandler target, final ImmutableList<Method> methods, final Class<? extends MetadataHandler<?>> handlerClass) {
* * @param int     $post_id The post ID. * @param WP_Post $post    WP_Post object. * @return array           Array with all URLs which need to be purged. */ function rocket_get_purge_urls( $post_id, $post ) { $purge_urls = [];
using System; using MvvmCross.Platform.Logging; namespace Playground.Forms.Uwp { public class EmptyVoidLog : IMvxLog { public bool Log(MvxLogLevel logLevel, Func<string> messageFunc, Exception exception = null, params object[] formatParameters)
} }); builder.show(); } private void handleDisconnectDevice(final long deviceId) {
import ( "encoding/json" "fmt" "github.com/golang/protobuf/proto" "github.com/hashicorp/hcl/v2"
row['run_count'] } bigquery_data.append(big_query.Insert(row=bigquery_row, insert_id=None))  if bigquery_data: client = big_query.Client( dataset_id='main', table_id='fuzz_strategy_experiments') client.insert(bigquery_data) else: logs.log("No fuzz strategy distribution data was found to upload to " "BigQuery.") def _query_and_upload_strategy_probabilities():
Status ClusterAdminClient::MasterLeaderStepDown( const string& leader_uuid, const string& new_leader_uuid) { auto master_proxy = std::make_unique<ConsensusServiceProxy>(proxy_cache_.get(), leader_addr_); return LeaderStepDown(leader_uuid, yb::master::kSysCatalogTabletId, new_leader_uuid, &master_proxy); } CHECKED_STATUS ClusterAdminClient::LeaderStepDownWithNewLeader(
* @since 5.5 */ public void setCookieMaxAge(int cookieMaxAge) { Assert.isTrue(cookieMaxAge != 0, "cookieMaxAge cannot be zero"); this.cookieMaxAge = cookieMaxAge; }
logger = logging.getLogger(__name__) monitor = Monitor() class Block(object):
anyBoolean(), fileArgumentCaptor.capture()); assertThat(fileArgumentCaptor.getValue()).isEqualTo(file); assertThat(commandOutput.toString()).isEmpty(); assertThat(commandErrorOutput.toString()).isEmpty();
return defaultPenalty; } int AIWorldPathfinder::getFogDiscoveryTile( const Heroes & hero ) { // paths have to be pre-calculated to find a spot where we're able to move reEvaluateIfNeeded( hero ); const int start = hero.GetIndex(); const int scouteValue = hero.GetScoute();
} // Returns a collection that returns 5, 10, or all posts from the Redshift table. public String getPosts(String lang, int num) { try {
j.jServer.deferLog.LazyTrace(ctx, "jMDOps: GetRange %s %d-%d done (err=%v)", id, start, stop, err) }() return j.getRange(ctx, id, NullBranchID, Merged, start, stop, lockBeforeGet, j.MDOps.GetRange) }
GetBlocksReply chan []*SkipBlock DB             *SkipBlockDB replies        int } // NewProtocolGetBlocks prepares for a protocol that fetches blocks.
""" return self._screen @expect_types(term=Term, name=str) def add(self, term, name, overwrite=False): """ Add a column.
def validateFloat(value): return isinstance(value, float) or validateInteger(value) def validateInteger(value):
Debug.Log("NetworkManager: added default Transport because there was none yet."); } #if UNITY_EDITOR UnityEditor.EditorUtility.SetDirty(gameObject); #endif }
private String outerName; private Map<String, String> packages = new HashMap<>(); private AnnotationVisitor annotationVisitor = new PMDAnnotationVisitor(this);
flashes: service(), features: service(), auth: service(), classNames: ['repo-main-tools'], classNameBindings: ['labelless', 'mobilelabels'],
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4473-SEA 1645540644 2119821933</p> <hr> <p>Varnish cache server</p> </body>
if (process.env.VUE_CLI_TEST) { return true } if (_hasPnpm4orLater != null) { return _hasPnpm4orLater } try {
Field[] fields = proxyIn.getDeclaredFields(); for (Field field : fields) { int modifiers = field.getModifiers(); if (Modifier.isFinal(modifiers) || Modifier.isStatic(modifiers)) { continue; } Object value = decorator.decorate(page.getClass().getClassLoader(), field); if (value != null) {
*/ protected function writeToErrorLog(): void { $renderer = $this->logErrorRenderer; $error = $renderer($this->exception, $this->logErrorDetails); $error .= "\nView in rendered output by enabling the \"displayErrorDetails\" setting.\n"; $this->logError($error); }
try: proc = next(w for w in self._pool if w.pid == pid) except StopIteration: logger.warning("process with pid=%s already exited :( - handling this elsewhere ...", pid) return assert proc.inqW_fd not in self._fileno_to_inq assert proc.inqW_fd not in self._all_inqueues
Resources:     transformResources(request.Resources), } log.G(m.ctx).Info("handling Start request", zap.Any("req", request)) var publicKey ssh.PublicKey if len(request.PublicKeyData) != 0 { var err error k, _, _, _, err := ssh.ParseAuthorizedKey([]byte(request.PublicKeyData))
events.trigger(instance, "playbackstop", [state]); var state = instance.lastPlayerData.PlayState || {}; var volume = state.VolumeLevel || 0.5; var mute = state.IsMuted || false; // Reset this so the next query doesn't make it appear like content is playing. instance.lastPlayerData = {};
Object.defineProperty(proto, key, { configurable: false, get() { return this['UNSAFE_' + key]; }, // This `set` is only used if a user sets a lifecycle like cWU // after setting a lifecycle like UNSAFE_cWU. I doubt anyone // actually does this in practice so not testing it /* istanbul ignore next */
def _imptcs_to_numpy(X, impcts_dict): cols = ['Column_' + str(i) for i in range(X.shape[1])] imptcs = [impcts_dict.get(col, 0.) for col in cols] return np.array(imptcs) X, y = load_breast_cancer(True)
if(count($bcc_recipients) > 0) { $bcc_recipients = implode(', ', $bcc_recipients); $bcc_form_val = implode(',', $bcc_form_val); eval("\$bcc = \"".$templates->get("private_read_bcc")."\";"); }
SendMessageContext sendMessageContext, ChannelHandlerContext ctx, int queueIdInt) { putMessageResult.thenAcceptAsync(result -> { RemotingCommand remotingCommand = handlePutMessageResult(result, response, request, msgInner, responseHeader, sendMessageContext, ctx, queueIdInt); if (remotingCommand != null) { doResponse(ctx, request, remotingCommand); } }, this.brokerController.getSendMessageExecutor()); return null; } private boolean handleRetryAndDLQ(SendMessageRequestHeader requestHeader, RemotingCommand response,
self.fail('KeyError should be caught') def test_get_coord_axes_bad_dims(self): """Test that ValueError is raised when numpy array with incorrect dimensions is fed to get_coord_axes().""" with self.assertRaises(ValueError): PSA.get_coord_axes(np.zeros((5,5,5,5)))
// table, since we must write a value for each row. If the column is not nullable, a default value must be provided. // // Returns an error if the column added conflicts with the existing schema in tag or name. func AddColumnToTable(ctx context.Context, root *doltdb.RootValue, tbl *doltdb.Table, tblName string, tag uint64, newColName string, typeInfo typeinfo.TypeInfo, nullable Nullable, defaultVal types.Value, order *ColumnOrder) (*doltdb.Table, error) { sch, err := tbl.GetSchema(ctx) if err != nil { return nil, err } if err := validateNewColumn(ctx, root, tbl, tblName, tag, newColName, typeInfo, nullable, defaultVal); err != nil { return nil, err }  newSchema, err := addColumnToSchema(sch, tag, newColName, typeInfo, nullable, order) if err != nil { return nil, err
// now that we know the container instance ARN, we can build out the doctor // and pass it on to ACS and TACS doctor, doctorCreateErr := agent.newDoctorWithHealthchecks(agent.cfg.Cluster, agent.containerInstanceARN) if doctorCreateErr != nil { seelog.Warnf("Error starting doctor, healthchecks won't be running: %v", err) } else { seelog.Debug("Doctor healthchecks set up properly.") } // Begin listening to the docker daemon and saving changes
* * @ORM\Entity(repositoryClass="Kunstmaan\MediaBundle\Repository\MediaRepository") * @ORM\Table(name="kuma_media", indexes={ *      @ORM\Index(name="idx_media_name", columns={"name"}), *      @ORM\Index(name="idx_media_deleted", columns={"deleted"}) * }) * @ORM\HasLifecycleCallbacks */
""" h_rel = self.rel_emb(rels) proj_rel = self.rel_project(rels).reshape(-1, self.nfeats, self.rfeats) h_head = (h_head.unsqueeze(1) @ proj_rel).squeeze(1) h_tail = (h_tail.unsqueeze(1) @ proj_rel).squeeze(1) return - torch.norm(h_head + h_rel - h_tail, p=self.p, dim=-1)
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4457-SEA 1645537635 1169762597</p> <hr> <p>Varnish cache server</p> </body>
{ // The original CDRMessage buffer (msg) now points to the proprietary temporary buffer crypto_msg_. // The auxiliary buffer now points to the propietary temporary buffer crypto_submsg_. // This way each decoded sub-message will be processed using the crypto_submsg_ buffer. msg = auxiliary_buffer; auxiliary_buffer = &crypto_submsg_; }
while (next && next->playback_short) next = playlist_entry_get_rel(next, -1); // Always allow jumping to first file if (!next && mpctx->opts->loop_times == 1) { next = playlist_get_first(mpctx->playlist); while (next && next->playback_short) next = playlist_entry_get_rel(next, -1); } } if (!next && mpctx->opts->loop_times != 1) {
def check_import(self, lib_path): import tensorflow as tf assert can_import_dali()  # DALI symbols need to be loaded print("Importing the TF library to check for errors") try: tf.load_op_library(lib_path)
force_search = False if not utils.supports_selection(): sel = False try: text = utils.get_clipboard(selection=sel) except utils.ClipboardEmptyError as e: raise cmdexc.CommandError(e) text_urls = [u for u in text.split('\n') if u.strip()] if (len(text_urls) > 1 and not urlutils.is_url(text_urls[0]) and urlutils.get_path_if_valid(
import org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration; import org.springframework.boot.autoconfigure.web.HttpMessageConverters; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.cloud.dataflow.artifact.registry.ArtifactRegistry; import org.springframework.cloud.dataflow.artifact.registry.RedisArtifactRegistry; import org.springframework.cloud.dataflow.completion.CompletionConfiguration; import org.springframework.cloud.dataflow.completion.RecoveryStrategy; import org.springframework.cloud.dataflow.completion.StreamCompletionProvider; import org.springframework.cloud.dataflow.server.completion.TapOnDestinationRecoveryStrategy; import org.springframework.cloud.dataflow.server.controller.StreamDefinitionController; import org.springframework.cloud.dataflow.server.repository.InMemoryStreamDefinitionRepository;
/** * Checks if the given URL object belongs to the home route `/` * or has a `.html` extension. * * @param {URL} url *
TelemetryEventParam(CommonTelemetryEventSchema.TaskName, threading.current_thread().getName()), TelemetryEventParam(CommonTelemetryEventSchema.KeywordName, '')] if event.eventId == TELEMETRY_EVENT_EVENT_ID and event.providerId == TELEMETRY_EVENT_PROVIDER_ID: # Currently only the GuestAgentExtensionEvents has these columns, the other tables dont have them so skipping # this data in those tables. common_params.extend([TelemetryEventParam(GuestAgentExtensionEventsSchema.ExtensionType, event.file_type), TelemetryEventParam(GuestAgentExtensionEventsSchema.IsInternal, False)])
} $renderer = $this->determineRenderer(); $body = call_user_func($renderer, $this->exception, $this->displayErrorDetails); $response->getBody()->write($body); return $response; }
self.events.emit('code-generator-ready'); }); }; const cargo = async.cargo((_tasks, callback) => { generateCode(); self.events.once('outputDone', callback); }); const addToCargo = function () { cargo.push({}); }; this.events.on('contractsDeployed', addToCargo);
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4473-SEA 1645538750 2103418130</p> <hr> <p>Varnish cache server</p> </body>
*     } * }); * * @param {string} subscriptionName - an optional name for the subscription. * @returns {Realm.Sync.Subscription} - the Realm.Sync.Subscription instance. * @throws {Error} if the partial sync is not enabled in the configuration or the query is not supported by Realm Object Server. * @since 2.3.0
Integer.toString(mvStore.getFillRate())); add(rows, "info.CHUNKS_FILL_RATE", Integer.toString(mvStore.getChunksFillRate())); try { add(rows, "info.FILE_SIZE", Long.toString(fs.getFile().size())); } catch (IOException ignore) {/**/} add(rows, "info.CHUNK_COUNT", Long.toString(mvStore.getChunkCount())); add(rows, "info.PAGE_COUNT",
self.g.set_n_repr({'h' : features}) for layer in self.layers: # apply dropout self.g.update_all(gcn_msg, gcn_reduce, layer) return self.g.pop_n_repr('h') def main(args): # load and preprocess dataset # Todo: adjacency normalization data = load_data(args) features = torch.FloatTensor(data.features)
KernelEvents.Add(keyword); } private bool LttngInstalled() { return File.Exists("//usr/bin/lttng"); }  public enum KernelKeyword { Empty,
printExitLogs () { if (this.exitLogs.length) { this.exitLogs.forEach(({ id, msg, type }) => { const shortId = toShortId(id) const logFn = logTypes[type] if (!logFn) { logger.error(`Invalid api.exitLog type '${type}'.`, shortId)
def abbreviate(words): regex = "[A-Z]+['a-z]*|['a-z]+" return ''.join(word[0].upper() for word in re.findall(regex, words))
public Regex RelativeMonthRegex { get; } public static readonly Regex RelativeDayRegex= new Regex( DateTimeDefinitions.RelativeDayRegex, RegexOptions.IgnoreCase | RegexOptions.Singleline);
return &Bucket{b: b} } // ReadAll is a shortcut for creating a Reader via NewReader and reading the entire blob. func (b *Bucket) ReadAll(ctx context.Context, key string) ([]byte, error) { r, err := b.NewReader(ctx, key) if err != nil { return nil, err
URL:  r.URL, } html, err := md.Process(m, fpath, body, ctx) if err != nil { return http.StatusInternalServerError, err }
ctypes.c_int(end_iteration))) return self def _load_params(self): """Loads model parameters by calling LGBM_BoosterGetConfig.""" buffer_len = 2 << 20 tmp_out_len = ctypes.c_int64(0)
#endregion // Since v5.3 [Obsolete("Please use GetUninitializedFields extension method instead")] public ISet<string> UninitializedFields { get { return uninitializedFields; }
def _adjust_cbar(self, cbar, label, dim): noalpha = math.floor(self.style[self.cyclic_index].get('alpha', 1)) == 1 for lb in ['clabel', 'labels']: labelsize = self._fontsize(lb, common=False).get('fontsize') if labelsize is not None: break
} // NewNATMapper is exposed for testing func NewNATMapper(ct Conntracker) NATMapper { return NATMapper{ct} } func toMapping(f Flow) *endpointMapping {
return null; } if (isLocalFile(loadingUrl) || loadingUrl.getHost().equalsIgnoreCase(bridge.getHost()) || (bridge.getServerUrl() == null && !bridge.getAppAllowNavigationMask().matches(loadingUrl.getHost()))) { Logger.debug("Handling local request: " + request.getUrl().toString()); return handleLocalRequest(request, handler); } else {
*/ public function enqueue_styles() { wp_enqueue_style( 'sensei-settings-api', Sensei()->plugin_url . 'assets/css/settings.css', '', Sensei()->version ); } // End enqueue_styles()
date, key)); using var httpRequestMessage = new HttpRequestMessage( HttpMethod.Get, $"{host}/dbs/{_dataStoreConfiguration.DatabaseId}/colls/{_collectionConfiguration.CollectionId}/pkranges") {
public void onReceive(Context context, Intent intent) { if (NetworkUtils.isInternetConnectionEstablished(NearbyActivity.this)) { refreshView(LOCATION_SIGNIFICANTLY_CHANGED); snackbar.dismiss(); } else { snackbar.show(); } } };
* Props data to use when rendering a single gift card component. * @typedef {Object} GiftCardProps * * @property {function} removeGiftCardWithCode Function for removing a gift card associated with the code passed into this talon. */
buf.seek( offset2 ); std::vector<std::string> tags = StringSplit( buf.toString( length2 ), "\n" ); for (auto & tag : tags) { tagtag if ( encoding.empty() ) encoding = get_tag( *it, tag1, sep1 );
continue; } $value = $this->get_submitted_setting_value( $field ); if ( null === $value ) { $value = $field['default']; }  if ( isset( $value ) ) { add_post_meta( $quiz_id, '_' . $field['id'], $value ); }
* @return map that contains accessToken , null if acessToken is empty. */ protected Map<String, String> getSecurityHeaders() { Map<String, String> spasHeaders = this.securityProxy.getAccessToken(); if (spasHeaders.isEmpty()) { return null; } return spasHeaders; }
constructor(props: Props) { super(props); const { asset } = props; const { decimals } = asset; this.state = { decimals,
yield { 'resource_id': violation.resource_id, 'resource_type': violation.resource_type, 'resource_name': violation.resource_id, 'full_name': violation.full_name, 'rule_index': violation.rule_index, 'rule_name': violation.rule_name,
return gd.value.AsNumber(), gd.timestamp, nil } // SynchronizedCopy atomically saves the current value. func (g *Aggregator) SynchronizedCopy(oa export.Aggregator, _ *metric.Descriptor) error { o, _ := oa.(*Aggregator) if o == nil {
} return nil }
@Override public void onFailure(Throwable t) { // downgrade to system.peers if we get an invalid query or server error with specific // message as this indicates the peers_v2 table does not exist. if (t instanceof InvalidQueryException || (t instanceof ServerError && t.getMessage().contains("Unknown keyspace/cf pair (system.peers_v2)"))) { isPeersV2 = false; MoreFutures.propagateFuture(peersFuture, selectPeersFuture(connection)); } else {
Example -------   To group atoms with the same mass together::  >>> ag.groupby('masses') {12.010999999999999: <AtomGroup with 462 atoms>, 14.007: <AtomGroup with 116 atoms>, 15.999000000000001: <AtomGroup with 134 atoms>}  To group atoms with the same residue name and mass together:: >>> ag.groupby('resnames', 'masses')
Notes ----- Unbatching will break each field tensor of the batched graph into smaller partitions. For simpler tasks such as node/edge state aggregation, try to use readout functions.
const day = match[3]; const filename = match[4]; slug = `/blog/${year}/${month}/${day}/${filename}.html`; const date = new Date(year, month - 1, day);
node_pubkey (str): base58 encoded public key. Returns: The id of the last block the node has voted on. If the node didn't cast any vote then the genesis block id is returned. """
@outcome = Mongo::CRUD::Outcome.new(test['outcome']) end @expected_results = @operations.map do |o| # We check both o.key('error') and o['error'] to provide a better # error message in case error: false is ever needed in the tests if o.key?('error') if o['error'] {'error' => true}
* @param callback the callback {@link Consumer} * @return the callback to enable fluent programming */ // TODO rename to 'addOnSetNextValueCallback()'; apply same naming also for // other callbacks public void onSetNextValue(Consumer<Value<T>> callback); /** * Removes an onSetNextValue callback.
results (dict): Result dict from loading pipeline. Returns: dict: Updated result dict. """ self._pad_img(results)
if ( !selectedPool || !selectedWallet || (selectedWallet.lastDelegatedStakePoolId || selectedWallet.delegatedStakePoolId) === selectedPool.id ) return 0;
} // timestamp change->sourceTimestamp.from_ns(sqlite3_column_int64(load_writer_stmt_, 5)); changes.insert(changes.begin(), change); }
goog.require('goog.userAgent'); goog.require('goog.math.Rect'); /** * Class for a workspace.  This is an onscreen area with optional trashcan, * scrollbars, bubbles, and dragging.
if context.client_context: headers["X-Amz-Client-Context"] = context.client_context data = json.dumps(json_safe(event)) if isinstance(event, dict) else str(event) LOG.debug("Forwarding Lambda invocation to LAMBDA_FORWARD_URL: %s" % config.LAMBDA_FORWARD_URL) result = safe_requests.post(url, data, headers=headers) content = run_safe(lambda: to_str(result.content)) or result.content
* @param \Shopsys\FrameworkBundle\Model\Pricing\Group\PricingGroup $pricingGroup * @return bool */ public function existsCustomerUserWithPricingGroup(PricingGroup $pricingGroup) { $query = $this->em->createQuery(' SELECT COUNT(u)
lines = [] output = output_writer.ReadOutput() # TODO: add test output writer that produces strings also see: # https://github.com/log2timeline/plaso/issues/1963 output = codecs.decode(output, 'utf-8') for line in output.split('\n'): lines.append(line)
} if fulfillment.type_name == 'threshold-sha-256': subconditions = [ _fulfillment_to_details(cond['body']) for cond in fulfillment.subconditions ] return { 'type': 'threshold-sha-256', 'threshold': fulfillment.threshold, 'subconditions': subconditions, } raise UnsupportedTypeError(fulfillment.type_name)
const { if (not transactions_) { types::SharedTxsCollectionType result; auto transactions_amount = std::accumulate(std::begin(batches_), std::end(batches_), 0ul, [](size_t acc_size, auto batch) { return acc_size + batch->transactions().size(); }); result.reserve(transactions_amount); for (const auto &batch : batches_) { auto &transactions = batch->transactions();
for i, a in enumerate(FastaM10Iterator(open(os.path.join(path, filename)))): print("#%i, %s" % (i + 1, a)) for r in a: if "-" in r.seq: self.assertEqual(r.seq.alphabet.gap_char, "-") else: assert not hasattr(r.seq.alphabet, "gap_char")
A dictionary containing the keys 'name' and 'ident' which are mapped to the 'name' and 'id' node elements in cyjs format. All other keys are ignored. Default is `None` which results in the default mapping ``dict(name="name", ident="id")``. Returns -------
if (isInternetOn(context)) { return true; } else Snackbar.make(view,R.string.internet_is_off,Snackbar.LENGTH_SHORT).show(); return false; } public static void promptSpeechInput(Activity activity, int requestCode, View parentView, String promtMsg) {
# @api private class RoundTripTimeAverager # The weighting factor (alpha) for calculating the average moving # round trip time. RTT_WEIGHT_FACTOR = 0.2.freeze private_constant :RTT_WEIGHT_FACTOR def initialize @last_round_trip_time = nil
if isinstance(arrowsize, list): if len(arrowsize) != len(edge_pos): raise ValueError("arrowsize should have the same length as edgelist") else: mutation_scale = arrowsize  # scale factor of arrow head
Examples -------- >>> from networkx.algorithms.threshold import is_threshold_graph >>> G = nx.path_graph(3) >>> is_threshold_graph(G) True
fromDataplane: fromDriverR, } return dataplaneConnection, cmd }
if o.Storage != nil && o.Storage.requiresEFSCreation() { parameters = append(parameters, "EFSWorkloads,") }  parameters = append(parameters, forceTriggerEnvController) return parameters }
if ((initial_announcements_.count > 0) && (initial_announcements_.period <= c_TimeZero)) { // Force a small interval (1ms) between initial announcements logWarning(RTPS_PDP, "Initial announcement period is not strictly positive. Changing to 1ms."); initial_announcements_.period = { 0, 1000000 }; }
boost::optional<protocol::Block> result; storage_->getBlocksFrom(1) .filter([&hash](auto block) { return block->hash() == hash; }) .map([](auto block) { return std::dynamic_pointer_cast<shared_model::proto::Block>(block) ->getTransport(); }) .as_blocking()
<h1>Error 503 Backend is unhealthy</h1> <p>Backend is unhealthy</p> <h3>Guru Mediation:</h3> <p>Details: cache-sea4438-SEA 1645530233 3081349336</p> <hr> <p>Varnish cache server</p> </body>
""" self.ag.center_of_mass(pbc=True) def time_center_of_geometry_default(self, num_atoms): """Benchmark center_of_geometry calculation with pbc and unwrap inactive.
} helperworker.trackMods(backendOverride || null); require("./user").initialize(exports.getBackend(), options.loadReason); require("./recall").initialize(hideInfoPanel); }; exports.onUnload = function (reason) {
rootCategoryId: null, currentPage: 1, pageSize: 6, prevPageTotal: null, chosenFilterOptions: getFilterParams(), appliedFilterOptions: getFilterParams() };
return this.jdbcTemplate.queryForList(sqlBuilder.toString(), Long.class, new Object[] { officeId}); } catch (final EmptyResultDataAccessException e) { throw new OfficeNotFoundException(officeId); } } } No newline at end of file
public abstract String getTable() throws TableNotFoundException; /** * @return tablet that is compacting * @since 1.7.0 */ public abstract TabletId getTablet();
package com.getcapacitor; import org.json.JSONException; import org.junit.Test; import static org.junit.Assert.*;  public class JSObjectTest { @Test
from zipline.utils.calendars.exchange_calendar_lse import LSEExchangeCalendar from zipline.utils.calendars.exchange_calendar_tsx import TSXExchangeCalendar NYSE_CALENDAR_EXCHANGE_NAMES = frozenset([ "NYSE",
$questionThemeName = SettingsUser::getUserSettingValue('preselectquestiontheme', null, null, null, Yii::app()->getConfig('preselectquestiontheme')); } if (empty($questionThemeName)) { $questionThemeName = QuestionTheme::model()->getBaseThemeNameForQuestionType($questionType); } $oCurrentGroup = QuestionGroup::model()->findByPk($gid); $temporaryTitle =
//   a) Add 'MetadataUpdated' field to 'api.Container' //   b) Add 'DomainNameServers' and 'DomainNameSearchList' in `api.ENI` // 8) //   a) Add 'UseExecutionRole' in `api.ECRAuthData` //   b) Add `executionCredentialsID` in `api.Task` ECSDataVersion = 8 // ecsDataFile specifies the filename in the ECS_DATADIR
click_button '利用規約に同意して参加する' assert_text 'サインアップメールをお送りしました。メールからサインアップを完了させてください。' user = User.find_by(email: email) visit_with_auth user_path(user), 'taguo' assert_text 'タグ夫' end end
// Licensed under the MIT License (MIT). See LICENSE in the repo root for license information. // ------------------------------------------------------------------------------------------------- using Hl7.Fhir.Model; using Microsoft.Health.Fhir.Tests.Common; using Microsoft.Health.Fhir.Tests.Common.FixtureParameters; using Newtonsoft.Json;
self._idx += offset self._idx %= len(self.items) new = self.curitem() elif self._mode == self.Modes.exception: raise elif self._mode == self.Modes.edge:  # pragma: no branch new_idx = self._idx + offset right_edge = len(self._items) - 1 left_edge = 0
</div> </div> <!-- /#submitdiv --> <div class="pods-submittable-fields"> <?php do_meta_boxes( 'pods_edit', 'side', $pod ); ?> </div> </div> </div> </div>
@Test public void shouldLimitNumberOfResponsesToNodeDataRequests() throws Exception { new EthServer(blockchain, worldStateArchive, ethMessages); when(worldStateArchive.getNodeData(HASH1)).thenReturn(Optional.of(VALUE1)); when(worldStateArchive.getNodeData(HASH2)).thenReturn(Optional.of(VALUE2)); ethMessages.dispatch(
var systemAndCode = value as ISystemAndCode; if (systemAndCode == null || string.IsNullOrEmpty(systemAndCode.Code) { yield return null; }
dir.setFilter(QDir::Files); foreach(QString dirFile, dir.entryList()) { LOG_warn << "Removing unexpected temporary file found from previous executions: " << dirFile.toUtf8().constData(); dir.remove(dirFile); } #endif
return PolygonMasks(resized_masks, *out_shape) def shear(self, out_shape, magnitude, direction='horizontal', border_value=0, interpolation='bilinear'): raise NotImplementedError def to_bitmap(self):
# - deck_cost is a computable based on sum # - count also has cardinality 1 of the return set <int64>(F.deck_cost / count(F.deck)) LIMIT 1 ); ''', [ [
* @author [TsungHan Ho](https://github.com/dalaoqi) */ #include <algorithm> #include <cassert> #include <iostream> #include <vector>
import tech.pegasys.pantheon.tests.acceptance.dsl.node.Node; import java.io.IOException; public class Blockchain { public Condition blockNumberMustBeLatest(final Node node) throws IOException {
package net.sourceforge.pmd.lang.java.ast; /** * Marker interface for type body declarations, such as annotation members, field or method declarations. * * @author Clément Fournier */
if (resumeRes != null && resumeRes.media != null) { resumeRes.media.setThumbready(false); resumeRes.media.setMimeType(HTTPResource.VIDEO_TRANSCODE); } /**
def __repr__(self): repr_str = self.__class__.__name__ repr_str += '(transforms={})'.format(self.transforms) return repr_str
self.rule_name = rule_name self.rule_index = rule_index self.rule = rule self.blacklist_violation_reason = "rule specified ({}) together is \ not allowed" self.whitelist_violation_reason = "rule specified ({}) is required" def rule_requirements(self): """Used to create violation reason.
* npctalk (sends message to surrounding area) * usage: npctalk "<message>"{,"<npc name>"{,<show_npcname>}}; *  <show_npcname>: *      1: shows npc name like "Npc : message" *      0: hide npc name *------------------------------------------*/ BUILDIN(npctalk) { struct npc_data* nd; int show_npcname = 1; const char *str = script_getstr(st,2); if (script_hasdata(st, 3)) {
import org.h2.table.TableFilter; /** * An index for a function that returns a result set. Search in this index * performs scan over all rows and should be avoided. */ public class FunctionIndex extends BaseIndex {
reachabilityTest reachabilityTest challenge        *v1alpha1.Challenge expectedErr      bool } tests := []testT{ {
void ServerApp::Run() { DebugLogger() << "FreeOrion server waiting for network events"; std::cout << "FreeOrion server waiting for network events" << std::endl; while (1) { if (m_io_service.run_one()) m_networking.HandleNextEvent();
endHour = 23; endMin = 59; } else if (DateTimeDefinitions.BusinessHourSplitStrings.All(o => trimedText.Contains(o))) { timex = "TBH"; beginHour = 8;
create_inventory_parser.add_argument( 'import_as', metavar=('MODEL_NAME',), nargs='?', help='Import the inventory when complete, requires a model name') create_inventory_parser.add_argument( '--background',
AvroFileAppender(Schema schema, OutputFile file, Function<Schema, DatumWriter<?>> createWriterFunc, CodecFactory codec, Map<String, String> metadata, boolean overwrite) throws IOException { this.stream = overwrite ? file.createOrOverwrite() : file.create(); this.writer = newAvroWriter(schema, stream, createWriterFunc, codec, metadata); }
from tests.test_libs import test_utils @test_utils.python3_only @test_utils.with_cloud_emulators('datastore') class OssFuzzGenerateCertsTest(unittest.TestCase): """Test oss_fuzz_generate_certs."""
package sqle import ( "fmt"  "github.com/dolthub/go-mysql-server/sql" "github.com/dolthub/dolt/go/libraries/doltcore/doltdb"
if (!string.IsNullOrEmpty(exactMatch.Groups["special"].Value)) { var specialYearTimex = this.config.SpecialYearPrefixesMap[exactMatch.Groups["special"].Value.ToLowerInvariant()]; ret.Timex = year.ToString("D4") + specialYearTimex; ret.Success = true; return ret; } } }
corpus_directories.insert(0, merge_directory) if use_minijail: bind_corpus_dirs(minijail_chroot, [merge_directory]) merge_result = runner.merge( corpus_directories,
detectedPPMCol = datamap[detectedNuc + ".P"] + 1 # Make a list of the data lines involving the detected if (str(toResNum) in peaklist.residue_dict(detectedNuc)) and ( str(originResNum) in peaklist.residue_dict(detectedNuc) ): detectedList = peaklist.residue_dict(detectedNuc)[str(toResNum)] originList = peaklist.residue_dict(detectedNuc)[str(originResNum)] returnLine = detectedList[0]
@JsonProperty @NotNull private boolean runAsTaskUser = true; public List<SingularityExecutorShellCommandOptionDescriptor> getOptions() { return options;
return true; } if (isWeb0s()) { return true; }
} public void handleGoAway(Channel parentChannel, int lastStreamId, GoAwayException exception) { log.debug(() -> "Received GOAWAY on " + parentChannel + " with lastStreamId of " + lastStreamId); try { MultiplexedChannelRecord multiplexedChannel = parentChannel.attr(MULTIPLEXED_CHANNEL).get();
import { observer } from 'mobx-react'; import { defineMessages, intlShape } from 'react-intl'; import styles from './DisplaySettings.scss'; import themeLightBluePreview from '../../../assets/images/themes/light-blue.png'; import themeCardanoPreview from '../../../assets/images/themes/cardano.png'; import themeDarkBluePreview from '../../../assets/images/themes/dark-blue.png'; const messages = defineMessages({ themeLabel: {
